d1a46792e0ce5ee49a45a2bfa6fa3bde
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["disabled", "editable", "label", "error", "selectionColor", "cursorColor", "underlineColor", "underlineStyle", "activeUnderlineColor", "textColor", "dense", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "forceFocus", "onBlur", "onChangeText", "onLayoutAnimatedText", "onLabelTextLayout", "onLeftAffixLayoutChange", "onRightAffixLayoutChange", "onInputLayout", "left", "right", "placeholderTextColor", "testID", "contentStyle", "scaledLabel"],
  _excluded2 = ["fontSize", "lineHeight", "fontWeight", "height", "paddingHorizontal", "textAlign"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Underline = require("./Addons/Underline");
var _enums = require("./Adornment/enums");
var _TextInputAdornment = _interopRequireWildcard(require("./Adornment/TextInputAdornment"));
var _constants = require("./constants");
var _helpers = require("./helpers");
var _InputLabel = _interopRequireDefault(require("./Label/InputLabel"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var TextInputFlat = function TextInputFlat(_ref) {
  var _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$editable = _ref.editable,
    editable = _ref$editable === void 0 ? true : _ref$editable,
    label = _ref.label,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    customSelectionColor = _ref.selectionColor,
    cursorColor = _ref.cursorColor,
    underlineColor = _ref.underlineColor,
    underlineStyle = _ref.underlineStyle,
    activeUnderlineColor = _ref.activeUnderlineColor,
    textColor = _ref.textColor,
    dense = _ref.dense,
    style = _ref.style,
    theme = _ref.theme,
    _ref$render = _ref.render,
    render = _ref$render === void 0 ? function (props) {
      return React.createElement(_reactNative.TextInput, props);
    } : _ref$render,
    _ref$multiline = _ref.multiline,
    multiline = _ref$multiline === void 0 ? false : _ref$multiline,
    parentState = _ref.parentState,
    innerRef = _ref.innerRef,
    onFocus = _ref.onFocus,
    forceFocus = _ref.forceFocus,
    onBlur = _ref.onBlur,
    onChangeText = _ref.onChangeText,
    onLayoutAnimatedText = _ref.onLayoutAnimatedText,
    onLabelTextLayout = _ref.onLabelTextLayout,
    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,
    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,
    onInputLayout = _ref.onInputLayout,
    left = _ref.left,
    right = _ref.right,
    placeholderTextColor = _ref.placeholderTextColor,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'text-input-flat' : _ref$testID,
    contentStyle = _ref.contentStyle,
    scaledLabel = _ref.scaledLabel,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var isAndroid = _reactNative.Platform.OS === 'android';
  var colors = theme.colors,
    isV3 = theme.isV3,
    roundness = theme.roundness;
  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;
  var hasActiveOutline = parentState.focused || error;
  var _ref2 = (0, _helpers.getConstants)(isV3),
    LABEL_PADDING_TOP = _ref2.LABEL_PADDING_TOP,
    FLAT_INPUT_OFFSET = _ref2.FLAT_INPUT_OFFSET,
    MIN_HEIGHT = _ref2.MIN_HEIGHT,
    MIN_WIDTH = _ref2.MIN_WIDTH;
  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},
    fontSizeStyle = _ref3.fontSize,
    lineHeightStyle = _ref3.lineHeight,
    fontWeight = _ref3.fontWeight,
    height = _ref3.height,
    paddingHorizontal = _ref3.paddingHorizontal,
    textAlign = _ref3.textAlign,
    viewStyle = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
  var lineHeight = lineHeightStyle || (_reactNative.Platform.OS === 'web' ? fontSize * 1.2 : undefined);
  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';
  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
    left: left,
    right: right
  });
  var _ref4 = (0, _helpers.calculateFlatInputHorizontalPadding)({
      adornmentConfig: adornmentConfig,
      isV3: isV3
    }),
    paddingLeft = _ref4.paddingLeft,
    paddingRight = _ref4.paddingRight;
  if (isPaddingHorizontalPassed) {
    paddingLeft = paddingHorizontal;
    paddingRight = paddingHorizontal;
  }
  var leftLayout = parentState.leftLayout,
    rightLayout = parentState.rightLayout;
  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
    adornmentConfig: adornmentConfig,
    rightAffixWidth: rightAffixWidth,
    leftAffixWidth: leftAffixWidth,
    paddingHorizontal: paddingHorizontal,
    inputOffset: FLAT_INPUT_OFFSET,
    mode: _enums.InputMode.Flat,
    isV3: isV3
  });
  var _ref5 = (0, _helpers.getFlatInputColors)({
      underlineColor: underlineColor,
      activeUnderlineColor: activeUnderlineColor,
      customSelectionColor: customSelectionColor,
      textColor: textColor,
      disabled: disabled,
      error: error,
      theme: theme
    }),
    inputTextColor = _ref5.inputTextColor,
    activeColor = _ref5.activeColor,
    underlineColorCustom = _ref5.underlineColorCustom,
    placeholderColor = _ref5.placeholderColor,
    errorColor = _ref5.errorColor,
    backgroundColor = _ref5.backgroundColor,
    selectionColor = _ref5.selectionColor;
  var containerStyle = {
    backgroundColor: backgroundColor,
    borderTopLeftRadius: theme.roundness,
    borderTopRightRadius: theme.roundness
  };
  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
  var labelWidth = parentState.labelLayout.width;
  var labelHeight = parentState.labelLayout.height;
  var labelHalfWidth = labelWidth / 2;
  var labelHalfHeight = labelHeight / 2;
  var baseLabelTranslateX = (_reactNative.I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (_reactNative.I18nManager.getConstants().isRTL ? -1 : 1) * paddingLeft;
  var minInputHeight = dense ? (label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT) - _constants.LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;
  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);
  if (height && typeof height !== 'number') {
    console.warn('Currently we support only numbers in height prop');
  }
  var paddingSettings = {
    height: height ? +height : null,
    labelHalfHeight: labelHalfHeight,
    offset: FLAT_INPUT_OFFSET,
    multiline: multiline ? multiline : null,
    dense: dense ? dense : null,
    topPosition: topPosition,
    fontSize: fontSize,
    lineHeight: lineHeight,
    label: label,
    scale: fontScale,
    isAndroid: isAndroid,
    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)
  };
  var pad = (0, _helpers.calculatePadding)(paddingSettings);
  var paddingFlat = (0, _helpers.adjustPaddingFlat)(Object.assign({}, paddingSettings, {
    pad: pad
  }));
  var baseLabelTranslateY = -labelHalfHeight - (topPosition + _constants.MINIMIZED_LABEL_Y_OFFSET);
  var _React$useRef = React.useRef([new _reactNative.Animated.Value(0), new _reactNative.Animated.Value(1)]),
    placeholderOpacityAnims = _React$useRef.current;
  var placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];
  var placeholderTextColorBasedOnState = parentState.displayPlaceholder ? placeholderTextColor != null ? placeholderTextColor : placeholderColor : 'transparent';
  var minHeight = height || (dense ? label ? _constants.MIN_DENSE_HEIGHT_WL : _constants.MIN_DENSE_HEIGHT : MIN_HEIGHT);
  var flatHeight = inputHeight + (!height ? dense ? _constants.LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);
  var iconTopPosition = (flatHeight - _constants.ADORNMENT_SIZE) / 2;
  var leftAffixTopPosition = leftLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({
    height: flatHeight
  }, paddingFlat, {
    affixHeight: leftLayout.height
  })) : null;
  var rightAffixTopPosition = rightLayout.height ? (0, _helpers.calculateFlatAffixTopPosition)(Object.assign({
    height: flatHeight
  }, paddingFlat, {
    affixHeight: rightLayout.height
  })) : null;
  var labelProps = {
    label: label,
    onLayoutAnimatedText: onLayoutAnimatedText,
    onLabelTextLayout: onLabelTextLayout,
    placeholderOpacity: placeholderOpacity,
    labelError: error,
    placeholderStyle: styles.placeholder,
    baseLabelTranslateY: baseLabelTranslateY,
    baseLabelTranslateX: baseLabelTranslateX,
    font: font,
    fontSize: fontSize,
    lineHeight: lineHeight,
    fontWeight: fontWeight,
    labelScale: labelScale,
    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
    topPosition: topPosition,
    paddingLeft: isAndroid ? _reactNative.I18nManager.isRTL ? paddingRight : paddingLeft : paddingLeft,
    paddingRight: isAndroid ? _reactNative.I18nManager.isRTL ? paddingLeft : paddingRight : paddingRight,
    hasActiveOutline: hasActiveOutline,
    activeColor: activeColor,
    placeholderColor: placeholderColor,
    errorColor: errorColor,
    roundness: roundness,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
    testID: testID,
    contentStyle: contentStyle,
    inputContainerLayout: parentState.inputContainerLayout,
    labelTextLayout: parentState.labelTextLayout,
    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,
    isV3: isV3
  };
  var affixTopPosition = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _enums.AdornmentSide.Left, leftAffixTopPosition), _enums.AdornmentSide.Right, rightAffixTopPosition);
  var onAffixChange = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), _enums.AdornmentSide.Right, onRightAffixLayoutChange);
  var adornmentProps = {
    paddingHorizontal: paddingHorizontal,
    adornmentConfig: adornmentConfig,
    forceFocus: forceFocus,
    topPosition: (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _enums.AdornmentType.Affix, affixTopPosition), _enums.AdornmentType.Icon, iconTopPosition),
    onAffixChange: onAffixChange,
    isTextInputFocused: parentState.focused,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
    disabled: disabled
  };
  if (adornmentConfig.length) {
    adornmentProps = Object.assign({}, adornmentProps, {
      left: left,
      right: right,
      textStyle: Object.assign({}, font, {
        fontSize: fontSize,
        lineHeight: lineHeight,
        fontWeight: fontWeight
      }),
      visible: parentState.labeled
    });
  }
  return React.createElement(_reactNative.View, {
    style: [containerStyle, viewStyle]
  }, React.createElement(_Underline.Underline, {
    style: underlineStyle,
    hasActiveOutline: hasActiveOutline,
    parentState: parentState,
    underlineColorCustom: underlineColorCustom,
    error: error,
    colors: colors,
    activeColor: activeColor,
    theme: theme
  }), React.createElement(_reactNative.View, {
    onLayout: onInputLayout,
    style: [styles.labelContainer, {
      minHeight: minHeight
    }]
  }, !isAndroid && multiline && !!label && !disabled && React.createElement(_reactNative.View, {
    testID: "patch-container",
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {
      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,
      left: paddingLeft,
      right: paddingRight
    }]
  }), label ? React.createElement(_InputLabel.default, _extends({
    labeled: parentState.labeled,
    error: parentState.error,
    focused: parentState.focused,
    scaledLabel: scaledLabel,
    wiggle: Boolean(parentState.value && labelProps.labelError),
    labelLayoutMeasured: parentState.labelLayout.measured,
    labelLayoutWidth: parentState.labelLayout.width,
    labelLayoutHeight: parentState.labelLayout.height
  }, labelProps)) : null, render === null || render === void 0 ? void 0 : render(Object.assign({}, rest, {
    ref: innerRef,
    onChangeText: onChangeText,
    placeholder: rest.placeholder,
    editable: !disabled && editable,
    selectionColor: selectionColor,
    cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,
    placeholderTextColor: placeholderTextColorBasedOnState,
    onFocus: onFocus,
    onBlur: onBlur,
    underlineColorAndroid: 'transparent',
    multiline: multiline,
    style: [styles.input, multiline && height ? {
      height: flatHeight
    } : {}, paddingFlat, Object.assign({
      paddingLeft: paddingLeft,
      paddingRight: paddingRight
    }, font, {
      fontSize: fontSize,
      lineHeight: lineHeight,
      fontWeight: fontWeight,
      color: inputTextColor,
      textAlignVertical: multiline ? 'top' : 'center',
      textAlign: textAlign ? textAlign : _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left',
      minWidth: Math.min(parentState.labelTextLayout.width + 2 * FLAT_INPUT_OFFSET, MIN_WIDTH)
    }), _reactNative.Platform.OS === 'web' ? {
      outline: 'none'
    } : undefined, adornmentStyleAdjustmentForNativeInput, contentStyle],
    testID: testID
  }))), React.createElement(_TextInputAdornment.default, adornmentProps));
};
var _default = TextInputFlat;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  placeholder: {
    position: 'absolute',
    left: 0
  },
  labelContainer: {
    paddingTop: 0,
    paddingBottom: 0,
    flexGrow: 1
  },
  input: {
    margin: 0,
    flexGrow: 1
  },
  inputFlat: {
    paddingTop: 24,
    paddingBottom: 4
  },
  inputFlatDense: {
    paddingTop: 22,
    paddingBottom: 2
  },
  patchContainer: {
    height: 24,
    zIndex: 2
  },
  densePatchContainer: {
    height: 22,
    zIndex: 2
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,