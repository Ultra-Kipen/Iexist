555486512504e8344ff28880fc2a482a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var formatDate = function formatDate(dateString) {
  try {
    var date = new Date(dateString);
    var koreanTime = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 12, 0));
    var year = koreanTime.getFullYear();
    var month = String(koreanTime.getMonth() + 1).padStart(2, '0');
    var day = String(koreanTime.getDate()).padStart(2, '0');
    var hours = String(koreanTime.getHours()).padStart(2, '0');
    var minutes = String(koreanTime.getMinutes()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  } catch (error) {
    return dateString;
  }
};
var PostPreview = function PostPreview(_ref) {
  var postType = _ref.postType,
    post = _ref.post,
    onPress = _ref.onPress;
  var formattedDate = formatDate(post.created_at);
  var summarizedContent = post.content.length > 100 ? `${post.content.substring(0, 100)}...` : post.content;
  var handlePress = function handlePress() {
    onPress(post.post_id);
  };
  var renderImage = function renderImage(source, style, testID) {
    var imageProps = Object.assign({
      source: source,
      style: style
    }, testID ? {
      testID: testID
    } : {});
    return (0, _jsxRuntime.jsx)(_reactNative.Image, Object.assign({}, imageProps));
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: styles.container,
    onPress: handlePress,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.userInfo,
        children: !post.is_anonymous && post.user ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [renderImage(post.user.profile_image_url ? {
            uri: post.user.profile_image_url
          } : require('../assets/images/default_avatar.png'), styles.avatar, 'user-profile-image'), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.username,
            children: post.user.nickname
          })]
        }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [renderImage(require('../assets/images/anonymous_avatar.png'), styles.avatar, 'anonymous-profile-image'), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.username,
            children: "\uC775\uBA85"
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.date,
        children: formattedDate
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.content,
      children: [(postType === 'someoneDay' || postType === 'comfort') && post.title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        numberOfLines: 1,
        ellipsizeMode: "tail",
        children: post.title
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.contentText,
        numberOfLines: 3,
        ellipsizeMode: "tail",
        children: summarizedContent
      }), postType === 'myDay' && post.emotions && post.emotions.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.tagsContainer,
        children: post.emotions.map(function (emotion) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.tag, {
              backgroundColor: emotion.color + '30'
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.tagText, {
                color: emotion.color
              }],
              children: emotion.name
            })
          }, emotion.emotion_id);
        })
      }), (postType === 'someoneDay' || postType === 'comfort') && post.tags && post.tags.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.tagsContainer,
        children: post.tags.map(function (tag) {
          return (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.tag,
            children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.tagText,
              children: ["#", tag.name]
            })
          }, tag.tag_id);
        })
      })]
    }), post.image_url && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.imageContainer,
      children: renderImage({
        uri: post.image_url
      }, styles.image, 'post-image')
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.footer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.stat,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.statIcon,
          children: "\u2665"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.statText,
          children: post.like_count
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.stat,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.statIcon,
          children: "\uD83D\uDCAC"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.statText,
          children: post.comment_count
        })]
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  avatar: {
    width: 24,
    height: 24,
    borderRadius: 12,
    marginRight: 8
  },
  username: {
    fontSize: 14,
    fontWeight: '500',
    color: '#14171A'
  },
  date: {
    fontSize: 12,
    color: '#657786'
  },
  content: {
    marginBottom: 12
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#14171A',
    marginBottom: 4
  },
  contentText: {
    fontSize: 14,
    color: '#14171A',
    lineHeight: 20,
    marginBottom: 8
  },
  tagsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap'
  },
  tag: {
    backgroundColor: '#E8EDF0',
    borderRadius: 16,
    paddingHorizontal: 8,
    paddingVertical: 4,
    marginRight: 8,
    marginBottom: 4
  },
  tagText: {
    fontSize: 12,
    color: '#4A6572'
  },
  imageContainer: {
    marginBottom: 12,
    borderRadius: 8,
    overflow: 'hidden'
  },
  image: {
    width: '100%',
    height: 150,
    resizeMode: 'cover'
  },
  footer: {
    flexDirection: 'row',
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    borderTopColor: '#E1E8ED',
    paddingTop: 12
  },
  stat: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16
  },
  statIcon: {
    fontSize: 14,
    marginRight: 4,
    color: '#657786'
  },
  statText: {
    fontSize: 14,
    color: '#657786'
  }
});
var _default = exports.default = PostPreview;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,