54426eeb3040e6ffd25af04cc3bdefe1
_getJestObj().mock('react-native', function () {
  return {
    Appearance: {
      getColorScheme: jest.fn().mockImplementation(function () {
        return 'light';
      }),
      addChangeListener: jest.fn().mockImplementation(function () {
        return {
          remove: jest.fn()
        };
      })
    }
  };
});
_getJestObj().mock('../../src/constants/theme', function () {
  return {
    THEMES: {
      light: {
        colors: {
          background: '#FFFFFF'
        }
      },
      dark: {
        colors: {
          background: '#121212'
        }
      }
    },
    DEFAULT_THEME: 'system'
  };
});
_getJestObj().mock('../../src/hooks/useLocalStorage', function () {
  return {
    __esModule: true,
    default: jest.fn().mockImplementation(function () {
      return [mockStoredTheme, jest.fn().mockImplementation(function (theme) {
        mockStoredTheme = theme;
        return Promise.resolve();
      }), jest.fn().mockResolvedValue(undefined)];
    })
  };
});
_getJestObj().mock('react', function () {
  var actualReact = jest.requireActual('react');
  return Object.assign({}, actualReact, {
    useContext: jest.fn(function () {
      return mockContextValue;
    }),
    createElement: actualReact.createElement
  });
});
_getJestObj().mock('../../src/contexts/ThemeContext', function () {
  return {
    ThemeContext: {
      Provider: jest.fn()
    }
  };
});
var _reactHooks = require("@testing-library/react-hooks");
var _useTheme = require("../../src/hooks/useTheme");
var _theme = require("../../src/constants/theme");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var MOCK_THEMES = {
  light: {
    colors: {
      background: '#FFFFFF'
    }
  },
  dark: {
    colors: {
      background: '#121212'
    }
  }
};
var MOCK_DEFAULT_THEME = 'system';
var mockGetColorScheme = jest.fn().mockReturnValue('light');
var mockRemove = jest.fn();
var mockAddChangeListener = jest.fn().mockReturnValue({
  remove: mockRemove
});
var mockStoredTheme = 'system';
var mockContextValue = {
  theme: 'light',
  setTheme: jest.fn(),
  isDarkMode: false,
  toggleTheme: jest.fn()
};
describe('useTheme', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockStoredTheme = _theme.DEFAULT_THEME;
    mockContextValue = {
      theme: 'light',
      setTheme: jest.fn(),
      isDarkMode: false,
      toggleTheme: jest.fn()
    };
    mockGetColorScheme.mockClear();
    mockGetColorScheme.mockReturnValue('light');
  });
  it('should return theme object with expected properties', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      result = _renderHook.result;
    expect(result.current).toHaveProperty('theme');
    expect(result.current).toHaveProperty('themeType');
    expect(result.current).toHaveProperty('themeSetting');
    expect(result.current).toHaveProperty('isDarkMode');
    expect(result.current).toHaveProperty('changeTheme');
    expect(result.current).toHaveProperty('getSystemTheme');
  });
  it('should call setStoredTheme when changeTheme is called', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      result = _renderHook2.result;
    (0, _reactHooks.act)(function () {
      result.current.changeTheme('dark');
    });
    expect(mockStoredTheme).toBe('dark');
  });
  it('should return correct theme object based on themeType', function () {
    mockContextValue.theme = 'dark';
    mockContextValue.isDarkMode = true;
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      result = _renderHook3.result;
    expect(result.current.themeType).toBe('dark');
    expect(result.current.isDarkMode).toBe(true);
  });
  it('should get system theme from Appearance API', function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      result = _renderHook4.result;
    expect(typeof result.current.getSystemTheme).toBe('function');
  });
  it('should use stored theme for themeSetting', function () {
    mockStoredTheme = 'dark';
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      result = _renderHook5.result;
    expect(result.current.themeSetting).toBe('dark');
  });
  it('should support different themes', function () {
    mockContextValue.theme = 'light';
    mockContextValue.isDarkMode = false;
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      resultLight = _renderHook6.result;
    expect(resultLight.current.isDarkMode).toBe(false);
    mockContextValue.theme = 'dark';
    mockContextValue.isDarkMode = true;
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useTheme.useTheme)();
      }),
      resultDark = _renderHook7.result;
    expect(resultDark.current.isDarkMode).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,