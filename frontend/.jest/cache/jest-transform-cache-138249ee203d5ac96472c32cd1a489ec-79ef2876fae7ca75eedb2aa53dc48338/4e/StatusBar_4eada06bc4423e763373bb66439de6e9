d631eba2d60d7467afebbd0ef7e39490
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _NativeStatusBarManagerAndroid = _interopRequireDefault(require("./NativeStatusBarManagerAndroid"));
var _NativeStatusBarManagerIOS = _interopRequireDefault(require("./NativeStatusBarManagerIOS"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _StatusBar, _NativeStatusBarManag;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, Object.assign({}, defaultValues));
}
function createStackEntry(props) {
  var _props$animated, _props$showHideTransi;
  var animated = (_props$animated = props.animated) != null ? _props$animated : false;
  var showHideTransition = (_props$showHideTransi = props.showHideTransition) != null ? _props$showHideTransi : 'fade';
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: animated
    } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: animated
    } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: animated,
      transition: showHideTransition
    } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
  };
}
var StatusBar = function (_React$Component) {
  function StatusBar() {
    var _this;
    (0, _classCallCheck2.default)(this, StatusBar);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, StatusBar, [].concat(args));
    _this._stackEntry = null;
    return _this;
  }
  (0, _inherits2.default)(StatusBar, _React$Component);
  return (0, _createClass2.default)(StatusBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._stackEntry = StatusBar.pushStackEntry(this.props);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      StatusBar.popStackEntry(this._stackEntry);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }], [{
    key: "setHidden",
    value: function setHidden(hidden, animation) {
      animation = animation || 'none';
      StatusBar._defaultProps.hidden.value = hidden;
      if (_Platform.default.OS === 'ios') {
        _NativeStatusBarManagerIOS.default.setHidden(hidden, animation);
      } else if (_Platform.default.OS === 'android') {
        _NativeStatusBarManagerAndroid.default.setHidden(hidden);
      }
    }
  }, {
    key: "setBarStyle",
    value: function setBarStyle(style, animated) {
      animated = animated || false;
      StatusBar._defaultProps.barStyle.value = style;
      if (_Platform.default.OS === 'ios') {
        _NativeStatusBarManagerIOS.default.setStyle(style, animated);
      } else if (_Platform.default.OS === 'android') {
        _NativeStatusBarManagerAndroid.default.setStyle(style);
      }
    }
  }, {
    key: "setNetworkActivityIndicatorVisible",
    value: function setNetworkActivityIndicatorVisible(visible) {
      if (_Platform.default.OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
        return;
      }
      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
      _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(visible);
    }
  }, {
    key: "setBackgroundColor",
    value: function setBackgroundColor(color, animated) {
      if (_Platform.default.OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');
        return;
      }
      animated = animated || false;
      StatusBar._defaultProps.backgroundColor.value = color;
      var processedColor = (0, _processColor.default)(color);
      if (processedColor == null) {
        console.warn(`\`StatusBar.setBackgroundColor\`: Color ${color} parsed to null or undefined`);
        return;
      }
      (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');
      _NativeStatusBarManagerAndroid.default.setColor(processedColor, animated);
    }
  }, {
    key: "setTranslucent",
    value: function setTranslucent(translucent) {
      if (_Platform.default.OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');
        return;
      }
      StatusBar._defaultProps.translucent = translucent;
      _NativeStatusBarManagerAndroid.default.setTranslucent(translucent);
    }
  }, {
    key: "pushStackEntry",
    value: function pushStackEntry(props) {
      var entry = createStackEntry(props);
      StatusBar._propsStack.push(entry);
      StatusBar._updatePropsStack();
      return entry;
    }
  }, {
    key: "popStackEntry",
    value: function popStackEntry(entry) {
      var index = StatusBar._propsStack.indexOf(entry);
      if (index !== -1) {
        StatusBar._propsStack.splice(index, 1);
      }
      StatusBar._updatePropsStack();
    }
  }, {
    key: "replaceStackEntry",
    value: function replaceStackEntry(entry, props) {
      var newEntry = createStackEntry(props);
      var index = StatusBar._propsStack.indexOf(entry);
      if (index !== -1) {
        StatusBar._propsStack[index] = newEntry;
      }
      StatusBar._updatePropsStack();
      return newEntry;
    }
  }]);
}(React.Component);
_StatusBar = StatusBar;
StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
  backgroundColor: _Platform.default.OS === 'android' ? (_NativeStatusBarManag = _NativeStatusBarManagerAndroid.default.getConstants().DEFAULT_BACKGROUND_COLOR) != null ? _NativeStatusBarManag : 'black' : 'black',
  barStyle: 'default',
  translucent: false,
  hidden: false,
  networkActivityIndicatorVisible: false
});
StatusBar._updateImmediate = null;
StatusBar._currentValues = null;
StatusBar.currentHeight = _Platform.default.OS === 'android' ? _NativeStatusBarManagerAndroid.default.getConstants().HEIGHT : null;
StatusBar._updatePropsStack = function () {
  clearImmediate(_StatusBar._updateImmediate);
  _StatusBar._updateImmediate = setImmediate(function () {
    var oldProps = _StatusBar._currentValues;
    var mergedProps = mergePropsStack(_StatusBar._propsStack, _StatusBar._defaultProps);
    if (_Platform.default.OS === 'ios') {
      if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
        _NativeStatusBarManagerIOS.default.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);
      }
      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
        _NativeStatusBarManagerIOS.default.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
      }
      if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
        _NativeStatusBarManagerIOS.default.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
      }
    } else if (_Platform.default.OS === 'android') {
      _NativeStatusBarManagerAndroid.default.setStyle(mergedProps.barStyle.value);
      var processedColor = (0, _processColor.default)(mergedProps.backgroundColor.value);
      if (processedColor == null) {
        console.warn(`\`StatusBar._updatePropsStack\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`);
      } else {
        (0, _invariant.default)(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');
        _NativeStatusBarManagerAndroid.default.setColor(processedColor, mergedProps.backgroundColor.animated);
      }
      if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
        _NativeStatusBarManagerAndroid.default.setHidden(mergedProps.hidden.value);
      }
      if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {
        _NativeStatusBarManagerAndroid.default.setTranslucent(mergedProps.translucent);
      }
    }
    _StatusBar._currentValues = mergedProps;
  });
};
module.exports = StatusBar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,