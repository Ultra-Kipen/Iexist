04b02accd1656e5d4402cf7799ee00b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.usePerformanceLogger = usePerformanceLogger;
var _GlobalPerformanceLogger = _interopRequireDefault(require("./GlobalPerformanceLogger"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var PerformanceLoggerContext = React.createContext(_GlobalPerformanceLogger.default);
if (__DEV__) {
  PerformanceLoggerContext.displayName = 'PerformanceLoggerContext';
}
function usePerformanceLogger() {
  return (0, _react.useContext)(PerformanceLoggerContext);
}
var _default = exports.default = PerformanceLoggerContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiUmVhY3QiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIiLCJfX0RFVl9fIiwiZGlzcGxheU5hbWUiLCJ1c2VQZXJmb3JtYW5jZUxvZ2dlciIsInVzZUNvbnRleHQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtJUGVyZm9ybWFuY2VMb2dnZXJ9IGZyb20gJy4vY3JlYXRlUGVyZm9ybWFuY2VMb2dnZXInO1xuXG5pbXBvcnQgR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIgZnJvbSAnLi9HbG9iYWxQZXJmb3JtYW5jZUxvZ2dlcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBUaGlzIGlzIGEgUmVhY3QgQ29udGV4dCB0aGF0IHByb3ZpZGVzIGEgc2NvcGVkIGluc3RhbmNlIG9mIElQZXJmb3JtYW5jZUxvZ2dlci5cbiAqIFdlIHdyYXAgZXZlcnkgPEFwcENvbnRhaW5lciAvPiB3aXRoIGEgUHJvdmlkZXIgZm9yIHRoaXMgY29udGV4dCBzbyB0aGUgbG9nZ2VyXG4gKiBzaG91bGQgYmUgYXZhaWxhYmxlIGluIGV2ZXJ5IGNvbXBvbmVudC5cbiAqIFNlZSBSZWFjdCBkb2NzIGFib3V0IHVzaW5nIENvbnRleHQ6IGh0dHBzOi8vcmVhY3QuZGV2L2RvY3MvY29udGV4dC5odG1sXG4gKi9cbmNvbnN0IFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dDogUmVhY3QuQ29udGV4dDxJUGVyZm9ybWFuY2VMb2dnZXI+ID1cbiAgUmVhY3QuY3JlYXRlQ29udGV4dChHbG9iYWxQZXJmb3JtYW5jZUxvZ2dlcik7XG5pZiAoX19ERVZfXykge1xuICBQZXJmb3JtYW5jZUxvZ2dlckNvbnRleHQuZGlzcGxheU5hbWUgPSAnUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBlcmZvcm1hbmNlTG9nZ2VyKCk6IElQZXJmb3JtYW5jZUxvZ2dlciB7XG4gIHJldHVybiB1c2VDb250ZXh0KFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBWUEsSUFBQUEsd0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUErQixJQUFBRyxLQUFBLEdBQUFGLE1BQUE7QUFBQSxTQUFBRyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUgsd0JBQUFHLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBUy9CLElBQU1XLHdCQUEyRCxHQUMvRHJCLEtBQUssQ0FBQ3NCLGFBQWEsQ0FBQ0MsZ0NBQXVCLENBQUM7QUFDOUMsSUFBSUMsT0FBTyxFQUFFO0VBQ1hILHdCQUF3QixDQUFDSSxXQUFXLEdBQUcsMEJBQTBCO0FBQ25FO0FBRU8sU0FBU0Msb0JBQW9CQSxDQUFBLEVBQXVCO0VBQ3pELE9BQU8sSUFBQUMsaUJBQVUsRUFBQ04sd0JBQXdCLENBQUM7QUFDN0M7QUFBQyxJQUFBTyxRQUFBLEdBQUFDLE9BQUEsQ0FBQXRCLE9BQUEsR0FFY2Msd0JBQXdCIiwiaWdub3JlTGlzdCI6W119