ee53825485c444f1c01d6de20b91c958
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _reactNativeChartKit = require("react-native-chart-kit");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _client = _interopRequireDefault(require("../services/api/client"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var StatisticsScreen = function StatisticsScreen(_ref) {
  var navigation = _ref.navigation;
  var _useState = (0, _react.useState)('daily'),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    period = _useState2[0],
    setPeriod = _useState2[1];
  var _useState3 = (0, _react.useState)({
      daily: [],
      weekly: [],
      monthly: []
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    statistics = _useState4[0],
    setStatistics = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  var _useState7 = (0, _react.useState)([]),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    emotions = _useState8[0],
    setEmotions = _useState8[1];
  (0, _react.useEffect)(function () {
    fetchEmotions();
    fetchStatistics();
  }, []);
  var fetchEmotions = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield _client.default.get('/emotions');
        setEmotions(response.data.emotions || []);
      } catch (error) {
        console.error('감정 로드 오류:', error);
      }
    });
    return function fetchEmotions() {
      return _ref2.apply(this, arguments);
    };
  }();
  var fetchStatistics = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setLoading(true);
        var response = yield _client.default.get('/statistics/emotions');
        setStatistics(response.data.statistics || {
          daily: [],
          weekly: [],
          monthly: []
        });
      } catch (error) {
        console.error('Error fetching statistics:', error);
      } finally {
        setLoading(false);
      }
    });
    return function fetchStatistics() {
      return _ref3.apply(this, arguments);
    };
  }();
  var getEmotionName = function getEmotionName(emotionId) {
    var emotion = emotions.find(function (e) {
      return e.emotion_id === emotionId;
    });
    return emotion ? emotion.name : '알 수 없음';
  };
  var getEmotionColor = function getEmotionColor(emotionId) {
    var emotion = emotions.find(function (e) {
      return e.emotion_id === emotionId;
    });
    return emotion ? emotion.color : '#999999';
  };
  var getEmotionIcon = function getEmotionIcon(emotionId) {
    var emotion = emotions.find(function (e) {
      return e.emotion_id === emotionId;
    });
    return emotion ? emotion.icon : 'help-circle-outline';
  };
  var getPeriodLabel = function getPeriodLabel() {
    switch (period) {
      case 'daily':
        return '일간 감정 통계';
      case 'weekly':
        return '주간 감정 통계';
      case 'monthly':
        return '월간 감정 통계';
      default:
        return '감정 통계';
    }
  };
  var preparePieChartData = function preparePieChartData() {
    var currentData = statistics[period] || [];
    var groupedByEmotion = currentData.reduce(function (acc, item) {
      var emotionId = item.emotion_id;
      if (!acc[emotionId]) {
        acc[emotionId] = 0;
      }
      acc[emotionId] += item.count;
      return acc;
    }, {});
    return Object.keys(groupedByEmotion).map(function (emotionId) {
      var id = Number(emotionId);
      return {
        name: getEmotionName(id),
        count: groupedByEmotion[emotionId],
        color: getEmotionColor(id),
        legendFontColor: '#7F7F7F',
        legendFontSize: 12
      };
    });
  };
  var prepareLineChartData = function prepareLineChartData() {
    var currentData = statistics[period] || [];
    var sortedData = (0, _toConsumableArray2.default)(currentData).sort(function (a, b) {
      var aDate = a.date || a.week || a.month;
      var bDate = b.date || b.week || b.month;
      return aDate.localeCompare(bDate);
    });
    var groupedByDate = sortedData.reduce(function (acc, item) {
      var dateKey = item.date || item.week || item.month;
      if (!acc[dateKey]) {
        acc[dateKey] = {};
      }
      acc[dateKey][item.emotion_id] = item.count;
      return acc;
    }, {});
    var dateLabels = Object.keys(groupedByDate);
    var datasets = emotions.slice(0, 3).map(function (emotion) {
      var data = dateLabels.map(function (dateKey) {
        return groupedByDate[dateKey][emotion.emotion_id] || 0;
      });
      return {
        data: data,
        color: function color() {
          return emotion.color;
        },
        strokeWidth: 2
      };
    });
    return {
      labels: dateLabels.map(function (dateKey) {
        if (period === 'daily') {
          return dateKey.substring(5);
        } else if (period === 'weekly') {
          return dateKey.split('-W')[1] + '주';
        } else {
          return dateKey.substring(5) + '월';
        }
      }),
      datasets: datasets
    };
  };
  var chartConfig = {
    backgroundGradientFrom: '#ffffff',
    backgroundGradientTo: '#ffffff',
    color: function color() {
      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return `rgba(0, 0, 0, ${opacity})`;
    },
    labelColor: function labelColor() {
      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return `rgba(0, 0, 0, ${opacity})`;
    },
    strokeWidth: 2,
    barPercentage: 0.5,
    useShadowColorFromDataset: false
  };
  var pieChartData = preparePieChartData();
  var lineChartData = prepareLineChartData();
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.header,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "\uAC10\uC815 \uD1B5\uACC4"
      })
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.SegmentedButtons, {
      value: period,
      onValueChange: function onValueChange(value) {
        return setPeriod(value);
      },
      buttons: [{
        value: 'daily',
        label: '일간'
      }, {
        value: 'weekly',
        label: '주간'
      }, {
        value: 'monthly',
        label: '월간'
      }],
      style: styles.periodSelector
    }), (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
        style: styles.chartCard,
        children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.chartTitle,
            testID: "period-label",
            children: getPeriodLabel()
          }), pieChartData.length > 0 ? (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.chartContainer,
            testID: "emotion-chart",
            children: (0, _jsxRuntime.jsx)(_reactNativeChartKit.PieChart, {
              data: pieChartData,
              width: _reactNative.Dimensions.get('window').width - 64,
              height: 200,
              chartConfig: chartConfig,
              accessor: "count",
              backgroundColor: "transparent",
              paddingLeft: "15",
              absolute: true
            })
          }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.noDataText,
            children: "\uB370\uC774\uD130\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4"
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
        style: styles.chartCard,
        children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.chartTitle,
            children: "\uAE30\uAC04\uBCC4 \uAC10\uC815 \uCD94\uC774"
          }), lineChartData.labels.length > 0 ? (0, _jsxRuntime.jsx)(_reactNativeChartKit.LineChart, {
            data: lineChartData,
            width: _reactNative.Dimensions.get('window').width - 32,
            height: 220,
            chartConfig: chartConfig,
            bezier: true,
            style: styles.lineChart
          }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.noDataText,
            children: "\uB370\uC774\uD130\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4"
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.legendContainer,
            children: emotions.slice(0, 3).map(function (emotion) {
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: styles.legendItem,
                children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
                  style: [styles.legendColor, {
                    backgroundColor: emotion.color
                  }]
                }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                  style: styles.legendText,
                  children: emotion.name
                })]
              }, emotion.emotion_id);
            })
          })]
        })
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
        style: styles.summaryCard,
        children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.chartTitle,
            children: "\uAC10\uC815 \uC694\uC57D"
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.emotionSummary,
            children: pieChartData.map(function (item, index) {
              return (0, _jsxRuntime.jsxs)(_reactNativePaper.Chip, {
                icon: function icon() {
                  var _emotions$find;
                  return (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
                    name: getEmotionIcon((_emotions$find = emotions.find(function (e) {
                      return e.name === item.name;
                    })) == null ? void 0 : _emotions$find.emotion_id),
                    size: 16,
                    color: item.color
                  });
                },
                style: [styles.emotionChip, {
                  backgroundColor: item.color + '20'
                }],
                children: [item.name, " (", item.count, "\uD68C)"]
              }, index);
            })
          })]
        })
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  header: {
    padding: 16,
    backgroundColor: '#fff',
    elevation: 2
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold'
  },
  periodSelector: {
    margin: 16
  },
  chartCard: {
    margin: 16,
    marginBottom: 8,
    elevation: 2
  },
  chartTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 16
  },
  chartContainer: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  lineChart: {
    marginVertical: 8,
    borderRadius: 16
  },
  noDataText: {
    textAlign: 'center',
    color: '#666',
    padding: 20
  },
  legendContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    flexWrap: 'wrap',
    marginTop: 8
  },
  legendItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
    marginBottom: 8
  },
  legendColor: {
    width: 12,
    height: 12,
    borderRadius: 6,
    marginRight: 4
  },
  legendText: {
    fontSize: 12,
    color: '#666'
  },
  summaryCard: {
    margin: 16,
    marginTop: 8,
    marginBottom: 24,
    elevation: 2
  },
  emotionSummary: {
    flexDirection: 'row',
    flexWrap: 'wrap'
  },
  emotionChip: {
    margin: 4
  }
});
var _default = exports.default = StatisticsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,