14b9d7c3e99834be62487415e88f1203
_getJestObj().mock('../../../src/services/api/client', function () {
  return {
    get: jest.fn(),
    post: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _client = _interopRequireDefault(require("../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Emotion Service Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('getAllEmotions and recordEmotions integration', function () {
    it('should fetch emotions and then record them', (0, _asyncToGenerator2.default)(function* () {
      var mockEmotions = {
        status: 'success',
        data: [{
          emotion_id: 1,
          name: '행복',
          icon: 'emoticon-happy-outline',
          color: '#FFD700'
        }, {
          emotion_id: 2,
          name: '슬픔',
          icon: 'emoticon-sad-outline',
          color: '#4682B4'
        }]
      };
      _client.default.get.mockResolvedValueOnce({
        data: mockEmotions
      });
      var mockRecordResponse = {
        status: 'success',
        data: {
          log_id: 123,
          emotion_ids: [1],
          created_at: '2025-04-09T10:00:00Z'
        }
      };
      _client.default.post.mockResolvedValueOnce({
        data: mockRecordResponse
      });
      var emotionsResult = yield _emotionService.default.getAllEmotions();
      var emotionData = {
        emotion_ids: [emotionsResult.data.data[0].emotion_id]
      };
      var recordResult = yield _emotionService.default.recordEmotions(emotionData);
      expect(_client.default.get).toHaveBeenCalledWith('/emotions');
      expect(_client.default.post).toHaveBeenCalledWith('/emotions', emotionData);
      expect(emotionsResult.data).toEqual(mockEmotions);
      expect(recordResult.data).toEqual(mockRecordResponse);
    }));
  });
  describe('getEmotionStats and getEmotionTrends integration', function () {
    it('should fetch both stats and trends for the same period', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        start_date: '2025-03-01',
        end_date: '2025-03-31'
      };
      var mockStats = {
        status: 'success',
        data: {
          total_logs: 20,
          emotions: [{
            emotion_id: 1,
            name: '행복',
            count: 12
          }, {
            emotion_id: 2,
            name: '슬픔',
            count: 8
          }]
        }
      };
      _client.default.get.mockResolvedValueOnce({
        data: mockStats
      });
      var mockTrends = {
        status: 'success',
        data: {
          trends: [{
            date: '2025-03-01',
            emotions: [{
              emotion_id: 1,
              count: 1
            }]
          }, {
            date: '2025-03-15',
            emotions: [{
              emotion_id: 2,
              count: 1
            }]
          }, {
            date: '2025-03-30',
            emotions: [{
              emotion_id: 1,
              count: 1
            }]
          }]
        }
      };
      _client.default.get.mockResolvedValueOnce({
        data: mockTrends
      });
      var statsResult = yield _emotionService.default.getEmotionStats(params);
      var trendsResult = yield _emotionService.default.getEmotionTrends(Object.assign({}, params, {
        type: 'day'
      }));
      expect(_client.default.get).toHaveBeenNthCalledWith(1, '/emotions/stats', {
        params: params
      });
      expect(_client.default.get).toHaveBeenNthCalledWith(2, '/stats/trends', {
        params: Object.assign({}, params, {
          type: 'day'
        })
      });
      expect(statsResult.data).toEqual(mockStats);
      expect(trendsResult.data).toEqual(mockTrends);
    }));
  });
  describe('getDailyEmotionCheck and recordEmotions integration', function () {
    it('should check daily status and record emotions if not checked yet', (0, _asyncToGenerator2.default)(function* () {
      var _secondCheckResult;
      var mockCheckResponse = {
        status: 'success',
        data: {
          has_checked: false
        }
      };
      _client.default.get.mockResolvedValueOnce({
        data: mockCheckResponse
      });
      var mockRecordResponse = {
        status: 'success',
        data: {
          log_id: 123,
          emotion_ids: [1, 2],
          note: '오늘 감정 기록',
          created_at: '2025-04-09T10:00:00Z'
        }
      };
      _client.default.post.mockResolvedValueOnce({
        data: mockRecordResponse
      });
      var mockCheckAfterResponse = {
        status: 'success',
        data: {
          has_checked: true,
          last_check: '2025-04-09T10:00:00Z',
          emotions: [{
            emotion_id: 1,
            name: '행복'
          }, {
            emotion_id: 2,
            name: '슬픔'
          }]
        }
      };
      _client.default.get.mockResolvedValueOnce({
        data: mockCheckAfterResponse
      });
      var checkResult = yield _emotionService.default.getDailyEmotionCheck();
      var secondCheckResult = null;
      if (!checkResult.data.data.has_checked) {
        var emotionData = {
          emotion_ids: [1, 2],
          note: '오늘 감정 기록'
        };
        yield _emotionService.default.recordEmotions(emotionData);
        secondCheckResult = yield _emotionService.default.getDailyEmotionCheck();
      }
      expect(_client.default.get).toHaveBeenNthCalledWith(1, '/emotions/daily-check');
      expect(_client.default.post).toHaveBeenCalledWith('/emotions', {
        emotion_ids: [1, 2],
        note: '오늘 감정 기록'
      });
      expect(_client.default.get).toHaveBeenNthCalledWith(2, '/emotions/daily-check');
      expect(checkResult.data).toEqual(mockCheckResponse);
      expect((_secondCheckResult = secondCheckResult) == null ? void 0 : _secondCheckResult.data).toEqual(mockCheckAfterResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,