{"version":3,"names":["_getJestObj","mock","get","jest","fn","post","_interopRequireDefault","require","_asyncToGenerator2","_emotionService","_client","_require","describe","beforeEach","clearAllMocks","it","default","mockEmotions","status","data","emotion_id","name","icon","color","apiClient","mockResolvedValueOnce","mockRecordResponse","log_id","emotion_ids","created_at","emotionsResult","emotionService","getAllEmotions","emotionData","recordResult","recordEmotions","expect","toHaveBeenCalledWith","toEqual","params","start_date","end_date","mockStats","total_logs","emotions","count","mockTrends","trends","date","statsResult","getEmotionStats","trendsResult","getEmotionTrends","Object","assign","type","toHaveBeenNthCalledWith","_secondCheckResult","mockCheckResponse","has_checked","note","mockCheckAfterResponse","last_check","checkResult","getDailyEmotionCheck","secondCheckResult"],"sources":["emotionService.integration.test.ts"],"sourcesContent":["// __tests__/integration/services/emotionService.integration.test.ts\r\n\r\nimport emotionService, { EmotionCreateDTO } from '../../../src/services/api/emotionService';\r\nimport apiClient from '../../../src/services/api/client';\r\n\r\n// apiClient 모킹\r\njest.mock('../../../src/services/api/client', () => ({\r\n  get: jest.fn(),\r\n  post: jest.fn()\r\n}));\r\n\r\ndescribe('Emotion Service Integration Tests', () => {\r\n  // 각 테스트 전에 모킹 초기화\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('getAllEmotions and recordEmotions integration', () => {\r\n    it('should fetch emotions and then record them', async () => {\r\n      // getAllEmotions 모의 응답 설정\r\n      const mockEmotions = {\r\n        status: 'success',\r\n        data: [\r\n          { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n          { emotion_id: 2, name: '슬픔', icon: 'emoticon-sad-outline', color: '#4682B4' }\r\n        ]\r\n      };\r\n      \r\n      (apiClient.get as jest.Mock).mockResolvedValueOnce({ data: mockEmotions });\r\n      \r\n      // recordEmotions 모의 응답 설정\r\n      const mockRecordResponse = {\r\n        status: 'success',\r\n        data: {\r\n          log_id: 123,\r\n          emotion_ids: [1],\r\n          created_at: '2025-04-09T10:00:00Z'\r\n        }\r\n      };\r\n      \r\n      (apiClient.post as jest.Mock).mockResolvedValueOnce({ data: mockRecordResponse });\r\n      \r\n      // 테스트 실행 - 먼저 감정 목록 가져오기\r\n      const emotionsResult = await emotionService.getAllEmotions();\r\n      \r\n      // 첫 번째 감정 선택하여 기록\r\n      const emotionData: EmotionCreateDTO = {\r\n        emotion_ids: [emotionsResult.data.data[0].emotion_id]\r\n      };\r\n      \r\n      const recordResult = await emotionService.recordEmotions(emotionData);\r\n      \r\n      // 검증\r\n      expect(apiClient.get).toHaveBeenCalledWith('/emotions');\r\n      expect(apiClient.post).toHaveBeenCalledWith('/emotions', emotionData);\r\n      expect(emotionsResult.data).toEqual(mockEmotions);\r\n      expect(recordResult.data).toEqual(mockRecordResponse);\r\n    });\r\n  });\r\n\r\n  describe('getEmotionStats and getEmotionTrends integration', () => {\r\n    it('should fetch both stats and trends for the same period', async () => {\r\n      // 날짜 파라미터 설정\r\n      const params = {\r\n        start_date: '2025-03-01',\r\n        end_date: '2025-03-31'\r\n      };\r\n      \r\n      // getEmotionStats 모의 응답 설정\r\n      const mockStats = {\r\n        status: 'success',\r\n        data: {\r\n          total_logs: 20,\r\n          emotions: [\r\n            { emotion_id: 1, name: '행복', count: 12 },\r\n            { emotion_id: 2, name: '슬픔', count: 8 }\r\n          ]\r\n        }\r\n      };\r\n      \r\n      (apiClient.get as jest.Mock).mockResolvedValueOnce({ data: mockStats });\r\n      \r\n      // getEmotionTrends 모의 응답 설정\r\n      const mockTrends = {\r\n        status: 'success',\r\n        data: {\r\n          trends: [\r\n            { date: '2025-03-01', emotions: [{ emotion_id: 1, count: 1 }] },\r\n            { date: '2025-03-15', emotions: [{ emotion_id: 2, count: 1 }] },\r\n            { date: '2025-03-30', emotions: [{ emotion_id: 1, count: 1 }] }\r\n          ]\r\n        }\r\n      };\r\n      \r\n      (apiClient.get as jest.Mock).mockResolvedValueOnce({ data: mockTrends });\r\n      \r\n      // 테스트 실행\r\n      const statsResult = await emotionService.getEmotionStats(params);\r\n      const trendsResult = await emotionService.getEmotionTrends({\r\n        ...params,\r\n        type: 'day'\r\n      });\r\n      \r\n      // 검증\r\n      expect(apiClient.get).toHaveBeenNthCalledWith(1, '/emotions/stats', { params });\r\n      expect(apiClient.get).toHaveBeenNthCalledWith(2, '/stats/trends', { \r\n        params: { ...params, type: 'day' } \r\n      });\r\n      \r\n      expect(statsResult.data).toEqual(mockStats);\r\n      expect(trendsResult.data).toEqual(mockTrends);\r\n    });\r\n  });\r\n\r\n  describe('getDailyEmotionCheck and recordEmotions integration', () => {\r\n    it('should check daily status and record emotions if not checked yet', async () => {\r\n      // getDailyEmotionCheck 모의 응답 설정 - 아직 체크하지 않음\r\n      const mockCheckResponse = {\r\n        status: 'success',\r\n        data: {\r\n          has_checked: false\r\n        }\r\n      };\r\n      \r\n      (apiClient.get as jest.Mock).mockResolvedValueOnce({ data: mockCheckResponse });\r\n      \r\n      // recordEmotions 모의 응답 설정\r\n      const mockRecordResponse = {\r\n        status: 'success',\r\n        data: {\r\n          log_id: 123,\r\n          emotion_ids: [1, 2],\r\n          note: '오늘 감정 기록',\r\n          created_at: '2025-04-09T10:00:00Z'\r\n        }\r\n      };\r\n      \r\n      (apiClient.post as jest.Mock).mockResolvedValueOnce({ data: mockRecordResponse });\r\n      \r\n      // getDailyEmotionCheck 모의 응답 설정 - 두 번째 호출 (체크 후)\r\n      const mockCheckAfterResponse = {\r\n        status: 'success',\r\n        data: {\r\n          has_checked: true,\r\n          last_check: '2025-04-09T10:00:00Z',\r\n          emotions: [\r\n            { emotion_id: 1, name: '행복' },\r\n            { emotion_id: 2, name: '슬픔' }\r\n          ]\r\n        }\r\n      };\r\n      \r\n      (apiClient.get as jest.Mock).mockResolvedValueOnce({ data: mockCheckAfterResponse });\r\n      \r\n      // 테스트 실행 - 먼저 오늘 이미 체크했는지 확인\r\n      const checkResult = await emotionService.getDailyEmotionCheck();\r\n      \r\n      // 체크하지 않았다면 감정 기록\r\n      let secondCheckResult = null;\r\n      if (!checkResult.data.data.has_checked) {\r\n        const emotionData: EmotionCreateDTO = {\r\n          emotion_ids: [1, 2],\r\n          note: '오늘 감정 기록'\r\n        };\r\n        \r\n        await emotionService.recordEmotions(emotionData);\r\n        \r\n        // 기록 후 다시 체크 상태 확인\r\n        secondCheckResult = await emotionService.getDailyEmotionCheck();\r\n      }\r\n      \r\n      // 검증\r\n      expect(apiClient.get).toHaveBeenNthCalledWith(1, '/emotions/daily-check');\r\n      expect(apiClient.post).toHaveBeenCalledWith('/emotions', {\r\n        emotion_ids: [1, 2],\r\n        note: '오늘 감정 기록'\r\n      });\r\n      expect(apiClient.get).toHaveBeenNthCalledWith(2, '/emotions/daily-check');\r\n      \r\n      expect(checkResult.data).toEqual(mockCheckResponse);\r\n      expect(secondCheckResult?.data).toEqual(mockCheckAfterResponse);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}