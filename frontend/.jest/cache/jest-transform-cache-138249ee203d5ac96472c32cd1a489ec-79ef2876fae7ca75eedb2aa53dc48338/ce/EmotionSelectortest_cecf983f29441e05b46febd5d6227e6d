28b16fecc669b9690327a5c8b4c6162c
_getJestObj().mock('../../src/screens/HomeScreen', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        surface: '#fff',
        background: '#fff'
      }
    })
  };
});
_getJestObj().mock('../../src/contexts/AuthContext', function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser'
      },
      isAuthenticated: true
    })
  };
});
_getJestObj().mock('../../src/contexts/EmotionContext', function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var MockChip = function (_React$Component) {
  function MockChip() {
    var _this;
    (0, _classCallCheck2.default)(this, MockChip);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, MockChip, [].concat(args));
    _this.state = {
      selected: false
    };
    _this.toggle = function () {
      _this.setState(function (prevState) {
        return {
          selected: !prevState.selected
        };
      });
    };
    return _this;
  }
  (0, _inherits2.default)(MockChip, _React$Component);
  return (0, _createClass2.default)(MockChip, [{
    key: "render",
    value: function render() {
      var emotion = this.props.emotion;
      return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: `emotion-chip-${emotion}`,
        onPress: this.toggle,
        accessibilityState: {
          selected: this.state.selected
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: emotion
        })
      });
    }
  }]);
}(_react.default.Component);
function MockHomeScreen() {
  var emotions = ['행복', '감사', '위로', '감동', '슬픔', '불안', '화남', '지침', '우울', '고독', '충격', '편함'];
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "home-screen-container",
    children: emotions.map(function (emotion) {
      return (0, _jsxRuntime.jsx)(MockChip, {
        emotion: emotion
      }, emotion);
    })
  });
}
describe('HomeScreen Emotion Selector', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    var HomeScreenModule = require('../../src/screens/HomeScreen');
    HomeScreenModule.default.mockImplementation(MockHomeScreen);
  });
  var emotions = ['행복', '감사', '위로', '감동', '슬픔', '불안', '화남', '지침', '우울', '고독', '충격', '편함'];
  it('renders all emotion chips', function () {
    var HomeScreen = require('../../src/screens/HomeScreen').default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render.getByTestId;
    emotions.forEach(function (emotion) {
      var emotionChip = getByTestId(`emotion-chip-${emotion}`);
      expect(emotionChip).toBeTruthy();
    });
  });
  it('selects and deselects emotion chips', (0, _asyncToGenerator2.default)(function* () {
    var HomeScreen = require('../../src/screens/HomeScreen').default;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render2.getByTestId,
      update = _render2.update;
    var happyChip = getByTestId('emotion-chip-행복');
    expect(happyChip.props.accessibilityState.selected).toBe(false);
    _reactNative.fireEvent.press(happyChip);
    update((0, _jsxRuntime.jsx)(HomeScreen, {}));
    var updatedChip = getByTestId('emotion-chip-행복');
    expect(updatedChip.props.accessibilityState.selected).toBe(true);
    _reactNative.fireEvent.press(updatedChip);
    update((0, _jsxRuntime.jsx)(HomeScreen, {}));
    var finalChip = getByTestId('emotion-chip-행복');
    expect(finalChip.props.accessibilityState.selected).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,