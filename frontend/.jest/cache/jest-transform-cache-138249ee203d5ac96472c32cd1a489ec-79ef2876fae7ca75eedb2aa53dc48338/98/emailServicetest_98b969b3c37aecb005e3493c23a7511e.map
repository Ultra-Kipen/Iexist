{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_emailService","_client","_require","jest","mockedClient","client","describe","beforeEach","clearAllMocks","it","default","email","mockResponse","data","message","post","mockResolvedValue","result","emailService","requestPasswordReset","expect","toHaveBeenCalledWith","toEqual","token","newPassword","resetPassword","new_password","requestVerificationCode","code","verifyCode","name","subject","sendContactRequest"],"sources":["emailService.test.ts"],"sourcesContent":["// __tests__/unit/services/api/emailService.test.ts\r\n\r\nimport emailService from '../../../../src/services/api/emailService';\r\nimport client from '../../../../src/services/api/client';\r\n\r\n// client를 모킹\r\njest.mock('../../../../src/services/api/client');\r\nconst mockedClient = client as jest.Mocked<typeof client>;\r\n\r\ndescribe('emailService', () => {\r\n  beforeEach(() => {\r\n    // 모든 모크 초기화\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('requestPasswordReset', () => {\r\n    it('비밀번호 재설정 요청에 성공해야 함', async () => {\r\n      const email = 'test@example.com';\r\n      const mockResponse = { \r\n        data: { \r\n          message: '비밀번호 재설정 링크 발송' \r\n        } \r\n      };\r\n\r\n      mockedClient.post.mockResolvedValue(mockResponse);\r\n\r\n      const result = await emailService.requestPasswordReset(email);\r\n      \r\n      expect(mockedClient.post).toHaveBeenCalledWith('/auth/forgot-password', { email });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n\r\n  describe('resetPassword', () => {\r\n    it('비밀번호 재설정에 성공해야 함', async () => {\r\n      const token = 'reset_token_123';\r\n      const newPassword = 'newStrongPassword123!';\r\n      const mockResponse = { \r\n        data: { \r\n          message: '비밀번호 재설정 완료' \r\n        } \r\n      };\r\n\r\n      mockedClient.post.mockResolvedValue(mockResponse);\r\n\r\n      const result = await emailService.resetPassword(token, newPassword);\r\n      \r\n      expect(mockedClient.post).toHaveBeenCalledWith('/auth/reset-password', { \r\n        token, \r\n        new_password: newPassword \r\n      });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n\r\n  describe('requestVerificationCode', () => {\r\n    it('이메일 확인 코드 요청에 성공해야 함', async () => {\r\n      const email = 'test@example.com';\r\n      const mockResponse = { \r\n        data: { \r\n          message: '인증 코드 발송' \r\n        } \r\n      };\r\n\r\n      mockedClient.post.mockResolvedValue(mockResponse);\r\n\r\n      const result = await emailService.requestVerificationCode(email);\r\n      \r\n      expect(mockedClient.post).toHaveBeenCalledWith('/auth/request-verification', { email });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n\r\n  describe('verifyCode', () => {\r\n    it('이메일 확인 코드 검증에 성공해야 함', async () => {\r\n      const email = 'test@example.com';\r\n      const code = '123456';\r\n      const mockResponse = { \r\n        data: { \r\n          message: '이메일 인증 성공' \r\n        } \r\n      };\r\n\r\n      mockedClient.post.mockResolvedValue(mockResponse);\r\n\r\n      const result = await emailService.verifyCode(email, code);\r\n      \r\n      expect(mockedClient.post).toHaveBeenCalledWith('/auth/verify-email', { email, code });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n\r\n  describe('sendContactRequest', () => {\r\n    it('연락 요청 전송에 성공해야 함', async () => {\r\n      const name = '김테스트';\r\n      const email = 'test@example.com';\r\n      const subject = '문의사항';\r\n      const message = '도움이 필요합니다.';\r\n      const mockResponse = { \r\n        data: { \r\n          message: '문의 접수 완료' \r\n        } \r\n      };\r\n\r\n      mockedClient.post.mockResolvedValue(mockResponse);\r\n\r\n      const result = await emailService.sendContactRequest(name, email, subject, message);\r\n      \r\n      expect(mockedClient.post).toHaveBeenCalledWith('/contact', { \r\n        name, \r\n        email, \r\n        subject, \r\n        message \r\n      });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}