{"version":3,"names":["_getJestObj","mock","React","require","_require","View","Text","TouchableOpacity","useTheme","colors","primary","Card","props","createElement","children","TextInput","testID","label","Button","Title","Paragraph","Chip","List","Section","Item","key","title","right","Icon","FAB","icon","ActivityIndicator","getPosts","jest","fn","Promise","resolve","data","status","post_id","content","user_id","is_anonymous","like_count","comment_count","created_at","getBestPosts","createPost","sendMessage","rn","requireActual","Object","assign","Alert","alert","_interopRequireDefault","_asyncToGenerator2","_react","_reactNative","_ComfortScreen","_jsxRuntime","_require2","spyOn","console","mockImplementation","mockNavigation","navigate","goBack","describe","comfortWallService","beforeEach","clearAllMocks","test","_render","render","jsx","default","navigation","toJSON","expect","not","toBeNull","toBe","result","Array","isArray","length","toBeGreaterThan","post","toHaveProperty","postData","toHaveBeenCalledWith","postId","messageData","message"],"sources":["ComfortScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/__tests__/unit/screens/ComfortScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport ComfortScreen from '../../../src/screens/ComfortScreen';\r\n\r\n// 경고 억제\r\njest.spyOn(console, 'error').mockImplementation(() => {});\r\njest.spyOn(console, 'warn').mockImplementation(() => {});\r\n\r\n// React Native Paper 모킹\r\njest.mock('react-native-paper', () => {\r\n  const React = require('react');\r\n  const { View, Text, TouchableOpacity } = require('react-native');\r\n  \r\n  return {\r\n    useTheme: () => ({\r\n      colors: {\r\n        primary: '#6200ee',\r\n      },\r\n    }),\r\n    Card: (props: { children: any; }) => React.createElement(View, props, props.children),\r\n    TextInput: (props: { testID: any; label: any; }) => React.createElement(View, { testID: props.testID }, props.label),\r\n    Button: (props: { testID: any; children: any; }) => React.createElement(TouchableOpacity, { \r\n      testID: props.testID \r\n    }, props.children),\r\n    Title: (props: { children: any; }) => React.createElement(Text, {}, props.children),\r\n    Paragraph: (props: { children: any; }) => React.createElement(Text, {}, props.children),\r\n    Chip: (props: { children: any; }) => React.createElement(View, {}, props.children),\r\n    List: {\r\n      Section: (props: { testID: any; children: any; }) => React.createElement(View, { testID: props.testID }, props.children),\r\n      Item: (props: { title: any; right: (arg0: {}) => any; }) => React.createElement(View, {}, [\r\n        React.createElement(Text, { key: 'title' }, props.title),\r\n        props.right && props.right({})\r\n      ]),\r\n      Icon: () => React.createElement(View, {}, null),\r\n    },\r\n    FAB: (props: { testID: any; icon: any; }) => React.createElement(TouchableOpacity, { \r\n      testID: props.testID \r\n    }, props.icon),\r\n    ActivityIndicator: () => React.createElement(View, { testID: 'activity-indicator' }),\r\n    Text: (props: { children: any; }) => React.createElement(Text, {}, props.children),\r\n  };\r\n});\r\n\r\n// API 서비스 모킹\r\njest.mock('../../../src/services/api/comfortWallService', () => {\r\n  return {\r\n    getPosts: jest.fn(() => Promise.resolve({\r\n      data: {\r\n        status: 'success',\r\n        data: [\r\n          {\r\n            post_id: 1,\r\n            title: '힘든 하루',\r\n            content: '오늘은 정말 힘든 하루였어요.',\r\n            user_id: 1,\r\n            is_anonymous: true,\r\n            like_count: 8,\r\n            comment_count: 5,\r\n            created_at: '2024-04-06T12:00:00.000Z',\r\n          }\r\n        ]\r\n      }\r\n    })),\r\n    getBestPosts: jest.fn(() => Promise.resolve({\r\n      data: {\r\n        status: 'success',\r\n        data: [\r\n          {\r\n            post_id: 3,\r\n            title: '여러분 덕분에 이겨냈어요',\r\n            content: '지난주에 올린 고민, 여러분의 댓글 덕분에 용기를 얻었어요.',\r\n            like_count: 25,\r\n            comment_count: 12,\r\n          }\r\n        ]\r\n      }\r\n    })),\r\n    createPost: jest.fn(() => Promise.resolve({ data: { status: 'success' } })),\r\n    sendMessage: jest.fn(() => Promise.resolve({ data: { status: 'success' } })),\r\n  };\r\n});\r\n\r\n// Alert 모킹\r\njest.mock('react-native', () => {\r\n  const rn = jest.requireActual('react-native');\r\n  return {\r\n    ...rn,\r\n    Alert: {\r\n      ...rn.Alert,\r\n      alert: jest.fn()\r\n    }\r\n  };\r\n});\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n  goBack: jest.fn(),\r\n};\r\n\r\ndescribe('ComfortScreen 단위 테스트', () => {\r\n  const comfortWallService = require('../../../src/services/api/comfortWallService');\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('화면 렌더링 확인', () => {\r\n    const { toJSON } = render(<ComfortScreen navigation={mockNavigation} />);\r\n    expect(toJSON()).not.toBeNull();\r\n  });\r\n\r\n  test('API 서비스 함수 호출 확인', () => {\r\n    // getPosts 함수 확인\r\n    expect(typeof comfortWallService.getPosts).toBe('function');\r\n    \r\n    // getBestPosts 함수 확인\r\n    expect(typeof comfortWallService.getBestPosts).toBe('function');\r\n    \r\n    // createPost 함수 확인\r\n    expect(typeof comfortWallService.createPost).toBe('function');\r\n    \r\n    // sendMessage 함수 확인\r\n    expect(typeof comfortWallService.sendMessage).toBe('function');\r\n  });\r\n\r\n  test('getPosts API가 올바른 데이터 구조 반환', async () => {\r\n    const result = await comfortWallService.getPosts();\r\n    expect(result.data.status).toBe('success');\r\n    expect(Array.isArray(result.data.data)).toBe(true);\r\n    expect(result.data.data.length).toBeGreaterThan(0);\r\n    \r\n    const post = result.data.data[0];\r\n    expect(post).toHaveProperty('post_id');\r\n    expect(post).toHaveProperty('title');\r\n    expect(post).toHaveProperty('content');\r\n  });\r\n\r\n  test('getBestPosts API가 올바른 데이터 구조 반환', async () => {\r\n    const result = await comfortWallService.getBestPosts();\r\n    expect(result.data.status).toBe('success');\r\n    expect(Array.isArray(result.data.data)).toBe(true);\r\n    \r\n    if (result.data.data.length > 0) {\r\n      const post = result.data.data[0];\r\n      expect(post).toHaveProperty('post_id');\r\n      expect(post).toHaveProperty('title');\r\n      expect(post).toHaveProperty('content');\r\n    }\r\n  });\r\n\r\n  test('createPost 함수 호출 테스트', async () => {\r\n    const postData = {\r\n      title: '테스트 제목',\r\n      content: '테스트 내용',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.createPost(postData);\r\n    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);\r\n  });\r\n\r\n  test('sendMessage 함수 호출 테스트', async () => {\r\n    const postId = 1;\r\n    const messageData = {\r\n      message: '응원 메시지',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.sendMessage(postId, messageData);\r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}