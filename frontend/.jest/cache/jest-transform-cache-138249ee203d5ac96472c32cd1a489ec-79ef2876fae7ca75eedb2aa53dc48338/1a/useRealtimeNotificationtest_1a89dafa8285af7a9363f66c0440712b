66771adc50cfdb09dce23ed0a48ad3e3
_getJestObj().mock('../../src/services/socketService', function () {
  return {
    init: jest.fn().mockResolvedValue(undefined),
    isConnected: jest.fn(),
    disconnect: jest.fn(),
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn()
  };
});
_getJestObj().mock('../../src/contexts/NotificationContext', function () {
  return {
    useNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useRealtimeNotification = require("../../src/hooks/useRealtimeNotification");
var _socketService = _interopRequireDefault(require("../../src/services/socketService"));
var _NotificationContext = require("../../src/contexts/NotificationContext");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRealtimeNotification', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _socketService.default.isConnected.mockReturnValue(false);
    _NotificationContext.useNotification.mockReturnValue({
      fetchNotifications: jest.fn().mockResolvedValue(undefined),
      setUnreadCount: jest.fn()
    });
  });
  it('should have expected properties and methods', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook.result;
    expect(result.current).toHaveProperty('isConnected');
    expect(result.current).toHaveProperty('isLoading');
    expect(result.current).toHaveProperty('error');
    expect(result.current).toHaveProperty('connect');
    expect(result.current).toHaveProperty('disconnect');
    expect(result.current).toHaveProperty('markAsRead');
    expect(result.current).toHaveProperty('markAllAsRead');
  });
  it('should initialize with default values', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook2.result;
    expect(result.current.isConnected).toBe(false);
    expect(result.current.isLoading).toBe(true);
    expect(result.current.error).toBeNull();
  });
  it('should call socketService.init in connect function', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)({
          autoConnect: false
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.connect();
    }));
    expect(_socketService.default.init).toHaveBeenCalled();
  }));
  it('should handle loading state during connection process', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)({
          autoConnect: false
        });
      }),
      result = _renderHook4.result;
    var connectPromise;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      _socketService.default.init.mockImplementationOnce(function () {
        return new Promise(function (resolve) {
          setTimeout(resolve, 10);
        });
      });
      connectPromise = result.current.connect();
      expect(result.current.isLoading).toBe(false);
      yield connectPromise;
    }));
    expect(result.current.isLoading).toBe(false);
  }));
  it('should call socketService.disconnect in disconnect function', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook5.result;
    (0, _reactHooks.act)(function () {
      result.current.disconnect();
    });
    expect(_socketService.default.disconnect).toHaveBeenCalled();
  });
  it('should register socket event listeners on mount', function () {
    (0, _reactHooks.renderHook)(function () {
      return (0, _useRealtimeNotification.useRealtimeNotification)();
    });
    expect(_socketService.default.on).toHaveBeenCalledWith('connect', expect.any(Function));
    expect(_socketService.default.on).toHaveBeenCalledWith('disconnect', expect.any(Function));
    expect(_socketService.default.on).toHaveBeenCalledWith('new_notification', expect.any(Function));
    expect(_socketService.default.on).toHaveBeenCalledWith('unread_notifications_count', expect.any(Function));
  });
  it('should not call socketService.emit when not connected', function () {
    _socketService.default.isConnected.mockReturnValue(false);
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook6.result;
    (0, _reactHooks.act)(function () {
      result.current.markAsRead(5);
    });
    expect(_socketService.default.emit).not.toHaveBeenCalled();
    (0, _reactHooks.act)(function () {
      result.current.markAllAsRead();
    });
    expect(_socketService.default.emit).not.toHaveBeenCalled();
  });
  it('should handle connection error', (0, _asyncToGenerator2.default)(function* () {
    var testError = new Error('Connection error');
    _socketService.default.init.mockRejectedValueOnce(testError);
    var originalConsoleError = console.error;
    console.error = jest.fn();
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)({
          autoConnect: false
        });
      }),
      result = _renderHook7.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.connect();
      } catch (error) {}
    }));
    expect(result.current.error).toBe('Connection error');
    expect(result.current.isLoading).toBe(false);
    expect(console.error).toHaveBeenCalled();
    console.error = originalConsoleError;
  }));
  it('should clean up listeners on unmount', function () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      unmount = _renderHook8.unmount;
    unmount();
    expect(_socketService.default.off).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,