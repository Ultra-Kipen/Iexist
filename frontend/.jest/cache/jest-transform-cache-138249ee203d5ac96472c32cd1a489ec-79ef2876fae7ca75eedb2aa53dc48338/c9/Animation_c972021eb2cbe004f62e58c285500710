ae1b76ff993894f7bc09370fc41b8d9f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
var _AnimatedProps = _interopRequireDefault(require("../nodes/AnimatedProps"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var startNativeAnimationNextId = 1;
var _nativeID = (0, _classPrivateFieldLooseKey2.default)("nativeID");
var _onEnd = (0, _classPrivateFieldLooseKey2.default)("onEnd");
var _useNativeDriver = (0, _classPrivateFieldLooseKey2.default)("useNativeDriver");
var Animation = exports.default = function () {
  function Animation(config) {
    var _config$isInteraction, _config$iterations;
    (0, _classCallCheck2.default)(this, Animation);
    Object.defineProperty(this, _nativeID, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _onEnd, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _useNativeDriver, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver] = _NativeAnimatedHelper.default.shouldUseNativeDriver(config);
    this.__active = false;
    this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver];
    this.__isLooping = config.isLooping;
    this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
    if (__DEV__) {
      this.__debugID = config.debugID;
    }
  }
  return (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      if (!(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver] && animatedValue.__isNative === true) {
        throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd] = onEnd;
      this.__active = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      if ((0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID] != null) {
        var nativeID = (0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID];
        var identifier = `${nativeID}:stopAnimation`;
        try {
          _NativeAnimatedHelper.default.API.setWaitingForIdentifier(identifier);
          _NativeAnimatedHelper.default.API.stopAnimation(nativeID);
        } finally {
          _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(identifier);
        }
      }
      this.__active = false;
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__findAnimatedPropsNodes",
    value: function __findAnimatedPropsNodes(node) {
      var result = [];
      if (node instanceof _AnimatedProps.default) {
        result.push(node);
        return result;
      }
      for (var child of node.__getChildren()) {
        result.push.apply(result, (0, _toConsumableArray2.default)(this.__findAnimatedPropsNodes(child)));
      }
      return result;
    }
  }, {
    key: "__startAnimationIfNative",
    value: function __startAnimationIfNative(animatedValue) {
      var _this = this;
      if (!(0, _classPrivateFieldLooseBase2.default)(this, _useNativeDriver)[_useNativeDriver]) {
        return false;
      }
      var startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;
      startNativeAnimationNextId += 1;
      _NativeAnimatedHelper.default.API.setWaitingForIdentifier(startNativeAnimationWaitId);
      try {
        var config = this.__getNativeAnimationConfig();
        animatedValue.__makeNative(config.platformConfig);
        (0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID] = _NativeAnimatedHelper.default.generateNewAnimationId();
        _NativeAnimatedHelper.default.API.startAnimatingNode((0, _classPrivateFieldLooseBase2.default)(this, _nativeID)[_nativeID], animatedValue.__getNativeTag(), config, function (result) {
          _this.__notifyAnimationEnd(result);
          var value = result.value;
          if (value != null) {
            animatedValue.__onAnimatedValueUpdateReceived(value);
            if (ReactNativeFeatureFlags.shouldSkipStateUpdatesForLoopingAnimations() && _this.__isLooping === true) {
              return;
            }
            _this.__findAnimatedPropsNodes(animatedValue).forEach(function (node) {
              return node.update();
            });
          }
        });
        return true;
      } catch (e) {
        throw e;
      } finally {
        _NativeAnimatedHelper.default.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }, {
    key: "__notifyAnimationEnd",
    value: function __notifyAnimationEnd(result) {
      var callback = (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd];
      if (callback != null) {
        (0, _classPrivateFieldLooseBase2.default)(this, _onEnd)[_onEnd] = null;
        callback(result);
      }
    }
  }, {
    key: "__getDebugID",
    value: function __getDebugID() {
      if (__DEV__) {
        return this.__debugID;
      }
      return undefined;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,