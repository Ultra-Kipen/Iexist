{"version":3,"names":["_getJestObj","mock","getAllEmotions","jest","fn","mockResolvedValue","data","emotion_id","name","icon","color","getDailyEmotionCheck","log_id","user_id","note","log_date","created_at","updated_at","recordEmotions","success","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_EmotionContext","_jsxRuntime","_require","TestConsumer","_useEmotion","useEmotion","emotions","userEmotions","selectedEmotions","isLoading","error","fetchEmotions","fetchUserEmotions","logEmotion","selectEmotion","clearSelectedEmotions","jsxs","View","children","jsx","Text","testID","length","Button","title","onPress","describe","it","default","_render","render","EmotionProvider","getByTestId","expect","toHaveTextContent","act","Promise","resolve","setTimeout","not","_render2","fireEvent","press","_render3"],"sources":["EmotionContext.test.tsx"],"sourcesContent":["// __tests__/contexts/EmotionContext.test.tsx\r\nimport React from 'react';\r\nimport { render, act, fireEvent } from '@testing-library/react-native';\r\nimport { Text, View, Button } from 'react-native';\r\nimport { EmotionProvider, useEmotion } from '../../src/contexts/EmotionContext';\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn().mockResolvedValue({ \r\n    data: [\r\n      { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n      { emotion_id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' }\r\n    ] \r\n  }),\r\n  getDailyEmotionCheck: jest.fn().mockResolvedValue({ \r\n    data: [\r\n      { log_id: 1, user_id: 1, emotion_id: 1, note: '오늘은 즐거운 하루', log_date: '2025-04-12', created_at: '2025-04-12T14:22:30Z', updated_at: '2025-04-12T14:22:30Z' }\r\n    ] \r\n  }),\r\n  recordEmotions: jest.fn().mockResolvedValue({ data: { success: true } })\r\n}));\r\n\r\n// 테스트용 소비자 컴포넌트\r\nconst TestConsumer = () => {\r\n  const {\r\n    emotions,\r\n    userEmotions,\r\n    selectedEmotions,\r\n    isLoading,\r\n    error,\r\n    fetchEmotions,\r\n    fetchUserEmotions,\r\n    logEmotion,\r\n    selectEmotion,\r\n    clearSelectedEmotions\r\n  } = useEmotion();\r\n\r\n  return (\r\n    <View>\r\n      <Text testID=\"loading-state\">{isLoading ? 'loading' : 'not-loading'}</Text>\r\n      <Text testID=\"emotions-count\">{emotions.length}</Text>\r\n      <Text testID=\"user-emotions-count\">{userEmotions.length}</Text>\r\n      <Text testID=\"error-message\">{error || 'no-error'}</Text>\r\n      <Text testID=\"selected-emotions-count\">{selectedEmotions.length}</Text>\r\n      \r\n      <Button\r\n        testID=\"fetch-emotions-button\"\r\n        title=\"감정 목록 불러오기\"\r\n        onPress={() => fetchEmotions()}\r\n      />\r\n      <Button\r\n        testID=\"fetch-user-emotions-button\"\r\n        title=\"사용자 감정 불러오기\"\r\n        onPress={() => fetchUserEmotions()}\r\n      />\r\n      <Button\r\n        testID=\"log-emotion-button\"\r\n        title=\"감정 기록하기\"\r\n        onPress={() => logEmotion(1, '테스트 감정')}\r\n      />\r\n      <Button\r\n        testID=\"select-emotion-button\"\r\n        title=\"감정 선택하기\"\r\n        onPress={() => selectEmotion(1)}\r\n      />\r\n      <Button\r\n        testID=\"clear-emotions-button\"\r\n        title=\"감정 선택 초기화\"\r\n        onPress={() => clearSelectedEmotions()}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('EmotionContext', () => {\r\n  it('provides initial state and functions', async () => {\r\n    const { getByTestId } = render(\r\n      <EmotionProvider>\r\n        <TestConsumer />\r\n      </EmotionProvider>\r\n    );\r\n    \r\n    // 초기 로딩 상태 확인\r\n    expect(getByTestId('loading-state')).toHaveTextContent('loading');\r\n    \r\n    // 비동기 작업 완료 대기\r\n    await act(async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    });\r\n    \r\n    // 데이터 로드 확인\r\n    expect(getByTestId('loading-state')).toHaveTextContent('not-loading');\r\n    expect(getByTestId('emotions-count')).not.toHaveTextContent('0');\r\n  });\r\n  \r\n  it('loads user emotions when requested', async () => {\r\n    const { getByTestId } = render(\r\n      <EmotionProvider>\r\n        <TestConsumer />\r\n      </EmotionProvider>\r\n    );\r\n    \r\n    // 초기 로드 대기\r\n    await act(async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    });\r\n    \r\n    // 사용자 감정 로드 요청\r\n    await act(async () => {\r\n      fireEvent.press(getByTestId('fetch-user-emotions-button'));\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    });\r\n    \r\n    expect(getByTestId('user-emotions-count')).not.toHaveTextContent('0');\r\n  });\r\n  \r\n  it('selects and clears emotions', async () => {\r\n    const { getByTestId } = render(\r\n      <EmotionProvider>\r\n        <TestConsumer />\r\n      </EmotionProvider>\r\n    );\r\n    \r\n    // 초기 로드 대기\r\n    await act(async () => {\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    });\r\n    \r\n    // 초기 선택된 감정 수 확인\r\n    expect(getByTestId('selected-emotions-count')).toHaveTextContent('0');\r\n    \r\n    // 감정 선택\r\n    await act(async () => {\r\n      fireEvent.press(getByTestId('select-emotion-button'));\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    });\r\n    \r\n    expect(getByTestId('selected-emotions-count')).toHaveTextContent('1');\r\n    \r\n    // 감정 선택 초기화\r\n    await act(async () => {\r\n      fireEvent.press(getByTestId('clear-emotions-button'));\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    });\r\n    \r\n    expect(getByTestId('selected-emotions-count')).toHaveTextContent('0');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}