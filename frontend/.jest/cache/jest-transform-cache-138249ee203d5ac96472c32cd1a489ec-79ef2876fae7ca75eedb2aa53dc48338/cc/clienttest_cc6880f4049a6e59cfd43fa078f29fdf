8fc8fd1de1d9807dce2e95919f211451
_getJestObj().mock('axios', function () {
  return {
    create: jest.fn(function () {
      return mockAxiosInstance;
    }),
    post: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return mockAsyncStorage;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockInterceptorsRequest = {
  use: jest.fn()
};
var mockInterceptorsResponse = {
  use: jest.fn()
};
var mockAxiosInstance = {
  interceptors: {
    request: mockInterceptorsRequest,
    response: mockInterceptorsResponse
  },
  defaults: {},
  get: jest.fn(),
  post: jest.fn(),
  put: jest.fn(),
  delete: jest.fn()
};
var originalSetTimeout;
var mockAsyncStorage = {
  getItem: jest.fn(),
  removeItem: jest.fn(),
  setItem: jest.fn()
};
describe('API Client', function () {
  beforeEach(function () {
    jest.resetModules();
    jest.clearAllMocks();
  });
  test('Client module basic functionality', function () {
    var apiClient = require('../../../../src/services/api/client').default;
    expect(require('axios').create).toHaveBeenCalledWith({
      baseURL: 'http://10.0.2.2:3000/api',
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    expect(mockInterceptorsRequest.use).toHaveBeenCalledTimes(1);
    expect(mockInterceptorsResponse.use).toHaveBeenCalledTimes(1);
    expect(apiClient).toBe(mockAxiosInstance);
  });
  test('Request interceptor adds auth token when available', (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockResolvedValueOnce('test_token');
    require('../../../../src/services/api/client');
    var requestInterceptor = mockInterceptorsRequest.use.mock.calls[0][0];
    var config = {
      headers: {}
    };
    var result = yield requestInterceptor(config);
    expect(mockAsyncStorage.getItem).toHaveBeenCalledWith('auth_token');
    expect(result.headers['Authorization']).toBe('Bearer test_token');
  }));
  test('Request interceptor handles error gracefully', (0, _asyncToGenerator2.default)(function* () {
    mockAsyncStorage.getItem.mockRejectedValueOnce(new Error('Storage error'));
    var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    require('../../../../src/services/api/client');
    var requestInterceptor = mockInterceptorsRequest.use.mock.calls[0][0];
    var requestErrorHandler = mockInterceptorsRequest.use.mock.calls[0][1];
    var config = {
      headers: {}
    };
    var result = yield requestInterceptor(config);
    expect(result).toEqual(config);
    expect(consoleSpy).toHaveBeenCalledWith('토큰 가져오기 오류:', expect.any(Error));
    var testError = new Error('Request error');
    try {
      yield requestErrorHandler(testError);
    } catch (error) {
      expect(error).toBe(testError);
      expect(consoleSpy).toHaveBeenCalledWith('API 요청 오류:', testError);
    }
    consoleSpy.mockRestore();
  }));
  test('Response interceptor handles 401 error correctly', (0, _asyncToGenerator2.default)(function* () {
    require('../../../../src/services/api/client');
    var successHandler = mockInterceptorsResponse.use.mock.calls[0][0];
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var response = {
      data: 'test'
    };
    expect(successHandler(response)).toBe(response);
    var originalRequest = {
      _retry: false
    };
    var error401 = {
      config: originalRequest,
      response: {
        status: 401
      }
    };
    try {
      yield errorHandler(error401);
    } catch (error) {
      expect(error).toBe(error401);
      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('auth_token');
      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('user');
      expect(originalRequest._retry).toBe(true);
    }
  }));
  test('Response interceptor rejects other errors', (0, _asyncToGenerator2.default)(function* () {
    require('../../../../src/services/api/client');
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var error404 = {
      config: {},
      response: {
        status: 404
      }
    };
    try {
      yield errorHandler(error404);
    } catch (error) {
      expect(error).toBe(error404);
      expect(mockAsyncStorage.removeItem).not.toHaveBeenCalled();
    }
  }));
  test('Token refresh process on 401 error', (0, _asyncToGenerator2.default)(function* () {
    jest.resetModules();
    var refreshResponse = {
      data: {
        token: 'new_test_token'
      }
    };
    require('axios').post.mockResolvedValueOnce(refreshResponse);
    mockAsyncStorage.getItem.mockImplementation(function (key) {
      if (key === 'refresh_token') return Promise.resolve('test_refresh_token');
      if (key === 'auth_token') return Promise.resolve('old_test_token');
      return Promise.resolve(null);
    });
    mockAsyncStorage.setItem.mockResolvedValue(undefined);
    var apiClientMock = jest.fn().mockImplementation(function (config) {
      return Promise.resolve({
        data: 'retry_success'
      });
    });
    mockAxiosInstance.mockImplementation = apiClientMock;
    var client = require('../../../../src/services/api/client');
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var originalHeaders = {
      'Content-Type': 'application/json'
    };
    var originalRequest = {
      headers: originalHeaders,
      _retry: false
    };
    var error401 = {
      config: originalRequest,
      response: {
        status: 401
      }
    };
    try {
      yield errorHandler(error401);
      expect(mockAsyncStorage.getItem).toHaveBeenCalledWith('refresh_token');
      expect(require('axios').post).toHaveBeenCalledWith(`${client.default.baseURL}/auth/refresh`, {
        refreshToken: 'test_refresh_token'
      });
      expect(originalRequest._retry).toBe(true);
    } catch (error) {}
  }));
  test('Token refresh failure on 401 error', (0, _asyncToGenerator2.default)(function* () {
    jest.resetModules();
    require('axios').post.mockRejectedValueOnce(new Error('Refresh failed'));
    mockAsyncStorage.getItem.mockResolvedValueOnce('test_refresh_token');
    require('../../../../src/services/api/client');
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var originalRequest = {
      headers: {},
      _retry: false
    };
    var error401 = {
      config: originalRequest,
      response: {
        status: 401
      }
    };
    var consoleSpy = jest.spyOn(console, 'error').mockImplementation();
    try {
      yield errorHandler(error401);
      fail('Should have thrown an error');
    } catch (error) {
      expect(mockAsyncStorage.getItem).toHaveBeenCalledWith('refresh_token');
      expect(consoleSpy).toHaveBeenCalledWith('토큰 갱신 오류:', expect.any(Error));
      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('auth_token');
      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('refresh_token');
      expect(mockAsyncStorage.removeItem).toHaveBeenCalledWith('user');
    }
    consoleSpy.mockRestore();
  }));
  test('Network error retry mechanism', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var originalSetTimeout = global.setTimeout;
    global.setTimeout = jest.fn(function (callback, timeout) {
      callback();
      return 1;
    });
    jest.resetModules();
    var customResponse = {
      data: 'success'
    };
    mockAxiosInstance.get.mockResolvedValueOnce(customResponse);
    mockAxiosInstance.post.mockResolvedValueOnce(customResponse);
    mockAxiosInstance.put.mockResolvedValueOnce(customResponse);
    mockAxiosInstance.delete.mockResolvedValueOnce(customResponse);
    require('../../../../src/services/api/client');
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var originalRequest = {
      headers: {},
      url: '/test',
      method: 'get'
    };
    var networkError = {
      config: originalRequest,
      message: 'Network Error'
    };
    try {
      yield errorHandler(networkError);
      expect(global.setTimeout).toHaveBeenCalled();
      expect(originalRequest._retryCount).toBe(1);
    } catch (error) {
      expect(global.setTimeout).toHaveBeenCalled();
    }
    global.setTimeout = originalSetTimeout;
    jest.useRealTimers();
  }));
  test('Network error max retry limit', (0, _asyncToGenerator2.default)(function* () {
    jest.resetModules();
    var originalSetTimeout = global.setTimeout;
    global.setTimeout = jest.fn();
    require('../../../../src/services/api/client');
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var originalRequest = {
      headers: {},
      url: '/test',
      _retryCount: 3
    };
    var networkError = {
      config: originalRequest,
      message: 'Network Error'
    };
    try {
      yield errorHandler(networkError);
      fail('Should have thrown an error');
    } catch (error) {
      expect(error).toBe(networkError);
      expect(global.setTimeout).not.toHaveBeenCalled();
    }
    global.setTimeout = originalSetTimeout;
  }));
  test('Token refresh with undefined headers', (0, _asyncToGenerator2.default)(function* () {
    jest.resetModules();
    var refreshResponse = {
      data: {
        token: 'new_test_token'
      }
    };
    require('axios').post.mockResolvedValueOnce(refreshResponse);
    mockAsyncStorage.getItem.mockResolvedValueOnce('test_refresh_token');
    mockAsyncStorage.setItem.mockResolvedValueOnce(undefined);
    var apiClient = require('../../../../src/services/api/client').default;
    if (!apiClient.mockImplementation) {
      apiClient.mockImplementation = jest.fn().mockReturnValue(Promise.resolve({
        data: 'success'
      }));
    }
    var errorHandler = mockInterceptorsResponse.use.mock.calls[0][1];
    var originalRequest = {
      _retry: false
    };
    var error401 = {
      config: originalRequest,
      response: {
        status: 401
      }
    };
    try {
      var result = yield errorHandler(error401);
      if (originalRequest.headers) {
        expect(originalRequest.headers).toBeTruthy();
      }
    } catch (error) {}
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,