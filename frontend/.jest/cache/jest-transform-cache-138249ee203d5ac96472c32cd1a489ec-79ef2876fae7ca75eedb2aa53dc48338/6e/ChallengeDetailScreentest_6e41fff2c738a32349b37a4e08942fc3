751127d2d2cccd4ac56ce04a5ed06c42
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {
          challengeId: 1
        }
      };
    }
  };
});
_getJestObj().mock('../../src/services/api/challengeService', function () {
  return {
    getChallengeDetails: function getChallengeDetails() {
      return mockGetChallengeDetails.apply(void 0, arguments);
    },
    participateInChallenge: function participateInChallenge() {
      return mockParticipateInChallenge.apply(void 0, arguments);
    },
    leaveChallenge: function leaveChallenge() {
      return mockLeaveChallenge.apply(void 0, arguments);
    },
    updateChallengeProgress: function updateChallengeProgress() {
      return mockUpdateChallengeProgress.apply(void 0, arguments);
    }
  };
});
_getJestObj().mock('../../src/services/api/emotionService', function () {
  return {
    getAllEmotions: function getAllEmotions() {
      return mockGetAllEmotions.apply(void 0, arguments);
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ChallengeDetailScreen = _interopRequireDefault(require("../../src/screens/ChallengeDetailScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGetChallengeDetails = jest.fn();
var mockParticipateInChallenge = jest.fn();
var mockLeaveChallenge = jest.fn();
var mockUpdateChallengeProgress = jest.fn();
var mockGetAllEmotions = jest.fn();
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('ChallengeDetailScreen', function () {
  var mockChallenge = {
    data: {
      data: {
        challenge_id: 1,
        title: '7일간의 감사 일기',
        description: '매일 감사한 일 3가지를 기록해보세요.',
        start_date: '2025-04-01',
        end_date: '2025-04-30',
        is_public: true,
        max_participants: null,
        participant_count: 10,
        creator: {
          user_id: 1,
          username: 'creator',
          nickname: 'Creator'
        },
        is_participating: false,
        created_at: '2025-03-25T00:00:00.000Z',
        participants: [{
          user_id: 2,
          username: 'user1',
          nickname: 'User1',
          profile_image_url: null
        }],
        progress_entries: []
      }
    }
  };
  var mockEmotions = {
    data: {
      data: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart',
        color: '#FF69B4'
      }]
    }
  };
  beforeEach(function () {
    jest.clearAllMocks();
    mockGetChallengeDetails.mockResolvedValue(mockChallenge);
    mockGetAllEmotions.mockResolvedValue(mockEmotions);
    mockParticipateInChallenge.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockLeaveChallenge.mockResolvedValue({
      data: {
        success: true
      }
    });
    mockUpdateChallengeProgress.mockResolvedValue({
      data: {
        success: true
      }
    });
  });
  it('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChallengeDetailScreen.default, {})),
      getByText = _render.getByText;
    expect(getByText('챌린지 정보 로딩 중...')).toBeTruthy();
  }), 30000);
  it('renders challenge details correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChallengeDetailScreen.default, {})),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockGetChallengeDetails).toHaveBeenCalledTimes(1);
    }, {
      timeout: 5000
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByText('7일간의 감사 일기')).toBeTruthy();
    }, {
      timeout: 5000
    });
    expect(getByText('매일 감사한 일 3가지를 기록해보세요.')).toBeTruthy();
    expect(getByText('챌린지 참여하기')).toBeTruthy();
  }), 30000);
  it('handles error state', (0, _asyncToGenerator2.default)(function* () {
    mockGetChallengeDetails.mockRejectedValueOnce(new Error('API 오류'));
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChallengeDetailScreen.default, {})),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockGetChallengeDetails).toHaveBeenCalledTimes(1);
    }, {
      timeout: 5000
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByText('챌린지 정보를 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
    }, {
      timeout: 5000
    });
    expect(getByText('다시 시도')).toBeTruthy();
  }), 30000);
  it('handles participation toggle', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChallengeDetailScreen.default, {})),
      getByText = _render4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockGetChallengeDetails).toHaveBeenCalledTimes(1);
    }, {
      timeout: 5000
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByText('챌린지 참여하기')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByText('챌린지 참여하기'));
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockParticipateInChallenge).toHaveBeenCalledWith(1);
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '챌린지에 참여했습니다.');
  }), 30000);
  it('renders the record emotion button when participating', (0, _asyncToGenerator2.default)(function* () {
    mockGetChallengeDetails.mockResolvedValueOnce({
      data: {
        data: Object.assign({}, mockChallenge.data.data, {
          is_participating: true
        })
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChallengeDetailScreen.default, {})),
      getByText = _render5.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByText('챌린지 나가기')).toBeTruthy();
    }, {
      timeout: 5000
    });
    expect(getByText('오늘의 감정 기록')).toBeTruthy();
    expect(getByText('감정 기록하기')).toBeTruthy();
  }), 30000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,