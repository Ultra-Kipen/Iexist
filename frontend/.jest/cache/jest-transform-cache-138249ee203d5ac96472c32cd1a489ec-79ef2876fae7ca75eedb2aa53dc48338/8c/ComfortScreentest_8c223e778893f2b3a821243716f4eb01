bbba45cf4823f9ec08bf7105c2b4fc13
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    TouchableOpacity = _require.TouchableOpacity,
    View = _require.View,
    Text = _require.Text;
  var originalModule = jest.requireActual('react-native-paper');
  return Object.assign({}, originalModule, {
    Card: {
      Content: 'CardContent'
    },
    TextInput: 'TextInput',
    Button: function Button(props) {
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: props.testID || 'default-button',
        onPress: props.onPress,
        disabled: props.disabled,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: props.children
        })
      });
    },
    List: {
      Section: 'ListSection',
      Item: function Item(props) {
        var RightComponent = props.right ? props.right({
          testID: 'comment-button'
        }) : null;
        return (0, _jsxRuntime.jsxs)(TouchableOpacity, {
          testID: `list-item-${props.key}`,
          onPress: props.onPress,
          children: [(0, _jsxRuntime.jsx)(Text, {
            children: props.title
          }), RightComponent]
        });
      },
      Icon: 'ListIcon'
    },
    Title: 'Title',
    Paragraph: 'Paragraph',
    FAB: 'FAB',
    ActivityIndicator: 'ActivityIndicator',
    Chip: 'Chip',
    Text: 'Text',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff',
          surface: '#fff',
          accent: '#f1c40f',
          error: '#f13a59',
          text: '#000'
        }
      };
    }
  });
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('../../src/services/api/comfortWallService', function () {
  return {
    getPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    getBestPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    createPost: jest.fn(),
    sendMessage: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _reactNative2 = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn();
jest.spyOn(_reactNative.Alert, 'alert').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('ComfortScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    console.error = originalConsoleError;
  });
  test('renders without crashing', function () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
  });
  test('calls API on mount', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
  }));
  test('shows alert on API error', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockRejectedValueOnce(new Error('API 오류'));
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
      expect(console.error).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
  }));
  test('calls createPost API with correct data', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockReset();
    _comfortWallService.default.createPost.mockResolvedValueOnce({
      data: {
        data: {
          post_id: 2,
          title: '새 게시물',
          content: '새로운 내용'
        }
      }
    });
    var testPostData = {
      title: '새 게시물',
      content: '새로운 내용',
      is_anonymous: true
    };
    yield _comfortWallService.default.createPost(testPostData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledWith(testPostData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledTimes(1);
  }));
  test('renders with correct UI elements', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockReset();
    _comfortWallService.default.getPosts.mockResolvedValueOnce({
      data: {
        data: []
      }
    });
    _comfortWallService.default.getBestPosts.mockReset();
    _comfortWallService.default.getBestPosts.mockResolvedValueOnce({
      data: {
        data: []
      }
    });
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    }, {
      timeout: 10000
    });
  }), 15000);
  test('creates a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    _getJestObj().mock('react-native-paper', function () {
      var React = require('react');
      var _require2 = require('react-native'),
        TouchableOpacity = _require2.TouchableOpacity,
        View = _require2.View,
        Text = _require2.Text;
      var originalModule = jest.requireActual('react-native-paper');
      return Object.assign({}, originalModule, {
        List: Object.assign({}, originalModule.List, {
          Item: function Item(props) {
            var RightComponent = props.right ? props.right({
              testID: 'comment-button'
            }) : null;
            return (0, _jsxRuntime.jsxs)(View, {
              children: [(0, _jsxRuntime.jsx)(TouchableOpacity, {
                onPress: function onPress() {
                  return props.onPress && props.onPress();
                },
                testID: "list-item",
                children: (0, _jsxRuntime.jsx)(Text, {
                  children: props.title || '테스트 게시물'
                })
              }), RightComponent]
            });
          }
        })
      });
    });
    var mockPosts = [{
      post_id: 1,
      title: '테스트 게시물',
      content: '테스트 내용',
      user_id: 2,
      is_anonymous: true,
      like_count: 0,
      comment_count: 0,
      created_at: '2024-03-25T12:00:00Z'
    }];
    _comfortWallService.default.getPosts.mockResolvedValueOnce({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValueOnce({
      data: {
        data: []
      }
    });
    _comfortWallService.default.createPost.mockReset();
    _comfortWallService.default.createPost.mockResolvedValueOnce({
      data: {
        data: {
          post_id: 1,
          title: '새로운 고민',
          content: '고민 내용입니다.'
        }
      }
    });
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
    var newPostButton = _reactNative2.screen.getByTestId('new-post-button');
    _reactNative2.fireEvent.press(newPostButton);
    var titleInput = _reactNative2.screen.getByTestId('post-title-input');
    _reactNative2.fireEvent.changeText(titleInput, '새로운 고민');
    var contentInput = _reactNative2.screen.getByTestId('post-content-input');
    _reactNative2.fireEvent.changeText(contentInput, '고민 내용입니다.');
    var submitPostButton = _reactNative2.screen.getByTestId('submit-post-button');
    _reactNative2.fireEvent.press(submitPostButton);
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '고민 내용입니다.',
        is_anonymous: true
      });
    }, {
      timeout: 3000
    });
  }));
  test('sends an encouragement message successfully', (0, _asyncToGenerator2.default)(function* () {
    var mockPosts = [{
      post_id: 1,
      title: '테스트 게시물',
      content: '테스트 내용',
      user_id: 2,
      is_anonymous: true,
      like_count: 0,
      comment_count: 0,
      created_at: '2024-03-25T12:00:00Z'
    }];
    _comfortWallService.default.getPosts.mockResolvedValueOnce({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValueOnce({
      data: {
        data: []
      }
    });
    _comfortWallService.default.sendMessage.mockReset();
    _comfortWallService.default.sendMessage.mockResolvedValueOnce({
      data: {
        message: '응원 메시지 성공'
      }
    });
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
    var commentButtons = _reactNative2.screen.getAllByText('응원하기');
    _reactNative2.fireEvent.press(commentButtons[0]);
    var commentInput = _reactNative2.screen.getByTestId('comment-input');
    _reactNative2.fireEvent.changeText(commentInput, '힘내세요!');
    var submitCommentButton = _reactNative2.screen.getByTestId('submit-comment-button');
    _reactNative2.fireEvent.press(submitCommentButton);
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '힘내세요!',
        is_anonymous: true
      });
    }, {
      timeout: 3000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,