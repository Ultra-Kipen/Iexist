6ced659d42419489a3dd26fd8e6ccd35
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _LayoutConformanceNativeComponent = _interopRequireDefault(require("./LayoutConformanceNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _global;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var isFabricUIManagerInstalled = ((_global = global) == null ? void 0 : _global.nativeFabricUIManager) != null;
function LayoutConformance(props) {
  return (0, _jsxRuntime.jsx)(_LayoutConformanceNativeComponent.default, Object.assign({}, props, {
    style: styles.container
  }));
}
function UnimplementedLayoutConformance(props) {
  if (__DEV__) {
    var warnOnce = require("../../Utilities/warnOnce");
    warnOnce('layoutconformance-unsupported', '"LayoutConformance" is only supported in the New Architecture');
  }
  return props.children;
}
var _default = exports.default = isFabricUIManagerInstalled ? LayoutConformance : UnimplementedLayoutConformance;
var styles = _StyleSheet.default.create({
  container: {
    display: 'contents'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfU3R5bGVTaGVldCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0xheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiX2dsb2JhbCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImlzRmFicmljVUlNYW5hZ2VySW5zdGFsbGVkIiwiZ2xvYmFsIiwibmF0aXZlRmFicmljVUlNYW5hZ2VyIiwiTGF5b3V0Q29uZm9ybWFuY2UiLCJwcm9wcyIsImpzeCIsImFzc2lnbiIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiVW5pbXBsZW1lbnRlZExheW91dENvbmZvcm1hbmNlIiwiX19ERVZfXyIsIndhcm5PbmNlIiwiY2hpbGRyZW4iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZGlzcGxheSJdLCJzb3VyY2VzIjpbIkxheW91dENvbmZvcm1hbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVhY3RfbmF0aXZlXG4gKi9cblxuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCBMYXlvdXRDb25mb3JtYW5jZU5hdGl2ZUNvbXBvbmVudCBmcm9tICcuL0xheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7XG4gIC8qKlxuICAgKiBzdHJpY3Q6IExheW91dCBpbiBhY2NvcmRhbmNlIHdpdGggVzNDIHNwZWMsIGV2ZW4gd2hlbiBicmVha2luZ1xuICAgKiBjb21wYXRpYmlsaXR5OiBMYXlvdXQgd2l0aCB0aGUgc2FtZSBiZWhhdmlvciBhcyBwcmV2aW91cyB2ZXJzaW9ucyBvZiBSZWFjdCBOYXRpdmVcbiAgICovXG4gIG1vZGU6ICdzdHJpY3QnIHwgJ2NvbXBhdGliaWxpdHknLFxuXG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxufT47XG5cbi8vIFdlIHdhbnQgYSBncmFjZWZ1bCBmYWxsYmFjayBmb3IgYXBwcyB1c2luZyBsZWdhY3kgYXJjaCwgYnV0IG5lZWQgdG8ga25vd1xuLy8gYWhlYWQgb2YgdGltZSB3aGV0aGVyIHRoZSBjb21wb25lbnQgaXMgYXZhaWxhYmxlLCBzbyB3ZSB0ZXN0IGZvciBnbG9iYWwuXG4vLyBUaGlzIGRvZXMgbm90IGNvcnJlY3RseSBoYW5kbGUgbWl4ZWQgYXJjaCBhcHBzICh3aGljaCBpcyBva2F5LCBzaW5jZSB3ZSBqdXN0XG4vLyBkZWdyYWRlIHRoZSBlcnJvciBleHBlcmllbmNlKS5cbmNvbnN0IGlzRmFicmljVUlNYW5hZ2VySW5zdGFsbGVkID0gZ2xvYmFsPy5uYXRpdmVGYWJyaWNVSU1hbmFnZXIgIT0gbnVsbDtcblxuZnVuY3Rpb24gTGF5b3V0Q29uZm9ybWFuY2UocHJvcHM6IFByb3BzKTogUmVhY3QuTm9kZSB7XG4gIHJldHVybiAoXG4gICAgPExheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50IHsuLi5wcm9wc30gc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9IC8+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFVuaW1wbGVtZW50ZWRMYXlvdXRDb25mb3JtYW5jZShwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb25zdCB3YXJuT25jZSA9IHJlcXVpcmUoJy4uLy4uL1V0aWxpdGllcy93YXJuT25jZScpO1xuXG4gICAgd2Fybk9uY2UoXG4gICAgICAnbGF5b3V0Y29uZm9ybWFuY2UtdW5zdXBwb3J0ZWQnLFxuICAgICAgJ1wiTGF5b3V0Q29uZm9ybWFuY2VcIiBpcyBvbmx5IHN1cHBvcnRlZCBpbiB0aGUgTmV3IEFyY2hpdGVjdHVyZScsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGlzRmFicmljVUlNYW5hZ2VySW5zdGFsbGVkXG4gID8gTGF5b3V0Q29uZm9ybWFuY2VcbiAgOiBVbmltcGxlbWVudGVkTGF5b3V0Q29uZm9ybWFuY2UpIGFzIGNvbXBvbmVudCguLi5Qcm9wcyk7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgZGlzcGxheTogJ2NvbnRlbnRzJyxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVdBLElBQUFBLFdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGlDQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFBK0IsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsSUFBQUssT0FBQTtBQUFBLFNBQUFDLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSix3QkFBQUksQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFnQi9CLElBQU1XLDBCQUEwQixHQUFHLEVBQUFyQixPQUFBLEdBQUFzQixNQUFNLHFCQUFOdEIsT0FBQSxDQUFRdUIscUJBQXFCLEtBQUksSUFBSTtBQUV4RSxTQUFTQyxpQkFBaUJBLENBQUNDLEtBQVksRUFBYztFQUNuRCxPQUNFLElBQUExQixXQUFBLENBQUEyQixHQUFBLEVBQUM5QixpQ0FBQSxDQUFBVyxPQUFnQyxFQUFBTSxNQUFBLENBQUFjLE1BQUEsS0FBS0YsS0FBSztJQUFFRyxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0M7RUFBVSxFQUFFLENBQUM7QUFFNUU7QUFFQSxTQUFTQyw4QkFBOEJBLENBQUNOLEtBQVksRUFBYztFQUNoRSxJQUFJTyxPQUFPLEVBQUU7SUFDWCxJQUFNQyxRQUFRLEdBQUd0QyxPQUFPLDJCQUEyQixDQUFDO0lBRXBEc0MsUUFBUSxDQUNOLCtCQUErQixFQUMvQiwrREFDRixDQUFDO0VBQ0g7RUFFQSxPQUFPUixLQUFLLENBQUNTLFFBQVE7QUFDdkI7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQTdCLE9BQUEsR0FFZWMsMEJBQTBCLEdBQ3RDRyxpQkFBaUIsR0FDakJPLDhCQUE4QjtBQUVsQyxJQUFNRixNQUFNLEdBQUdRLG1CQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQlIsU0FBUyxFQUFFO0lBQ1RTLE9BQU8sRUFBRTtFQUNYO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119