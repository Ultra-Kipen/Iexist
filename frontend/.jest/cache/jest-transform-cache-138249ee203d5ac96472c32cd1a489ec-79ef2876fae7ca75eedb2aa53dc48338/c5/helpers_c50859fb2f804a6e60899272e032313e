ff3816155f9b494bb8901ec58325f8e1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adjustPaddingOut = exports.adjustPaddingFlat = void 0;
exports.calculateFlatAffixTopPosition = calculateFlatAffixTopPosition;
exports.calculateLabelTopPosition = exports.calculateInputHeight = exports.calculateFlatInputHorizontalPadding = void 0;
exports.calculateOutlinedIconAndAffixTopPosition = calculateOutlinedIconAndAffixTopPosition;
exports.getOutlinedInputColors = exports.getFlatInputColors = exports.getConstants = exports.calculatePadding = void 0;
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _enums = require("./Adornment/enums");
var _constants = require("./constants");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var customHeight = height > 0 ? height : 0;
  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);
};
exports.calculateLabelTopPosition = calculateLabelTopPosition;
var calculateInputHeight = function calculateInputHeight(labelHeight) {
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var minHeight = arguments.length > 2 ? arguments[2] : undefined;
  var finalHeight = height > 0 ? height : labelHeight;
  if (height > 0) return height;
  return finalHeight < minHeight ? minHeight : finalHeight;
};
exports.calculateInputHeight = calculateInputHeight;
var calculatePadding = function calculatePadding(props) {
  var height = props.height,
    _props$multiline = props.multiline,
    multiline = _props$multiline === void 0 ? false : _props$multiline;
  var result = 0;
  if (multiline) {
    if (height && multiline) {
      result = calculateTextAreaPadding(props);
    } else {
      result = calculateInputPadding(props);
    }
  }
  return Math.max(0, result);
};
exports.calculatePadding = calculatePadding;
var calculateTextAreaPadding = function calculateTextAreaPadding(props) {
  var dense = props.dense;
  return dense ? 10 : 20;
};
var calculateInputPadding = function calculateInputPadding(_ref) {
  var topPosition = _ref.topPosition,
    fontSize = _ref.fontSize,
    multiline = _ref.multiline,
    scale = _ref.scale,
    dense = _ref.dense,
    offset = _ref.offset,
    isAndroid = _ref.isAndroid;
  var refFontSize = scale * fontSize;
  var result = Math.floor(topPosition / 2);
  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);
  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);
  return result;
};
var adjustPaddingOut = function adjustPaddingOut(_ref2) {
  var pad = _ref2.pad,
    multiline = _ref2.multiline,
    label = _ref2.label,
    scale = _ref2.scale,
    height = _ref2.height,
    fontSize = _ref2.fontSize,
    lineHeight = _ref2.lineHeight,
    dense = _ref2.dense,
    offset = _ref2.offset,
    isAndroid = _ref2.isAndroid;
  var fontHeight = lineHeight != null ? lineHeight : fontSize;
  var refFontHeight = scale * fontSize;
  var result = pad;
  if (!isAndroid && height && !multiline) {
    return {
      paddingTop: Math.max(0, (height - fontHeight) / 2),
      paddingBottom: Math.max(0, (height - fontHeight) / 2)
    };
  }
  if (!isAndroid && multiline) {
    if (dense) {
      if (label) {
        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;
      } else {
        result += 0;
      }
    }
    if (!dense) {
      if (label) {
        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);
      } else {
        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;
      }
    }
    result = Math.floor(result);
  }
  return {
    paddingTop: result,
    paddingBottom: result
  };
};
exports.adjustPaddingOut = adjustPaddingOut;
var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {
  var pad = _ref3.pad,
    scale = _ref3.scale,
    multiline = _ref3.multiline,
    label = _ref3.label,
    height = _ref3.height,
    offset = _ref3.offset,
    dense = _ref3.dense,
    fontSize = _ref3.fontSize,
    isAndroid = _ref3.isAndroid,
    styles = _ref3.styles;
  var result = pad;
  var topResult = result;
  var bottomResult = result;
  var paddingTop = styles.paddingTop,
    paddingBottom = styles.paddingBottom;
  var refFontSize = scale * fontSize;
  if (!multiline) {
    if (label) {
      return {
        paddingTop: paddingTop,
        paddingBottom: paddingBottom
      };
    }
    return {
      paddingTop: result,
      paddingBottom: result
    };
  }
  if (label) {
    topResult = paddingTop;
    bottomResult = paddingBottom;
    if (!isAndroid) {
      if (dense) {
        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;
      }
      if (!dense) {
        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;
      }
    }
    topResult = Math.floor(topResult);
  } else {
    if (height) {
      return {
        paddingTop: Math.max(0, (height - fontSize) / 2),
        paddingBottom: Math.max(0, (height - fontSize) / 2)
      };
    }
    if (!isAndroid) {
      if (dense) {
        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);
      }
      if (!dense) {
        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);
      }
      result = Math.floor(result);
      topResult = result;
      bottomResult = result;
    }
  }
  return {
    paddingTop: Math.max(0, topResult),
    paddingBottom: Math.max(0, bottomResult)
  };
};
exports.adjustPaddingFlat = adjustPaddingFlat;
function calculateFlatAffixTopPosition(_ref4) {
  var height = _ref4.height,
    paddingTop = _ref4.paddingTop,
    paddingBottom = _ref4.paddingBottom,
    affixHeight = _ref4.affixHeight;
  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;
  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;
  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;
}
function calculateOutlinedIconAndAffixTopPosition(_ref5) {
  var height = _ref5.height,
    affixHeight = _ref5.affixHeight,
    labelYOffset = _ref5.labelYOffset;
  return (height - affixHeight + labelYOffset) / 2;
}
var calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {
  var adornmentConfig = _ref6.adornmentConfig,
    isV3 = _ref6.isV3;
  var _getConstants = getConstants(isV3),
    LABEL_PADDING_HORIZONTAL = _getConstants.LABEL_PADDING_HORIZONTAL,
    ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET,
    FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET;
  var paddingLeft = LABEL_PADDING_HORIZONTAL;
  var paddingRight = LABEL_PADDING_HORIZONTAL;
  adornmentConfig.forEach(function (_ref7) {
    var type = _ref7.type,
      side = _ref7.side;
    if (type === _enums.AdornmentType.Icon && side === _enums.AdornmentSide.Left) {
      paddingLeft = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
    } else if (side === _enums.AdornmentSide.Right) {
      if (type === _enums.AdornmentType.Affix) {
        paddingRight = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
      } else if (type === _enums.AdornmentType.Icon) {
        paddingRight = _constants.ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;
      }
    }
  });
  return {
    paddingLeft: paddingLeft,
    paddingRight: paddingRight
  };
};
exports.calculateFlatInputHorizontalPadding = calculateFlatInputHorizontalPadding;
var getInputTextColor = function getInputTextColor(_ref8) {
  var theme = _ref8.theme,
    textColor = _ref8.textColor,
    disabled = _ref8.disabled;
  if (textColor) {
    return textColor;
  }
  if (theme.isV3) {
    if (disabled) {
      return theme.colors.onSurfaceDisabled;
    }
    return theme.colors.onSurface;
  }
  if (disabled) {
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
  }
  return theme.colors.text;
};
var getActiveColor = function getActiveColor(_ref9) {
  var theme = _ref9.theme,
    disabled = _ref9.disabled,
    error = _ref9.error,
    activeUnderlineColor = _ref9.activeUnderlineColor,
    activeOutlineColor = _ref9.activeOutlineColor,
    mode = _ref9.mode;
  var isFlat = mode === 'flat';
  var modeColor = isFlat ? activeUnderlineColor : activeOutlineColor;
  if (error) {
    return theme.colors.error;
  }
  if (modeColor) {
    return modeColor;
  }
  if (disabled) {
    if (theme.isV3) {
      return theme.colors.onSurfaceDisabled;
    }
    return (0, _color.default)(theme.colors.text).alpha(0.54).rgb().string();
  }
  return theme.colors.primary;
};
var getPlaceholderColor = function getPlaceholderColor(_ref10) {
  var theme = _ref10.theme,
    disabled = _ref10.disabled;
  if (theme.isV3) {
    if (disabled) {
      return theme.colors.onSurfaceDisabled;
    }
    return theme.colors.onSurfaceVariant;
  }
  if (disabled) {
    return theme.colors.disabled;
  }
  return theme.colors.placeholder;
};
var getSelectionColor = function getSelectionColor(_ref11) {
  var activeColor = _ref11.activeColor,
    customSelectionColor = _ref11.customSelectionColor;
  if (typeof customSelectionColor !== 'undefined') {
    return customSelectionColor;
  }
  if (_reactNative.Platform.OS === 'android') {
    return (0, _color.default)(activeColor).alpha(0.54).rgb().string();
  }
  return activeColor;
};
var getFlatBackgroundColor = function getFlatBackgroundColor(_ref12) {
  var _theme$colors, _theme$colors2;
  var theme = _ref12.theme,
    disabled = _ref12.disabled;
  if (theme.isV3) {
    if (disabled) {
      return (0, _color.default)(theme.colors.onSurface).alpha(0.04).rgb().string();
    } else {
      return theme.colors.surfaceVariant;
    }
  }
  if (disabled) {
    return undefined;
  }
  return theme.dark ? (0, _color.default)((_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.background).lighten(0.24).rgb().string() : (0, _color.default)((_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : _theme$colors2.background).darken(0.06).rgb().string();
};
var getFlatUnderlineColor = function getFlatUnderlineColor(_ref13) {
  var theme = _ref13.theme,
    disabled = _ref13.disabled,
    underlineColor = _ref13.underlineColor;
  if (!disabled && underlineColor) {
    return underlineColor;
  }
  if (theme.isV3) {
    if (disabled) {
      return theme.colors.onSurfaceDisabled;
    }
    return theme.colors.onSurfaceVariant;
  }
  if (disabled) {
    return 'transparent';
  }
  return theme.colors.disabled;
};
var getOutlinedOutlineInputColor = function getOutlinedOutlineInputColor(_ref14) {
  var theme = _ref14.theme,
    disabled = _ref14.disabled,
    customOutlineColor = _ref14.customOutlineColor;
  var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;
  if (!disabled && customOutlineColor) {
    return customOutlineColor;
  }
  if (theme.isV3) {
    if (disabled) {
      if (theme.dark) {
        return 'transparent';
      }
      return theme.colors.surfaceDisabled;
    }
    return theme.colors.outline;
  }
  if (disabled) {
    if (isTransparent) {
      return customOutlineColor;
    }
    return theme.colors.disabled;
  }
  return theme.colors.placeholder;
};
var getFlatInputColors = function getFlatInputColors(_ref15) {
  var underlineColor = _ref15.underlineColor,
    activeUnderlineColor = _ref15.activeUnderlineColor,
    customSelectionColor = _ref15.customSelectionColor,
    textColor = _ref15.textColor,
    disabled = _ref15.disabled,
    error = _ref15.error,
    theme = _ref15.theme;
  var baseFlatColorProps = {
    theme: theme,
    disabled: disabled
  };
  var activeColor = getActiveColor(Object.assign({}, baseFlatColorProps, {
    error: error,
    activeUnderlineColor: activeUnderlineColor,
    mode: 'flat'
  }));
  return {
    inputTextColor: getInputTextColor(Object.assign({}, baseFlatColorProps, {
      textColor: textColor
    })),
    activeColor: activeColor,
    underlineColorCustom: getFlatUnderlineColor(Object.assign({}, baseFlatColorProps, {
      underlineColor: underlineColor
    })),
    placeholderColor: getPlaceholderColor(baseFlatColorProps),
    selectionColor: getSelectionColor({
      activeColor: activeColor,
      customSelectionColor: customSelectionColor
    }),
    errorColor: theme.colors.error,
    backgroundColor: getFlatBackgroundColor(baseFlatColorProps)
  };
};
exports.getFlatInputColors = getFlatInputColors;
var getOutlinedInputColors = function getOutlinedInputColors(_ref16) {
  var activeOutlineColor = _ref16.activeOutlineColor,
    customOutlineColor = _ref16.customOutlineColor,
    customSelectionColor = _ref16.customSelectionColor,
    textColor = _ref16.textColor,
    disabled = _ref16.disabled,
    error = _ref16.error,
    theme = _ref16.theme;
  var baseOutlinedColorProps = {
    theme: theme,
    disabled: disabled
  };
  var activeColor = getActiveColor(Object.assign({}, baseOutlinedColorProps, {
    error: error,
    activeOutlineColor: activeOutlineColor,
    mode: 'outlined'
  }));
  return {
    inputTextColor: getInputTextColor(Object.assign({}, baseOutlinedColorProps, {
      textColor: textColor
    })),
    activeColor: activeColor,
    outlineColor: getOutlinedOutlineInputColor(Object.assign({}, baseOutlinedColorProps, {
      customOutlineColor: customOutlineColor
    })),
    placeholderColor: getPlaceholderColor(baseOutlinedColorProps),
    selectionColor: getSelectionColor({
      activeColor: activeColor,
      customSelectionColor: customSelectionColor
    }),
    errorColor: theme.colors.error
  };
};
exports.getOutlinedInputColors = getOutlinedInputColors;
var getConstants = function getConstants(isV3) {
  var AFFIX_OFFSET;
  var ICON_OFFSET;
  var LABEL_PADDING_TOP;
  var LABEL_PADDING_HORIZONTAL;
  var FLAT_INPUT_OFFSET;
  var MIN_HEIGHT;
  var INPUT_PADDING_HORIZONTAL;
  var ADORNMENT_OFFSET;
  var OUTLINED_INPUT_OFFSET;
  if (isV3) {
    AFFIX_OFFSET = _constants.MD3_AFFIX_OFFSET;
    ICON_OFFSET = _constants.MD3_ICON_OFFSET;
    LABEL_PADDING_TOP = _constants.MD3_LABEL_PADDING_TOP;
    LABEL_PADDING_HORIZONTAL = _constants.MD3_LABEL_PADDING_HORIZONTAL;
    FLAT_INPUT_OFFSET = _constants.MD3_FLAT_INPUT_OFFSET;
    MIN_HEIGHT = _constants.MD3_MIN_HEIGHT;
    INPUT_PADDING_HORIZONTAL = _constants.MD3_INPUT_PADDING_HORIZONTAL;
    ADORNMENT_OFFSET = _constants.MD3_ADORNMENT_OFFSET;
    OUTLINED_INPUT_OFFSET = _constants.MD3_OUTLINED_INPUT_OFFSET;
  } else {
    AFFIX_OFFSET = _constants.MD2_AFFIX_OFFSET;
    ICON_OFFSET = _constants.MD2_ICON_OFFSET;
    LABEL_PADDING_TOP = _constants.MD2_LABEL_PADDING_TOP;
    LABEL_PADDING_HORIZONTAL = _constants.MD2_LABEL_PADDING_HORIZONTAL;
    FLAT_INPUT_OFFSET = _constants.MD2_FLAT_INPUT_OFFSET;
    MIN_HEIGHT = _constants.MD2_MIN_HEIGHT;
    INPUT_PADDING_HORIZONTAL = _constants.MD2_INPUT_PADDING_HORIZONTAL;
    ADORNMENT_OFFSET = _constants.MD2_ADORNMENT_OFFSET;
    OUTLINED_INPUT_OFFSET = _constants.MD2_OUTLINED_INPUT_OFFSET;
  }
  return {
    AFFIX_OFFSET: AFFIX_OFFSET,
    ICON_OFFSET: ICON_OFFSET,
    LABEL_PADDING_TOP: LABEL_PADDING_TOP,
    LABEL_PADDING_HORIZONTAL: LABEL_PADDING_HORIZONTAL,
    FLAT_INPUT_OFFSET: FLAT_INPUT_OFFSET,
    MIN_HEIGHT: MIN_HEIGHT,
    INPUT_PADDING_HORIZONTAL: INPUT_PADDING_HORIZONTAL,
    ADORNMENT_OFFSET: ADORNMENT_OFFSET,
    OUTLINED_INPUT_OFFSET: OUTLINED_INPUT_OFFSET,
    MIN_WIDTH: _constants.MIN_WIDTH
  };
};
exports.getConstants = getConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,