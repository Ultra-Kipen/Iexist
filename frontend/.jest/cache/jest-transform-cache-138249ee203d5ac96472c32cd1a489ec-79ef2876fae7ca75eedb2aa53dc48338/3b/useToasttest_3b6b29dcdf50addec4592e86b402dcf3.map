{"version":3,"names":["_getJestObj","mock","ToastController","show","jest","fn","hide","_reactHooks","require","_useToast","_Toast","_require","describe","beforeEach","clearAllMocks","it","_renderHook","renderHook","useToast","result","act","current","showToast","expect","toHaveBeenCalledWith","message","type","duration","position","_renderHook2","objectContaining","_renderHook3","_renderHook4","hideToast","toHaveBeenCalled","_renderHook5","rerender","initialShowToast","initialHideToast","toBe"],"sources":["useToast.test.ts"],"sourcesContent":["// __tests__/hooks/useToast.test.ts\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport { useToast } from '../../src/hooks/useToast';\r\nimport { ToastController } from '../../src/components/Toast';\r\n\r\n// ToastController 모킹\r\njest.mock('../../src/components/Toast', () => ({\r\n  ToastController: {\r\n    show: jest.fn(),\r\n    hide: jest.fn(),\r\n  },\r\n}));\r\n\r\ndescribe('useToast', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('showToast 함수는 ToastController.show를 호출한다', () => {\r\n    const { result } = renderHook(() => useToast());\r\n    \r\n    act(() => {\r\n      result.current.showToast('테스트 메시지');\r\n    });\r\n    \r\n    expect(ToastController.show).toHaveBeenCalledWith({\r\n      message: '테스트 메시지',\r\n      type: 'info',\r\n      duration: 3000,\r\n      position: 'bottom',\r\n    });\r\n  });\r\n\r\n  it('showToast 함수는 type 매개변수를 적용한다', () => {\r\n    const { result } = renderHook(() => useToast());\r\n    \r\n    act(() => {\r\n      result.current.showToast('성공 메시지', 'success');\r\n    });\r\n    \r\n    expect(ToastController.show).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        message: '성공 메시지',\r\n        type: 'success',\r\n      })\r\n    );\r\n  });\r\n\r\n  it('showToast 함수는 duration 매개변수를 적용한다', () => {\r\n    const { result } = renderHook(() => useToast());\r\n    \r\n    act(() => {\r\n      result.current.showToast('짧은 메시지', 'warning', 1000);\r\n    });\r\n    \r\n    expect(ToastController.show).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        message: '짧은 메시지',\r\n        type: 'warning',\r\n        duration: 1000,\r\n      })\r\n    );\r\n  });\r\n\r\n  it('hideToast 함수는 ToastController.hide를 호출한다', () => {\r\n    const { result } = renderHook(() => useToast());\r\n    \r\n    act(() => {\r\n      result.current.hideToast();\r\n    });\r\n    \r\n    expect(ToastController.hide).toHaveBeenCalled();\r\n  });\r\n\r\n  it('반환된 함수들은 메모이제이션 된다', () => {\r\n    const { result, rerender } = renderHook(() => useToast());\r\n    \r\n    const initialShowToast = result.current.showToast;\r\n    const initialHideToast = result.current.hideToast;\r\n    \r\n    // 리렌더\r\n    rerender();\r\n    \r\n    // 함수 참조가 유지되는지 확인\r\n    expect(result.current.showToast).toBe(initialShowToast);\r\n    expect(result.current.hideToast).toBe(initialHideToast);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}