b49f5fc179f9e5c6b8e53ad6337c4345
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children", "dark", "style", "mode", "elevated", "safeAreaInsets", "theme"],
  _excluded2 = ["backgroundColor", "elevation"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Appbar = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _AppbarContent = _interopRequireDefault(require("./AppbarContent"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _Surface = _interopRequireDefault(require("../Surface"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Appbar = function Appbar(_ref) {
  var children = _ref.children,
    dark = _ref.dark,
    style = _ref.style,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'small' : _ref$mode,
    elevated = _ref.elevated,
    safeAreaInsets = _ref.safeAreaInsets,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3;
  var flattenedStyle = _reactNative.StyleSheet.flatten(style);
  var _ref2 = flattenedStyle || {},
    customBackground = _ref2.backgroundColor,
    _ref2$elevation = _ref2.elevation,
    elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,
    restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var backgroundColor = (0, _utils.getAppbarBackgroundColor)(theme, elevation, customBackground, elevated);
  var isMode = function isMode(modeToCompare) {
    return isV3 && mode === modeToCompare;
  };
  var isDark = false;
  if (typeof dark === 'boolean') {
    isDark = dark;
  } else if (!isV3) {
    isDark = backgroundColor === 'transparent' ? false : typeof backgroundColor === 'string' ? !(0, _color.default)(backgroundColor).isLight() : true;
  }
  var isV3CenterAlignedMode = isV3 && isMode('center-aligned');
  var shouldCenterContent = false;
  var shouldAddLeftSpacing = false;
  var shouldAddRightSpacing = false;
  if (!isV3 && _reactNative.Platform.OS === 'ios' || isV3CenterAlignedMode) {
    var hasAppbarContent = false;
    var leftItemsCount = 0;
    var rightItemsCount = 0;
    React.Children.forEach(children, function (child) {
      if (React.isValidElement(child)) {
        var isLeading = child.props.isLeading === true;
        if (child.type === _AppbarContent.default) {
          hasAppbarContent = true;
        } else if (isLeading || !hasAppbarContent) {
          leftItemsCount++;
        } else {
          rightItemsCount++;
        }
      }
    });
    shouldCenterContent = hasAppbarContent && leftItemsCount < 2 && rightItemsCount < (isV3 ? 3 : 2);
    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;
    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;
  }
  var spacingStyle = isV3 ? styles.v3Spacing : styles.spacing;
  var insets = {
    paddingBottom: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom,
    paddingTop: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top,
    paddingLeft: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left,
    paddingRight: safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right
  };
  return React.createElement(_Surface.default, _extends({
    style: [{
      backgroundColor: backgroundColor
    }, styles.appbar, {
      height: isV3 ? _utils.modeAppbarHeight[mode] : _utils.DEFAULT_APPBAR_HEIGHT
    }, insets, restStyle, !theme.isV3 && {
      elevation: elevation
    }],
    elevation: elevation
  }, rest), shouldAddLeftSpacing ? React.createElement(_reactNative.View, {
    style: spacingStyle
  }) : null, (!isV3 || isMode('small') || isMode('center-aligned')) && React.createElement(React.Fragment, null, (0, _utils.renderAppbarContent)({
    children: children,
    isDark: isDark,
    theme: theme,
    isV3: isV3,
    renderOnly: ['Appbar.BackAction'],
    shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent
  }), (0, _utils.renderAppbarContent)({
    children: [].concat((0, _toConsumableArray2.default)((0, _utils.filterAppbarActions)(children, true)), (0, _toConsumableArray2.default)((0, _utils.filterAppbarActions)(children))),
    isDark: isDark,
    theme: theme,
    isV3: isV3,
    renderExcept: ['Appbar.BackAction'],
    shouldCenterContent: isV3CenterAlignedMode || shouldCenterContent
  })), (isMode('medium') || isMode('large')) && React.createElement(_reactNative.View, {
    style: [styles.columnContainer, isMode('center-aligned') && styles.centerAlignedContainer]
  }, React.createElement(_reactNative.View, {
    style: styles.controlsRow
  }, (0, _utils.renderAppbarContent)({
    children: children,
    isDark: isDark,
    isV3: isV3,
    renderOnly: ['Appbar.BackAction'],
    mode: mode
  }), (0, _utils.renderAppbarContent)({
    children: (0, _utils.filterAppbarActions)(children, true),
    isDark: isDark,
    isV3: isV3,
    renderOnly: ['Appbar.Action'],
    mode: mode
  }), React.createElement(_reactNative.View, {
    style: styles.rightActionControls
  }, (0, _utils.renderAppbarContent)({
    children: (0, _utils.filterAppbarActions)(children),
    isDark: isDark,
    isV3: isV3,
    renderExcept: ['Appbar', 'Appbar.BackAction', 'Appbar.Content', 'Appbar.Header'],
    mode: mode
  }))), (0, _utils.renderAppbarContent)({
    children: children,
    isDark: isDark,
    isV3: isV3,
    renderOnly: ['Appbar.Content'],
    mode: mode
  })), shouldAddRightSpacing ? React.createElement(_reactNative.View, {
    style: spacingStyle
  }) : null);
};
exports.Appbar = Appbar;
var styles = _reactNative.StyleSheet.create({
  appbar: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 4
  },
  spacing: {
    width: 48
  },
  v3Spacing: {
    width: 52
  },
  controlsRow: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  rightActionControls: {
    flexDirection: 'row',
    flex: 1,
    justifyContent: 'flex-end'
  },
  columnContainer: {
    flexDirection: 'column',
    flex: 1,
    paddingTop: 8
  },
  centerAlignedContainer: {
    paddingTop: 0
  }
});
var _default = Appbar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,