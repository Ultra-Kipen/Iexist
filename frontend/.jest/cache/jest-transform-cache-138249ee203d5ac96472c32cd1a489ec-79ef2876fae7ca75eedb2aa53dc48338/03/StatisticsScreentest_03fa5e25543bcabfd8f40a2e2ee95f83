0e8b0628af48e3232f1d0131a6e4a37a
_getJestObj().mock('react-native-chart-kit', function () {
  return {
    LineChart: function MockLineChart() {
      return null;
    },
    PieChart: function MockPieChart() {
      return null;
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return function MockIcon() {
    return null;
  };
});
_getJestObj().mock('react-native-paper', function () {
  var mockCardContent = function MockCardContent(props) {
    return props.children;
  };
  var mockCardTitle = function MockCardTitle() {
    return null;
  };
  var mockCardActions = function MockCardActions() {
    return null;
  };
  var mockCard = function MockCard(props) {
    return props.children;
  };
  mockCard.Content = mockCardContent;
  mockCard.Title = mockCardTitle;
  mockCard.Actions = mockCardActions;
  return {
    Button: function MockButton(props) {
      return props.children;
    },
    Card: mockCard,
    Chip: function MockChip(props) {
      return props.children;
    },
    SegmentedButtons: function MockSegmentedButtons(props) {
      return (0, _jsxRuntime.jsx)("div", {
        children: props.value
      });
    }
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: function MockSafeAreaView(props) {
      return props.children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        left: 0,
        bottom: 0
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    },
    useIsFocused: function useIsFocused() {
      return true;
    }
  };
});
_getJestObj().mock('../../src/services/api/client', function () {
  return {
    get: jest.fn().mockImplementation(function (url) {
      if (url === '/statistics/emotions') {
        return Promise.resolve({
          data: {
            statistics: {
              daily: [{
                emotion_id: 1,
                count: 10,
                date: '2024-04-01'
              }, {
                emotion_id: 2,
                count: 5,
                date: '2024-04-01'
              }],
              weekly: [{
                emotion_id: 1,
                count: 20,
                week: '2024-W13'
              }, {
                emotion_id: 2,
                count: 15,
                week: '2024-W13'
              }],
              monthly: [{
                emotion_id: 1,
                count: 50,
                month: '2024-04'
              }, {
                emotion_id: 2,
                count: 30,
                month: '2024-04'
              }]
            }
          }
        });
      } else if (url === '/emotions') {
        return Promise.resolve({
          data: {
            emotions: [{
              emotion_id: 1,
              name: '행복',
              icon: 'emoticon-happy-outline',
              color: '#FFD700'
            }, {
              emotion_id: 2,
              name: '감사',
              icon: 'hand-heart',
              color: '#FF69B4'
            }, {
              emotion_id: 5,
              name: '슬픔',
              icon: 'emoticon-sad-outline',
              color: '#4682B4'
            }]
          }
        });
      }
      return Promise.resolve({
        data: {}
      });
    }),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.Dimensions.get = jest.fn().mockReturnValue({
    width: 375,
    height: 812
  });
  return RN;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _StatisticsScreen = _interopRequireDefault(require("../../src/screens/StatisticsScreen"));
var _client = _interopRequireDefault(require("../../src/services/api/client"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('StatisticsScreen 화면', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('StatisticsScreen 컴포넌트가 에러 없이 렌더링되어야 함', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StatisticsScreen.default, {
      navigation: {},
      route: {}
    }));
    expect(_client.default.get).toHaveBeenCalledWith('/emotions');
    expect(_client.default.get).toHaveBeenCalledWith('/statistics/emotions');
  }, 10000);
  it('기간 변경 시 올바른 레이블이 표시되어야 함', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StatisticsScreen.default, {
      navigation: {},
      route: {}
    }));
    expect(_client.default.get).toHaveBeenCalledWith('/statistics/emotions');
  }, 10000);
  it('데이터 준비 메서드가 올바르게 동작해야 함', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StatisticsScreen.default, {
      navigation: {},
      route: {}
    }));
    expect(_client.default.get).toHaveBeenCalledWith('/statistics/emotions');
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,