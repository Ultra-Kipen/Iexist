3fa35f3e53e674c3a01712e04002dd2c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processBackgroundImage;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var processColor = require('./processColor').default;
var DIRECTION_KEYWORD_REGEX = /^to\s+(?:top|bottom|left|right)(?:\s+(?:top|bottom|left|right))?/i;
var ANGLE_UNIT_REGEX = /^([+-]?\d*\.?\d+)(deg|grad|rad|turn)$/i;
var DEFAULT_DIRECTION = {
  type: 'angle',
  value: 180
};
function processBackgroundImage(backgroundImage) {
  var result = [];
  if (backgroundImage == null) {
    return result;
  }
  if (typeof backgroundImage === 'string') {
    result = parseCSSLinearGradient(backgroundImage.replace(/\n/g, ' '));
  } else if (Array.isArray(backgroundImage)) {
    for (var bgImage of backgroundImage) {
      var processedColorStops = [];
      for (var index = 0; index < bgImage.colorStops.length; index++) {
        var colorStop = bgImage.colorStops[index];
        var processedColor = processColor(colorStop.color);
        if (processedColor == null) {
          return [];
        }
        if (colorStop.positions != null && colorStop.positions.length > 0) {
          for (var position of colorStop.positions) {
            if (position.endsWith('%')) {
              processedColorStops.push({
                color: processedColor,
                position: parseFloat(position) / 100
              });
            } else {
              return [];
            }
          }
        } else {
          processedColorStops.push({
            color: processedColor,
            position: null
          });
        }
      }
      var direction = DEFAULT_DIRECTION;
      var bgDirection = bgImage.direction != null ? bgImage.direction.toLowerCase() : null;
      if (bgDirection != null) {
        if (ANGLE_UNIT_REGEX.test(bgDirection)) {
          var parsedAngle = getAngleInDegrees(bgDirection);
          if (parsedAngle != null) {
            direction = {
              type: 'angle',
              value: parsedAngle
            };
          } else {
            return [];
          }
        } else if (DIRECTION_KEYWORD_REGEX.test(bgDirection)) {
          var parsedDirection = getDirectionForKeyword(bgDirection);
          if (parsedDirection != null) {
            direction = parsedDirection;
          } else {
            return [];
          }
        } else {
          return [];
        }
      }
      var fixedColorStops = getFixedColorStops(processedColorStops);
      result = result.concat({
        type: 'linearGradient',
        direction: direction,
        colorStops: fixedColorStops
      });
    }
  }
  return result;
}
function parseCSSLinearGradient(cssString) {
  var gradients = [];
  var match;
  var linearGradientRegex = /linear-gradient\s*\(((?:\([^)]*\)|[^())])*)\)/gi;
  while (match = linearGradientRegex.exec(cssString)) {
    var gradientContent = match[1];
    var parts = gradientContent.split(',');
    var direction = DEFAULT_DIRECTION;
    var trimmedDirection = parts[0].trim().toLowerCase();
    var colorStopRegex = /\s*((?:(?:rgba?|hsla?)\s*\([^)]+\))|#[0-9a-fA-F]+|[a-zA-Z]+)(?:\s+(-?[0-9.]+%?)(?:\s+(-?[0-9.]+%?))?)?\s*/gi;
    if (ANGLE_UNIT_REGEX.test(trimmedDirection)) {
      var parsedAngle = getAngleInDegrees(trimmedDirection);
      if (parsedAngle != null) {
        direction = {
          type: 'angle',
          value: parsedAngle
        };
        parts.shift();
      } else {
        return [];
      }
    } else if (DIRECTION_KEYWORD_REGEX.test(trimmedDirection)) {
      var parsedDirection = getDirectionForKeyword(trimmedDirection);
      if (parsedDirection != null) {
        direction = parsedDirection;
        parts.shift();
      } else {
        return [];
      }
    } else if (!colorStopRegex.test(trimmedDirection)) {
      return [];
    }
    colorStopRegex.lastIndex = 0;
    var colorStops = [];
    var fullColorStopsStr = parts.join(',');
    var colorStopMatch = void 0;
    while (colorStopMatch = colorStopRegex.exec(fullColorStopsStr)) {
      var _colorStopMatch = colorStopMatch,
        _colorStopMatch2 = (0, _slicedToArray2.default)(_colorStopMatch, 4),
        color = _colorStopMatch2[1],
        position1 = _colorStopMatch2[2],
        position2 = _colorStopMatch2[3];
      var processedColor = processColor(color.trim().toLowerCase());
      if (processedColor == null) {
        return [];
      }
      if (typeof position1 !== 'undefined') {
        if (position1.endsWith('%')) {
          colorStops.push({
            color: processedColor,
            position: parseFloat(position1) / 100
          });
        } else {
          return [];
        }
      } else {
        colorStops.push({
          color: processedColor,
          position: null
        });
      }
      if (typeof position2 !== 'undefined') {
        if (position2.endsWith('%')) {
          colorStops.push({
            color: processedColor,
            position: parseFloat(position2) / 100
          });
        } else {
          return [];
        }
      }
    }
    var fixedColorStops = getFixedColorStops(colorStops);
    gradients.push({
      type: 'linearGradient',
      direction: direction,
      colorStops: fixedColorStops
    });
  }
  return gradients;
}
function getDirectionForKeyword(direction) {
  if (direction == null) {
    return null;
  }
  var normalized = direction.replace(/\s+/g, ' ').toLowerCase();
  switch (normalized) {
    case 'to top':
      return {
        type: 'angle',
        value: 0
      };
    case 'to right':
      return {
        type: 'angle',
        value: 90
      };
    case 'to bottom':
      return {
        type: 'angle',
        value: 180
      };
    case 'to left':
      return {
        type: 'angle',
        value: 270
      };
    case 'to top right':
    case 'to right top':
      return {
        type: 'keyword',
        value: 'to top right'
      };
    case 'to bottom right':
    case 'to right bottom':
      return {
        type: 'keyword',
        value: 'to bottom right'
      };
    case 'to top left':
    case 'to left top':
      return {
        type: 'keyword',
        value: 'to top left'
      };
    case 'to bottom left':
    case 'to left bottom':
      return {
        type: 'keyword',
        value: 'to bottom left'
      };
    default:
      return null;
  }
}
function getAngleInDegrees(angle) {
  if (angle == null) {
    return null;
  }
  var match = angle.match(ANGLE_UNIT_REGEX);
  if (!match) {
    return null;
  }
  var _match = (0, _slicedToArray2.default)(match, 3),
    value = _match[1],
    unit = _match[2];
  var numericValue = parseFloat(value);
  switch (unit) {
    case 'deg':
      return numericValue;
    case 'grad':
      return numericValue * 0.9;
    case 'rad':
      return numericValue * 180 / Math.PI;
    case 'turn':
      return numericValue * 360;
    default:
      return null;
  }
}
function getFixedColorStops(colorStops) {
  var _colorStops$0$positio;
  var fixedColorStops = [];
  var hasNullPositions = false;
  var maxPositionSoFar = (_colorStops$0$positio = colorStops[0].position) != null ? _colorStops$0$positio : 0;
  for (var i = 0; i < colorStops.length; i++) {
    var colorStop = colorStops[i];
    var newPosition = colorStop.position;
    if (newPosition === null) {
      if (i === 0) {
        newPosition = 0;
      } else if (i === colorStops.length - 1) {
        newPosition = 1;
      }
    }
    if (newPosition !== null) {
      newPosition = Math.max(newPosition, maxPositionSoFar);
      fixedColorStops[i] = {
        color: colorStop.color,
        position: newPosition
      };
      maxPositionSoFar = newPosition;
    } else {
      hasNullPositions = true;
    }
  }
  if (hasNullPositions) {
    var lastDefinedIndex = 0;
    for (var _i = 1; _i < fixedColorStops.length; _i++) {
      if (fixedColorStops[_i] !== undefined) {
        var unpositionedStops = _i - lastDefinedIndex - 1;
        if (unpositionedStops > 0) {
          var startPosition = fixedColorStops[lastDefinedIndex].position;
          var endPosition = fixedColorStops[_i].position;
          var increment = (endPosition - startPosition) / (unpositionedStops + 1);
          for (var j = 1; j <= unpositionedStops; j++) {
            fixedColorStops[lastDefinedIndex + j] = {
              color: colorStops[lastDefinedIndex + j].color,
              position: startPosition + increment * j
            };
          }
        }
        lastDefinedIndex = _i;
      }
    }
  }
  return fixedColorStops;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,