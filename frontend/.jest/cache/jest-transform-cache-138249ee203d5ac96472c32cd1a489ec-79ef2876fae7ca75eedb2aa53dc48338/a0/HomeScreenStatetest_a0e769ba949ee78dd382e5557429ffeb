88862ab6baa7a26a21d653502c26ee00
_getJestObj().mock('../../src/screens/HomeScreen', function () {
  return {
    __esModule: true,
    default: function _default() {
      return null;
    },
    renderPosts: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPosts = [{
  id: 1,
  anonymousId: 'ÏùµÎ™Ö1',
  content: 'Ïò§ÎäòÎèÑ ÎÇú Ïó¨Í∏∞ Ï°¥Ïû¨ÌïòÍ≥† ÏûàÏñ¥Ïöî. ÏûëÏùÄ ÏùºÏÉÅÏù¥ Í∞êÏÇ¨ÌïòÎÑ§Ïöî.',
  emotion: 'Í∞êÏÇ¨',
  emotionIcon: 'üôè',
  image: 'https://via.placeholder.com/150',
  likes: 15,
  comments: [{
    id: 1,
    author: 'ÏùµÎ™Ö2',
    content: 'ÎãπÏã†Ïùò Ï°¥Ïû¨ ÏûêÏ≤¥Í∞Ä ÏÜåÏ§ëÌï¥Ïöî. ÌûòÎÇ¥ÏÑ∏Ïöî!'
  }],
  timestamp: '2ÏãúÍ∞Ñ Ï†Ñ'
}, {
  id: 2,
  anonymousId: 'ÏùµÎ™Ö3',
  content: 'ÌûòÎì† ÎÇ†Ïù¥ÏßÄÎßå, Í∑∏ÎûòÎèÑ ÎÇú Ïó¨Í∏∞ ÏûàÏñ¥Ïöî.',
  emotion: 'ÏúÑÎ°ú',
  emotionIcon: 'ü§ó',
  image: '',
  likes: 7,
  comments: [],
  timestamp: '3ÏãúÍ∞Ñ Ï†Ñ'
}];
var MockPostComponent = function MockPostComponent(_ref) {
  var post = _ref.post,
    onLike = _ref.onLike,
    onComment = _ref.onComment;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: `post-${post.id}`,
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: `post-author-${post.id}`,
      children: post.anonymousId
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: `post-content-${post.id}`,
      children: post.content
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: `post-emotion-${post.id}`,
      children: post.emotion
    }), post.image && (0, _jsxRuntime.jsx)(_reactNative2.Image, {
      testID: `post-image-${post.id}`,
      source: {
        uri: post.image
      }
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: `post-actions-${post.id}`,
      children: [(0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: `like-button-${post.id}`,
        onPress: function onPress() {
          return onLike(post.id);
        },
        children: (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          children: ["\uC88B\uC544\uC694 ", post.likes]
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: `comment-button-${post.id}`,
        onPress: function onPress() {},
        children: (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          children: ["\uB313\uAE00 ", post.comments.length]
        })
      })]
    }), post.comments.map(function (comment) {
      return (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: `comment-${comment.id}-post-${post.id}`,
        children: (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
          children: [comment.author, ": ", comment.content]
        })
      }, comment.id);
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: `comment-input-container-${post.id}`,
      children: (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: `send-comment-button-${post.id}`,
        onPress: function onPress() {
          return onComment(post.id, 'ÏÉà ÎåìÍ∏ÄÏûÖÎãàÎã§.');
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uB313\uAE00 \uC791\uC131"
        })
      })
    })]
  });
};
var MockPostsScreen = function MockPostsScreen() {
  var _React$useState = _react.default.useState(mockPosts),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    posts = _React$useState2[0],
    setPosts = _React$useState2[1];
  var handleLike = function handleLike(postId) {
    setPosts(posts.map(function (post) {
      return post.id === postId ? Object.assign({}, post, {
        likes: post.likes + 1
      }) : post;
    }));
  };
  var handleComment = function handleComment(postId, commentContent) {
    setPosts(posts.map(function (post) {
      return post.id === postId ? Object.assign({}, post, {
        comments: [].concat((0, _toConsumableArray2.default)(post.comments), [{
          id: Date.now(),
          author: 'ÏùµÎ™Ö',
          content: commentContent
        }])
      }) : post;
    }));
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "posts-container",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "posts-heading",
      children: "\uB204\uAD70\uAC00\uC758 \uD558\uB8E8\uB294.."
    }), posts.map(function (post) {
      return (0, _jsxRuntime.jsx)(MockPostComponent, {
        post: post,
        onLike: handleLike,
        onComment: handleComment
      }, post.id);
    })]
  });
};
describe('HomeScreen Posts Section', function () {
  var originalDateNow = Date.now;
  beforeEach(function () {
    Date.now = jest.fn(function () {
      return 12345678;
    });
  });
  afterEach(function () {
    Date.now = originalDateNow;
  });
  it('renders all posts correctly', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockPostsScreen, {}));
    expect(_reactNative.screen.getByTestId('posts-heading')).toBeTruthy();
    expect(_reactNative.screen.getByTestId('posts-heading').props.children).toBe('ÎàÑÍµ∞Í∞ÄÏùò ÌïòÎ£®Îäî..');
    var postElements = _reactNative.screen.getAllByTestId(/^post-\d+$/);
    expect(postElements).toHaveLength(mockPosts.length);
    mockPosts.forEach(function (post) {
      expect(_reactNative.screen.getByTestId(`post-author-${post.id}`).props.children).toBe(post.anonymousId);
      expect(_reactNative.screen.getByTestId(`post-content-${post.id}`).props.children).toBe(post.content);
      expect(_reactNative.screen.getByTestId(`post-emotion-${post.id}`).props.children).toBe(post.emotion);
      expect(_reactNative.screen.getByTestId(`like-button-${post.id}`)).toBeTruthy();
      if (post.image) {
        expect(_reactNative.screen.getByTestId(`post-image-${post.id}`)).toBeTruthy();
      }
    });
  });
  it('increments like count when like button is pressed', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockPostsScreen, {}));
    var likeButton = _reactNative.screen.getByTestId('like-button-1');
    var initialLikeText = typeof likeButton.children[0] === 'object' && 'props' in likeButton.children[0] ? likeButton.children[0].props.children : likeButton.children[0];
    var initialLikeCount = parseInt(initialLikeText.toString().split(' ')[1]);
    _reactNative.fireEvent.press(likeButton);
    var updatedLikeText = typeof likeButton.children[0] === 'object' && 'props' in likeButton.children[0] ? likeButton.children[0].props.children : '';
    var updatedLikeCount = parseInt(updatedLikeText.toString().split(' ')[1]);
    expect(updatedLikeCount).toBe(initialLikeCount + 1);
  });
  it('adds a new comment when comment button is pressed', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockPostsScreen, {}));
    var commentButton = _reactNative.screen.getByTestId('send-comment-button-1');
    var initialComments = _reactNative.screen.getAllByTestId(/^comment-\d+-post-1$/);
    var initialCount = initialComments.length;
    _reactNative.fireEvent.press(commentButton);
    var updatedComments = _reactNative.screen.getAllByTestId(/^comment-\d+-post-1$/);
    expect(updatedComments.length).toBe(initialCount + 1);
    var newComment = updatedComments[updatedComments.length - 1];
    expect(newComment.props.children.props.children).toContain('ÏÉà ÎåìÍ∏ÄÏûÖÎãàÎã§.');
  });
  it('does not affect other posts when interacting with one post', function () {
    var _post2LikeText$toStri;
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockPostsScreen, {}));
    var likeButton = _reactNative.screen.getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    var post2LikeButton = _reactNative.screen.getByTestId('like-button-2');
    var post2LikeText = typeof post2LikeButton.children[0] === 'object' && 'props' in post2LikeButton.children[0] ? post2LikeButton.children[0].props.children : post2LikeButton.children[0];
    var post2LikeCount = Number(((_post2LikeText$toStri = post2LikeText.toString().match(/\d+/)) == null ? void 0 : _post2LikeText$toStri[0]) || 0);
    expect(post2LikeCount).toBe(7);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,