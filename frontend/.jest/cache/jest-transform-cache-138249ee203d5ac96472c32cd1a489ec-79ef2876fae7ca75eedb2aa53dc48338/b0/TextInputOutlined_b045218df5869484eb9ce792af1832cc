97e6592d4bd5f76d256ecba7d74d2b80
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["disabled", "editable", "label", "error", "selectionColor", "cursorColor", "underlineColor", "outlineColor", "activeOutlineColor", "outlineStyle", "textColor", "dense", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "forceFocus", "onBlur", "onChangeText", "onLayoutAnimatedText", "onLabelTextLayout", "onLeftAffixLayoutChange", "onRightAffixLayoutChange", "onInputLayout", "onLayout", "left", "right", "placeholderTextColor", "testID", "contentStyle", "scaledLabel"],
  _excluded2 = ["fontSize", "fontWeight", "lineHeight", "height", "backgroundColor", "textAlign"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Outline = require("./Addons/Outline");
var _enums = require("./Adornment/enums");
var _TextInputAdornment = _interopRequireWildcard(require("./Adornment/TextInputAdornment"));
var _constants = require("./constants");
var _helpers = require("./helpers");
var _InputLabel = _interopRequireDefault(require("./Label/InputLabel"));
var _LabelBackground = _interopRequireDefault(require("./Label/LabelBackground"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var TextInputOutlined = function TextInputOutlined(_ref) {
  var _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$editable = _ref.editable,
    editable = _ref$editable === void 0 ? true : _ref$editable,
    label = _ref.label,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    customSelectionColor = _ref.selectionColor,
    cursorColor = _ref.cursorColor,
    _underlineColor = _ref.underlineColor,
    customOutlineColor = _ref.outlineColor,
    activeOutlineColor = _ref.activeOutlineColor,
    outlineStyle = _ref.outlineStyle,
    textColor = _ref.textColor,
    dense = _ref.dense,
    style = _ref.style,
    theme = _ref.theme,
    _ref$render = _ref.render,
    render = _ref$render === void 0 ? function (props) {
      return React.createElement(_reactNative.TextInput, props);
    } : _ref$render,
    _ref$multiline = _ref.multiline,
    multiline = _ref$multiline === void 0 ? false : _ref$multiline,
    parentState = _ref.parentState,
    innerRef = _ref.innerRef,
    onFocus = _ref.onFocus,
    forceFocus = _ref.forceFocus,
    onBlur = _ref.onBlur,
    onChangeText = _ref.onChangeText,
    onLayoutAnimatedText = _ref.onLayoutAnimatedText,
    onLabelTextLayout = _ref.onLabelTextLayout,
    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,
    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,
    onInputLayout = _ref.onInputLayout,
    onLayout = _ref.onLayout,
    left = _ref.left,
    right = _ref.right,
    placeholderTextColor = _ref.placeholderTextColor,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'text-input-outlined' : _ref$testID,
    contentStyle = _ref.contentStyle,
    scaledLabel = _ref.scaledLabel,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
    left: left,
    right: right
  });
  var colors = theme.colors,
    isV3 = theme.isV3,
    roundness = theme.roundness;
  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;
  var hasActiveOutline = parentState.focused || error;
  var _ref4 = (0, _helpers.getConstants)(isV3),
    INPUT_PADDING_HORIZONTAL = _ref4.INPUT_PADDING_HORIZONTAL,
    MIN_HEIGHT = _ref4.MIN_HEIGHT,
    ADORNMENT_OFFSET = _ref4.ADORNMENT_OFFSET,
    MIN_WIDTH = _ref4.MIN_WIDTH;
  var _ref5 = _reactNative.StyleSheet.flatten(style) || {},
    fontSizeStyle = _ref5.fontSize,
    fontWeight = _ref5.fontWeight,
    lineHeightStyle = _ref5.lineHeight,
    height = _ref5.height,
    _ref5$backgroundColor = _ref5.backgroundColor,
    backgroundColor = _ref5$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref5$backgroundColor,
    textAlign = _ref5.textAlign,
    viewStyle = (0, _objectWithoutProperties2.default)(_ref5, _excluded2);
  var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
  var lineHeight = lineHeightStyle || (_reactNative.Platform.OS === 'web' ? fontSize * 1.2 : undefined);
  var _ref6 = (0, _helpers.getOutlinedInputColors)({
      activeOutlineColor: activeOutlineColor,
      customOutlineColor: customOutlineColor,
      customSelectionColor: customSelectionColor,
      textColor: textColor,
      disabled: disabled,
      error: error,
      theme: theme
    }),
    inputTextColor = _ref6.inputTextColor,
    activeColor = _ref6.activeColor,
    outlineColor = _ref6.outlineColor,
    placeholderColor = _ref6.placeholderColor,
    errorColor = _ref6.errorColor,
    selectionColor = _ref6.selectionColor;
  var densePaddingTop = label ? _constants.LABEL_PADDING_TOP_DENSE : 0;
  var paddingTop = label ? _constants.LABEL_PADDING_TOP : 0;
  var yOffset = label ? _constants.OUTLINE_MINIMIZED_LABEL_Y_OFFSET : 0;
  var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
  var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
  var labelWidth = parentState.labelLayout.width;
  var labelHeight = parentState.labelLayout.height;
  var labelHalfWidth = labelWidth / 2;
  var labelHalfHeight = labelHeight / 2;
  var baseLabelTranslateX = (_reactNative.I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);
  var labelTranslationXOffset = 0;
  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {
    var side = _ref2.side,
      type = _ref2.type;
    return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;
  });
  var isAdornmentRightIcon = adornmentConfig.some(function (_ref3) {
    var side = _ref3.side,
      type = _ref3.type;
    return side === _enums.AdornmentSide.Right && type === _enums.AdornmentType.Icon;
  });
  if (isAdornmentLeftIcon) {
    labelTranslationXOffset = (_reactNative.I18nManager.getConstants().isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));
  }
  var minInputHeight = (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - paddingTop;
  var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
  var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, paddingTop);
  if (height && typeof height !== 'number') {
    console.warn('Currently we support only numbers in height prop');
  }
  var paddingSettings = {
    height: height ? +height : null,
    labelHalfHeight: labelHalfHeight,
    offset: paddingTop,
    multiline: multiline ? multiline : null,
    dense: dense ? dense : null,
    topPosition: topPosition,
    fontSize: fontSize,
    lineHeight: lineHeight,
    label: label,
    scale: fontScale,
    isAndroid: _reactNative.Platform.OS === 'android',
    styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)
  };
  var pad = (0, _helpers.calculatePadding)(paddingSettings);
  var paddingOut = (0, _helpers.adjustPaddingOut)(Object.assign({}, paddingSettings, {
    pad: pad
  }));
  var baseLabelTranslateY = -labelHalfHeight - (topPosition + yOffset);
  var _React$useRef = React.useRef([new _reactNative.Animated.Value(0), new _reactNative.Animated.Value(1)]),
    placeholderOpacityAnims = _React$useRef.current;
  var placeholderOpacity = hasActiveOutline ? parentState.labeled : placeholderOpacityAnims[parentState.labelLayout.measured ? 1 : 0];
  var placeholderStyle = {
    position: 'absolute',
    left: 0,
    paddingHorizontal: INPUT_PADDING_HORIZONTAL
  };
  var placeholderTextColorBasedOnState = parentState.displayPlaceholder ? placeholderTextColor != null ? placeholderTextColor : placeholderColor : 'transparent';
  var labelBackgroundColor = backgroundColor === 'transparent' ? theme.colors.background : backgroundColor;
  var labelProps = {
    label: label,
    onLayoutAnimatedText: onLayoutAnimatedText,
    onLabelTextLayout: onLabelTextLayout,
    placeholderOpacity: placeholderOpacity,
    labelError: error,
    placeholderStyle: placeholderStyle,
    baseLabelTranslateY: baseLabelTranslateY,
    baseLabelTranslateX: baseLabelTranslateX,
    font: font,
    fontSize: fontSize,
    lineHeight: lineHeight,
    fontWeight: fontWeight,
    labelScale: labelScale,
    wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
    topPosition: topPosition,
    hasActiveOutline: hasActiveOutline,
    activeColor: activeColor,
    placeholderColor: placeholderColor,
    backgroundColor: labelBackgroundColor,
    errorColor: errorColor,
    labelTranslationXOffset: labelTranslationXOffset,
    roundness: roundness,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
    testID: testID,
    contentStyle: contentStyle,
    inputContainerLayout: {
      width: parentState.inputContainerLayout.width + (isAdornmentRightIcon || isAdornmentLeftIcon ? INPUT_PADDING_HORIZONTAL : 0)
    },
    opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1,
    isV3: isV3
  };
  var onLayoutChange = React.useCallback(function (e) {
    onInputLayout(e);
    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);
  }, [onLayout, onInputLayout]);
  var minHeight = height || (dense ? _constants.MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);
  var outlinedHeight = inputHeight + (dense ? densePaddingTop / 2 : paddingTop);
  var leftLayout = parentState.leftLayout,
    rightLayout = parentState.rightLayout;
  var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
    height: outlinedHeight,
    affixHeight: leftLayout.height || 0,
    labelYOffset: -yOffset
  });
  var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
    height: outlinedHeight,
    affixHeight: rightLayout.height || 0,
    labelYOffset: -yOffset
  });
  var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
    height: outlinedHeight,
    affixHeight: _constants.ADORNMENT_SIZE,
    labelYOffset: -yOffset
  });
  var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
  var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
  var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
    adornmentConfig: adornmentConfig,
    rightAffixWidth: rightAffixWidth,
    leftAffixWidth: leftAffixWidth,
    mode: 'outlined',
    isV3: isV3
  });
  var affixTopPosition = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _enums.AdornmentSide.Left, leftAffixTopPosition), _enums.AdornmentSide.Right, rightAffixTopPosition);
  var onAffixChange = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), _enums.AdornmentSide.Right, onRightAffixLayoutChange);
  var adornmentProps = {
    adornmentConfig: adornmentConfig,
    forceFocus: forceFocus,
    topPosition: (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _enums.AdornmentType.Icon, iconTopPosition), _enums.AdornmentType.Affix, affixTopPosition),
    onAffixChange: onAffixChange,
    isTextInputFocused: parentState.focused,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,
    disabled: disabled
  };
  if (adornmentConfig.length) {
    adornmentProps = Object.assign({}, adornmentProps, {
      left: left,
      right: right,
      textStyle: Object.assign({}, font, {
        fontSize: fontSize,
        lineHeight: lineHeight,
        fontWeight: fontWeight
      }),
      visible: parentState.labeled
    });
  }
  return React.createElement(_reactNative.View, {
    style: viewStyle
  }, React.createElement(_Outline.Outline, {
    isV3: isV3,
    style: outlineStyle,
    label: label,
    roundness: roundness,
    hasActiveOutline: hasActiveOutline,
    focused: parentState.focused,
    activeColor: activeColor,
    outlineColor: outlineColor,
    backgroundColor: backgroundColor
  }), React.createElement(_reactNative.View, {
    style: [styles.labelContainer, {
      paddingTop: paddingTop,
      minHeight: minHeight
    }]
  }, label ? React.createElement(_InputLabel.default, _extends({
    labeled: parentState.labeled,
    error: parentState.error,
    focused: parentState.focused,
    scaledLabel: scaledLabel,
    wiggle: Boolean(parentState.value && labelProps.labelError),
    labelLayoutMeasured: parentState.labelLayout.measured,
    labelLayoutWidth: parentState.labelLayout.width,
    labelLayoutHeight: parentState.labelLayout.height
  }, labelProps, {
    labelBackground: _LabelBackground.default,
    maxFontSizeMultiplier: rest.maxFontSizeMultiplier
  })) : null, render === null || render === void 0 ? void 0 : render(Object.assign({}, rest, {
    ref: innerRef,
    onLayout: onLayoutChange,
    onChangeText: onChangeText,
    placeholder: rest.placeholder,
    editable: !disabled && editable,
    selectionColor: selectionColor,
    cursorColor: typeof cursorColor === 'undefined' ? activeColor : cursorColor,
    placeholderTextColor: placeholderTextColorBasedOnState,
    onFocus: onFocus,
    onBlur: onBlur,
    underlineColorAndroid: 'transparent',
    multiline: multiline,
    style: [styles.input, !multiline || multiline && height ? {
      height: inputHeight
    } : {}, paddingOut, Object.assign({}, font, {
      fontSize: fontSize,
      lineHeight: lineHeight,
      fontWeight: fontWeight,
      color: inputTextColor,
      textAlignVertical: multiline ? 'top' : 'center',
      textAlign: textAlign ? textAlign : _reactNative.I18nManager.getConstants().isRTL ? 'right' : 'left',
      paddingHorizontal: INPUT_PADDING_HORIZONTAL,
      minWidth: Math.min(parentState.labelTextLayout.width + 2 * INPUT_PADDING_HORIZONTAL, MIN_WIDTH)
    }), _reactNative.Platform.OS === 'web' ? {
      outline: 'none'
    } : undefined, adornmentStyleAdjustmentForNativeInput, contentStyle],
    testID: testID
  }))), React.createElement(_TextInputAdornment.default, adornmentProps));
};
var _default = TextInputOutlined;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  labelContainer: {
    paddingBottom: 0,
    flexGrow: 1
  },
  input: {
    margin: 0,
    flexGrow: 1
  },
  inputOutlined: {
    paddingTop: 8,
    paddingBottom: 8
  },
  inputOutlinedDense: {
    paddingTop: 4,
    paddingBottom: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,