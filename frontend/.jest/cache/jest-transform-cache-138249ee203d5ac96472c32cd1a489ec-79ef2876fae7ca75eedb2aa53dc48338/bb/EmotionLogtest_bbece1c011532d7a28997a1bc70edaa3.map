{"version":3,"names":["_getJestObj","mock","recordEmotions","jest","fn","mockResolvedValue","success","getAllEmotions","data","emotion_id","name","icon","color","getDailyEmotionCheck","useEmotionMock","emotions","selectedEmotions","logEmotion","_ref","_asyncToGenerator2","default","emotionId","note","require","emotion_ids","_x","_x2","apply","arguments","selectEmotion","id","console","log","clearSelectedEmotions","useEmotion","_interopRequireDefault","_emotionService","_require4","describe","it","_require","emotionContext","expect","emotionService","toHaveBeenCalledWith","_require2","toEqual","_require3","Array","isArray","toBe"],"sources":["EmotionLog.test.tsx"],"sourcesContent":["// EmotionLog.test.tsx - 감정 로깅 기능 단위 테스트\r\nimport React from 'react';\r\nimport { act, renderHook } from '@testing-library/react-native';\r\nimport emotionService from '../../src/services/api/emotionService';\r\n\r\n// 타입 정의\r\ninterface Emotion {\r\n  emotion_id: number;\r\n  name: string;\r\n  icon: string;\r\n  color: string;\r\n}\r\n\r\ninterface EmotionContextType {\r\n  emotions: Emotion[];\r\n  selectedEmotions: number[];\r\n  logEmotion: (emotionId: number, note?: string) => Promise<boolean>;\r\n  selectEmotion: (id: number) => void;\r\n  clearSelectedEmotions: () => void;\r\n}\r\n\r\ninterface EmotionServiceMock {\r\n  recordEmotions: jest.Mock;\r\n  getAllEmotions: jest.Mock;\r\n  getDailyEmotionCheck: jest.Mock;\r\n}\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/emotionService', () => ({\r\n  recordEmotions: jest.fn().mockResolvedValue({ success: true }),\r\n  getAllEmotions: jest.fn().mockResolvedValue({\r\n    data: [\r\n      { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' }\r\n    ]\r\n  }),\r\n  getDailyEmotionCheck: jest.fn().mockResolvedValue({ data: [] })\r\n}));\r\n\r\n// EmotionContext 훅 모킹\r\njest.mock('../../src/contexts/EmotionContext', () => {\r\n  const useEmotionMock = (): EmotionContextType => {\r\n    const emotions: Emotion[] = [\r\n      { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' }\r\n    ];\r\n    const selectedEmotions: number[] = [];\r\n    \r\n    const logEmotion = async (emotionId: number, note?: string): Promise<boolean> => {\r\n      await require('../../src/services/api/emotionService').recordEmotions({\r\n        emotion_ids: [emotionId],\r\n        note\r\n      });\r\n      return true;\r\n    };\r\n    \r\n    const selectEmotion = (id: number): void => {\r\n      // 간단한 테스트를 위해 상태 변경 로직은 생략\r\n      console.log(`Emotion ${id} selected`);\r\n    };\r\n    \r\n    const clearSelectedEmotions = (): void => {\r\n      console.log('Cleared selected emotions');\r\n    };\r\n    \r\n    return {\r\n      emotions,\r\n      selectedEmotions,\r\n      logEmotion,\r\n      selectEmotion,\r\n      clearSelectedEmotions\r\n    };\r\n  };\r\n  \r\n  return {\r\n    useEmotion: useEmotionMock\r\n  };\r\n});\r\n\r\ndescribe('Emotion Logging Functionality', () => {\r\n  it('calls recordEmotions API when logEmotion is called', async () => {\r\n    // 모킹된 EmotionContext의 useEmotion 가져오기\r\n    const { useEmotion } = require('../../src/contexts/EmotionContext');\r\n    const emotionContext: EmotionContextType = useEmotion();\r\n    \r\n    // logEmotion 함수 호출\r\n    await emotionContext.logEmotion(1, '행복한 하루였어요');\r\n    \r\n    // API 호출 확인\r\n    expect(emotionService.recordEmotions).toHaveBeenCalledWith({\r\n      emotion_ids: [1],\r\n      note: '행복한 하루였어요'\r\n    });\r\n  });\r\n  \r\n  it('provides emotions data', () => {\r\n    // 모킹된 EmotionContext의 useEmotion 가져오기\r\n    const { useEmotion } = require('../../src/contexts/EmotionContext');\r\n    const emotionContext: EmotionContextType = useEmotion();\r\n    \r\n    // emotions 데이터 확인\r\n    expect(emotionContext.emotions).toEqual([\r\n      { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' }\r\n    ]);\r\n  });\r\n  \r\n  it('has selectedEmotions array', () => {\r\n    // 모킹된 EmotionContext의 useEmotion 가져오기\r\n    const { useEmotion } = require('../../src/contexts/EmotionContext');\r\n    const emotionContext: EmotionContextType = useEmotion();\r\n    \r\n    // selectedEmotions가 배열인지 확인\r\n    expect(Array.isArray(emotionContext.selectedEmotions)).toBe(true);\r\n    expect(emotionContext.selectedEmotions).toEqual([]);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}