d0d013ec5abbfdea2613fe30b54ad06b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var _require2 = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require2.dispatchCommand;
var nativeComponentName = 'AndroidSwitch';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'AndroidSwitch',
  bubblingEventTypes: {
    topChange: {
      phasedRegistrationNames: {
        captured: 'onChangeCapture',
        bubbled: 'onChange'
      }
    }
  },
  validAttributes: Object.assign({
    disabled: true,
    enabled: true,
    thumbColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForFalse: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForTrue: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    value: true,
    on: true,
    thumbTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    }
  }, ConditionallyIgnoredEventHandlers({
    onChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  setNativeValue: function setNativeValue(ref, value) {
    dispatchCommand(ref, "setNativeValue", [value]);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsIl9yZXF1aXJlIiwiQ29uZGl0aW9uYWxseUlnbm9yZWRFdmVudEhhbmRsZXJzIiwiX3JlcXVpcmUyIiwiZGlzcGF0Y2hDb21tYW5kIiwibmF0aXZlQ29tcG9uZW50TmFtZSIsIl9fSU5URVJOQUxfVklFV19DT05GSUciLCJleHBvcnRzIiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwidG9wQ2hhbmdlIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJjYXB0dXJlZCIsImJ1YmJsZWQiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJhc3NpZ24iLCJkaXNhYmxlZCIsImVuYWJsZWQiLCJ0aHVtYkNvbG9yIiwicHJvY2VzcyIsInRyYWNrQ29sb3JGb3JGYWxzZSIsInRyYWNrQ29sb3JGb3JUcnVlIiwidmFsdWUiLCJvbiIsInRodW1iVGludENvbG9yIiwidHJhY2tUaW50Q29sb3IiLCJvbkNoYW5nZSIsIl9kZWZhdWx0IiwiQ29tbWFuZHMiLCJzZXROYXRpdmVWYWx1ZSIsInJlZiJdLCJzb3VyY2VzIjpbIkFuZHJvaWRTd2l0Y2hOYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge0NvbG9yVmFsdWV9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1xuICBCdWJibGluZ0V2ZW50SGFuZGxlcixcbiAgSW50MzIsXG4gIFdpdGhEZWZhdWx0LFxufSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVHlwZXMvQ29kZWdlblR5cGVzJztcblxuaW1wb3J0IGNvZGVnZW5OYXRpdmVDb21tYW5kcyBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVXRpbGl0aWVzL2NvZGVnZW5OYXRpdmVDb21tYW5kcyc7XG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVXRpbGl0aWVzL2NvZGVnZW5OYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG50eXBlIFN3aXRjaENoYW5nZUV2ZW50ID0gJFJlYWRPbmx5PHt8XG4gIHZhbHVlOiBib29sZWFuLFxuICB0YXJnZXQ6IEludDMyLFxufH0+O1xuXG50eXBlIE5hdGl2ZVByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLlZpZXdQcm9wcyxcblxuICAvLyBQcm9wc1xuICBkaXNhYmxlZD86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcbiAgZW5hYmxlZD86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIHRydWU+LFxuICB0aHVtYkNvbG9yPzogP0NvbG9yVmFsdWUsXG4gIHRyYWNrQ29sb3JGb3JGYWxzZT86ID9Db2xvclZhbHVlLFxuICB0cmFja0NvbG9yRm9yVHJ1ZT86ID9Db2xvclZhbHVlLFxuICB2YWx1ZT86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcbiAgb24/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG4gIHRodW1iVGludENvbG9yPzogP0NvbG9yVmFsdWUsXG4gIHRyYWNrVGludENvbG9yPzogP0NvbG9yVmFsdWUsXG5cbiAgLy8gRXZlbnRzXG4gIG9uQ2hhbmdlPzogQnViYmxpbmdFdmVudEhhbmRsZXI8U3dpdGNoQ2hhbmdlRXZlbnQ+LFxufH0+O1xuXG50eXBlIE5hdGl2ZVR5cGUgPSBIb3N0Q29tcG9uZW50PE5hdGl2ZVByb3BzPjtcblxuaW50ZXJmYWNlIE5hdGl2ZUNvbW1hbmRzIHtcbiAgK3NldE5hdGl2ZVZhbHVlOiAoXG4gICAgdmlld1JlZjogUmVhY3QuRWxlbWVudFJlZjxOYXRpdmVUeXBlPixcbiAgICB2YWx1ZTogYm9vbGVhbixcbiAgKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgQ29tbWFuZHM6IE5hdGl2ZUNvbW1hbmRzID0gY29kZWdlbk5hdGl2ZUNvbW1hbmRzPE5hdGl2ZUNvbW1hbmRzPih7XG4gIHN1cHBvcnRlZENvbW1hbmRzOiBbJ3NldE5hdGl2ZVZhbHVlJ10sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKGNvZGVnZW5OYXRpdmVDb21wb25lbnQ8TmF0aXZlUHJvcHM+KCdBbmRyb2lkU3dpdGNoJywge1xuICBpbnRlcmZhY2VPbmx5OiB0cnVlLFxufSk6IE5hdGl2ZVR5cGUpO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQW1CQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsdUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUErQixTQUFBSSx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUYsd0JBQUFFLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBc0MvQixJQUFBVyx1QkFFZ0IsR0FGaEJ4QixPQUVnQixDQUZoQixnRUFFZSxDQUFDO0FBRmhCLElBQUF5QixRQUFBLEdBQUF6QixPQUVnQixDQUZoQix5REFFZSxDQUFDO0VBRmhCMEIsaUNBRWdCLEdBQUFELFFBQUEsQ0FGaEJDLGlDQUVnQjtBQUZoQixJQUFBQyxTQUFBLEdBQUEzQixPQUVnQixDQUZoQixrREFFZSxDQUFDO0VBRmhCNEIsZUFFZ0IsR0FBQUQsU0FBQSxDQUZoQkMsZUFFZ0I7QUFGaEIsSUFBQUMsbUJBRWdCLEdBRmhCLGVBRWdCO0FBRmhCLElBQUFDLHNCQUVnQixHQUFBQyxPQUFBLENBQUFELHNCQUFBLEdBRmhCO0VBQUFFLGVBRWdCLEVBRmhCLGVBRWdCO0VBRmhCQyxrQkFFZ0IsRUFGaEI7SUFBQUMsU0FFZ0IsRUFGaEI7TUFBQUMsdUJBRWdCLEVBRmhCO1FBQUFDLFFBRWdCLEVBRmhCLGlCQUVnQjtRQUZoQkMsT0FFZ0IsRUFGaEI7TUFFZTtJQUFBO0VBQUEsQ0FBQztFQUZoQkMsZUFFZ0IsRUFBQXRCLE1BQUEsQ0FBQXVCLE1BQUE7SUFGaEJDLFFBRWdCLEVBRmhCLElBRWdCO0lBRmhCQyxPQUVnQixFQUZoQixJQUVnQjtJQUZoQkMsVUFFZ0IsRUFGaEI7TUFBQUMsT0FFZ0IsRUFGaEIzQyxPQUVnQixDQUZoQixnREFFZSxDQUFDLENBRmhCVTtJQUVlLENBQUM7SUFGaEJrQyxrQkFFZ0IsRUFGaEI7TUFBQUQsT0FFZ0IsRUFGaEIzQyxPQUVnQixDQUZoQixnREFFZSxDQUFDLENBRmhCVTtJQUVlLENBQUM7SUFGaEJtQyxpQkFFZ0IsRUFGaEI7TUFBQUYsT0FFZ0IsRUFGaEIzQyxPQUVnQixDQUZoQixnREFFZSxDQUFDLENBRmhCVTtJQUVlLENBQUM7SUFGaEJvQyxLQUVnQixFQUZoQixJQUVnQjtJQUZoQkMsRUFFZ0IsRUFGaEIsSUFFZ0I7SUFGaEJDLGNBRWdCLEVBRmhCO01BQUFMLE9BRWdCLEVBRmhCM0MsT0FFZ0IsQ0FGaEIsZ0RBRWUsQ0FBQyxDQUZoQlU7SUFFZSxDQUFDO0lBRmhCdUMsY0FFZ0IsRUFGaEI7TUFBQU4sT0FFZ0IsRUFGaEIzQyxPQUVnQixDQUZoQixnREFFZSxDQUFDLENBRmhCVTtJQUVlO0VBQUMsR0FGaEJnQixpQ0FFZ0IsQ0FGaEI7SUFBQXdCLFFBRWdCLEVBRmhCO0VBRWUsRUFBQztBQUFELENBQUM7QUFBQSxJQUFBQyxRQUFBLEdBQUFwQixPQUFBLENBQUFyQixPQUFBLEdBRmhCYyx1QkFFZ0IsQ0FGaEJaLEdBRWdCLENBRmhCaUIsbUJBRWdCLEVBRmhCO0VBQUEsT0FBQUMsc0JBRWdCO0FBQUEsQ0FBRCxDQUFDO0FBRmhCLElBQUFzQixRQUVnQixHQUFBckIsT0FBQSxDQUFBcUIsUUFBQSxHQUZoQjtFQUFBQyxjQUVnQixXQUZoQkEsY0FFZ0JBLENBRmhCQyxHQUVnQixFQUZoQlIsS0FFZ0IsRUFGaEI7SUFBQWxCLGVBRWdCLENBRmhCMEIsR0FFZ0IsRUFGaEIsZ0JBRWdCLEVBRmhCLENBQUFSLEtBRWdCLENBQUQsQ0FBQztFQUFEO0FBQUEsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==