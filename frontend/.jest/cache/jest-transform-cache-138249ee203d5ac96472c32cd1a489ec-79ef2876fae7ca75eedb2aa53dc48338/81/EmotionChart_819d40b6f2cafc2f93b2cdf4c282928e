27c431f3f7d643379776af0f4105489d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeChartKit = require("react-native-chart-kit");
var _jsxRuntime = require("react/jsx-runtime");
var EmotionChart = function EmotionChart(_ref) {
  var data = _ref.data,
    timeRange = _ref.timeRange,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'line' : _ref$type,
    _ref$height = _ref.height,
    height = _ref$height === void 0 ? 220 : _ref$height;
  if (!data || data.length === 0) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.emptyContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyText,
        children: "\uAC10\uC815 \uAE30\uB85D\uC774 \uC5C6\uC2B5\uB2C8\uB2E4."
      })
    });
  }
  var screenWidth = _reactNative.Dimensions.get('window').width - 32;
  if (type === 'pie') {
    var emotionCounts = {};
    var emotionColors = {};
    data.forEach(function (item) {
      if (emotionCounts[item.emotionName]) {
        emotionCounts[item.emotionName] += 1;
      } else {
        emotionCounts[item.emotionName] = 1;
        emotionColors[item.emotionName] = item.color;
      }
    });
    var pieData = Object.keys(emotionCounts).map(function (name) {
      return {
        name: name,
        count: emotionCounts[name],
        color: emotionColors[name] || '#ccc',
        legendFontColor: '#7F7F7F',
        legendFontSize: 12
      };
    });
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.title,
        children: [getChartTitle(timeRange), " \uAC10\uC815 \uBD84\uD3EC"]
      }), (0, _jsxRuntime.jsx)(_reactNativeChartKit.PieChart, {
        data: pieData,
        width: screenWidth,
        height: height,
        chartConfig: chartConfig,
        accessor: "count",
        backgroundColor: "transparent",
        paddingLeft: "15",
        absolute: true
      })]
    });
  }
  var dates = (0, _toConsumableArray2.default)(new Set(data.map(function (item) {
    return item.date;
  }))).sort();
  var emotions = (0, _toConsumableArray2.default)(new Set(data.map(function (item) {
    return item.emotionName;
  })));
  var datasets = emotions.map(function (emotion) {
    var _emotionData$;
    var emotionData = data.filter(function (item) {
      return item.emotionName === emotion;
    });
    var _color = ((_emotionData$ = emotionData[0]) == null ? void 0 : _emotionData$.color) || '#ccc';
    return {
      data: dates.map(function (date) {
        var matchingItem = emotionData.find(function (item) {
          return item.date === date;
        });
        return matchingItem ? matchingItem.count : 0;
      }),
      color: function color() {
        return _color;
      },
      strokeWidth: 2
    };
  });
  var lineData = {
    labels: dates,
    datasets: datasets,
    legend: emotions
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.title,
      children: [getChartTitle(timeRange), " \uAC10\uC815 \uBCC0\uD654"]
    }), (0, _jsxRuntime.jsx)(_reactNativeChartKit.LineChart, {
      data: lineData,
      width: screenWidth,
      height: height,
      chartConfig: chartConfig,
      bezier: true,
      style: styles.chart
    })]
  });
};
var getChartTitle = function getChartTitle(timeRange) {
  switch (timeRange) {
    case 'daily':
      return '일간';
    case 'weekly':
      return '주간';
    case 'monthly':
      return '월간';
    case 'yearly':
      return '연간';
    default:
      return '';
  }
};
var chartConfig = {
  backgroundGradientFrom: '#ffffff',
  backgroundGradientTo: '#ffffff',
  color: function color() {
    var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return `rgba(74, 144, 226, ${opacity})`;
  },
  strokeWidth: 2,
  decimalPlaces: 0,
  labelColor: function labelColor() {
    var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return `rgba(102, 102, 102, ${opacity})`;
  },
  style: {
    borderRadius: 16
  },
  propsForDots: {
    r: '5',
    strokeWidth: '1',
    stroke: '#ffffff'
  }
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginVertical: 8,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2
  },
  title: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 16,
    color: '#333333',
    textAlign: 'center'
  },
  chart: {
    marginVertical: 8,
    borderRadius: 8
  },
  emptyContainer: {
    height: 200,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#ffffff',
    borderRadius: 12,
    marginVertical: 8
  },
  emptyText: {
    color: '#999999',
    fontSize: 14
  }
});
var _default = exports.default = EmotionChart;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,