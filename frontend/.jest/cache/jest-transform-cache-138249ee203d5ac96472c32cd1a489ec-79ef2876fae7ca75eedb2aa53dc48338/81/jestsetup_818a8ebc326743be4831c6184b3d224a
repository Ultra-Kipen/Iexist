98c775fc6123f8679aa5270259357ce9
_getJestObj().mock('@testing-library/react-native', function () {
  var actual = jest.requireActual('@testing-library/react-native');
  var fireEvent = Object.assign({}, actual.fireEvent, {
    press: function press(element) {
      if (element && element.props && element.props.onPress) {
        element.props.onPress();
        return true;
      }
      console.warn('Failed to press element - no onPress handler found');
      return false;
    },
    changeText: function changeText(element, text) {
      if (element && element.props && element.props.onChangeText) {
        element.props.onChangeText(text);
        return true;
      }
      console.warn('Failed to change text - no onChangeText handler found');
      return false;
    }
  });
  return Object.assign({}, actual, {
    fireEvent: fireEvent
  });
});
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var reactNative = jest.requireActual('react-native');
  reactNative.NativeModules.NativeAnimatedHelper = {
    startAnimatingNode: jest.fn(),
    stopAnimation: jest.fn()
  };
  return reactNative;
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  });
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return {
    __esModule: true,
    default: 'MockedMaterialCommunityIcons'
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var RN = require('react-native');
  return {
    TextInput: function MockTextInput(props) {
      var label = props.label,
        testID = props.testID,
        onChangeText = props.onChangeText,
        value = props.value,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
      return React.createElement(RN.TextInput, Object.assign({
        testID: testID || 'text-input',
        onChangeText: onChangeText,
        value: value,
        placeholder: label || props.placeholder,
        accessibilityLabel: label,
        editable: props.editable !== false,
        accessible: true
      }, restProps));
    },
    Button: function MockButton(props) {
      return React.createElement(RN.TouchableOpacity, Object.assign({
        testID: props.testID,
        onPress: props.onPress,
        accessible: true,
        accessibilityRole: 'button'
      }, props), React.createElement(RN.Text, null, props.children));
    },
    Chip: function MockChip(props) {
      return React.createElement(RN.TouchableOpacity, Object.assign({
        testID: props.testID,
        onPress: props.onPress,
        style: [{
          borderRadius: 20,
          padding: 8,
          margin: 4
        }, props.style]
      }, props), React.createElement(RN.Text, null, props.children));
    },
    Text: function MockText(props) {
      return React.createElement(RN.Text, props);
    },
    ActivityIndicator: function MockActivityIndicator(props) {
      return React.createElement(RN.ActivityIndicator, props);
    },
    Provider: function MockProvider(_ref3) {
      var children = _ref3.children;
      return children;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["label", "testID", "onChangeText", "value"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var React = require('react');
var ReactNative = require('react-native');
var NativeModules = ReactNative.NativeModules,
  TextInput = ReactNative.TextInput,
  TouchableOpacity = ReactNative.TouchableOpacity,
  RNText = ReactNative.Text,
  View = ReactNative.View;
require('react-native-gesture-handler/jestSetup');
var configure;
try {
  var rtl = require('@testing-library/react-native');
  configure = rtl.configure;
  require('@testing-library/jest-native/extend-expect');
  if (configure) {
    configure({
      asyncUtilTimeout: 10000
    });
  }
} catch (error) {
  console.warn('Testing library not loaded:', error);
}
NativeModules.RNCNetInfo = {
  getCurrentState: jest.fn(function () {
    return Promise.resolve();
  }),
  addListener: jest.fn(),
  removeListeners: jest.fn()
};
var originalConsoleError = console.error;
console.error = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[0] === 'string' && (args[0].includes('act(') || args[0].includes('inside a test was not wrapped in act') || args[0].includes('unmounted component') || args[0].includes('감정 로드 오류') || args[0].includes('챌린지 데이터 로딩 오류') || args[0].includes('Error: API 오류'))) {
    return;
  }
  originalConsoleError.apply(void 0, args);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhY3R1YWwiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImZpcmVFdmVudCIsIk9iamVjdCIsImFzc2lnbiIsInByZXNzIiwiZWxlbWVudCIsInByb3BzIiwib25QcmVzcyIsImNvbnNvbGUiLCJ3YXJuIiwiY2hhbmdlVGV4dCIsInRleHQiLCJvbkNoYW5nZVRleHQiLCJSZWFuaW1hdGVkIiwicmVxdWlyZSIsImRlZmF1bHQiLCJjYWxsIiwiYWxlcnQiLCJmbiIsInJlYWN0TmF0aXZlIiwiTmF0aXZlTW9kdWxlcyIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwic3RhcnRBbmltYXRpbmdOb2RlIiwic3RvcEFuaW1hdGlvbiIsInNldEl0ZW0iLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiU2FmZUFyZWFQcm92aWRlciIsIl9yZWYiLCJjaGlsZHJlbiIsIlNhZmVBcmVhVmlldyIsIl9yZWYyIiwidXNlU2FmZUFyZWFJbnNldHMiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJnb0JhY2siLCJfX2VzTW9kdWxlIiwiUmVhY3QiLCJSTiIsIlRleHRJbnB1dCIsIk1vY2tUZXh0SW5wdXQiLCJsYWJlbCIsInRlc3RJRCIsInZhbHVlIiwicmVzdFByb3BzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9leGNsdWRlZCIsImNyZWF0ZUVsZW1lbnQiLCJwbGFjZWhvbGRlciIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImVkaXRhYmxlIiwiYWNjZXNzaWJsZSIsIkJ1dHRvbiIsIk1vY2tCdXR0b24iLCJUb3VjaGFibGVPcGFjaXR5IiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJUZXh0IiwiQ2hpcCIsIk1vY2tDaGlwIiwic3R5bGUiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIiwibWFyZ2luIiwiTW9ja1RleHQiLCJBY3Rpdml0eUluZGljYXRvciIsIk1vY2tBY3Rpdml0eUluZGljYXRvciIsIlByb3ZpZGVyIiwiTW9ja1Byb3ZpZGVyIiwiX3JlZjMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlcXVpcmUiLCJSZWFjdE5hdGl2ZSIsIlJOVGV4dCIsIlZpZXciLCJjb25maWd1cmUiLCJydGwiLCJhc3luY1V0aWxUaW1lb3V0IiwiZXJyb3IiLCJSTkNOZXRJbmZvIiwiZ2V0Q3VycmVudFN0YXRlIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lcnMiLCJvcmlnaW5hbENvbnNvbGVFcnJvciIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiaW5jbHVkZXMiLCJhcHBseSJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uZmlndXJlIOuzgOyImOulvCDsoITsl63snLzroZwg7ISg7Ja4XHJcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKSBhcyB0eXBlb2YgaW1wb3J0KCdyZWFjdCcpO1xyXG5jb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpIGFzIHR5cGVvZiBpbXBvcnQoJ3JlYWN0LW5hdGl2ZScpO1xyXG5jb25zdCB7IE5hdGl2ZU1vZHVsZXMsIFRleHRJbnB1dCwgVG91Y2hhYmxlT3BhY2l0eSwgVGV4dDogUk5UZXh0LCBWaWV3IH0gPSBSZWFjdE5hdGl2ZTtcclxucmVxdWlyZSgncmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9qZXN0U2V0dXAnKTtcclxuXHJcbi8vIHRlc3RpbmctbGlicmFyeSDqtIDroKgg7ISk7KCVXHJcbmxldCBjb25maWd1cmU6IGFueTtcclxudHJ5IHtcclxuICBjb25zdCBydGwgPSByZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZScpO1xyXG4gIGNvbmZpZ3VyZSA9IHJ0bC5jb25maWd1cmU7XHJcbiAgcmVxdWlyZSgnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0Jyk7XHJcbiAgXHJcbiAgaWYgKGNvbmZpZ3VyZSkge1xyXG4gICAgY29uZmlndXJlKHtcclxuICAgICAgYXN5bmNVdGlsVGltZW91dDogMTAwMDAsXHJcbiAgICB9KTtcclxuICB9XHJcbn0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgY29uc29sZS53YXJuKCdUZXN0aW5nIGxpYnJhcnkgbm90IGxvYWRlZDonLCBlcnJvcik7XHJcbn1cclxuXHJcbi8vIEZpcmVFdmVudCDqtIDroKgg7Jik66WYKENhbm5vdCByZWFkIHByb3BlcnRpZXMgb2YgdW5kZWZpbmVkIChyZWFkaW5nICdTJykpIO2VtOqysOydhCDsnITtlZwg7ISk7KCVXHJcbmplc3QubW9jaygnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgYWN0dWFsID0gamVzdC5yZXF1aXJlQWN0dWFsKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZScpO1xyXG4gIFxyXG4gIC8vIGZpcmVFdmVudCDrqZTshJzrk5wg7Jik67KE65287J2065OcXHJcbiAgY29uc3QgZmlyZUV2ZW50ID0ge1xyXG4gICAgLi4uYWN0dWFsLmZpcmVFdmVudCxcclxuICAgIHByZXNzOiAoZWxlbWVudCkgPT4ge1xyXG4gICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnByb3BzICYmIGVsZW1lbnQucHJvcHMub25QcmVzcykge1xyXG4gICAgICAgIGVsZW1lbnQucHJvcHMub25QcmVzcygpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIHByZXNzIGVsZW1lbnQgLSBubyBvblByZXNzIGhhbmRsZXIgZm91bmQnKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGNoYW5nZVRleHQ6IChlbGVtZW50LCB0ZXh0KSA9PiB7XHJcbiAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQucHJvcHMgJiYgZWxlbWVudC5wcm9wcy5vbkNoYW5nZVRleHQpIHtcclxuICAgICAgICBlbGVtZW50LnByb3BzLm9uQ2hhbmdlVGV4dCh0ZXh0KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBjaGFuZ2UgdGV4dCAtIG5vIG9uQ2hhbmdlVGV4dCBoYW5kbGVyIGZvdW5kJyk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5hY3R1YWwsXHJcbiAgICBmaXJlRXZlbnQsXHJcbiAgfTtcclxufSk7XHJcbi8vIFJlYW5pbWF0ZWQg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhbmltYXRlZCA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkL21vY2snKTtcclxuICBSZWFuaW1hdGVkLmRlZmF1bHQuY2FsbCA9ICgpID0+IHt9O1xyXG4gIHJldHVybiBSZWFuaW1hdGVkO1xyXG59KTtcclxuXHJcbi8vIEFsZXJ0IOuqqO2CueydhCDrs4Trj4TroZwg67aE66asXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbGVydC9BbGVydCcsICgpID0+ICh7XHJcbiAgYWxlcnQ6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgcmVhY3ROYXRpdmUgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIHJlYWN0TmF0aXZlLk5hdGl2ZU1vZHVsZXMuTmF0aXZlQW5pbWF0ZWRIZWxwZXIgPSB7XHJcbiAgICBzdGFydEFuaW1hdGluZ05vZGU6IGplc3QuZm4oKSxcclxuICAgIHN0b3BBbmltYXRpb246IGplc3QuZm4oKSxcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiByZWFjdE5hdGl2ZTtcclxufSk7XHJcbi8vIEFzeW5jU3RvcmFnZSDrqqjtgrlcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScsICgpID0+ICh7XHJcbiAgc2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgZ2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpLFxyXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG59KSk7XHJcblxyXG4vLyBTYWZlQXJlYUNvbnRleHQg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JywgKCkgPT4gKHtcclxuICBTYWZlQXJlYVByb3ZpZGVyOiBmdW5jdGlvbiBTYWZlQXJlYVByb3ZpZGVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHsgXHJcbiAgICByZXR1cm4gY2hpbGRyZW47IFxyXG4gIH0sXHJcbiAgU2FmZUFyZWFWaWV3OiBmdW5jdGlvbiBTYWZlQXJlYVZpZXcoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgeyBcclxuICAgIHJldHVybiBjaGlsZHJlbjsgXHJcbiAgfSxcclxuICB1c2VTYWZlQXJlYUluc2V0czogKCkgPT4gKHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwIH0pLFxyXG59KSk7XHJcblxyXG4vLyBOYXZpZ2F0aW9uIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XHJcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnKSxcclxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xyXG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gIH0pLFxyXG59KSk7XHJcblxyXG4vLyBSZWFjdCBOYXRpdmUgVmVjdG9yIEljb25zIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucycsICgpID0+ICh7XHJcbiAgX19lc01vZHVsZTogdHJ1ZSxcclxuICBkZWZhdWx0OiAnTW9ja2VkTWF0ZXJpYWxDb21tdW5pdHlJY29ucycsXHJcbn0pKTtcclxuXHJcbi8vIFJlYWN0IE5hdGl2ZSBQYXBlciDrqqjtgrkg6rCc7ISgXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXBhcGVyJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuICBjb25zdCBSTiA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBUZXh0SW5wdXQ6IGZ1bmN0aW9uIE1vY2tUZXh0SW5wdXQocHJvcHM6IGFueSkge1xyXG4gICAgICBjb25zdCB7IGxhYmVsLCB0ZXN0SUQsIG9uQ2hhbmdlVGV4dCwgdmFsdWUsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHM7XHJcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJOLlRleHRJbnB1dCwge1xyXG4gICAgICAgIHRlc3RJRDogdGVzdElEIHx8ICd0ZXh0LWlucHV0JyxcclxuICAgICAgICBvbkNoYW5nZVRleHQ6IG9uQ2hhbmdlVGV4dCxcclxuICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgcGxhY2Vob2xkZXI6IGxhYmVsIHx8IHByb3BzLnBsYWNlaG9sZGVyLFxyXG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogbGFiZWwsXHJcbiAgICAgICAgZWRpdGFibGU6IHByb3BzLmVkaXRhYmxlICE9PSBmYWxzZSxcclxuICAgICAgICBhY2Nlc3NpYmxlOiB0cnVlLFxyXG4gICAgICAgIC4uLnJlc3RQcm9wc1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBCdXR0b246IGZ1bmN0aW9uIE1vY2tCdXR0b24ocHJvcHM6IGFueSkge1xyXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSTi5Ub3VjaGFibGVPcGFjaXR5LCBcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgdGVzdElEOiBwcm9wcy50ZXN0SUQsXHJcbiAgICAgICAgICBvblByZXNzOiBwcm9wcy5vblByZXNzLFxyXG4gICAgICAgICAgYWNjZXNzaWJsZTogdHJ1ZSxcclxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlOiAnYnV0dG9uJyxcclxuICAgICAgICAgIC4uLnByb3BzIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSTi5UZXh0LCBudWxsLCBwcm9wcy5jaGlsZHJlbilcclxuICAgICAgKTtcclxuICAgIH0sXHJcbiAgICBDaGlwOiBmdW5jdGlvbiBNb2NrQ2hpcChwcm9wczogYW55KSB7XHJcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJOLlRvdWNoYWJsZU9wYWNpdHksIFxyXG4gICAgICAgIHsgXHJcbiAgICAgICAgICB0ZXN0SUQ6IHByb3BzLnRlc3RJRCxcclxuICAgICAgICAgIG9uUHJlc3M6IHByb3BzLm9uUHJlc3MsXHJcbiAgICAgICAgICBzdHlsZTogW3sgYm9yZGVyUmFkaXVzOiAyMCwgcGFkZGluZzogOCwgbWFyZ2luOiA0IH0sIHByb3BzLnN0eWxlXSxcclxuICAgICAgICAgIC4uLnByb3BzIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChSTi5UZXh0LCBudWxsLCBwcm9wcy5jaGlsZHJlbilcclxuICAgICAgKTtcclxuICAgIH0sXHJcbiAgICBUZXh0OiBmdW5jdGlvbiBNb2NrVGV4dChwcm9wczogYW55KSB7XHJcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJOLlRleHQsIHByb3BzKTtcclxuICAgIH0sXHJcbiAgICBBY3Rpdml0eUluZGljYXRvcjogZnVuY3Rpb24gTW9ja0FjdGl2aXR5SW5kaWNhdG9yKHByb3BzOiBhbnkpIHtcclxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUk4uQWN0aXZpdHlJbmRpY2F0b3IsIHByb3BzKTtcclxuICAgIH0sXHJcbiAgICBQcm92aWRlcjogZnVuY3Rpb24gTW9ja1Byb3ZpZGVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogYW55IH0pIHtcclxuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgfSxcclxuICB9O1xyXG59KTtcclxuLy8g7ZSM656r7Y+8IOq0gOugqCDrqqjtgrlcclxuTmF0aXZlTW9kdWxlcy5STkNOZXRJbmZvID0ge1xyXG4gIGdldEN1cnJlbnRTdGF0ZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxufTtcclxuXHJcblxyXG5cclxuLy8g7L2Y7IaUIOyYpOulmCDrqZTsi5zsp4Ag7ZWE7YSw66eBIC0gYWN0IOqyveqzoOyZgCDtirnsoJUg7Jik66WYIOyWteygnFxyXG4vLyBqZXN0LnNldHVwLnRz7J2YIGNvbnNvbGUuZXJyb3Ig67aA67aEIOyImOyglVxyXG5jb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XHJcbmNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xyXG4gIGlmIChcclxuICAgIHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyAmJlxyXG4gICAgKGFyZ3NbMF0uaW5jbHVkZXMoJ2FjdCgnKSB8fCBcclxuICAgICBhcmdzWzBdLmluY2x1ZGVzKCdpbnNpZGUgYSB0ZXN0IHdhcyBub3Qgd3JhcHBlZCBpbiBhY3QnKSB8fFxyXG4gICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ3VubW91bnRlZCBjb21wb25lbnQnKSB8fFxyXG4gICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ+qwkOyglSDroZzrk5wg7Jik66WYJykgfHxcclxuICAgICBhcmdzWzBdLmluY2x1ZGVzKCfssYzrprDsp4Ag642w7J207YSwIOuhnOuUqSDsmKTrpZgnKSB8fFxyXG4gICAgIGFyZ3NbMF0uaW5jbHVkZXMoJ0Vycm9yOiBBUEkg7Jik66WYJykpXHJcbiAgKSB7XHJcbiAgICByZXR1cm47IC8vIO2KueyglSDsmKTrpZgg66mU7Iuc7KeAIOustOyLnFxyXG4gIH1cclxuICBvcmlnaW5hbENvbnNvbGVFcnJvciguLi5hcmdzKTtcclxufTsiXSwibWFwcGluZ3MiOiJBQXVCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsK0JBQStCLEVBQUUsWUFBTTtFQUMvQyxJQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLCtCQUErQixDQUFDO0VBR2xFLElBQU1DLFNBQVMsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ1ZMLE1BQU0sQ0FBQ0csU0FBUztJQUNuQkcsS0FBSyxFQUFFLFNBQVBBLEtBQUtBLENBQUdDLE9BQU8sRUFBSztNQUNsQixJQUFJQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0MsS0FBSyxJQUFJRCxPQUFPLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxFQUFFO1FBQ3JERixPQUFPLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7UUFDdkIsT0FBTyxJQUFJO01BQ2I7TUFDQUMsT0FBTyxDQUFDQyxJQUFJLENBQUMsb0RBQW9ELENBQUM7TUFDbEUsT0FBTyxLQUFLO0lBQ2QsQ0FBQztJQUNEQyxVQUFVLEVBQUUsU0FBWkEsVUFBVUEsQ0FBR0wsT0FBTyxFQUFFTSxJQUFJLEVBQUs7TUFDN0IsSUFBSU4sT0FBTyxJQUFJQSxPQUFPLENBQUNDLEtBQUssSUFBSUQsT0FBTyxDQUFDQyxLQUFLLENBQUNNLFlBQVksRUFBRTtRQUMxRFAsT0FBTyxDQUFDQyxLQUFLLENBQUNNLFlBQVksQ0FBQ0QsSUFBSSxDQUFDO1FBQ2hDLE9BQU8sSUFBSTtNQUNiO01BQ0FILE9BQU8sQ0FBQ0Ms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QSxTQUFTLENBQUM7TUFDUkUsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxDQUFDO0VBQ0o7QUFDRixDQUFDLENBQUMsT0FBT0MsS0FBSyxFQUFFO0VBQ2QzRSxPQUFPLENBQUNDLElBQUksQ0FBQyw2QkFBNkIsRUFBRTBFLEtBQUssQ0FBQztBQUNwRDtBQTRJQS9ELGFBQWEsQ0FBQ2dFLFVBQVUsR0FBRztFQUN6QkMsZUFBZSxFQUFFdEYsSUFBSSxDQUFDbUIsRUFBRSxDQUFDO0lBQUEsT0FBTU8sT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUFBLEVBQUM7RUFDakQ0RCxXQUFXLEVBQUV2RixJQUFJLENBQUNtQixFQUFFLENBQUMsQ0FBQztFQUN0QnFFLGVBQWUsRUFBRXhGLElBQUksQ0FBQ21CLEVBQUUsQ0FBQztBQUMzQixDQUFDO0FBTUQsSUFBTXNFLG9CQUFvQixHQUFHaEYsT0FBTyxDQUFDMkUsS0FBSztBQUMxQzNFLE9BQU8sQ0FBQzJFLEtBQUssR0FBRyxZQUFhO0VBQUEsU0FBQU0sSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBVEMsSUFBSSxPQUFBQyxLQUFBLENBQUFKLElBQUEsR0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtJQUFKRixJQUFJLENBQUFFLElBQUEsSUFBQUosU0FBQSxDQUFBSSxJQUFBO0VBQUE7RUFDdEIsSUFDRSxPQUFPRixJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxLQUMxQkEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQ3hCSCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQyxzQ0FBc0MsQ0FBQyxJQUN4REgsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDRyxRQUFRLENBQUMscUJBQXFCLENBQUMsSUFDdkNILElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQ0csUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUM1QkgsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDRyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQ2pDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUNHLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUNuQztJQUNBO0VBQ0Y7RUFDQVAsb0JBQW9CLENBQUFRLEtBQUEsU0FBSUosSUFBSSxDQUFDO0FBQy9CLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=