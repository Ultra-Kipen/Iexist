29cb159027859a8129d3ab666ab4fe3e
_getJestObj().mock('../../../src/services/api/client', function () {
  return {
    get: jest.fn(),
    post: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _client = _interopRequireDefault(require("../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Emotion Service Unit Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('getAllEmotions', function () {
    it('should fetch all emotions', (0, _asyncToGenerator2.default)(function* () {
      var mockEmotions = {
        status: 'success',
        data: [{
          emotion_id: 1,
          name: '행복',
          icon: 'emoticon-happy-outline',
          color: '#FFD700'
        }, {
          emotion_id: 2,
          name: '슬픔',
          icon: 'emoticon-sad-outline',
          color: '#4682B4'
        }]
      };
      _client.default.get.mockResolvedValue({
        data: mockEmotions
      });
      var result = yield _emotionService.default.getAllEmotions();
      expect(_client.default.get).toHaveBeenCalledWith('/emotions');
      expect(result.data).toEqual(mockEmotions);
    }));
    it('should handle error when fetching emotions', (0, _asyncToGenerator2.default)(function* () {
      var mockError = new Error('네트워크 오류');
      _client.default.get.mockRejectedValue(mockError);
      yield expect(_emotionService.default.getAllEmotions()).rejects.toThrow('네트워크 오류');
    }));
  });
  describe('recordEmotions', function () {
    it('should successfully record emotions', (0, _asyncToGenerator2.default)(function* () {
      var emotionData = {
        emotion_ids: [1, 3],
        note: '오늘은 기분이 좋았어요.'
      };
      var mockResponse = {
        status: 'success',
        data: {
          log_id: 123,
          emotion_ids: [1, 3],
          note: '오늘은 기분이 좋았어요.',
          created_at: '2025-04-09T10:00:00Z'
        }
      };
      _client.default.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _emotionService.default.recordEmotions(emotionData);
      expect(_client.default.post).toHaveBeenCalledWith('/emotions', emotionData);
      expect(result.data).toEqual(mockResponse);
    }));
    it('should handle error when recording emotions', (0, _asyncToGenerator2.default)(function* () {
      var emotionData = {
        emotion_ids: []
      };
      var mockError = {
        response: {
          data: {
            status: 'error',
            message: '감정을 하나 이상 선택해주세요.'
          }
        }
      };
      _client.default.post.mockRejectedValue(mockError);
      yield expect(_emotionService.default.recordEmotions(emotionData)).rejects.toEqual(mockError);
    }));
  });
  describe('getEmotionStats', function () {
    it('should fetch emotion stats with no parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockStats = {
        status: 'success',
        data: {
          total_logs: 30,
          emotions: [{
            emotion_id: 1,
            name: '행복',
            count: 15
          }, {
            emotion_id: 2,
            name: '슬픔',
            count: 5
          }]
        }
      };
      _client.default.get.mockResolvedValue({
        data: mockStats
      });
      var result = yield _emotionService.default.getEmotionStats();
      expect(_client.default.get).toHaveBeenCalledWith('/emotions/stats', {
        params: undefined
      });
      expect(result.data).toEqual(mockStats);
    }));
    it('should fetch emotion stats with date parameters', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        start_date: '2025-03-01',
        end_date: '2025-03-31'
      };
      var mockStats = {
        status: 'success',
        data: {
          total_logs: 10,
          emotions: [{
            emotion_id: 1,
            name: '행복',
            count: 7
          }, {
            emotion_id: 2,
            name: '슬픔',
            count: 3
          }]
        }
      };
      _client.default.get.mockResolvedValue({
        data: mockStats
      });
      var result = yield _emotionService.default.getEmotionStats(params);
      expect(_client.default.get).toHaveBeenCalledWith('/emotions/stats', {
        params: params
      });
      expect(result.data).toEqual(mockStats);
    }));
  });
  describe('getEmotionTrends', function () {
    it('should fetch emotion trends with default parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockTrends = {
        status: 'success',
        data: {
          trends: [{
            date: '2025-04-01',
            emotions: [{
              emotion_id: 1,
              count: 1
            }]
          }, {
            date: '2025-04-02',
            emotions: [{
              emotion_id: 2,
              count: 1
            }]
          }]
        }
      };
      _client.default.get.mockResolvedValue({
        data: mockTrends
      });
      var result = yield _emotionService.default.getEmotionTrends();
      expect(_client.default.get).toHaveBeenCalledWith('/stats/trends', {
        params: undefined
      });
      expect(result.data).toEqual(mockTrends);
    }));
    it('should fetch emotion trends with custom parameters', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        start_date: '2025-01-01',
        end_date: '2025-03-31',
        type: 'month'
      };
      var mockTrends = {
        status: 'success',
        data: {
          trends: [{
            date: '2025-01',
            emotions: [{
              emotion_id: 1,
              count: 10
            }]
          }, {
            date: '2025-02',
            emotions: [{
              emotion_id: 2,
              count: 12
            }]
          }, {
            date: '2025-03',
            emotions: [{
              emotion_id: 1,
              count: 8
            }]
          }]
        }
      };
      _client.default.get.mockResolvedValue({
        data: mockTrends
      });
      var result = yield _emotionService.default.getEmotionTrends(params);
      expect(_client.default.get).toHaveBeenCalledWith('/stats/trends', {
        params: params
      });
      expect(result.data).toEqual(mockTrends);
    }));
  });
  describe('getDailyEmotionCheck', function () {
    it('should fetch daily emotion check status', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 'success',
        data: {
          has_checked: true,
          last_check: '2025-04-09T08:30:00Z',
          emotions: [{
            emotion_id: 1,
            name: '행복'
          }]
        }
      };
      _client.default.get.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _emotionService.default.getDailyEmotionCheck();
      expect(_client.default.get).toHaveBeenCalledWith('/emotions/daily-check');
      expect(result.data).toEqual(mockResponse);
    }));
    it('should handle the case when no daily check exists', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 'success',
        data: {
          has_checked: false
        }
      };
      _client.default.get.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _emotionService.default.getDailyEmotionCheck();
      expect(_client.default.get).toHaveBeenCalledWith('/emotions/daily-check');
      expect(result.data).toEqual(mockResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,