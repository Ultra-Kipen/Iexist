11b7176fe7daaaf4694ee25d8f389a8d
_getJestObj().mock('../../../src/services/api/emotionService', function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockEmotions = {
  status: 'success',
  data: [{
    emotion_id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '감사',
    icon: 'hand-heart',
    color: '#FF69B4'
  }, {
    emotion_id: 3,
    name: '위로',
    icon: 'hand-peace',
    color: '#87CEEB'
  }]
};
var mockAlert = jest.fn();
_reactNative2.Alert.alert = mockAlert;
var mockNavigation = {
  goBack: jest.fn()
};
describe('EmotionLogScreen 단위 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: mockEmotions
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  var setupRenderAndWaitForEmotions = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      }));
      yield (0, _reactNative.waitFor)(function () {
        expect(renderResult.getByText('행복')).toBeTruthy();
      }, {
        timeout: 10000
      });
      return renderResult;
    });
    return function setupRenderAndWaitForEmotions() {
      return _ref.apply(this, arguments);
    };
  }();
  test('감정 데이터를 성공적으로 로드함', (0, _asyncToGenerator2.default)(function* () {
    var _yield$setupRenderAnd = yield setupRenderAndWaitForEmotions(),
      getByText = _yield$setupRenderAnd.getByText,
      queryByText = _yield$setupRenderAnd.queryByText;
    expect(_emotionService.default.getAllEmotions).toHaveBeenCalledTimes(1);
    expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    expect(getByText('오늘의 감정')).toBeTruthy();
    expect(getByText('현재 어떤 감정을 느끼고 계신가요?')).toBeTruthy();
    expect(getByText('행복')).toBeTruthy();
    expect(getByText('감사')).toBeTruthy();
    expect(getByText('위로')).toBeTruthy();
  }), 15000);
  test('감정 데이터 로드 실패 시 알림 표시', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockRejectedValue(new Error('네트워크 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert).toHaveBeenCalledWith('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
    }, {
      timeout: 10000
    });
  }), 15000);
  test('감정 선택/해제 기능이 정상 작동함', (0, _asyncToGenerator2.default)(function* () {
    var _yield$setupRenderAnd2 = yield setupRenderAndWaitForEmotions(),
      getByText = _yield$setupRenderAnd2.getByText;
    _reactNative.fireEvent.press(getByText('행복'));
    _reactNative.fireEvent.press(getByText('행복'));
    _reactNative.fireEvent.press(getByText('감사'));
  }), 15000);
  test('메모 입력이 정상 작동함', (0, _asyncToGenerator2.default)(function* () {
    var _yield$setupRenderAnd3 = yield setupRenderAndWaitForEmotions(),
      getByTestId = _yield$setupRenderAnd3.getByTestId;
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '오늘은 좋은 날이었습니다.');
    expect(noteInput.props.value).toBe('오늘은 좋은 날이었습니다.');
  }), 15000);
  test('감정 선택 없을 때 제출 버튼이 비활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _yield$setupRenderAnd4 = yield setupRenderAndWaitForEmotions(),
      getByTestId = _yield$setupRenderAnd4.getByTestId;
    var submitButton = getByTestId('emotion-submit-button');
    expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
  }), 15000);
  test('감정 로그 제출 성공 시 알림 및 화면 이동', (0, _asyncToGenerator2.default)(function* () {
    var _yield$setupRenderAnd5 = yield setupRenderAndWaitForEmotions(),
      getByText = _yield$setupRenderAnd5.getByText,
      getByTestId = _yield$setupRenderAnd5.getByTestId;
    _reactNative.fireEvent.press(getByText('행복'));
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: undefined
      });
      expect(mockAlert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', [{
        text: '확인',
        onPress: expect.any(Function)
      }]);
    }, {
      timeout: 10000
    });
    var alertButtons = mockAlert.mock.calls[0][2];
    alertButtons[0].onPress();
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }), 15000);
  test('감정 로그 제출 실패 시 에러 알림', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValue({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _yield$setupRenderAnd6 = yield setupRenderAndWaitForEmotions(),
      getByText = _yield$setupRenderAnd6.getByText,
      getByTestId = _yield$setupRenderAnd6.getByTestId;
    _reactNative.fireEvent.press(getByText('행복'));
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    }, {
      timeout: 10000
    });
  }), 15000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,