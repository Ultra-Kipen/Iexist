6185998741bc302f7c97a6dfb6a79845
_getJestObj().mock('../../src/screens/HomeScreen', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        surface: '#fff',
        background: '#fff'
      }
    })
  };
});
_getJestObj().mock('../../src/contexts/AuthContext', function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser'
      },
      isAuthenticated: true
    })
  };
});
_getJestObj().mock('../../src/contexts/EmotionContext', function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function MockHomeScreen() {
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "home-screen-container",
    children: (0, _jsxRuntime.jsxs)(_reactNative2.ScrollView, {
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uD658\uC601\uD569\uB2C8\uB2E4, testuser\uB2D8"
      }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "emotion-surface",
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC624\uB298\uC758 \uAC10\uC815"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "post-input-card"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uB204\uAD70\uAC00\uC758 \uD558\uB8E8\uB294.."
      })]
    })
  });
}
describe('HomeScreen ScrollView Content', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    var HomeScreenModule = require('../../src/screens/HomeScreen');
    HomeScreenModule.default.mockImplementation(MockHomeScreen);
  });
  it('renders ScrollView with required sections', function () {
    var HomeScreen = require('../../src/screens/HomeScreen').default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText('오늘의 감정')).toBeTruthy();
    expect(getByText('누군가의 하루는..')).toBeTruthy();
    var emotionSurface = getByTestId('emotion-surface');
    expect(emotionSurface).toBeTruthy();
    var postInputCard = getByTestId('post-input-card');
    expect(postInputCard).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,