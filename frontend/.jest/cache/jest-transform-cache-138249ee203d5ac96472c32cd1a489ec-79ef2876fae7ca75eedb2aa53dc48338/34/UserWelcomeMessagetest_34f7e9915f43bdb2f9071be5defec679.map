{"version":3,"names":["_getJestObj","mock","__esModule","default","jest","fn","useTheme","mockReturnValue","colors","primary","surface","background","useAuth","user","username","isAuthenticated","useEmotion","emotions","emotion_id","name","selectedEmotions","selectEmotion","_interopRequireDefault","require","_react","_reactNative","_reactNative2","_jsxRuntime","_require","MockHomeScreen","jsx","View","testID","children","jsxs","ScrollView","Text","describe","beforeEach","clearAllMocks","HomeScreenModule","mockImplementation","it","HomeScreen","_render","render","getByText","getByTestId","expect","toBeTruthy","emotionSurface","postInputCard"],"sources":["UserWelcomeMessage.test.tsx"],"sourcesContent":["// UserWelcomeMessage.test.tsx (수정)\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { View, Text, ScrollView } from 'react-native';\r\nimport * as AuthContextModule from '../../src/contexts/AuthContext';\r\nimport * as EmotionContextModule from '../../src/contexts/EmotionContext';\r\n\r\n// 실제 HomeScreen 대신 사용할 간단한 모의 컴포넌트\r\nfunction MockHomeScreen() {\r\n  return (\r\n    <View testID=\"home-screen-container\">\r\n      <ScrollView>\r\n        <Text>환영합니다, testuser님</Text>\r\n        <View testID=\"emotion-surface\">\r\n          <Text>오늘의 감정</Text>\r\n          {/* 감정 선택기 내용 */}\r\n        </View>\r\n        <View testID=\"post-input-card\">\r\n          {/* 게시물 입력 카드 내용 */}\r\n        </View>\r\n        <Text>누군가의 하루는..</Text>\r\n        {/* 게시물 내용 */}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\n// 원본 HomeScreen 모듈 모킹\r\njest.mock('../../src/screens/HomeScreen', () => ({\r\n  __esModule: true,\r\n  default: jest.fn()\r\n}));\r\n\r\n// React Native Paper 모킹\r\njest.mock('react-native-paper', () => ({\r\n  useTheme: jest.fn().mockReturnValue({\r\n    colors: {\r\n      primary: '#000',\r\n      surface: '#fff',\r\n      background: '#fff'\r\n    }\r\n  })\r\n}));\r\n\r\n// AuthContext 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: jest.fn().mockReturnValue({\r\n    user: { username: 'testuser' },\r\n    isAuthenticated: true\r\n  })\r\n}));\r\n\r\n// EmotionContext 모킹\r\njest.mock('../../src/contexts/EmotionContext', () => ({\r\n  useEmotion: jest.fn().mockReturnValue({\r\n    emotions: [{ emotion_id: 1, name: '행복' }],\r\n    selectedEmotions: [],\r\n    selectEmotion: jest.fn()\r\n  })\r\n}));\r\n\r\ndescribe('HomeScreen ScrollView Content', () => {\r\n  // 테스트 전에 HomeScreen 모킹을 설정\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 실제 HomeScreen 대신 MockHomeScreen 사용\r\n    const HomeScreenModule = require('../../src/screens/HomeScreen');\r\n    HomeScreenModule.default.mockImplementation(MockHomeScreen);\r\n  });\r\n  \r\n  it('renders ScrollView with required sections', () => {\r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByText, getByTestId } = render(<HomeScreen />);\r\n    \r\n    // 섹션 제목 확인\r\n    expect(getByText('오늘의 감정')).toBeTruthy();\r\n    expect(getByText('누군가의 하루는..')).toBeTruthy();\r\n\r\n    // 감정 선택기 영역 확인\r\n    const emotionSurface = getByTestId('emotion-surface');\r\n    expect(emotionSurface).toBeTruthy();\r\n\r\n    // 게시물 입력 카드 확인\r\n    const postInputCard = getByTestId('post-input-card');\r\n    expect(postInputCard).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}