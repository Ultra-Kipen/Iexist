4cbc79eb3bda7c71ad14799b8e269d19
_getJestObj().mock('../../src/assets/images/default_avatar.png', function () {
  return 'default_avatar';
});
_getJestObj().mock('../../src/assets/images/anonymous_avatar.png', function () {
  return 'anonymous_avatar';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PostPreview = _interopRequireDefault(require("../../src/components/PostPreview"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('PostPreview', function () {
  var mockEmotions = [{
    emotion_id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    emotion_id: 5,
    name: '슬픔',
    icon: 'emoticon-sad-outline',
    color: '#4682B4'
  }];
  var mockTags = [{
    tag_id: 1,
    name: '일상'
  }, {
    tag_id: 2,
    name: '고민'
  }];
  var mockMyDayPost = {
    post_id: 1,
    content: '오늘은 정말 행복한 하루였습니다!',
    created_at: '2025-04-20T12:00:00.000Z',
    like_count: 5,
    comment_count: 3,
    is_anonymous: false,
    user: {
      nickname: '행복이',
      profile_image_url: 'https://example.com/happy.jpg'
    },
    emotions: mockEmotions
  };
  var mockSomeoneDayPost = {
    post_id: 2,
    title: '요즘 고민이 있어요',
    content: '이런저런 고민이 많아서 글을 남겨봅니다.',
    created_at: '2025-04-19T15:30:00.000Z',
    like_count: 10,
    comment_count: 7,
    is_anonymous: true,
    tags: mockTags
  };
  var mockOnPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders myDay post correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: mockMyDayPost,
        onPress: mockOnPress
      })),
      getByText = _render.getByText;
    expect(getByText('행복이')).toBeTruthy();
    expect(getByText('오늘은 정말 행복한 하루였습니다!')).toBeTruthy();
    expect(getByText('5')).toBeTruthy();
    expect(getByText('3')).toBeTruthy();
    expect(getByText('행복')).toBeTruthy();
    expect(getByText('슬픔')).toBeTruthy();
  });
  it('renders someoneDay post correctly', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "someoneDay",
        post: mockSomeoneDayPost,
        onPress: mockOnPress
      })),
      getByText = _render2.getByText;
    expect(getByText('익명')).toBeTruthy();
    expect(getByText('요즘 고민이 있어요')).toBeTruthy();
    expect(getByText('이런저런 고민이 많아서 글을 남겨봅니다.')).toBeTruthy();
    expect(getByText('10')).toBeTruthy();
    expect(getByText('7')).toBeTruthy();
    expect(getByText('#일상')).toBeTruthy();
    expect(getByText('#고민')).toBeTruthy();
  });
  it('renders comfort post correctly', function () {
    var comfortPost = Object.assign({}, mockSomeoneDayPost, {
      title: '위로가 필요해요'
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "comfort",
        post: comfortPost,
        onPress: mockOnPress
      })),
      getByText = _render3.getByText;
    expect(getByText('위로가 필요해요')).toBeTruthy();
  });
  it('formats date correctly', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: Object.assign({}, mockMyDayPost, {
          created_at: '2025-04-20T12:00:00.000Z'
        }),
        onPress: mockOnPress
      })),
      getByText = _render4.getByText;
    var dateElement = getByText(/2025-04-20 \d{2}:\d{2}/);
    expect(dateElement).toBeTruthy();
  });
  it('truncates long content', function () {
    var longContentPost = Object.assign({}, mockMyDayPost, {
      content: 'A'.repeat(150)
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: longContentPost,
        onPress: mockOnPress
      })),
      getByText = _render5.getByText;
    expect(getByText(/A{100,}\.{3}/)).toBeTruthy();
  });
  it('displays image when provided', function () {
    var postWithImage = Object.assign({}, mockMyDayPost, {
      image_url: 'https://example.com/image.jpg'
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: postWithImage,
        onPress: mockOnPress
      })),
      getByTestId = _render6.getByTestId;
    var postImage = getByTestId('post-image');
    expect(postImage.props.source.uri).toBe('https://example.com/image.jpg');
  });
  it('calls onPress with post_id when pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: mockMyDayPost,
        onPress: mockOnPress
      })),
      getByText = _render7.getByText;
    _reactNative.fireEvent.press(getByText('오늘은 정말 행복한 하루였습니다!'));
    expect(mockOnPress).toHaveBeenCalledWith(mockMyDayPost.post_id);
  });
  it('handles anonymous post correctly', function () {
    var anonymousMyDayPost = Object.assign({}, mockMyDayPost, {
      is_anonymous: true,
      user: null
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: anonymousMyDayPost,
        onPress: mockOnPress
      })),
      getByText = _render8.getByText;
    expect(getByText('익명')).toBeTruthy();
  });
  it('handles missing emotions and tags gracefully', function () {
    var postWithoutEmotions = Object.assign({}, mockMyDayPost, {
      emotions: undefined
    });
    var postWithoutTags = Object.assign({}, mockSomeoneDayPost, {
      tags: undefined
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: postWithoutEmotions,
        onPress: mockOnPress
      })),
      queryMyDay = _render9.queryByText;
    expect(queryMyDay('행복')).toBeNull();
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "someoneDay",
        post: postWithoutTags,
        onPress: mockOnPress
      })),
      querySomeoneDay = _render10.queryByText;
    expect(querySomeoneDay('#일상')).toBeNull();
  });
  it('handles missing title for someoneDay and comfort posts', function () {
    var postWithoutTitle = Object.assign({}, mockSomeoneDayPost, {
      title: undefined
    });
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "someoneDay",
        post: postWithoutTitle,
        onPress: mockOnPress
      })),
      queryByText = _render11.queryByText;
    expect(queryByText('요즘 고민이 있어요')).toBeNull();
    expect(queryByText('이런저런 고민이 많아서 글을 남겨봅니다.')).toBeTruthy();
  });
  it('renders correctly with empty arrays of emotions and tags', function () {
    var postWithEmptyArrays = Object.assign({}, mockMyDayPost, {
      emotions: []
    });
    var someoneDayPostWithEmptyArrays = Object.assign({}, mockSomeoneDayPost, {
      tags: []
    });
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: postWithEmptyArrays,
        onPress: mockOnPress
      })),
      queryMyDay = _render12.queryByText;
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "someoneDay",
        post: someoneDayPostWithEmptyArrays,
        onPress: mockOnPress
      })),
      querySomeoneDay = _render13.queryByText;
    expect(queryMyDay('오늘은 정말 행복한 하루였습니다!')).toBeTruthy();
    expect(querySomeoneDay('이런저런 고민이 많아서 글을 남겨봅니다.')).toBeTruthy();
  });
  it('handles invalid date format gracefully', function () {
    var postWithInvalidDate = Object.assign({}, mockMyDayPost, {
      created_at: 'invalid-date'
    });
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostPreview.default, {
        postType: "myDay",
        post: postWithInvalidDate,
        onPress: mockOnPress
      })),
      getByText = _render14.getByText;
    expect(getByText('오늘은 정말 행복한 하루였습니다!')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,