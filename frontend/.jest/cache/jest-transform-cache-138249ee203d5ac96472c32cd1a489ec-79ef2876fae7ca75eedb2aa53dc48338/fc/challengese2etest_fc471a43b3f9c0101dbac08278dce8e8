8777a06738f6f4c8e29c1024f1d35fa1
_getJestObj().mock('../../src/services/api/challengeService', function () {
  return _challengeService.default;
});
_getJestObj().mock('@react-native-community/datetimepicker', function () {
  var MockDateTimePicker = function MockDateTimePicker() {
    return null;
  };
  return MockDateTimePicker;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _challengeData = require("../../__mocks__/data/challengeData.mock");
var _challengeService = _interopRequireDefault(require("../../__mocks__/services/challengeService.mock"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Challenge Flow', function () {
  it('mocks challenge service getChallengeById correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var result = yield _challengeService.default.getChallengeById(challengeId);
    expect(result.data).toBeDefined();
    expect(result.data.challenge_id).toBe(challengeId);
    expect(_challengeService.default.getChallengeById).toHaveBeenCalledWith(challengeId);
  }));
  it('mocks challenge service createChallenge correctly', (0, _asyncToGenerator2.default)(function* () {
    var newChallenge = {
      title: '새로운 테스트 챌린지',
      description: '테스트용 챌린지입니다.',
      start_date: '2025-05-01',
      end_date: '2025-05-15',
      is_public: true
    };
    var result = yield _challengeService.default.createChallenge(newChallenge);
    expect(result.data).toBeDefined();
    expect(result.data.title).toBe(newChallenge.title);
    expect(result.data.description).toBe(newChallenge.description);
    expect(_challengeService.default.createChallenge).toHaveBeenCalledWith(newChallenge);
  }));
  it('mocks challenge service joinChallenge correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 2;
    var result = yield _challengeService.default.joinChallenge(challengeId);
    expect(result.data).toBeDefined();
    expect(result.data.success).toBe(true);
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
  }));
  it('mocks challenge service getChallengeEmotions correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var userId = 1;
    var result = yield _challengeService.default.getChallengeEmotions(challengeId, userId);
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(result.data.length).toBeGreaterThan(0);
    expect(result.data[0].challenge_id).toBe(challengeId);
    expect(result.data[0].user_id).toBe(userId);
    expect(_challengeService.default.getChallengeEmotions).toHaveBeenCalledWith(challengeId, userId);
  }));
  it('mocks challenge service logChallengeEmotion correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var userId = 1;
    var emotionData = {
      emotion_id: 3,
      log_date: '2025-04-15',
      note: '테스트 감정 기록'
    };
    var result = yield _challengeService.default.logChallengeEmotion(challengeId, userId, emotionData);
    expect(result.data).toBeDefined();
    expect(result.data.challenge_id).toBe(challengeId);
    expect(result.data.user_id).toBe(userId);
    expect(result.data.emotion_id).toBe(emotionData.emotion_id);
    expect(result.data.note).toBe(emotionData.note);
    expect(_challengeService.default.logChallengeEmotion).toHaveBeenCalledWith(challengeId, userId, emotionData);
  }));
  it('handles error when fetching challenges fails', (0, _asyncToGenerator2.default)(function* () {
    var errorMessage = '서버 연결 오류';
    _challengeService.default.getAllChallenges.mockRejectedValueOnce(new Error(errorMessage));
    yield expect(_challengeService.default.getAllChallenges()).rejects.toThrow(errorMessage);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalled();
  }));
  it('toggles challenge participation correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    _challengeService.default.joinChallenge.mockResolvedValueOnce({
      data: {
        success: true
      }
    });
    var result = yield _challengeService.default.joinChallenge(challengeId);
    expect(result.data.success).toBe(true);
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
    _challengeService.default.leaveChallenge.mockResolvedValueOnce({
      data: {
        success: true
      }
    });
    result = yield _challengeService.default.leaveChallenge(challengeId);
    expect(result.data.success).toBe(true);
    expect(_challengeService.default.leaveChallenge).toHaveBeenCalledWith(challengeId);
  }));
  it('submits emotion log for a challenge', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var userId = 1;
    var emotionData = {
      emotion_id: 2,
      note: '오늘은 정말 감사한 하루였습니다.'
    };
    var result = yield _challengeService.default.logChallengeEmotion(challengeId, userId, emotionData);
    expect(result.data).toBeDefined();
    expect(result.data.challenge_id).toBe(challengeId);
    expect(result.data.user_id).toBe(userId);
    expect(result.data.emotion_id).toBe(emotionData.emotion_id);
    expect(result.data.note).toBe(emotionData.note);
    expect(_challengeService.default.logChallengeEmotion).toHaveBeenCalledWith(challengeId, userId, emotionData);
  }));
  it('shows challenge list and navigates to details', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn()
    };
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges
    });
    var result = yield _challengeService.default.getAllChallenges();
    expect(result.data).toEqual(_challengeData.mockChallenges);
    var challengeId = _challengeData.mockChallenges[0].challenge_id;
    mockNavigation.navigate('ChallengeDetail', {
      challengeId: challengeId
    });
    expect(mockNavigation.navigate).toHaveBeenCalledWith('ChallengeDetail', {
      challengeId: challengeId
    });
  }));
  it('creates a new challenge', (0, _asyncToGenerator2.default)(function* () {
    var newChallengeData = {
      title: '매일 감사한 일 기록하기',
      description: '하루에 한 가지 이상 감사한 일을 기록하는 챌린지입니다.',
      start_date: '2025-05-01',
      end_date: '2025-05-31',
      is_public: true,
      max_participants: 20
    };
    var result = yield _challengeService.default.createChallenge(newChallengeData);
    expect(result.data).toBeDefined();
    expect(result.data.title).toBe(newChallengeData.title);
    expect(result.data.description).toBe(newChallengeData.description);
    expect(result.data.start_date).toBe(newChallengeData.start_date);
    expect(result.data.end_date).toBe(newChallengeData.end_date);
    expect(result.data.is_public).toBe(newChallengeData.is_public);
    expect(result.data.max_participants).toBe(newChallengeData.max_participants);
    expect(result.data.challenge_id).toBeDefined();
    expect(typeof result.data.challenge_id).toBe('number');
    expect(_challengeService.default.createChallenge).toHaveBeenCalledWith(newChallengeData);
  }));
  it('joins a challenge from detail screen', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 2;
    _challengeService.default.getChallengeById.mockResolvedValueOnce({
      data: Object.assign({}, _challengeData.mockChallenges.find(function (c) {
        return c.challenge_id === challengeId;
      }), {
        is_participating: false
      })
    });
    var beforeJoin = yield _challengeService.default.getChallengeById(challengeId);
    expect(beforeJoin.data.is_participating).toBe(false);
    var joinResult = yield _challengeService.default.joinChallenge(challengeId);
    expect(joinResult.data.success).toBe(true);
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
    _challengeService.default.getChallengeById.mockResolvedValueOnce({
      data: Object.assign({}, _challengeData.mockChallenges.find(function (c) {
        return c.challenge_id === challengeId;
      }), {
        is_participating: true
      })
    });
    var afterJoin = yield _challengeService.default.getChallengeById(challengeId);
    expect(afterJoin.data.is_participating).toBe(true);
    var leaveResult = yield _challengeService.default.leaveChallenge(challengeId);
    expect(leaveResult.data.success).toBe(true);
    expect(_challengeService.default.leaveChallenge).toHaveBeenCalledWith(challengeId);
    _challengeService.default.getChallengeById.mockResolvedValueOnce({
      data: Object.assign({}, _challengeData.mockChallenges.find(function (c) {
        return c.challenge_id === challengeId;
      }), {
        is_participating: false
      })
    });
    var afterLeave = yield _challengeService.default.getChallengeById(challengeId);
    expect(afterLeave.data.is_participating).toBe(false);
  }));
  it('handles pagination when fetching challenges', (0, _asyncToGenerator2.default)(function* () {
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.slice(0, 1),
      pagination: {
        total: _challengeData.mockChallenges.length,
        current_page: 1,
        per_page: 1,
        total_pages: 2
      }
    });
    var firstPage = yield _challengeService.default.getAllChallenges({
      page: 1,
      limit: 1
    });
    expect(firstPage.data).toHaveLength(1);
    expect(firstPage.pagination.current_page).toBe(1);
    expect(firstPage.pagination.total_pages).toBe(2);
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.slice(1, 2),
      pagination: {
        total: _challengeData.mockChallenges.length,
        current_page: 2,
        per_page: 1,
        total_pages: 2
      }
    });
    var secondPage = yield _challengeService.default.getAllChallenges({
      page: 2,
      limit: 1
    });
    expect(secondPage.data).toHaveLength(1);
    expect(secondPage.pagination.current_page).toBe(2);
    expect(secondPage.data[0].challenge_id).toBe(_challengeData.mockChallenges[1].challenge_id);
  }));
  it('filters challenges by status', (0, _asyncToGenerator2.default)(function* () {
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.filter(function (c) {
        var today = new Date();
        var endDate = new Date(c.end_date);
        return endDate >= today;
      })
    });
    var activeResult = yield _challengeService.default.getAllChallenges({
      status: 'active'
    });
    expect(activeResult.data).toBeDefined();
    expect(Array.isArray(activeResult.data)).toBe(true);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalledWith({
      status: 'active'
    });
  }));
  it('searches challenges by keyword', (0, _asyncToGenerator2.default)(function* () {
    var keyword = '감사';
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.filter(function (c) {
        return c.title.includes(keyword) || c.description && c.description.includes(keyword);
      })
    });
    var searchResult = yield _challengeService.default.getAllChallenges({
      keyword: keyword
    });
    expect(searchResult.data).toBeDefined();
    expect(Array.isArray(searchResult.data)).toBe(true);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalledWith({
      keyword: keyword
    });
    searchResult.data.forEach(function (challenge) {
      expect(challenge.title.includes(keyword) || challenge.description && challenge.description.includes(keyword)).toBe(true);
    });
  }));
  it('handles errors when joining a challenge fails', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 999;
    _challengeService.default.joinChallenge.mockRejectedValueOnce(new Error('챌린지를 찾을 수 없습니다.'));
    yield expect(_challengeService.default.joinChallenge(challengeId)).rejects.toThrow('챌린지를 찾을 수 없습니다.');
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
  }));
  it('includes participants list in challenge details', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var result = yield _challengeService.default.getChallengeParticipants(challengeId);
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(_challengeService.default.getChallengeParticipants).toHaveBeenCalledWith(challengeId);
    if (result.data.length > 0) {
      var participant = result.data[0];
      expect(participant.user_id).toBeDefined();
      expect(participant.nickname).toBeDefined();
    }
  }));
  it('challenge service mocks are properly set up', function () {
    expect(_challengeService.default.getAllChallenges).toBeDefined();
    expect(_challengeService.default.getChallengeById).toBeDefined();
    expect(_challengeService.default.createChallenge).toBeDefined();
    _challengeService.default.getAllChallenges();
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalled();
    var testId = 1;
    _challengeService.default.getChallengeById(testId);
    expect(_challengeService.default.getChallengeById).toHaveBeenCalledWith(testId);
  });
  it('challenge mock data exists', function () {
    expect(_challengeData.mockChallenges).toBeDefined();
    expect(_challengeData.mockChallenges.length).toBeGreaterThan(0);
    expect(_challengeData.mockChallenges[0].challenge_id).toBeDefined();
    expect(_challengeData.mockChallenges[0].title).toBeDefined();
  });
  it('mocks challenge service correctly for UI rendering', (0, _asyncToGenerator2.default)(function* () {
    var result = yield _challengeService.default.getAllChallenges();
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(result.data).toEqual(_challengeData.mockChallenges);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalled();
    var firstChallenge = result.data[0];
    expect(firstChallenge.title).toBe(_challengeData.mockChallenges[0].title);
    expect(firstChallenge.challenge_id).toBe(_challengeData.mockChallenges[0].challenge_id);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQ2hhbGxlbmdlU2VydmljZSIsIk1vY2tEYXRlVGltZVBpY2tlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX2NoYWxsZW5nZURhdGEiLCJfY2hhbGxlbmdlU2VydmljZSIsIl9yZXF1aXJlIiwiamVzdCIsImRlc2NyaWJlIiwiaXQiLCJkZWZhdWx0IiwiY2hhbGxlbmdlSWQiLCJyZXN1bHQiLCJnZXRDaGFsbGVuZ2VCeUlkIiwiZXhwZWN0IiwiZGF0YSIsInRvQmVEZWZpbmVkIiwiY2hhbGxlbmdlX2lkIiwidG9CZSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibmV3Q2hhbGxlbmdlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInN0YXJ0X2RhdGUiLCJlbmRfZGF0ZSIsImlzX3B1YmxpYyIsImNyZWF0ZUNoYWxsZW5nZSIsImpvaW5DaGFsbGVuZ2UiLCJzdWNjZXNzIiwidXNlcklkIiwiZ2V0Q2hhbGxlbmdlRW1vdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJ1c2VyX2lkIiwiZW1vdGlvbkRhdGEiLCJlbW90aW9uX2lkIiwibG9nX2RhdGUiLCJub3RlIiwibG9nQ2hhbGxlbmdlRW1vdGlvbiIsImVycm9yTWVzc2FnZSIsImdldEFsbENoYWxsZW5nZXMiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJFcnJvciIsInJlamVjdHMiLCJ0b1Rocm93IiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsImxlYXZlQ2hhbGxlbmdlIiwibW9ja05hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImZuIiwibW9ja0NoYWxsZW5nZXMiLCJ0b0VxdWFsIiwibmV3Q2hhbGxlbmdlRGF0YSIsIm1heF9wYXJ0aWNpcGFudHMiLCJPYmplY3QiLCJhc3NpZ24iLCJmaW5kIiwiYyIsImlzX3BhcnRpY2lwYXRpbmciLCJiZWZvcmVKb2luIiwiam9pblJlc3VsdCIsImFmdGVySm9pbiIsImxlYXZlUmVzdWx0IiwiYWZ0ZXJMZWF2ZSIsInNsaWNlIiwicGFnaW5hdGlvbiIsInRvdGFsIiwiY3VycmVudF9wYWdlIiwicGVyX3BhZ2UiLCJ0b3RhbF9wYWdlcyIsImZpcnN0UGFnZSIsInBhZ2UiLCJsaW1pdCIsInRvSGF2ZUxlbmd0aCIsInNlY29uZFBhZ2UiLCJmaWx0ZXIiLCJ0b2RheSIsIkRhdGUiLCJlbmREYXRlIiwiYWN0aXZlUmVzdWx0Iiwic3RhdHVzIiwia2V5d29yZCIsImluY2x1ZGVzIiwic2VhcmNoUmVzdWx0IiwiZm9yRWFjaCIsImNoYWxsZW5nZSIsImdldENoYWxsZW5nZVBhcnRpY2lwYW50cyIsInBhcnRpY2lwYW50Iiwibmlja25hbWUiLCJ0ZXN0SWQiLCJmaXJzdENoYWxsZW5nZSJdLCJzb3VyY2VzIjpbImNoYWxsZW5nZXMuZTJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIGFjdCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHsgTmF2aWdhdGlvbkNvbnRhaW5lciB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7IG1vY2tDaGFsbGVuZ2VzLCBtb2NrQ2hhbGxlbmdlRW1vdGlvbnMgfSBmcm9tICcuLi8uLi9fX21vY2tzX18vZGF0YS9jaGFsbGVuZ2VEYXRhLm1vY2snO1xyXG5pbXBvcnQgbW9ja0NoYWxsZW5nZVNlcnZpY2UgZnJvbSAnLi4vLi4vX19tb2Nrc19fL3NlcnZpY2VzL2NoYWxsZW5nZVNlcnZpY2UubW9jayc7XHJcbmltcG9ydCBDaGFsbGVuZ2VTY3JlZW4gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvQ2hhbGxlbmdlU2NyZWVuJzsgLy8g7Jis67CU66W4IOy7tO2PrOuEjO2KuCDsnoTtj6ztirhcclxuXHJcbi8vIEFQSSDshJzruYTsiqQg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9jaGFsbGVuZ2VTZXJ2aWNlJywgKCkgPT4gbW9ja0NoYWxsZW5nZVNlcnZpY2UpO1xyXG5cclxuLy8gRGF0ZVRpbWVQaWNrZXIg66qo7YK5XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvZGF0ZXRpbWVwaWNrZXInLCAoKSA9PiB7XHJcbiAgY29uc3QgTW9ja0RhdGVUaW1lUGlja2VyID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfTtcclxuICByZXR1cm4gTW9ja0RhdGVUaW1lUGlja2VyO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdDaGFsbGVuZ2UgRmxvdycsICgpID0+IHtcclxuICAvLyDsnbTsoJwg7LKrIOuyiOynuCDthYzsiqTtirgg7Zmc7ISx7ZmUXHJcbiAgaXQoJ21vY2tzIGNoYWxsZW5nZSBzZXJ2aWNlIGdldENoYWxsZW5nZUJ5SWQgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgY2hhbGxlbmdlSWQgPSAxO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0Q2hhbGxlbmdlQnlJZChjaGFsbGVuZ2VJZCk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YS5jaGFsbGVuZ2VfaWQpLnRvQmUoY2hhbGxlbmdlSWQpO1xyXG4gICAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldENoYWxsZW5nZUJ5SWQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxsZW5nZUlkKTtcclxuICB9KTtcclxuICBcclxuICBpdCgnbW9ja3MgY2hhbGxlbmdlIHNlcnZpY2UgY3JlYXRlQ2hhbGxlbmdlIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG5ld0NoYWxsZW5nZSA9IHtcclxuICAgICAgdGl0bGU6ICfsg4jroZzsmrQg7YWM7Iqk7Yq4IOyxjOumsOyngCcsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiAn7YWM7Iqk7Yq47JqpIOyxjOumsOyngOyeheuLiOuLpC4nLFxyXG4gICAgICBzdGFydF9kYXRlOiAnMjAyNS0wNS0wMScsXHJcbiAgICAgIGVuZF9kYXRlOiAnMjAyNS0wNS0xNScsXHJcbiAgICAgIGlzX3B1YmxpYzogdHJ1ZVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuY3JlYXRlQ2hhbGxlbmdlKG5ld0NoYWxsZW5nZSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YS50aXRsZSkudG9CZShuZXdDaGFsbGVuZ2UudGl0bGUpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5kYXRhLmRlc2NyaXB0aW9uKS50b0JlKG5ld0NoYWxsZW5nZS5kZXNjcmlwdGlvbik7XHJcbiAgICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuY3JlYXRlQ2hhbGxlbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChuZXdDaGFsbGVuZ2UpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdtb2NrcyBjaGFsbGVuZ2Ugc2VydmljZSBqb2luQ2hhbGxlbmdlIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNoYWxsZW5nZUlkID0gMjtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmpvaW5DaGFsbGVuZ2UoY2hhbGxlbmdlSWQpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlU2VydmljZS5qb2luQ2hhbGxlbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsbGVuZ2VJZCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ21vY2tzIGNoYWxsZW5nZSBzZXJ2aWNlIGdldENoYWxsZW5nZUVtb3Rpb25zIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNoYWxsZW5nZUlkID0gMTtcclxuICAgIGNvbnN0IHVzZXJJZCA9IDE7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldENoYWxsZW5nZUVtb3Rpb25zKGNoYWxsZW5nZUlkLCB1c2VySWQpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0YSkpLnRvQmUodHJ1ZSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGFbMF0uY2hhbGxlbmdlX2lkKS50b0JlKGNoYWxsZW5nZUlkKTtcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YVswXS51c2VyX2lkKS50b0JlKHVzZXJJZCk7XHJcbiAgICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0Q2hhbGxlbmdlRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxsZW5nZUlkLCB1c2VySWQpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdtb2NrcyBjaGFsbGVuZ2Ugc2VydmljZSBsb2dDaGFsbGVuZ2VFbW90aW9uIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGNoYWxsZW5nZUlkID0gMTtcclxuICAgIGNvbnN0IHVzZXJJZCA9IDE7XHJcbiAgICBjb25zdCBlbW90aW9uRGF0YSA9IHtcclxuICAgICAgZW1vdGlvbl9pZDogMyxcclxuICAgICAgbG9nX2RhdGU6ICcyMDI1LTA0LTE1JyxcclxuICAgICAgbm90ZTogJ+2FjOyKpO2KuCDqsJDsoJUg6riw66GdJ1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UubG9nQ2hhbGxlbmdlRW1vdGlvbihjaGFsbGVuZ2VJZCwgdXNlcklkLCBlbW90aW9uRGF0YSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YS5jaGFsbGVuZ2VfaWQpLnRvQmUoY2hhbGxlbmdlSWQpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5kYXRhLnVzZXJfaWQpLnRvQmUodXNlcklkKTtcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YS5lbW90aW9uX2lkKS50b0JlKGVtb3Rpb25EYXRhLmVtb3Rpb25faWQpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5kYXRhLm5vdGUpLnRvQmUoZW1vdGlvbkRhdGEubm90ZSk7XHJcbiAgICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UubG9nQ2hhbGxlbmdlRW1vdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2hhbGxlbmdlSWQsIHVzZXJJZCwgZW1vdGlvbkRhdGEpO1xyXG4gIH0pO1xyXG4gIFxyXG5cclxuLy8g7JeQ65+sIOyymOumrCDthYzsiqTtirgg7LaU6rCAXHJcbml0KCdoYW5kbGVzIGVycm9yIHdoZW4gZmV0Y2hpbmcgY2hhbGxlbmdlcyBmYWlscycsIGFzeW5jICgpID0+IHtcclxuICAvLyBBUEkg7Jik66WYIOuqqO2CuVxyXG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9ICfshJzrsoQg7Jew6rKwIOyYpOulmCc7XHJcbiAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcy5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xyXG4gIFxyXG4gIC8vIEFQSSDtmLjstpzsl5DshJwg7Jik66WY6rCAIOuwnOyDne2VmOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcygpKS5yZWplY3RzLnRvVGhyb3coZXJyb3JNZXNzYWdlKTtcclxuICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG59KTtcclxuXHJcbi8vIOyxjOumsOyngCDssLjsl6wv7Leo7IaMIO2GoOq4gCDthYzsiqTtirhcclxuaXQoJ3RvZ2dsZXMgY2hhbGxlbmdlIHBhcnRpY2lwYXRpb24gY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGNoYWxsZW5nZUlkID0gMTtcclxuICBcclxuICAvLyDssLjsl6ztlZjquLAg7YWM7Iqk7Yq4XHJcbiAgbW9ja0NoYWxsZW5nZVNlcnZpY2Uuam9pbkNoYWxsZW5nZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBcclxuICAgIGRhdGE6IHsgc3VjY2VzczogdHJ1ZSB9IFxyXG4gIH0pO1xyXG4gIGxldCByZXN1bHQgPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5qb2luQ2hhbGxlbmdlKGNoYWxsZW5nZUlkKTtcclxuICBleHBlY3QocmVzdWx0LmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2Uuam9pbkNoYWxsZW5nZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2hhbGxlbmdlSWQpO1xyXG4gIFxyXG4gIC8vIOuCmOqwgOq4sCDthYzsiqTtirhcclxuICBtb2NrQ2hhbGxlbmdlU2VydmljZS5sZWF2ZUNoYWxsZW5nZS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBcclxuICAgIGRhdGE6IHsgc3VjY2VzczogdHJ1ZSB9IFxyXG4gIH0pO1xyXG4gIHJlc3VsdCA9IGF3YWl0IG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmxlYXZlQ2hhbGxlbmdlKGNoYWxsZW5nZUlkKTtcclxuICBleHBlY3QocmVzdWx0LmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UubGVhdmVDaGFsbGVuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxsZW5nZUlkKTtcclxufSk7XHJcbi8vIOqwkOyglSDquLDroZ0g7KCc7LacIO2FjOyKpO2KuCDsiJjsoJVcclxuaXQoJ3N1Ym1pdHMgZW1vdGlvbiBsb2cgZm9yIGEgY2hhbGxlbmdlJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGNoYWxsZW5nZUlkID0gMTtcclxuICBjb25zdCB1c2VySWQgPSAxO1xyXG4gIGNvbnN0IGVtb3Rpb25EYXRhID0ge1xyXG4gICAgZW1vdGlvbl9pZDogMixcclxuICAgIG5vdGU6ICfsmKTripjsnYAg7KCV66eQIOqwkOyCrO2VnCDtlZjro6jsmIDsirXri4jri6QuJ1xyXG4gIH07XHJcbiAgXHJcbiAgLy8gbG9nQ2hhbGxlbmdlRW1vdGlvbiDrqZTshJzrk5wg7IKs7JqpICh1cGRhdGVDaGFsbGVuZ2VQcm9ncmVzcyDrjIDsi6ApXHJcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UubG9nQ2hhbGxlbmdlRW1vdGlvbihjaGFsbGVuZ2VJZCwgdXNlcklkLCBlbW90aW9uRGF0YSk7XHJcbiAgXHJcbiAgLy8g6rKw6rO8IO2ZleyduFxyXG4gIGV4cGVjdChyZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcclxuICBleHBlY3QocmVzdWx0LmRhdGEuY2hhbGxlbmdlX2lkKS50b0JlKGNoYWxsZW5nZUlkKTtcclxuICBleHBlY3QocmVzdWx0LmRhdGEudXNlcl9pZCkudG9CZSh1c2VySWQpO1xyXG4gIGV4cGVjdChyZXN1bHQuZGF0YS5lbW90aW9uX2lkKS50b0JlKGVtb3Rpb25EYXRhLmVtb3Rpb25faWQpO1xyXG4gIGV4cGVjdChyZXN1bHQuZGF0YS5ub3RlKS50b0JlKGVtb3Rpb25EYXRhLm5vdGUpO1xyXG4gIGV4cGVjdChtb2NrQ2hhbGxlbmdlU2VydmljZS5sb2dDaGFsbGVuZ2VFbW90aW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsbGVuZ2VJZCwgdXNlcklkLCBlbW90aW9uRGF0YSk7XHJcbn0pO1xyXG4gIGl0KCdzaG93cyBjaGFsbGVuZ2UgbGlzdCBhbmQgbmF2aWdhdGVzIHRvIGRldGFpbHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBOYXZpZ2F0aW9uIOuqqO2CuVxyXG4gICAgY29uc3QgbW9ja05hdmlnYXRpb24gPSB7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKClcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIEFQSSDsnZHri7Ug66qo7YK5IChnZXRBbGxDaGFsbGVuZ2VzKVxyXG4gICAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBcclxuICAgICAgZGF0YTogbW9ja0NoYWxsZW5nZXMgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7YWM7Iqk7Yq47JeQ7ISc64qUIOyLpOygnCBBUEkg7Zi47LacXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRBbGxDaGFsbGVuZ2VzKCk7XHJcbiAgICBcclxuICAgIC8vIOuNsOydtO2EsCDtmZXsnbhcclxuICAgIGV4cGVjdChyZXN1bHQuZGF0YSkudG9FcXVhbChtb2NrQ2hhbGxlbmdlcyk7XHJcbiAgICBcclxuICAgIC8vIOyxjOumsOyngCBJROuhnCDsg4HshLgg7KCV67O0IOqwgOyguOyYpOq4sCDsi5zrrqzroIjsnbTshZhcclxuICAgIGNvbnN0IGNoYWxsZW5nZUlkID0gbW9ja0NoYWxsZW5nZXNbMF0uY2hhbGxlbmdlX2lkO1xyXG4gICAgbW9ja05hdmlnYXRpb24ubmF2aWdhdGUoJ0NoYWxsZW5nZURldGFpbCcsIHsgY2hhbGxlbmdlSWQgfSk7XHJcbiAgICBcclxuICAgIC8vIOuEpOu5hOqyjOydtOyFmCDtmLjstpwg7ZmV7J24XHJcbiAgICBleHBlY3QobW9ja05hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdDaGFsbGVuZ2VEZXRhaWwnLCB7IFxyXG4gICAgICBjaGFsbGVuZ2VJZDogY2hhbGxlbmdlSWQgXHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgnY3JlYXRlcyBhIG5ldyBjaGFsbGVuZ2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyDsg4gg7LGM66aw7KeAIOuNsOydtO2EsCDsoJXsnZhcclxuICAgIGNvbnN0IG5ld0NoYWxsZW5nZURhdGEgPSB7XHJcbiAgICAgIHRpdGxlOiAn66ek7J28IOqwkOyCrO2VnCDsnbwg6riw66Gd7ZWY6riwJyxcclxuICAgICAgZGVzY3JpcHRpb246ICftlZjro6jsl5Ag7ZWcIOqwgOyngCDsnbTsg4Eg6rCQ7IKs7ZWcIOydvOydhCDquLDroZ3tlZjripQg7LGM66aw7KeA7J6F64uI64ukLicsXHJcbiAgICAgIHN0YXJ0X2RhdGU6ICcyMDI1LTA1LTAxJyxcclxuICAgICAgZW5kX2RhdGU6ICcyMDI1LTA1LTMxJyxcclxuICAgICAgaXNfcHVibGljOiB0cnVlLFxyXG4gICAgICBtYXhfcGFydGljaXBhbnRzOiAyMFxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gY3JlYXRlQ2hhbGxlbmdlIO2YuOy2nFxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuY3JlYXRlQ2hhbGxlbmdlKG5ld0NoYWxsZW5nZURhdGEpO1xyXG4gICAgXHJcbiAgICAvLyDqsrDqs7wg7ZmV7J24XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEudGl0bGUpLnRvQmUobmV3Q2hhbGxlbmdlRGF0YS50aXRsZSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEuZGVzY3JpcHRpb24pLnRvQmUobmV3Q2hhbGxlbmdlRGF0YS5kZXNjcmlwdGlvbik7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEuc3RhcnRfZGF0ZSkudG9CZShuZXdDaGFsbGVuZ2VEYXRhLnN0YXJ0X2RhdGUpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5kYXRhLmVuZF9kYXRlKS50b0JlKG5ld0NoYWxsZW5nZURhdGEuZW5kX2RhdGUpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5kYXRhLmlzX3B1YmxpYykudG9CZShuZXdDaGFsbGVuZ2VEYXRhLmlzX3B1YmxpYyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEubWF4X3BhcnRpY2lwYW50cykudG9CZShuZXdDaGFsbGVuZ2VEYXRhLm1heF9wYXJ0aWNpcGFudHMpO1xyXG4gICAgXHJcbiAgICAvLyDsg4gg7LGM66aw7KeA7JeQIGNoYWxsZW5nZV9pZOqwgCDtlaDri7nrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEuY2hhbGxlbmdlX2lkKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KHR5cGVvZiByZXN1bHQuZGF0YS5jaGFsbGVuZ2VfaWQpLnRvQmUoJ251bWJlcicpO1xyXG4gICAgXHJcbiAgICAvLyDrqZTshJzrk5zqsIAg7Jis67CU66W4IOuNsOydtO2EsOuhnCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuY3JlYXRlQ2hhbGxlbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChuZXdDaGFsbGVuZ2VEYXRhKTtcclxuICB9KTtcclxuICBcclxuICBpdCgnam9pbnMgYSBjaGFsbGVuZ2UgZnJvbSBkZXRhaWwgc2NyZWVuJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgY2hhbGxlbmdlSWQgPSAyOyAvLyDssLjsl6ztlaAg7LGM66aw7KeAIElEXHJcbiAgICBcclxuICAgIC8vIOywuOyXrCDsoITsl5Ag7LGM66aw7KeAIOyDgeyEuCDsoJXrs7Qg6rCA7KC47Jik6riwXHJcbiAgICBtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRDaGFsbGVuZ2VCeUlkLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICAuLi5tb2NrQ2hhbGxlbmdlcy5maW5kKGMgPT4gYy5jaGFsbGVuZ2VfaWQgPT09IGNoYWxsZW5nZUlkKSxcclxuICAgICAgICBpc19wYXJ0aWNpcGF0aW5nOiBmYWxzZSAvLyDslYTsp4Eg7LC47Jes7ZWY7KeAIOyViuydgCDsg4Htg5xcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJlZm9yZUpvaW4gPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRDaGFsbGVuZ2VCeUlkKGNoYWxsZW5nZUlkKTtcclxuICAgIGV4cGVjdChiZWZvcmVKb2luLmRhdGEuaXNfcGFydGljaXBhdGluZykudG9CZShmYWxzZSk7XHJcbiAgICBcclxuICAgIC8vIOyxjOumsOyngCDssLjsl6ztlZjquLBcclxuICAgIGNvbnN0IGpvaW5SZXN1bHQgPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5qb2luQ2hhbGxlbmdlKGNoYWxsZW5nZUlkKTtcclxuICAgIGV4cGVjdChqb2luUmVzdWx0LmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlU2VydmljZS5qb2luQ2hhbGxlbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsbGVuZ2VJZCk7XHJcbiAgICBcclxuICAgIC8vIOywuOyXrCDtm4Tsl5Ag7LGM66aw7KeAIOyDgeyEuCDsoJXrs7Qg64uk7IucIOqwgOyguOyYpOq4sFxyXG4gICAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0Q2hhbGxlbmdlQnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgLi4ubW9ja0NoYWxsZW5nZXMuZmluZChjID0+IGMuY2hhbGxlbmdlX2lkID09PSBjaGFsbGVuZ2VJZCksXHJcbiAgICAgICAgaXNfcGFydGljaXBhdGluZzogdHJ1ZSAvLyDsnbTsoJwg7LC47Jes7ZWcIOyDge2DnFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgYWZ0ZXJKb2luID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0Q2hhbGxlbmdlQnlJZChjaGFsbGVuZ2VJZCk7XHJcbiAgICBleHBlY3QoYWZ0ZXJKb2luLmRhdGEuaXNfcGFydGljaXBhdGluZykudG9CZSh0cnVlKTtcclxuICAgIFxyXG4gICAgLy8g7LGM66aw7KeAIOuCmOqwgOq4sFxyXG4gICAgY29uc3QgbGVhdmVSZXN1bHQgPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5sZWF2ZUNoYWxsZW5nZShjaGFsbGVuZ2VJZCk7XHJcbiAgICBleHBlY3QobGVhdmVSZXN1bHQuZGF0YS5zdWNjZXNzKS50b0JlKHRydWUpO1xyXG4gICAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmxlYXZlQ2hhbGxlbmdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaGFsbGVuZ2VJZCk7XHJcbiAgICBcclxuICAgIC8vIOuCmOqwhCDtm4Tsl5Ag7LGM66aw7KeAIOyDgeyEuCDsoJXrs7Qg64uk7IucIOqwgOyguOyYpOq4sFxyXG4gICAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0Q2hhbGxlbmdlQnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgLi4ubW9ja0NoYWxsZW5nZXMuZmluZChjID0+IGMuY2hhbGxlbmdlX2lkID09PSBjaGFsbGVuZ2VJZCksXHJcbiAgICAgICAgaXNfcGFydGljaXBhdGluZzogZmFsc2UgLy8g64uk7IucIOywuOyXrO2VmOyngCDslYrsnYAg7IOB7YOcXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCBhZnRlckxlYXZlID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0Q2hhbGxlbmdlQnlJZChjaGFsbGVuZ2VJZCk7XHJcbiAgICBleHBlY3QoYWZ0ZXJMZWF2ZS5kYXRhLmlzX3BhcnRpY2lwYXRpbmcpLnRvQmUoZmFsc2UpO1xyXG4gIH0pO1xyXG4gIC8vIO2OmOydtOyngOuEpOydtOyFmCDthYzsiqTtirhcclxuaXQoJ2hhbmRsZXMgcGFnaW5hdGlvbiB3aGVuIGZldGNoaW5nIGNoYWxsZW5nZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgLy8g7Y6Y7J207KeA64Sk7J207IWYIO2MjOudvOuvuO2EsOuhnCBBUEkg7Zi47LacXHJcbiAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgZGF0YTogbW9ja0NoYWxsZW5nZXMuc2xpY2UoMCwgMSksXHJcbiAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgIHRvdGFsOiBtb2NrQ2hhbGxlbmdlcy5sZW5ndGgsXHJcbiAgICAgIGN1cnJlbnRfcGFnZTogMSxcclxuICAgICAgcGVyX3BhZ2U6IDEsXHJcbiAgICAgIHRvdGFsX3BhZ2VzOiAyXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgXHJcbiAgY29uc3QgZmlyc3RQYWdlID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcyh7IHBhZ2U6IDEsIGxpbWl0OiAxIH0pO1xyXG4gIFxyXG4gIC8vIOyyqyDtjpjsnbTsp4Ag6rKw6rO8IO2ZleyduFxyXG4gIGV4cGVjdChmaXJzdFBhZ2UuZGF0YSkudG9IYXZlTGVuZ3RoKDEpO1xyXG4gIGV4cGVjdChmaXJzdFBhZ2UucGFnaW5hdGlvbi5jdXJyZW50X3BhZ2UpLnRvQmUoMSk7XHJcbiAgZXhwZWN0KGZpcnN0UGFnZS5wYWdpbmF0aW9uLnRvdGFsX3BhZ2VzKS50b0JlKDIpO1xyXG4gIFxyXG4gIC8vIOuRkCDrsojsp7gg7Y6Y7J207KeAIOyalOyyrVxyXG4gIG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldEFsbENoYWxsZW5nZXMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgIGRhdGE6IG1vY2tDaGFsbGVuZ2VzLnNsaWNlKDEsIDIpLFxyXG4gICAgcGFnaW5hdGlvbjoge1xyXG4gICAgICB0b3RhbDogbW9ja0NoYWxsZW5nZXMubGVuZ3RoLFxyXG4gICAgICBjdXJyZW50X3BhZ2U6IDIsXHJcbiAgICAgIHBlcl9wYWdlOiAxLFxyXG4gICAgICB0b3RhbF9wYWdlczogMlxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIFxyXG4gIGNvbnN0IHNlY29uZFBhZ2UgPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRBbGxDaGFsbGVuZ2VzKHsgcGFnZTogMiwgbGltaXQ6IDEgfSk7XHJcbiAgXHJcbiAgLy8g65GQIOuyiOynuCDtjpjsnbTsp4Ag6rKw6rO8IO2ZleyduFxyXG4gIGV4cGVjdChzZWNvbmRQYWdlLmRhdGEpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICBleHBlY3Qoc2Vjb25kUGFnZS5wYWdpbmF0aW9uLmN1cnJlbnRfcGFnZSkudG9CZSgyKTtcclxuICBleHBlY3Qoc2Vjb25kUGFnZS5kYXRhWzBdLmNoYWxsZW5nZV9pZCkudG9CZShtb2NrQ2hhbGxlbmdlc1sxXS5jaGFsbGVuZ2VfaWQpO1xyXG59KTtcclxuXHJcbi8vIOyxjOumsOyngCDtlYTthLDrp4Eg7YWM7Iqk7Yq4XHJcbml0KCdmaWx0ZXJzIGNoYWxsZW5nZXMgYnkgc3RhdHVzJywgYXN5bmMgKCkgPT4ge1xyXG4gIC8vIO2ZnOyEsSDssYzrprDsp4Drp4wg7ZWE7YSw66eBXHJcbiAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgZGF0YTogbW9ja0NoYWxsZW5nZXMuZmlsdGVyKGMgPT4ge1xyXG4gICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgIGNvbnN0IGVuZERhdGUgPSBuZXcgRGF0ZShjLmVuZF9kYXRlKTtcclxuICAgICAgcmV0dXJuIGVuZERhdGUgPj0gdG9kYXk7XHJcbiAgICB9KVxyXG4gIH0pO1xyXG4gIFxyXG4gIGNvbnN0IGFjdGl2ZVJlc3VsdCA9IGF3YWl0IG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldEFsbENoYWxsZW5nZXMoeyBzdGF0dXM6ICdhY3RpdmUnIH0pO1xyXG4gIGV4cGVjdChhY3RpdmVSZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcclxuICBleHBlY3QoQXJyYXkuaXNBcnJheShhY3RpdmVSZXN1bHQuZGF0YSkpLnRvQmUodHJ1ZSk7XHJcbiAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldEFsbENoYWxsZW5nZXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgc3RhdHVzOiAnYWN0aXZlJyB9KTtcclxufSk7XHJcblxyXG4vLyDssYzrprDsp4Ag6rKA7IOJIO2FjOyKpO2KuFxyXG5pdCgnc2VhcmNoZXMgY2hhbGxlbmdlcyBieSBrZXl3b3JkJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGtleXdvcmQgPSAn6rCQ7IKsJztcclxuICBcclxuICAvLyDtgqTsm4zrk5zroZwg7LGM66aw7KeAIOqygOyDiVxyXG4gIG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldEFsbENoYWxsZW5nZXMubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcclxuICAgIGRhdGE6IG1vY2tDaGFsbGVuZ2VzLmZpbHRlcihjID0+IFxyXG4gICAgICBjLnRpdGxlLmluY2x1ZGVzKGtleXdvcmQpIHx8IChjLmRlc2NyaXB0aW9uICYmIGMuZGVzY3JpcHRpb24uaW5jbHVkZXMoa2V5d29yZCkpXHJcbiAgICApXHJcbiAgfSk7XHJcbiAgXHJcbiAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcyh7IGtleXdvcmQgfSk7XHJcbiAgZXhwZWN0KHNlYXJjaFJlc3VsdC5kYXRhKS50b0JlRGVmaW5lZCgpO1xyXG4gIGV4cGVjdChBcnJheS5pc0FycmF5KHNlYXJjaFJlc3VsdC5kYXRhKSkudG9CZSh0cnVlKTtcclxuICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBrZXl3b3JkIH0pO1xyXG4gIFxyXG4gIC8vIOqygOyDiSDqsrDqs7zsnZgg7LGM66aw7KeA7JeQIO2CpOybjOuTnOqwgCDtj6ztlajrkJjslrQg7J6I64qU7KeAIO2ZleyduFxyXG4gIHNlYXJjaFJlc3VsdC5kYXRhLmZvckVhY2goKGNoYWxsZW5nZTogeyB0aXRsZTogc3RyaW5nOyBkZXNjcmlwdGlvbj86IHN0cmluZyB9KSA9PiB7XHJcbiAgICBleHBlY3QoXHJcbiAgICAgIGNoYWxsZW5nZS50aXRsZS5pbmNsdWRlcyhrZXl3b3JkKSB8fCBcclxuICAgICAgKGNoYWxsZW5nZS5kZXNjcmlwdGlvbiAmJiBjaGFsbGVuZ2UuZGVzY3JpcHRpb24uaW5jbHVkZXMoa2V5d29yZCkpXHJcbiAgICApLnRvQmUodHJ1ZSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy8g7JeQ65+sIOyDge2ZqeyXkOyEnOydmCDssYzrprDsp4Ag7LC47JesIO2FjOyKpO2KuFxyXG5pdCgnaGFuZGxlcyBlcnJvcnMgd2hlbiBqb2luaW5nIGEgY2hhbGxlbmdlIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGNoYWxsZW5nZUlkID0gOTk5OyAvLyDsobTsnqztlZjsp4Ag7JWK64qUIElEXHJcbiAgXHJcbiAgLy8g7LC47JesIOyLpO2MqCDrqqjtgrlcclxuICBtb2NrQ2hhbGxlbmdlU2VydmljZS5qb2luQ2hhbGxlbmdlLm1vY2tSZWplY3RlZFZhbHVlT25jZShcclxuICAgIG5ldyBFcnJvcign7LGM66aw7KeA66W8IOywvuydhCDsiJgg7JeG7Iq164uI64ukLicpXHJcbiAgKTtcclxuICBcclxuICAvLyDsl5Drn6zqsIAg7KCB7KCI7Z6IIOuwnOyDne2VmOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2Uuam9pbkNoYWxsZW5nZShjaGFsbGVuZ2VJZCkpXHJcbiAgICAucmVqZWN0cy50b1Rocm93KCfssYzrprDsp4Drpbwg7LC+7J2EIOyImCDsl4bsirXri4jri6QuJyk7XHJcbiAgXHJcbiAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmpvaW5DaGFsbGVuZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNoYWxsZW5nZUlkKTtcclxufSk7XHJcblxyXG4vLyDssYzrprDsp4Ag7IOB7IS4IOygleuztOyXkCDssLjsl6zsnpAg66qp66GdIO2PrO2VqCDthYzsiqTtirhcclxuaXQoJ2luY2x1ZGVzIHBhcnRpY2lwYW50cyBsaXN0IGluIGNoYWxsZW5nZSBkZXRhaWxzJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IGNoYWxsZW5nZUlkID0gMTtcclxuICBcclxuICAvLyDssLjsl6zsnpAg66qp66GdIOygleuztOulvCDtj6ztlajtlZwg7IOB7IS4IOygleuztCDrsJjtmZhcclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRDaGFsbGVuZ2VQYXJ0aWNpcGFudHMoY2hhbGxlbmdlSWQpO1xyXG4gIFxyXG4gIGV4cGVjdChyZXN1bHQuZGF0YSkudG9CZURlZmluZWQoKTtcclxuICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0YSkpLnRvQmUodHJ1ZSk7XHJcbiAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldENoYWxsZW5nZVBhcnRpY2lwYW50cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2hhbGxlbmdlSWQpO1xyXG4gIFxyXG4gIC8vIOqwgSDssLjsl6zsnpDqsIAg7ZWE7JqU7ZWcIOygleuztOulvCDqsIDsp4Dqs6Ag7J6I64qU7KeAIO2ZleyduFxyXG4gIGlmIChyZXN1bHQuZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCBwYXJ0aWNpcGFudCA9IHJlc3VsdC5kYXRhWzBdO1xyXG4gICAgZXhwZWN0KHBhcnRpY2lwYW50LnVzZXJfaWQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QocGFydGljaXBhbnQubmlja25hbWUpLnRvQmVEZWZpbmVkKCk7XHJcbiAgfVxyXG59KTtcclxuICAvLyDquLDsobQg6riw67O4IO2FjOyKpO2KuCDsnKDsp4BcclxuICBpdCgnY2hhbGxlbmdlIHNlcnZpY2UgbW9ja3MgYXJlIHByb3Blcmx5IHNldCB1cCcsICgpID0+IHtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRBbGxDaGFsbGVuZ2VzKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldENoYWxsZW5nZUJ5SWQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QobW9ja0NoYWxsZW5nZVNlcnZpY2UuY3JlYXRlQ2hhbGxlbmdlKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgXHJcbiAgICAvLyDqsITri6jtlZwg66qo7YK5IO2FjOyKpO2KuFxyXG4gICAgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcygpO1xyXG4gICAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldEFsbENoYWxsZW5nZXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIFxyXG4gICAgY29uc3QgdGVzdElkID0gMTtcclxuICAgIG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldENoYWxsZW5nZUJ5SWQodGVzdElkKTtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlU2VydmljZS5nZXRDaGFsbGVuZ2VCeUlkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh0ZXN0SWQpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdjaGFsbGVuZ2UgbW9jayBkYXRhIGV4aXN0cycsICgpID0+IHtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlcykudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcclxuICAgIGV4cGVjdChtb2NrQ2hhbGxlbmdlc1swXS5jaGFsbGVuZ2VfaWQpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QobW9ja0NoYWxsZW5nZXNbMF0udGl0bGUpLnRvQmVEZWZpbmVkKCk7XHJcbiAgfSk7XHJcbiAgLy8g7IOI66Gc7Jq0IFVJIO2FjOyKpO2KuCDstpTqsIBcclxuICBpdCgnbW9ja3MgY2hhbGxlbmdlIHNlcnZpY2UgY29ycmVjdGx5IGZvciBVSSByZW5kZXJpbmcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBnZXRBbGxDaGFsbGVuZ2VzIOuplOyEnOuTnCDsgqzsmqkgKGdldENoYWxsZW5nZXMg64yA7IugKVxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0NoYWxsZW5nZVNlcnZpY2UuZ2V0QWxsQ2hhbGxlbmdlcygpO1xyXG4gICAgXHJcbiAgICAvLyDqsrDqs7wg6rKA7KadXHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShyZXN1bHQuZGF0YSkpLnRvQmUodHJ1ZSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmRhdGEpLnRvRXF1YWwobW9ja0NoYWxsZW5nZXMpO1xyXG4gICAgZXhwZWN0KG1vY2tDaGFsbGVuZ2VTZXJ2aWNlLmdldEFsbENoYWxsZW5nZXMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIFxyXG4gICAgLy8g7LKrIOuyiOynuCDssYzrprDsp4Ag642w7J207YSwIO2ZleyduFxyXG4gICAgY29uc3QgZmlyc3RDaGFsbGVuZ2UgPSByZXN1bHQuZGF0YVswXTtcclxuICAgIGV4cGVjdChmaXJzdENoYWxsZW5nZS50aXRsZSkudG9CZShtb2NrQ2hhbGxlbmdlc1swXS50aXRsZSk7XHJcbiAgICBleHBlY3QoZmlyc3RDaGFsbGVuZ2UuY2hhbGxlbmdlX2lkKS50b0JlKG1vY2tDaGFsbGVuZ2VzWzBdLmNoYWxsZW5nZV9pZCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHlDQUF5QyxFQUFFO0VBQUEsT0FBTUMseUJBQW9CO0FBQUEsRUFBQztBQUdoRkYsV0FB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