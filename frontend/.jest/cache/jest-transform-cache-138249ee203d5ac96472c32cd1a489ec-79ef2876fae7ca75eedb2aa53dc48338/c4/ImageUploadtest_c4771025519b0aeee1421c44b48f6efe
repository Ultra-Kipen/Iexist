eeb2a2688919ba26b9cb4db278b0fe5b
_getJestObj().mock('../../src/screens/HomeScreen', function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        surface: '#fff',
        background: '#fff'
      }
    })
  };
});
_getJestObj().mock('../../src/contexts/AuthContext', function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser'
      },
      isAuthenticated: true
    })
  };
});
_getJestObj().mock('../../src/contexts/EmotionContext', function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function MockHomeScreen() {
  var _React$useState = _react.default.useState(''),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    imageUrl = _React$useState2[0],
    setImageUrl = _React$useState2[1];
  var handleImageUpload = function handleImageUpload() {
    setImageUrl('https://via.placeholder.com/150');
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "home-screen-container",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "image-upload-button",
      onPress: handleImageUpload,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uC0AC\uC9C4 \uCD94\uAC00"
      })
    }), imageUrl && (0, _jsxRuntime.jsx)(_reactNative2.Image, {
      testID: "uploaded-image",
      source: {
        uri: imageUrl
      },
      style: {
        width: 150,
        height: 150
      }
    })]
  });
}
describe('HomeScreen Image Upload', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    var HomeScreenModule = require('../../src/screens/HomeScreen');
    HomeScreenModule.default.mockImplementation(MockHomeScreen);
  });
  it('shows image upload button', function () {
    var HomeScreen = require('../../src/screens/HomeScreen').default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render.getByTestId;
    var imageUploadButton = getByTestId('image-upload-button');
    expect(imageUploadButton).toBeTruthy();
  });
  it('uploads image and displays preview', function () {
    var HomeScreen = require('../../src/screens/HomeScreen').default;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render2.getByTestId;
    var imageUploadButton = getByTestId('image-upload-button');
    _reactNative.fireEvent.press(imageUploadButton);
    var uploadedImage = getByTestId('uploaded-image');
    expect(uploadedImage).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,