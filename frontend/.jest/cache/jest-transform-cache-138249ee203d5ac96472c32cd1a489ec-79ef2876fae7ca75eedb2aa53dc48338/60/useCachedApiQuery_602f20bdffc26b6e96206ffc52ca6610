3d644b117f0997b2540f36452accb351
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCachedApiQuery = useCachedApiQuery;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _useCache2 = require("./useCache");
function useCachedApiQuery(endpoint, params) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ttl = options.ttl,
    _options$autoLoad = options.autoLoad,
    autoLoad = _options$autoLoad === void 0 ? true : _options$autoLoad,
    onError = options.onError,
    onSuccess = options.onSuccess;
  var fetchData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var queryString = params ? `?${new URLSearchParams(params).toString()}` : '';
    var response = yield fetch(`${endpoint}${queryString}`);
    if (!response.ok) {
      throw new Error(`API 요청 오류: ${response.status}`);
    }
    var result = yield response.json();
    if (!result.success) {
      throw new Error(result.error || '알 수 없는 오류가 발생했습니다.');
    }
    if (onSuccess && result.data) {
      onSuccess(result.data);
    }
    if (result.data === undefined) {
      throw new Error('API 응답에 데이터가 없습니다.');
    }
    return result.data;
  }), [endpoint, params, onSuccess]);
  var cacheKey = `api:${endpoint}:${JSON.stringify(params || {})}`;
  var _useCache = (0, _useCache2.useCache)(cacheKey, fetchData, {
      ttl: ttl,
      autoLoad: autoLoad
    }),
    data = _useCache.data,
    loading = _useCache.loading,
    error = _useCache.error,
    refetch = _useCache.refetch,
    invalidateCache = _useCache.invalidateCache;
  if (error && onError) {
    onError(error);
  }
  return {
    data: data,
    loading: loading,
    error: error,
    refetch: refetch,
    invalidateCache: invalidateCache
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3VzZUNhY2hlMiIsInVzZUNhY2hlZEFwaVF1ZXJ5IiwiZW5kcG9pbnQiLCJwYXJhbXMiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidHRsIiwiX29wdGlvbnMkYXV0b0xvYWQiLCJhdXRvTG9hZCIsIm9uRXJyb3IiLCJvblN1Y2Nlc3MiLCJmZXRjaERhdGEiLCJ1c2VDYWxsYmFjayIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJxdWVyeVN0cmluZyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwiZGF0YSIsImNhY2hlS2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsIl91c2VDYWNoZSIsInVzZUNhY2hlIiwibG9hZGluZyIsInJlZmV0Y2giLCJpbnZhbGlkYXRlQ2FjaGUiXSwic291cmNlcyI6WyJ1c2VDYWNoZWRBcGlRdWVyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlQ2FjaGUgfSBmcm9tICcuL3VzZUNhY2hlJztcclxuaW1wb3J0IHsgQXBpUmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy9hcGknO1xyXG5cclxuaW50ZXJmYWNlIEFwaVF1ZXJ5T3B0aW9ucyB7XHJcbiAgLyoqIOy6kOyLnCDsnKDtmqgg7Iuc6rCEICjrsIDrpqzstIgpICovXHJcbiAgdHRsPzogbnVtYmVyO1xyXG4gIC8qKiDsnpDrj5kg66Gc65SpIOyXrOu2gCAqL1xyXG4gIGF1dG9Mb2FkPzogYm9vbGVhbjtcclxuICAvKiog7JeQ65+sIO2VuOuTpOungSDtlajsiJggKi9cclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcclxuICAvKiog7ISx6rO1IO2VuOuTpOungSDtlajsiJggKi9cclxuICBvblN1Y2Nlc3M/OiA8VD4oZGF0YTogVCkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFQSSDsmpTssq3snYQg7LqQ7Iux7ZWY64qUIO2bhVxyXG4gKiBAcGFyYW0gZW5kcG9pbnQgQVBJIOyXlOuTnO2PrOyduO2KuFxyXG4gKiBAcGFyYW0gcGFyYW1zIEFQSSDtjIzrnbzrr7jthLAg6rCd7LK0XHJcbiAqIEBwYXJhbSBvcHRpb25zIOy6kOyLnCDsmLXshZhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRBcGlRdWVyeTxUID0gYW55LCBQID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXHJcbiAgZW5kcG9pbnQ6IHN0cmluZyxcclxuICBwYXJhbXM/OiBQLFxyXG4gIG9wdGlvbnM6IEFwaVF1ZXJ5T3B0aW9ucyA9IHt9XHJcbikge1xyXG4gIGNvbnN0IHsgdHRsLCBhdXRvTG9hZCA9IHRydWUsIG9uRXJyb3IsIG9uU3VjY2VzcyB9ID0gb3B0aW9ucztcclxuICBcclxuICAvLyBBUEkg7JqU7LKtIO2VqOyImFxyXG4gIGNvbnN0IGZldGNoRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpOiBQcm9taXNlPFQ+ID0+IHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcGFyYW1zIFxyXG4gICAgICA/IGA/JHtuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcyBhcyBhbnkpLnRvU3RyaW5nKCl9YCBcclxuICAgICAgOiAnJztcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7ZW5kcG9pbnR9JHtxdWVyeVN0cmluZ31gKTtcclxuICAgIFxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSDsmpTssq0g7Jik66WYOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgcmVzdWx0OiBBcGlSZXNwb25zZTxUPiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIFxyXG4gICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LmVycm9yIHx8ICfslYwg7IiYIOyXhuuKlCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDshLHqs7Ug7L2c67CxXHJcbiAgICBpZiAob25TdWNjZXNzICYmIHJlc3VsdC5kYXRhKSB7XHJcbiAgICAgIG9uU3VjY2VzcyhyZXN1bHQuZGF0YSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIGRhdGHqsIAg7JeG64qUIOqyveyasOyXkCDrjIDtlZwg7LKY66asIOy2lOqwgFxyXG4gICAgaWYgKHJlc3VsdC5kYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBUEkg7J2R64u17JeQIOuNsOydtO2EsOqwgCDsl4bsirXri4jri6QuJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiByZXN1bHQuZGF0YTtcclxuICB9LCBbZW5kcG9pbnQsIHBhcmFtcywgb25TdWNjZXNzXSk7XHJcbiAgXHJcbiAgLy8g7LqQ7IucIO2CpCDsg53shLFcclxuICBjb25zdCBjYWNoZUtleSA9IGBhcGk6JHtlbmRwb2ludH06JHtKU09OLnN0cmluZ2lmeShwYXJhbXMgfHwge30pfWA7XHJcbiAgXHJcbiAgY29uc3QgeyBcclxuICAgIGRhdGEsIFxyXG4gICAgbG9hZGluZywgXHJcbiAgICBlcnJvciwgXHJcbiAgICByZWZldGNoLCBcclxuICAgIGludmFsaWRhdGVDYWNoZSBcclxuICB9ID0gdXNlQ2FjaGU8VD4oY2FjaGVLZXksIGZldGNoRGF0YSwgeyB0dGwsIGF1dG9Mb2FkIH0pO1xyXG4gIFxyXG4gIC8vIOyXkOufrCDtlbjrk6Trp4FcclxuICBpZiAoZXJyb3IgJiYgb25FcnJvcikge1xyXG4gICAgb25FcnJvcihlcnJvcik7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiB7IFxyXG4gICAgZGF0YSwgXHJcbiAgICBsb2FkaW5nLCBcclxuICAgIGVycm9yLCBcclxuICAgIHJlZmV0Y2gsIFxyXG4gICAgaW52YWxpZGF0ZUNhY2hlIFxyXG4gIH07XHJcbn0iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUQsT0FBQTtBQW9CTyxTQUFTRSxpQkFBaUJBLENBQy9CQyxRQUFnQixFQUNoQkMsTUFBVSxFQUVWO0VBQUEsSUFEQUMsT0FBd0IsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBRTdCLElBQVFHLEdBQUcsR0FBMENKLE9BQU8sQ0FBcERJLEdBQUc7SUFBQUMsaUJBQUEsR0FBMENMLE9BQU8sQ0FBL0NNLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxpQkFBQSxjQUFHLElBQUksR0FBQUEsaUJBQUE7SUFBRUUsT0FBTyxHQUFnQlAsT0FBTyxDQUE5Qk8sT0FBTztJQUFFQyxTQUFTLEdBQUtSLE9BQU8sQ0FBckJRLFNBQVM7RUFHaEQsSUFBTUMsU0FBUyxHQUFHLElBQUFDLGtCQUFXLE1BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBQyxhQUF3QjtJQUNwRCxJQUFNQyxXQUFXLEdBQUdkLE1BQU0sR0FDdEIsSUFBSSxJQUFJZSxlQUFlLENBQUNmLE1BQWEsQ0FBQyxDQUFDZ0IsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUNuRCxFQUFFO0lBQ04sSUFBTUMsUUFBUSxTQUFTQyxLQUFLLENBQUMsR0FBR25CLFFBQVEsR0FBR2UsV0FBVyxFQUFFLENBQUM7SUFFekQsSUFBSSxDQUFDRyxRQUFRLENBQUNFLEVBQUUsRUFBRTtNQUNoQixNQUFNLElBQUlDLEtBQUssQ0FBQyxjQUFjSCxRQUFRLENBQUNJLE1BQU0sRUFBRSxDQUFDO0lBQ2xEO0lBRUEsSUFBTUMsTUFBc0IsU0FBU0wsUUFBUSxDQUFDTSxJQUFJLENBQUMsQ0FBQztJQUVwRCxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxFQUFFO01BQ25CLE1BQU0sSUFBSUosS0FBSyxDQUFDRSxNQUFNLENBQUNHLEtBQUssSUFBSSxvQkFBb0IsQ0FBQztJQUN2RDtJQUdBLElBQUloQixTQUFTLElBQUlhLE1BQU0sQ0FBQ0ksSUFBSSxFQUFFO01BQzVCakIsU0FBUyxDQUFDYSxNQUFNLENBQUNJLElBQUksQ0FBQztJQUN4QjtJQUdBLElBQUlKLE1BQU0sQ0FBQ0ksSUFBSSxLQUFLdEIsU0FBUyxFQUFFO01BQzdCLE1BQU0sSUFBSWdCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQztJQUN2QztJQUVBLE9BQU9FLE1BQU0sQ0FBQ0ksSUFBSTtFQUNwQixDQUFDLEdBQUUsQ0FBQzNCLFFBQVEsRUFBRUMsTUFBTSxFQUFFUyxTQUFTLENBQUMsQ0FBQztFQUdqQyxJQUFNa0IsUUFBUSxHQUFHLE9BQU81QixRQUFRLElBQUk2QixJQUFJLENBQUNDLFNBQVMsQ0FBQzdCLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO0VBRWxFLElBQUE4QixTQUFBLEdBTUksSUFBQUMsbUJBQVEsRUFBSUosUUFBUSxFQUFFakIsU0FBUyxFQUFFO01BQUVMLEdBQUcsRUFBSEEsR0FBRztNQUFFRSxRQUFRLEVBQVJBO0lBQVMsQ0FBQyxDQUFDO0lBTHJEbUIsSUFBSSxHQUFBSSxTQUFBLENBQUpKLElBQUk7SUFDSk0sT0FBTyxHQUFBRixTQUFBLENBQVBFLE9BQU87SUFDUFAsS0FBSyxHQUFBSyxTQUFBLENBQUxMLEtBQUs7SUFDTFEsT0FBTyxHQUFBSCxTQUFBLENBQVBHLE9BQU87SUFDUEMsZUFBZSxHQUFBSixTQUFBLENBQWZJLGVBQWU7RUFJakIsSUFBSVQsS0FBSyxJQUFJakIsT0FBTyxFQUFFO0lBQ3BCQSxPQUFPLENBQUNpQixLQUFLLENBQUM7RUFDaEI7RUFFQSxPQUFPO0lBQ0xDLElBQUksRUFBSkEsSUFBSTtJQUNKTSxPQUFPLEVBQVBBLE9BQU87SUFDUFAsS0FBSyxFQUFMQSxLQUFLO0lBQ0xRLE9BQU8sRUFBUEEsT0FBTztJQUNQQyxlQUFlLEVBQWZBO0VBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119