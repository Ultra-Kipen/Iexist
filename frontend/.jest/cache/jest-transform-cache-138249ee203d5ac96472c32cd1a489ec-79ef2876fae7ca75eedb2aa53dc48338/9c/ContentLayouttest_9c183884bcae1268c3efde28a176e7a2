547f996bb87541477642d42fe20184e0
_getJestObj().mock('../../src/hooks/useTheme', function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#ffffff',
            primary: '#6200ee'
          }
        }
      };
    }
  };
});
_getJestObj().mock('../../src/components/LoadingIndicator', function () {
  var React = require('react');
  var ReactNative = require('react-native');
  return {
    __esModule: true,
    default: function _default() {
      return React.createElement(ReactNative.View, {
        testID: 'loading-indicator'
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ContentLayout = _interopRequireDefault(require("../../src/layouts/ContentLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ContentLayout', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentLayout.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Test Content"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('Test Content')).toBeTruthy();
  });
  it('shows loading indicator when loading is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Test Content"
        })
      })),
      getByTestId = _render2.getByTestId,
      queryByText = _render2.queryByText;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    expect(queryByText('Test Content')).toBeNull();
  });
  it('renders header and footer when provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentLayout.default, {
        header: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Header"
        }),
        footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Footer"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Test Content"
        })
      })),
      getByText = _render3.getByText;
    expect(getByText('Header')).toBeTruthy();
    expect(getByText('Footer')).toBeTruthy();
    expect(getByText('Test Content')).toBeTruthy();
  });
  it('renders as View when scrollEnabled is false', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentLayout.default, {
        scrollEnabled: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Test Content"
        })
      })),
      getByText = _render4.getByText;
    expect(getByText('Test Content')).toBeTruthy();
  });
  it('handles onRefresh callback when provided', function () {
    var onRefreshMock = jest.fn();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentLayout.default, {
        onRefresh: onRefreshMock,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Test Content"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('Test Content')).toBeTruthy();
    expect(onRefreshMock).not.toHaveBeenCalled();
  });
  it('applies padded style when padded is true', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ContentLayout.default, {
        padded: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "Test Content"
        })
      })),
      getByText = _render6.getByText;
    expect(getByText('Test Content')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,