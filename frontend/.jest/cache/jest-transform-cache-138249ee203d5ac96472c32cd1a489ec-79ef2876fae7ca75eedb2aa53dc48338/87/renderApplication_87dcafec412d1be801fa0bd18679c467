67ea43e3ac8fb1760624af0b53df754e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderApplication;
var _GlobalPerformanceLogger = _interopRequireDefault(require("../Utilities/GlobalPerformanceLogger"));
var _PerformanceLoggerContext = _interopRequireDefault(require("../Utilities/PerformanceLoggerContext"));
var _AppContainer = _interopRequireDefault(require("./AppContainer"));
var _DisplayMode = _interopRequireDefault(require("./DisplayMode"));
var _getCachedComponentWithDebugName = _interopRequireDefault(require("./getCachedComponentWithDebugName"));
var Renderer = _interopRequireWildcard(require("./RendererProxy"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
require("../Utilities/BackHandler");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, rootViewStyle, fabric, scopedPerformanceLogger, isLogBox, debugName, displayMode, useOffscreen) {
  (0, _invariant.default)(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  var performanceLogger = scopedPerformanceLogger != null ? scopedPerformanceLogger : _GlobalPerformanceLogger.default;
  var renderable = (0, _jsxRuntime.jsx)(_PerformanceLoggerContext.default.Provider, {
    value: performanceLogger,
    children: (0, _jsxRuntime.jsx)(_AppContainer.default, {
      rootTag: rootTag,
      fabric: fabric,
      WrapperComponent: WrapperComponent,
      rootViewStyle: rootViewStyle,
      initialProps: initialProps != null ? initialProps : Object.freeze({}),
      internal_excludeLogBox: isLogBox,
      children: (0, _jsxRuntime.jsx)(RootComponent, Object.assign({}, initialProps, {
        rootTag: rootTag
      }))
    })
  });
  if (__DEV__ && debugName) {
    var RootComponentWithMeaningfulName = (0, _getCachedComponentWithDebugName.default)(`${debugName}(RootComponent)`);
    renderable = (0, _jsxRuntime.jsx)(RootComponentWithMeaningfulName, {
      children: renderable
    });
  }
  if (useOffscreen && displayMode != null) {
    var Activity = React.unstable_Activity;
    renderable = (0, _jsxRuntime.jsx)(Activity, {
      mode: displayMode === _DisplayMode.default.VISIBLE ? 'visible' : 'hidden',
      children: renderable
    });
  }
  var useConcurrentRoot = Boolean(fabric);
  performanceLogger.startTimespan('renderApplication_React_render');
  performanceLogger.setExtra('usedReactConcurrentRoot', useConcurrentRoot ? '1' : '0');
  performanceLogger.setExtra('usedReactFabric', fabric ? '1' : '0');
  performanceLogger.setExtra('usedReactProfiler', Renderer.isProfilingRenderer());
  Renderer.renderElement({
    element: renderable,
    rootTag: rootTag,
    useFabric: Boolean(fabric),
    useConcurrentRoot: useConcurrentRoot
  });
  performanceLogger.stopTimespan('renderApplication_React_render');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,