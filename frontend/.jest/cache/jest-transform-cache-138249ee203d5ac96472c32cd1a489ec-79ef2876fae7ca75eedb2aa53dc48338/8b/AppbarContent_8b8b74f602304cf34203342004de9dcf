9fc598ec58dba3b9b48cba79a4ea8813
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["color", "subtitle", "subtitleStyle", "onPress", "disabled", "style", "titleRef", "titleStyle", "title", "titleMaxFontSizeMultiplier", "mode", "theme", "testID"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AppbarContent = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _colors = require("../../styles/themes/v2/colors");
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var AppbarContent = function AppbarContent(_ref) {
  var titleColor = _ref.color,
    subtitle = _ref.subtitle,
    subtitleStyle = _ref.subtitleStyle,
    onPress = _ref.onPress,
    disabled = _ref.disabled,
    style = _ref.style,
    titleRef = _ref.titleRef,
    titleStyle = _ref.titleStyle,
    title = _ref.title,
    titleMaxFontSizeMultiplier = _ref.titleMaxFontSizeMultiplier,
    _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'small' : _ref$mode,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'appbar-content' : _ref$testID,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3,
    colors = theme.colors;
  var titleTextColor = titleColor ? titleColor : isV3 ? colors.onSurface : _colors.white;
  var subtitleColor = (0, _color.default)(titleTextColor).alpha(0.7).rgb().string();
  var modeContainerStyles = {
    small: styles.v3DefaultContainer,
    medium: styles.v3MediumContainer,
    large: styles.v3LargeContainer,
    'center-aligned': styles.v3DefaultContainer
  };
  var variant = _utils.modeTextVariant[mode];
  var contentWrapperProps = Object.assign({
    pointerEvents: 'box-none',
    style: [styles.container, isV3 && modeContainerStyles[mode], style],
    testID: testID
  }, rest);
  var content = React.createElement(React.Fragment, null, typeof title === 'string' ? React.createElement(_Text.default, _extends({}, isV3 && {
    variant: variant
  }, {
    ref: titleRef,
    style: [Object.assign({
      color: titleTextColor
    }, isV3 ? theme.fonts[variant] : _reactNative.Platform.OS === 'ios' ? theme.fonts.regular : theme.fonts.medium), !isV3 && styles.title, titleStyle],
    numberOfLines: 1,
    accessible: true,
    accessibilityRole: onPress ? 'none' : _reactNative.Platform.OS === 'web' ? 'heading' : 'header',
    accessibilityTraits: "header",
    testID: `${testID}-title-text`,
    maxFontSizeMultiplier: titleMaxFontSizeMultiplier
  }), title) : title, !isV3 && subtitle ? React.createElement(_Text.default, {
    style: [styles.subtitle, {
      color: subtitleColor
    }, subtitleStyle],
    numberOfLines: 1
  }, subtitle) : null);
  if (onPress) {
    return (React.createElement(_reactNative.Pressable, _extends({
        accessibilityRole: touchableRole,
        accessibilityTraits: touchableRole,
        accessibilityComponentType: "button",
        accessbilityState: disabled ? 'disabled' : null,
        onPress: onPress,
        disabled: disabled
      }, contentWrapperProps), content)
    );
  }
  return React.createElement(_reactNative.View, contentWrapperProps, content);
};
exports.AppbarContent = AppbarContent;
AppbarContent.displayName = 'Appbar.Content';
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingHorizontal: 12
  },
  v3DefaultContainer: {
    paddingHorizontal: 0
  },
  v3MediumContainer: {
    paddingHorizontal: 0,
    justifyContent: 'flex-end',
    paddingBottom: 24
  },
  v3LargeContainer: {
    paddingHorizontal: 0,
    paddingTop: 36,
    justifyContent: 'flex-end',
    paddingBottom: 28
  },
  title: {
    fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 20
  },
  subtitle: {
    fontSize: _reactNative.Platform.OS === 'ios' ? 11 : 14
  }
});
var touchableRole = 'button';
var _default = AppbarContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,