dcadb7e8c8d4e1a36cae7f20f6a54c92
_getJestObj().mock('../../src/contexts/AuthContext', function () {
  return Object.assign({}, jest.requireActual('../../src/contexts/AuthContext'), {
    useAuth: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactTestRenderer = require("react-test-renderer");
var _LoginScreen = _interopRequireDefault(require("../../src/screens/LoginScreen"));
var _reactNative2 = require("react-native");
var AuthContext = _interopRequireWildcard(require("../../src/contexts/AuthContext"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn()
};
describe('LoginScreen', function () {
  var mockLogin = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    AuthContext.useAuth.mockImplementation(function () {
      return {
        login: mockLogin
      };
    });
  });
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText,
      getByLabelText = _render.getByLabelText;
    expect(getByText('IExist')).toBeTruthy();
    expect(getByText('나는 존재한다.')).toBeTruthy();
    expect(getByText('로그인')).toBeTruthy();
    expect(getByText('비밀번호를 잊으셨나요?')).toBeTruthy();
    expect(getByText('회원가입')).toBeTruthy();
  });
  it('validates empty form inputs', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render2.getByText;
    yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('로그인'));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('이메일을 입력해주세요')).toBeTruthy();
      expect(getByText('비밀번호를 입력해주세요')).toBeTruthy();
    });
  }));
  it('validates invalid email format', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render3.getByText,
      getByPlaceholderText = _render3.getByPlaceholderText;
    var emailInput = getByPlaceholderText('이메일');
    _reactNative.fireEvent.changeText(emailInput, 'invalid-email');
    yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('로그인'));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('유효한 이메일 주소를 입력해주세요')).toBeTruthy();
    });
  }));
  it('validates short password', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render4.getByText,
      getByPlaceholderText = _render4.getByPlaceholderText;
    var emailInput = getByPlaceholderText('이메일');
    _reactNative.fireEvent.changeText(emailInput, 'valid@email.com');
    var passwordInput = getByPlaceholderText('비밀번호');
    _reactNative.fireEvent.changeText(passwordInput, '12345');
    yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('로그인'));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('비밀번호는 최소 6자 이상이어야 합니다')).toBeTruthy();
    });
  }));
  it('submits valid form and calls login', (0, _asyncToGenerator2.default)(function* () {
    mockLogin.mockResolvedValueOnce({});
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render5.getByText,
      getByPlaceholderText = _render5.getByPlaceholderText,
      queryByTestId = _render5.queryByTestId;
    var emailInput = getByPlaceholderText('이메일');
    _reactNative.fireEvent.changeText(emailInput, 'valid@email.com');
    var passwordInput = getByPlaceholderText('비밀번호');
    _reactNative.fireEvent.changeText(passwordInput, 'password123');
    yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('로그인'));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockLogin).toHaveBeenCalledWith({
        email: 'valid@email.com',
        password: 'password123'
      });
    });
  }));
  it('shows error alert when login fails', (0, _asyncToGenerator2.default)(function* () {
    var errorMessage = '인증에 실패했습니다';
    mockLogin.mockRejectedValueOnce({
      response: {
        data: {
          message: errorMessage
        }
      }
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render6.getByText,
      getByPlaceholderText = _render6.getByPlaceholderText;
    var emailInput = getByPlaceholderText('이메일');
    _reactNative.fireEvent.changeText(emailInput, 'valid@email.com');
    var passwordInput = getByPlaceholderText('비밀번호');
    _reactNative.fireEvent.changeText(passwordInput, 'password123');
    yield (0, _reactTestRenderer.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByText('로그인'));
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('로그인 실패', errorMessage);
    });
  }));
  it('navigates to registration screen', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render7.getByText;
    _reactNative.fireEvent.press(getByText('회원가입'));
    expect(mockNavigation.navigate).toHaveBeenCalledWith('Register');
  });
  it('navigates to forgot password screen', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_LoginScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('비밀번호를 잊으셨나요?'));
    expect(mockNavigation.navigate).toHaveBeenCalledWith('ForgotPassword');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsInVzZUF1dGgiLCJmbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0VGVzdFJlbmRlcmVyIiwiX0xvZ2luU2NyZWVuIiwiX3JlYWN0TmF0aXZlMiIsIkF1dGhDb250ZXh0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9yZXF1aXJlIiwic3B5T24iLCJBbGVydCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIm1vY2tOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJkZXNjcmliZSIsIm1vY2tMb2dpbiIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibG9naW4iLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJuYXZpZ2F0aW9uIiwiZ2V0QnlUZXh0IiwiZ2V0QnlMYWJlbFRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJhY3QiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIndhaXRGb3IiLCJfcmVuZGVyMyIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZW1haWxJbnB1dCIsImNoYW5nZVRleHQiLCJfcmVuZGVyNCIsInBhc3N3b3JkSW5wdXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJfcmVuZGVyNSIsInF1ZXJ5QnlUZXN0SWQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImVtYWlsIiwicGFzc3dvcmQiLCJlcnJvck1lc3NhZ2UiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJyZXNwb25zZSIsImRhdGEiLCJtZXNzYWdlIiwiX3JlbmRlcjYiLCJhbGVydCIsIl9yZW5kZXI3IiwiX3JlbmRlcjgiXSwic291cmNlcyI6WyJMb2dpblNjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMb2dpblNjcmVlbi50ZXN0LnRzeCDsiJjsoJVcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IGFjdCB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xyXG5pbXBvcnQgTG9naW5TY3JlZW4gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvTG9naW5TY3JlZW4nO1xyXG5pbXBvcnQgeyBBdXRoUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvQXV0aENvbnRleHQnO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAqIGFzIEF1dGhDb250ZXh0IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dCc7XHJcblxyXG4vLyBNb2NrIHRoZSBBbGVydCBtb2R1bGVcclxuamVzdC5zcHlPbihBbGVydCwgJ2FsZXJ0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcclxuXHJcbi8vIE1vY2sgdGhlIG5hdmlnYXRpb25cclxuY29uc3QgbW9ja05hdmlnYXRpb24gPSB7XHJcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxufTtcclxuXHJcbi8vIE1vY2sgdGhlIHVzZUF1dGggaG9va1xyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dCcsICgpID0+ICh7XHJcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuLi8uLi9zcmMvY29udGV4dHMvQXV0aENvbnRleHQnKSxcclxuICB1c2VBdXRoOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCdMb2dpblNjcmVlbicsICgpID0+IHtcclxuICBjb25zdCBtb2NrTG9naW4gPSBqZXN0LmZuKCk7XHJcbiAgXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIChBdXRoQ29udGV4dC51c2VBdXRoIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XHJcbiAgICAgIGxvZ2luOiBtb2NrTG9naW4sXHJcbiAgICB9KSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeUxhYmVsVGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8TG9naW5TY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdJRXhpc3QnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn64KY64qUIOyhtOyerO2VnOuLpC4nKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn66Gc6re47J24JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+u5hOuwgOuyiO2YuOulvCDsnorsnLzshajrgpjsmpQ/JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2ajOybkOqwgOyehScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCd2YWxpZGF0ZXMgZW1wdHkgZm9ybSBpbnB1dHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8TG9naW5TY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+XHJcbiAgICApO1xyXG4gIFxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgn66Gc6re47J24JykpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfsnbTrqZTsnbzsnYQg7J6F66Cl7ZW07KO87IS47JqUJykpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgn67mE67CA67KI7Zi466W8IOyeheugpe2VtOyjvOyEuOyalCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgndmFsaWRhdGVzIGludmFsaWQgZW1haWwgZm9ybWF0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5UGxhY2Vob2xkZXJUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxMb2dpblNjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgn7J2066mU7J28Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChlbWFpbElucHV0LCAnaW52YWxpZC1lbWFpbCcpO1xyXG4gICAgXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCfroZzqt7jsnbgnKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ+ycoO2aqO2VnCDsnbTrqZTsnbwg7KO87IaM66W8IOyeheugpe2VtOyjvOyEuOyalCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgndmFsaWRhdGVzIHNob3J0IHBhc3N3b3JkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5UGxhY2Vob2xkZXJUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxMb2dpblNjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgn7J2066mU7J28Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChlbWFpbElucHV0LCAndmFsaWRAZW1haWwuY29tJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IHBhc3N3b3JkSW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgn67mE67CA67KI7Zi4Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChwYXNzd29yZElucHV0LCAnMTIzNDUnKTtcclxuICAgIFxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgn66Gc6re47J24JykpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfruYTrsIDrsojtmLjripQg7LWc7IaMIDbsnpAg7J207IOB7J207Ja07JW8IO2VqeuLiOuLpCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgnc3VibWl0cyB2YWxpZCBmb3JtIGFuZCBjYWxscyBsb2dpbicsIGFzeW5jICgpID0+IHtcclxuICAgIG1vY2tMb2dpbi5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe30pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlQbGFjZWhvbGRlclRleHQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPExvZ2luU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgZW1haWxJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCfsnbTrqZTsnbwnKTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGVtYWlsSW5wdXQsICd2YWxpZEBlbWFpbC5jb20nKTtcclxuICAgIFxyXG4gICAgY29uc3QgcGFzc3dvcmRJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCfruYTrsIDrsojtmLgnKTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHBhc3N3b3JkSW5wdXQsICdwYXNzd29yZDEyMycpO1xyXG4gICAgXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCfroZzqt7jsnbgnKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChtb2NrTG9naW4pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgXHJcbiAgICAgICAgZW1haWw6ICd2YWxpZEBlbWFpbC5jb20nLCBcclxuICAgICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyBcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgnc2hvd3MgZXJyb3IgYWxlcnQgd2hlbiBsb2dpbiBmYWlscycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICfsnbjspp3sl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukJztcclxuICAgIG1vY2tMb2dpbi5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UoeyBcclxuICAgICAgcmVzcG9uc2U6IHsgZGF0YTogeyBtZXNzYWdlOiBlcnJvck1lc3NhZ2UgfSB9IFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVBsYWNlaG9sZGVyVGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8TG9naW5TY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBlbWFpbElucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ+ydtOuplOydvCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZW1haWxJbnB1dCwgJ3ZhbGlkQGVtYWlsLmNvbScpO1xyXG4gICAgXHJcbiAgICBjb25zdCBwYXNzd29yZElucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ+u5hOuwgOuyiO2YuCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQocGFzc3dvcmRJbnB1dCwgJ3Bhc3N3b3JkMTIzJyk7XHJcbiAgICBcclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ+uhnOq3uOyduCcpKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgICAn66Gc6re47J24IOyLpO2MqCcsXHJcbiAgICAgICAgZXJyb3JNZXNzYWdlXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgnbmF2aWdhdGVzIHRvIHJlZ2lzdHJhdGlvbiBzY3JlZW4nLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8TG9naW5TY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+XHJcbiAgICApO1xyXG4gIFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgn7ZqM7JuQ6rCA7J6FJykpO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja05hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdSZWdpc3RlcicpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCduYXZpZ2F0ZXMgdG8gZm9yZ290IHBhc3N3b3JkIHNjcmVlbicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxMb2dpblNjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz5cclxuICAgICk7XHJcbiAgXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXh0KCfruYTrsIDrsojtmLjrpbwg7J6K7Jy87IWo64KY7JqUPycpKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG1vY2tOYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRm9yZ290UGFzc3dvcmQnKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFrQkFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ3ZDQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQztJQUN2REMsT0FBTyxFQUFFRixJQUFJLENBQUNHLEVBQUUsQ0FBQztFQUFDO0FBQUEsQ0FDbEIsQ0FBQztBQUFDLElBQUFDLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxrQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBcEJKLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGtCQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBTSxhQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxXQUFBLEdBQUFDLHVCQUFBLENBQUFSLE9BQUE7QUFBOEQsSUFBQVMsV0FBQSxHQUFBVCxPQUFBO0FBQUEsU0FBQVUseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FB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