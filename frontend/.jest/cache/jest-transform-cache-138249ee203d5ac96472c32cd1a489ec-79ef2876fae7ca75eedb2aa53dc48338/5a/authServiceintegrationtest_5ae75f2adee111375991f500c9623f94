6713d5eebee603f9c600430a92e26f01
_getJestObj().mock('../../../src/services/api/client', function () {
  return {
    post: jest.fn(),
    get: jest.fn(),
    put: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = _interopRequireDefault(require("../../../src/services/api/authService"));
var _client = _interopRequireDefault(require("../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Auth Service Integration', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('logs in successfully', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      status: 'success',
      message: '로그인 성공',
      data: {
        token: 'test-token',
        user: {
          user_id: 1,
          username: 'testuser',
          email: 'test@example.com'
        }
      }
    };
    _client.default.post.mockResolvedValue({
      data: mockResponse
    });
    var loginData = {
      email: 'test@example.com',
      password: 'password123'
    };
    var response = yield _authService.default.login(loginData);
    expect(response.data).toEqual(mockResponse);
    expect(_client.default.post).toHaveBeenCalledWith('/auth/login', loginData);
  }));
  it('registers a new user', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      status: 'success',
      message: '회원가입 성공',
      data: {
        token: 'new-token',
        user: {
          user_id: 2,
          username: 'newuser',
          email: 'new@example.com'
        }
      }
    };
    _client.default.post.mockResolvedValue({
      data: mockResponse,
      status: 201
    });
    var registerData = {
      username: 'newuser',
      email: 'new@example.com',
      password: 'password123'
    };
    var response = yield _authService.default.register(registerData);
    expect(response.data).toEqual(mockResponse);
    expect(response.status).toBe(201);
    expect(_client.default.post).toHaveBeenCalledWith('/auth/register', registerData);
  }));
  it('handles login failure', (0, _asyncToGenerator2.default)(function* () {
    var errorResponse = {
      status: 'error',
      message: '잘못된 인증 정보입니다.'
    };
    var mockError = new Error('Auth Error');
    mockError.response = {
      data: errorResponse,
      status: 401,
      statusText: 'Unauthorized',
      headers: {},
      config: {}
    };
    _client.default.post.mockRejectedValue(mockError);
    var loginData = {
      email: 'wrong@example.com',
      password: 'wrongpassword'
    };
    try {
      yield _authService.default.login(loginData);
      fail('로그인 실패 테스트에서 예외가 발생하지 않았습니다.');
    } catch (error) {
      var _axiosError$response, _axiosError$response2;
      var axiosError = error;
      expect((_axiosError$response = axiosError.response) == null ? void 0 : _axiosError$response.status).toBe(401);
      expect((_axiosError$response2 = axiosError.response) == null ? void 0 : _axiosError$response2.data).toEqual(errorResponse);
    }
    expect(_client.default.post).toHaveBeenCalledWith('/auth/login', loginData);
  }));
  it('refreshes token', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      status: 'success',
      message: '토큰 갱신 성공',
      data: {
        token: 'new-token'
      }
    };
    _client.default.post.mockResolvedValue({
      data: mockResponse
    });
    var oldToken = 'old-token';
    var response = yield _authService.default.refreshToken(oldToken);
    expect(response.data).toEqual(mockResponse);
    expect(_client.default.post).toHaveBeenCalledWith('/auth/refresh', {
      token: oldToken
    });
  }));
  it('logs out user', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      status: 'success',
      message: '로그아웃 되었습니다.'
    };
    _client.default.post.mockResolvedValue({
      data: mockResponse
    });
    var response = yield _authService.default.logout();
    expect(response.data.message).toBe('로그아웃 되었습니다.');
    expect(_client.default.post).toHaveBeenCalledWith('/auth/logout');
  }));
  it('gets user profile', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      status: 'success',
      data: {
        user_id: 1,
        username: 'testuser',
        email: 'test@example.com',
        nickname: '테스트유저'
      }
    };
    _client.default.get.mockResolvedValue({
      data: mockResponse
    });
    var response = yield _authService.default.getProfile();
    expect(response.data).toEqual(mockResponse);
    expect(_client.default.get).toHaveBeenCalledWith('/users/profile');
  }));
  it('updates user profile', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      status: 'success',
      message: '프로필이 업데이트되었습니다.',
      data: {
        user_id: 1,
        username: 'testuser',
        email: 'test@example.com',
        nickname: '새닉네임'
      }
    };
    _client.default.put.mockResolvedValue({
      data: mockResponse
    });
    var profileData = {
      nickname: '새닉네임'
    };
    var response = yield _authService.default.updateProfile(profileData);
    expect(response.data).toEqual(mockResponse);
    expect(_client.default.put).toHaveBeenCalledWith('/users/profile', profileData);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJwb3N0IiwiamVzdCIsImZuIiwiZ2V0IiwicHV0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfYXV0aFNlcnZpY2UiLCJfY2xpZW50IiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJkZWZhdWx0IiwibW9ja1Jlc3BvbnNlIiwic3RhdHVzIiwibWVzc2FnZSIsImRhdGEiLCJ0b2tlbiIsInVzZXIiLCJ1c2VyX2lkIiwidXNlcm5hbWUiLCJlbWFpbCIsImFwaUNsaWVudCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwibG9naW5EYXRhIiwicGFzc3dvcmQiLCJyZXNwb25zZSIsImF1dGhTZXJ2aWNlIiwibG9naW4iLCJleHBlY3QiLCJ0b0VxdWFsIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJyZWdpc3RlckRhdGEiLCJyZWdpc3RlciIsInRvQmUiLCJlcnJvclJlc3BvbnNlIiwibW9ja0Vycm9yIiwiRXJyb3IiLCJzdGF0dXNUZXh0IiwiaGVhZGVycyIsImNvbmZpZyIsIm1vY2tSZWplY3RlZFZhbHVlIiwiZmFpbCIsImVycm9yIiwiX2F4aW9zRXJyb3IkcmVzcG9uc2UiLCJfYXhpb3NFcnJvciRyZXNwb25zZTIiLCJheGlvc0Vycm9yIiwib2xkVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJsb2dvdXQiLCJuaWNrbmFtZSIsImdldFByb2ZpbGUiLCJwcm9maWxlRGF0YSIsInVwZGF0ZVByb2ZpbGUiXSwic291cmNlcyI6WyJhdXRoU2VydmljZS5pbnRlZ3JhdGlvbi50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9pbnRlZ3JhdGlvbi9zZXJ2aWNlcy9hdXRoU2VydmljZS5pbnRlZ3JhdGlvbi50ZXN0LnRzXHJcbmltcG9ydCBhdXRoU2VydmljZSBmcm9tICcuLi8uLi8uLi9zcmMvc2VydmljZXMvYXBpL2F1dGhTZXJ2aWNlJztcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IE1vY2tBZGFwdGVyIGZyb20gJ2F4aW9zLW1vY2stYWRhcHRlcic7XHJcbmltcG9ydCB7IEF4aW9zRXJyb3IgfSBmcm9tICdheGlvcyc7XHJcblxyXG4vLyBhcGlDbGllbnQg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9jbGllbnQnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHBvc3Q6IGplc3QuZm4oKSxcclxuICAgIGdldDogamVzdC5mbigpLFxyXG4gICAgcHV0OiBqZXN0LmZuKClcclxuICB9O1xyXG59KTtcclxuXHJcbi8vIOyLpOygnCBhcGlDbGllbnQg6rCA7KC47Jik6riwXHJcbmltcG9ydCBhcGlDbGllbnQgZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9jbGllbnQnO1xyXG5cclxuZGVzY3JpYmUoJ0F1dGggU2VydmljZSBJbnRlZ3JhdGlvbicsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdsb2dzIGluIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcclxuICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXHJcbiAgICAgIG1lc3NhZ2U6ICfroZzqt7jsnbgg7ISx6rO1JyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRva2VuOiAndGVzdC10b2tlbicsXHJcbiAgICAgICAgdXNlcjoge1xyXG4gICAgICAgICAgdXNlcl9pZDogMSxcclxuICAgICAgICAgIHVzZXJuYW1lOiAndGVzdHVzZXInLFxyXG4gICAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gYXBpQ2xpZW50LnBvc3Qg66qo7YK5XHJcbiAgICAoYXBpQ2xpZW50LnBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZXNwb25zZSB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgbG9naW5EYXRhID0ge1xyXG4gICAgICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG4gICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJ1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoU2VydmljZS5sb2dpbihsb2dpbkRhdGEpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YSkudG9FcXVhbChtb2NrUmVzcG9uc2UpO1xyXG4gICAgZXhwZWN0KGFwaUNsaWVudC5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2F1dGgvbG9naW4nLCBsb2dpbkRhdGEpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdyZWdpc3RlcnMgYSBuZXcgdXNlcicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcclxuICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXHJcbiAgICAgIG1lc3NhZ2U6ICftmozsm5DqsIDsnoUg7ISx6rO1JyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRva2VuOiAnbmV3LXRva2VuJyxcclxuICAgICAgICB1c2VyOiB7XHJcbiAgICAgICAgICB1c2VyX2lkOiAyLFxyXG4gICAgICAgICAgdXNlcm5hbWU6ICduZXd1c2VyJyxcclxuICAgICAgICAgIGVtYWlsOiAnbmV3QGV4YW1wbGUuY29tJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gYXBpQ2xpZW50LnBvc3Qg66qo7YK5XHJcbiAgICAoYXBpQ2xpZW50LnBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IFxyXG4gICAgICBkYXRhOiBtb2NrUmVzcG9uc2UsIFxyXG4gICAgICBzdGF0dXM6IDIwMSBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCByZWdpc3RlckRhdGEgPSB7XHJcbiAgICAgIHVzZXJuYW1lOiAnbmV3dXNlcicsXHJcbiAgICAgIGVtYWlsOiAnbmV3QGV4YW1wbGUuY29tJyxcclxuICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMydcclxuICAgIH07XHJcbiAgICBcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aFNlcnZpY2UucmVnaXN0ZXIocmVnaXN0ZXJEYXRhKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHJlc3BvbnNlLmRhdGEpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKTtcclxuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAxKTtcclxuICAgIGV4cGVjdChhcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL3JlZ2lzdGVyJywgcmVnaXN0ZXJEYXRhKTtcclxuICB9KTtcclxuICBcclxuICBpdCgnaGFuZGxlcyBsb2dpbiBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IHtcclxuICAgICAgc3RhdHVzOiAnZXJyb3InLFxyXG4gICAgICBtZXNzYWdlOiAn7J6Y66q765CcIOyduOymnSDsoJXrs7TsnoXri4jri6QuJ1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8g7JeQ65+sIOydkeuLtSDrqqjtgrlcclxuICAgIGNvbnN0IG1vY2tFcnJvciA9IG5ldyBFcnJvcignQXV0aCBFcnJvcicpIGFzIEF4aW9zRXJyb3I7XHJcbiAgICBtb2NrRXJyb3IucmVzcG9uc2UgPSB7XHJcbiAgICAgIGRhdGE6IGVycm9yUmVzcG9uc2UsXHJcbiAgICAgIHN0YXR1czogNDAxLFxyXG4gICAgICBzdGF0dXNUZXh0OiAnVW5hdXRob3JpemVkJyxcclxuICAgICAgaGVhZGVyczoge30sXHJcbiAgICAgIGNvbmZpZzoge30gYXMgYW55XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAoYXBpQ2xpZW50LnBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZShtb2NrRXJyb3IpO1xyXG4gICAgXHJcbiAgICBjb25zdCBsb2dpbkRhdGEgPSB7XHJcbiAgICAgIGVtYWlsOiAnd3JvbmdAZXhhbXBsZS5jb20nLFxyXG4gICAgICBwYXNzd29yZDogJ3dyb25ncGFzc3dvcmQnXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCBhdXRoU2VydmljZS5sb2dpbihsb2dpbkRhdGEpO1xyXG4gICAgICAvLyDsmKTrpZjqsIAg67Cc7IOd7ZWY7KeAIOyViuycvOuptCDthYzsiqTtirgg7Iuk7YyoXHJcbiAgICAgIGZhaWwoJ+uhnOq3uOyduCDsi6TtjKgg7YWM7Iqk7Yq47JeQ7IScIOyYiOyZuOqwgCDrsJzsg53tlZjsp4Ag7JWK7JWY7Iq164uI64ukLicpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc3QgYXhpb3NFcnJvciA9IGVycm9yIGFzIEF4aW9zRXJyb3I7XHJcbiAgICAgIGV4cGVjdChheGlvc0Vycm9yLnJlc3BvbnNlPy5zdGF0dXMpLnRvQmUoNDAxKTtcclxuICAgICAgZXhwZWN0KGF4aW9zRXJyb3IucmVzcG9uc2U/LmRhdGEpLnRvRXF1YWwoZXJyb3JSZXNwb25zZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGV4cGVjdChhcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL2xvZ2luJywgbG9naW5EYXRhKTtcclxuICB9KTtcclxuICBcclxuICBpdCgncmVmcmVzaGVzIHRva2VuJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xyXG4gICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcclxuICAgICAgbWVzc2FnZTogJ+2GoO2BsCDqsLHsi6Ag7ISx6rO1JyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRva2VuOiAnbmV3LXRva2VuJ1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAoYXBpQ2xpZW50LnBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZXNwb25zZSB9KTtcclxuICAgIFxyXG4gICAgY29uc3Qgb2xkVG9rZW4gPSAnb2xkLXRva2VuJztcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aFNlcnZpY2UucmVmcmVzaFRva2VuKG9sZFRva2VuKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHJlc3BvbnNlLmRhdGEpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKTtcclxuICAgIGV4cGVjdChhcGlDbGllbnQucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL3JlZnJlc2gnLCB7IHRva2VuOiBvbGRUb2tlbiB9KTtcclxuICB9KTtcclxuICBcclxuICBpdCgnbG9ncyBvdXQgdXNlcicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcclxuICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXHJcbiAgICAgIG1lc3NhZ2U6ICfroZzqt7jslYTsm4Mg65CY7JeI7Iq164uI64ukLidcclxuICAgIH07XHJcbiAgICBcclxuICAgIChhcGlDbGllbnQucG9zdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogbW9ja1Jlc3BvbnNlIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF1dGhTZXJ2aWNlLmxvZ291dCgpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YS5tZXNzYWdlKS50b0JlKCfroZzqt7jslYTsm4Mg65CY7JeI7Iq164uI64ukLicpO1xyXG4gICAgZXhwZWN0KGFwaUNsaWVudC5wb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2F1dGgvbG9nb3V0Jyk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2dldHMgdXNlciBwcm9maWxlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xyXG4gICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHVzZXJfaWQ6IDEsXHJcbiAgICAgICAgdXNlcm5hbWU6ICd0ZXN0dXNlcicsXHJcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgICAgICBuaWNrbmFtZTogJ+2FjOyKpO2KuOycoOyggCdcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgKGFwaUNsaWVudC5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZXNwb25zZSB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoU2VydmljZS5nZXRQcm9maWxlKCk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZXNwb25zZS5kYXRhKS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XHJcbiAgICBleHBlY3QoYXBpQ2xpZW50LmdldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy91c2Vycy9wcm9maWxlJyk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3VwZGF0ZXMgdXNlciBwcm9maWxlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xyXG4gICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcclxuICAgICAgbWVzc2FnZTogJ+2UhOuhnO2VhOydtCDsl4XrjbDsnbTtirjrkJjsl4jsirXri4jri6QuJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHVzZXJfaWQ6IDEsXHJcbiAgICAgICAgdXNlcm5hbWU6ICd0ZXN0dXNlcicsXHJcbiAgICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcclxuICAgICAgICBuaWNrbmFtZTogJ+yDiOuLieuEpOyehCdcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgKGFwaUNsaWVudC5wdXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IG1vY2tSZXNwb25zZSB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgcHJvZmlsZURhdGEgPSB7XHJcbiAgICAgIG5pY2tuYW1lOiAn7IOI64uJ64Sk7J6EJ1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhdXRoU2VydmljZS51cGRhdGVQcm9maWxlKHByb2ZpbGVEYXRhKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHJlc3BvbnNlLmRhdGEpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKTtcclxuICAgIGV4cGVjdChhcGlDbGllbnQucHV0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL3VzZXJzL3Byb2ZpbGUnLCBwcm9maWxlRGF0YSk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLFlBQU07RUFDbEQsT0FBTztJQUNMQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDZkMsR0FBRyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2RFLEdBQUcsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDZixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUcsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGtCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFaSCxJQUFBRSxZQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFlQSxJQUFBRyxPQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBeUQsU0FBQVIsWUFBQTtFQUFBLElBQUFZLFFBQUEsR0FBQUosT0FBQTtJQUFBTCxJQUFBLEdBQUFTLFFBQUEsQ0FBQVQsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFFekRVLFFBQVEs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