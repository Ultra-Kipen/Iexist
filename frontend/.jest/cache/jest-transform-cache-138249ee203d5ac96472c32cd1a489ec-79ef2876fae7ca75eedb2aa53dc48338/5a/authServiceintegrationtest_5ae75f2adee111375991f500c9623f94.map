{"version":3,"names":["_getJestObj","mock","post","jest","fn","get","put","_interopRequireDefault","require","_asyncToGenerator2","_authService","_client","_require","describe","beforeEach","clearAllMocks","it","default","mockResponse","status","message","data","token","user","user_id","username","email","apiClient","mockResolvedValue","loginData","password","response","authService","login","expect","toEqual","toHaveBeenCalledWith","registerData","register","toBe","errorResponse","mockError","Error","statusText","headers","config","mockRejectedValue","fail","error","_axiosError$response","_axiosError$response2","axiosError","oldToken","refreshToken","logout","nickname","getProfile","profileData","updateProfile"],"sources":["authService.integration.test.ts"],"sourcesContent":["// __tests__/integration/services/authService.integration.test.ts\r\nimport authService from '../../../src/services/api/authService';\r\nimport axios from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\nimport { AxiosError } from 'axios';\r\n\r\n// apiClient 모킹\r\njest.mock('../../../src/services/api/client', () => {\r\n  return {\r\n    post: jest.fn(),\r\n    get: jest.fn(),\r\n    put: jest.fn()\r\n  };\r\n});\r\n\r\n// 실제 apiClient 가져오기\r\nimport apiClient from '../../../src/services/api/client';\r\n\r\ndescribe('Auth Service Integration', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n  \r\n  it('logs in successfully', async () => {\r\n    const mockResponse = {\r\n      status: 'success',\r\n      message: '로그인 성공',\r\n      data: {\r\n        token: 'test-token',\r\n        user: {\r\n          user_id: 1,\r\n          username: 'testuser',\r\n          email: 'test@example.com'\r\n        }\r\n      }\r\n    };\r\n    \r\n    // apiClient.post 모킹\r\n    (apiClient.post as jest.Mock).mockResolvedValue({ data: mockResponse });\r\n    \r\n    const loginData = {\r\n      email: 'test@example.com',\r\n      password: 'password123'\r\n    };\r\n    \r\n    const response = await authService.login(loginData);\r\n    \r\n    expect(response.data).toEqual(mockResponse);\r\n    expect(apiClient.post).toHaveBeenCalledWith('/auth/login', loginData);\r\n  });\r\n  \r\n  it('registers a new user', async () => {\r\n    const mockResponse = {\r\n      status: 'success',\r\n      message: '회원가입 성공',\r\n      data: {\r\n        token: 'new-token',\r\n        user: {\r\n          user_id: 2,\r\n          username: 'newuser',\r\n          email: 'new@example.com'\r\n        }\r\n      }\r\n    };\r\n    \r\n    // apiClient.post 모킹\r\n    (apiClient.post as jest.Mock).mockResolvedValue({ \r\n      data: mockResponse, \r\n      status: 201 \r\n    });\r\n    \r\n    const registerData = {\r\n      username: 'newuser',\r\n      email: 'new@example.com',\r\n      password: 'password123'\r\n    };\r\n    \r\n    const response = await authService.register(registerData);\r\n    \r\n    expect(response.data).toEqual(mockResponse);\r\n    expect(response.status).toBe(201);\r\n    expect(apiClient.post).toHaveBeenCalledWith('/auth/register', registerData);\r\n  });\r\n  \r\n  it('handles login failure', async () => {\r\n    const errorResponse = {\r\n      status: 'error',\r\n      message: '잘못된 인증 정보입니다.'\r\n    };\r\n    \r\n    // 에러 응답 모킹\r\n    const mockError = new Error('Auth Error') as AxiosError;\r\n    mockError.response = {\r\n      data: errorResponse,\r\n      status: 401,\r\n      statusText: 'Unauthorized',\r\n      headers: {},\r\n      config: {} as any\r\n    };\r\n    \r\n    (apiClient.post as jest.Mock).mockRejectedValue(mockError);\r\n    \r\n    const loginData = {\r\n      email: 'wrong@example.com',\r\n      password: 'wrongpassword'\r\n    };\r\n    \r\n    try {\r\n      await authService.login(loginData);\r\n      // 오류가 발생하지 않으면 테스트 실패\r\n      fail('로그인 실패 테스트에서 예외가 발생하지 않았습니다.');\r\n    } catch (error) {\r\n      const axiosError = error as AxiosError;\r\n      expect(axiosError.response?.status).toBe(401);\r\n      expect(axiosError.response?.data).toEqual(errorResponse);\r\n    }\r\n    \r\n    expect(apiClient.post).toHaveBeenCalledWith('/auth/login', loginData);\r\n  });\r\n  \r\n  it('refreshes token', async () => {\r\n    const mockResponse = {\r\n      status: 'success',\r\n      message: '토큰 갱신 성공',\r\n      data: {\r\n        token: 'new-token'\r\n      }\r\n    };\r\n    \r\n    (apiClient.post as jest.Mock).mockResolvedValue({ data: mockResponse });\r\n    \r\n    const oldToken = 'old-token';\r\n    const response = await authService.refreshToken(oldToken);\r\n    \r\n    expect(response.data).toEqual(mockResponse);\r\n    expect(apiClient.post).toHaveBeenCalledWith('/auth/refresh', { token: oldToken });\r\n  });\r\n  \r\n  it('logs out user', async () => {\r\n    const mockResponse = {\r\n      status: 'success',\r\n      message: '로그아웃 되었습니다.'\r\n    };\r\n    \r\n    (apiClient.post as jest.Mock).mockResolvedValue({ data: mockResponse });\r\n    \r\n    const response = await authService.logout();\r\n    \r\n    expect(response.data.message).toBe('로그아웃 되었습니다.');\r\n    expect(apiClient.post).toHaveBeenCalledWith('/auth/logout');\r\n  });\r\n  \r\n  it('gets user profile', async () => {\r\n    const mockResponse = {\r\n      status: 'success',\r\n      data: {\r\n        user_id: 1,\r\n        username: 'testuser',\r\n        email: 'test@example.com',\r\n        nickname: '테스트유저'\r\n      }\r\n    };\r\n    \r\n    (apiClient.get as jest.Mock).mockResolvedValue({ data: mockResponse });\r\n    \r\n    const response = await authService.getProfile();\r\n    \r\n    expect(response.data).toEqual(mockResponse);\r\n    expect(apiClient.get).toHaveBeenCalledWith('/users/profile');\r\n  });\r\n  \r\n  it('updates user profile', async () => {\r\n    const mockResponse = {\r\n      status: 'success',\r\n      message: '프로필이 업데이트되었습니다.',\r\n      data: {\r\n        user_id: 1,\r\n        username: 'testuser',\r\n        email: 'test@example.com',\r\n        nickname: '새닉네임'\r\n      }\r\n    };\r\n    \r\n    (apiClient.put as jest.Mock).mockResolvedValue({ data: mockResponse });\r\n    \r\n    const profileData = {\r\n      nickname: '새닉네임'\r\n    };\r\n    \r\n    const response = await authService.updateProfile(profileData);\r\n    \r\n    expect(response.data).toEqual(mockResponse);\r\n    expect(apiClient.put).toHaveBeenCalledWith('/users/profile', profileData);\r\n  });\r\n});"],"mappings":"AAOAA,WAAA,GAAKC,IAAI,CAAC,kCAAkC,EAAE,YAAM;EAClD,OAAO;IACLC,IAAI,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IACfC,GAAG,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC;IACdE,GAAG,EAAEH,IAAI,CAACC,EAAE,CAAC;EACf,CAAC;AACH,CAAC,CAAC;AAAC,IAAAG,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAZH,IAAAE,YAAA,GAAAH,sBAAA,CAAAC,OAAA;AAeA,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAAyD,SAAAR,YAAA;EAAA,IAAAY,QAAA,GAAAJ,OAAA;IAAAL,IAAA,GAAAS,QAAA,CAAAT,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEzDU,QAAQ,CAAC,0BAA0B,EAAE,YAAM;EACzCC,UAAU,CAAC,YAAM;IACfX,IAAI,CAACY,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,sBAAsB,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IACrC,IAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE,QAAQ;MACjBC,IAAI,EAAE;QACJC,KAAK,EAAE,YAAY;QACnBC,IAAI,EAAE;UACJC,OAAO,EAAE,CAAC;UACVC,QAAQ,EAAE,UAAU;UACpBC,KAAK,EAAE;QACT;MACF;IACF,CAAC;IAGAC,eAAS,CAACzB,IAAI,CAAe0B,iBAAiB,CAAC;MAAEP,IAAI,EAAEH;IAAa,CAAC,CAAC;IAEvE,IAAMW,SAAS,GAAG;MAChBH,KAAK,EAAE,kBAAkB;MACzBI,QAAQ,EAAE;IACZ,CAAC;IAED,IAAMC,QAAQ,SAASC,oBAAW,CAACC,KAAK,CAACJ,SAAS,CAAC;IAEnDK,MAAM,CAACH,QAAQ,CAACV,IAAI,CAAC,CAACc,OAAO,CAACjB,YAAY,CAAC;IAC3CgB,MAAM,CAACP,eAAS,CAACzB,IAAI,CAAC,CAACkC,oBAAoB,CAAC,aAAa,EAAEP,SAAS,CAAC;EACvE,CAAC,EAAC;EAEFb,EAAE,CAAC,sBAAsB,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IACrC,IAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE,SAAS;MAClBC,IAAI,EAAE;QACJC,KAAK,EAAE,WAAW;QAClBC,IAAI,EAAE;UACJC,OAAO,EAAE,CAAC;UACVC,QAAQ,EAAE,SAAS;UACnBC,KAAK,EAAE;QACT;MACF;IACF,CAAC;IAGAC,eAAS,CAACzB,IAAI,CAAe0B,iBAAiB,CAAC;MAC9CP,IAAI,EAAEH,YAAY;MAClBC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAMkB,YAAY,GAAG;MACnBZ,QAAQ,EAAE,SAAS;MACnBC,KAAK,EAAE,iBAAiB;MACxBI,QAAQ,EAAE;IACZ,CAAC;IAED,IAAMC,QAAQ,SAASC,oBAAW,CAACM,QAAQ,CAACD,YAAY,CAAC;IAEzDH,MAAM,CAACH,QAAQ,CAACV,IAAI,CAAC,CAACc,OAAO,CAACjB,YAAY,CAAC;IAC3CgB,MAAM,CAACH,QAAQ,CAACZ,MAAM,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;IACjCL,MAAM,CAACP,eAAS,CAACzB,IAAI,CAAC,CAACkC,oBAAoB,CAAC,gBAAgB,EAAEC,YAAY,CAAC;EAC7E,CAAC,EAAC;EAEFrB,EAAE,CAAC,uBAAuB,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IACtC,IAAMuB,aAAa,GAAG;MACpBrB,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;IAGD,IAAMqB,SAAS,GAAG,IAAIC,KAAK,CAAC,YAAY,CAAe;IACvDD,SAAS,CAACV,QAAQ,GAAG;MACnBV,IAAI,EAAEmB,aAAa;MACnBrB,MAAM,EAAE,GAAG;MACXwB,UAAU,EAAE,cAAc;MAC1BC,OAAO,EAAE,CAAC,CAAC;MACXC,MAAM,EAAE,CAAC;IACX,CAAC;IAEAlB,eAAS,CAACzB,IAAI,CAAe4C,iBAAiB,CAACL,SAAS,CAAC;IAE1D,IAAMZ,SAAS,GAAG;MAChBH,KAAK,EAAE,mBAAmB;MAC1BI,QAAQ,EAAE;IACZ,CAAC;IAED,IAAI;MACF,MAAME,oBAAW,CAACC,KAAK,CAACJ,SAAS,CAAC;MAElCkB,IAAI,CAAC,8BAA8B,CAAC;IACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,oBAAA,EAAAC,qBAAA;MACd,IAAMC,UAAU,GAAGH,KAAmB;MACtCd,MAAM,EAAAe,oBAAA,GAACE,UAAU,CAACpB,QAAQ,qBAAnBkB,oBAAA,CAAqB9B,MAAM,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;MAC7CL,MAAM,EAAAgB,qBAAA,GAACC,UAAU,CAACpB,QAAQ,qBAAnBmB,qBAAA,CAAqB7B,IAAI,CAAC,CAACc,OAAO,CAACK,aAAa,CAAC;IAC1D;IAEAN,MAAM,CAACP,eAAS,CAACzB,IAAI,CAAC,CAACkC,oBAAoB,CAAC,aAAa,EAAEP,SAAS,CAAC;EACvE,CAAC,EAAC;EAEFb,EAAE,CAAC,iBAAiB,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IAChC,IAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE,UAAU;MACnBC,IAAI,EAAE;QACJC,KAAK,EAAE;MACT;IACF,CAAC;IAEAK,eAAS,CAACzB,IAAI,CAAe0B,iBAAiB,CAAC;MAAEP,IAAI,EAAEH;IAAa,CAAC,CAAC;IAEvE,IAAMkC,QAAQ,GAAG,WAAW;IAC5B,IAAMrB,QAAQ,SAASC,oBAAW,CAACqB,YAAY,CAACD,QAAQ,CAAC;IAEzDlB,MAAM,CAACH,QAAQ,CAACV,IAAI,CAAC,CAACc,OAAO,CAACjB,YAAY,CAAC;IAC3CgB,MAAM,CAACP,eAAS,CAACzB,IAAI,CAAC,CAACkC,oBAAoB,CAAC,eAAe,EAAE;MAAEd,KAAK,EAAE8B;IAAS,CAAC,CAAC;EACnF,CAAC,EAAC;EAEFpC,EAAE,CAAC,eAAe,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IAC9B,IAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE;IACX,CAAC;IAEAO,eAAS,CAACzB,IAAI,CAAe0B,iBAAiB,CAAC;MAAEP,IAAI,EAAEH;IAAa,CAAC,CAAC;IAEvE,IAAMa,QAAQ,SAASC,oBAAW,CAACsB,MAAM,CAAC,CAAC;IAE3CpB,MAAM,CAACH,QAAQ,CAACV,IAAI,CAACD,OAAO,CAAC,CAACmB,IAAI,CAAC,aAAa,CAAC;IACjDL,MAAM,CAACP,eAAS,CAACzB,IAAI,CAAC,CAACkC,oBAAoB,CAAC,cAAc,CAAC;EAC7D,CAAC,EAAC;EAEFpB,EAAE,CAAC,mBAAmB,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IAClC,IAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,SAAS;MACjBE,IAAI,EAAE;QACJG,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,UAAU;QACpBC,KAAK,EAAE,kBAAkB;QACzB6B,QAAQ,EAAE;MACZ;IACF,CAAC;IAEA5B,eAAS,CAACtB,GAAG,CAAeuB,iBAAiB,CAAC;MAAEP,IAAI,EAAEH;IAAa,CAAC,CAAC;IAEtE,IAAMa,QAAQ,SAASC,oBAAW,CAACwB,UAAU,CAAC,CAAC;IAE/CtB,MAAM,CAACH,QAAQ,CAACV,IAAI,CAAC,CAACc,OAAO,CAACjB,YAAY,CAAC;IAC3CgB,MAAM,CAACP,eAAS,CAACtB,GAAG,CAAC,CAAC+B,oBAAoB,CAAC,gBAAgB,CAAC;EAC9D,CAAC,EAAC;EAEFpB,EAAE,CAAC,sBAAsB,MAAAP,kBAAA,CAAAQ,OAAA,EAAE,aAAY;IACrC,IAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE,SAAS;MACjBC,OAAO,EAAE,iBAAiB;MAC1BC,IAAI,EAAE;QACJG,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,UAAU;QACpBC,KAAK,EAAE,kBAAkB;QACzB6B,QAAQ,EAAE;MACZ;IACF,CAAC;IAEA5B,eAAS,CAACrB,GAAG,CAAesB,iBAAiB,CAAC;MAAEP,IAAI,EAAEH;IAAa,CAAC,CAAC;IAEtE,IAAMuC,WAAW,GAAG;MAClBF,QAAQ,EAAE;IACZ,CAAC;IAED,IAAMxB,QAAQ,SAASC,oBAAW,CAAC0B,aAAa,CAACD,WAAW,CAAC;IAE7DvB,MAAM,CAACH,QAAQ,CAACV,IAAI,CAAC,CAACc,OAAO,CAACjB,YAAY,CAAC;IAC3CgB,MAAM,CAACP,eAAS,CAACrB,GAAG,CAAC,CAAC8B,oBAAoB,CAAC,gBAAgB,EAAEqB,WAAW,CAAC;EAC3E,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}