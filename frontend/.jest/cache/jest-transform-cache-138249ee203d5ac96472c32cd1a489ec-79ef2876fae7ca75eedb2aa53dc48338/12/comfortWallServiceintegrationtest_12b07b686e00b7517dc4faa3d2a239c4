6060bf9cc6756f0c7405057224e4319e
_getJestObj().mock('../../../src/services/api/client', function () {
  return {
    post: jest.fn(),
    get: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _comfortWallService = _interopRequireDefault(require("../../../src/services/api/comfortWallService"));
var _client = _interopRequireDefault(require("../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ComfortWall Service Integration Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('createPost', function () {
    it('should successfully create a post', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 201,
        data: {
          id: 1,
          title: '테스트 제목',
          content: '테스트 내용',
          created_at: '2025-04-09T10:00:00Z'
        }
      };
      _client.default.post.mockResolvedValue(mockResponse);
      var postData = {
        title: '테스트 제목',
        content: '테스트 내용',
        is_anonymous: true
      };
      var result = yield _comfortWallService.default.createPost(postData);
      expect(_client.default.post).toHaveBeenCalledWith('/comfort-wall', postData);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when creating a post', (0, _asyncToGenerator2.default)(function* () {
      var mockError = {
        response: {
          status: 400,
          data: {
            error: '유효성 검증 실패',
            message: '제목과 내용은 필수입니다.'
          }
        }
      };
      _client.default.post.mockRejectedValue(mockError);
      yield expect(_comfortWallService.default.createPost({
        title: '',
        content: ''
      })).rejects.toEqual(mockError);
    }));
  });
  describe('getPosts', function () {
    it('should get posts with default parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 200,
        data: {
          posts: [{
            id: 1,
            title: '첫 번째 글',
            content: '내용 1'
          }, {
            id: 2,
            title: '두 번째 글',
            content: '내용 2'
          }],
          pagination: {
            total: 2,
            page: 1,
            limit: 10
          }
        }
      };
      _client.default.get.mockResolvedValue(mockResponse);
      var result = yield _comfortWallService.default.getPosts();
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall', {
        params: undefined
      });
      expect(result).toEqual(mockResponse);
    }));
    it('should get posts with custom parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 200,
        data: {
          posts: [{
            id: 3,
            title: '인기 글',
            content: '내용 3'
          }],
          pagination: {
            total: 1,
            page: 1,
            limit: 10
          }
        }
      };
      _client.default.get.mockResolvedValue(mockResponse);
      var params = {
        page: 1,
        limit: 10,
        sort_by: 'popular',
        tag: '불안'
      };
      var result = yield _comfortWallService.default.getPosts(params);
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall', {
        params: params
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('getBestPosts', function () {
    it('should get best posts with specific period', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 200,
        data: {
          posts: [{
            id: 5,
            title: '주간 인기글',
            content: '내용 5',
            like_count: 50
          }]
        }
      };
      _client.default.get.mockResolvedValue(mockResponse);
      var params = {
        period: 'weekly'
      };
      var result = yield _comfortWallService.default.getBestPosts(params);
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall/best', {
        params: params
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('sendMessage', function () {
    it('should send a message to a post', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        status: 201,
        data: {
          id: 1,
          post_id: 5,
          message: '응원 메시지',
          created_at: '2025-04-09T11:00:00Z'
        }
      };
      _client.default.post.mockResolvedValue(mockResponse);
      var postId = 5;
      var messageData = {
        message: '응원 메시지',
        is_anonymous: true
      };
      var result = yield _comfortWallService.default.sendMessage(postId, messageData);
      expect(_client.default.post).toHaveBeenCalledWith(`/comfort-wall/${postId}/message`, messageData);
      expect(result).toEqual(mockResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,