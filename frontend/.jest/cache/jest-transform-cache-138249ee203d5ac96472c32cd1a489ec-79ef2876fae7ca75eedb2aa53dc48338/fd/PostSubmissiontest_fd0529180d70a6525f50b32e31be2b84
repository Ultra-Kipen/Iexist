31396b095226be0bccd66061077c2001
_getJestObj().mock('../../src/screens/HomeScreen', function () {
  return {
    __esModule: true,
    default: MockHomeScreen
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        surface: '#fff',
        background: '#fff'
      }
    })
  };
});
_getJestObj().mock('../../src/contexts/AuthContext', function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser'
      },
      isAuthenticated: true
    })
  };
});
_getJestObj().mock('../../src/contexts/EmotionContext', function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복'
      }],
      logEmotion: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function MockHomeScreen() {
  var _React$useState = _react.default.useState(''),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    content = _React$useState2[0],
    setContent = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    emotionSelected = _React$useState4[0],
    setEmotionSelected = _React$useState4[1];
  var _React$useState5 = _react.default.useState(false),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    isDialogVisible = _React$useState6[0],
    setIsDialogVisible = _React$useState6[1];
  var handlePost = function handlePost() {
    if (content && emotionSelected) {
      setIsDialogVisible(true);
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "home-screen-container",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: "post-content-input",
      value: content,
      onChangeText: setContent
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "emotion-chip-\uD589\uBCF5",
      onPress: function onPress() {
        return setEmotionSelected(true);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uD589\uBCF5"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "share-post-button",
      onPress: handlePost,
      disabled: !content || !emotionSelected,
      accessibilityState: {
        disabled: !content || !emotionSelected
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uB098\uC758 \uD558\uB8E8 \uACF5\uC720\uD558\uAE30"
      })
    }), isDialogVisible && (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "success-dialog",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uAC8C\uC2DC \uC644\uB8CC"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uB2F9\uC2E0\uC758 \uD558\uB8E8\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uACF5\uC720\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
      })]
    })]
  });
}
describe('HomeScreen Post Submission', function () {
  it('disables submit button when content is empty', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render.getByTestId;
    var shareButton = getByTestId('share-post-button');
    expect(shareButton.props.accessibilityState.disabled).toBeTruthy();
  });
  it('shows success dialog after post submission', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    var contentInput = getByTestId('post-content-input');
    var emotionChip = getByTestId('emotion-chip-행복');
    var shareButton = getByTestId('share-post-button');
    _reactNative.fireEvent.changeText(contentInput, '오늘의 기분');
    _reactNative.fireEvent.press(emotionChip);
    _reactNative.fireEvent.press(shareButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('success-dialog')).toBeTruthy();
      expect(getByText('당신의 하루가 성공적으로 공유되었습니다.')).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,