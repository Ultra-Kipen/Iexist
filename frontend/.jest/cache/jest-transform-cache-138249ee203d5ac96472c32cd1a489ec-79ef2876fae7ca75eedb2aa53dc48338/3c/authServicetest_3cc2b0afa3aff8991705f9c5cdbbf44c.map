{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_authService","_client","_require","jest","describe","beforeEach","clearAllMocks","it","default","credentials","email","password","apiClient","post","mockResolvedValue","data","token","authService","login","expect","toHaveBeenCalledWith","registerData","username","register","logout","forgotPassword","newPassword","resetPassword","get","getProfile","profileData","nickname","put","updateProfile"],"sources":["authService.test.ts"],"sourcesContent":["// __tests__/unit/services/authService.test.ts\r\n\r\nimport authService, { LoginCredentials, RegisterData } from '../../../src/services/api/authService';\r\nimport apiClient from '../../../src/services/api/client';\r\n\r\n// apiClient 모킹\r\njest.mock('../../../src/services/api/client');\r\n\r\ndescribe('AuthService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('login', () => {\r\n    it('should call apiClient.post with correct parameters', async () => {\r\n      const credentials: LoginCredentials = {\r\n        email: 'test@example.com',\r\n        password: 'password123'\r\n      };\r\n      \r\n      (apiClient.post as jest.Mock).mockResolvedValue({ data: { token: 'token' } });\r\n      \r\n      await authService.login(credentials);\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith('/auth/login', credentials);\r\n    });\r\n  });\r\n\r\n  describe('register', () => {\r\n    it('should call apiClient.post with correct parameters', async () => {\r\n      const registerData: RegisterData = {\r\n        username: 'testuser',\r\n        email: 'test@example.com',\r\n        password: 'password123'\r\n      };\r\n      \r\n      (apiClient.post as jest.Mock).mockResolvedValue({ data: { token: 'token' } });\r\n      \r\n      await authService.register(registerData);\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith('/auth/register', registerData);\r\n    });\r\n  });\r\n\r\n  describe('logout', () => {\r\n    it('should call apiClient.post with correct path', async () => {\r\n      (apiClient.post as jest.Mock).mockResolvedValue({});\r\n      \r\n      await authService.logout();\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith('/auth/logout');\r\n    });\r\n  });\r\n\r\n  describe('forgotPassword', () => {\r\n    it('should call apiClient.post with correct parameters', async () => {\r\n      const email = 'test@example.com';\r\n      \r\n      (apiClient.post as jest.Mock).mockResolvedValue({});\r\n      \r\n      await authService.forgotPassword(email);\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith('/users/forgot-password', { email });\r\n    });\r\n  });\r\n\r\n  describe('resetPassword', () => {\r\n    it('should call apiClient.post with correct parameters', async () => {\r\n      const token = 'reset-token';\r\n      const newPassword = 'newpassword123';\r\n      \r\n      (apiClient.post as jest.Mock).mockResolvedValue({});\r\n      \r\n      await authService.resetPassword(token, newPassword);\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith('/users/reset-password', { token, newPassword });\r\n    });\r\n  });\r\n\r\n  describe('getProfile', () => {\r\n    it('should call apiClient.get with correct path', async () => {\r\n      (apiClient.get as jest.Mock).mockResolvedValue({});\r\n      \r\n      await authService.getProfile();\r\n      \r\n      expect(apiClient.get).toHaveBeenCalledWith('/users/profile');\r\n    });\r\n  });\r\n\r\n  describe('updateProfile', () => {\r\n    it('should call apiClient.put with correct parameters', async () => {\r\n      const profileData = { nickname: 'new nickname' };\r\n      \r\n      (apiClient.put as jest.Mock).mockResolvedValue({});\r\n      \r\n      await authService.updateProfile(profileData);\r\n      \r\n      expect(apiClient.put).toHaveBeenCalledWith('/users/profile', profileData);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}