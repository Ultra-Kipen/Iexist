62750bb8a926123e94330227fac172c2
_getJestObj().mock('../../../src/services/api/client');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _authService = _interopRequireDefault(require("../../../src/services/api/authService"));
var _client = _interopRequireDefault(require("../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('login', function () {
    it('should call apiClient.post with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var credentials = {
        email: 'test@example.com',
        password: 'password123'
      };
      _client.default.post.mockResolvedValue({
        data: {
          token: 'token'
        }
      });
      yield _authService.default.login(credentials);
      expect(_client.default.post).toHaveBeenCalledWith('/auth/login', credentials);
    }));
  });
  describe('register', function () {
    it('should call apiClient.post with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var registerData = {
        username: 'testuser',
        email: 'test@example.com',
        password: 'password123'
      };
      _client.default.post.mockResolvedValue({
        data: {
          token: 'token'
        }
      });
      yield _authService.default.register(registerData);
      expect(_client.default.post).toHaveBeenCalledWith('/auth/register', registerData);
    }));
  });
  describe('logout', function () {
    it('should call apiClient.post with correct path', (0, _asyncToGenerator2.default)(function* () {
      _client.default.post.mockResolvedValue({});
      yield _authService.default.logout();
      expect(_client.default.post).toHaveBeenCalledWith('/auth/logout');
    }));
  });
  describe('forgotPassword', function () {
    it('should call apiClient.post with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var email = 'test@example.com';
      _client.default.post.mockResolvedValue({});
      yield _authService.default.forgotPassword(email);
      expect(_client.default.post).toHaveBeenCalledWith('/users/forgot-password', {
        email: email
      });
    }));
  });
  describe('resetPassword', function () {
    it('should call apiClient.post with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var token = 'reset-token';
      var newPassword = 'newpassword123';
      _client.default.post.mockResolvedValue({});
      yield _authService.default.resetPassword(token, newPassword);
      expect(_client.default.post).toHaveBeenCalledWith('/users/reset-password', {
        token: token,
        newPassword: newPassword
      });
    }));
  });
  describe('getProfile', function () {
    it('should call apiClient.get with correct path', (0, _asyncToGenerator2.default)(function* () {
      _client.default.get.mockResolvedValue({});
      yield _authService.default.getProfile();
      expect(_client.default.get).toHaveBeenCalledWith('/users/profile');
    }));
  });
  describe('updateProfile', function () {
    it('should call apiClient.put with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var profileData = {
        nickname: 'new nickname'
      };
      _client.default.put.mockResolvedValue({});
      yield _authService.default.updateProfile(profileData);
      expect(_client.default.put).toHaveBeenCalledWith('/users/profile', profileData);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,