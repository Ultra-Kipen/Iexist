fbf844a1962388cef8b65287c690cb07
_getJestObj().mock('react-native-paper', function () {
  var originalModule = jest.requireActual('react-native-paper');
  return Object.assign({}, originalModule, {
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee'
        }
      };
    }
  });
});
_getJestObj().mock('../../../src/screens/ChallengeScreen', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text;
  var _require2 = require('react-native-paper'),
    Button = _require2.Button;
  var challenges = [{
    id: 1,
    title: '7일간의 감사 일기',
    description: '매일 감사한 일 3가지를 기록해보세요.',
    participants: 128,
    duration: 7,
    progress: 0.4
  }, {
    id: 2,
    title: '30일 긍정 에너지 나누기',
    description: '하루에 한 번 주변 사람에게 긍정적인 말을 해보세요.',
    participants: 56,
    duration: 30,
    progress: 0.2
  }, {
    id: 3,
    title: '21일 명상 습관 만들기',
    description: '매일 10분씩 명상을 하고 느낀 점을 공유해보세요.',
    participants: 89,
    duration: 21,
    progress: 0.6
  }];
  var MockChallengeScreen = function MockChallengeScreen() {
    var handleJoinChallenge = function handleJoinChallenge(challengeId) {
      console.log('Joining challenge:', challengeId);
    };
    return React.createElement.apply(React, [View, null, React.createElement(Text, null, '현재 진행 중인 챌린지')].concat((0, _toConsumableArray2.default)(challenges.map(function (challenge) {
      return React.createElement(View, {
        key: challenge.id
      }, React.createElement(Text, null, challenge.title), React.createElement(Text, null, challenge.description), React.createElement(Text, null, `${Math.round(challenge.progress * 100)}% 완료`), React.createElement(Text, null, `참여자: ${challenge.participants}명`), React.createElement(Text, null, `기간: ${challenge.duration}일`), React.createElement(Button, {
        onPress: function onPress() {
          return handleJoinChallenge(challenge.id);
        }
      }, '참여하기'));
    }))));
  };
  return MockChallengeScreen;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var ChallengeScreen = require('../../../src/screens/ChallengeScreen');
var mockConsoleLog = jest.fn();
var originalConsoleLog = console.log;
console.log = mockConsoleLog;
describe('ChallengeScreen 통합 테스트', function () {
  beforeEach(function () {
    mockConsoleLog.mockClear();
  });
  afterAll(function () {
    console.log = originalConsoleLog;
  });
  it('컴포넌트가 올바르게 렌더링되고 모든 챌린지가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getByText = _render.getByText,
      getAllByText = _render.getAllByText;
    expect(getByText('현재 진행 중인 챌린지')).toBeTruthy();
    expect(getByText('7일간의 감사 일기')).toBeTruthy();
    expect(getByText('30일 긍정 에너지 나누기')).toBeTruthy();
    expect(getByText('21일 명상 습관 만들기')).toBeTruthy();
    var joinButtons = getAllByText('참여하기');
    expect(joinButtons.length).toBe(3);
  }));
  it('참여하기 버튼 클릭 시 올바른 ID로 핸들러가 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getAllByText = _render2.getAllByText;
    var joinButtons = getAllByText('참여하기');
    _reactNative.fireEvent.press(joinButtons[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 1);
    });
    _reactNative.fireEvent.press(joinButtons[1]);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 2);
    });
    _reactNative.fireEvent.press(joinButtons[2]);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 3);
    });
    expect(mockConsoleLog).toHaveBeenCalledTimes(3);
  }));
  it('챌린지 세부 정보가 정확하게 표시되어야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getAllByText = _render3.getAllByText;
    var participantTexts = getAllByText(/참여자: \d+명/);
    expect(participantTexts[0].props.children).toBe('참여자: 128명');
    expect(participantTexts[1].props.children).toBe('참여자: 56명');
    expect(participantTexts[2].props.children).toBe('참여자: 89명');
    var durationTexts = getAllByText(/기간: \d+일/);
    expect(durationTexts[0].props.children).toBe('기간: 7일');
    expect(durationTexts[1].props.children).toBe('기간: 30일');
    expect(durationTexts[2].props.children).toBe('기간: 21일');
  });
  it('진행률 표시가 올바르게 계산되어 표시되어야 함', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getAllByText = _render4.getAllByText;
    var progressTexts = [getAllByText('40% 완료')[0], getAllByText('20% 완료')[0], getAllByText('60% 완료')[0]];
    expect(progressTexts[0]).toBeTruthy();
    expect(progressTexts[1]).toBeTruthy();
    expect(progressTexts[2]).toBeTruthy();
  });
  it('ProgressBar 컴포넌트가 올바르게 표시되어야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getByText = _render5.getByText;
    expect(getByText('40% 완료')).toBeTruthy();
    expect(getByText('20% 완료')).toBeTruthy();
    expect(getByText('60% 완료')).toBeTruthy();
  });
  it('챌린지 목록이 스크롤 가능한 컨테이너에 렌더링되어야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getByText = _render6.getByText;
    expect(getByText('현재 진행 중인 챌린지')).toBeTruthy();
  });
  it('모든 필수 정보가 표시되는지 확인', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getByText = _render7.getByText;
    expect(getByText('7일간의 감사 일기')).toBeTruthy();
    expect(getByText('매일 감사한 일 3가지를 기록해보세요.')).toBeTruthy();
    expect(getByText('40% 완료')).toBeTruthy();
    expect(getByText('참여자: 128명')).toBeTruthy();
    expect(getByText('기간: 7일')).toBeTruthy();
    expect(getByText('30일 긍정 에너지 나누기')).toBeTruthy();
    expect(getByText('하루에 한 번 주변 사람에게 긍정적인 말을 해보세요.')).toBeTruthy();
    expect(getByText('20% 완료')).toBeTruthy();
    expect(getByText('참여자: 56명')).toBeTruthy();
    expect(getByText('기간: 30일')).toBeTruthy();
    expect(getByText('21일 명상 습관 만들기')).toBeTruthy();
    expect(getByText('매일 10분씩 명상을 하고 느낀 점을 공유해보세요.')).toBeTruthy();
    expect(getByText('60% 완료')).toBeTruthy();
    expect(getByText('참여자: 89명')).toBeTruthy();
    expect(getByText('기간: 21일')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,