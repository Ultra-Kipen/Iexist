467f546c2a30f4c6b503e788eda8cdf4
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var SimpleComponent = function SimpleComponent() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    children: "Simple Component"
  });
};
var ComplexComponent = function ComplexComponent(_ref) {
  var items = _ref.items;
  return (0, _jsxRuntime.jsx)(_reactNative2.FlatList, {
    data: items,
    keyExtractor: function keyExtractor(item, index) {
      return `item-${index}`;
    },
    renderItem: function renderItem(_ref2) {
      var item = _ref2.item;
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: item
      });
    }
  });
};
var _NestedComponent = function NestedComponent(_ref3) {
  var _ref3$depth = _ref3.depth,
    depth = _ref3$depth === void 0 ? 3 : _ref3$depth;
  if (depth <= 0) {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "Leaf Node"
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_NestedComponent, {
      depth: depth - 1
    }), (0, _jsxRuntime.jsx)(_NestedComponent, {
      depth: depth - 1
    })]
  });
};
var onRenderCallback = jest.fn(function (id, phase, actualDuration, baseDuration, startTime, commitTime) {
  return {
    id: id,
    phase: phase,
    actualDuration: actualDuration,
    baseDuration: baseDuration,
    startTime: startTime,
    commitTime: commitTime
  };
});
describe('렌더링 성능 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('SimpleComponent 렌더링 성능', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_react.Profiler, {
      id: "SimpleComponent",
      onRender: onRenderCallback,
      children: (0, _jsxRuntime.jsx)(SimpleComponent, {})
    }));
    expect(onRenderCallback).toHaveBeenCalledTimes(1);
    var result = onRenderCallback.mock.results[0].value;
    expect(result.id).toBe('SimpleComponent');
    expect(result.phase).toBe('mount');
    console.log(`SimpleComponent actualDuration: ${result.actualDuration}ms`);
    expect(result.actualDuration).toBeLessThan(200);
  });
  test('ComplexComponent 렌더링 성능', function () {
    var items = Array.from({
      length: 500
    }, function (_, i) {
      return `Item ${i}`;
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_react.Profiler, {
      id: "ComplexComponent",
      onRender: onRenderCallback,
      children: (0, _jsxRuntime.jsx)(ComplexComponent, {
        items: items
      })
    }));
    expect(onRenderCallback).toHaveBeenCalledTimes(1);
    var result = onRenderCallback.mock.results[0].value;
    expect(result.id).toBe('ComplexComponent');
    console.log(`ComplexComponent actualDuration: ${result.actualDuration}ms`);
  });
  test('NestedComponent 렌더링 성능', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_react.Profiler, {
      id: "NestedComponent",
      onRender: onRenderCallback,
      children: (0, _jsxRuntime.jsx)(_NestedComponent, {
        depth: 4
      })
    }));
    expect(onRenderCallback).toHaveBeenCalledTimes(1);
    var result = onRenderCallback.mock.results[0].value;
    expect(result.id).toBe('NestedComponent');
    console.log(`NestedComponent actualDuration: ${result.actualDuration}ms`);
  });
  test('업데이트 시 리렌더링 성능', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_react.Profiler, {
        id: "UpdateTest",
        onRender: onRenderCallback,
        children: (0, _jsxRuntime.jsx)(ComplexComponent, {
          items: ['Item 1', 'Item 2']
        })
      })),
      rerender = _render.rerender;
    var mountResult = onRenderCallback.mock.results[0].value;
    rerender((0, _jsxRuntime.jsx)(_react.Profiler, {
      id: "UpdateTest",
      onRender: onRenderCallback,
      children: (0, _jsxRuntime.jsx)(ComplexComponent, {
        items: ['Item 1', 'Item 2', 'Item 3']
      })
    }));
    var updateResult = onRenderCallback.mock.results[1].value;
    expect(mountResult.phase).toBe('mount');
    expect(updateResult.phase).toBe('update');
    console.log(`Mount Duration: ${mountResult.actualDuration}ms`);
    console.log(`Update Duration: ${updateResult.actualDuration}ms`);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,