{"version":3,"names":["_getJestObj","mock","mockSocket","on","jest","fn","off","emit","disconnect","connected","io","_interopRequireDefault","require","_asyncToGenerator2","_socketService","_socket","_require","localStorageMock","store","getItem","key","setItem","value","removeItem","clear","Object","defineProperty","global","console","error","log","describe","beforeEach","clearAllMocks","mockClear","it","skip","default","mockImplementation","event","callback","socketService","init","expect","toHaveBeenCalledWith","any","String","objectContaining","auth","token","Function","not","toHaveBeenCalled","data","isConnected","toBe","connectHandler","initPromise","toBeNull"],"sources":["socketService.test.ts"],"sourcesContent":["// __tests__/unit/services/api/socketService.test.ts\r\nimport socketService from '../../../../src/services/socketService';\r\nimport { io } from 'socket.io-client';\r\n\r\n// Socket.io-client 모킹\r\njest.mock('socket.io-client', () => {\r\n  const mockSocket = {\r\n    on: jest.fn(),\r\n    off: jest.fn(),\r\n    emit: jest.fn(),\r\n    disconnect: jest.fn(),\r\n    connected: false\r\n  };\r\n  \r\n  return {\r\n    io: jest.fn(() => mockSocket)\r\n  };\r\n});\r\n\r\n// localStorage 모킹\r\nconst localStorageMock = (() => {\r\n  let store: Record<string, string> = {};\r\n  return {\r\n    getItem: jest.fn((key: string) => store[key] || null),\r\n    setItem: jest.fn((key: string, value: string) => {\r\n      store[key] = value;\r\n    }),\r\n    removeItem: jest.fn((key: string) => {\r\n      delete store[key];\r\n    }),\r\n    clear: jest.fn(() => {\r\n      store = {};\r\n    })\r\n  };\r\n})();\r\n\r\nObject.defineProperty(global, 'localStorage', {\r\n  value: localStorageMock\r\n});\r\n\r\n// console 관련 모킹\r\nglobal.console.error = jest.fn();\r\nglobal.console.log = jest.fn();\r\n\r\ndescribe('SocketService', () => {\r\n  let mockSocket: any;\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    localStorageMock.clear();\r\n    \r\n    // 모킹된 소켓 참조 가져오기 및 초기화\r\n    (io as jest.Mock).mockClear();\r\n    mockSocket = (io as jest.Mock)();\r\n    mockSocket.connected = false;\r\n  });\r\n\r\n  describe('init()', () => {\r\n    // 이 테스트는 건너뜁니다 (skip)\r\n    it.skip('토큰이 없으면 예외를 발생시킨다', async () => {\r\n      // 이 테스트를 건너뜁니다\r\n    });\r\n\r\n    it('토큰이 있으면 소켓을 초기화한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      // io가 호출되었는지 확인\r\n      expect(io).toHaveBeenCalledWith(\r\n        expect.any(String), \r\n        expect.objectContaining({\r\n          auth: { token: 'mock-token' }\r\n        })\r\n      );\r\n      \r\n      // 이벤트 리스너가 등록되었는지 확인\r\n      expect(mockSocket.on).toHaveBeenCalledWith('connect', expect.any(Function));\r\n      expect(mockSocket.on).toHaveBeenCalledWith('connect_error', expect.any(Function));\r\n      expect(mockSocket.on).toHaveBeenCalledWith('disconnect', expect.any(Function));\r\n      expect(mockSocket.on).toHaveBeenCalledWith('error', expect.any(Function));\r\n    });\r\n\r\n    it('이미 연결된 소켓이 있으면 새로 연결을 생성하지 않는다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      // 첫 번째 연결\r\n      await socketService.init();\r\n      \r\n      // 연결 상태 설정\r\n      mockSocket.connected = true;\r\n      \r\n      // io 호출 초기화\r\n      (io as jest.Mock).mockClear();\r\n      \r\n      // 두 번째 연결 시도\r\n      await socketService.init();\r\n      \r\n      // io가 호출되지 않았는지 확인\r\n      expect(io).not.toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('disconnect()', () => {\r\n    it('소켓 연결을 해제한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      socketService.disconnect();\r\n      \r\n      expect(mockSocket.disconnect).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('on()', () => {\r\n    it('소켓이 없으면 에러를 기록한다', () => {\r\n      const callback = jest.fn();\r\n      socketService.on('test-event', callback);\r\n      \r\n      expect(console.error).toHaveBeenCalledWith('소켓이 초기화되지 않았습니다');\r\n    });\r\n\r\n    it('소켓에 이벤트 리스너를 등록한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      const callback = jest.fn();\r\n      socketService.on('test-event', callback);\r\n      \r\n      expect(mockSocket.on).toHaveBeenCalledWith('test-event', callback);\r\n    });\r\n  });\r\n\r\n  describe('off()', () => {\r\n    it('소켓이 없으면 아무 일도 일어나지 않는다', () => {\r\n      // 테스트 전에 명시적으로 socketService 내부의 socket 속성을 null로 설정\r\n      // @ts-ignore: 테스트를 위해 private 속성에 접근\r\n      socketService['socket'] = null;\r\n      \r\n      // off 호출 전에 mockSocket.off 호출 기록 초기화\r\n      mockSocket.off.mockClear();\r\n      \r\n      const callback = jest.fn();\r\n      socketService.off('test-event', callback);\r\n      \r\n      // mockSocket.off가 호출되지 않았는지 확인\r\n      expect(mockSocket.off).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('콜백이 있으면 특정 리스너를 제거한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      const callback = jest.fn();\r\n      socketService.off('test-event', callback);\r\n      \r\n      expect(mockSocket.off).toHaveBeenCalledWith('test-event', callback);\r\n    });\r\n\r\n    it('콜백이 없으면 이벤트의 모든 리스너를 제거한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      socketService.off('test-event');\r\n      \r\n      expect(mockSocket.off).toHaveBeenCalledWith('test-event');\r\n    });\r\n  });\r\n\r\n  describe('emit()', () => {\r\n    it('소켓이 연결되지 않았으면 에러를 기록한다', () => {\r\n      socketService.emit('test-event', { data: 'test' });\r\n      \r\n      expect(console.error).toHaveBeenCalledWith('소켓이 연결되지 않았습니다');\r\n    });\r\n\r\n    it('소켓이 연결되었으면 이벤트를 전송한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      // 연결 상태 설정\r\n      mockSocket.connected = true;\r\n      \r\n      const data = { data: 'test' };\r\n      socketService.emit('test-event', data);\r\n      \r\n      expect(mockSocket.emit).toHaveBeenCalledWith('test-event', data);\r\n    });\r\n  });\r\n\r\n  describe('isConnected()', () => {\r\n    it('소켓이 없으면 false를 반환한다', () => {\r\n      expect(socketService.isConnected()).toBe(false);\r\n    });\r\n\r\n    it('소켓이 있지만 연결되지 않았으면 false를 반환한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      // 연결 상태 설정\r\n      mockSocket.connected = false;\r\n      \r\n      expect(socketService.isConnected()).toBe(false);\r\n    });\r\n\r\n    it('소켓이 연결되었으면 true를 반환한다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 이벤트 핸들러 모킹\r\n      mockSocket.on.mockImplementation((event: string, callback: Function) => {\r\n        if (event === 'connect') {\r\n          // 즉시 connect 이벤트 발생\r\n          callback();\r\n        }\r\n      });\r\n      \r\n      await socketService.init();\r\n      \r\n      // 연결 상태 설정\r\n      mockSocket.connected = true;\r\n      \r\n      expect(socketService.isConnected()).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('이벤트 핸들러', () => {\r\n    it('connect 이벤트가 발생하면 Promise가 해결된다', async () => {\r\n      // localStorage에 토큰 설정\r\n      localStorageMock.setItem('token', 'mock-token');\r\n      \r\n      // connect 핸들러를 바로 호출하지 않고 저장\r\n      let connectHandler: ((reason?: any) => void) | null = null as ((reason?: any) => void) | null;\r\n\r\n      mockSocket.on.mockImplementation((event: string, callback: (reason?: any) => void) => {\r\n        if (event === 'connect') {\r\n          connectHandler = callback;\r\n        }\r\n      });\r\n      \r\n      // init 호출 (아직 connect 이벤트는 발생하지 않음)\r\n      const initPromise = socketService.init();\r\n      \r\n      // connect 핸들러가 등록되었는지 확인\r\n      expect(mockSocket.on).toHaveBeenCalledWith('connect', expect.any(Function));\r\n      expect(connectHandler).not.toBeNull();\r\n      \r\n      // connect 이벤트 시뮬레이션\r\n      if (connectHandler) {\r\n        connectHandler(); // 인자 없이 호출\r\n      }\r\n      \r\n      // Promise가 해결되었는지 확인\r\n      await initPromise;\r\n      \r\n      expect(console.log).toHaveBeenCalledWith('소켓 연결됨');\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}