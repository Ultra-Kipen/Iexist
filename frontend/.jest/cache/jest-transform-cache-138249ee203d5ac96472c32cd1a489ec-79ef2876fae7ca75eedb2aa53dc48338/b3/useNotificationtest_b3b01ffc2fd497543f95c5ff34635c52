2a7145781a224e62ce3187ecf58b3a33
_getJestObj().mock('../../src/contexts/NotificationContext', function () {
  return {
    useNotification: jest.fn()
  };
});
_getJestObj().mock('../../src/services/api/notificationService', function () {
  return {
    getNotifications: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useNotification = require("../../src/hooks/useNotification");
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useNotificationManager', function () {
  var mockNotifications = [{
    id: 1,
    content: 'Test notification 1',
    is_read: false,
    notification_type: 'system',
    created_at: '2023-01-01'
  }, {
    id: 2,
    content: 'Test notification 2',
    is_read: true,
    notification_type: 'like',
    created_at: '2023-01-02'
  }];
  var mockContextFunctions = {
    notifications: mockNotifications,
    unreadCount: 1,
    fetchNotifications: jest.fn().mockResolvedValue(undefined),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    deleteNotification: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _NotificationContext.useNotification.mockReturnValue(mockContextFunctions);
    _notificationService.default.getNotifications.mockResolvedValue({
      data: {
        notifications: mockNotifications,
        total: 2,
        unread: 1
      }
    });
  });
  it('should return context values and local state', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useNotification.useNotificationManager)();
      }),
      result = _renderHook.result;
    expect(result.current.notifications).toEqual(mockNotifications);
    expect(result.current.unreadCount).toBe(1);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
  });
  it('should fetch notifications with pagination', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNotification.useNotificationManager)();
      }),
      result = _renderHook2.result;
    var responseData;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      responseData = yield result.current.fetchNotifications(1, 10);
    }));
    expect(_notificationService.default.getNotifications).toHaveBeenCalledWith({
      page: 1,
      limit: 10
    });
    expect(mockContextFunctions.fetchNotifications).toHaveBeenCalled();
    expect(responseData).toEqual({
      notifications: mockNotifications,
      total: 2,
      unread: 1
    });
  }));
  it('should handle error during fetch', (0, _asyncToGenerator2.default)(function* () {
    var testError = new Error('API error');
    _notificationService.default.getNotifications.mockRejectedValueOnce(testError);
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNotification.useNotificationManager)();
      }),
      result = _renderHook3.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.fetchNotifications();
      } catch (error) {}
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBe('API error');
  }));
  it('should handle non-Error objects in error case', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications.mockRejectedValueOnce('String error');
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNotification.useNotificationManager)();
      }),
      result = _renderHook4.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.fetchNotifications();
      } catch (error) {}
    }));
    expect(result.current.error).toBe('알림을 불러오는 중 오류가 발생했습니다.');
  }));
  it('should pass through context functions', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNotification.useNotificationManager)();
      }),
      result = _renderHook5.result;
    result.current.markAsRead(1);
    expect(mockContextFunctions.markAsRead).toHaveBeenCalledWith(1);
    result.current.markAllAsRead();
    expect(mockContextFunctions.markAllAsRead).toHaveBeenCalled();
    result.current.deleteNotification(1);
    expect(mockContextFunctions.deleteNotification).toHaveBeenCalledWith(1);
  });
  it('should handle fetch with default pagination parameters', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useNotification.useNotificationManager)();
      }),
      result = _renderHook6.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.fetchNotifications();
    }));
    expect(_notificationService.default.getNotifications).toHaveBeenCalledWith({
      page: undefined,
      limit: undefined
    });
    expect(mockContextFunctions.fetchNotifications).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,