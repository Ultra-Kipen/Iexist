{"version":3,"names":["_react","require","_socketService","_interopRequireDefault","_NotificationContext","useRealtimeNotification","exports","_ref","arguments","length","undefined","_ref$autoConnect","autoConnect","onNewNotification","_useState","useState","_useState2","_slicedToArray2","default","isConnected","setIsConnected","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","notificationContext","useNotification","fetchNotifications","connect","useCallback","_asyncToGenerator2","socketService","init","err","Error","message","console","disconnect","handleNewNotification","notification","handleUnreadCountUpdate","data","setUnreadCount","count","markAsRead","notificationId","emit","notification_id","markAllAsRead","useEffect","on","off","_default"],"sources":["useRealtimeNotification.ts"],"sourcesContent":["// hooks/useRealtimeNotification.ts\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport socketService from '../services/socketService';\r\nimport { useNotification } from '../contexts/NotificationContext';\r\n\r\ninterface Notification {\r\n  id: number;\r\n  content: string;\r\n  notification_type: 'like' | 'comment' | 'challenge' | 'system';\r\n  related_id?: number;\r\n  is_read: boolean;\r\n  created_at: string;\r\n}\r\n\r\ninterface UseRealtimeNotificationProps {\r\n  autoConnect?: boolean;\r\n  onNewNotification?: (notification: Notification) => void;\r\n}\r\n\r\n/**\r\n * 실시간 알림을 관리하는 훅\r\n */\r\nexport const useRealtimeNotification = ({\r\n  autoConnect = true,\r\n  onNewNotification\r\n}: UseRealtimeNotificationProps = {}) => {\r\n  const [isConnected, setIsConnected] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // NotificationContext에서 기존 알림 관련 함수 가져오기\r\n  const notificationContext = useNotification();\r\n  const { fetchNotifications } = notificationContext;\r\n  \r\n  // 소켓 연결\r\n  const connect = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      await socketService.init();\r\n      setIsConnected(socketService.isConnected());\r\n      setIsLoading(false);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : '연결 중 오류가 발생했습니다.');\r\n      setIsLoading(false);\r\n      console.error('Socket connection error:', err);\r\n    }\r\n  }, []);\r\n\r\n  // 연결 해제\r\n  const disconnect = useCallback(() => {\r\n    socketService.disconnect();\r\n    setIsConnected(false);\r\n  }, []);\r\n\r\n  // 새 알림 이벤트 핸들러\r\n  const handleNewNotification = useCallback((notification: Notification) => {\r\n    // 새 알림 수신 시 컨텍스트 업데이트\r\n    fetchNotifications();\r\n    \r\n    // 커스텀 핸들러가 있으면 호출\r\n    if (onNewNotification) {\r\n      onNewNotification(notification);\r\n    }\r\n  }, [fetchNotifications, onNewNotification]);\r\n\r\n  // 읽지 않은 알림 수 업데이트 핸들러\r\n  const handleUnreadCountUpdate = useCallback((data: { count: number }) => {\r\n    if (notificationContext && 'setUnreadCount' in notificationContext) {\r\n      // setUnreadCount가 존재하는 경우에만 사용\r\n      (notificationContext as any).setUnreadCount(data.count);\r\n    }\r\n  }, [notificationContext]);\r\n\r\n  // 알림 읽음 처리\r\n  const markAsRead = useCallback((notificationId: number) => {\r\n    if (isConnected) {\r\n      socketService.emit('mark_notification_read', { notification_id: notificationId });\r\n    }\r\n  }, [isConnected]);\r\n\r\n  // 모든 알림 읽음 처리\r\n  const markAllAsRead = useCallback(() => {\r\n    if (isConnected) {\r\n      socketService.emit('mark_all_notifications_read');\r\n    }\r\n  }, [isConnected]);\r\n\r\n  // 컴포넌트 마운트/언마운트 시 이벤트 리스너 설정\r\n  useEffect(() => {\r\n    // 소켓 이벤트 리스너 등록\r\n    socketService.on('connect', () => setIsConnected(true));\r\n    socketService.on('disconnect', () => setIsConnected(false));\r\n    socketService.on('new_notification', handleNewNotification);\r\n    socketService.on('unread_notifications_count', handleUnreadCountUpdate);\r\n    \r\n    // 자동 연결 설정이 있으면 연결\r\n    if (autoConnect && !socketService.isConnected()) {\r\n      connect();\r\n    }\r\n    \r\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\r\n    return () => {\r\n      socketService.off('connect');\r\n      socketService.off('disconnect');\r\n      socketService.off('new_notification', handleNewNotification);\r\n      socketService.off('unread_notifications_count', handleUnreadCountUpdate);\r\n    };\r\n  }, [autoConnect, connect, handleNewNotification, handleUnreadCountUpdate]);\r\n\r\n  return {\r\n    isConnected,\r\n    isLoading,\r\n    error,\r\n    connect,\r\n    disconnect,\r\n    markAsRead,\r\n    markAllAsRead\r\n  };\r\n};\r\n\r\nexport default useRealtimeNotification;"],"mappings":"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","ignoreList":[]}