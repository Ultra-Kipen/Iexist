8cf184e2d667825f810595251c0c6d23
_getJestObj().mock('../../src/services/api/authService', function () {
  return {
    login: jest.fn(),
    register: jest.fn(),
    logout: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _AuthContext = require("../../src/contexts/AuthContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _authService = _interopRequireDefault(require("../../src/services/api/authService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _useAuth = (0, _AuthContext.useAuth)(),
    user = _useAuth.user,
    isAuthenticated = _useAuth.isAuthenticated,
    login = _useAuth.login,
    logout = _useAuth.logout,
    register = _useAuth.register;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "user",
      children: user ? JSON.stringify(user) : 'no user'
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "authenticated",
      children: isAuthenticated ? 'true' : 'false'
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "login",
      onPress: function onPress() {
        return login({
          email: 'test@test.com',
          password: 'password123'
        });
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Login"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "logout",
      onPress: function onPress() {
        return logout();
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Logout"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "register",
      onPress: function onPress() {
        return register({
          username: 'testuser',
          email: 'test@test.com',
          password: 'password123'
        });
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Register"
      })
    })]
  });
};
describe('AuthContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockClear();
    _asyncStorage.default.setItem.mockClear();
    _asyncStorage.default.removeItem.mockClear();
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  it('provides authentication state', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var authenticatedText = getByTestId('authenticated');
      var userText = getByTestId('user');
      expect(authenticatedText.props.children).toBe('false');
      expect(userText.props.children).toBe('no user');
    });
  }));
  it('handles login', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      user_id: 1,
      email: 'test@test.com',
      username: 'testuser'
    };
    _authService.default.login.mockResolvedValue({
      data: {
        data: {
          token: 'test-token',
          user: mockUser
        }
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return getByTestId('login');
    });
    _reactNative.fireEvent.press(getByTestId('login'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('auth_token', 'test-token');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('user', JSON.stringify(mockUser));
    });
  }));
  it('handles logout', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return getByTestId('logout');
    });
    _reactNative.fireEvent.press(getByTestId('logout'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('auth_token');
      expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('user');
    });
  }));
  it('handles register', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      user_id: 1,
      email: 'test@test.com',
      username: 'testuser'
    };
    _authService.default.register.mockResolvedValue({
      data: {
        data: {
          token: 'test-token',
          user: mockUser
        }
      }
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return getByTestId('register');
    });
    _reactNative.fireEvent.press(getByTestId('register'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('auth_token', 'test-token');
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('user', JSON.stringify(mockUser));
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,