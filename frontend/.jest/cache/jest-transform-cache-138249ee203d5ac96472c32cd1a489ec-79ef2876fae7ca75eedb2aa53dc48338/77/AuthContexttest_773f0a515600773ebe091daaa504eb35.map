{"version":3,"names":["_getJestObj","mock","login","jest","fn","register","logout","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_AuthContext","_asyncStorage","_authService","_reactNative2","_jsxRuntime","_require","TestComponent","_useAuth","useAuth","user","isAuthenticated","jsxs","View","children","jsx","Text","testID","JSON","stringify","TouchableOpacity","onPress","email","password","username","describe","beforeEach","clearAllMocks","AsyncStorage","getItem","mockClear","setItem","removeItem","mockResolvedValue","it","default","_render","render","AuthProvider","getByTestId","waitFor","authenticatedText","userText","expect","props","toBe","mockUser","user_id","authService","data","token","_render2","fireEvent","press","toHaveBeenCalledWith","_render3","_render4"],"sources":["AuthContext.test.tsx"],"sourcesContent":["// __tests__/contexts/AuthContext.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { AuthProvider, useAuth } from '../../src/contexts/AuthContext';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport authService from '../../src/services/api/authService';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\n\r\n// Mock the authService\r\njest.mock('../../src/services/api/authService', () => ({\r\n  login: jest.fn(),\r\n  register: jest.fn(),\r\n  logout: jest.fn(),\r\n}));\r\n\r\n// Create a test component that uses the AuthContext\r\nconst TestComponent = () => {\r\n  const { user, isAuthenticated, login, logout, register } = useAuth();\r\n  \r\n  return (\r\n    <View>\r\n      <Text testID=\"user\">{user ? JSON.stringify(user) : 'no user'}</Text>\r\n      <Text testID=\"authenticated\">{isAuthenticated ? 'true' : 'false'}</Text>\r\n      <TouchableOpacity \r\n        testID=\"login\" \r\n        onPress={() => login({ email: 'test@test.com', password: 'password123' })}\r\n      >\r\n        <Text>Login</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity \r\n        testID=\"logout\" \r\n        onPress={() => logout()}\r\n      >\r\n        <Text>Logout</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity \r\n        testID=\"register\" \r\n        onPress={() => register({ username: 'testuser', email: 'test@test.com', password: 'password123' })}\r\n      >\r\n        <Text>Register</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('AuthContext', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // AsyncStorage mock 리셋\r\n    (AsyncStorage.getItem as jest.Mock).mockClear();\r\n    (AsyncStorage.setItem as jest.Mock).mockClear();\r\n    (AsyncStorage.removeItem as jest.Mock).mockClear();\r\n    \r\n    // 모든 AsyncStorage 함수에 기본값 설정\r\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);\r\n  });\r\n\r\n  it('provides authentication state', async () => {\r\n    const { getByTestId } = render(\r\n      <AuthProvider>\r\n        <TestComponent />\r\n      </AuthProvider>\r\n    );\r\n    \r\n    // 비동기 작업이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      const authenticatedText = getByTestId('authenticated');\r\n      const userText = getByTestId('user');\r\n      \r\n      expect(authenticatedText.props.children).toBe('false');\r\n      expect(userText.props.children).toBe('no user');\r\n    });\r\n  });\r\n\r\n  it('handles login', async () => {\r\n    const mockUser = { user_id: 1, email: 'test@test.com', username: 'testuser' };\r\n    \r\n    (authService.login as jest.Mock).mockResolvedValue({\r\n      data: {\r\n        data: {\r\n          token: 'test-token',\r\n          user: mockUser\r\n        }\r\n      }\r\n    });\r\n\r\n    const { getByTestId } = render(\r\n      <AuthProvider>\r\n        <TestComponent />\r\n      </AuthProvider>\r\n    );\r\n    \r\n    // 비동기 작업이 완료될 때까지 대기\r\n    await waitFor(() => getByTestId('login'));\r\n    \r\n    // 로그인 버튼 클릭\r\n    fireEvent.press(getByTestId('login'));\r\n\r\n    // 결과 확인\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('auth_token', 'test-token');\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('user', JSON.stringify(mockUser));\r\n    });\r\n  });\r\n\r\n  it('handles logout', async () => {\r\n    const { getByTestId } = render(\r\n      <AuthProvider>\r\n        <TestComponent />\r\n      </AuthProvider>\r\n    );\r\n    \r\n    // 비동기 작업이 완료될 때까지 대기\r\n    await waitFor(() => getByTestId('logout'));\r\n    \r\n    // 로그아웃 버튼 클릭\r\n    fireEvent.press(getByTestId('logout'));\r\n\r\n    // 결과 확인\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.removeItem).toHaveBeenCalledWith('auth_token');\r\n      expect(AsyncStorage.removeItem).toHaveBeenCalledWith('user');\r\n    });\r\n  });\r\n\r\n  it('handles register', async () => {\r\n    const mockUser = { user_id: 1, email: 'test@test.com', username: 'testuser' };\r\n    \r\n    (authService.register as jest.Mock).mockResolvedValue({\r\n      data: {\r\n        data: {\r\n          token: 'test-token',\r\n          user: mockUser\r\n        }\r\n      }\r\n    });\r\n\r\n    const { getByTestId } = render(\r\n      <AuthProvider>\r\n        <TestComponent />\r\n      </AuthProvider>\r\n    );\r\n    \r\n    // 비동기 작업이 완료될 때까지 대기\r\n    await waitFor(() => getByTestId('register'));\r\n    \r\n    // 회원가입 버튼 클릭\r\n    fireEvent.press(getByTestId('register'));\r\n\r\n    // 결과 확인\r\n    await waitFor(() => {\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('auth_token', 'test-token');\r\n      expect(AsyncStorage.setItem).toHaveBeenCalledWith('user', JSON.stringify(mockUser));\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}