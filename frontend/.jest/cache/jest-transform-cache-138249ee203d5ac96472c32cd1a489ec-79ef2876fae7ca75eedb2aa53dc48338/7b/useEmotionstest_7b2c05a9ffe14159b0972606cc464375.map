{"version":3,"names":["_getJestObj","mock","useStore","state","emotions","dispatch","jest","fn","actions","setEmotions","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_useEmotions","_require","mockJsonPromise","Promise","resolve","id","name","icon","color","mockFetchPromise","ok","json","global","fetch","mockImplementation","describe","beforeEach","clearAllMocks","it","_renderHook","renderHook","useEmotions","result","expect","current","loading","toBe","toEqual","selectedEmotions","error","toBeNull","_renderHook2","act","toggleEmotion","toContain","not","_renderHook3","selectEmotion","filter","length","_renderHook4","deselectEmotion","_renderHook5","clearEmotions","default","mockImplementationOnce","reject","Error","_renderHook6","fetchEmotions","_renderHook7","mockClear","toHaveBeenCalledWith"],"sources":["useEmotions.test.ts"],"sourcesContent":["// __tests__/hooks/useEmotions.test.ts\r\nimport React from 'react';\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport { useEmotions } from '../../src/hooks/useEmotions';\r\n\r\n// Mock useStore and related functionality\r\njest.mock('../../src/store', () => ({\r\n  useStore: () => ({\r\n    state: { emotions: [] },\r\n    dispatch: jest.fn()\r\n  })\r\n}));\r\n\r\njest.mock('../../src/store/actions', () => ({\r\n  actions: {\r\n    setEmotions: jest.fn()\r\n  }\r\n}));\r\n\r\n// Mock fetch API\r\nconst mockJsonPromise = Promise.resolve([\r\n  { id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n  { id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' }\r\n]);\r\n\r\nconst mockFetchPromise = Promise.resolve({\r\n  ok: true,\r\n  json: () => mockJsonPromise\r\n});\r\nglobal.fetch = jest.fn().mockImplementation(() => mockFetchPromise);\r\n\r\ndescribe('useEmotions Hook', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n  \r\n  it('should initialize with empty emotions and start loading', () => {\r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 초기 상태 확인 - loading은 fetchEmotions 호출로 인해 true로 시작\r\n    expect(result.current.loading).toBe(true);\r\n    expect(result.current.emotions).toEqual([]);\r\n    expect(result.current.selectedEmotions).toEqual([]);\r\n    expect(result.current.error).toBeNull();\r\n  });\r\n  \r\n  it('should toggle emotion selection', () => {\r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 감정 선택 테스트\r\n    act(() => {\r\n      result.current.toggleEmotion(1);\r\n    });\r\n    \r\n    // 선택된 감정 확인\r\n    expect(result.current.selectedEmotions).toContain(1);\r\n    \r\n    // 다시 동일한 감정 선택시 제거되는지 테스트\r\n    act(() => {\r\n      result.current.toggleEmotion(1);\r\n    });\r\n    \r\n    // 선택 해제 확인\r\n    expect(result.current.selectedEmotions).not.toContain(1);\r\n  });\r\n  \r\n  it('should select emotion', () => {\r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 감정 선택 테스트\r\n    act(() => {\r\n      result.current.selectEmotion(1);\r\n    });\r\n    \r\n    expect(result.current.selectedEmotions).toContain(1);\r\n    \r\n    // 이미 선택된 감정 다시 선택해도 중복되지 않는지 테스트\r\n    act(() => {\r\n      result.current.selectEmotion(1);\r\n    });\r\n    \r\n    expect(result.current.selectedEmotions.filter(id => id === 1).length).toBe(1);\r\n  });\r\n  \r\n  it('should deselect emotion', () => {\r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 감정 선택 후 해제 테스트\r\n    act(() => {\r\n      result.current.selectEmotion(1);\r\n      result.current.selectEmotion(2);\r\n    });\r\n    \r\n    expect(result.current.selectedEmotions).toContain(1);\r\n    expect(result.current.selectedEmotions).toContain(2);\r\n    \r\n    act(() => {\r\n      result.current.deselectEmotion(1);\r\n    });\r\n    \r\n    expect(result.current.selectedEmotions).not.toContain(1);\r\n    expect(result.current.selectedEmotions).toContain(2);\r\n  });\r\n  \r\n  it('should clear all selected emotions', () => {\r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 여러 감정 선택\r\n    act(() => {\r\n      result.current.selectEmotion(1);\r\n      result.current.selectEmotion(2);\r\n    });\r\n    \r\n    expect(result.current.selectedEmotions.length).toBe(2);\r\n    \r\n    // 모든 선택 해제\r\n    act(() => {\r\n      result.current.clearEmotions();\r\n    });\r\n    \r\n    expect(result.current.selectedEmotions.length).toBe(0);\r\n  });\r\n  \r\n  it('should handle fetch error', async () => {\r\n    // 더 구체적인 fetch 실패 모킹\r\n    global.fetch = jest.fn().mockImplementationOnce(() => \r\n      Promise.reject(new Error(\"감정 목록을 불러오는데 실패했습니다.\"))\r\n    );\r\n    \r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 초기 로딩 상태 확인\r\n    expect(result.current.loading).toBe(true);\r\n    \r\n    // fetchEmotions 함수 호출\r\n    await act(async () => {\r\n      await result.current.fetchEmotions();\r\n    });\r\n    \r\n    // 에러 상태 확인\r\n    expect(result.current.loading).toBe(false);\r\n    expect(result.current.error).toBe(\"감정 목록을 불러오는데 실패했습니다.\");\r\n  });\r\n  it('should fetch emotions manually', async () => {\r\n    const { result } = renderHook(() => useEmotions());\r\n    \r\n    // 초기 자동 fetch 제거\r\n    global.fetch = jest.fn().mockClear();\r\n    \r\n    // 수동 fetch 설정\r\n    global.fetch = jest.fn().mockImplementationOnce(() => mockFetchPromise);\r\n    \r\n    // fetchEmotions 함수 수동 호출\r\n    await act(async () => {\r\n      await result.current.fetchEmotions();\r\n    });\r\n    \r\n    // fetch 호출 확인\r\n    expect(global.fetch).toHaveBeenCalledWith('/api/emotions');\r\n    \r\n    // 로딩 상태 변화 확인\r\n    expect(result.current.loading).toBe(false);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}