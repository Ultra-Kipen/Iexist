1e25a22083a4f056b13e7c5430661999
_getJestObj().mock('react-native-reanimated', function () {
  var Reanimated = require('react-native-reanimated/mock');
  Reanimated.default.call = function () {};
  return Reanimated;
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var reactNative = jest.requireActual('react-native');
  reactNative.NativeModules.NativeAnimatedHelper = {
    startAnimatingNode: jest.fn(),
    stopAnimation: jest.fn()
  };
  return reactNative;
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  });
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return {
    __esModule: true,
    default: 'MockedMaterialCommunityIcons'
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var RN = require('react-native');
  return {
    TextInput: function MockTextInput(props) {
      var label = props.label,
        testID = props.testID,
        onChangeText = props.onChangeText,
        value = props.value,
        restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
      return React.createElement(RN.TextInput, Object.assign({
        testID: testID || 'text-input',
        onChangeText: onChangeText,
        value: value,
        placeholder: label || props.placeholder,
        accessibilityLabel: label,
        editable: props.editable !== false,
        accessible: true
      }, restProps));
    },
    Button: function MockButton(props) {
      return React.createElement(RN.TouchableOpacity, Object.assign({
        testID: props.testID,
        onPress: props.onPress,
        accessible: true,
        accessibilityRole: 'button'
      }, props), React.createElement(RN.Text, null, props.children));
    },
    Chip: function MockChip(props) {
      return React.createElement(RN.TouchableOpacity, Object.assign({
        testID: props.testID,
        onPress: props.onPress,
        style: [{
          borderRadius: 20,
          padding: 8,
          margin: 4
        }, props.style]
      }, props), React.createElement(RN.Text, null, props.children));
    },
    Text: function MockText(props) {
      return React.createElement(RN.Text, props);
    },
    ActivityIndicator: function MockActivityIndicator(props) {
      return React.createElement(RN.ActivityIndicator, props);
    },
    Provider: function MockProvider(_ref3) {
      var children = _ref3.children;
      return children;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["label", "testID", "onChangeText", "value"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var React = require('react');
var ReactNative = require('react-native');
var NativeModules = ReactNative.NativeModules,
  TextInput = ReactNative.TextInput,
  TouchableOpacity = ReactNative.TouchableOpacity,
  RNText = ReactNative.Text,
  View = ReactNative.View;
require('react-native-gesture-handler/jestSetup');
var configure;
try {
  var rtl = require('@testing-library/react-native');
  configure = rtl.configure;
  require('@testing-library/jest-native/extend-expect');
  if (configure) {
    configure({
      asyncUtilTimeout: 10000
    });
  }
} catch (error) {
  console.warn('Testing library not loaded:', error);
}
NativeModules.RNCNetInfo = {
  getCurrentState: jest.fn(function () {
    return Promise.resolve();
  }),
  addListener: jest.fn(),
  removeListeners: jest.fn()
};
var originalConsoleError = console.error;
console.error = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (typeof args[0] === 'string' && (args[0].includes('act(') || args[0].includes('inside a test was not wrapped in act') || args[0].includes('unmounted component') || args[0].includes('감정 로드 오류') || args[0].includes('챌린지 데이터 로딩 오류') || args[0].includes('Error: API 오류'))) {
    return;
  }
  originalConsoleError.apply(void 0, args);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,