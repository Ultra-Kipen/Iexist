ace83d9cfde71a6c4df8e39c8768867c
_getJestObj().mock('../../src/services/api/notificationService', function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    deleteNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _useNotification = (0, _NotificationContext.useNotification)(),
    notifications = _useNotification.notifications,
    unreadCount = _useNotification.unreadCount,
    isLoading = _useNotification.isLoading,
    error = _useNotification.error,
    markAsRead = _useNotification.markAsRead,
    markAllAsRead = _useNotification.markAllAsRead,
    deleteNotification = _useNotification.deleteNotification;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: "loading",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: isLoading ? 'loading' : 'not-loading'
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: "error",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: error || 'no-error'
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: "unread-count",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: unreadCount.toString()
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      testID: "notifications-count",
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: notifications.length.toString()
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "mark-read",
      onPress: function onPress() {
        return markAsRead(1);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "mark-all-read",
      onPress: function onPress() {
        return markAllAsRead();
      }
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "delete-notification",
      onPress: function onPress() {
        return deleteNotification(1);
      }
    })]
  });
};
describe('NotificationContext', function () {
  var mockNotifications = [{
    id: 1,
    user_id: 1,
    content: 'Test notification 1',
    notification_type: 'like',
    is_read: false,
    created_at: '2024-01-01T00:00:00Z'
  }, {
    id: 2,
    user_id: 1,
    content: 'Test notification 2',
    notification_type: 'comment',
    is_read: true,
    created_at: '2024-01-02T00:00:00Z'
  }];
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
    _notificationService.default.getNotifications.mockResolvedValue({
      data: mockNotifications
    });
    _notificationService.default.markAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.deleteNotification.mockResolvedValue({
      success: true
    });
  });
  afterEach(function () {
    jest.runAllTimers();
    jest.useRealTimers();
  });
  var checkLoadingAndGetTexts = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (renderResult) {
      var loadingText = '',
        notificationsCountText = '',
        unreadCountText = '',
        errorText = '';
      yield (0, _reactNative2.waitFor)(function () {
        var loadingView = renderResult.getByTestId('loading');
        var notificationsCountView = renderResult.getByTestId('notifications-count');
        var unreadCountView = renderResult.getByTestId('unread-count');
        var errorView = renderResult.getByTestId('error');
        loadingText = typeof loadingView.children[0] === 'string' ? loadingView.children[0] : loadingView.children[0].props.children;
        notificationsCountText = typeof notificationsCountView.children[0] === 'string' ? notificationsCountView.children[0] : notificationsCountView.children[0].props.children;
        unreadCountText = typeof unreadCountView.children[0] === 'string' ? unreadCountView.children[0] : unreadCountView.children[0].props.children;
        errorText = typeof errorView.children[0] === 'string' ? errorView.children[0] : errorView.children[0].props.children;
        expect(loadingText).toBe('not-loading');
      }, {
        timeout: 10000
      });
      return {
        loadingText: loadingText,
        notificationsCountText: notificationsCountText,
        unreadCountText: unreadCountText,
        errorText: errorText
      };
    });
    return function checkLoadingAndGetTexts(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  it('초기 상태가 올바르게 설정된다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    var _yield$checkLoadingAn = yield checkLoadingAndGetTexts(renderResult),
      loadingText = _yield$checkLoadingAn.loadingText,
      notificationsCountText = _yield$checkLoadingAn.notificationsCountText,
      unreadCountText = _yield$checkLoadingAn.unreadCountText,
      errorText = _yield$checkLoadingAn.errorText;
    expect(notificationsCountText).toBe('2');
    expect(unreadCountText).toBe('1');
    expect(errorText).toBe('no-error');
  }));
  it('알림을 읽음 처리할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield checkLoadingAndGetTexts(renderResult);
    var markReadButton = renderResult.getByTestId('mark-read');
    yield (0, _reactNative2.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative2.fireEvent.press(markReadButton);
    }));
    expect(_notificationService.default.markAsRead).toHaveBeenCalledWith(1);
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('모든 알림을 읽음 처리할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield checkLoadingAndGetTexts(renderResult);
    var markAllReadButton = renderResult.getByTestId('mark-all-read');
    yield (0, _reactNative2.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative2.fireEvent.press(markAllReadButton);
    }));
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('알림을 삭제할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield checkLoadingAndGetTexts(renderResult);
    var deleteButton = renderResult.getByTestId('delete-notification');
    yield (0, _reactNative2.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative2.fireEvent.press(deleteButton);
    }));
    expect(_notificationService.default.deleteNotification).toHaveBeenCalledWith(1);
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,