e982aab795fa25989df264d155a44405
_getJestObj().mock('../../../../src/services/api/client');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _challengeService = _interopRequireDefault(require("../../../../src/services/api/challengeService"));
var _client = _interopRequireDefault(require("../../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockedApiClient = _client.default;
describe('challengeService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('createChallenge', function () {
    it('챌린지 생성에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockChallengeData = {
        title: '긍정 챌린지',
        description: '매일 긍정적인 마인드셋 갖기',
        start_date: '2024-05-01',
        end_date: '2024-05-31',
        is_public: true
      };
      var mockResponse = {
        data: Object.assign({
          id: 1
        }, mockChallengeData)
      };
      mockedApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _challengeService.default.createChallenge(mockChallengeData);
      expect(mockedApiClient.post).toHaveBeenCalledWith('/challenges', mockChallengeData);
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('getChallenges', function () {
    it('챌린지 목록 조회에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockParams = {
        page: 1,
        limit: 10,
        status: 'active'
      };
      var mockResponse = {
        data: [{
          id: 1,
          title: '첫 번째 챌린지'
        }]
      };
      mockedApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _challengeService.default.getChallenges(mockParams);
      expect(mockedApiClient.get).toHaveBeenCalledWith('/challenges', {
        params: mockParams
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('getChallengeDetails', function () {
    it('특정 챌린지 상세 정보 조회에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var challengeId = 1;
      var mockResponse = {
        data: {
          id: challengeId,
          title: '상세 챌린지'
        }
      };
      mockedApiClient.get.mockResolvedValue(mockResponse);
      var result = yield _challengeService.default.getChallengeDetails(challengeId);
      expect(mockedApiClient.get).toHaveBeenCalledWith(`/challenges/${challengeId}`);
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('updateChallengeProgress', function () {
    it('챌린지 진행 상황 업데이트에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var challengeId = 1;
      var progressData = {
        emotion_id: 1,
        progress_note: '오늘도 긍정적인 하루'
      };
      var mockResponse = {
        data: {
          message: '진행 상황 업데이트 성공'
        }
      };
      mockedApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _challengeService.default.updateChallengeProgress(challengeId, progressData);
      expect(mockedApiClient.post).toHaveBeenCalledWith(`/challenges/${challengeId}/progress`, progressData);
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('참여 및 탈퇴', function () {
    it('챌린지 참여에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var challengeId = 1;
      var mockResponse = {
        data: {
          message: '챌린지 참여 성공'
        }
      };
      mockedApiClient.post.mockResolvedValue(mockResponse);
      var result = yield _challengeService.default.participateInChallenge(challengeId);
      expect(mockedApiClient.post).toHaveBeenCalledWith(`/challenges/${challengeId}/participate`);
      expect(result).toEqual(mockResponse);
    }));
    it('챌린지 탈퇴에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var challengeId = 1;
      var mockResponse = {
        data: {
          message: '챌린지 탈퇴 성공'
        }
      };
      mockedApiClient.delete.mockResolvedValue(mockResponse);
      var result = yield _challengeService.default.leaveChallenge(challengeId);
      expect(mockedApiClient.delete).toHaveBeenCalledWith(`/challenges/${challengeId}/participate`);
      expect(result).toEqual(mockResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,