5d607629b66a3642af28ecca56eb5b9f
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock('../../src/store', function () {
  return {
    useStore: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  var reactNative = jest.requireActual('react-native');
  return Object.assign({}, reactNative, {
    Text: function Text(props) {
      return props.children;
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _withAuth = require("../../src/hoc/withAuth");
var _reactNative2 = require("react-native");
var _native = require("@react-navigation/native");
var _store = require("../../src/store");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('withAuth HOC', function () {
  var TestComponent = function TestComponent() {
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uC778\uC99D\uB41C \uCEF4\uD3EC\uB10C\uD2B8"
    });
  };
  var AuthenticatedComponent = (0, _withAuth.withAuth)(TestComponent);
  var mockNavigate = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    _native.useNavigation.mockReturnValue({
      navigate: mockNavigate
    });
  });
  test('인증된 경우 컴포넌트가 렌더링되어야 함', function () {
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: true
      }
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AuthenticatedComponent, {})),
      getByText = _render.getByText;
    expect(getByText('인증된 컴포넌트')).toBeTruthy();
    expect(mockNavigate).not.toHaveBeenCalled();
  });
  test('인증되지 않은 경우 로그인 화면으로 네비게이션되어야 함', function () {
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: false
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AuthenticatedComponent, {})),
      queryByText = _render2.queryByText;
    expect(mockNavigate).toHaveBeenCalledWith('Login');
    expect(queryByText('인증된 컴포넌트')).toBeNull();
  });
  test('HOC가 displayName을 올바르게 설정해야 함', function () {
    expect(AuthenticatedComponent.displayName).toBe('withAuth(TestComponent)');
  });
  test('isAuthenticated 상태가 변경될 때 컴포넌트가 적절하게 리렌더링되어야 함', function () {
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: false
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AuthenticatedComponent, {})),
      queryByText = _render3.queryByText,
      rerender = _render3.rerender;
    expect(queryByText('인증된 컴포넌트')).toBeNull();
    expect(mockNavigate).toHaveBeenCalledWith('Login');
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: true
      }
    });
    rerender((0, _jsxRuntime.jsx)(AuthenticatedComponent, {}));
    expect(queryByText('인증된 컴포넌트')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,