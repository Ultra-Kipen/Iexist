2c3b25868435708c5da969ea993c8c0b
_getJestObj().mock('../../src/navigation/HomeStack', function () {
  return 'MockedHomeStack';
});
_getJestObj().mock('../../src/screens/ComfortScreen', function () {
  return 'MockedComfortScreen';
});
_getJestObj().mock('../../src/screens/ChallengeScreen', function () {
  return 'MockedChallengeScreen';
});
_getJestObj().mock('../../src/screens/ReviewScreen', function () {
  return 'MockedReviewScreen';
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return {
    __esModule: true,
    default: 'MockedIcon'
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate
      };
    }
  });
});
_getJestObj().mock('@react-navigation/bottom-tabs', function () {
  return {
    createBottomTabNavigator: function createBottomTabNavigator() {
      return {
        Navigator: function Navigator(props) {
          mockNavigator(props);
          return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
            children: props.children
          });
        },
        Screen: function Screen(props) {
          mockScreen(props);
          return null;
        }
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MainTabs = _interopRequireDefault(require("../../src/navigation/MainTabs"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockScreen = jest.fn();
var mockNavigator = jest.fn(function (props) {
  return props.children;
});
describe('MainTabs', function () {
  beforeEach(function () {
    mockScreen.mockClear();
    mockNavigator.mockClear();
  });
  it('컴포넌트가 오류 없이 렌더링됨', function () {
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    }).not.toThrow();
  });
  it('네비게이터가 올바른 옵션으로 구성됨', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    expect(mockNavigator).toHaveBeenCalledWith(expect.objectContaining({
      screenOptions: expect.objectContaining({
        tabBarActiveTintColor: '#4a0e4e',
        tabBarInactiveTintColor: '#999'
      })
    }));
  });
  it('홈 탭이 올바르게 구성됨', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    expect(mockScreen).toHaveBeenCalledWith(expect.objectContaining({
      name: 'Home',
      component: 'MockedHomeStack',
      options: expect.objectContaining({
        headerShown: false,
        tabBarLabel: '나의 하루'
      })
    }));
  });
  it('위로와 공감 탭이 올바르게 구성됨', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    expect(mockScreen).toHaveBeenCalledWith(expect.objectContaining({
      name: 'Comfort',
      component: 'MockedComfortScreen',
      options: expect.objectContaining({
        tabBarLabel: '위로와 공감'
      })
    }));
  });
  it('감정 챌린지 탭이 올바르게 구성됨', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    expect(mockScreen).toHaveBeenCalledWith(expect.objectContaining({
      name: 'Challenge',
      component: 'MockedChallengeScreen',
      options: expect.objectContaining({
        tabBarLabel: '감정 챌린지'
      })
    }));
  });
  it('일상 돌아보기 탭이 올바르게 구성됨', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    expect(mockScreen).toHaveBeenCalledWith(expect.objectContaining({
      name: 'Review',
      component: 'MockedReviewScreen',
      options: expect.objectContaining({
        tabBarLabel: '일상 돌아보기'
      })
    }));
  });
  it('모든 탭이 아이콘을 가짐', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MainTabs.default, {}));
    var calls = mockScreen.mock.calls;
    calls.forEach(function (call) {
      var options = call[0].options;
      expect(typeof options.tabBarIcon).toBe('function');
      var iconFn = options.tabBarIcon;
      var result = iconFn({
        color: 'red',
        size: 24
      });
      expect(result).toBeDefined();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,