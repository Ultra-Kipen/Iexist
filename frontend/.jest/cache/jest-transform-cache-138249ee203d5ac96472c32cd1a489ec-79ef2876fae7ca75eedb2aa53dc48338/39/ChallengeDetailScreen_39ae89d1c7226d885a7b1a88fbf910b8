20d4d9691192c79a9cdb1d93325db056
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _challengeService = _interopRequireDefault(require("../services/api/challengeService"));
var _emotionService = _interopRequireDefault(require("../services/api/emotionService"));
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _Button = _interopRequireDefault(require("../components/Button"));
var _Card = _interopRequireDefault(require("../components/Card"));
var _ProfileAvatar = _interopRequireDefault(require("../components/ProfileAvatar"));
var _EmotionSelector = _interopRequireDefault(require("../components/EmotionSelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ChallengeDetailScreen = function ChallengeDetailScreen() {
  var navigation = (0, _native.useNavigation)();
  var route = (0, _native.useRoute)();
  var challengeId = route.params.challengeId;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    challenge = _useState2[0],
    setChallenge = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    emotions = _useState4[0],
    setEmotions = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedEmotionId = _useState6[0],
    setSelectedEmotionId = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    progressNote = _useState8[0],
    setProgressNote = _useState8[1];
  var _useState9 = (0, _react.useState)(true),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    loading = _useState10[0],
    setLoading = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    submitting = _useState12[0],
    setSubmitting = _useState12[1];
  var _useState13 = (0, _react.useState)(null),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    error = _useState14[0],
    setError = _useState14[1];
  (0, _react.useEffect)(function () {
    fetchChallengeData();
    fetchEmotions();
  }, [challengeId]);
  var fetchChallengeData = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        setLoading(true);
        setError(null);
        var response = yield _challengeService.default.getChallengeDetails(challengeId);
        setChallenge(response.data.data);
      } catch (err) {
        console.error('챌린지 데이터 로딩 오류:', err);
        setError('챌린지 정보를 불러오는 중 오류가 발생했습니다.');
      } finally {
        setLoading(false);
      }
    });
    return function fetchChallengeData() {
      return _ref.apply(this, arguments);
    };
  }();
  var fetchEmotions = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield _emotionService.default.getAllEmotions();
        setEmotions(response.data.data);
      } catch (err) {
        console.error('감정 데이터 로딩 오류:', err);
      }
    });
    return function fetchEmotions() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleParticipate = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setSubmitting(true);
        if (challenge != null && challenge.is_participating) {
          yield _challengeService.default.leaveChallenge(challengeId);
          _reactNative.Alert.alert('성공', '챌린지에서 탈퇴했습니다.');
        } else {
          yield _challengeService.default.participateInChallenge(challengeId);
          _reactNative.Alert.alert('성공', '챌린지에 참여했습니다.');
        }
        fetchChallengeData();
      } catch (err) {
        console.error('챌린지 참여/탈퇴 오류:', err);
        _reactNative.Alert.alert('오류', '요청 처리 중 문제가 발생했습니다.');
      } finally {
        setSubmitting(false);
      }
    });
    return function handleParticipate() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleSubmitProgress = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      if (!selectedEmotionId) {
        _reactNative.Alert.alert('알림', '감정을 선택해주세요.');
        return;
      }
      try {
        setSubmitting(true);
        yield _challengeService.default.updateChallengeProgress(challengeId, {
          emotion_id: selectedEmotionId,
          progress_note: progressNote
        });
        _reactNative.Alert.alert('성공', '오늘의 감정이 기록되었습니다.');
        setSelectedEmotionId(null);
        setProgressNote('');
        fetchChallengeData();
      } catch (err) {
        console.error('진행 상황 업데이트 오류:', err);
        _reactNative.Alert.alert('오류', '감정 기록 중 문제가 발생했습니다.');
      } finally {
        setSubmitting(false);
      }
    });
    return function handleSubmitProgress() {
      return _ref4.apply(this, arguments);
    };
  }();
  var handleEmotionSelect = function handleEmotionSelect(emotionId) {
    setSelectedEmotionId(emotionId === selectedEmotionId ? null : emotionId);
  };
  var formatDate = function formatDate(dateString) {
    var date = new Date(dateString);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };
  var calculateDaysLeft = function calculateDaysLeft(endDate) {
    var end = new Date(endDate);
    var today = new Date();
    today.setHours(0, 0, 0, 0);
    var diffTime = end.getTime() - today.getTime();
    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };
  var calculateProgress = function calculateProgress() {
    if (!challenge) return 0;
    var start = new Date(challenge.start_date);
    var end = new Date(challenge.end_date);
    var today = new Date();
    var totalDays = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
    var passedDays = Math.ceil((today.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
    return Math.min(Math.max(Math.floor(passedDays / totalDays * 100), 0), 100);
  };
  var renderEmptyProgress = function renderEmptyProgress() {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.emptyProgressContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyText,
        children: "\uC544\uC9C1 \uAE30\uB85D\uB41C \uAC10\uC815\uC774 \uC5C6\uC2B5\uB2C8\uB2E4. \uCCAB \uBC88\uC9F8 \uAC10\uC815\uC744 \uAE30\uB85D\uD574\uBCF4\uC138\uC694!"
      })
    });
  };
  var renderParticipant = function renderParticipant(_ref5) {
    var item = _ref5.item;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.participantItem,
      children: (0, _jsxRuntime.jsx)(_ProfileAvatar.default, {
        imageUrl: item.profile_image_url || undefined,
        name: item.nickname || item.username,
        size: 40,
        showName: true
      })
    });
  };
  var renderProgressEntry = function renderProgressEntry(_ref6) {
    var item = _ref6.item;
    return (0, _jsxRuntime.jsxs)(_Card.default, {
      style: styles.progressCard,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.progressEntryHeader,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.progressEntryDate,
          children: formatDate(item.date)
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.emotionTag, {
            backgroundColor: `${item.emotion_color}20`
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.emotionTagText, {
              color: item.emotion_color
            }],
            children: item.emotion_name
          })
        })]
      }), item.note && (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.progressNote,
        children: item.note
      })]
    });
  };
  if (loading) {
    return (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {
      text: "\uCC4C\uB9B0\uC9C0 \uC815\uBCF4 \uB85C\uB529 \uC911..."
    });
  }
  if (error) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: error
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uB2E4\uC2DC \uC2DC\uB3C4",
        onPress: fetchChallengeData,
        type: "primary"
      })]
    });
  }
  if (!challenge) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: "\uCC4C\uB9B0\uC9C0 \uC815\uBCF4\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uB4A4\uB85C \uAC00\uAE30",
        onPress: function onPress() {
          return navigation.goBack();
        },
        type: "primary"
      })]
    });
  }
  var daysLeft = calculateDaysLeft(challenge.end_date);
  var challengeProgress = calculateProgress();
  var isActive = daysLeft >= 0;
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: challenge.title
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.creatorContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.createdBy,
          children: "\uB9CC\uB4E0 \uC0AC\uB78C: "
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.creatorName,
          children: challenge.creator.nickname || challenge.creator.username
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.dateContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.date,
          children: [formatDate(challenge.start_date), " ~ ", formatDate(challenge.end_date)]
        }), isActive ? (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.daysLeft,
          children: ["D-", daysLeft]
        }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.ended,
          children: "\uC885\uB8CC\uB428"
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.progressBarContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.progressBar, {
            width: `${challengeProgress}%`
          }]
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.progressText,
          children: [challengeProgress, "% \uC9C4\uD589"]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.description,
        children: challenge.description
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: challenge.is_participating ? '챌린지 나가기' : '챌린지 참여하기',
        onPress: handleParticipate,
        type: challenge.is_participating ? 'outline' : 'primary',
        loading: submitting,
        disabled: !isActive && !challenge.is_participating
      })]
    }), challenge.is_participating && isActive && (0, _jsxRuntime.jsxs)(_Card.default, {
      title: "\uC624\uB298\uC758 \uAC10\uC815 \uAE30\uB85D",
      children: [(0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: emotions.map(function (emotion) {
          return {
            id: emotion.emotion_id,
            name: emotion.name,
            icon: emotion.icon,
            color: emotion.color
          };
        }),
        selectedEmotions: selectedEmotionId ? [selectedEmotionId] : [],
        onSelect: handleEmotionSelect,
        multiple: false
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uAC10\uC815 \uAE30\uB85D\uD558\uAE30",
        onPress: handleSubmitProgress,
        type: "primary",
        loading: submitting,
        disabled: !selectedEmotionId,
        style: styles.submitButton
      })]
    }), (0, _jsxRuntime.jsx)(_Card.default, {
      title: `참여자 (${challenge.participant_count}명)`,
      children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
        data: challenge.participants,
        renderItem: renderParticipant,
        keyExtractor: function keyExtractor(item) {
          return item.user_id.toString();
        },
        horizontal: true,
        showsHorizontalScrollIndicator: false,
        contentContainerStyle: styles.participantsContainer,
        ListEmptyComponent: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.emptyText,
          children: "\uC544\uC9C1 \uCC38\uC5EC\uC790\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4."
        })
      })
    }), (0, _jsxRuntime.jsx)(_Card.default, {
      title: "\uAC10\uC815 \uAE30\uB85D \uB0B4\uC5ED",
      children: challenge.progress_entries.length > 0 ? (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
        data: challenge.progress_entries,
        renderItem: renderProgressEntry,
        keyExtractor: function keyExtractor(item, index) {
          return `${item.date}-${index}`;
        },
        scrollEnabled: false
      }) : renderEmptyProgress()
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F7F7F7'
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 16,
    paddingVertical: 20,
    marginBottom: 12
  },
  title: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333333',
    marginBottom: 12
  },
  creatorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8
  },
  createdBy: {
    fontSize: 14,
    color: '#666666'
  },
  creatorName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333333'
  },
  dateContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  date: {
    fontSize: 14,
    color: '#666666'
  },
  daysLeft: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#4A90E2'
  },
  ended: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#FF6B6B'
  },
  progressBarContainer: {
    height: 6,
    backgroundColor: '#E0E0E0',
    borderRadius: 3,
    marginVertical: 12,
    position: 'relative'
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#4A90E2',
    borderRadius: 3
  },
  progressText: {
    position: 'absolute',
    top: 10,
    right: 0,
    fontSize: 12,
    color: '#666666'
  },
  description: {
    fontSize: 14,
    color: '#333333',
    lineHeight: 20,
    marginBottom: 16
  },
  participantsContainer: {
    paddingVertical: 8
  },
  participantItem: {
    marginRight: 16
  },
  progressCard: {
    marginBottom: 8
  },
  progressEntryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8
  },
  progressEntryDate: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333333'
  },
  emotionTag: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 16
  },
  emotionTagText: {
    fontSize: 12,
    fontWeight: '500'
  },
  progressNote: {
    fontSize: 14,
    color: '#666666',
    lineHeight: 20
  },
  submitButton: {
    marginTop: 16
  },
  emptyProgressContainer: {
    paddingVertical: 20,
    alignItems: 'center'
  },
  emptyText: {
    color: '#999999',
    fontSize: 14,
    textAlign: 'center'
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  errorText: {
    color: '#FF6B6B',
    fontSize: 16,
    marginBottom: 16,
    textAlign: 'center'
  }
});
var _default = exports.default = ChallengeDetailScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,