840919edfaaa5caaf208db5ea8a6f425
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areCompositeKeysEqual = areCompositeKeysEqual;
exports.createCompositeKeyForProps = createCompositeKeyForProps;
exports.useAnimatedPropsMemo = useAnimatedPropsMemo;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _AnimatedEvent = require("../../../Libraries/Animated/AnimatedEvent");
var _AnimatedNode = _interopRequireDefault(require("../../../Libraries/Animated/nodes/AnimatedNode"));
var _AnimatedObject = require("../../../Libraries/Animated/nodes/AnimatedObject");
var _flattenStyle = _interopRequireDefault(require("../../../Libraries/StyleSheet/flattenStyle"));
var _nullthrows = _interopRequireDefault(require("nullthrows"));
var _react = require("react");
var _Object$hasOwn;
function useAnimatedPropsMemo(create, _ref) {
  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    allowlist = _ref2[0],
    props = _ref2[1];
  var compositeKey = (0, _react.useMemo)(function () {
    return createCompositeKeyForProps(props, allowlist);
  }, [allowlist, props]);
  var _useState = (0, _react.useState)(function () {
      return {
        allowlist: allowlist,
        compositeKey: compositeKey,
        value: create()
      };
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  if (state.allowlist !== allowlist || !areCompositeKeysEqual(state.compositeKey, compositeKey)) {
    setState({
      allowlist: allowlist,
      compositeKey: compositeKey,
      value: create()
    });
  }
  return state.value;
}
function createCompositeKeyForProps(props, allowlist) {
  var compositeKey = null;
  var keys = Object.keys(props);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    var value = props[key];
    if (allowlist == null || hasOwn(allowlist, key)) {
      var compositeKeyComponent = void 0;
      if (key === 'style') {
        var flatStyle = (0, _flattenStyle.default)(value);
        if (flatStyle != null) {
          compositeKeyComponent = createCompositeKeyForObject(flatStyle, allowlist == null ? void 0 : allowlist.style);
        }
      } else if (value instanceof _AnimatedNode.default || value instanceof _AnimatedEvent.AnimatedEvent) {
        compositeKeyComponent = value;
      } else if (Array.isArray(value)) {
        compositeKeyComponent = allowlist == null ? value : createCompositeKeyForArray(value);
      } else if ((0, _AnimatedObject.isPlainObject)(value)) {
        compositeKeyComponent = allowlist == null ? value : createCompositeKeyForObject(value);
      }
      if (compositeKeyComponent != null) {
        if (compositeKey == null) {
          compositeKey = {};
        }
        compositeKey[key] = compositeKeyComponent;
      }
    }
  }
  return compositeKey;
}
function createCompositeKeyForArray(array) {
  var compositeKey = null;
  for (var ii = 0, length = array.length; ii < length; ii++) {
    var value = array[ii];
    var compositeKeyComponent = void 0;
    if (value instanceof _AnimatedNode.default) {
      compositeKeyComponent = value;
    } else if (Array.isArray(value)) {
      compositeKeyComponent = createCompositeKeyForArray(value);
    } else if ((0, _AnimatedObject.isPlainObject)(value)) {
      compositeKeyComponent = createCompositeKeyForObject(value);
    }
    if (compositeKeyComponent != null) {
      if (compositeKey == null) {
        compositeKey = new Array(array.length).fill(null);
      }
      compositeKey[ii] = compositeKeyComponent;
    }
  }
  return compositeKey;
}
function createCompositeKeyForObject(object, allowlist) {
  var compositeKey = null;
  var keys = Object.keys(object);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    if (allowlist == null || hasOwn(allowlist, key)) {
      var value = object[key];
      var compositeKeyComponent = void 0;
      if (value instanceof _AnimatedNode.default) {
        compositeKeyComponent = value;
      } else if (Array.isArray(value)) {
        compositeKeyComponent = createCompositeKeyForArray(value);
      } else if ((0, _AnimatedObject.isPlainObject)(value)) {
        compositeKeyComponent = createCompositeKeyForObject(value);
      }
      if (compositeKeyComponent != null) {
        if (compositeKey == null) {
          compositeKey = {};
        }
        compositeKey[key] = compositeKeyComponent;
      }
    }
  }
  return compositeKey;
}
function areCompositeKeysEqual(maybePrev, maybeNext, allowlist) {
  if (maybePrev === maybeNext) {
    return true;
  }
  if (maybePrev === null || maybeNext === null) {
    return false;
  }
  var prev = maybePrev;
  var next = maybeNext;
  var keys = Object.keys(prev);
  var length = keys.length;
  if (length !== Object.keys(next).length) {
    return false;
  }
  for (var ii = 0; ii < length; ii++) {
    var key = keys[ii];
    if (!hasOwn(next, key)) {
      return false;
    }
    var prevComponent = prev[key];
    var nextComponent = next[key];
    if (key === 'style') {
      if (!areCompositeKeyComponentsEqual(prevComponent, nextComponent)) {
        return false;
      }
    } else if (prevComponent instanceof _AnimatedNode.default || prevComponent instanceof _AnimatedEvent.AnimatedEvent) {
      if (prevComponent !== nextComponent) {
        return false;
      }
    } else {
      if (allowlist == null) {
        if (prevComponent !== nextComponent) {
          return false;
        }
      } else {
        if (!areCompositeKeyComponentsEqual(prevComponent, nextComponent)) {
          return false;
        }
      }
    }
  }
  return true;
}
function areCompositeKeyComponentsEqual(prev, next) {
  if (prev === next) {
    return true;
  }
  if (prev instanceof _AnimatedNode.default) {
    return prev === next;
  }
  if (Array.isArray(prev)) {
    if (!Array.isArray(next)) {
      return false;
    }
    var length = prev.length;
    if (length !== next.length) {
      return false;
    }
    for (var ii = 0; ii < length; ii++) {
      if (!areCompositeKeyComponentsEqual(prev[ii], next[ii])) {
        return false;
      }
    }
    return true;
  }
  if ((0, _AnimatedObject.isPlainObject)(prev)) {
    if (!(0, _AnimatedObject.isPlainObject)(next)) {
      return false;
    }
    var keys = Object.keys(prev);
    var _length = keys.length;
    if (_length !== Object.keys(next).length) {
      return false;
    }
    for (var _ii = 0; _ii < _length; _ii++) {
      var key = keys[_ii];
      if (!hasOwn((0, _nullthrows.default)(next), key) || !areCompositeKeyComponentsEqual(prev[key], next[key])) {
        return false;
      }
    }
    return true;
  }
  return false;
}
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = (_Object$hasOwn = Object.hasOwn) != null ? _Object$hasOwn : function (obj, prop) {
  return _hasOwnProp.call(obj, prop);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,