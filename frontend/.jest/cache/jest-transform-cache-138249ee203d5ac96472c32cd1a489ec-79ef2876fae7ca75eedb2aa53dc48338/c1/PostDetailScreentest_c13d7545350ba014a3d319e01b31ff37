375401797363d55e2b192b4dd74d6943
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {
          postId: 1
        }
      };
    }
  });
});
_getJestObj().mock('../../src/services/api/postService', function () {
  return {
    getPostById: jest.fn(),
    getComments: jest.fn(),
    likePost: jest.fn(),
    addComment: jest.fn()
  };
});
_getJestObj().mock('../../src/components/LoadingIndicator', function () {
  return {
    __esModule: true,
    default: function MockLoadingIndicator(props) {
      return (0, _jsxRuntime.jsxs)("div", {
        children: ["Loading Component: ", props.text]
      });
    }
  };
});
_getJestObj().mock('../../src/components/ProfileAvatar', function () {
  return {
    __esModule: true,
    default: function MockProfileAvatar(props) {
      return null;
    }
  };
});
_getJestObj().mock('../../src/components/CommentItem', function () {
  return {
    __esModule: true,
    default: function MockCommentItem(props) {
      return null;
    }
  };
});
_getJestObj().mock('../../src/components/Button', function () {
  return {
    __esModule: true,
    default: function MockButton(props) {
      return (0, _jsxRuntime.jsx)("div", {
        onClick: props.onPress,
        children: props.title
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _PostDetailScreen = _interopRequireDefault(require("../../src/screens/PostDetailScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPost = {
  post_id: 1,
  user_id: 101,
  username: 'testuser',
  nickname: '테스트유저',
  content: '테스트 게시물 내용입니다.',
  emotions: [{
    emotion_id: 1,
    name: '행복',
    color: '#FFD700'
  }],
  is_anonymous: false,
  like_count: 5,
  comment_count: 2,
  is_liked: false,
  created_at: new Date().toISOString()
};
var mockComments = [{
  comment_id: 1,
  user_id: 102,
  username: 'commenter',
  nickname: '댓글작성자',
  content: '좋은 글이네요!',
  is_anonymous: false,
  created_at: new Date().toISOString()
}];
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('PostDetailScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getPostById.mockImplementation(function () {
      return new Promise(function () {});
    });
    _postService.default.getComments.mockImplementation(function () {
      return new Promise(function () {});
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_PostDetailScreen.default, {})
      })),
      debug = _render.debug;
    debug();
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
  }));
  it('renders post data successfully', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getPostById.mockResolvedValue({
      data: {
        data: mockPost
      }
    });
    _postService.default.getComments.mockResolvedValue({
      data: {
        data: mockComments
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_PostDetailScreen.default, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getComments).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
  }));
  it('handles error state properly', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getPostById.mockRejectedValue(new Error('API 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_PostDetailScreen.default, {})
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,