927991d638d0306817f9282c8d71abfc
_getJestObj().mock('../../src/utils/cache', function () {
  var mockGlobalCache = {
    get: jest.fn(),
    set: jest.fn(),
    delete: jest.fn(),
    clear: jest.fn()
  };
  var MockMemoryCache = jest.fn().mockImplementation(function () {
    return {
      get: jest.fn(),
      set: jest.fn(),
      delete: jest.fn(),
      clear: jest.fn()
    };
  });
  return {
    globalCache: mockGlobalCache,
    MemoryCache: MockMemoryCache
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useCache = require("../../src/hooks/useCache");
var _cache = require("../../src/utils/cache");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useCache', function () {
  var testKey = 'testKey';
  var testData = {
    id: 1,
    name: 'Test Data'
  };
  var mockFetchFn;
  beforeEach(function () {
    jest.clearAllMocks();
    mockFetchFn = jest.fn().mockResolvedValue(testData);
  });
  it('캐시에 데이터가 없으면 fetchFn을 호출한다', (0, _asyncToGenerator2.default)(function* () {
    _cache.globalCache.get.mockReturnValue(undefined);
    var hookResult;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      hookResult = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn);
      });
    }));
    var _ref3 = hookResult,
      result = _ref3.result;
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toEqual(testData);
    expect(result.current.error).toBeNull();
    expect(mockFetchFn).toHaveBeenCalledTimes(1);
    expect(_cache.globalCache.set).toHaveBeenCalledWith(testKey, testData, undefined);
  }));
  it('캐시에 데이터가 있으면 fetchFn을 호출하지 않는다', (0, _asyncToGenerator2.default)(function* () {
    _cache.globalCache.get.mockReturnValue(testData);
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn);
      }),
      result = _renderHook.result;
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toEqual(testData);
    expect(result.current.error).toBeNull();
    expect(mockFetchFn).not.toHaveBeenCalled();
  }));
  it('refetch 함수로 데이터를 강제로 다시 가져올 수 있다', (0, _asyncToGenerator2.default)(function* () {
    _cache.globalCache.get.mockReturnValue(testData);
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn);
      }),
      result = _renderHook2.result;
    expect(result.current.data).toEqual(testData);
    var newData = {
      id: 2,
      name: 'New Test Data'
    };
    mockFetchFn.mockResolvedValueOnce(newData);
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.refetch(true);
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toEqual(newData);
    expect(mockFetchFn).toHaveBeenCalledTimes(1);
    expect(_cache.globalCache.set).toHaveBeenCalledWith(testKey, newData, undefined);
  }));
  it('invalidateCache 함수로 캐시를 무효화하고 데이터를 다시 가져올 수 있다', (0, _asyncToGenerator2.default)(function* () {
    _cache.globalCache.get.mockReturnValue(testData);
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn);
      }),
      result = _renderHook3.result;
    expect(result.current.data).toEqual(testData);
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.invalidateCache();
    }));
    expect(_cache.globalCache.delete).toHaveBeenCalledWith(testKey);
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toEqual(testData);
    expect(mockFetchFn).toHaveBeenCalledTimes(1);
  }));
  it('fetchFn 오류 시 에러 상태를 설정한다', (0, _asyncToGenerator2.default)(function* () {
    _cache.globalCache.get.mockReturnValue(undefined);
    var testError = new Error('데이터 로드 실패');
    var errorMockFetch = jest.fn().mockRejectedValue(testError);
    var hookResult;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      hookResult = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, errorMockFetch);
      });
    }));
    var _ref11 = hookResult,
      result = _ref11.result;
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toBeUndefined();
    expect(result.current.error).toEqual(testError);
    expect(_cache.globalCache.set).not.toHaveBeenCalled();
  }));
  it('ttl 옵션을 캐시 설정에 적용한다', (0, _asyncToGenerator2.default)(function* () {
    _cache.globalCache.get.mockReturnValue(undefined);
    var ttl = 60000;
    var hookResult;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      hookResult = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn, {
          ttl: ttl
        });
      });
    }));
    expect(_cache.globalCache.set).toHaveBeenCalledWith(testKey, testData, ttl);
  }));
  it('autoLoad=false 옵션으로 자동 로드를 비활성화할 수 있다', function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn, {
          autoLoad: false
        });
      }),
      result = _renderHook4.result;
    expect(mockFetchFn).not.toHaveBeenCalled();
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toBeUndefined();
  });
  it('사용자 지정 캐시 인스턴스를 사용할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    var customCache = new _cache.MemoryCache();
    _cache.globalCache.get.mockClear();
    _cache.globalCache.set.mockClear();
    customCache.get.mockReturnValue(undefined);
    var hookResult;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      hookResult = (0, _reactHooks.renderHook)(function () {
        return (0, _useCache.useCache)(testKey, mockFetchFn, {
          cacheInstance: customCache
        });
      });
    }));
    var _ref16 = hookResult,
      result = _ref16.result;
    expect(customCache.get).toHaveBeenCalledWith(testKey);
    expect(customCache.set).toHaveBeenCalledWith(testKey, testData, undefined);
    expect(_cache.globalCache.get).not.toHaveBeenCalled();
    expect(_cache.globalCache.set).not.toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,