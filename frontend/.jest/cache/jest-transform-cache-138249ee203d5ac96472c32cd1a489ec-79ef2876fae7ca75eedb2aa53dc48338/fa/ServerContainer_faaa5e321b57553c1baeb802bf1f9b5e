703a1d4a42f975689fe97375ad71f5da
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerContainer = void 0;
var _core = require("@react-navigation/core");
var React = _interopRequireWildcard(require("react"));
var _ServerContext = require("./ServerContext.js");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ServerContainer = exports.ServerContainer = React.forwardRef(function ServerContainer(_ref, ref) {
  var children = _ref.children,
    location = _ref.location;
  React.useEffect(function () {
    console.error("'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.");
  }, []);
  var current = {};
  if (ref) {
    var value = {
      getCurrentOptions: function getCurrentOptions() {
        return current.options;
      }
    };
    if (typeof ref === 'function') {
      ref(value);
    } else {
      ref.current = value;
    }
  }
  return ((0, _jsxRuntime.jsx)(_ServerContext.ServerContext.Provider, {
      value: {
        location: location
      },
      children: (0, _jsxRuntime.jsx)(_core.CurrentRenderContext.Provider, {
        value: current,
        children: children
      })
    })
  );
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX1NlcnZlckNvbnRleHQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlNlcnZlckNvbnRhaW5lciIsImV4cG9ydHMiLCJmb3J3YXJkUmVmIiwiX3JlZiIsInJlZiIsImNoaWxkcmVuIiwibG9jYXRpb24iLCJ1c2VFZmZlY3QiLCJjb25zb2xlIiwiZXJyb3IiLCJjdXJyZW50IiwidmFsdWUiLCJnZXRDdXJyZW50T3B0aW9ucyIsIm9wdGlvbnMiLCJfanN4IiwiU2VydmVyQ29udGV4dCIsIlByb3ZpZGVyIiwiQ3VycmVudFJlbmRlckNvbnRleHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvU2VydmVyQ29udGFpbmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsY0FBQSxHQUFBSCxPQUFBO0FBQXdFLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUFBLFNBQUFLLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSix3QkFBQUksQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFjakUsSUFBTVcsZUFBZSxHQUFBQyxPQUFBLENBQUFELGVBQUEsR0FBR3hCLEtBQUssQ0FBQzBCLFVBQVUsQ0FBQyxTQUFTRixlQUFlQSxDQUFBRyxJQUFBLEVBRXRFQyxHQUFrQyxFQUNsQztFQUFBLElBRkVDLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO0lBQUVDLFFBQUEsR0FBQUgsSUFBQSxDQUFBRyxRQUFBO0VBR1o5QixLQUFLLENBQUMrQixTQUFTLENBQUMsWUFBTTtJQUNwQkMsT0FBTyxDQUFDQyxLQUFLLENBQ1gsc0ZBQ0YsQ0FBQztFQUNILENBQUMsRUFBRSxFQUFFLENBQUM7RUFHTixJQUFNQyxPQUE2QixHQUFHLENBQUMsQ0FBQztFQUV4QyxJQUFJTixHQUFHLEVBQUU7SUFDUCxJQUFNTyxLQUFLLEdBQUc7TUFDWkMsaUJBQWlCLFdBQWpCQSxpQkFBaUJBLENBQUEsRUFBRztRQUNsQixPQUFPRixPQUFPLENBQUNHLE9BQU87TUFDeEI7SUFDRixDQUFDO0lBTUQsSUFBSSxPQUFPVCxHQUFHLEtBQUssVUFBVSxFQUFFO01BQzdCQSxHQUFHLENBQUNPLEtBQUssQ0FBQztJQUNaLENBQUMsTUFBTTtNQUVMUCxHQUFHLENBQUNNLE9BQU8sR0FBR0MsS0FBSztJQUNyQjtFQUNGO0VBRUEsUUFFRSxJQUFBRyxlQUFBLEVBQUNDLDRCQUFhLENBQUNDLFFBQVE7TUFBQ0wsS0FBSyxFQUFFO1FBQUVMLFFBQUEsRUFBQUE7TUFBUyxDQUFFO01BQUFELFFBQUEsRUFDMUMsSUFBQVMsZUFBQSxFQUFDRywwQkFBb0IsQ0FBQ0QsUUFBUTtRQUFDTCxLQUFLLEVBQUVELE9BQVE7UUFBQUwsUUFBQSxFQUMzQ0E7TUFBUSxDQUNvQjtJQUFDLENBQ1Y7RUFBQTtBQUU1QixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=