3c8964ff47928cf24892b552cb54e247
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return jest.fn(function (_ref) {
    var name = _ref.name;
    return '<Icon name="' + name + '" />';
  });
});
_getJestObj().mock('../../src/contexts/NotificationContext', function () {
  return {
    useNotification: function useNotification() {
      return {
        markAsRead: jest.fn().mockResolvedValue(undefined),
        deleteNotification: jest.fn().mockResolvedValue(undefined)
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn()
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _NotificationItem = _interopRequireDefault(require("../../src/components/NotificationItem"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(jest.fn());
describe('NotificationItem', function () {
  var mockNotification = {
    id: 1,
    user_id: 1,
    content: '새로운 댓글이 달렸습니다.',
    notification_type: 'comment',
    related_id: 123,
    is_read: false,
    created_at: new Date().toISOString()
  };
  var mockOnPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders notification content correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
        notification: mockNotification,
        onPress: mockOnPress
      })),
      getByText = _render.getByText;
    expect(getByText('새로운 댓글이 달렸습니다.')).toBeTruthy();
    expect(getByText('방금 전')).toBeTruthy();
  });
  it('displays different icon based on notification type', function () {
    var types = [{
      type: 'like',
      expectedIcon: 'heart-outline'
    }, {
      type: 'comment',
      expectedIcon: 'comment-outline'
    }, {
      type: 'challenge',
      expectedIcon: 'trophy-outline'
    }, {
      type: 'system',
      expectedIcon: 'bell-outline'
    }];
    types.forEach(function (_ref2) {
      var type = _ref2.type,
        expectedIcon = _ref2.expectedIcon;
      var notification = Object.assign({}, mockNotification, {
        notification_type: type
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
          notification: notification
        })),
        UNSAFE_root = _render2.UNSAFE_root;
      var iconElements = UNSAFE_root.findAll(function (node) {
        return node.props && node.props.name === expectedIcon;
      });
      expect(iconElements.length).toBeGreaterThan(0);
    });
  });
  it('formats relative time correctly', function () {
    var fiveMinutesAgo = new Date();
    fiveMinutesAgo.setMinutes(fiveMinutesAgo.getMinutes() - 5);
    var notification = Object.assign({}, mockNotification, {
      created_at: fiveMinutesAgo.toISOString()
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
        notification: notification
      })),
      getByText = _render3.getByText;
    expect(getByText('5분 전')).toBeTruthy();
  });
  it('displays unread indicator for unread notifications', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
        notification: mockNotification
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('unread-indicator')).toBeTruthy();
  });
  it('does not display unread indicator for read notifications', function () {
    var readNotification = Object.assign({}, mockNotification, {
      is_read: true
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
        notification: readNotification
      })),
      queryByTestId = _render5.queryByTestId;
    expect(queryByTestId('unread-indicator')).toBeNull();
  });
  it('calls onPress when notification is tapped', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
        notification: mockNotification,
        onPress: mockOnPress
      })),
      getByTestId = _render6.getByTestId;
    var notificationItem = getByTestId('notification-item');
    _reactNative.fireEvent.press(notificationItem);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('shows alert when long pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationItem.default, {
        notification: mockNotification
      })),
      getByTestId = _render7.getByTestId;
    (0, _reactNative.fireEvent)(getByTestId('notification-item'), 'onLongPress');
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림 삭제', '이 알림을 삭제하시겠습니까?', expect.arrayContaining([expect.objectContaining({
      text: '취소'
    }), expect.objectContaining({
      text: '삭제'
    })]));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,