c60efc1075ef1645505691146b893e3f
_getJestObj().mock('@react-native-community/datetimepicker', function () {
  var React = require('react');
  return function MockDateTimePicker(props) {
    return React.createElement('DateTimePicker', props, props.children);
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        goBack: jest.fn(),
        navigate: jest.fn()
      };
    }
  };
});
_getJestObj().mock('../../src/services/api/challengeService', function () {
  return {
    createChallenge: function createChallenge() {
      return mockCreateChallenge.apply(void 0, arguments);
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _CreateChallengeScreen = _interopRequireDefault(require("../../src/screens/CreateChallengeScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockCreateChallenge = jest.fn();
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('CreateChallengeScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockCreateChallenge.mockResolvedValue({
      data: {
        data: {
          challenge_id: 1,
          title: '테스트 챌린지',
          description: '테스트 설명',
          start_date: '2025-04-26',
          end_date: '2025-05-03',
          is_public: true
        }
      }
    });
  });
  it('submits form successfully', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CreateChallengeScreen.default, {})),
      getByText = _render.getByText,
      getByPlaceholderText = _render.getByPlaceholderText;
    _reactNative.fireEvent.changeText(getByPlaceholderText('챌린지 제목을 입력하세요'), '테스트 챌린지');
    _reactNative.fireEvent.changeText(getByPlaceholderText('챌린지에 대한 설명을 입력하세요'), '테스트 설명');
    _reactNative.fireEvent.press(getByText('챌린지 만들기'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockCreateChallenge).toHaveBeenCalledWith(expect.objectContaining({
        title: '테스트 챌린지',
        description: '테스트 설명'
      }));
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('챌린지 생성 완료', '새로운 챌린지가 생성되었습니다!', expect.any(Array));
  }));
  it('handles error during submission', (0, _asyncToGenerator2.default)(function* () {
    mockCreateChallenge.mockRejectedValueOnce(new Error('API 오류'));
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CreateChallengeScreen.default, {})),
      getByText = _render2.getByText,
      getByPlaceholderText = _render2.getByPlaceholderText;
    _reactNative.fireEvent.changeText(getByPlaceholderText('챌린지 제목을 입력하세요'), '테스트 챌린지');
    _reactNative.fireEvent.changeText(getByPlaceholderText('챌린지에 대한 설명을 입력하세요'), '테스트 설명');
    _reactNative.fireEvent.press(getByText('챌린지 만들기'));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockCreateChallenge).toHaveBeenCalledWith(expect.objectContaining({
        title: '테스트 챌린지',
        description: '테스트 설명'
      }));
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '챌린지 생성 중 문제가 발생했습니다.');
  }));
  it('validates form before submission', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CreateChallengeScreen.default, {})),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('챌린지 만들기'));
    expect(getByText('제목을 입력해주세요.')).toBeTruthy();
    expect(mockCreateChallenge).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,