{"version":3,"names":["_getJestObj","mock","React","require","MockDateTimePicker","props","createElement","children","useNavigation","goBack","jest","fn","navigate","createChallenge","mockCreateChallenge","apply","arguments","_interopRequireDefault","_asyncToGenerator2","_react","_reactNative","_reactNative2","_CreateChallengeScreen","_jsxRuntime","_require","spyOn","Alert","mockImplementation","describe","beforeEach","clearAllMocks","mockResolvedValue","data","challenge_id","title","description","start_date","end_date","is_public","it","default","_render","render","jsx","getByText","getByPlaceholderText","fireEvent","changeText","press","waitFor","expect","toHaveBeenCalledWith","objectContaining","alert","any","Array","mockRejectedValueOnce","Error","_render2","_render3","toBeTruthy","not","toHaveBeenCalled"],"sources":["CreateChallengeScreen.test.tsx"],"sourcesContent":["// __tests__/screens/CreateChallengeScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\n\r\n// DateTimePicker 모킹\r\njest.mock('@react-native-community/datetimepicker', () => {\r\n  const React = require('react');\r\n  return function MockDateTimePicker(props: { children: any; }) {\r\n    return React.createElement('DateTimePicker', props, props.children);\r\n  };\r\n});\r\n\r\n// 필요한 모듈 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    goBack: jest.fn(),\r\n    navigate: jest.fn(),\r\n  }),\r\n}));\r\n\r\n// challengeService 모킹\r\nconst mockCreateChallenge = jest.fn();\r\njest.mock('../../src/services/api/challengeService', () => ({\r\n  createChallenge: (...args: any) => mockCreateChallenge(...args),\r\n}));\r\n\r\n// Alert.alert 모킹\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\n// 실제 컴포넌트 임포트는 모킹 후에 해야 함\r\nimport CreateChallengeScreen from '../../src/screens/CreateChallengeScreen';\r\n\r\ndescribe('CreateChallengeScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    mockCreateChallenge.mockResolvedValue({\r\n      data: {\r\n        data: {\r\n          challenge_id: 1,\r\n          title: '테스트 챌린지',\r\n          description: '테스트 설명',\r\n          start_date: '2025-04-26',\r\n          end_date: '2025-05-03',\r\n          is_public: true,\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  it('submits form successfully', async () => {\r\n    const { getByText, getByPlaceholderText } = render(<CreateChallengeScreen />);\r\n    \r\n    // 폼 입력\r\n    fireEvent.changeText(getByPlaceholderText('챌린지 제목을 입력하세요'), '테스트 챌린지');\r\n    fireEvent.changeText(getByPlaceholderText('챌린지에 대한 설명을 입력하세요'), '테스트 설명');\r\n    \r\n    // 폼 제출\r\n    fireEvent.press(getByText('챌린지 만들기'));\r\n    \r\n    // API 호출 확인\r\n    await waitFor(() => {\r\n      expect(mockCreateChallenge).toHaveBeenCalledWith(expect.objectContaining({\r\n        title: '테스트 챌린지',\r\n        description: '테스트 설명',\r\n      }));\r\n    });\r\n    \r\n    // Alert 호출 검증\r\n    expect(Alert.alert).toHaveBeenCalledWith(\r\n      '챌린지 생성 완료',\r\n      '새로운 챌린지가 생성되었습니다!',\r\n      expect.any(Array)\r\n    );\r\n  });\r\n\r\n  it('handles error during submission', async () => {\r\n    mockCreateChallenge.mockRejectedValueOnce(new Error('API 오류'));\r\n    \r\n    const { getByText, getByPlaceholderText } = render(<CreateChallengeScreen />);\r\n    \r\n    // 폼 입력\r\n    fireEvent.changeText(getByPlaceholderText('챌린지 제목을 입력하세요'), '테스트 챌린지');\r\n    fireEvent.changeText(getByPlaceholderText('챌린지에 대한 설명을 입력하세요'), '테스트 설명');\r\n    \r\n    // 폼 제출\r\n    fireEvent.press(getByText('챌린지 만들기'));\r\n    \r\n    // API 호출 확인\r\n    await waitFor(() => {\r\n      expect(mockCreateChallenge).toHaveBeenCalledWith(expect.objectContaining({\r\n        title: '테스트 챌린지',\r\n        description: '테스트 설명',\r\n      }));\r\n    });\r\n    \r\n    // Alert 호출 검증\r\n    expect(Alert.alert).toHaveBeenCalledWith(\r\n      '오류',\r\n      '챌린지 생성 중 문제가 발생했습니다.'\r\n    );\r\n  });\r\n\r\n  it('validates form before submission', () => {\r\n    const { getByText } = render(<CreateChallengeScreen />);\r\n    \r\n    // 폼 제출 시도 (입력 없이)\r\n    fireEvent.press(getByText('챌린지 만들기'));\r\n    \r\n    // 에러 메시지 확인\r\n    expect(getByText('제목을 입력해주세요.')).toBeTruthy();\r\n    \r\n    // API가 호출되지 않았는지 확인\r\n    expect(mockCreateChallenge).not.toHaveBeenCalled();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}