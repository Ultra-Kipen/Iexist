{"version":3,"names":["_getJestObj","mock","get","jest","fn","post","put","delete","_interopRequireDefault","require","_asyncToGenerator2","_notificationService","_client","_require","describe","beforeEach","clearAllMocks","it","default","mockNotifications","id","content","notification_type","is_read","created_at","apiClient","mockResolvedValue","data","result","notificationService","getNotifications","expect","toHaveBeenCalledWith","toEqual","error","Error","mockRejectedValue","rejects","toThrow","notificationId","success","markAsRead","count","markAllAsRead","deleteNotification","getUnreadCount","toBe"],"sources":["notificationService.test.ts"],"sourcesContent":["import notificationService from '../../../../src/services/api/notificationService';\r\nimport apiClient from '../../../../src/services/api/client';\r\n\r\n// API 클라이언트 목\r\njest.mock('../../../../src/services/api/client', () => ({\r\n  get: jest.fn(),\r\n  post: jest.fn(),\r\n  put: jest.fn(),\r\n  delete: jest.fn(),\r\n}));\r\n\r\ndescribe('notificationService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('getNotifications', () => {\r\n    it('알림 목록을 올바르게 가져와야 함', async () => {\r\n      const mockNotifications = [\r\n        {\r\n          id: 1,\r\n          content: '게시물에 좋아요를 받았습니다.',\r\n          notification_type: 'like',\r\n          is_read: false,\r\n          created_at: '2025-04-17T12:00:00Z',\r\n        },\r\n        {\r\n          id: 2,\r\n          content: '새로운 댓글이 달렸습니다.',\r\n          notification_type: 'comment',\r\n          is_read: true,\r\n          created_at: '2025-04-16T10:30:00Z',\r\n        },\r\n      ];\r\n\r\n      (apiClient.get as jest.Mock).mockResolvedValue({ data: mockNotifications });\r\n\r\n      const result = await notificationService.getNotifications();\r\n\r\n      expect(apiClient.get).toHaveBeenCalledWith('/notifications');\r\n      expect(result).toEqual(mockNotifications);\r\n    });\r\n\r\n    it('오류 발생 시 적절하게 처리해야 함', async () => {\r\n      const error = new Error('Network Error');\r\n      (apiClient.get as jest.Mock).mockRejectedValue(error);\r\n\r\n      await expect(notificationService.getNotifications()).rejects.toThrow('알림을 가져오는데 실패했습니다.');\r\n    });\r\n  });\r\n\r\n  describe('markAsRead', () => {\r\n    it('알림을 읽음 상태로 표시해야 함', async () => {\r\n      const notificationId = 1;\r\n      (apiClient.put as jest.Mock).mockResolvedValue({\r\n        data: { success: true },\r\n      });\r\n\r\n      const result = await notificationService.markAsRead(notificationId);\r\n\r\n      expect(apiClient.put).toHaveBeenCalledWith(`/notifications/${notificationId}/read`);\r\n      expect(result).toEqual({ success: true });\r\n    });\r\n  });\r\n\r\n  describe('markAllAsRead', () => {\r\n    it('모든 알림을 읽음 상태로 표시해야 함', async () => {\r\n      (apiClient.put as jest.Mock).mockResolvedValue({\r\n        data: { success: true, count: 5 },\r\n      });\r\n\r\n      const result = await notificationService.markAllAsRead();\r\n\r\n      expect(apiClient.put).toHaveBeenCalledWith('/notifications/read-all');\r\n      expect(result).toEqual({ success: true, count: 5 });\r\n    });\r\n  });\r\n\r\n  describe('deleteNotification', () => {\r\n    it('알림을 성공적으로 삭제해야 함', async () => {\r\n      const notificationId = 1;\r\n      (apiClient.delete as jest.Mock).mockResolvedValue({\r\n        data: { success: true },\r\n      });\r\n\r\n      const result = await notificationService.deleteNotification(notificationId);\r\n\r\n      expect(apiClient.delete).toHaveBeenCalledWith(`/notifications/${notificationId}`);\r\n      expect(result).toEqual({ success: true });\r\n    });\r\n  });\r\n\r\n  describe('getUnreadCount', () => {\r\n    it('읽지 않은 알림 개수를 올바르게 가져와야 함', async () => {\r\n      (apiClient.get as jest.Mock).mockResolvedValue({\r\n        data: { count: 3 },\r\n      });\r\n\r\n      const result = await notificationService.getUnreadCount();\r\n\r\n      expect(apiClient.get).toHaveBeenCalledWith('/notifications/unread-count');\r\n      expect(result).toBe(3);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}