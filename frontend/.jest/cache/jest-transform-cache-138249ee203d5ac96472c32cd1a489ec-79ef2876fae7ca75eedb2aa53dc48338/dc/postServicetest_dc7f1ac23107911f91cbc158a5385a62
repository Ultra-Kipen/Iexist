72baeb6403aa0982797cc07ddf2cdec7
_getJestObj().mock('../../../src/services/api/client', function () {
  return {
    post: jest.fn(),
    get: jest.fn(),
    delete: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
var _axiosMockAdapter = _interopRequireDefault(require("axios-mock-adapter"));
var _client = _interopRequireDefault(require("../../../src/services/api/client"));
var _postService = _interopRequireDefault(require("../../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mock = new _axiosMockAdapter.default(_axios.default);
describe('postService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('createPost 메소드가 올바른 데이터로 POST 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var postData = {
      content: '오늘은 행복한 하루였어요',
      emotion_summary: '행복',
      is_anonymous: false,
      emotion_ids: [1, 2]
    };
    var responseData = {
      success: true,
      post_id: 1,
      message: '게시물이 성공적으로 생성되었습니다.'
    };
    _client.default.post.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.createPost(postData);
    expect(response.data).toEqual(responseData);
    expect(_client.default.post).toHaveBeenCalledWith('/posts', postData);
  }), 10000);
  it('getPosts 메소드가 올바른 파라미터로 GET 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var params = {
      page: 1,
      limit: 10,
      emotion: '행복',
      sort_by: 'latest'
    };
    var responseData = {
      success: true,
      posts: [{
        post_id: 1,
        user_id: 1,
        content: '행복한 하루였어요',
        emotion_summary: '행복',
        like_count: 5,
        comment_count: 2,
        created_at: '2025-04-10T12:00:00Z'
      }],
      total_count: 1
    };
    _client.default.get.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.getPosts(params);
    expect(response.data).toEqual(responseData);
    expect(_client.default.get).toHaveBeenCalledWith('/posts', {
      params: params
    });
  }), 10000);
  it('getPostById 메소드가 올바른 경로로 GET 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var responseData = {
      success: true,
      post: {
        post_id: 1,
        user_id: 1,
        content: '행복한 하루였어요',
        emotion_summary: '행복',
        like_count: 5,
        comment_count: 2,
        created_at: '2025-04-10T12:00:00Z'
      }
    };
    _client.default.get.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.getPostById(postId);
    expect(response.data).toEqual(responseData);
    expect(_client.default.get).toHaveBeenCalledWith(`/posts/${postId}`);
  }), 10000);
  it('getMyPosts 메소드가 올바른 파라미터로 GET 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var params = {
      page: 1,
      limit: 5,
      sort_by: 'popular'
    };
    var responseData = {
      success: true,
      posts: [{
        post_id: 2,
        user_id: 1,
        content: '감사한 하루였어요',
        emotion_summary: '감사',
        like_count: 10,
        comment_count: 3,
        created_at: '2025-04-09T14:30:00Z'
      }],
      total_count: 1
    };
    _client.default.get.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.getMyPosts(params);
    expect(response.data).toEqual(responseData);
    expect(_client.default.get).toHaveBeenCalledWith('/posts/me', {
      params: params
    });
  }), 10000);
  it('deletePost 메소드가 올바른 경로로 DELETE 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var responseData = {
      success: true,
      message: '게시물이 성공적으로 삭제되었습니다.'
    };
    _client.default.delete.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.deletePost(postId);
    expect(response.data).toEqual(responseData);
    expect(_client.default.delete).toHaveBeenCalledWith(`/posts/${postId}`);
  }), 10000);
  it('likePost 메소드가 올바른 경로로 POST 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var responseData = {
      success: true,
      like_count: 6,
      message: '좋아요가 추가되었습니다.'
    };
    _client.default.post.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.likePost(postId);
    expect(response.data).toEqual(responseData);
    expect(_client.default.post).toHaveBeenCalledWith(`/posts/${postId}/like`);
  }), 10000);
  it('addComment 메소드가 올바른 데이터로 POST 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var commentData = {
      content: '정말 공감되는 이야기네요!',
      is_anonymous: true
    };
    var responseData = {
      success: true,
      comment_id: 1,
      message: '댓글이 성공적으로 추가되었습니다.'
    };
    _client.default.post.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.addComment(postId, commentData);
    expect(response.data).toEqual(responseData);
    expect(_client.default.post).toHaveBeenCalledWith(`/posts/${postId}/comments`, commentData);
  }), 10000);
  it('getComments 메소드가 올바른 경로로 GET 요청을 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var responseData = {
      success: true,
      comments: [{
        comment_id: 1,
        post_id: 1,
        user_id: 2,
        content: '정말 공감되는 이야기네요!',
        is_anonymous: true,
        created_at: '2025-04-10T13:15:00Z'
      }],
      total_count: 1
    };
    _client.default.get.mockResolvedValue({
      data: responseData
    });
    var response = yield _postService.default.getComments(postId);
    expect(response.data).toEqual(responseData);
    expect(_client.default.get).toHaveBeenCalledWith(`/posts/${postId}/comments`);
  }), 10000);
  it('모든 메소드가 에러를 적절히 처리해야 함', (0, _asyncToGenerator2.default)(function* () {
    var errorResponse = {
      message: '서버 오류가 발생했습니다.',
      status: 500
    };
    var error = new Error('서버 오류가 발생했습니다.');
    error.response = {
      data: errorResponse,
      status: 500
    };
    _client.default.post.mockRejectedValue(error);
    _client.default.get.mockRejectedValue(error);
    _client.default.delete.mockRejectedValue(error);
    yield expect(_postService.default.createPost({
      content: '테스트'
    })).rejects.toThrow();
    yield expect(_postService.default.getPosts()).rejects.toThrow();
    yield expect(_postService.default.getPostById(1)).rejects.toThrow();
    yield expect(_postService.default.getMyPosts()).rejects.toThrow();
    yield expect(_postService.default.deletePost(1)).rejects.toThrow();
    yield expect(_postService.default.likePost(1)).rejects.toThrow();
    yield expect(_postService.default.addComment(1, {
      content: '테스트'
    })).rejects.toThrow();
    yield expect(_postService.default.getComments(1)).rejects.toThrow();
  }), 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,