a74322d396d8ab208599af5bcada7819
_getJestObj().mock('@testing-library/react-hooks', function () {
  var originalModule = jest.requireActual('@testing-library/react-hooks');
  return Object.assign({}, originalModule, {
    renderHook: function renderHook(callback) {
      var result = {
        current: null
      };
      var hookFn = function hookFn() {
        result.current = callback();
        return null;
      };
      return {
        result: result,
        rerender: jest.fn(),
        unmount: jest.fn()
      };
    }
  });
});
_getJestObj().mock('react-native', function () {
  var ReactNative = jest.requireActual('react-native');
  return Object.assign({}, ReactNative, {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      })
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Image: 'Image',
    ScrollView: 'ScrollView',
    TextInput: 'TextInput',
    Alert: {
      alert: jest.fn()
    },
    Animated: {
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              __getValue: jest.fn(function () {
                return 0;
              })
            };
          })
        };
      }),
      View: 'Animated.View',
      Text: 'Animated.Text',
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      })
    },
    TurboModuleRegistry: {
      getEnforcing: jest.fn(function () {
        return {
          show: jest.fn(),
          debugRemotely: jest.fn()
        };
      })
    },
    NativeModules: {
      DevSettings: {
        reload: jest.fn()
      },
      StatusBarManager: {
        getHeight: jest.fn(function (cb) {
          return cb && cb(0);
        })
      }
    }
  });
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    },
    useIsFocused: function useIsFocused() {
      return true;
    }
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(),
    getItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn()
  };
});
_getJestObj().mock('react', function () {
  var originalReact = jest.requireActual('react');
  return Object.assign({}, originalReact, {
    useMemo: jest.fn(function (fn) {
      return fn();
    }),
    useEffect: jest.fn(),
    useLayoutEffect: jest.fn(),
    useContext: jest.fn(function () {
      return {};
    }),
    useReducer: jest.fn(function (reducer, initialState) {
      return [initialState, jest.fn()];
    }),
    useCallback: jest.fn(function (fn) {
      return fn;
    }),
    useState: jest.fn(function (initial) {
      return [initial, jest.fn()];
    }),
    useRef: jest.fn(function (initial) {
      return {
        current: initial
      };
    }),
    createContext: jest.fn(function () {
      return {
        Provider: function Provider(_ref3) {
          var children = _ref3.children;
          return children;
        },
        Consumer: function Consumer(_ref4) {
          var children = _ref4.children;
          return children({});
        }
      };
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var ReactDOM = _interopRequireWildcard(require("react-dom"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
require("@testing-library/jest-native/extend-expect");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var reactDomClient = {
  createRoot: jest.fn(function (container) {
    return {
      render: jest.fn(),
      unmount: jest.fn()
    };
  }),
  hydrateRoot: jest.fn()
};
global.__DEV__ = true;
global.window = global.window || {};
global.React = _react.default;
global.ReactDOM = Object.assign({}, ReactDOM, reactDomClient);
global.ReactTestRenderer = _reactTestRenderer.default;
var originalConsoleWarn = console.warn;
var originalConsoleError = console.error;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found', 'ReactCurrentDispatcher', 'ReactCurrentOwner'];
  if (!ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    originalConsoleWarn.apply(void 0, arguments);
  }
};
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['act(', 'inside a test was not wrapped in act', 'unmounted component', '감정 로드 오류', '챌린지 데이터 로딩 오류', 'ReactCurrentDispatcher', 'ReactCurrentOwner'];
  if (!ignoredErrors.some(function (error) {
    return typeof errorMessage === 'string' && errorMessage.includes(error);
  })) {
    originalConsoleError.apply(void 0, arguments);
  }
};
jest.useFakeTimers();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,