51a711ad8190c4d998bc8254f5243c26
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var testEmotions = [{
  label: 'ÌñâÎ≥µ',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  label: 'Í∞êÏÇ¨',
  icon: 'hand-heart',
  color: '#FF69B4'
}];
var testPosts = [{
  id: 1,
  anonymousId: 'ÏùµÎ™Ö1',
  content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
  emotion: 'ÌñâÎ≥µ',
  emotionIcon: 'üòä',
  image: '',
  likes: 5,
  comments: [],
  timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
}];
function handlePostSubmission(content, emotion, imageUrl, setIsLoading, setIsDialogVisible) {
  if (content && emotion) {
    setIsLoading(true);
    setTimeout(function () {
      setIsLoading(false);
      setIsDialogVisible(true);
    }, 1000);
    return true;
  }
  return false;
}
function handleImageUploadAction(setImageUrl) {
  setImageUrl('https://via.placeholder.com/150');
}
function handleLikeAction(posts, postId, setPosts) {
  setPosts(posts.map(function (post) {
    return post.id === postId ? Object.assign({}, post, {
      likes: post.likes + 1
    }) : post;
  }));
}
function handleCommentAction(posts, postId, commentContent, setPosts) {
  var newComment = {
    id: Date.now(),
    author: 'ÏùµÎ™Ö',
    content: commentContent
  };
  setPosts(posts.map(function (post) {
    return post.id === postId ? Object.assign({}, post, {
      comments: [].concat((0, _toConsumableArray2.default)(post.comments), [newComment])
    }) : post;
  }));
}
describe('HomeScreen Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('handlePostSubmission Ìï®Ïàò', function () {
    it('ÎÇ¥Ïö©Í≥º Í∞êÏ†ïÏù¥ ÏûàÏùÑ Îïå trueÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = testEmotions[0];
      var imageUrl = 'https://example.com/image.jpg';
      var result = handlePostSubmission(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(true);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      jest.advanceTimersByTime(1000);
      expect(setIsLoading).toHaveBeenCalledWith(false);
      expect(setIsDialogVisible).toHaveBeenCalledWith(true);
    });
    it('ÎÇ¥Ïö©Ïù¥ ÏóÜÏùÑ Îïå falseÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = '';
      var emotion = testEmotions[0];
      var imageUrl = 'https://example.com/image.jpg';
      var result = handlePostSubmission(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(setIsDialogVisible).not.toHaveBeenCalled();
    });
    it('Í∞êÏ†ïÏù¥ ÏóÜÏùÑ Îïå falseÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = null;
      var imageUrl = 'https://example.com/image.jpg';
      var result = handlePostSubmission(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(setIsDialogVisible).not.toHaveBeenCalled();
    });
  });
  describe('handleImageUploadAction Ìï®Ïàò', function () {
    it('Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏÑ§Ï†ïÌï¥Ïïº Ìï®', function () {
      var setImageUrl = jest.fn();
      handleImageUploadAction(setImageUrl);
      expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    });
  });
  describe('handleLikeAction Ìï®Ïàò', function () {
    it('Ï¢ãÏïÑÏöî ÏàòÎ•º Ï¶ùÍ∞ÄÏãúÏºúÏïº Ìï®', function () {
      var posts = [].concat(testPosts);
      var postId = 1;
      var setPosts = jest.fn();
      handleLikeAction(posts, postId, setPosts);
      expect(setPosts).toHaveBeenCalled();
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].likes).toBe(6);
    });
  });
  describe('handleCommentAction Ìï®Ïàò', function () {
    it('ÎåìÍ∏ÄÏùÑ Ï∂îÍ∞ÄÌï¥Ïïº Ìï®', function () {
      var posts = [].concat(testPosts);
      var postId = 1;
      var commentContent = 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä';
      var setPosts = jest.fn();
      var mockDateNow = 123456789;
      jest.spyOn(Date, 'now').mockImplementation(function () {
        return mockDateNow;
      });
      handleCommentAction(posts, postId, commentContent, setPosts);
      expect(setPosts).toHaveBeenCalled();
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].comments.length).toBe(1);
      expect(updatedPosts[0].comments[0].content).toBe('ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä');
      expect(updatedPosts[0].comments[0].id).toBe(mockDateNow);
      expect(updatedPosts[0].comments[0].author).toBe('ÏùµÎ™Ö');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,