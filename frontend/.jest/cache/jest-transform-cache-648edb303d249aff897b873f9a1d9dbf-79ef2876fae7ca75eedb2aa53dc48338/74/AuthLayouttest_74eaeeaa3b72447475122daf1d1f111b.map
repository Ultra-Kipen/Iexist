{"version":3,"names":["_getJestObj","mock","View","StyleSheet","create","styles","Platform","OS","ScrollView","KeyboardAvoidingView","TouchableWithoutFeedback","Keyboard","dismiss","jest","fn","ImageBackground","Image","StatusBar","Text","SafeAreaView","useTheme","theme","colors","background","dark","MockLoadingIndicator","_jsxRuntime","jsx","children","_interopRequireDefault","require","_react","_require","fs","path","describe","authLayoutSource","beforeAll","authLayoutPath","resolve","__dirname","readFileSync","it","expect","toContain","toMatch"],"sources":["AuthLayout.test.tsx"],"sourcesContent":["// tests/layouts/AuthLayout.test.tsx (업데이트)\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { Text } from 'react-native';\r\n\r\n// 모듈 모킹\r\njest.mock('react-native', () => {\r\n  return {\r\n    View: 'View',\r\n    StyleSheet: {\r\n      create: (styles) => styles,\r\n    },\r\n    Platform: {\r\n      OS: 'ios',\r\n    },\r\n    ScrollView: 'ScrollView',\r\n    KeyboardAvoidingView: 'KeyboardAvoidingView',\r\n    TouchableWithoutFeedback: 'TouchableWithoutFeedback',\r\n    Keyboard: {\r\n      dismiss: jest.fn(),\r\n    },\r\n    ImageBackground: 'ImageBackground',\r\n    Image: 'Image',\r\n    StatusBar: 'StatusBar',\r\n    Text: 'Text',\r\n  };\r\n});\r\n\r\n// 다른 의존성 모킹\r\njest.mock('react-native-safe-area-context', () => ({\r\n  SafeAreaView: 'SafeAreaView',\r\n}));\r\n\r\njest.mock('../../src/hooks/useTheme', () => ({\r\n  useTheme: () => ({\r\n    theme: {\r\n      colors: {\r\n        background: '#ffffff',\r\n      },\r\n      dark: false,\r\n    },\r\n  }),\r\n}));\r\n\r\njest.mock('../../src/components/LoadingIndicator', () => {\r\n  return function MockLoadingIndicator() {\r\n    return <div data-testid=\"loading-indicator\">로딩 중...</div>;\r\n  };\r\n});\r\n\r\n// 파일 분석 테스트로 전환 - FormLayout과 유사한 접근법\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\ndescribe('AuthLayout 소스 코드 검증', () => {\r\n  let authLayoutSource;\r\n  \r\n  beforeAll(() => {\r\n    // AuthLayout.tsx 파일 읽기\r\n    const authLayoutPath = path.resolve(__dirname, '../../src/layouts/AuthLayout.tsx');\r\n    authLayoutSource = fs.readFileSync(authLayoutPath, 'utf8');\r\n  });\r\n  \r\n  it('AuthLayout 컴포넌트가 올바른 핵심 요소를 포함해야 함', () => {\r\n    // 필수 React 요소 확인\r\n    expect(authLayoutSource).toContain('import React from');\r\n    \r\n    // 컴포넌트 정의 확인\r\n    expect(authLayoutSource).toContain('const AuthLayout');\r\n    expect(authLayoutSource).toContain('React.FC<AuthLayoutProps>');\r\n    \r\n    // Props 정의 확인\r\n    expect(authLayoutSource).toContain('interface AuthLayoutProps');\r\n    expect(authLayoutSource).toContain('children: React.ReactNode');\r\n    expect(authLayoutSource).toContain('loading?: boolean');\r\n    expect(authLayoutSource).toContain('title?: React.ReactNode');\r\n    expect(authLayoutSource).toContain('footer?: React.ReactNode');\r\n    expect(authLayoutSource).toContain('imageBackground?: boolean');\r\n    expect(authLayoutSource).toContain('logoVisible?: boolean');\r\n  });\r\n  \r\n  it('AuthLayout이 loading 상태에 따라 조건부 렌더링을 구현해야 함', () => {\r\n    // loading 상태에 따른 조건부 렌더링 확인\r\n    expect(authLayoutSource).toMatch(/loading\\s*\\?\\s*<LoadingIndicator/);\r\n    expect(authLayoutSource).toContain('children');\r\n  });\r\n  \r\n  it('AuthLayout이 배경 이미지 옵션에 따라 다른 컴포넌트를 사용해야 함', () => {\r\n    // imageBackground 조건부 로직 확인\r\n    expect(authLayoutSource).toContain('imageBackground');\r\n    expect(authLayoutSource).toContain('ImageBackground');\r\n    expect(authLayoutSource).toMatch(/if\\s*\\(\\s*imageBackground\\s*\\)/);\r\n  });\r\n  \r\n  it('AuthLayout이 헤더와 푸터를 조건부로 렌더링해야 함', () => {\r\n    // 제목과 푸터 조건부 렌더링 확인\r\n    expect(authLayoutSource).toMatch(/\\{\\s*title\\s*&&/);\r\n    expect(authLayoutSource).toMatch(/\\{\\s*footer\\s*&&/);\r\n    \r\n    // 로고 표시 조건부 렌더링 확인\r\n    expect(authLayoutSource).toMatch(/\\{\\s*logoVisible\\s*&&/);\r\n  });\r\n  \r\n  it('AuthLayout에 스타일 처리가 구현되어 있어야 함', () => {\r\n    // 스타일 관련 코드 확인\r\n    expect(authLayoutSource).toContain('StyleSheet.create');\r\n    expect(authLayoutSource).toContain('style={[');\r\n    \r\n    // 주요 스타일 속성 확인\r\n    expect(authLayoutSource).toContain('container:');\r\n    expect(authLayoutSource).toContain('logoContainer:');\r\n    expect(authLayoutSource).toContain('contentContainer:');\r\n    expect(authLayoutSource).toContain('footerContainer:');\r\n    expect(authLayoutSource).toContain('backgroundImage:');\r\n    expect(authLayoutSource).toContain('overlay:');\r\n  });\r\n  \r\n  it('AuthLayout이 플랫폼별 분기 처리를 구현해야 함', () => {\r\n    // 플랫폼 분기 처리 확인\r\n    expect(authLayoutSource).toContain('Platform.OS');\r\n  });\r\n  \r\n  it('AuthLayout이 키보드 관련 처리를 구현해야 함', () => {\r\n    // 키보드 처리 관련 코드 확인\r\n    expect(authLayoutSource).toContain('TouchableWithoutFeedback');\r\n    expect(authLayoutSource).toContain('Keyboard.dismiss');\r\n    expect(authLayoutSource).toContain('keyboardShouldPersistTaps');\r\n    expect(authLayoutSource).toContain('KeyboardAvoidingView');\r\n  });\r\n  \r\n  it('AuthLayout이 안전한 오류 처리를 구현해야 함', () => {\r\n    // 예외 처리 확인\r\n    expect(authLayoutSource).toContain('try {');\r\n    expect(authLayoutSource).toContain('catch (error)');\r\n  });\r\n  \r\n  it('AuthLayout이 다양한 상태 바 설정을 지원해야 함', () => {\r\n    // 상태 바 관련 코드 확인\r\n    expect(authLayoutSource).toContain('StatusBar');\r\n    expect(authLayoutSource).toMatch(/barStyle=\\{theme\\.dark\\s*\\?\\s*'light-content'\\s*:\\s*'dark-content'\\}/);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}