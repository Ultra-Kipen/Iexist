6b5d9c3e7edd45773c3b877391fc5597
_getJestObj().mock("../../src/services/socketService", function () {
  var originalModule = jest.requireActual("../../src/services/socketService");
  return Object.assign({}, originalModule, {
    init: jest.fn(),
    disconnect: jest.fn(),
    isConnected: jest.fn(function () {
      return false;
    }),
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn()
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _socketService = _interopRequireDefault(require("../../src/services/socketService"));
var _useSocket = _interopRequireDefault(require("../../src/hooks/useSocket"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useSocket', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _socketService.default.isConnected.mockReturnValue(false);
    _socketService.default.on.mockImplementation(function (event, callback) {});
  });
  it('autoConnect=true로 초기화하면 자동으로 연결된다', (0, _asyncToGenerator2.default)(function* () {
    _socketService.default.init.mockResolvedValue(undefined);
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)({
          autoConnect: true
        });
      }),
      result = _renderHook.result;
    expect(result.current.isLoading).toBe(true);
    expect(result.current.isConnected).toBe(false);
    expect(result.current.error).toBe(null);
    expect(_socketService.default.init).toHaveBeenCalled();
    _socketService.default.isConnected.mockReturnValue(true);
    (0, _reactHooks.act)(function () {
      var _calls$find;
      var calls = _socketService.default.on.mock.calls;
      var connectCallback = (_calls$find = calls.find(function (call) {
        return call[0] === 'connect';
      })) == null ? void 0 : _calls$find[1];
      if (connectCallback) connectCallback();
    });
    expect(result.current.isConnected).toBe(true);
    expect(result.current.isLoading).toBe(false);
    expect(result.current.error).toBe(null);
  }));
  it('autoConnect=false로 초기화하면 자동으로 연결되지 않는다', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)({
          autoConnect: false
        });
      }),
      result = _renderHook2.result;
    expect(_socketService.default.init).not.toHaveBeenCalled();
    expect(result.current.isConnected).toBe(false);
    expect(result.current.isLoading).toBe(false);
  });
  it('연결 실패 시 에러 상태를 설정한다', function () {
    var testError = new Error('연결 실패');
    _socketService.default.init.mockRejectedValue(testError);
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)({
          autoConnect: true
        });
      }),
      result = _renderHook3.result;
    expect(result.current.isLoading).toBe(true);
    (0, _reactHooks.act)(function () {
      var _calls$find2;
      var calls = _socketService.default.on.mock.calls;
      var errorCallback = (_calls$find2 = calls.find(function (call) {
        return call[0] === 'connect_error';
      })) == null ? void 0 : _calls$find2[1];
      if (errorCallback) errorCallback(testError);
    });
    expect(result.current.error).toBe('연결 실패');
    expect(result.current.isLoading).toBe(false);
    expect(result.current.isConnected).toBe(false);
  });
  it('connect 메서드로 수동 연결할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    _socketService.default.init.mockResolvedValue(undefined);
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)({
          autoConnect: false
        });
      }),
      result = _renderHook4.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      result.current.connect();
    }));
    expect(_socketService.default.init).toHaveBeenCalled();
    _socketService.default.isConnected.mockReturnValue(true);
    (0, _reactHooks.act)(function () {
      var _calls$find3;
      var calls = _socketService.default.on.mock.calls;
      var connectCallback = (_calls$find3 = calls.find(function (call) {
        return call[0] === 'connect';
      })) == null ? void 0 : _calls$find3[1];
      if (connectCallback) connectCallback();
    });
    expect(result.current.isConnected).toBe(true);
    expect(result.current.isLoading).toBe(false);
  }));
  it('disconnect 메서드로 연결을 종료할 수 있다', function () {
    _socketService.default.isConnected.mockReturnValue(true);
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)();
      }),
      result = _renderHook5.result;
    (0, _reactHooks.act)(function () {
      var _calls$find4;
      var calls = _socketService.default.on.mock.calls;
      var connectCallback = (_calls$find4 = calls.find(function (call) {
        return call[0] === 'connect';
      })) == null ? void 0 : _calls$find4[1];
      if (connectCallback) connectCallback();
    });
    (0, _reactHooks.act)(function () {
      result.current.disconnect();
    });
    expect(_socketService.default.disconnect).toHaveBeenCalled();
    expect(result.current.isConnected).toBe(false);
  });
  it('emit 메서드로 이벤트를 전송할 수 있다', function () {
    _socketService.default.isConnected.mockReturnValue(true);
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)();
      }),
      result = _renderHook6.result;
    (0, _reactHooks.act)(function () {
      var _calls$find5;
      var calls = _socketService.default.on.mock.calls;
      var connectCallback = (_calls$find5 = calls.find(function (call) {
        return call[0] === 'connect';
      })) == null ? void 0 : _calls$find5[1];
      if (connectCallback) connectCallback();
    });
    (0, _reactHooks.act)(function () {
      result.current.emit('test-event', {
        message: 'Hello'
      });
    });
    expect(_socketService.default.emit).toHaveBeenCalledWith('test-event', {
      message: 'Hello'
    });
  });
  it('연결되지 않은 상태에서 emit을 호출하면 경고 로그를 출력한다', function () {
    var consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
    _socketService.default.isConnected.mockReturnValue(false);
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)({
          autoConnect: false
        });
      }),
      result = _renderHook7.result;
    result.current.emit('test-event', {
      message: 'Hello'
    });
    expect(consoleWarnSpy).toHaveBeenCalled();
    expect(_socketService.default.emit).not.toHaveBeenCalled();
    consoleWarnSpy.mockRestore();
  });
  it('on과 off 메서드로 이벤트 리스너를 등록하고 제거할 수 있다', function () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useSocket.default)({
          autoConnect: false
        });
      }),
      result = _renderHook8.result;
    var mockCallback = jest.fn();
    result.current.on('test-event', mockCallback);
    expect(_socketService.default.on).toHaveBeenCalledWith('test-event', mockCallback);
    result.current.off('test-event', mockCallback);
    expect(_socketService.default.off).toHaveBeenCalledWith('test-event', mockCallback);
  });
  it('events 옵션으로 전달된 이벤트 리스너가 등록된다', function () {
    var mockEventCallback = jest.fn();
    (0, _reactHooks.renderHook)(function () {
      return (0, _useSocket.default)({
        autoConnect: false,
        events: {
          'test-event': mockEventCallback
        }
      });
    });
    expect(_socketService.default.on).toHaveBeenCalledWith('test-event', mockEventCallback);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,