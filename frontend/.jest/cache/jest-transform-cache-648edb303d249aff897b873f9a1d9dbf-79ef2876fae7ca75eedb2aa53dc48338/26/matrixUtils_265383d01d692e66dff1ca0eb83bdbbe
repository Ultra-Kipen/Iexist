7264da87768d3f4623b3c1dac0ea7c71
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMatrices = addMatrices;
exports.decomposeMatrix = decomposeMatrix;
exports.decomposeMatrixIntoMatricesAndAngles = decomposeMatrixIntoMatricesAndAngles;
exports.flatten = flatten;
exports.getRotationMatrix = getRotationMatrix;
exports.isAffineMatrix = isAffineMatrix;
exports.isAffineMatrixFlat = isAffineMatrixFlat;
exports.multiplyMatrices = multiplyMatrices;
exports.scaleMatrix = scaleMatrix;
exports.subtractMatrices = subtractMatrices;
exports.unflatten = unflatten;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _errors = require("../../errors.js");
function isAffineMatrixFlat(x) {
  'worklet';

  return Array.isArray(x) && x.length === 16 && x.every(function (element) {
    return typeof element === 'number' && !isNaN(element);
  });
}
function isAffineMatrix(x) {
  'worklet';

  return Array.isArray(x) && x.length === 4 && x.every(function (row) {
    return Array.isArray(row) && row.length === 4 && row.every(function (element) {
      return typeof element === 'number' && !isNaN(element);
    });
  });
}
function flatten(matrix) {
  'worklet';

  return matrix.flat();
}
function unflatten(m) {
  'worklet';

  return [[m[0], m[1], m[2], m[3]], [m[4], m[5], m[6], m[7]], [m[8], m[9], m[10], m[11]], [m[12], m[13], m[14], m[15]]];
}
function maybeFlattenMatrix(matrix) {
  'worklet';

  return isAffineMatrix(matrix) ? flatten(matrix) : matrix;
}
function multiplyMatrices(a, b) {
  'worklet';

  return [[a[0][0] * b[0][0] + a[0][1] * b[1][0] + a[0][2] * b[2][0] + a[0][3] * b[3][0], a[0][0] * b[0][1] + a[0][1] * b[1][1] + a[0][2] * b[2][1] + a[0][3] * b[3][1], a[0][0] * b[0][2] + a[0][1] * b[1][2] + a[0][2] * b[2][2] + a[0][3] * b[3][2], a[0][0] * b[0][3] + a[0][1] * b[1][3] + a[0][2] * b[2][3] + a[0][3] * b[3][3]], [a[1][0] * b[0][0] + a[1][1] * b[1][0] + a[1][2] * b[2][0] + a[1][3] * b[3][0], a[1][0] * b[0][1] + a[1][1] * b[1][1] + a[1][2] * b[2][1] + a[1][3] * b[3][1], a[1][0] * b[0][2] + a[1][1] * b[1][2] + a[1][2] * b[2][2] + a[1][3] * b[3][2], a[1][0] * b[0][3] + a[1][1] * b[1][3] + a[1][2] * b[2][3] + a[1][3] * b[3][3]], [a[2][0] * b[0][0] + a[2][1] * b[1][0] + a[2][2] * b[2][0] + a[2][3] * b[3][0], a[2][0] * b[0][1] + a[2][1] * b[1][1] + a[2][2] * b[2][1] + a[2][3] * b[3][1], a[2][0] * b[0][2] + a[2][1] * b[1][2] + a[2][2] * b[2][2] + a[2][3] * b[3][2], a[2][0] * b[0][3] + a[2][1] * b[1][3] + a[2][2] * b[2][3] + a[2][3] * b[3][3]], [a[3][0] * b[0][0] + a[3][1] * b[1][0] + a[3][2] * b[2][0] + a[3][3] * b[3][0], a[3][0] * b[0][1] + a[3][1] * b[1][1] + a[3][2] * b[2][1] + a[3][3] * b[3][1], a[3][0] * b[0][2] + a[3][1] * b[1][2] + a[3][2] * b[2][2] + a[3][3] * b[3][2], a[3][0] * b[0][3] + a[3][1] * b[1][3] + a[3][2] * b[2][3] + a[3][3] * b[3][3]]];
}
function subtractMatrices(maybeFlatA, maybeFlatB) {
  'worklet';

  var isFlatOnStart = isAffineMatrixFlat(maybeFlatA);
  var a = maybeFlattenMatrix(maybeFlatA);
  var b = maybeFlattenMatrix(maybeFlatB);
  var c = a.map(function (_, i) {
    return a[i] - b[i];
  });
  return isFlatOnStart ? c : unflatten(c);
}
function addMatrices(maybeFlatA, maybeFlatB) {
  'worklet';

  var isFlatOnStart = isAffineMatrixFlat(maybeFlatA);
  var a = maybeFlattenMatrix(maybeFlatA);
  var b = maybeFlattenMatrix(maybeFlatB);
  var c = a.map(function (_, i) {
    return a[i] + b[i];
  });
  return isFlatOnStart ? c : unflatten(c);
}
function scaleMatrix(maybeFlatA, scalar) {
  'worklet';

  var isFlatOnStart = isAffineMatrixFlat(maybeFlatA);
  var a = maybeFlattenMatrix(maybeFlatA);
  var b = a.map(function (x) {
    return x * scalar;
  });
  return isFlatOnStart ? b : unflatten(b);
}
function getRotationMatrix(angle) {
  'worklet';

  var axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'z';
  var cos = Math.cos(angle);
  var sin = Math.sin(angle);
  switch (axis) {
    case 'z':
      return [[cos, sin, 0, 0], [-sin, cos, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
    case 'y':
      return [[cos, 0, -sin, 0], [0, 1, 0, 0], [sin, 0, cos, 0], [0, 0, 0, 1]];
    case 'x':
      return [[1, 0, 0, 0], [0, cos, sin, 0], [0, -sin, cos, 0], [0, 0, 0, 1]];
  }
}
function norm3d(x, y, z) {
  'worklet';

  return Math.sqrt(x * x + y * y + z * z);
}
function transposeMatrix(matrix) {
  'worklet';

  var m = flatten(matrix);
  return [[m[0], m[4], m[8], m[12]], [m[1], m[5], m[9], m[13]], [m[2], m[6], m[10], m[14]], [m[3], m[7], m[11], m[15]]];
}
function assertVectorsHaveEqualLengths(a, b) {
  'worklet';

  if (true && a.length !== b.length) {
    throw new _errors.ReanimatedError(`Cannot calculate inner product of two vectors of different lengths. Length of ${a.toString()} is ${a.length} and length of ${b.toString()} is ${b.length}.`);
  }
}
function innerProduct(a, b) {
  'worklet';

  assertVectorsHaveEqualLengths(a, b);
  return a.reduce(function (acc, _, i) {
    return acc + a[i] * b[i];
  }, 0);
}
function projection(u, a) {
  'worklet';

  assertVectorsHaveEqualLengths(u, a);
  var s = innerProduct(u, a) / innerProduct(u, u);
  return u.map(function (e) {
    return e * s;
  });
}
function subtractVectors(a, b) {
  'worklet';

  assertVectorsHaveEqualLengths(a, b);
  return a.map(function (_, i) {
    return a[i] - b[i];
  });
}
function scaleVector(u, a) {
  'worklet';

  return u.map(function (e) {
    return e * a;
  });
}
function gramSchmidtAlgorithm(matrix) {
  'worklet';

  var _matrix = (0, _slicedToArray2.default)(matrix, 4),
    a0 = _matrix[0],
    a1 = _matrix[1],
    a2 = _matrix[2],
    a3 = _matrix[3];
  var u0 = a0;
  var u1 = subtractVectors(a1, projection(u0, a1));
  var u2 = subtractVectors(subtractVectors(a2, projection(u0, a2)), projection(u1, a2));
  var u3 = subtractVectors(subtractVectors(subtractVectors(a3, projection(u0, a3)), projection(u1, a3)), projection(u2, a3));
  var _map = [u0, u1, u2, u3].map(function (u) {
      return scaleVector(u, 1 / Math.sqrt(innerProduct(u, u)));
    }),
    _map2 = (0, _slicedToArray2.default)(_map, 4),
    e0 = _map2[0],
    e1 = _map2[1],
    e2 = _map2[2],
    e3 = _map2[3];
  var rotationMatrix = [[e0[0], e1[0], e2[0], e3[0]], [e0[1], e1[1], e2[1], e3[1]], [e0[2], e1[2], e2[2], e3[2]], [e0[3], e1[3], e2[3], e3[3]]];
  var skewMatrix = [[innerProduct(e0, a0), innerProduct(e0, a1), innerProduct(e0, a2), innerProduct(e0, a3)], [0, innerProduct(e1, a1), innerProduct(e1, a2), innerProduct(e1, a3)], [0, 0, innerProduct(e2, a2), innerProduct(e2, a3)], [0, 0, 0, innerProduct(e3, a3)]];
  return {
    rotationMatrix: transposeMatrix(rotationMatrix),
    skewMatrix: transposeMatrix(skewMatrix)
  };
}
function decomposeMatrix(unknownTypeMatrix) {
  'worklet';

  var matrix = maybeFlattenMatrix(unknownTypeMatrix);
  if (matrix[15] === 0) {
    throw new _errors.ReanimatedError('Invalid transform matrix.');
  }
  matrix.forEach(function (_, i) {
    return matrix[i] /= matrix[15];
  });
  var translationMatrix = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [matrix[12], matrix[13], matrix[14], 1]];
  var sx = matrix[15] * norm3d(matrix[0], matrix[4], matrix[8]);
  var sy = matrix[15] * norm3d(matrix[1], matrix[5], matrix[9]);
  var sz = matrix[15] * norm3d(matrix[2], matrix[6], matrix[10]);
  var scaleMatrix = [[sx, 0, 0, 0], [0, sy, 0, 0], [0, 0, sz, 0], [0, 0, 0, 1]];
  var rotationAndSkewMatrix = [[matrix[0] / sx, matrix[1] / sx, matrix[2] / sx, 0], [matrix[4] / sy, matrix[5] / sy, matrix[6] / sy, 0], [matrix[8] / sz, matrix[9] / sz, matrix[10] / sz, 0], [0, 0, 0, 1]];
  var _gramSchmidtAlgorithm = gramSchmidtAlgorithm(rotationAndSkewMatrix),
    rotationMatrix = _gramSchmidtAlgorithm.rotationMatrix,
    skewMatrix = _gramSchmidtAlgorithm.skewMatrix;
  return {
    translationMatrix: translationMatrix,
    scaleMatrix: scaleMatrix,
    rotationMatrix: rotationMatrix,
    skewMatrix: skewMatrix
  };
}
function decomposeMatrixIntoMatricesAndAngles(matrix) {
  'worklet';
  var _decomposeMatrix = decomposeMatrix(matrix),
    scaleMatrix = _decomposeMatrix.scaleMatrix,
    rotationMatrix = _decomposeMatrix.rotationMatrix,
    translationMatrix = _decomposeMatrix.translationMatrix,
    skewMatrix = _decomposeMatrix.skewMatrix;
  var sinRy = -rotationMatrix[0][2];
  var ry = Math.asin(sinRy);
  var rx;
  var rz;
  if (sinRy === 1 || sinRy === -1) {
    rz = 0;
    rx = Math.atan2(sinRy * rotationMatrix[0][1], sinRy * rotationMatrix[0][2]);
  } else {
    rz = Math.atan2(rotationMatrix[0][1], rotationMatrix[0][0]);
    rx = Math.atan2(rotationMatrix[1][2], rotationMatrix[2][2]);
  }
  return {
    scaleMatrix: scaleMatrix,
    rotationMatrix: rotationMatrix,
    translationMatrix: translationMatrix,
    skewMatrix: skewMatrix,
    rx: rx || 0,
    ry: ry || 0,
    rz: rz || 0
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,