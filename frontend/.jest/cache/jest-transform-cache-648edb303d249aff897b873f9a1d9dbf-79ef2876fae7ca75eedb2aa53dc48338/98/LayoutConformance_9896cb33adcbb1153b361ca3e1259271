cea3da2fa607b18eb7bf0da777c0bdd4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _LayoutConformanceNativeComponent = _interopRequireDefault(require("./LayoutConformanceNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _global;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var isFabricUIManagerInstalled = ((_global = global) == null ? void 0 : _global.nativeFabricUIManager) != null;
function LayoutConformance(props) {
  return (0, _jsxRuntime.jsx)(_LayoutConformanceNativeComponent.default, Object.assign({}, props, {
    style: styles.container
  }));
}
function UnimplementedLayoutConformance(props) {
  if (true) {
    var warnOnce = require("../../Utilities/warnOnce");
    warnOnce('layoutconformance-unsupported', '"LayoutConformance" is only supported in the New Architecture');
  }
  return props.children;
}
var _default = exports.default = isFabricUIManagerInstalled ? LayoutConformance : UnimplementedLayoutConformance;
var styles = _StyleSheet.default.create({
  container: {
    display: 'contents'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfU3R5bGVTaGVldCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0xheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiX2dsb2JhbCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImlzRmFicmljVUlNYW5hZ2VySW5zdGFsbGVkIiwiZ2xvYmFsIiwibmF0aXZlRmFicmljVUlNYW5hZ2VyIiwiTGF5b3V0Q29uZm9ybWFuY2UiLCJwcm9wcyIsImpzeCIsImFzc2lnbiIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiVW5pbXBsZW1lbnRlZExheW91dENvbmZvcm1hbmNlIiwid2Fybk9uY2UiLCJjaGlsZHJlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJkaXNwbGF5Il0sInNvdXJjZXMiOlsiTGF5b3V0Q29uZm9ybWFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICogQG9uY2FsbCByZWFjdF9uYXRpdmVcbiAqL1xuXG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IExheW91dENvbmZvcm1hbmNlTmF0aXZlQ29tcG9uZW50IGZyb20gJy4vTGF5b3V0Q29uZm9ybWFuY2VOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHtcbiAgLyoqXG4gICAqIHN0cmljdDogTGF5b3V0IGluIGFjY29yZGFuY2Ugd2l0aCBXM0Mgc3BlYywgZXZlbiB3aGVuIGJyZWFraW5nXG4gICAqIGNvbXBhdGliaWxpdHk6IExheW91dCB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIGFzIHByZXZpb3VzIHZlcnNpb25zIG9mIFJlYWN0IE5hdGl2ZVxuICAgKi9cbiAgbW9kZTogJ3N0cmljdCcgfCAnY29tcGF0aWJpbGl0eScsXG5cbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXG59PjtcblxuLy8gV2Ugd2FudCBhIGdyYWNlZnVsIGZhbGxiYWNrIGZvciBhcHBzIHVzaW5nIGxlZ2FjeSBhcmNoLCBidXQgbmVlZCB0byBrbm93XG4vLyBhaGVhZCBvZiB0aW1lIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBhdmFpbGFibGUsIHNvIHdlIHRlc3QgZm9yIGdsb2JhbC5cbi8vIFRoaXMgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSBtaXhlZCBhcmNoIGFwcHMgKHdoaWNoIGlzIG9rYXksIHNpbmNlIHdlIGp1c3Rcbi8vIGRlZ3JhZGUgdGhlIGVycm9yIGV4cGVyaWVuY2UpLlxuY29uc3QgaXNGYWJyaWNVSU1hbmFnZXJJbnN0YWxsZWQgPSBnbG9iYWw/Lm5hdGl2ZUZhYnJpY1VJTWFuYWdlciAhPSBudWxsO1xuXG5mdW5jdGlvbiBMYXlvdXRDb25mb3JtYW5jZShwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlIHtcbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0Q29uZm9ybWFuY2VOYXRpdmVDb21wb25lbnQgey4uLnByb3BzfSBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0gLz5cbiAgKTtcbn1cblxuZnVuY3Rpb24gVW5pbXBsZW1lbnRlZExheW91dENvbmZvcm1hbmNlKHByb3BzOiBQcm9wcyk6IFJlYWN0Lk5vZGUge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnN0IHdhcm5PbmNlID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL3dhcm5PbmNlJyk7XG5cbiAgICB3YXJuT25jZShcbiAgICAgICdsYXlvdXRjb25mb3JtYW5jZS11bnN1cHBvcnRlZCcsXG4gICAgICAnXCJMYXlvdXRDb25mb3JtYW5jZVwiIGlzIG9ubHkgc3VwcG9ydGVkIGluIHRoZSBOZXcgQXJjaGl0ZWN0dXJlJyxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCAoaXNGYWJyaWNVSU1hbmFnZXJJbnN0YWxsZWRcbiAgPyBMYXlvdXRDb25mb3JtYW5jZVxuICA6IFVuaW1wbGVtZW50ZWRMYXlvdXRDb25mb3JtYW5jZSkgYXMgY29tcG9uZW50KC4uLlByb3BzKTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBkaXNwbGF5OiAnY29udGVudHMnLFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBV0EsSUFBQUEsV0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsaUNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUErQixJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxJQUFBSyxPQUFBO0FBQUEsU0FBQUMseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFKLHdCQUFBSSxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsV0FBQUssT0FBQSxFQUFBTCxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBLFlBQUFOLENBQUEsQ0FBQUgsT0FBQSxHQUFBTCxDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQWdCL0IsSUFBTVcsMEJBQTBCLEdBQUcsRUFBQXJCLE9BQUEsR0FBQXNCLE1BQU0scUJBQU50QixPQUFBLENBQVF1QixxQkFBcUIsS0FBSSxJQUFJO0FBRXhFLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsS0FBWSxFQUFjO0VBQ25ELE9BQ0UsSUFBQTFCLFdBQUEsQ0FBQTJCLEdBQUEsRUFBQzlCLGlDQUFBLENBQUFXLE9BQWdDLEVBQUFNLE1BQUEsQ0FBQWMsTUFBQSxLQUFLRixLQUFLO0lBQUVHLEtBQUssRUFBRUMsTUFBTSxDQUFDQztFQUFVLEVBQUUsQ0FBQztBQUU1RTtBQUVBLFNBQVNDLDhCQUE4QkEsQ0FBQ04sS0FBWSxFQUFjO0VBQ2hFLFVBQWE7SUFDWCxJQUFNTyxRQUFRLEdBQUdyQyxPQUFPLDJCQUEyQixDQUFDO0lBRXBEcUMsUUFBUSxDQUNOLCtCQUErQixFQUMvQiwrREFDRixDQUFDO0VBQ0g7RUFFQSxPQUFPUCxLQUFLLENBQUNRLFFBQVE7QUFDdkI7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQTVCLE9BQUEsR0FFZWMsMEJBQTBCLEdBQ3RDRyxpQkFBaUIsR0FDakJPLDhCQUE4QjtBQUVsQyxJQUFNRixNQUFNLEdBQUdPLG1CQUFVLENBQUNDLE1BQU0sQ0FBQztFQUMvQlAsU0FBUyxFQUFFO0lBQ1RRLE9BQU8sRUFBRTtFQUNYO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119