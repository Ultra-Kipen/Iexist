6595355f2d0254611bab645d84abad27
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerHandler = registerHandler;
exports.registerOldGestureHandler = registerOldGestureHandler;
exports.unregisterOldGestureHandler = unregisterOldGestureHandler;
exports.unregisterHandler = unregisterHandler;
exports.findHandler = findHandler;
exports.findOldGestureHandler = findOldGestureHandler;
exports.findHandlerByTestID = findHandlerByTestID;
exports.handlerIDToTag = void 0;
var _utils = require("../utils");
var handlerIDToTag = {};
exports.handlerIDToTag = handlerIDToTag;
var gestures = new Map();
var oldHandlers = new Map();
var testIDs = new Map();
function registerHandler(handlerTag, handler, testID) {
  gestures.set(handlerTag, handler);
  if ((0, _utils.isTestEnv)() && testID) {
    testIDs.set(testID, handlerTag);
  }
}
function registerOldGestureHandler(handlerTag, handler) {
  oldHandlers.set(handlerTag, handler);
}
function unregisterOldGestureHandler(handlerTag) {
  oldHandlers.delete(handlerTag);
}
function unregisterHandler(handlerTag, testID) {
  gestures.delete(handlerTag);
  if ((0, _utils.isTestEnv)() && testID) {
    testIDs.delete(testID);
  }
}
function findHandler(handlerTag) {
  return gestures.get(handlerTag);
}
function findOldGestureHandler(handlerTag) {
  return oldHandlers.get(handlerTag);
}
function findHandlerByTestID(testID) {
  var handlerTag = testIDs.get(testID);
  if (handlerTag !== undefined) {
    var _findHandler;
    return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;
  }
  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbHMiLCJyZXF1aXJlIiwiaGFuZGxlcklEVG9UYWciLCJnZXN0dXJlcyIsIk1hcCIsIm9sZEhhbmRsZXJzIiwidGVzdElEcyIsInJlZ2lzdGVySGFuZGxlciIsImhhbmRsZXJUYWciLCJoYW5kbGVyIiwidGVzdElEIiwic2V0IiwiaXNUZXN0RW52IiwicmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlciIsInVucmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlciIsImRlbGV0ZSIsInVucmVnaXN0ZXJIYW5kbGVyIiwiZmluZEhhbmRsZXIiLCJnZXQiLCJmaW5kT2xkR2VzdHVyZUhhbmRsZXIiLCJmaW5kSGFuZGxlckJ5VGVzdElEIiwidW5kZWZpbmVkIiwiX2ZpbmRIYW5kbGVyIl0sInNvdXJjZXMiOlsiaGFuZGxlcnNSZWdpc3RyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1Rlc3RFbnYgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBHZXN0dXJlVHlwZSB9IGZyb20gJy4vZ2VzdHVyZXMvZ2VzdHVyZSc7XG5pbXBvcnQgeyBHZXN0dXJlRXZlbnQsIEhhbmRsZXJTdGF0ZUNoYW5nZUV2ZW50IH0gZnJvbSAnLi9nZXN0dXJlSGFuZGxlckNvbW1vbic7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVySURUb1RhZzogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xuY29uc3QgZ2VzdHVyZXMgPSBuZXcgTWFwPG51bWJlciwgR2VzdHVyZVR5cGU+KCk7XG5jb25zdCBvbGRIYW5kbGVycyA9IG5ldyBNYXA8bnVtYmVyLCBHZXN0dXJlSGFuZGxlckNhbGxiYWNrcz4oKTtcbmNvbnN0IHRlc3RJRHMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJIYW5kbGVyKFxuICBoYW5kbGVyVGFnOiBudW1iZXIsXG4gIGhhbmRsZXI6IEdlc3R1cmVUeXBlLFxuICB0ZXN0SUQ/OiBzdHJpbmdcbikge1xuICBnZXN0dXJlcy5zZXQoaGFuZGxlclRhZywgaGFuZGxlcik7XG4gIGlmIChpc1Rlc3RFbnYoKSAmJiB0ZXN0SUQpIHtcbiAgICB0ZXN0SURzLnNldCh0ZXN0SUQsIGhhbmRsZXJUYWcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck9sZEdlc3R1cmVIYW5kbGVyKFxuICBoYW5kbGVyVGFnOiBudW1iZXIsXG4gIGhhbmRsZXI6IEdlc3R1cmVIYW5kbGVyQ2FsbGJhY2tzXG4pIHtcbiAgb2xkSGFuZGxlcnMuc2V0KGhhbmRsZXJUYWcsIGhhbmRsZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWdpc3Rlck9sZEdlc3R1cmVIYW5kbGVyKGhhbmRsZXJUYWc6IG51bWJlcikge1xuICBvbGRIYW5kbGVycy5kZWxldGUoaGFuZGxlclRhZyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVySGFuZGxlcihoYW5kbGVyVGFnOiBudW1iZXIsIHRlc3RJRD86IHN0cmluZykge1xuICBnZXN0dXJlcy5kZWxldGUoaGFuZGxlclRhZyk7XG4gIGlmIChpc1Rlc3RFbnYoKSAmJiB0ZXN0SUQpIHtcbiAgICB0ZXN0SURzLmRlbGV0ZSh0ZXN0SUQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSGFuZGxlcihoYW5kbGVyVGFnOiBudW1iZXIpIHtcbiAgcmV0dXJuIGdlc3R1cmVzLmdldChoYW5kbGVyVGFnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRPbGRHZXN0dXJlSGFuZGxlcihoYW5kbGVyVGFnOiBudW1iZXIpIHtcbiAgcmV0dXJuIG9sZEhhbmRsZXJzLmdldChoYW5kbGVyVGFnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRIYW5kbGVyQnlUZXN0SUQodGVzdElEOiBzdHJpbmcpIHtcbiAgY29uc3QgaGFuZGxlclRhZyA9IHRlc3RJRHMuZ2V0KHRlc3RJRCk7XG4gIGlmIChoYW5kbGVyVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmluZEhhbmRsZXIoaGFuZGxlclRhZykgPz8gbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZXN0dXJlSGFuZGxlckNhbGxiYWNrcyB7XG4gIG9uR2VzdHVyZUV2ZW50OiAoZXZlbnQ6IEdlc3R1cmVFdmVudDxhbnk+KSA9PiB2b2lkO1xuICBvbkdlc3R1cmVTdGF0ZUNoYW5nZTogKGV2ZW50OiBIYW5kbGVyU3RhdGVDaGFuZ2VFdmVudDxhbnk+KSA9PiB2b2lkO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBSU8sSUFBTUMsY0FBc0MsR0FBRyxFQUEvQzs7QUFDUCxJQUFNQyxRQUFRLEdBQUcsSUFBSUMsR0FBSixFQUFqQjtBQUNBLElBQU1DLFdBQVcsR0FBRyxJQUFJRCxHQUFKLEVBQXBCO0FBQ0EsSUFBTUUsT0FBTyxHQUFHLElBQUlGLEdBQUosRUFBaEI7QUFFTyxTQUFTRyxlQUFUQSxDQUNMQyxVQURLLEVBRUxDLE9BRkssRUFHTEMsTUFISyxFQUlMO0VBQ0FQLFFBQVEsQ0FBQ1EsR0FBVCxDQUFhSCxVQUFiLEVBQXlCQyxPQUF6QjtFQUNBLElBQUksSUFBQVQsTUFBQSxDQUFBWSxTQUFBLE9BQWVGLE1BQW5CLEVBQTJCO0lBQ3pCSixPQUFPLENBQUNLLEdBQVIsQ0FBWUQsTUFBWixFQUFvQkYsVUFBcEI7RUFDRDtBQUNGO0FBRU0sU0FBU0sseUJBQVRBLENBQ0xMLFVBREssRUFFTEMsT0FGSyxFQUdMO0VBQ0FKLFdBQVcsQ0FBQ00sR0FBWixDQUFnQkgsVUFBaEIsRUFBNEJDLE9BQTVCO0FBQ0Q7QUFFTSxTQUFTSywyQkFBVEEsQ0FBcUNOLFVBQXJDLEVBQXlEO0VBQzlESCxXQUFXLENBQUNVLE1BQVosQ0FBbUJQLFVBQW5CO0FBQ0Q7QUFFTSxTQUFTUSxpQkFBVEEsQ0FBMkJSLFVBQTNCLEVBQStDRSxNQUEvQyxFQUFnRTtFQUNyRVAsUUFBUSxDQUFDWSxNQUFULENBQWdCUCxVQUFoQjtFQUNBLElBQUksSUFBQVIsTUFBQSxDQUFBWSxTQUFBLE9BQWVGLE1BQW5CLEVBQTJCO0lBQ3pCSixPQUFPLENBQUNTLE1BQVIsQ0FBZUwsTUFBZjtFQUNEO0FBQ0Y7QUFFTSxTQUFTTyxXQUFUQSxDQUFxQlQsVUFBckIsRUFBeUM7RUFDOUMsT0FBT0wsUUFBUSxDQUFDZSxHQUFULENBQWFWLFVBQWIsQ0FBUDtBQUNEO0FBRU0sU0FBU1cscUJBQVRBLENBQStCWCxVQUEvQixFQUFtRDtFQUN4RCxPQUFPSCxXQUFXLENBQUNhLEdBQVosQ0FBZ0JWLFVBQWhCLENBQVA7QUFDRDtBQUVNLFNBQVNZLG1CQUFUQSxDQUE2QlYsTUFBN0IsRUFBNkM7RUFDbEQsSUFBTUYsVUFBVSxHQUFHRixPQUFPLENBQUNZLEdBQVIsQ0FBWVIsTUFBWixDQUFuQjtFQUNBLElBQUlGLFVBQVUsS0FBS2EsU0FBbkIsRUFBOEI7SUFBQSxJQUFBQyxZQUFBO0lBQzVCLFFBQUFBLFlBQUEsR0FBT0wsV0FBVyxDQUFDVCxVQUFELENBQWxCLGNBQUFjLFlBQUEsY0FBQUEsWUFBQSxHQUFrQyxJQUFsQztFQUNEO0VBQ0QsT0FBTyxJQUFQO0FBQ0QiLCJpZ25vcmVMaXN0IjpbXX0=