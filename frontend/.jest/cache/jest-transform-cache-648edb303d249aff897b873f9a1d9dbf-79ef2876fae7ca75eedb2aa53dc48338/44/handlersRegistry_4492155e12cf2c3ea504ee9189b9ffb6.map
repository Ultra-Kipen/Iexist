{"version":3,"names":["_utils","require","handlerIDToTag","gestures","Map","oldHandlers","testIDs","registerHandler","handlerTag","handler","testID","set","isTestEnv","registerOldGestureHandler","unregisterOldGestureHandler","delete","unregisterHandler","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined","_findHandler"],"sources":["handlersRegistry.ts"],"sourcesContent":["import { isTestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isTestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterOldGestureHandler(handlerTag: number) {\n  oldHandlers.delete(handlerTag);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isTestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAIO,IAAMC,cAAsC,GAAG,EAA/C;;AACP,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,IAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;AACA,IAAME,OAAO,GAAG,IAAIF,GAAJ,EAAhB;AAEO,SAASG,eAATA,CACLC,UADK,EAELC,OAFK,EAGLC,MAHK,EAIL;EACAP,QAAQ,CAACQ,GAAT,CAAaH,UAAb,EAAyBC,OAAzB;EACA,IAAI,IAAAT,MAAA,CAAAY,SAAA,OAAeF,MAAnB,EAA2B;IACzBJ,OAAO,CAACK,GAAR,CAAYD,MAAZ,EAAoBF,UAApB;EACD;AACF;AAEM,SAASK,yBAATA,CACLL,UADK,EAELC,OAFK,EAGL;EACAJ,WAAW,CAACM,GAAZ,CAAgBH,UAAhB,EAA4BC,OAA5B;AACD;AAEM,SAASK,2BAATA,CAAqCN,UAArC,EAAyD;EAC9DH,WAAW,CAACU,MAAZ,CAAmBP,UAAnB;AACD;AAEM,SAASQ,iBAATA,CAA2BR,UAA3B,EAA+CE,MAA/C,EAAgE;EACrEP,QAAQ,CAACY,MAAT,CAAgBP,UAAhB;EACA,IAAI,IAAAR,MAAA,CAAAY,SAAA,OAAeF,MAAnB,EAA2B;IACzBJ,OAAO,CAACS,MAAR,CAAeL,MAAf;EACD;AACF;AAEM,SAASO,WAATA,CAAqBT,UAArB,EAAyC;EAC9C,OAAOL,QAAQ,CAACe,GAAT,CAAaV,UAAb,CAAP;AACD;AAEM,SAASW,qBAATA,CAA+BX,UAA/B,EAAmD;EACxD,OAAOH,WAAW,CAACa,GAAZ,CAAgBV,UAAhB,CAAP;AACD;AAEM,SAASY,mBAATA,CAA6BV,MAA7B,EAA6C;EAClD,IAAMF,UAAU,GAAGF,OAAO,CAACY,GAAR,CAAYR,MAAZ,CAAnB;EACA,IAAIF,UAAU,KAAKa,SAAnB,EAA8B;IAAA,IAAAC,YAAA;IAC5B,QAAAA,YAAA,GAAOL,WAAW,CAACT,UAAD,CAAlB,cAAAc,YAAA,cAAAA,YAAA,GAAkC,IAAlC;EACD;EACD,OAAO,IAAP;AACD","ignoreList":[]}