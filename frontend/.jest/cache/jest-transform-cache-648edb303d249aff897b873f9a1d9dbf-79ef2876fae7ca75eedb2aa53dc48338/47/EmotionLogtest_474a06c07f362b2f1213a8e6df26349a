b9009158e2de61b5bec0337fb55a0733
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    recordEmotions: jest.fn().mockResolvedValue({
      success: true
    }),
    getAllEmotions: jest.fn().mockResolvedValue({
      data: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      }]
    }),
    getDailyEmotionCheck: jest.fn().mockResolvedValue({
      data: []
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  var useEmotionMock = function useEmotionMock() {
    var emotions = [{
      emotion_id: 1,
      name: '행복',
      icon: 'emoticon-happy-outline',
      color: '#FFD700'
    }];
    var selectedEmotions = [];
    var logEmotion = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (emotionId, note) {
        yield require("../../src/services/api/emotionService").recordEmotions({
          emotion_ids: [emotionId],
          note: note
        });
        return true;
      });
      return function logEmotion(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();
    var selectEmotion = function selectEmotion(id) {
      console.log(`Emotion ${id} selected`);
    };
    var clearSelectedEmotions = function clearSelectedEmotions() {
      console.log('Cleared selected emotions');
    };
    return {
      emotions: emotions,
      selectedEmotions: selectedEmotions,
      logEmotion: logEmotion,
      selectEmotion: selectEmotion,
      clearSelectedEmotions: clearSelectedEmotions
    };
  };
  return {
    useEmotion: useEmotionMock
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Emotion Logging Functionality', function () {
  it('calls recordEmotions API when logEmotion is called', (0, _asyncToGenerator2.default)(function* () {
    var _require = require("../../src/contexts/EmotionContext"),
      useEmotion = _require.useEmotion;
    var emotionContext = useEmotion();
    yield emotionContext.logEmotion(1, '행복한 하루였어요');
    expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
      emotion_ids: [1],
      note: '행복한 하루였어요'
    });
  }));
  it('provides emotions data', function () {
    var _require2 = require("../../src/contexts/EmotionContext"),
      useEmotion = _require2.useEmotion;
    var emotionContext = useEmotion();
    expect(emotionContext.emotions).toEqual([{
      emotion_id: 1,
      name: '행복',
      icon: 'emoticon-happy-outline',
      color: '#FFD700'
    }]);
  });
  it('has selectedEmotions array', function () {
    var _require3 = require("../../src/contexts/EmotionContext"),
      useEmotion = _require3.useEmotion;
    var emotionContext = useEmotion();
    expect(Array.isArray(emotionContext.selectedEmotions)).toBe(true);
    expect(emotionContext.selectedEmotions).toEqual([]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,