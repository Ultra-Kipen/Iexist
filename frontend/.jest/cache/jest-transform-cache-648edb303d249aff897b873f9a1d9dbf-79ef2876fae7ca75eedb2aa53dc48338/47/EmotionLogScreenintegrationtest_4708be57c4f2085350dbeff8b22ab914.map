{"version":3,"names":["_getJestObj","mock","get","jest","fn","post","interceptors","request","use","response","getAllEmotions","recordEmotions","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_EmotionLogScreen","_emotionService","_jsxRuntime","_require","mockAlert","alert","spyOn","Alert","mockImplementation","mockEmotions","emotion_id","name","icon","color","describe","mockNavigation","goBack","navigate","mockRoute","params","beforeEach","clearAllMocks","emotionService","mockResolvedValue","data","status","it","default","_render","render","jsx","navigation","route","findByText","_render2","findAllByTestId","chips","expect","length","toBe","_render3","findByTestId","fireEvent","press","submitButton","props","disabled","toBeFalsy","_render4","_render5","noteInput","toBeTruthy","changeText","_render6","Promise","resolve","setTimeout","toHaveBeenCalled","alertCall","calls","onPress","mockRejectedValueOnce","message","_render7","toHaveBeenCalledWith","_render8"],"sources":["EmotionLogScreen.integration.test.tsx"],"sourcesContent":["// EmotionLogScreen.integration.test.tsx 수정\r\n\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\n\r\n// apiClient 모킹 (emotionService 모킹 전에 위치해야 함)\r\njest.mock('../../../src/services/api/client', () => ({\r\n  get: jest.fn(),\r\n  post: jest.fn(),\r\n  interceptors: {\r\n    request: { use: jest.fn() },\r\n    response: { use: jest.fn() }\r\n  }\r\n}));\r\n\r\n// emotionService 모킹\r\njest.mock('../../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn(),\r\n  recordEmotions: jest.fn()\r\n}));\r\n\r\n// Alert 모킹\r\nconst mockAlert = { alert: jest.fn() };\r\njest.spyOn(Alert, 'alert').mockImplementation(mockAlert.alert);\r\n\r\n// react-native-vector-icons 모킹\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => \"MaterialCommunityIcons\");\r\n\r\n// 실제 컴포넌트 임포트\r\nimport EmotionLogScreen from '../../../src/screens/EmotionLogScreen';\r\nimport emotionService from '../../../src/services/api/emotionService';\r\n\r\n// 목 데이터\r\nconst mockEmotions = [\r\n  { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n  { emotion_id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' },\r\n];\r\n\r\ndescribe('EmotionLogScreen', () => {\r\n  const mockNavigation = { goBack: jest.fn(), navigate: jest.fn() };\r\n  // route prop 추가\r\n  const mockRoute = { params: {} };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    (emotionService.getAllEmotions as jest.Mock).mockResolvedValue({\r\n      data: {\r\n        status: 'success',\r\n        data: mockEmotions\r\n      }\r\n    });\r\n    \r\n    (emotionService.recordEmotions as jest.Mock).mockResolvedValue({});\r\n  });\r\n\r\n  // render 함수에 route prop 추가\r\n  it('렌더링이 올바르게 됨', async () => {\r\n    const { findByText } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    await findByText('오늘의 감정');\r\n    await findByText('현재 어떤 감정을 느끼고 계신가요?');\r\n  });\r\n\r\n  it('모든 감정 칩이 올바르게 렌더링됨', async () => {\r\n    const { findAllByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const chips = await findAllByTestId('emotion-chip');\r\n    expect(chips.length).toBe(mockEmotions.length);\r\n  });\r\n\r\n  it('감정 칩을 클릭하면 선택 상태가 변경됨', async () => {\r\n    const { findAllByTestId, findByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const chips = await findAllByTestId('emotion-chip');\r\n    fireEvent.press(chips[0]);\r\n    \r\n    const submitButton = await findByTestId('emotion-submit-button');\r\n    expect(submitButton.props.disabled).toBeFalsy();\r\n  });\r\n  \r\n  it('여러 감정을 선택할 수 있음', async () => {\r\n    const { findAllByTestId, findByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const chips = await findAllByTestId('emotion-chip');\r\n    fireEvent.press(chips[0]);\r\n    fireEvent.press(chips[1]);\r\n    \r\n    const submitButton = await findByTestId('emotion-submit-button');\r\n    expect(submitButton.props.disabled).toBeFalsy();\r\n  });\r\n\r\n  it('메모 입력이 가능함', async () => {\r\n    const { findByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const noteInput = await findByTestId('emotion-note-input');\r\n    expect(noteInput).toBeTruthy();\r\n    \r\n    fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');\r\n  });\r\n\r\n  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', async () => {\r\n    const { findAllByTestId, findByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const chips = await findAllByTestId('emotion-chip');\r\n    fireEvent.press(chips[0]);\r\n    \r\n    const submitButton = await findByTestId('emotion-submit-button');\r\n    fireEvent.press(submitButton);\r\n    \r\n    // 비동기 작업이 완료될 때까지 기다림\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    expect(emotionService.recordEmotions).toHaveBeenCalled();\r\n    expect(mockAlert.alert).toHaveBeenCalled();\r\n    \r\n    // Alert의 콜백 함수를 수동으로 호출\r\n    const alertCall = mockAlert.alert.mock.calls[0];\r\n    if (alertCall && alertCall[2] && alertCall[2][0] && alertCall[2][0].onPress) {\r\n      alertCall[2][0].onPress();\r\n    }\r\n    \r\n    expect(mockNavigation.goBack).toHaveBeenCalled();\r\n  });\r\n\r\n  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', async () => {\r\n    (emotionService.recordEmotions as jest.Mock).mockRejectedValueOnce({\r\n      response: { data: { message: '감정 기록 실패' } }\r\n    });\r\n    \r\n    const { findAllByTestId, findByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const chips = await findAllByTestId('emotion-chip');\r\n    fireEvent.press(chips[0]);\r\n    \r\n    const submitButton = await findByTestId('emotion-submit-button');\r\n    fireEvent.press(submitButton);\r\n    \r\n    // 비동기 작업이 완료될 때까지 기다림\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');\r\n  });\r\n\r\n  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', async () => {\r\n    const { findAllByTestId, findByTestId } = render(<EmotionLogScreen navigation={mockNavigation} route={mockRoute} />);\r\n    \r\n    const chips = await findAllByTestId('emotion-chip');\r\n    fireEvent.press(chips[0]);\r\n    \r\n    const submitButton = await findByTestId('emotion-submit-button');\r\n    expect(submitButton.props.disabled).toBeFalsy();\r\n    \r\n    fireEvent.press(chips[0]);\r\n    \r\n    // DOM 업데이트를 기다림\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    \r\n    expect(submitButton.props.disabled).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}