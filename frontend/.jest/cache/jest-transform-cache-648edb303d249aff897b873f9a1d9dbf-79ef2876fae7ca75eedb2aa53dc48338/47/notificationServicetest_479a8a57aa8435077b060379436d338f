42b1fcbfa670f2ccac23709053026321
_getJestObj().mock("../../../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _notificationService = _interopRequireDefault(require("../../../../src/services/api/notificationService"));
var _client = _interopRequireDefault(require("../../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('notificationService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('getNotifications', function () {
    it('알림 목록을 올바르게 가져와야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockNotifications = [{
        id: 1,
        content: '게시물에 좋아요를 받았습니다.',
        notification_type: 'like',
        is_read: false,
        created_at: '2025-04-17T12:00:00Z'
      }, {
        id: 2,
        content: '새로운 댓글이 달렸습니다.',
        notification_type: 'comment',
        is_read: true,
        created_at: '2025-04-16T10:30:00Z'
      }];
      _client.default.get.mockResolvedValue({
        data: mockNotifications
      });
      var result = yield _notificationService.default.getNotifications();
      expect(_client.default.get).toHaveBeenCalledWith('/notifications');
      expect(result).toEqual(mockNotifications);
    }));
    it('오류 발생 시 적절하게 처리해야 함', (0, _asyncToGenerator2.default)(function* () {
      var error = new Error('Network Error');
      _client.default.get.mockRejectedValue(error);
      yield expect(_notificationService.default.getNotifications()).rejects.toThrow('알림을 가져오는데 실패했습니다.');
    }));
  });
  describe('markAsRead', function () {
    it('알림을 읽음 상태로 표시해야 함', (0, _asyncToGenerator2.default)(function* () {
      var notificationId = 1;
      _client.default.put.mockResolvedValue({
        data: {
          success: true
        }
      });
      var result = yield _notificationService.default.markAsRead(notificationId);
      expect(_client.default.put).toHaveBeenCalledWith(`/notifications/${notificationId}/read`);
      expect(result).toEqual({
        success: true
      });
    }));
  });
  describe('markAllAsRead', function () {
    it('모든 알림을 읽음 상태로 표시해야 함', (0, _asyncToGenerator2.default)(function* () {
      _client.default.put.mockResolvedValue({
        data: {
          success: true,
          count: 5
        }
      });
      var result = yield _notificationService.default.markAllAsRead();
      expect(_client.default.put).toHaveBeenCalledWith('/notifications/read-all');
      expect(result).toEqual({
        success: true,
        count: 5
      });
    }));
  });
  describe('deleteNotification', function () {
    it('알림을 성공적으로 삭제해야 함', (0, _asyncToGenerator2.default)(function* () {
      var notificationId = 1;
      _client.default.delete.mockResolvedValue({
        data: {
          success: true
        }
      });
      var result = yield _notificationService.default.deleteNotification(notificationId);
      expect(_client.default.delete).toHaveBeenCalledWith(`/notifications/${notificationId}`);
      expect(result).toEqual({
        success: true
      });
    }));
  });
  describe('getUnreadCount', function () {
    it('읽지 않은 알림 개수를 올바르게 가져와야 함', (0, _asyncToGenerator2.default)(function* () {
      _client.default.get.mockResolvedValue({
        data: {
          count: 3
        }
      });
      var result = yield _notificationService.default.getUnreadCount();
      expect(_client.default.get).toHaveBeenCalledWith('/notifications/unread-count');
      expect(result).toBe(3);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,