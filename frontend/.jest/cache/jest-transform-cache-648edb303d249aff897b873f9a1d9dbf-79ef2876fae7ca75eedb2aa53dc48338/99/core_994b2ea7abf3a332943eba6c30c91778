196ad0acafa6727c672eb49f78a44d70
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureLayoutAnimationBatch = configureLayoutAnimationBatch;
Object.defineProperty(exports, "createWorkletRuntime", {
  enumerable: true,
  get: function get() {
    return _runtimes.createWorkletRuntime;
  }
});
exports.enableLayoutAnimations = enableLayoutAnimations;
Object.defineProperty(exports, "executeOnUIRuntimeSync", {
  enumerable: true,
  get: function get() {
    return _threads.executeOnUIRuntimeSync;
  }
});
exports.getViewProp = getViewProp;
exports.initializeSensor = initializeSensor;
exports.isReanimated3 = exports.isConfigured = void 0;
exports.jsiConfigureProps = jsiConfigureProps;
Object.defineProperty(exports, "makeMutable", {
  enumerable: true,
  get: function get() {
    return _mutables.makeMutable;
  }
});
Object.defineProperty(exports, "makeShareable", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareable;
  }
});
Object.defineProperty(exports, "makeShareableCloneRecursive", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareableCloneRecursive;
  }
});
exports.markNodeAsRemovable = markNodeAsRemovable;
exports.registerEventHandler = registerEventHandler;
exports.registerSensor = registerSensor;
Object.defineProperty(exports, "runOnJS", {
  enumerable: true,
  get: function get() {
    return _threads.runOnJS;
  }
});
Object.defineProperty(exports, "runOnRuntime", {
  enumerable: true,
  get: function get() {
    return _runtimes.runOnRuntime;
  }
});
Object.defineProperty(exports, "runOnUI", {
  enumerable: true,
  get: function get() {
    return _threads.runOnUI;
  }
});
exports.setShouldAnimateExitingForTag = setShouldAnimateExitingForTag;
Object.defineProperty(exports, "startMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.startMapper;
  }
});
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
exports.subscribeForKeyboardEvents = subscribeForKeyboardEvents;
exports.unmarkNodeAsRemovable = unmarkNodeAsRemovable;
exports.unregisterEventHandler = unregisterEventHandler;
exports.unregisterSensor = unregisterSensor;
exports.unsubscribeFromKeyboardEvents = unsubscribeFromKeyboardEvents;
var _reactNativeIsEdgeToEdge = require("react-native-is-edge-to-edge");
var _errors = require("./errors.js");
var _initializers = require("./initializers.js");
var _PlatformChecker = require("./PlatformChecker.js");
var _ReanimatedModule = require("./ReanimatedModule");
var _SensorContainer = require("./SensorContainer.js");
var _shareables = require("./shareables.js");
var _mappers = require("./mappers.js");
var _mutables = require("./mutables.js");
var _runtimes = require("./runtimes.js");
var _threads = require("./threads.js");
var EDGE_TO_EDGE = (0, _reactNativeIsEdgeToEdge.isEdgeToEdge)();
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var isReanimated3 = exports.isReanimated3 = function isReanimated3() {
  return true;
};
var isConfigured = exports.isConfigured = isReanimated3;
function getViewProp(viewTag, propName, component) {
  if ((0, _PlatformChecker.isFabric)() && !component) {
    throw new _errors.ReanimatedError('Function `getViewProp` requires a component to be passed as an argument on Fabric.');
  }
  return new Promise(function (resolve, reject) {
    return _ReanimatedModule.ReanimatedModule.getViewProp(viewTag, propName, component, function (result) {
      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {
        reject(result);
      } else {
        resolve(result);
      }
    });
  });
}
function getSensorContainer() {
  if (!global.__sensorContainer) {
    global.__sensorContainer = new _SensorContainer.SensorContainer();
  }
  return global.__sensorContainer;
}
function registerEventHandler(eventHandler, eventName) {
  var emitterReactTag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  function handleAndFlushAnimationFrame(eventTimestamp, event) {
    'worklet';

    global.__frameTimestamp = eventTimestamp;
    eventHandler(event);
    global.__flushAnimationFrame(eventTimestamp);
    global.__frameTimestamp = undefined;
  }
  return _ReanimatedModule.ReanimatedModule.registerEventHandler((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), eventName, emitterReactTag);
}
function unregisterEventHandler(id) {
  return _ReanimatedModule.ReanimatedModule.unregisterEventHandler(id);
}
function subscribeForKeyboardEvents(eventHandler, options) {
  var _options$isStatusBarT, _options$isNavigation;
  function handleAndFlushAnimationFrame(state, height) {
    'worklet';

    var now = global._getAnimationTimestamp();
    global.__frameTimestamp = now;
    eventHandler(state, height);
    global.__flushAnimationFrame(now);
    global.__frameTimestamp = undefined;
  }
  if (true) {
    (0, _reactNativeIsEdgeToEdge.controlEdgeToEdgeValues)({
      isStatusBarTranslucentAndroid: options.isStatusBarTranslucentAndroid,
      isNavigationBarTranslucentAndroid: options.isNavigationBarTranslucentAndroid
    });
  }
  return _ReanimatedModule.ReanimatedModule.subscribeForKeyboardEvents((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), EDGE_TO_EDGE || ((_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false), EDGE_TO_EDGE || ((_options$isNavigation = options.isNavigationBarTranslucentAndroid) != null ? _options$isNavigation : false));
}
function unsubscribeFromKeyboardEvents(listenerId) {
  return _ReanimatedModule.ReanimatedModule.unsubscribeFromKeyboardEvents(listenerId);
}
function registerSensor(sensorType, config, eventHandler) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.registerSensor(sensorType, config, (0, _shareables.makeShareableCloneRecursive)(eventHandler));
}
function initializeSensor(sensorType, config) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.initializeSensor(sensorType, config);
}
function unregisterSensor(sensorId) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.unregisterSensor(sensorId);
}
(0, _initializers.initializeUIRuntime)(_ReanimatedModule.ReanimatedModule);
var featuresConfig = {
  enableLayoutAnimations: false,
  setByUser: false
};
function enableLayoutAnimations(flag) {
  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (isCallByUser) {
    featuresConfig = {
      enableLayoutAnimations: flag,
      setByUser: true
    };
    _ReanimatedModule.ReanimatedModule.enableLayoutAnimations(flag);
  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {
    featuresConfig.enableLayoutAnimations = flag;
    _ReanimatedModule.ReanimatedModule.enableLayoutAnimations(flag);
  }
}
function configureLayoutAnimationBatch(layoutAnimationsBatch) {
  _ReanimatedModule.ReanimatedModule.configureLayoutAnimationBatch(layoutAnimationsBatch);
}
function setShouldAnimateExitingForTag(viewTag, shouldAnimate) {
  _ReanimatedModule.ReanimatedModule.setShouldAnimateExitingForTag(viewTag, shouldAnimate);
}
function jsiConfigureProps(uiProps, nativeProps) {
  if (!SHOULD_BE_USE_WEB) {
    _ReanimatedModule.ReanimatedModule.configureProps(uiProps, nativeProps);
  }
}
function markNodeAsRemovable(shadowNodeWrapper) {
  _ReanimatedModule.ReanimatedModule.markNodeAsRemovable(shadowNodeWrapper);
}
function unmarkNodeAsRemovable(viewTag) {
  _ReanimatedModule.ReanimatedModule.unmarkNodeAsRemovable(viewTag);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,