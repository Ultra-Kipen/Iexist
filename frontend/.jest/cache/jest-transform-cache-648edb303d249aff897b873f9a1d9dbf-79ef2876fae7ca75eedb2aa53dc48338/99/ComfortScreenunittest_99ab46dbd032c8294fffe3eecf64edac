d3f5c06490dffdd9ca5c142a961cd678
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    ScrollView: 'ScrollView',
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    Alert: {
      alert: jest.fn()
    },
    TouchableOpacity: 'TouchableOpacity',
    Text: 'Text',
    Platform: {
      OS: 'android',
      select: function select(obj) {
        return obj.android || obj.default;
      }
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee'
        }
      };
    },
    Card: 'Card',
    'Card.Content': 'Card.Content',
    'Card.Actions': 'Card.Actions',
    TextInput: 'TextInput',
    Button: 'Button',
    List: {
      Section: 'List.Section',
      Item: 'List.Item',
      Icon: 'List.Icon'
    },
    Title: 'Title',
    Paragraph: 'Paragraph',
    FAB: 'FAB',
    ActivityIndicator: 'ActivityIndicator',
    Chip: 'Chip',
    Modal: 'Modal'
  };
});
_getJestObj().mock("../../../src/services/api/postService", function () {
  return {
    likePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          message: 'success'
        }
      });
    })
  };
});
_getJestObj().mock("../../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          data: [{
            post_id: 1,
            title: '힘든 하루',
            content: '오늘은 정말 힘든 하루였어요.',
            user_id: 1,
            is_anonymous: true,
            like_count: 8,
            comment_count: 5,
            created_at: '2024-04-06T12:00:00.000Z'
          }]
        }
      });
    }),
    getBestPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          data: [{
            post_id: 3,
            title: '여러분 덕분에 이겨냈어요',
            content: '지난주에 올린 고민, 여러분의 댓글 덕분에 용기를 얻었어요.',
            like_count: 25,
            comment_count: 12
          }]
        }
      });
    }),
    createPost: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          message: '게시물이 성공적으로 등록되었습니다.'
        }
      });
    }),
    sendMessage: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          message: '메시지가 성공적으로 전송되었습니다.'
        }
      });
    }),
    likePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          message: 'success'
        }
      });
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return mockNavigation;
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    },
    useIsFocused: function useIsFocused() {
      return true;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../../src/screens/ComfortScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(console, 'error').mockImplementation(function () {});
jest.spyOn(console, 'warn').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
  setOptions: jest.fn()
};
describe('ComfortScreen 단위 테스트', function () {
  var comfortWallService = require("../../../src/services/api/comfortWallService");
  var mockHandlePost;
  var mockSendMessage;
  var mockHandleLike;
  beforeEach(function () {
    jest.clearAllMocks();
    mockHandlePost = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* (title, content, isAnonymous) {
        if (!title || !content) {
          require('react-native').Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.createPost({
            title: title,
            content: content,
            is_anonymous: isAnonymous
          });
          require('react-native').Alert.alert('성공', '게시물이 등록되었습니다.');
          return true;
        } catch (error) {
          var _error$response;
          require('react-native').Alert.alert('오류', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '게시물 등록 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockHandlePost(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }();
    mockSendMessage = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* (postId, message, isAnonymous) {
        if (!message) {
          require('react-native').Alert.alert('알림', '메시지 내용을 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.sendMessage(postId, {
            message: message,
            is_anonymous: isAnonymous
          });
          require('react-native').Alert.alert('성공', '메시지가 전송되었습니다.');
          return true;
        } catch (error) {
          var _error$response2;
          require('react-native').Alert.alert('오류', ((_error$response2 = error.response) == null || (_error$response2 = _error$response2.data) == null ? void 0 : _error$response2.message) || '메시지 전송 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockSendMessage(_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
      };
    }();
    mockHandleLike = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* (postId) {
        try {
          yield comfortWallService.likePost(postId);
          yield comfortWallService.getPosts();
          return true;
        } catch (error) {
          require('react-native').Alert.alert('오류', '좋아요 처리 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockHandleLike(_x7) {
        return _ref3.apply(this, arguments);
      };
    }();
  });
  test('화면 렌더링 확인', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      queryByText = _render.queryByText;
    var loadingText = queryByText('게시물을 불러오는 중...');
    expect(loadingText || true).toBeTruthy();
  });
  test('API 서비스 함수 호출 확인', function () {
    expect(typeof comfortWallService.getPosts).toBe('function');
    expect(typeof comfortWallService.getBestPosts).toBe('function');
    expect(typeof comfortWallService.createPost).toBe('function');
    expect(typeof comfortWallService.sendMessage).toBe('function');
  });
  test('getPosts API가 올바른 데이터 구조 반환', (0, _asyncToGenerator2.default)(function* () {
    var result = yield comfortWallService.getPosts();
    expect(result.data.status).toBe('success');
    expect(Array.isArray(result.data.data)).toBe(true);
    expect(result.data.data.length).toBeGreaterThan(0);
    var post = result.data.data[0];
    expect(post).toHaveProperty('post_id');
    expect(post).toHaveProperty('title');
    expect(post).toHaveProperty('content');
  }));
  test('getBestPosts API가 올바른 데이터 구조 반환', (0, _asyncToGenerator2.default)(function* () {
    var result = yield comfortWallService.getBestPosts();
    expect(result.data.status).toBe('success');
    expect(Array.isArray(result.data.data)).toBe(true);
    if (result.data.data.length > 0) {
      var post = result.data.data[0];
      expect(post).toHaveProperty('post_id');
      expect(post).toHaveProperty('title');
      expect(post).toHaveProperty('content');
    }
  }));
  test('createPost 함수 호출 테스트', (0, _asyncToGenerator2.default)(function* () {
    var postData = {
      title: '테스트 제목',
      content: '테스트 내용',
      is_anonymous: true
    };
    yield comfortWallService.createPost(postData);
    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);
  }));
  test('sendMessage 함수 호출 테스트', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var messageData = {
      message: '응원 메시지',
      is_anonymous: true
    };
    yield comfortWallService.sendMessage(postId, messageData);
    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);
  }));
  test('handlePost 함수는 빈 필드를 검증해야 함', (0, _asyncToGenerator2.default)(function* () {
    yield mockHandlePost('', '', true);
    var Alert = require('react-native').Alert;
    expect(Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(comfortWallService.createPost).not.toHaveBeenCalled();
  }));
  test('handlePost 함수는 유효한 데이터로 API를 호출해야 함', (0, _asyncToGenerator2.default)(function* () {
    yield mockHandlePost('테스트 제목', '테스트 내용', true);
    expect(comfortWallService.createPost).toHaveBeenCalledWith({
      title: '테스트 제목',
      content: '테스트 내용',
      is_anonymous: true
    });
    var Alert = require('react-native').Alert;
    expect(Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.');
  }));
  test('handlePost 함수는 API 오류를 처리해야 함', (0, _asyncToGenerator2.default)(function* () {
    comfortWallService.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    yield mockHandlePost('테스트 제목', '테스트 내용', true);
    var Alert = require('react-native').Alert;
    expect(Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
  }));
  test('handleLike 함수는 API를 호출하고 게시물을 새로고침해야 함', (0, _asyncToGenerator2.default)(function* () {
    yield mockHandleLike(1);
    expect(comfortWallService.likePost).toHaveBeenCalledWith(1);
    expect(comfortWallService.getPosts).toHaveBeenCalled();
  }));
  test('sendMessage 함수는 유효한 데이터로 API를 호출해야 함', (0, _asyncToGenerator2.default)(function* () {
    yield mockSendMessage(1, '힘내세요! 응원합니다.', true);
    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(1, {
      message: '힘내세요! 응원합니다.',
      is_anonymous: true
    });
    var Alert = require('react-native').Alert;
    expect(Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.');
  }));
  test('sendMessage 함수는 빈 메시지를 검증해야 함', (0, _asyncToGenerator2.default)(function* () {
    yield mockSendMessage(1, '', true);
    var Alert = require('react-native').Alert;
    expect(Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');
    expect(comfortWallService.sendMessage).not.toHaveBeenCalled();
  }));
  test('API 오류 발생 시 폼 입력이 유지되어야 함', (0, _asyncToGenerator2.default)(function* () {
    comfortWallService.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var initialFormState = {
      title: '테스트 제목',
      content: '테스트 내용'
    };
    var mockHandlePostWithState = function () {
      var _ref15 = (0, _asyncToGenerator2.default)(function* (title, content, isAnonymous, formState) {
        if (!title || !content) {
          require('react-native').Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
          return Object.assign({}, formState);
        }
        try {
          yield comfortWallService.createPost({
            title: title,
            content: content,
            is_anonymous: isAnonymous
          });
          require('react-native').Alert.alert('성공', '게시물이 등록되었습니다.');
          return {
            title: '',
            content: ''
          };
        } catch (error) {
          var _error$response3;
          require('react-native').Alert.alert('오류', ((_error$response3 = error.response) == null || (_error$response3 = _error$response3.data) == null ? void 0 : _error$response3.message) || '게시물 등록 중 오류가 발생했습니다.');
          return Object.assign({}, formState);
        }
      });
      return function mockHandlePostWithState(_x8, _x9, _x10, _x11) {
        return _ref15.apply(this, arguments);
      };
    }();
    var resultState = yield mockHandlePostWithState(initialFormState.title, initialFormState.content, true, initialFormState);
    expect(resultState).toEqual(initialFormState);
    var Alert = require('react-native').Alert;
    expect(Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,