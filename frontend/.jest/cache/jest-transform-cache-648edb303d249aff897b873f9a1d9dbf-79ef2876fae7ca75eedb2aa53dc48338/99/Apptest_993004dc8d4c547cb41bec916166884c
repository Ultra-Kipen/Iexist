4942cefa26d83ab2bc537e9be9edc31d
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Provider: function Provider(_ref2) {
      var children = _ref2.children;
      return children;
    }
  };
});
_getJestObj().mock("../src/contexts/AuthContext", function () {
  return {
    AuthProvider: function AuthProvider(_ref3) {
      var children = _ref3.children;
      return children;
    }
  };
});
_getJestObj().mock("../src/navigation/AppNavigator", function () {
  return 'AppNavigator';
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve('test_token');
    }),
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock("../src/services/api/client", function () {
  return {
    interceptors: {
      request: {
        use: jest.fn()
      },
      response: {
        use: jest.fn()
      }
    },
    post: jest.fn(),
    get: jest.fn(),
    delete: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _App = _interopRequireDefault(require("../App"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('App', function () {
  it('renders correctly', function () {
    var tree = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_App.default, {})).toJSON();
    expect(tree).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJTYWZlQXJlYVByb3ZpZGVyIiwiX3JlZiIsImNoaWxkcmVuIiwiUHJvdmlkZXIiLCJfcmVmMiIsIkF1dGhQcm92aWRlciIsIl9yZWYzIiwiZ2V0SXRlbSIsImplc3QiLCJmbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJpbnRlcmNlcHRvcnMiLCJyZXF1ZXN0IiwidXNlIiwicmVzcG9uc2UiLCJwb3N0IiwiZ2V0IiwiZGVsZXRlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3RUZXN0UmVuZGVyZXIiLCJfQXBwIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJqc3giLCJkZWZhdWx0IiwidG9KU09OIiwiZXhwZWN0IiwidG9CZURlZmluZWQiXSwic291cmNlcyI6WyJBcHAudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQXBwLnRlc3QudHN4XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUg64yA7IugIHJlYWN0LXRlc3QtcmVuZGVyZXIg7KeB7KCRIOyCrOyaqVxuaW1wb3J0IHJlbmRlcmVyIGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuaW1wb3J0IEFwcCBmcm9tICcuLi9BcHAnO1xuXG4vLyDtlYTsmpTtlZwg66qo65OgIOydmOyhtOyEsSDrqqjtgrlcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JywgKCkgPT4gKHtcbiAgU2FmZUFyZWFQcm92aWRlcjogKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4sXG59KSk7XG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXBhcGVyJywgKCkgPT4gKHtcbiAgUHJvdmlkZXI6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxufSkpO1xuXG4vLyBBdXRoQ29udGV4dCDrqqjtgrlcbmplc3QubW9jaygnLi4vc3JjL2NvbnRleHRzL0F1dGhDb250ZXh0JywgKCkgPT4gKHtcbiAgQXV0aFByb3ZpZGVyOiAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbixcbn0pKTtcblxuLy8gQXBwTmF2aWdhdG9yIOuqqO2CuVxuamVzdC5tb2NrKCcuLi9zcmMvbmF2aWdhdGlvbi9BcHBOYXZpZ2F0b3InLCAoKSA9PiAnQXBwTmF2aWdhdG9yJyk7XG5cbi8vIEFzeW5jU3RvcmFnZSDrqqjtgrlcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PiAoe1xuICBnZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgndGVzdF90b2tlbicpKSxcbiAgc2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxufSkpO1xuXG4vLyBhcGlDbGllbnQg66qo7YK5XG5qZXN0Lm1vY2soJy4uL3NyYy9zZXJ2aWNlcy9hcGkvY2xpZW50JywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGludGVyY2VwdG9yczoge1xuICAgICAgcmVxdWVzdDogeyB1c2U6IGplc3QuZm4oKSB9LFxuICAgICAgcmVzcG9uc2U6IHsgdXNlOiBqZXN0LmZuKCkgfVxuICAgIH0sXG4gICAgcG9zdDogamVzdC5mbigpLFxuICAgIGdldDogamVzdC5mbigpLFxuICAgIGRlbGV0ZTogamVzdC5mbigpXG4gIH07XG59KTtcblxuLy8g6rCE64uo7ZWcIOyKpOuDheyDtyDthYzsiqTtirjroZwg67OA6rK9XG5kZXNjcmliZSgnQXBwJywgKCkgPT4ge1xuICBpdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8QXBwIC8+KS50b0pTT04oKTtcbiAgICBleHBlY3QodHJlZSkudG9CZURlZmluZWQoKTtcbiAgICAvLyDrmJDripQg7Iqk64OF7IO3IO2FjOyKpO2KuFxuICAgIC8vIGV4cGVjdCh0cmVlKS50b01hdGNoU25hcHNob3QoKTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRTtFQUFBLE9BQU87SUFDakRDLGdCQUFnQixFQUFFLFNBQWxCQSxnQkFBZ0JBLENBQUFDLElBQUE7TUFBQSxJQUFLQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtNQUFBLE9BQU9BLFFBQVE7SUFBQTtFQUM5QyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUhKLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFO0VBQUEsT0FBTztJQUNyQ0ksUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUFDLEtBQUE7TUFBQSxJQUFLRixRQUFRLEdBQUFFLEtBQUEsQ0FBUkYsUUFBUTtNQUFBLE9BQU9BLFFBQVE7SUFBQTtFQUN0QyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hKLFdBQUEsR0FBS0MsSUFBSSxnQ0FBZ0M7RUFBQSxPQUFPO0lBQzlDTSxZQUFZLEVBQUUsU0FBZEEsWUFBWUEsQ0FBQUMsS0FBQTtNQUFBLElBQUtKLFFBQVEsR0FBQUksS0FBQSxDQUFSSixRQUFRO01BQUEsT0FBT0EsUUFBUTtJQUFBO0VBQzFDLENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSEosV0FBQSxHQUFLQyxJQUFJLG1DQUFtQztFQUFBLE9BQU0sY0FBYztBQUFBLEVBQUM7QUFHakVELFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1RFEsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUFBLEVBQUM7SUFDckRDLE9BQU8sRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNQyxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQUEsRUFBQztJQUN6Q0UsVUFBVSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFBQTtFQUM3QyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hiLFdBQUEsR0FBS0MsSUFBSSwrQkFBK0IsWUFBTTtFQUM1QyxPQUFPO0lBQ0xlLFlBQVksRUFBRTtNQUNaQyxPQUFPLEVBQUU7UUFBRUMsR0FBRyxFQUFFUixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFFLENBQUM7TUFDM0JRLFFBQVEsRUFBRTtRQUFFRCxHQUFHLEVBQUVSLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUU7SUFDN0IsQ0FBQztJQUNEUyxJQUFJLEVBQUVWLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDZlUsR0FBRyxFQUFFWCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ2RXLE1BQU0sRUFBRVosSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDbEIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFZLHNCQUFBLEdBQUFDLE9BQUE7QUF4Q0gsSUFBQUMsTUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsa0JBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLElBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUF5QixJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBeEIsWUFBQTtFQUFBLElBQUE2QixRQUFBLEdBQUFMLE9BQUE7SUFBQWQsSUFBQSxHQUFBbUIsUUFBQSxDQUFBbkIsSUFBQTtFQUFBVixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBVSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUF3Q3pCb0IsUUFBUSxDQUFDLEtBQUssRUFBRSxZQUFNO0VBQ3BCQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUM1QixJQUFNQyxJQUFJLEdBQUdDLDBCQUFRLENBQUNDLE1BQU0sQ0FBQyxJQUFBTixXQUFBLENBQUFPLEdBQUEsRUFBQ1IsSUFBQSxDQUFBUyxPQUFHLElBQUUsQ0FBQyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDQyxNQUFNLENBQUNOLElBQUksQ0FBQyxDQUFDTyxXQUFXLENBQUMsQ0FBQztFQUc1QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=