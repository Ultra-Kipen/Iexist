07fab5a7c8ef101de025692aa04478d9
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  goBack: jest.fn()
};
var mockEmotionsResponse = {
  data: {
    status: 'success',
    data: [{
      emotion_id: 1,
      name: '행복',
      icon: 'emoticon-happy-outline',
      color: '#FFD700'
    }, {
      emotion_id: 2,
      name: '감사',
      icon: 'hand-heart',
      color: '#FF69B4'
    }, {
      emotion_id: 3,
      name: '위로',
      icon: 'hand-peace',
      color: '#87CEEB'
    }, {
      emotion_id: 4,
      name: '감동',
      icon: 'heart-outline',
      color: '#FF6347'
    }, {
      emotion_id: 5,
      name: '슬픔',
      icon: 'emoticon-sad-outline',
      color: '#4682B4'
    }, {
      emotion_id: 6,
      name: '불안',
      icon: 'alert-outline',
      color: '#DDA0DD'
    }, {
      emotion_id: 7,
      name: '화남',
      icon: 'emoticon-angry-outline',
      color: '#FF4500'
    }, {
      emotion_id: 8,
      name: '지침',
      icon: 'emoticon-neutral-outline',
      color: '#A9A9A9'
    }, {
      emotion_id: 9,
      name: '우울',
      icon: 'weather-cloudy',
      color: '#708090'
    }, {
      emotion_id: 10,
      name: '고독',
      icon: 'account-outline',
      color: '#8B4513'
    }, {
      emotion_id: 11,
      name: '충격',
      icon: 'lightning-bolt',
      color: '#9932CC'
    }, {
      emotion_id: 12,
      name: '편함',
      icon: 'sofa-outline',
      color: '#32CD32'
    }]
  }
};
describe('EmotionLogScreen 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue(mockEmotionsResponse);
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText;
    expect(getByText('감정 데이터를 불러오는 중...')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('오늘의 감정')).toBeTruthy();
    }, {
      timeout: 10000
    });
  }), 30000);
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render2.findByText;
    var emotionChip = yield findByText('행복');
    expect(emotionChip).toBeTruthy();
  }), 30000);
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render3.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }), 30000);
  it('감정을 선택하지 않으면 제출 버튼이 비활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render4.findByTestId;
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton).toHaveTextContent('감정 기록하기');
    expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
  }), 30000);
  it('감정 선택 시 제출 버튼이 활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render5.findByText,
      findByTestId = _render5.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
      var submitButton = yield findByTestId('emotion-submit-button');
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    }));
  }), 30000);
  it('감정 기록 성공 시 감정 기록 API가 호출되고 성공 후 이전 화면으로 이동함', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render6.findByText,
      findByTestId = _render6.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    mockNavigation.goBack.mockClear();
    var alertCallback = jest.fn();
    var mockAlertCall = _reactNative2.Alert.alert.mock.calls.find(function (call) {
      return call[0] === '감정 기록 완료';
    });
    if (mockAlertCall && mockAlertCall[2] && mockAlertCall[2][0] && mockAlertCall[2][0].onPress) {
      mockAlertCall[2][0].onPress();
      expect(mockNavigation.goBack).toHaveBeenCalled();
    } else {
      console.warn('Alert 모킹이 동작하지 않아 네비게이션 확인을 건너뜁니다');
    }
  }), 30000);
  it('감정 기록 실패 시 API 오류가 발생함', (0, _asyncToGenerator2.default)(function* () {
    var errorResponse = {
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    };
    _emotionService.default.recordEmotions.mockRejectedValue(errorResponse);
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render7.findByText,
      findByTestId = _render7.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
      expect(submitButton).toHaveTextContent('감정 기록하기');
      expect(submitButton).not.toHaveTextContent('로딩');
    });
  }), 30000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,