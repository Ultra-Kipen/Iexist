{"version":3,"names":["_getJestObj","mock","__esModule","default","jest","fn","useTheme","mockReturnValue","colors","primary","surface","background","useAuth","user","username","isAuthenticated","useEmotion","emotions","emotion_id","name","selectedEmotions","selectEmotion","_interopRequireDefault","require","_asyncToGenerator2","_classCallCheck2","_createClass2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","_react","_reactNative","_reactNative2","_jsxRuntime","_require","_callSuper","t","o","e","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","MockChip","_React$Component","_this","_len","arguments","length","args","Array","_key","concat","state","selected","toggle","setState","prevState","key","value","render","emotion","props","jsx","TouchableOpacity","testID","onPress","accessibilityState","children","Text","React","Component","MockHomeScreen","View","map","describe","beforeEach","clearAllMocks","HomeScreenModule","mockImplementation","it","HomeScreen","_render","getByTestId","forEach","emotionChip","expect","toBeTruthy","_render2","update","happyChip","toBe","fireEvent","press","updatedChip","finalChip"],"sources":["EmotionSelector.test.tsx"],"sourcesContent":["// EmotionSelector.test.tsx (수정)\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\nimport * as AuthContextModule from '../../src/contexts/AuthContext';\r\nimport * as EmotionContextModule from '../../src/contexts/EmotionContext';\r\n\r\n// 모의 칩 컴포넌트의 Props 타입 정의\r\ninterface MockChipProps {\r\n  emotion: string;\r\n  [key: string]: any;\r\n}\r\n\r\n// 모의 칩 컴포넌트의 State 타입 정의\r\ninterface MockChipState {\r\n  selected: boolean;\r\n}\r\n\r\n// 모의 감정 칩 컴포넌트를 생성하기 위한 클래스 컴포넌트\r\nclass MockChip extends React.Component<MockChipProps, MockChipState> {\r\n  state: MockChipState = {\r\n    selected: false\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({ selected: !prevState.selected }));\r\n  };\r\n\r\n  render() {\r\n    const { emotion } = this.props;\r\n    return (\r\n      <TouchableOpacity \r\n        testID={`emotion-chip-${emotion}`}\r\n        onPress={this.toggle}\r\n        accessibilityState={{ selected: this.state.selected }}\r\n      >\r\n        <Text>{emotion}</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\n// 실제 HomeScreen 대신 사용할 간단한 모의 컴포넌트\r\nfunction MockHomeScreen() {\r\n  const emotions = [\r\n    '행복', '감사', '위로', '감동', '슬픔', \r\n    '불안', '화남', '지침', '우울', '고독', \r\n    '충격', '편함'\r\n  ];\r\n  \r\n  return (\r\n    <View testID=\"home-screen-container\">\r\n      {emotions.map((emotion) => (\r\n        <MockChip \r\n          key={emotion}\r\n          emotion={emotion}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n}\r\n\r\n// 원본 HomeScreen 모듈 모킹\r\njest.mock('../../src/screens/HomeScreen', () => ({\r\n  __esModule: true,\r\n  default: jest.fn()\r\n}));\r\n\r\n// React Native Paper 모킹\r\njest.mock('react-native-paper', () => ({\r\n  useTheme: jest.fn().mockReturnValue({\r\n    colors: {\r\n      primary: '#000',\r\n      surface: '#fff',\r\n      background: '#fff'\r\n    }\r\n  })\r\n}));\r\n\r\n// AuthContext 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: jest.fn().mockReturnValue({\r\n    user: { username: 'testuser' },\r\n    isAuthenticated: true\r\n  })\r\n}));\r\n\r\n// EmotionContext 모킹\r\njest.mock('../../src/contexts/EmotionContext', () => ({\r\n  useEmotion: jest.fn().mockReturnValue({\r\n    emotions: [{ emotion_id: 1, name: '행복' }],\r\n    selectedEmotions: [],\r\n    selectEmotion: jest.fn()\r\n  })\r\n}));\r\n\r\ndescribe('HomeScreen Emotion Selector', () => {\r\n  // 테스트 전에 HomeScreen 모킹을 설정\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 실제 HomeScreen 대신 MockHomeScreen 사용\r\n    const HomeScreenModule = require('../../src/screens/HomeScreen');\r\n    HomeScreenModule.default.mockImplementation(MockHomeScreen);\r\n  });\r\n  \r\n  const emotions = [\r\n    '행복', '감사', '위로', '감동', '슬픔', \r\n    '불안', '화남', '지침', '우울', '고독', \r\n    '충격', '편함'\r\n  ];\r\n\r\n  it('renders all emotion chips', () => {\r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByTestId } = render(<HomeScreen />);\r\n    \r\n    emotions.forEach(emotion => {\r\n      const emotionChip = getByTestId(`emotion-chip-${emotion}`);\r\n      expect(emotionChip).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('selects and deselects emotion chips', async () => {\r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByTestId, update } = render(<HomeScreen />);\r\n    \r\n    const happyChip = getByTestId('emotion-chip-행복');\r\n    \r\n    // 초기 상태 확인\r\n    expect(happyChip.props.accessibilityState.selected).toBe(false);\r\n    \r\n    // 첫 번째 선택\r\n    fireEvent.press(happyChip);\r\n    \r\n    // 컴포넌트 상태 업데이트 및 리렌더링을 강제\r\n    update(<HomeScreen />);\r\n    \r\n    // 업데이트된 요소 가져오기\r\n    const updatedChip = getByTestId('emotion-chip-행복');\r\n    expect(updatedChip.props.accessibilityState.selected).toBe(true);\r\n    \r\n    // 다시 선택 (토글)\r\n    fireEvent.press(updatedChip);\r\n    \r\n    // 컴포넌트 상태 업데이트 및 리렌더링을 강제\r\n    update(<HomeScreen />);\r\n    \r\n    // 다시 업데이트된 요소 가져오기\r\n    const finalChip = getByTestId('emotion-chip-행복');\r\n    expect(finalChip.props.accessibilityState.selected).toBe(false);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}