242abc5b30b79194e3b48de20085eae7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callMicrotasks = void 0;
exports.executeOnUIRuntimeSync = executeOnUIRuntimeSync;
exports.runOnJS = runOnJS;
exports.runOnUI = runOnUI;
exports.runOnUIImmediately = runOnUIImmediately;
exports.setupMicrotasks = setupMicrotasks;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _commonTypes = require("./commonTypes.js");
var _errors = require("./errors.js");
var _PlatformChecker = require("./PlatformChecker.js");
var _ReanimatedModule = require("./ReanimatedModule");
var _shareables = require("./shareables.js");
var IS_JEST = (0, _PlatformChecker.isJest)();
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var _runOnUIQueue = [];
function setupMicrotasks() {
  'worklet';

  var microtasksQueue = [];
  var isExecutingMicrotasksQueue = false;
  global.queueMicrotask = function (callback) {
    microtasksQueue.push(callback);
  };
  global.__callMicrotasks = function () {
    if (isExecutingMicrotasksQueue) {
      return;
    }
    try {
      isExecutingMicrotasksQueue = true;
      for (var index = 0; index < microtasksQueue.length; index += 1) {
        microtasksQueue[index]();
      }
      microtasksQueue = [];
      global._maybeFlushUIUpdatesQueue();
    } finally {
      isExecutingMicrotasksQueue = false;
    }
  };
}
function callMicrotasksOnUIThread() {
  'worklet';

  global.__callMicrotasks();
}
var callMicrotasks = exports.callMicrotasks = SHOULD_BE_USE_WEB ? function () {} : callMicrotasksOnUIThread;
function runOnUI(worklet) {
  'worklet';

  if (true && !SHOULD_BE_USE_WEB && _WORKLET) {
    throw new _errors.ReanimatedError('`runOnUI` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');
  }
  if (true && !SHOULD_BE_USE_WEB && !(0, _commonTypes.isWorkletFunction)(worklet)) {
    throw new _errors.ReanimatedError('`runOnUI` can only be used with worklets.');
  }
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (IS_JEST) {
      _ReanimatedModule.ReanimatedModule.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
        'worklet';

        worklet.apply(void 0, args);
      }));
      return;
    }
    if (true) {
      (0, _shareables.makeShareableCloneRecursive)(worklet);
      (0, _shareables.makeShareableCloneRecursive)(args);
    }
    _runOnUIQueue.push([worklet, args]);
    if (_runOnUIQueue.length === 1) {
      queueMicrotask(function () {
        var queue = _runOnUIQueue;
        _runOnUIQueue = [];
        _ReanimatedModule.ReanimatedModule.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
          'worklet';
          queue.forEach(function (_ref) {
            var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              worklet = _ref2[0],
              args = _ref2[1];
            worklet.apply(void 0, (0, _toConsumableArray2.default)(args));
          });
          callMicrotasks();
        }));
      });
    }
  };
}
function executeOnUIRuntimeSync(worklet) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return _ReanimatedModule.ReanimatedModule.executeOnUIRuntimeSync((0, _shareables.makeShareableCloneRecursive)(function () {
      'worklet';

      var result = worklet.apply(void 0, args);
      return (0, _shareables.makeShareableCloneOnUIRecursive)(result);
    }));
  };
}
function runOnUIImmediately(worklet) {
  'worklet';

  if (true && !SHOULD_BE_USE_WEB && _WORKLET) {
    throw new _errors.ReanimatedError('`runOnUIImmediately` cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');
  }
  if (true && !SHOULD_BE_USE_WEB && !(0, _commonTypes.isWorkletFunction)(worklet)) {
    throw new _errors.ReanimatedError('`runOnUIImmediately` can only be used with worklets.');
  }
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    _ReanimatedModule.ReanimatedModule.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
      'worklet';

      worklet.apply(void 0, args);
    }));
  };
}
function runWorkletOnJS(worklet) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }
  worklet.apply(void 0, args);
}
function runOnJS(fun) {
  'worklet';

  if (SHOULD_BE_USE_WEB || !_WORKLET) {
    return function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return queueMicrotask(args.length ? function () {
        return fun.apply(void 0, args);
      } : fun);
    };
  }
  if ((0, _commonTypes.isWorkletFunction)(fun)) {
    return function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return runOnJS(runWorkletOnJS).apply(void 0, [fun].concat(args));
    };
  }
  if (fun.__remoteFunction) {
    fun = fun.__remoteFunction;
  }
  var scheduleOnJS = typeof fun === 'function' ? global._scheduleHostFunctionOnJS : global._scheduleRemoteFunctionOnJS;
  return function () {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }
    scheduleOnJS(fun, args.length > 0 ? (0, _shareables.makeShareableCloneOnUIRecursive)(args) : undefined);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,