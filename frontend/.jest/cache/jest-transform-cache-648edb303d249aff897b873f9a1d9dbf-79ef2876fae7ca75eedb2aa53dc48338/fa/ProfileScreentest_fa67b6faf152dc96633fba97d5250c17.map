{"version":3,"names":["_getJestObj","mock","jest","fn","mockReturnValue","TextInput","Button","Avatar","useNavigation","navigate","mockNavigate","useRoute","params","useIsFocused","getProfile","mockResolvedValue","data","user_id","username","nickname","profile_image_url","background_image_url","favorite_quote","email","getUserStats","my_day_post_count","my_day_like_received_count","challenge_count","logout","undefined","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ProfileScreen","_jsxRuntime","_require","createMockThemeContext","theme","colors","primary","background","card","text","border","notification","toggleTheme","createMockAuthContext","isAuthenticated","user","loading","login","register","checkAuthStatus","ThemeContext","React","createContext","AuthContext","describe","beforeEach","clearAllMocks","it","default","mockTheme","mockAuth","userService","_render","render","jsx","Provider","value","children","queryByText","waitFor","expect","toHaveBeenCalled","timeout","toBeTruthy","_render2","getByText","editButton","authService","_render3","logoutButton","toBe"],"sources":["ProfileScreen.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport ProfileScreen from '../../src/screens/ProfileScreen';\r\n\r\n// 모든 외부 컴포넌트 모킹\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => jest.fn().mockReturnValue(null));\r\njest.mock('react-native-paper', () => ({\r\n  TextInput: jest.fn().mockReturnValue(null),\r\n  Button: jest.fn().mockReturnValue(null),\r\n  Avatar: jest.fn().mockReturnValue(null),\r\n}));\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigate = jest.fn();\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: mockNavigate,\r\n  }),\r\n  useRoute: () => ({\r\n    params: {},\r\n  }),\r\n  useIsFocused: () => true,\r\n}));\r\n\r\n// API 클라이언트 모킹\r\n// userService 모킹 (client 대신)\r\njest.mock('../../src/services/api/userService', () => ({\r\n  getProfile: jest.fn().mockResolvedValue({\r\n    data: {\r\n      data: {\r\n        user_id: 1,\r\n        username: 'testuser',\r\n        nickname: '테스트유저',\r\n        profile_image_url: 'https://example.com/profile.jpg',\r\n        background_image_url: 'https://example.com/background.jpg',\r\n        favorite_quote: '매일 조금씩 성장하자',\r\n        email: 'test@example.com',\r\n      }\r\n    }\r\n  }),\r\n  getUserStats: jest.fn().mockResolvedValue({\r\n    data: {\r\n      data: {\r\n        my_day_post_count: 10,\r\n        my_day_like_received_count: 25,\r\n        challenge_count: 5\r\n      }\r\n    }\r\n  }),\r\n}));\r\n// authService 모킹\r\njest.mock('../../src/services/api/authService', () => ({\r\n  logout: jest.fn().mockResolvedValue(undefined),\r\n}));\r\n\r\n// 타입 정의\r\ntype Theme = {\r\n  theme: string;\r\n  colors: {\r\n    primary: string;\r\n    background: string;\r\n    card: string;\r\n    text: string;\r\n    border: string;\r\n    notification: string;\r\n  };\r\n  toggleTheme: () => void;\r\n};\r\n\r\ntype AuthContextType = {\r\n  isAuthenticated: boolean;\r\n  user: {\r\n    user_id: number;\r\n    username: string;\r\n  } | null;\r\n  loading: boolean;\r\n  login: (credentials: any) => Promise<any>;\r\n  logout: () => Promise<void>;\r\n  register: (userData: any) => Promise<any>;\r\n  checkAuthStatus: () => Promise<boolean>;\r\n};\r\n\r\n// ThemeContext 모의 구현\r\nconst createMockThemeContext = (): Theme => ({\r\n  theme: 'light',\r\n  colors: {\r\n    primary: '#007AFF',\r\n    background: '#FFFFFF',\r\n    card: '#F2F2F2',\r\n    text: '#000000',\r\n    border: '#CCCCCC',\r\n    notification: '#FF3B30',\r\n  },\r\n  toggleTheme: () => {},\r\n});\r\n\r\n// AuthContext 모의 구현\r\nconst createMockAuthContext = (): AuthContextType => ({\r\n  isAuthenticated: true,\r\n  user: { user_id: 1, username: 'testuser' },\r\n  loading: false,\r\n  login: jest.fn().mockResolvedValue({}),\r\n  logout: jest.fn().mockResolvedValue(undefined),\r\n  register: jest.fn().mockResolvedValue({}),\r\n  checkAuthStatus: jest.fn().mockResolvedValue(true),\r\n});\r\n\r\n// 동적으로 컨텍스트 생성\r\nconst ThemeContext = React.createContext<Theme>(createMockThemeContext());\r\nconst AuthContext = React.createContext<AuthContextType>(createMockAuthContext());\r\n\r\ndescribe('ProfileScreen 화면', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('프로필 화면이 올바르게 렌더링 되어야 함', async () => {\r\n    const mockTheme = createMockThemeContext();\r\n    const mockAuth = createMockAuthContext();\r\n\r\n    const userService = require('../../src/services/api/userService');\r\n    \r\n    const { queryByText } = render(\r\n      <ThemeContext.Provider value={mockTheme}>\r\n        <AuthContext.Provider value={mockAuth}>\r\n          <ProfileScreen />\r\n        </AuthContext.Provider>\r\n      </ThemeContext.Provider>\r\n    );\r\n    \r\n    await waitFor(() => {\r\n      expect(userService.getProfile).toHaveBeenCalled();\r\n      expect(userService.getUserStats).toHaveBeenCalled();\r\n    }, { timeout: 10000 });\r\n    \r\n    expect(true).toBeTruthy();\r\n  }, 15000); // 테스트 타임아웃을 15초로 증가\r\n\r\n  it('프로필 편집 버튼이 존재해야 함', async () => {\r\n    const mockTheme = createMockThemeContext();\r\n    const mockAuth = createMockAuthContext();\r\n    const userService = require('../../src/services/api/userService');\r\n\r\n    const { getByText } = render(\r\n      <ThemeContext.Provider value={mockTheme}>\r\n        <AuthContext.Provider value={mockAuth}>\r\n          <ProfileScreen />\r\n        </AuthContext.Provider>\r\n      </ThemeContext.Provider>\r\n    );\r\n    \r\n    await waitFor(() => {\r\n      expect(userService.getProfile).toHaveBeenCalled();\r\n      expect(userService.getUserStats).toHaveBeenCalled();\r\n    }, { timeout: 10000 });\r\n    \r\n    const editButton = getByText('프로필 편집');\r\n    expect(editButton).toBeTruthy();\r\n  }, 15000);\r\n\r\n  it('로그아웃 버튼을 누르면 로그아웃 함수가 호출되어야 함', async () => {\r\n    const mockTheme = createMockThemeContext();\r\n    const mockAuth = createMockAuthContext();\r\n    const userService = require('../../src/services/api/userService');\r\n    const authService = require('../../src/services/api/authService');\r\n\r\n    const { getByText } = render(\r\n      <ThemeContext.Provider value={mockTheme}>\r\n        <AuthContext.Provider value={mockAuth}>\r\n          <ProfileScreen />\r\n        </AuthContext.Provider>\r\n      </ThemeContext.Provider>\r\n    );\r\n    \r\n    await waitFor(() => {\r\n      expect(userService.getProfile).toHaveBeenCalled();\r\n      expect(userService.getUserStats).toHaveBeenCalled();\r\n    }, { timeout: 10000 });\r\n    \r\n    const logoutButton = getByText('로그아웃');\r\n    expect(logoutButton).toBeTruthy();\r\n    expect(typeof mockAuth.logout).toBe('function');\r\n  }, 15000);\r\n});"],"mappings":"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","ignoreList":[]}