598544ecefa10436d3970e675d438c6f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var BASE_URL = 'http://10.0.2.2:3000/api';
var apiClient = _axios.default.create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  },
  timeout: 10000
});
var refreshAuthToken = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    try {
      var refreshToken = yield _asyncStorage.default.getItem('refresh_token');
      if (!refreshToken) {
        return null;
      }
      var response = yield _axios.default.post(`${BASE_URL}/auth/refresh`, {
        refreshToken: refreshToken
      });
      if (response.data && response.data.token) {
        yield _asyncStorage.default.setItem('auth_token', response.data.token);
        return response.data.token;
      }
      return null;
    } catch (error) {
      console.error('토큰 갱신 오류:', error);
      return null;
    }
  });
  return function refreshAuthToken() {
    return _ref.apply(this, arguments);
  };
}();
apiClient.interceptors.request.use(function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (config) {
    try {
      var token = yield _asyncStorage.default.getItem('auth_token');
      if (token) {
        config.headers = config.headers || {};
        config.headers['Authorization'] = `Bearer ${token}`;
      }
    } catch (error) {
      console.error('토큰 가져오기 오류:', error);
    }
    return config;
  });
  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}(), function (error) {
  console.error('API 요청 오류:', error);
  return Promise.reject(error);
});
apiClient.interceptors.response.use(function (response) {
  return response;
}, function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (error) {
    var originalRequest = error.config;
    if (error.response && error.response.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        var newToken = yield refreshAuthToken();
        if (newToken) {
          originalRequest.headers = originalRequest.headers || {};
          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
          return (0, _axios.default)(originalRequest);
        } else {
          yield _asyncStorage.default.removeItem('auth_token');
          yield _asyncStorage.default.removeItem('refresh_token');
          yield _asyncStorage.default.removeItem('user');
          return Promise.reject(error);
        }
      } catch (refreshError) {
        console.error('토큰 갱신 오류:', refreshError);
        yield _asyncStorage.default.removeItem('auth_token');
        yield _asyncStorage.default.removeItem('refresh_token');
        yield _asyncStorage.default.removeItem('user');
        return Promise.reject(error);
      }
    }
    if (!error.response) {
      if (!originalRequest._retryCount || originalRequest._retryCount < 3) {
        originalRequest._retryCount = (originalRequest._retryCount || 0) + 1;
        var delayMs = 1000 * Math.pow(2, originalRequest._retryCount - 1);
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            apiClient(originalRequest).then(resolve).catch(reject);
          }, delayMs);
        });
      }
    }
    return Promise.reject(error);
  });
  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
}());
var _default = exports.default = apiClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,