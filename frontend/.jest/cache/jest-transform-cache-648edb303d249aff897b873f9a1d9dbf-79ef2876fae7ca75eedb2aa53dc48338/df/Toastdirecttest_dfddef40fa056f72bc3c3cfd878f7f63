91956eab8044bdcac15007718485e93b
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: function TouchableOpacity(_ref) {
      var onPress = _ref.onPress,
        children = _ref.children;
      return {
        type: 'TouchableOpacity',
        props: {
          onPress: onPress,
          children: children
        }
      };
    },
    Animated: {
      View: function View(_ref2) {
        var children = _ref2.children,
          style = _ref2.style;
        return {
          type: 'Animated.View',
          props: {
            children: children,
            style: style
          }
        };
      },
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            if (cb) cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          })
        };
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
describe('Toast Direct Implementation Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  test('Test Toast internal implementation directly', function () {
    var onClose = jest.fn();
    var toast = new _Toast.default({
      visible: true,
      message: '테스트 메시지',
      duration: 1000,
      onClose: onClose,
      type: 'success',
      position: 'bottom',
      testID: 'toast'
    });
    toast.componentDidMount && toast.componentDidMount();
    if (toast.fadeAnim) {
      toast.fadeAnim.setValue(0);
    }
    toast.UNSAFE_componentWillReceiveProps && toast.UNSAFE_componentWillReceiveProps({
      visible: false,
      message: '테스트 메시지',
      duration: 1000,
      onClose: onClose
    });
    toast.hideToast && toast.hideToast();
    jest.runAllTimers();
    var types = ['success', 'error', 'warning', 'info'];
    for (var type of types) {
      toast.props = Object.assign({}, toast.props, {
        type: type
      });
      toast.getBackgroundColor && toast.getBackgroundColor();
    }
    var renderResult = toast.render();
    expect(onClose).toHaveBeenCalled();
  });
  test('Test Toast lifecycle methods', function () {
    var onClose = jest.fn();
    var toast = new _Toast.default({
      visible: false,
      message: '테스트 메시지',
      onClose: onClose
    });
    var result = toast.render();
    expect(result).toBeNull();
    toast.props = Object.assign({}, toast.props, {
      visible: true
    });
    result = toast.render();
    expect(result).not.toBeNull();
    toast.props = Object.assign({}, toast.props, {
      type: 'error',
      position: 'top',
      icon: {
        type: 'Icon',
        props: {}
      }
    });
    result = toast.render();
    toast.hideToast && toast.hideToast();
    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
  });
  test('Test ToastController directly', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트'
    });
    _Toast.ToastController.show({
      message: '테스트',
      type: 'success',
      position: 'top',
      duration: 2000,
      icon: {
        type: 'Icon',
        props: {}
      }
    });
    _Toast.ToastController.hide();
    _Toast.ToastController.setRef(null);
    _Toast.ToastController.show({
      message: '테스트'
    });
    _Toast.ToastController.hide();
    expect(mockToast.show).toHaveBeenCalledTimes(2);
    expect(mockToast.hide).toHaveBeenCalledTimes(1);
  });
  test('Test Toast rendered elements directly', function () {
    var props = {
      visible: true,
      message: '테스트 메시지',
      type: 'success',
      position: 'top',
      icon: {
        type: 'Icon',
        props: {}
      },
      testID: 'toast'
    };
    var toast = new _Toast.default(props);
    var rendered = toast.render();
    expect(rendered).not.toBeNull();
    expect(rendered.props.testID).toBe('toast');
    expect(rendered.props.style).toBeDefined();
    var touchable = rendered.props.children;
    expect(touchable.type).toBe('TouchableOpacity');
    var content = touchable.props.children;
    var iconContainer = Array.isArray(content) ? content[0] : null;
    expect(iconContainer).not.toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,