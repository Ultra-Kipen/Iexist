293aa79e0810d07fe1a700f7cba4589a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;
var _chalk = _interopRequireDefault(require("chalk"));
var nodeConsole = _interopRequireWildcard(require("console"));
var _redent = _interopRequireDefault(require("redent"));
var nodeUtil = _interopRequireWildcard(require("util"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var logger = exports.logger = {
  debug: function debug(message) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var output = formatMessage.apply(void 0, ['●', message].concat(args));
    nodeConsole.debug(_chalk.default.dim(output));
  },
  info: function info(message) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    var output = formatMessage.apply(void 0, ['●', message].concat(args));
    nodeConsole.info(output);
  },
  warn: function warn(message) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    var output = formatMessage.apply(void 0, ['▲', message].concat(args));
    nodeConsole.warn(_chalk.default.yellow(output));
  },
  error: function error(message) {
    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      args[_key4 - 1] = arguments[_key4];
    }
    var output = formatMessage.apply(void 0, ['■', message].concat(args));
    nodeConsole.error(_chalk.default.red(output));
  }
};
function formatMessage(symbol, message) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
    args[_key5 - 2] = arguments[_key5];
  }
  var formatted = nodeUtil.format.apply(nodeUtil, [message].concat(args));
  var indented = (0, _redent.default)(formatted, 4);
  return `  ${symbol} ${indented.trimStart()}\n`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2hhbGsiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm5vZGVDb25zb2xlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVkZW50Iiwibm9kZVV0aWwiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJsb2dnZXIiLCJleHBvcnRzIiwiZGVidWciLCJtZXNzYWdlIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJvdXRwdXQiLCJmb3JtYXRNZXNzYWdlIiwiYXBwbHkiLCJjb25jYXQiLCJkaW0iLCJpbmZvIiwiX2xlbjIiLCJfa2V5MiIsIndhcm4iLCJfbGVuMyIsIl9rZXkzIiwieWVsbG93IiwiZXJyb3IiLCJfbGVuNCIsIl9rZXk0IiwicmVkIiwic3ltYm9sIiwiX2xlbjUiLCJfa2V5NSIsImZvcm1hdHRlZCIsImZvcm1hdCIsImluZGVudGVkIiwidHJpbVN0YXJ0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvbG9nZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgKiBhcyBub2RlQ29uc29sZSBmcm9tICdjb25zb2xlJztcbmltcG9ydCByZWRlbnQgZnJvbSAncmVkZW50JztcbmltcG9ydCAqIGFzIG5vZGVVdGlsIGZyb20gJ3V0aWwnO1xuXG5leHBvcnQgY29uc3QgbG9nZ2VyID0ge1xuICBkZWJ1ZyhtZXNzYWdlOiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICBjb25zdCBvdXRwdXQgPSBmb3JtYXRNZXNzYWdlKCfil48nLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICBub2RlQ29uc29sZS5kZWJ1ZyhjaGFsay5kaW0ob3V0cHV0KSk7XG4gIH0sXG5cbiAgaW5mbyhtZXNzYWdlOiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICBjb25zdCBvdXRwdXQgPSBmb3JtYXRNZXNzYWdlKCfil48nLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICBub2RlQ29uc29sZS5pbmZvKG91dHB1dCk7XG4gIH0sXG5cbiAgd2FybihtZXNzYWdlOiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICBjb25zdCBvdXRwdXQgPSBmb3JtYXRNZXNzYWdlKCfilrInLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICBub2RlQ29uc29sZS53YXJuKGNoYWxrLnllbGxvdyhvdXRwdXQpKTtcbiAgfSxcblxuICBlcnJvcihtZXNzYWdlOiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgICBjb25zdCBvdXRwdXQgPSBmb3JtYXRNZXNzYWdlKCfilqAnLCBtZXNzYWdlLCAuLi5hcmdzKTtcbiAgICBub2RlQ29uc29sZS5lcnJvcihjaGFsay5yZWQob3V0cHV0KSk7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNZXNzYWdlKHN5bWJvbDogc3RyaW5nLCBtZXNzYWdlOiB1bmtub3duLCAuLi5hcmdzOiB1bmtub3duW10pIHtcbiAgY29uc3QgZm9ybWF0dGVkID0gbm9kZVV0aWwuZm9ybWF0KG1lc3NhZ2UsIC4uLmFyZ3MpO1xuICBjb25zdCBpbmRlbnRlZCA9IHJlZGVudChmb3JtYXR0ZWQsIDQpO1xuICByZXR1cm4gYCAgJHtzeW1ib2x9ICR7aW5kZW50ZWQudHJpbVN0YXJ0KCl9XFxuYDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FB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