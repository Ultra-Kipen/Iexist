18ea460adcc974ca372548f868cc0500
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startWebLayoutAnimation = startWebLayoutAnimation;
exports.tryActivateLayoutTransition = tryActivateLayoutTransition;
var _commonTypes = require("../../commonTypes.js");
var _Easing = require("../../Easing.js");
var _index = require("../../logger/index.js");
var _index2 = require("../animationBuilder/index.js");
var _componentStyle = require("./componentStyle.js");
var _componentUtils = require("./componentUtils.js");
var _config = require("./config.js");
var _createAnimation = require("./createAnimation.js");
var _domUtils = require("./domUtils.js");
function chooseConfig(animationType, props) {
  var config = animationType === _commonTypes.LayoutAnimationType.ENTERING ? props.entering : animationType === _commonTypes.LayoutAnimationType.EXITING ? props.exiting : animationType === _commonTypes.LayoutAnimationType.LAYOUT ? props.layout : null;
  return config;
}
function checkUndefinedAnimationFail(initialAnimationName, needsCustomization) {
  if (initialAnimationName in _config.Animations || needsCustomization) {
    return false;
  }
  _index.logger.warn("Couldn't load entering/exiting animation. Current version supports only predefined animations with modifiers: duration, delay, easing, randomizeDelay, withCallback, reducedMotion.");
  return true;
}
function maybeReportOverwrittenProperties(keyframe, styles) {
  var propertyRegex = /([a-zA-Z-]+)(?=:)/g;
  var animationProperties = new Set();
  for (var match of keyframe.matchAll(propertyRegex)) {
    animationProperties.add(match[1]);
  }
  var commonProperties = Array.from(styles).filter(function (style) {
    return animationProperties.has(style);
  });
  if (commonProperties.length === 0) {
    return;
  }
  _index.logger.warn(`${commonProperties.length === 1 ? 'Property' : 'Properties'} [${commonProperties.join(', ')}] may be overwritten by a layout animation. Please wrap your component with an animated view and apply the layout animation on the wrapper.`);
}
function chooseAction(animationType, animationConfig, element, transitionData) {
  switch (animationType) {
    case _commonTypes.LayoutAnimationType.ENTERING:
      (0, _componentUtils.setElementAnimation)(element, animationConfig, true);
      break;
    case _commonTypes.LayoutAnimationType.LAYOUT:
      transitionData.reversed = animationConfig.reversed;
      (0, _componentUtils.handleLayoutTransition)(element, animationConfig, transitionData);
      break;
    case _commonTypes.LayoutAnimationType.EXITING:
      (0, _componentUtils.handleExitingAnimation)(element, animationConfig);
      break;
  }
}
function tryGetAnimationConfig(props, animationType) {
  var config = chooseConfig(animationType, props);
  if (!config) {
    return null;
  }
  var isLayoutTransition = animationType === _commonTypes.LayoutAnimationType.LAYOUT;
  var isCustomKeyframe = config instanceof _index2.Keyframe;
  var hasInitialValues = config.initialValues !== undefined;
  var animationName;
  if (isCustomKeyframe) {
    animationName = (0, _createAnimation.createCustomKeyFrameAnimation)(config.definitions);
  } else if (typeof config === 'function') {
    animationName = config.presetName;
  } else {
    animationName = config.constructor.presetName;
  }
  if (hasInitialValues) {
    animationName = (0, _createAnimation.createAnimationWithInitialValues)(animationName, config.initialValues);
  }
  var shouldFail = checkUndefinedAnimationFail(animationName, isLayoutTransition || isCustomKeyframe || hasInitialValues);
  if (shouldFail) {
    return null;
  }
  if (isCustomKeyframe) {
    var keyframeTimestamps = Object.keys(config.definitions);
    if (!(keyframeTimestamps.includes('100') || keyframeTimestamps.includes('to'))) {
      _index.logger.warn(`Neither '100' nor 'to' was specified in Keyframe definition. This may result in wrong final position of your component. One possible solution is to duplicate last timestamp in definition as '100' (or 'to')`);
    }
  }
  var animationConfig = (0, _componentUtils.getProcessedConfig)(animationName, animationType, config);
  return animationConfig;
}
function startWebLayoutAnimation(props, element, animationType, transitionData) {
  var animationConfig = tryGetAnimationConfig(props, animationType);
  (0, _componentUtils.maybeModifyStyleForKeyframe)(element, props.entering);
  if ((animationConfig == null ? void 0 : animationConfig.animationName) in _config.Animations) {
    maybeReportOverwrittenProperties(_config.Animations[animationConfig == null ? void 0 : animationConfig.animationName].style, element.style);
  }
  if (animationConfig) {
    chooseAction(animationType, animationConfig, element, transitionData);
  } else {
    (0, _componentStyle.makeElementVisible)(element, 0);
  }
}
function tryActivateLayoutTransition(props, element, snapshot) {
  var _props$layout$enterin, _props$layout$exiting, _props$layout$easingX, _props$layout$easingX2, _props$layout$easingY, _props$layout$easingY2;
  if (!props.layout) {
    return;
  }
  var rect = element.getBoundingClientRect();
  if ((0, _domUtils.areDOMRectsEqual)(rect, snapshot)) {
    return;
  }
  var enteringAnimation = (_props$layout$enterin = props.layout.enteringV) == null ? void 0 : _props$layout$enterin.presetName;
  var exitingAnimation = (_props$layout$exiting = props.layout.exitingV) == null ? void 0 : _props$layout$exiting.presetName;
  var deltaX = (snapshot.width - rect.width) / 2;
  var deltaY = (snapshot.height - rect.height) / 2;
  var transitionData = {
    translateX: snapshot.x - rect.x + deltaX,
    translateY: snapshot.y - rect.y + deltaY,
    scaleX: snapshot.width / rect.width,
    scaleY: snapshot.height / rect.height,
    reversed: false,
    easingX: (_props$layout$easingX = (_props$layout$easingX2 = props.layout.easingXV) == null ? void 0 : _props$layout$easingX2[_Easing.EasingNameSymbol]) != null ? _props$layout$easingX : 'ease',
    easingY: (_props$layout$easingY = (_props$layout$easingY2 = props.layout.easingYV) == null ? void 0 : _props$layout$easingY2[_Easing.EasingNameSymbol]) != null ? _props$layout$easingY : 'ease',
    entering: enteringAnimation,
    exiting: exitingAnimation
  };
  startWebLayoutAnimation(props, element, _commonTypes.LayoutAnimationType.LAYOUT, transitionData);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,