{"version":3,"names":["_mockAuthService","require","_mockEmotionService","describe","beforeEach","jest","clearAllMocks","test","_asyncToGenerator2","default","loginCredentials","email","password","loginResponse","mockAuthService","login","expect","toHaveBeenCalledWith","data","success","toBe","token","toBeDefined","user","emotionId","emotionNote","recordResponse","mockEmotionService","logEmotion","emotion_ids","note","emotionsResponse","getAllEmotions","toHaveBeenCalled","toHaveLength","name","logoutResponse","logout"],"sources":["userFlow.functional.test.ts"],"sourcesContent":["// __tests__/functional/userFlow.functional.test.ts\r\nimport { mockAuthService } from '../mocks/mockAuthService';\r\nimport { mockEmotionService } from '../mocks/mockEmotionService';\r\n\r\n// 함수형 사용자 흐름 테스트\r\ndescribe('User Flow - Functional Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('User can login and record emotion', async () => {\r\n    // 로그인 테스트\r\n    const loginCredentials = { email: 'test@example.com', password: 'password123' };\r\n    const loginResponse = await mockAuthService.login(loginCredentials);\r\n    \r\n    expect(mockAuthService.login).toHaveBeenCalledWith(loginCredentials);\r\n    expect(loginResponse.data.success).toBe(true);\r\n    expect(loginResponse.data.data.token).toBeDefined();\r\n    expect(loginResponse.data.data.user).toBeDefined();\r\n    \r\n    // 감정 기록 테스트\r\n    const emotionId = 1;\r\n    const emotionNote = '오늘은 좋은 하루였어요';\r\n    const recordResponse = await mockEmotionService.logEmotion({ \r\n      emotion_ids: [emotionId], \r\n      note: emotionNote \r\n    });\r\n    \r\n    expect(mockEmotionService.logEmotion).toHaveBeenCalledWith({ \r\n      emotion_ids: [emotionId], \r\n      note: emotionNote \r\n    });\r\n    expect(recordResponse.data.success).toBe(true);\r\n  });\r\n\r\n  test('User can view emotions and logout', async () => {\r\n    // 감정 목록 가져오기 테스트\r\n    const emotionsResponse = await mockEmotionService.getAllEmotions();\r\n    \r\n    expect(mockEmotionService.getAllEmotions).toHaveBeenCalled();\r\n    expect(emotionsResponse.data).toHaveLength(1);\r\n    expect(emotionsResponse.data[0].name).toBe('행복');\r\n    \r\n    // 로그아웃 테스트\r\n    const logoutResponse = await mockAuthService.logout();\r\n    \r\n    expect(mockAuthService.logout).toHaveBeenCalled();\r\n    expect(logoutResponse.data.success).toBe(true);\r\n  });\r\n});"],"mappings":";;AACA,IAAAA,gBAAA,GAAAC,OAAA;AACA,IAAAC,mBAAA,GAAAD,OAAA;AAGAE,QAAQ,CAAC,8BAA8B,EAAE,YAAM;EAC7CC,UAAU,CAAC,YAAM;IACfC,IAAI,CAACC,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,IAAI,CAAC,mCAAmC,MAAAC,kBAAA,CAAAC,OAAA,EAAE,aAAY;IAEpD,IAAMC,gBAAgB,GAAG;MAAEC,KAAK,EAAE,kBAAkB;MAAEC,QAAQ,EAAE;IAAc,CAAC;IAC/E,IAAMC,aAAa,SAASC,gCAAe,CAACC,KAAK,CAACL,gBAAgB,CAAC;IAEnEM,MAAM,CAACF,gCAAe,CAACC,KAAK,CAAC,CAACE,oBAAoB,CAACP,gBAAgB,CAAC;IACpEM,MAAM,CAACH,aAAa,CAACK,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC7CJ,MAAM,CAACH,aAAa,CAACK,IAAI,CAACA,IAAI,CAACG,KAAK,CAAC,CAACC,WAAW,CAAC,CAAC;IACnDN,MAAM,CAACH,aAAa,CAACK,IAAI,CAACA,IAAI,CAACK,IAAI,CAAC,CAACD,WAAW,CAAC,CAAC;IAGlD,IAAME,SAAS,GAAG,CAAC;IACnB,IAAMC,WAAW,GAAG,cAAc;IAClC,IAAMC,cAAc,SAASC,sCAAkB,CAACC,UAAU,CAAC;MACzDC,WAAW,EAAE,CAACL,SAAS,CAAC;MACxBM,IAAI,EAAEL;IACR,CAAC,CAAC;IAEFT,MAAM,CAACW,sCAAkB,CAACC,UAAU,CAAC,CAACX,oBAAoB,CAAC;MACzDY,WAAW,EAAE,CAACL,SAAS,CAAC;MACxBM,IAAI,EAAEL;IACR,CAAC,CAAC;IACFT,MAAM,CAACU,cAAc,CAACR,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChD,CAAC,EAAC;EAEFb,IAAI,CAAC,mCAAmC,MAAAC,kBAAA,CAAAC,OAAA,EAAE,aAAY;IAEpD,IAAMsB,gBAAgB,SAASJ,sCAAkB,CAACK,cAAc,CAAC,CAAC;IAElEhB,MAAM,CAACW,sCAAkB,CAACK,cAAc,CAAC,CAACC,gBAAgB,CAAC,CAAC;IAC5DjB,MAAM,CAACe,gBAAgB,CAACb,IAAI,CAAC,CAACgB,YAAY,CAAC,CAAC,CAAC;IAC7ClB,MAAM,CAACe,gBAAgB,CAACb,IAAI,CAAC,CAAC,CAAC,CAACiB,IAAI,CAAC,CAACf,IAAI,CAAC,IAAI,CAAC;IAGhD,IAAMgB,cAAc,SAAStB,gCAAe,CAACuB,MAAM,CAAC,CAAC;IAErDrB,MAAM,CAACF,gCAAe,CAACuB,MAAM,CAAC,CAACJ,gBAAgB,CAAC,CAAC;IACjDjB,MAAM,CAACoB,cAAc,CAAClB,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EAChD,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}