c4e00780e533b59f56aa42cbabb73222
_getJestObj().mock('react-native/Libraries/Lists/FlatList', function () {
  var _require = require('react-native'),
    View = _require.View;
  return function (_ref) {
    var data = _ref.data,
      renderItem = _ref.renderItem,
      ListEmptyComponent = _ref.ListEmptyComponent;
    if (data && data.length > 0) {
      return (0, _jsxRuntime.jsx)(View, {
        children: data.map(function (item, index) {
          return (0, _jsxRuntime.jsx)(View, {
            children: renderItem({
              item: item,
              index: index
            })
          }, index);
        })
      });
    }
    return ListEmptyComponent ? (0, _jsxRuntime.jsx)(View, {
      children: ListEmptyComponent
    }) : null;
  };
});
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    __esModule: true,
    default: {
      get: jest.fn(),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock("../../src/services/api/notificationService", function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    getUnreadCount: jest.fn(),
    deleteNotification: jest.fn(),
    updateNotificationSettings: jest.fn(),
    getNotificationSettings: jest.fn()
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
});
_getJestObj().mock("../../src/components/Button", function () {
  return 'Button';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationScreen = _interopRequireDefault(require("../../src/screens/NotificationScreen"));
var _reactNative2 = require("react-native");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNotifications = [{
  id: 1,
  user_id: 101,
  content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',
  notification_type: 'like',
  related_id: 101,
  is_read: false,
  created_at: new Date().toISOString()
}, {
  id: 2,
  user_id: 102,
  content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',
  notification_type: 'comment',
  related_id: 102,
  is_read: true,
  created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
}, {
  id: 3,
  user_id: 103,
  content: '행복 챌린지가 시작되었습니다.',
  notification_type: 'challenge',
  related_id: 5,
  is_read: false,
  created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
}];
describe('NotificationScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _notificationService.default.getNotifications.mockResolvedValue({
      data: mockNotifications,
      pagination: {
        page: 1,
        limit: 20,
        total: 3
      }
    });
    _notificationService.default.markAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead.mockResolvedValue({
      success: true
    });
  });
  it('renders loading state initially', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      UNSAFE_getByType = _render.UNSAFE_getByType;
    expect(UNSAFE_getByType('LoadingIndicator')).toBeTruthy();
  });
  it('renders notifications list correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('알림')).toBeTruthy();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.')).toBeTruthy();
      expect(getByText('김철수님이 회원님의 게시물에 댓글을 남겼습니다.')).toBeTruthy();
      expect(getByText('행복 챌린지가 시작되었습니다.')).toBeTruthy();
    }, {
      timeout: 3000
    });
  }));
  it('shows empty state when no notifications', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications.mockResolvedValue({
      data: [],
      pagination: {
        page: 1,
        limit: 20,
        total: 0
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('알림이 없습니다.')).toBeTruthy();
    }, {
      timeout: 3000
    });
  }));
  it('marks notification as read when clicked', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      var notification = getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.');
      _reactNative.fireEvent.press(notification);
    }, {
      timeout: 3000
    });
    expect(_notificationService.default.markAsRead).toHaveBeenCalledWith(1);
  }));
  it('marks all notifications as read', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render5.getByText;
    yield (0, _reactNative.waitFor)(function () {
      var markAllButton = getByText('모두 읽음');
      _reactNative.fireEvent.press(markAllButton);
    }, {
      timeout: 3000
    });
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');
  }));
  it('handles error during loading', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications.mockRejectedValue(new Error('네트워크 오류'));
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render6.getByText,
      UNSAFE_getByType = _render6.UNSAFE_getByType;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('알림을 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
      var button = UNSAFE_getByType('Button');
      expect(button.props.title).toBe('다시 시도');
    }, {
      timeout: 3000
    });
  }));
  it('handles refresh functionality', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      var markAllReadButton = getByText('모두 읽음');
      _reactNative.fireEvent.press(markAllReadButton);
    }, {
      timeout: 3000
    });
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiX3JlZiIsImRhdGEiLCJyZW5kZXJJdGVtIiwiTGlzdEVtcHR5Q29tcG9uZW50IiwibGVuZ3RoIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJjaGlsZHJlbiIsIm1hcCIsIml0ZW0iLCJpbmRleCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZ2V0IiwiamVzdCIsImZuIiwicHV0IiwiZGVsZXRlIiwiZ2V0Tm90aWZpY2F0aW9ucyIsIm1hcmtBc1JlYWQiLCJtYXJrQWxsQXNSZWFkIiwiZ2V0VW5yZWFkQ291bnQiLCJkZWxldGVOb3RpZmljYXRpb24iLCJ1cGRhdGVOb3RpZmljYXRpb25TZXR0aW5ncyIsImdldE5vdGlmaWNhdGlvblNldHRpbmdzIiwidXNlTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiYWxlcnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX05vdGlmaWNhdGlvblNjcmVlbiIsIl9yZWFjdE5hdGl2ZTIiLCJfbm90aWZpY2F0aW9uU2VydmljZSIsIl9yZXF1aXJlMiIsIm1vY2tOb3RpZmljYXRpb25zIiwiaWQiLCJ1c2VyX2lkIiwiY29udGVudCIsIm5vdGlmaWNhdGlvbl90eXBlIiwicmVsYXRlZF9pZCIsImlzX3JlYWQiLCJjcmVhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwibm93IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIm5vdGlmaWNhdGlvblNlcnZpY2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInBhZ2luYXRpb24iLCJwYWdlIiwibGltaXQiLCJ0b3RhbCIsInN1Y2Nlc3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJVTlNBRkVfZ2V0QnlUeXBlIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsInRpbWVvdXQiLCJfcmVuZGVyMyIsIl9yZW5kZXI0Iiwibm90aWZpY2F0aW9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIl9yZW5kZXI1IiwibWFya0FsbEJ1dHRvbiIsInRvSGF2ZUJlZW5DYWxsZWQiLCJBbGVydCIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJfcmVuZGVyNiIsImJ1dHRvbiIsInByb3BzIiwidGl0bGUiLCJ0b0JlIiwiX3JlbmRlcjciLCJtYXJrQWxsUmVhZEJ1dHRvbiJdLCJzb3VyY2VzIjpbIk5vdGlmaWNhdGlvblNjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vc2NyZWVucy9Ob3RpZmljYXRpb25TY3JlZW4udGVzdC50c3hcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBOb3RpZmljYXRpb25TY3JlZW4gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvTm90aWZpY2F0aW9uU2NyZWVuJztcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuLy8gRmxhdExpc3Qg66qo7YK5IOy2lOqwgFxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvTGlzdHMvRmxhdExpc3QnLCAoKSA9PiB7XHJcbiAgY29uc3QgeyBWaWV3IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcclxuICByZXR1cm4gKHsgZGF0YSwgcmVuZGVySXRlbSwgTGlzdEVtcHR5Q29tcG9uZW50IH0pID0+IHtcclxuICAgIGlmIChkYXRhICYmIGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAge2RhdGEubWFwKChpdGVtLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgICA8VmlldyBrZXk9e2luZGV4fT57cmVuZGVySXRlbSh7IGl0ZW0sIGluZGV4IH0pfTwvVmlldz5cclxuICAgICAgICAgICkpfVxyXG4gICAgICAgIDwvVmlldz5cclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBMaXN0RW1wdHlDb21wb25lbnQgPyA8Vmlldz57TGlzdEVtcHR5Q29tcG9uZW50fTwvVmlldz4gOiBudWxsO1xyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gQVBJIO2BtOudvOydtOyWuO2KuCDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvYXBpL2NsaWVudCcsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgX19lc01vZHVsZTogdHJ1ZSxcclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgZ2V0OiBqZXN0LmZuKCksXHJcbiAgICAgIHB1dDogamVzdC5mbigpLFxyXG4gICAgICBkZWxldGU6IGplc3QuZm4oKVxyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gQVBJIOyEnOu5hOyKpCDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvYXBpL25vdGlmaWNhdGlvblNlcnZpY2UnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGdldE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcclxuICAgIG1hcmtBc1JlYWQ6IGplc3QuZm4oKSxcclxuICAgIG1hcmtBbGxBc1JlYWQ6IGplc3QuZm4oKSxcclxuICAgIGdldFVucmVhZENvdW50OiBqZXN0LmZuKCksXHJcbiAgICBkZWxldGVOb3RpZmljYXRpb246IGplc3QuZm4oKSxcclxuICAgIHVwZGF0ZU5vdGlmaWNhdGlvblNldHRpbmdzOiBqZXN0LmZuKCksXHJcbiAgICBnZXROb3RpZmljYXRpb25TZXR0aW5nczogamVzdC5mbigpXHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyDrhKTruYTqsozsnbTshZgg66qo7YK5XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcclxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xyXG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gIH0pLFxyXG59KSk7XHJcblxyXG4vLyBBbGVydCDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0FsZXJ0L0FsZXJ0JywgKCkgPT4gKHtcclxuICBhbGVydDogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG4vLyDsu7Ttj6zrhIztirgg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbXBvbmVudHMvTG9hZGluZ0luZGljYXRvcicsICgpID0+ICdMb2FkaW5nSW5kaWNhdG9yJyk7XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbXBvbmVudHMvQnV0dG9uJywgKCkgPT4gJ0J1dHRvbicpO1xyXG5cclxuLy8g7YWM7Iqk7Yq47JeQIO2VhOyalO2VnCDrqqjrk4gg6rCA7KC47Jik6riwXHJcbmltcG9ydCBub3RpZmljYXRpb25TZXJ2aWNlIGZyb20gJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvbm90aWZpY2F0aW9uU2VydmljZSc7XHJcblxyXG4vLyDthYzsiqTtirgg642w7J207YSwXHJcbmNvbnN0IG1vY2tOb3RpZmljYXRpb25zID0gW1xyXG4gIHtcclxuICAgIGlkOiAxLFxyXG4gICAgdXNlcl9pZDogMTAxLFxyXG4gICAgY29udGVudDogJ+2Zjeq4uOuPmeuLmOydtCDtmozsm5Dri5jsnZgg6rKM7Iuc66y87JeQIOyii+yVhOyalOulvCDriIzroIDsirXri4jri6QuJyxcclxuICAgIG5vdGlmaWNhdGlvbl90eXBlOiAnbGlrZScsXHJcbiAgICByZWxhdGVkX2lkOiAxMDEsXHJcbiAgICBpc19yZWFkOiBmYWxzZSxcclxuICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAyLFxyXG4gICAgdXNlcl9pZDogMTAyLFxyXG4gICAgY29udGVudDogJ+q5gOyyoOyImOuLmOydtCDtmozsm5Dri5jsnZgg6rKM7Iuc66y87JeQIOuMk+q4gOydhCDrgqjqsrzsirXri4jri6QuJyxcclxuICAgIG5vdGlmaWNhdGlvbl90eXBlOiAnY29tbWVudCcsXHJcbiAgICByZWxhdGVkX2lkOiAxMDIsXHJcbiAgICBpc19yZWFkOiB0cnVlLFxyXG4gICAgY3JlYXRlZF9hdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKCksIC8vIDHsnbwg7KCEXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogMyxcclxuICAgIHVzZXJfaWQ6IDEwMyxcclxuICAgIGNvbnRlbnQ6ICftlonrs7Ug7LGM66aw7KeA6rCAIOyLnOyekeuQmOyXiOyKteuLiOuLpC4nLFxyXG4gICAgbm90aWZpY2F0aW9uX3R5cGU6ICdjaGFsbGVuZ2UnLFxyXG4gICAgcmVsYXRlZF9pZDogNSxcclxuICAgIGlzX3JlYWQ6IGZhbHNlLFxyXG4gICAgY3JlYXRlZF9hdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDMgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLCAvLyAz7J28IOyghFxyXG4gIH0sXHJcbl07XHJcblxyXG5kZXNjcmliZSgnTm90aWZpY2F0aW9uU2NyZWVuJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICBcclxuICAgIC8vIEFQSSDsnZHri7Ug66qo7YK5XHJcbiAgICAobm90aWZpY2F0aW9uU2VydmljZS5nZXROb3RpZmljYXRpb25zIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiBtb2NrTm90aWZpY2F0aW9ucyxcclxuICAgICAgcGFnaW5hdGlvbjogeyBwYWdlOiAxLCBsaW1pdDogMjAsIHRvdGFsOiAzIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAobm90aWZpY2F0aW9uU2VydmljZS5tYXJrQXNSZWFkIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyBzdWNjZXNzOiB0cnVlIH0pO1xyXG4gICAgKG5vdGlmaWNhdGlvblNlcnZpY2UubWFya0FsbEFzUmVhZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgc3VjY2VzczogdHJ1ZSB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgbG9hZGluZyBzdGF0ZSBpbml0aWFsbHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IFVOU0FGRV9nZXRCeVR5cGUgfSA9IHJlbmRlcig8Tm90aWZpY2F0aW9uU2NyZWVuIC8+KTtcclxuICAgIGV4cGVjdChVTlNBRkVfZ2V0QnlUeXBlKCdMb2FkaW5nSW5kaWNhdG9yJykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgbm90aWZpY2F0aW9ucyBsaXN0IGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE5vdGlmaWNhdGlvblNjcmVlbiAvPik7XHJcbiAgICBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfslYzrprwnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOuqqOydmCDrjbDsnbTthLDroZwg7Lu07Y+s64SM7Yq4IOyDge2DnCDsp4HsoJEg7JeF642w7J207Yq4XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgn7ZmN6ri464+Z64uY7J20IO2ajOybkOuLmOydmCDqsozsi5zrrLzsl5Ag7KKL7JWE7JqU66W8IOuIjOuggOyKteuLiOuLpC4nKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfquYDssqDsiJjri5jsnbQg7ZqM7JuQ64uY7J2YIOqyjOyLnOusvOyXkCDrjJPquIDsnYQg64Ko6rK87Iq164uI64ukLicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ+2WieuztSDssYzrprDsp4DqsIAg7Iuc7J6R65CY7JeI7Iq164uI64ukLicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDMwMDAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG93cyBlbXB0eSBzdGF0ZSB3aGVuIG5vIG5vdGlmaWNhdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyDruYgg642w7J207YSwIOydkeuLtSDrqqjtgrlcclxuICAgIChub3RpZmljYXRpb25TZXJ2aWNlLmdldE5vdGlmaWNhdGlvbnMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgIGRhdGE6IFtdLFxyXG4gICAgICBwYWdpbmF0aW9uOiB7IHBhZ2U6IDEsIGxpbWl0OiAyMCwgdG90YWw6IDAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPE5vdGlmaWNhdGlvblNjcmVlbiAvPik7XHJcbiAgICBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfslYzrprzsnbQg7JeG7Iq164uI64ukLicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDMwMDAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdtYXJrcyBub3RpZmljYXRpb24gYXMgcmVhZCB3aGVuIGNsaWNrZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKDxOb3RpZmljYXRpb25TY3JlZW4gLz4pO1xyXG4gICAgXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gZ2V0QnlUZXh0KCftmY3quLjrj5nri5jsnbQg7ZqM7JuQ64uY7J2YIOqyjOyLnOusvOyXkCDsoovslYTsmpTrpbwg64iM66CA7Iq164uI64ukLicpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Mobm90aWZpY2F0aW9uKTtcclxuICAgIH0sIHsgdGltZW91dDogMzAwMCB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG5vdGlmaWNhdGlvblNlcnZpY2UubWFya0FzUmVhZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoMSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdtYXJrcyBhbGwgbm90aWZpY2F0aW9ucyBhcyByZWFkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8Tm90aWZpY2F0aW9uU2NyZWVuIC8+KTtcclxuICAgIFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1hcmtBbGxCdXR0b24gPSBnZXRCeVRleHQoJ+uqqOuRkCDsnb3snYwnKTtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKG1hcmtBbGxCdXR0b24pO1xyXG4gICAgfSwgeyB0aW1lb3V0OiAzMDAwIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3Qobm90aWZpY2F0aW9uU2VydmljZS5tYXJrQWxsQXNSZWFkKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfshLHqs7UnLCAn66qo65OgIOyVjOumvOydtCDsnb3snYwg7LKY66as65CY7JeI7Iq164uI64ukLicpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnaGFuZGxlcyBlcnJvciBkdXJpbmcgbG9hZGluZycsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIOyYpOulmCDsnZHri7Ug66qo7YK5XHJcbiAgICAobm90aWZpY2F0aW9uU2VydmljZS5nZXROb3RpZmljYXRpb25zIGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCfrhKTtirjsm4ztgawg7Jik66WYJykpO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgVU5TQUZFX2dldEJ5VHlwZSB9ID0gcmVuZGVyKDxOb3RpZmljYXRpb25TY3JlZW4gLz4pO1xyXG4gICAgXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgn7JWM66a87J2EIOu2iOufrOyYpOuKlCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICAvLyBCdXR0b24g7Lu07Y+s64SM7Yq466W8IOyngeygkSDthYzsiqTtirhcclxuICAgICAgY29uc3QgYnV0dG9uID0gVU5TQUZFX2dldEJ5VHlwZSgnQnV0dG9uJyk7XHJcbiAgICAgIGV4cGVjdChidXR0b24ucHJvcHMudGl0bGUpLnRvQmUoJ+uLpOyLnCDsi5zrj4QnKTtcclxuICAgIH0sIHsgdGltZW91dDogMzAwMCB9KTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2hhbmRsZXMgcmVmcmVzaCBmdW5jdGlvbmFsaXR5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcig8Tm90aWZpY2F0aW9uU2NyZWVuIC8+KTtcclxuICAgIFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1hcmtBbGxSZWFkQnV0dG9uID0gZ2V0QnlUZXh0KCfrqqjrkZAg7J297J2MJyk7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhtYXJrQWxsUmVhZEJ1dHRvbik7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDMwMDAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChub3RpZmljYXRpb25TZXJ2aWNlLm1hcmtBbGxBc1JlYWQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsdUNBQXVDLEVBQUUsWUFBTTtFQUN2RCxJQUFB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