f53901510cd1ba2a2056c994b0f37092
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var sanitizeHtml = function sanitizeHtml(html) {
  return html.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/javascript:/gi, '');
};
var renderHtmlAsText = function renderHtmlAsText(htmlContent) {
  return htmlContent.replace(/<div>|<\/div>/g, '').replace(/&lt;[^&]*&gt;/g, '');
};
var UserContentDisplay = function UserContentDisplay(_ref) {
  var content = _ref.content;
  var sanitizedContent = sanitizeHtml(content);
  var htmlContentWithTags = `<div>${sanitizedContent}</div>`;
  var plainTextContent = renderHtmlAsText(htmlContentWithTags);
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "display-text",
      children: sanitizedContent
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "html-content",
      children: ["HTML \uCF58\uD150\uCE20: ", htmlContentWithTags]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "text-only",
      children: ["\uC21C\uC218 \uD14D\uC2A4\uD2B8: ", plainTextContent]
    })]
  });
};
describe('XSS 방어 테스트', function () {
  test('XSS 공격 시도가 포함된 콘텐츠를 안전하게 처리해야 함', function () {
    var maliciousContent = '<script>alert("XSS")</script>';
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(UserContentDisplay, {
        content: maliciousContent
      })),
      getByTestId = _render.getByTestId;
    var displayText = getByTestId('display-text');
    expect(displayText.props.children).toBe('&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;');
  });
  test('JavaScript URL을 안전하게 처리해야 함', function () {
    var maliciousUrl = 'javascript:alert("XSS")';
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(UserContentDisplay, {
        content: maliciousUrl
      })),
      getByTestId = _render2.getByTestId;
    var displayText = getByTestId('display-text');
    expect(displayText.props.children).not.toContain('javascript:');
  });
  test('HTML 이스케이프 처리를 올바르게 수행해야 함', function () {
    var htmlContent = '<div class="user-content">User\'s "special" content</div>';
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(UserContentDisplay, {
        content: htmlContent
      })),
      getByTestId = _render3.getByTestId;
    var displayText = getByTestId('display-text');
    var sanitized = '&lt;div class=&quot;user-content&quot;&gt;User&#39;s &quot;special&quot; content&lt;/div&gt;';
    expect(displayText.props.children).toBe(sanitized);
  });
  test('HTML 태그가 렌더링되지 않고 문자열로 표시되어야 함', function () {
    var htmlContent = '<b>굵은 텍스트</b>';
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(UserContentDisplay, {
        content: htmlContent
      })),
      getByTestId = _render4.getByTestId;
    var htmlText = getByTestId('html-content');
    expect(htmlText.props.children).toEqual(['HTML 콘텐츠: ', `<div>&lt;b&gt;굵은 텍스트&lt;/b&gt;</div>`]);
    var textOnly = getByTestId('text-only');
    expect(textOnly.props.children).toEqual(['순수 텍스트: ', '굵은 텍스트']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,