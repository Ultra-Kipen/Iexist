b72c2596610a520b43c8045369a331b4
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveAccessibilityState = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function toHaveAccessibilityState(element, expectedState) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveAccessibilityState, this);
  var impliedState = getAccessibilityState(element);
  return {
    pass: matchAccessibilityState(element, expectedState),
    message: function message() {
      var matcher = (0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveAccessibilityState`, 'element', (0, jest_matcher_utils_1.stringify)(expectedState));
      return (0, utils_1.getMessage)(matcher, `Expected the element ${_this.isNot ? 'not to' : 'to'} have accessibility state`, (0, jest_matcher_utils_1.stringify)(expectedState), 'Received element with implied accessibility state', (0, jest_matcher_utils_1.stringify)(impliedState));
    }
  };
}
exports.toHaveAccessibilityState = toHaveAccessibilityState;
var defaultState = {
  disabled: false,
  selected: false,
  busy: false
};
var getAccessibilityState = function getAccessibilityState(element) {
  return Object.assign({}, defaultState, element.props.accessibilityState);
};
var accessibilityStateKeys = ['disabled', 'selected', 'checked', 'busy', 'expanded'];
function matchAccessibilityState(element, matcher) {
  var state = getAccessibilityState(element);
  return accessibilityStateKeys.every(function (key) {
    return matchStateEntry(state, matcher, key);
  });
}
function matchStateEntry(state, matcher, key) {
  return matcher[key] === undefined || matcher[key] === state[key];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZUFjY2Vzc2liaWxpdHlTdGF0ZSIsImplc3RfbWF0Y2hlcl91dGlsc18xIiwicmVxdWlyZSIsInV0aWxzXzEiLCJlbGVtZW50IiwiZXhwZWN0ZWRTdGF0ZSIsIl90aGlzIiwiY2hlY2tSZWFjdEVsZW1lbnQiLCJpbXBsaWVkU3RhdGUiLCJnZXRBY2Nlc3NpYmlsaXR5U3RhdGUiLCJwYXNzIiwibWF0Y2hBY2Nlc3NpYmlsaXR5U3RhdGUiLCJtZXNzYWdlIiwibWF0Y2hlciIsIm1hdGNoZXJIaW50IiwiaXNOb3QiLCJzdHJpbmdpZnkiLCJnZXRNZXNzYWdlIiwiZGVmYXVsdFN0YXRlIiwiZGlzYWJsZWQiLCJzZWxlY3RlZCIsImJ1c3kiLCJhc3NpZ24iLCJwcm9wcyIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsImFjY2Vzc2liaWxpdHlTdGF0ZUtleXMiLCJzdGF0ZSIsImV2ZXJ5Iiwia2V5IiwibWF0Y2hTdGF0ZUVudHJ5IiwidW5kZWZpbmVkIl0sInNvdXJjZXMiOlsidG8taGF2ZS1hY2Nlc3NpYmlsaXR5LXN0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUgPSB2b2lkIDA7XG5jb25zdCBqZXN0X21hdGNoZXJfdXRpbHNfMSA9IHJlcXVpcmUoXCJqZXN0LW1hdGNoZXItdXRpbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5mdW5jdGlvbiB0b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUoZWxlbWVudCwgZXhwZWN0ZWRTdGF0ZSkge1xuICAgICgwLCB1dGlsc18xLmNoZWNrUmVhY3RFbGVtZW50KShlbGVtZW50LCB0b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUsIHRoaXMpO1xuICAgIGNvbnN0IGltcGxpZWRTdGF0ZSA9IGdldEFjY2Vzc2liaWxpdHlTdGF0ZShlbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXNzOiBtYXRjaEFjY2Vzc2liaWxpdHlTdGF0ZShlbGVtZW50LCBleHBlY3RlZFN0YXRlKSxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9ICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5tYXRjaGVySGludCkoYCR7dGhpcy5pc05vdCA/ICcubm90JyA6ICcnfS50b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGVgLCAnZWxlbWVudCcsICgwLCBqZXN0X21hdGNoZXJfdXRpbHNfMS5zdHJpbmdpZnkpKGV4cGVjdGVkU3RhdGUpKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5nZXRNZXNzYWdlKShtYXRjaGVyLCBgRXhwZWN0ZWQgdGhlIGVsZW1lbnQgJHt0aGlzLmlzTm90ID8gJ25vdCB0bycgOiAndG8nfSBoYXZlIGFjY2Vzc2liaWxpdHkgc3RhdGVgLCAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEuc3RyaW5naWZ5KShleHBlY3RlZFN0YXRlKSwgJ1JlY2VpdmVkIGVsZW1lbnQgd2l0aCBpbXBsaWVkIGFjY2Vzc2liaWxpdHkgc3RhdGUnLCAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEuc3RyaW5naWZ5KShpbXBsaWVkU3RhdGUpKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGUgPSB0b0hhdmVBY2Nlc3NpYmlsaXR5U3RhdGU7XG4vKipcbiAqIERlZmF1bHQgYWNjZXNzaWJpbGl0eSBzdGF0ZSB2YWx1ZXMgYmFzZWQgb24gZXhwZXJpbWVudHMgdXNpbmcgYWNjZXNzaWJpbGl0eVxuICogaW5zcGVjdG9yL3NjcmVlbiByZWFkZXIgb24gaU9TIGFuZCBBbmRyb2lkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NhbGxzdGFjay9yZWFjdC1uYXRpdmUtdGVzdGluZy1saWJyYXJ5L3dpa2kvQWNjZXNzaWJpbGl0eTotU3RhdGVcbiAqL1xuY29uc3QgZGVmYXVsdFN0YXRlID0ge1xuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBzZWxlY3RlZDogZmFsc2UsXG4gICAgYnVzeTogZmFsc2UsXG59O1xuY29uc3QgZ2V0QWNjZXNzaWJpbGl0eVN0YXRlID0gKGVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5kZWZhdWx0U3RhdGUsXG4gICAgICAgIC4uLmVsZW1lbnQucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLFxuICAgIH07XG59O1xuY29uc3QgYWNjZXNzaWJpbGl0eVN0YXRlS2V5cyA9IFtcbiAgICAnZGlzYWJsZWQnLFxuICAgICdzZWxlY3RlZCcsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdidXN5JyxcbiAgICAnZXhwYW5kZWQnLFxuXTtcbmZ1bmN0aW9uIG1hdGNoQWNjZXNzaWJpbGl0eVN0YXRlKGVsZW1lbnQsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGdldEFjY2Vzc2liaWxpdHlTdGF0ZShlbGVtZW50KTtcbiAgICByZXR1cm4gYWNjZXNzaWJpbGl0eVN0YXRlS2V5cy5ldmVyeSgoa2V5KSA9PiBtYXRjaFN0YXRlRW50cnkoc3RhdGUsIG1hdGNoZXIsIGtleSkpO1xufVxuZnVuY3Rpb24gbWF0Y2hTdGF0ZUVudHJ5KHN0YXRlLCBtYXRjaGVyLCBrZXkpIHtcbiAgICByZXR1cm4gbWF0Y2hlcltrZXldID09PSB1bmRlZmluZWQgfHwgbWF0Y2hlcltrZXldID09PSBzdGF0ZVtrZXldO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUFFQyxLQUFLLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFDN0RELE9BQU8sQ0FBQ0Usd0JBQXdCLEdBQUcsS0FBSyxDQUFDO0FB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