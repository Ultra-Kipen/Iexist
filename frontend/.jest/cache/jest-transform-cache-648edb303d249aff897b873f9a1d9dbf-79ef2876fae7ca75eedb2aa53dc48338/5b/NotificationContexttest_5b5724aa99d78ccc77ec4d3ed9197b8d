583d807183ae1dfb7cd8db9e93b6ac53
_getJestObj().mock("../../src/services/api/notificationService", function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    deleteNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _useNotification = (0, _NotificationContext.useNotification)(),
    notifications = _useNotification.notifications,
    unreadCount = _useNotification.unreadCount,
    isLoading = _useNotification.isLoading,
    error = _useNotification.error,
    markAsRead = _useNotification.markAsRead,
    markAllAsRead = _useNotification.markAllAsRead,
    deleteNotification = _useNotification.deleteNotification;
  return (0, _jsxRuntime.jsxs)("div", {
    children: [(0, _jsxRuntime.jsx)("div", {
      "data-testid": "loading",
      children: isLoading ? 'loading' : 'not-loading'
    }), (0, _jsxRuntime.jsx)("div", {
      "data-testid": "error",
      children: error || 'no-error'
    }), (0, _jsxRuntime.jsx)("div", {
      "data-testid": "unread-count",
      children: unreadCount.toString()
    }), (0, _jsxRuntime.jsx)("div", {
      "data-testid": "notifications-count",
      children: notifications.length.toString()
    }), (0, _jsxRuntime.jsx)("button", {
      "data-testid": "mark-read",
      onClick: function onClick() {
        return markAsRead(1);
      },
      children: "Mark Read"
    }), (0, _jsxRuntime.jsx)("button", {
      "data-testid": "mark-all-read",
      onClick: function onClick() {
        return markAllAsRead();
      },
      children: "Mark All Read"
    }), (0, _jsxRuntime.jsx)("button", {
      "data-testid": "delete-notification",
      onClick: function onClick() {
        return deleteNotification(1);
      },
      children: "Delete"
    })]
  });
};
describe('NotificationContext', function () {
  var mockNotifications = [{
    id: 1,
    user_id: 1,
    content: 'Test notification 1',
    notification_type: 'like',
    is_read: false,
    created_at: '2024-01-01T00:00:00Z'
  }, {
    id: 2,
    user_id: 1,
    content: 'Test notification 2',
    notification_type: 'comment',
    is_read: true,
    created_at: '2024-01-02T00:00:00Z'
  }];
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
    _notificationService.default.getNotifications.mockResolvedValue({
      data: mockNotifications
    });
    _notificationService.default.markAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.deleteNotification.mockResolvedValue({
      success: true
    });
  });
  afterEach(function () {
    jest.runAllTimers();
    jest.useRealTimers();
  });
  var checkLoadingAndGetTexts = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (renderResult) {
      yield (0, _react2.waitFor)(function () {
        var loadingElement = renderResult.getByTestId('loading');
        expect(loadingElement.textContent).toBe('not-loading');
      }, {
        timeout: 10000
      });
      var loadingElement = renderResult.getByTestId('loading');
      var notificationsCountElement = renderResult.getByTestId('notifications-count');
      var unreadCountElement = renderResult.getByTestId('unread-count');
      var errorElement = renderResult.getByTestId('error');
      return {
        loadingText: loadingElement.textContent || '',
        notificationsCountText: notificationsCountElement.textContent || '',
        unreadCountText: unreadCountElement.textContent || '',
        errorText: errorElement.textContent || ''
      };
    });
    return function checkLoadingAndGetTexts(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  it('초기 상태가 올바르게 설정된다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _react2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    var _yield$checkLoadingAn = yield checkLoadingAndGetTexts(renderResult),
      loadingText = _yield$checkLoadingAn.loadingText,
      notificationsCountText = _yield$checkLoadingAn.notificationsCountText,
      unreadCountText = _yield$checkLoadingAn.unreadCountText,
      errorText = _yield$checkLoadingAn.errorText;
    expect(notificationsCountText).toBe('2');
    expect(unreadCountText).toBe('1');
    expect(errorText).toBe('no-error');
  }));
  it('알림을 읽음 처리할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _react2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield checkLoadingAndGetTexts(renderResult);
    var markReadButton = renderResult.getByTestId('mark-read');
    yield (0, _react2.act)((0, _asyncToGenerator2.default)(function* () {
      _react2.fireEvent.click(markReadButton);
    }));
    expect(_notificationService.default.markAsRead).toHaveBeenCalledWith(1);
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('모든 알림을 읽음 처리할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _react2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield checkLoadingAndGetTexts(renderResult);
    var markAllReadButton = renderResult.getByTestId('mark-all-read');
    yield (0, _react2.act)((0, _asyncToGenerator2.default)(function* () {
      _react2.fireEvent.press(markAllReadButton);
    }));
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('알림을 삭제할 수 있다', (0, _asyncToGenerator2.default)(function* () {
    jest.setTimeout(30000);
    var renderResult = (0, _react2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    yield checkLoadingAndGetTexts(renderResult);
    var deleteButton = renderResult.getByTestId('delete-notification');
    yield (0, _react2.act)((0, _asyncToGenerator2.default)(function* () {
      _react2.fireEvent.press(deleteButton);
    }));
    expect(_notificationService.default.deleteNotification).toHaveBeenCalledWith(1);
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,