{"version":3,"names":["_error","require","describe","test","error","response","data","message","expect","handleApiError","toBe","Error","isNetworkError","undefined","customRules","formatErrorMessage","apiError","ApiError","details","name","statusCode","toEqual","mockErrorHandler","jest","fn","errorHandler","createErrorHandler","toHaveBeenCalledWith","axiosError"],"sources":["error.test.tsx"],"sourcesContent":["// __tests__/utils/error.test.tsx\r\nimport { handleApiError, isNetworkError, formatErrorMessage, ApiError, createErrorHandler } from '../../src/utils/error';\r\nimport axios from 'axios';\r\n\r\ndescribe('오류 처리 유틸리티 테스트', () => {\r\n  describe('handleApiError', () => {\r\n    test('응답에 메시지가 있을 경우 해당 메시지를 반환해야 함', () => {\r\n      const error = {\r\n        response: {\r\n          data: {\r\n            message: '이메일 형식이 올바르지 않습니다.'\r\n          }\r\n        }\r\n      };\r\n      \r\n      expect(handleApiError(error)).toBe('이메일 형식이 올바르지 않습니다.');\r\n    });\r\n\r\n    test('중첩된 오류 메시지 구조를 처리해야 함', () => {\r\n      const error = {\r\n        response: {\r\n          data: {\r\n            error: {\r\n              message: '서버 연결에 실패했습니다.'\r\n            }\r\n          }\r\n        }\r\n      };\r\n      \r\n      expect(handleApiError(error)).toBe('서버 연결에 실패했습니다.');\r\n    });\r\n\r\n    test('네트워크 오류인 경우 일반적인 메시지를 반환해야 함', () => {\r\n      const error = new Error('Network Error');\r\n      expect(handleApiError(error)).toBe('네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.');\r\n    });\r\n\r\n    test('알 수 없는 오류에는 기본 메시지를 반환해야 함', () => {\r\n      const error = new Error('Unknown error');\r\n      expect(handleApiError(error)).toBe('오류가 발생했습니다. 다시 시도해주세요.');\r\n    });\r\n  });\r\n\r\n  describe('isNetworkError', () => {\r\n    test('네트워크 관련 오류가 감지되어야 함', () => {\r\n      expect(isNetworkError(new Error('Network Error'))).toBe(true);\r\n      expect(isNetworkError(new Error('Failed to fetch'))).toBe(true);\r\n      expect(isNetworkError(new Error('ECONNREFUSED'))).toBe(true);\r\n      expect(isNetworkError(new Error('Connection refused'))).toBe(true);\r\n      expect(isNetworkError(new Error('timeout'))).toBe(true);\r\n    });\r\n\r\n    test('네트워크 오류가 아닌 경우 false를 반환해야 함', () => {\r\n      expect(isNetworkError(new Error('일반 오류'))).toBe(false);\r\n      expect(isNetworkError(new Error('Validation Error'))).toBe(false);\r\n      expect(isNetworkError(null)).toBe(false);\r\n      expect(isNetworkError(undefined)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('formatErrorMessage', () => {\r\n    test('커스텀 규칙에 있는 메시지는 해당 규칙을 적용해야 함', () => {\r\n      const customRules = {\r\n        'USER_NOT_FOUND': '사용자를 찾을 수 없습니다.',\r\n        'INVALID_PASSWORD': '비밀번호가 올바르지 않습니다.'\r\n      };\r\n      \r\n      expect(formatErrorMessage('USER_NOT_FOUND', customRules)).toBe('사용자를 찾을 수 없습니다.');\r\n      expect(formatErrorMessage('INVALID_PASSWORD', customRules)).toBe('비밀번호가 올바르지 않습니다.');\r\n    });\r\n\r\n    test('오류 코드 형식의 메시지는 포맷팅되어야 함', () => {\r\n      expect(formatErrorMessage('ERR_AUTH_001')).toBe('인증 오류가 발생했습니다. (ERR_AUTH_001)');\r\n      expect(formatErrorMessage('ERR_SERVER_404')).toBe('오류가 발생했습니다. (ERR_SERVER_404)');\r\n    });\r\n\r\n    test('일반 메시지는 그대로 반환되어야 함', () => {\r\n      expect(formatErrorMessage('일반적인 오류 메시지')).toBe('일반적인 오류 메시지');\r\n    });\r\n  });\r\n\r\n  describe('ApiError', () => {\r\n    test('ApiError 인스턴스가 올바르게 생성되어야 함', () => {\r\n      const apiError = new ApiError('API 오류 발생', 404, { details: '요청한 리소스를 찾을 수 없습니다.' });\r\n      \r\n      expect(apiError.name).toBe('ApiError');\r\n      expect(apiError.message).toBe('API 오류 발생');\r\n      expect(apiError.statusCode).toBe(404);\r\n      expect(apiError.data).toEqual({ details: '요청한 리소스를 찾을 수 없습니다.' });\r\n      expect(apiError instanceof Error).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('createErrorHandler', () => {\r\n    test('Error 객체를 처리할 수 있어야 함', () => {\r\n      const mockErrorHandler = jest.fn();\r\n      const errorHandler = createErrorHandler(mockErrorHandler, '기본 오류 메시지');\r\n      \r\n      const error = new Error('처리된 오류 메시지');\r\n      errorHandler(error);\r\n      \r\n      expect(mockErrorHandler).toHaveBeenCalledWith('처리된 오류 메시지');\r\n    });\r\n\r\n    test('Axios 오류 응답을 처리할 수 있어야 함', () => {\r\n      const mockErrorHandler = jest.fn();\r\n      const errorHandler = createErrorHandler(mockErrorHandler, '기본 오류 메시지');\r\n      \r\n      const axiosError = {\r\n        response: {\r\n          data: {\r\n            message: 'API 응답 오류 메시지'\r\n          }\r\n        }\r\n      };\r\n      errorHandler(axiosError);\r\n      \r\n      expect(mockErrorHandler).toHaveBeenCalledWith('API 응답 오류 메시지');\r\n    });\r\n\r\n    test('알 수 없는 오류 형태에 대해 기본 메시지를 사용해야 함', () => {\r\n      const mockErrorHandler = jest.fn();\r\n      const errorHandler = createErrorHandler(mockErrorHandler, '기본 오류 메시지');\r\n      \r\n      errorHandler({});\r\n      \r\n      expect(mockErrorHandler).toHaveBeenCalledWith('기본 오류 메시지');\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}