9509ce9a77ea6bc8c4353c71823e42df
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAnimatedProps;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../src/private/animated/NativeAnimatedHelper"));
var _useAnimatedPropsMemo = require("../../src/private/animated/useAnimatedPropsMemo");
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../src/private/featureflags/ReactNativeFeatureFlags"));
var _ReactFabricPublicInstanceUtils = require("../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils");
var _useRefEffect = _interopRequireDefault(require("../Utilities/useRefEffect"));
var _AnimatedEvent = require("./AnimatedEvent");
var _AnimatedProps = _interopRequireDefault(require("./nodes/AnimatedProps"));
var _react = require("react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var useMemoOrAnimatedPropsMemo = ReactNativeFeatureFlags.enableAnimatedPropsMemo() ? _useAnimatedPropsMemo.useAnimatedPropsMemo : _react.useMemo;
function useAnimatedProps(props, allowlist) {
  var _useReducer = (0, _react.useReducer)(function (count) {
      return count + 1;
    }, 0),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    scheduleUpdate = _useReducer2[1];
  var onUpdateRef = (0, _react.useRef)(null);
  var timerRef = (0, _react.useRef)(null);
  var allowlistIfEnabled = ReactNativeFeatureFlags.enableAnimatedAllowlist() ? allowlist : null;
  var node = useMemoOrAnimatedPropsMemo(function () {
    return new _AnimatedProps.default(props, function () {
      return onUpdateRef.current == null ? void 0 : onUpdateRef.current();
    }, allowlistIfEnabled);
  }, [allowlistIfEnabled, props]);
  var useNativePropsInFabric = ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();
  var useAnimatedPropsLifecycle = ReactNativeFeatureFlags.useInsertionEffectsForAnimations() ? useAnimatedPropsLifecycle_insertionEffects : useAnimatedPropsLifecycle_layoutEffects;
  useAnimatedPropsLifecycle(node);
  var refEffect = (0, _react.useCallback)(function (instance) {
    node.setNativeView(instance);
    onUpdateRef.current = function () {
      if (process.env.NODE_ENV === 'test') {
        return scheduleUpdate();
      }
      var isFabricNode = isFabricInstance(instance);
      if (node.__isNative) {
        if (isFabricNode) {
          scheduleUpdate();
        }
        return;
      }
      if (typeof instance !== 'object' || typeof (instance == null ? void 0 : instance.setNativeProps) !== 'function') {
        return scheduleUpdate();
      }
      if (!isFabricNode) {
        return instance.setNativeProps(node.__getAnimatedValue());
      }
      if (!useNativePropsInFabric) {
        return scheduleUpdate();
      }
      instance.setNativeProps(node.__getAnimatedValue());
      if (timerRef.current != null) {
        clearTimeout(timerRef.current);
      }
      timerRef.current = setTimeout(function () {
        timerRef.current = null;
        scheduleUpdate();
      }, 48);
    };
    var target = getEventTarget(instance);
    var events = [];
    for (var propName in props) {
      var propValue = props[propName];
      if (propValue instanceof _AnimatedEvent.AnimatedEvent && propValue.__isNative) {
        propValue.__attach(target, propName);
        events.push([propName, propValue]);
      }
    }
    return function () {
      onUpdateRef.current = null;
      for (var _ref of events) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var _propName = _ref2[0];
        var _propValue = _ref2[1];
        _propValue.__detach(target, _propName);
      }
    };
  }, [node, useNativePropsInFabric, props]);
  var callbackRef = (0, _useRefEffect.default)(refEffect);
  return [reduceAnimatedProps(node, props), callbackRef];
}
function reduceAnimatedProps(node, props) {
  return Object.assign({}, ReactNativeFeatureFlags.enableAnimatedPropsMemo() ? node.__getValueWithStaticProps(props) : node.__getValue(), {
    collapsable: false
  });
}
function useAnimatedPropsLifecycle_layoutEffects(node) {
  var prevNodeRef = (0, _react.useRef)(null);
  var isUnmountingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    _NativeAnimatedHelper.default.API.flushQueue();
    var drivenAnimationEndedListener = null;
    if (node.__isNative) {
      drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function (data) {
        node.update();
      });
    }
    return function () {
      var _drivenAnimationEnded;
      (_drivenAnimationEnded = drivenAnimationEndedListener) == null || _drivenAnimationEnded.remove();
    };
  });
  (0, _react.useLayoutEffect)(function () {
    isUnmountingRef.current = false;
    return function () {
      isUnmountingRef.current = true;
    };
  }, []);
  (0, _react.useLayoutEffect)(function () {
    node.__attach();
    if (prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues();
      prevNode.__detach();
      prevNodeRef.current = null;
    }
    return function () {
      if (isUnmountingRef.current) {
        node.__detach();
      } else {
        prevNodeRef.current = node;
      }
    };
  }, [node]);
}
function useAnimatedPropsLifecycle_insertionEffects(node) {
  var prevNodeRef = (0, _react.useRef)(null);
  var isUnmountingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    _NativeAnimatedHelper.default.API.flushQueue();
    var drivenAnimationEndedListener = null;
    if (node.__isNative) {
      drivenAnimationEndedListener = _NativeAnimatedHelper.default.nativeEventEmitter.addListener('onUserDrivenAnimationEnded', function (data) {
        node.update();
      });
    }
    return function () {
      var _drivenAnimationEnded2;
      (_drivenAnimationEnded2 = drivenAnimationEndedListener) == null || _drivenAnimationEnded2.remove();
    };
  });
  (0, _react.useInsertionEffect)(function () {
    isUnmountingRef.current = false;
    return function () {
      isUnmountingRef.current = true;
    };
  }, []);
  (0, _react.useInsertionEffect)(function () {
    node.__attach();
    if (prevNodeRef.current != null) {
      var prevNode = prevNodeRef.current;
      prevNode.__restoreDefaultValues();
      prevNode.__detach();
      prevNodeRef.current = null;
    }
    return function () {
      if (isUnmountingRef.current) {
        node.__detach();
      } else {
        prevNodeRef.current = node;
      }
    };
  }, [node]);
}
function getEventTarget(instance) {
  return typeof instance === 'object' && typeof (instance == null ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;
}
function isFabricInstance(instance) {
  var _instance$getScrollRe;
  return (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null || instance.getNativeScrollRef == null ? void 0 : instance.getNativeScrollRef()) || (0, _ReactFabricPublicInstanceUtils.isPublicInstance)(instance == null || instance.getScrollResponder == null || (_instance$getScrollRe = instance.getScrollResponder()) == null || _instance$getScrollRe.getNativeScrollRef == null ? void 0 : _instance$getScrollRe.getNativeScrollRef());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,