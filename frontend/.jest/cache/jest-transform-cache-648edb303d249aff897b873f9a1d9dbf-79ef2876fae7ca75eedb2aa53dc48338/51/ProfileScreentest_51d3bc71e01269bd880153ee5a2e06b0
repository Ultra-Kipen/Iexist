7297c8f53ddc33b5f33f50d57b685094
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return jest.fn().mockReturnValue(null);
});
_getJestObj().mock('react-native-paper', function () {
  return {
    TextInput: jest.fn().mockReturnValue(null),
    Button: jest.fn().mockReturnValue(null),
    Avatar: jest.fn().mockReturnValue(null)
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    },
    useIsFocused: function useIsFocused() {
      return true;
    }
  };
});
_getJestObj().mock("../../src/services/api/userService", function () {
  return {
    getProfile: jest.fn().mockResolvedValue({
      data: {
        data: {
          user_id: 1,
          username: 'testuser',
          nickname: '테스트유저',
          profile_image_url: 'https://example.com/profile.jpg',
          background_image_url: 'https://example.com/background.jpg',
          favorite_quote: '매일 조금씩 성장하자',
          email: 'test@example.com'
        }
      }
    }),
    getUserStats: jest.fn().mockResolvedValue({
      data: {
        data: {
          my_day_post_count: 10,
          my_day_like_received_count: 25,
          challenge_count: 5
        }
      }
    })
  };
});
_getJestObj().mock("../../src/services/api/authService", function () {
  return {
    logout: jest.fn().mockResolvedValue(undefined)
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ProfileScreen = _interopRequireDefault(require("../../src/screens/ProfileScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var createMockThemeContext = function createMockThemeContext() {
  return {
    theme: 'light',
    colors: {
      primary: '#007AFF',
      background: '#FFFFFF',
      card: '#F2F2F2',
      text: '#000000',
      border: '#CCCCCC',
      notification: '#FF3B30'
    },
    toggleTheme: function toggleTheme() {}
  };
};
var createMockAuthContext = function createMockAuthContext() {
  return {
    isAuthenticated: true,
    user: {
      user_id: 1,
      username: 'testuser'
    },
    loading: false,
    login: jest.fn().mockResolvedValue({}),
    logout: jest.fn().mockResolvedValue(undefined),
    register: jest.fn().mockResolvedValue({}),
    checkAuthStatus: jest.fn().mockResolvedValue(true)
  };
};
var ThemeContext = _react.default.createContext(createMockThemeContext());
var AuthContext = _react.default.createContext(createMockAuthContext());
describe('ProfileScreen 화면', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('프로필 화면이 올바르게 렌더링 되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockTheme = createMockThemeContext();
    var mockAuth = createMockAuthContext();
    var userService = require("../../src/services/api/userService");
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ThemeContext.Provider, {
        value: mockTheme,
        children: (0, _jsxRuntime.jsx)(AuthContext.Provider, {
          value: mockAuth,
          children: (0, _jsxRuntime.jsx)(_ProfileScreen.default, {})
        })
      })),
      queryByText = _render.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(userService.getProfile).toHaveBeenCalled();
      expect(userService.getUserStats).toHaveBeenCalled();
    }, {
      timeout: 10000
    });
    expect(true).toBeTruthy();
  }), 15000);
  it('프로필 편집 버튼이 존재해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockTheme = createMockThemeContext();
    var mockAuth = createMockAuthContext();
    var userService = require("../../src/services/api/userService");
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ThemeContext.Provider, {
        value: mockTheme,
        children: (0, _jsxRuntime.jsx)(AuthContext.Provider, {
          value: mockAuth,
          children: (0, _jsxRuntime.jsx)(_ProfileScreen.default, {})
        })
      })),
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(userService.getProfile).toHaveBeenCalled();
      expect(userService.getUserStats).toHaveBeenCalled();
    }, {
      timeout: 10000
    });
    var editButton = getByText('프로필 편집');
    expect(editButton).toBeTruthy();
  }), 15000);
  it('로그아웃 버튼을 누르면 로그아웃 함수가 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockTheme = createMockThemeContext();
    var mockAuth = createMockAuthContext();
    var userService = require("../../src/services/api/userService");
    var authService = require("../../src/services/api/authService");
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ThemeContext.Provider, {
        value: mockTheme,
        children: (0, _jsxRuntime.jsx)(AuthContext.Provider, {
          value: mockAuth,
          children: (0, _jsxRuntime.jsx)(_ProfileScreen.default, {})
        })
      })),
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(userService.getProfile).toHaveBeenCalled();
      expect(userService.getUserStats).toHaveBeenCalled();
    }, {
      timeout: 10000
    });
    var logoutButton = getByText('로그아웃');
    expect(logoutButton).toBeTruthy();
    expect(typeof mockAuth.logout).toBe('function');
  }), 15000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,