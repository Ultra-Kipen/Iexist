926fada692dd15b4e3b9b7a920098a9f
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _useLocalStorage = require("../../src/hooks/useLocalStorage");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useLocalStorage', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockResolvedValue(null);
  });
  it('should use initial value when storage is empty', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockImplementationOnce(function () {
      return Promise.resolve(null);
    });
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initialValue');
      }),
      result = _renderHook.result;
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('testKey');
    expect(result.current[0]).toBe('initialValue');
  }));
  it('should allow setting new values', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initialValue');
      }),
      result = _renderHook2.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[1]('newValue');
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('testKey', 'newValue');
  }));
  it('should save objects as JSON', (0, _asyncToGenerator2.default)(function* () {
    var initialObject = {
      name: 'Initial',
      value: 1
    };
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', initialObject);
      }),
      result = _renderHook3.result;
    var updatedObject = {
      name: 'Updated',
      value: 2
    };
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[1](updatedObject);
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('testKey', JSON.stringify(updatedObject));
  }));
  it('should support functional updates', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initial');
      }),
      result = _renderHook4.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[1](function (prev) {
        return `${prev}Updated`;
      });
    }));
    expect(_asyncStorage.default.setItem).toHaveBeenCalled();
  }));
  it('should provide a remove function', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initialValue');
      }),
      result = _renderHook5.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[2]();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('testKey');
  }));
  it('should parse stored JSON values', (0, _asyncToGenerator2.default)(function* () {
    var storedObject = {
      name: 'Stored',
      value: 99
    };
    _asyncStorage.default.getItem.mockImplementationOnce(function () {
      return Promise.resolve(JSON.stringify(storedObject));
    });
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', {
          name: 'Default',
          value: 0
        });
      }),
      result = _renderHook6.result;
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('testKey');
  }));
  it('should handle plain strings from storage', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockImplementationOnce(function () {
      return Promise.resolve('plainString');
    });
    (0, _reactHooks.renderHook)(function () {
      return (0, _useLocalStorage.useLocalStorage)('testKey', '');
    });
    expect(_asyncStorage.default.getItem).toHaveBeenCalledWith('testKey');
  }));
  it('should handle errors when reading from storage', (0, _asyncToGenerator2.default)(function* () {
    console.error = jest.fn();
    _asyncStorage.default.getItem.mockImplementationOnce(function () {
      return Promise.reject(new Error('Storage read error'));
    });
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'fallback');
      }),
      result = _renderHook7.result;
    expect(result.current[0]).toBe('fallback');
    console.error = console.error;
  }));
  it('should handle removing non-existent items', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initialValue');
      }),
      result = _renderHook8.result;
    _asyncStorage.default.removeItem.mockImplementationOnce(function () {
      return Promise.resolve();
    });
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[2]();
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('testKey');
  }));
  it('should handle undefined values', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook9 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initialValue');
      }),
      result = _renderHook9.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[1](undefined);
    }));
    expect(_asyncStorage.default.removeItem).toHaveBeenCalledWith('testKey');
  }));
  it('should handle errors when writing to storage', (0, _asyncToGenerator2.default)(function* () {
    var consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(function () {});
    _asyncStorage.default.setItem.mockImplementationOnce(function () {
      return Promise.reject(new Error('Storage write error'));
    });
    var _renderHook10 = (0, _reactHooks.renderHook)(function () {
        return (0, _useLocalStorage.useLocalStorage)('testKey', 'initial');
      }),
      result = _renderHook10.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current[1]('newValue').catch(function () {});
    }));
    expect(consoleErrorSpy).toHaveBeenCalled();
    consoleErrorSpy.mockRestore();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,