{"version":3,"names":["_client","_interopRequireDefault","require","statsService","client","getUserStats","_getUserStats","_asyncToGenerator2","default","response","get","error","Error","message","apply","arguments","getEmotionTrends","_getEmotionTrends","options","params","URLSearchParams","start_date","append","end_date","type","_x","getWeeklyTrends","_getWeeklyTrends","_x2","getMonthlyTrends","_getMonthlyTrends","_x3","getEmotionStats","_getEmotionStats","emotionId","period","length","undefined","_x4","getActivitySummary","_getActivitySummary","_default","exports"],"sources":["statsService.ts"],"sourcesContent":["// services/api/statsService.ts\r\nimport client from './client';\r\nimport { AxiosInstance, AxiosResponse } from 'axios';\r\n\r\ninterface StatsServiceType {\r\n  client: AxiosInstance;\r\n  getUserStats: () => Promise<AxiosResponse<any>>;\r\n  getEmotionTrends: (options?: {\r\n    start_date?: string;\r\n    end_date?: string;\r\n    type?: 'daily' | 'weekly' | 'monthly';\r\n  }) => Promise<AxiosResponse<any>>;\r\n  getWeeklyTrends: (options?: {\r\n    start_date?: string;\r\n    end_date?: string;\r\n  }) => Promise<AxiosResponse<any>>;\r\n  getMonthlyTrends: (options?: {\r\n    start_date?: string;\r\n    end_date?: string;\r\n  }) => Promise<AxiosResponse<any>>;\r\n  getEmotionStats: (emotionId: number, period?: 'week' | 'month' | 'year') => Promise<AxiosResponse<any>>;\r\n  getActivitySummary: (period?: 'week' | 'month' | 'year') => Promise<AxiosResponse<any>>;\r\n}\r\n\r\n/**\r\n * 사용자 통계 API 서비스\r\n */\r\nconst statsService: StatsServiceType = {\r\n  client, // 테스트를 위해 client 객체 노출\r\n\r\n  /**\r\n   * 사용자 통계 조회\r\n   * @returns 사용자 통계 정보\r\n   */\r\n  getUserStats: async () => {\r\n    try {\r\n      const response = await statsService.client.get('/stats');\r\n      return response;\r\n    } catch (error) {\r\n      if (error instanceof Error && error.message === '통계 정보 조회에 실패했습니다') {\r\n        throw error;\r\n      }\r\n      throw new Error('통계 정보 조회에 실패했습니다');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 감정 트렌드 조회\r\n   * @param options 옵션 (시작날짜, 종료날짜, 트렌드 타입)\r\n   * @returns 감정 트렌드 데이터\r\n   */\r\n  getEmotionTrends: async (options?: {\r\n    start_date?: string;\r\n    end_date?: string;\r\n    type?: 'daily' | 'weekly' | 'monthly';\r\n  }) => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (options?.start_date) {\r\n        params.append('start_date', options.start_date);\r\n      }\r\n      \r\n      if (options?.end_date) {\r\n        params.append('end_date', options.end_date);\r\n      }\r\n      \r\n      if (options?.type) {\r\n        params.append('type', options.type);\r\n      }\r\n      \r\n      const response = await statsService.client.get('/stats/trends', { params });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error('감정 트렌드 조회에 실패했습니다');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 주간 감정 트렌드 조회\r\n   * @param options 옵션 (시작날짜, 종료날짜)\r\n   * @returns 주간 감정 트렌드 데이터\r\n   */\r\n  getWeeklyTrends: async (options?: {\r\n    start_date?: string;\r\n    end_date?: string;\r\n  }) => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (options?.start_date) {\r\n        params.append('start_date', options.start_date);\r\n      }\r\n      \r\n      if (options?.end_date) {\r\n        params.append('end_date', options.end_date);\r\n      }\r\n      \r\n      const response = await statsService.client.get('/stats/weekly', { params });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error('주간 트렌드 조회에 실패했습니다');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 월간 감정 트렌드 조회\r\n   * @param options 옵션 (시작날짜, 종료날짜)\r\n   * @returns 월간 감정 트렌드 데이터\r\n   */\r\n  getMonthlyTrends: async (options?: {\r\n    start_date?: string;\r\n    end_date?: string;\r\n  }) => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (options?.start_date) {\r\n        params.append('start_date', options.start_date);\r\n      }\r\n      \r\n      if (options?.end_date) {\r\n        params.append('end_date', options.end_date);\r\n      }\r\n      \r\n      const response = await statsService.client.get('/stats/monthly', { params });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error('월간 트렌드 조회에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 감정별 통계 조회\r\n   * @param emotionId 감정 ID\r\n   * @param period 기간 (주간, 월간, 연간)\r\n   * @returns 감정별 통계 데이터\r\n   */\r\n  getEmotionStats: async (emotionId: number, period: 'week' | 'month' | 'year' = 'month') => {\r\n    try {\r\n      const response = await statsService.client.get(`/stats/emotions/${emotionId}`, {\r\n        params: { period }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error('감정별 통계 조회에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 활동 요약 통계 조회\r\n   * @param period 기간 (주간, 월간, 연간)\r\n   * @returns 활동 요약 통계 데이터\r\n   */\r\n  getActivitySummary: async (period: 'week' | 'month' | 'year' = 'month') => {\r\n    try {\r\n      const response = await statsService.client.get('/stats/activity', {\r\n        params: { period }\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw new Error('활동 요약 조회에 실패했습니다');\r\n    }\r\n  }\r\n};\r\n\r\nexport default statsService;"],"mappings":"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","ignoreList":[]}