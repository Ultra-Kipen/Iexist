0a6ad87ce29e669a4b3d23b7d7c0eca8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MemoryCache = void 0;
exports.clearCache = clearCache;
exports.getCache = getCache;
exports.getCacheKeys = getCacheKeys;
exports.getCacheSize = getCacheSize;
exports.globalCache = void 0;
exports.isCacheExpired = isCacheExpired;
exports.removeCache = removeCache;
exports.setCache = setCache;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var cache = new Map();
function setCache(key, value, ttl) {
  var item = {
    value: value,
    timestamp: Date.now(),
    expiry: ttl ? Date.now() + ttl * 1000 : null
  };
  cache.set(key, item);
}
function getCache(key) {
  var item = cache.get(key);
  if (!item) {
    return null;
  }
  if (item.expiry && Date.now() > item.expiry) {
    cache.delete(key);
    return null;
  }
  return item.value;
}
function removeCache(key) {
  cache.delete(key);
}
function clearCache() {
  cache.clear();
}
function getCacheKeys() {
  return Array.from(cache.keys());
}
function getCacheSize() {
  return cache.size;
}
function isCacheExpired(key) {
  var item = cache.get(key);
  if (!item) {
    return true;
  }
  if (item.expiry === null) {
    return false;
  }
  return Date.now() > item.expiry;
}
var MemoryCache = exports.MemoryCache = function () {
  function MemoryCache() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, MemoryCache);
    this.cache = new Map();
    this.ttl = options.ttl || 5 * 60 * 1000;
    this.maxSize = options.maxSize || 100;
  }
  return (0, _createClass2.default)(MemoryCache, [{
    key: "set",
    value: function set(key, value, ttl) {
      if (this.cache.size >= this.maxSize) {
        var oldestKey = this.getOldestKey();
        if (oldestKey) {
          this.cache.delete(oldestKey);
        }
      }
      this.cache.set(key, {
        value: value,
        timestamp: Date.now() + (ttl || this.ttl)
      });
    }
  }, {
    key: "get",
    value: function get(key) {
      var item = this.cache.get(key);
      if (!item || Date.now() > item.timestamp) {
        if (item) {
          this.cache.delete(key);
        }
        return undefined;
      }
      return item.value;
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      return this.cache.delete(key);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.cache.clear();
    }
  }, {
    key: "cleanup",
    value: function cleanup() {
      var now = Date.now();
      for (var _ref of this.cache.entries()) {
        var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
        var key = _ref2[0];
        var item = _ref2[1];
        if (now > item.timestamp) {
          this.cache.delete(key);
        }
      }
    }
  }, {
    key: "getOldestKey",
    value: function getOldestKey() {
      var oldestKey = null;
      var oldestTime = Infinity;
      for (var _ref3 of this.cache.entries()) {
        var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
        var key = _ref4[0];
        var item = _ref4[1];
        if (item.timestamp < oldestTime) {
          oldestTime = item.timestamp;
          oldestKey = key;
        }
      }
      return oldestKey;
    }
  }, {
    key: "size",
    get: function get() {
      return this.cache.size;
    }
  }]);
}();
var globalCache = exports.globalCache = new MemoryCache();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,