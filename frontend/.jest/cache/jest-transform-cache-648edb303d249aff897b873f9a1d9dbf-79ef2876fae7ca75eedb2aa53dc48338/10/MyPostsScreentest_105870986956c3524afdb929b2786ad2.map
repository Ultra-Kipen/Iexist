{"version":3,"names":["_getJestObj","mock","getMyPosts","jest","fn","mockResolvedValue","data","posts","deletePost","success","useNavigation","navigate","goBack","addListener","mockReturnValue","MockComponent","_interopRequireDefault","require","_react","_reactNative","_postService","_jsxRuntime","_require","describe","it","_render","render","jsx","default","Fragment","container","expect","toBeDefined","postService"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport postService from '../../src/services/api/postService';\r\n\r\n// 모든 모킹을 분리하여 정의\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn().mockResolvedValue({\r\n    data: { posts: [] }\r\n  }),\r\n  deletePost: jest.fn().mockResolvedValue({\r\n    data: { success: true }\r\n  })\r\n}));\r\n\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    addListener: jest.fn().mockReturnValue(jest.fn())\r\n  })\r\n}));\r\n\r\n// 컴포넌트 모킹\r\njest.mock('../../src/screens/MyPostsScreen', () => {\r\n  const MockComponent = () => null;\r\n  return MockComponent;\r\n});\r\n\r\ndescribe('MyPostsScreen', () => {\r\n  it('mocks the component without rendering it', () => {\r\n    // 이 테스트는 컴포넌트를 직접 렌더링하지 않고 모킹합니다\r\n    const { container } = render(<React.Fragment />);\r\n    expect(container).toBeDefined();\r\n    \r\n    // postService 메서드가 존재하는지 확인\r\n    expect(postService.getMyPosts).toBeDefined();\r\n  });\r\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,uCAAuC;EAAA,OAAO;IACrDC,UAAU,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;MACtCC,IAAI,EAAE;QAAEC,KAAK,EAAE;MAAG;IACpB,CAAC,CAAC;IACFC,UAAU,EAAEL,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;MACtCC,IAAI,EAAE;QAAEG,OAAO,EAAE;MAAK;IACxB,CAAC;EACH,CAAC;AAAA,CAAC,CAAC;AAEHT,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE;EAAA,OAAO;IAC3CS,aAAa,EAAE,SAAfA,aAAaA,CAAA;MAAA,OAAS;QACpBC,QAAQ,EAAER,IAAI,CAACC,EAAE,CAAC,CAAC;QACnBQ,MAAM,EAAET,IAAI,CAACC,EAAE,CAAC,CAAC;QACjBS,WAAW,EAAEV,IAAI,CAACC,EAAE,CAAC,CAAC,CAACU,eAAe,CAACX,IAAI,CAACC,EAAE,CAAC,CAAC;MAClD,CAAC;IAAA;EACH,CAAC;AAAA,CAAC,CAAC;AAGHJ,WAAA,GAAKC,IAAI,oCAAoC,YAAM;EACjD,IAAMc,aAAa,GAAG,SAAhBA,aAAaA,CAAA;IAAA,OAAS,IAAI;EAAA;EAChC,OAAOA,aAAa;AACtB,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AA1BH,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,YAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAA6D,IAAAI,WAAA,GAAAJ,OAAA;AAAA,SAAAjB,YAAA;EAAA,IAAAsB,QAAA,GAAAL,OAAA;IAAAd,IAAA,GAAAmB,QAAA,CAAAnB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AA0B7DoB,QAAQ,CAAC,eAAe,EAAE,YAAM;EAC9BC,EAAE,CAAC,0CAA0C,EAAE,YAAM;IAEnD,IAAAC,OAAA,GAAsB,IAAAC,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACT,MAAA,CAAAU,OAAK,CAACC,QAAQ,IAAE,CAAC,CAAC;MAAxCC,SAAS,GAAAL,OAAA,CAATK,SAAS;IACjBC,MAAM,CAACD,SAAS,CAAC,CAACE,WAAW,CAAC,CAAC;IAG/BD,MAAM,CAACE,oBAAW,CAAC/B,UAAU,CAAC,CAAC8B,WAAW,CAAC,CAAC;EAC9C,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}