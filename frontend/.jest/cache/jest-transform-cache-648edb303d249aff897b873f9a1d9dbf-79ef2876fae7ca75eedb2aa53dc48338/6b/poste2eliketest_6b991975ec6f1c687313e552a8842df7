91dd7ace0938031df022d3af44214571
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    Text: 'Text',
    Button: 'Button',
    TextInput: 'TextInput',
    TouchableOpacity: 'TouchableOpacity',
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      })
    },
    NativeModules: {},
    DevMenu: {
      show: jest.fn()
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    NavigationContainer: function NavigationContainer(_ref) {
      var children = _ref.children;
      return children;
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Provider: function Provider(_ref2) {
      var children = _ref2.children;
      return children;
    }
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    createPost: jest.fn(),
    getPosts: jest.fn(),
    getPostById: jest.fn(),
    getMyPosts: jest.fn(),
    likePost: jest.fn(),
    addComment: jest.fn(),
    getComments: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _reactNativePaper = require("react-native-paper");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _MockScreens = require("../mocks/MockScreens");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var testUser = {
  user_id: 1,
  username: 'testuser',
  nickname: '테스트유저',
  email: 'test@example.com'
};
var testPosts = {
  success: true,
  posts: [{
    post_id: 1,
    user_id: 1,
    content: '행복한 하루였어요',
    emotion_summary: '행복',
    emotion_ids: [1],
    image_url: null,
    is_anonymous: false,
    like_count: 5,
    comment_count: 2,
    created_at: '2025-04-10T12:00:00Z'
  }, {
    post_id: 2,
    user_id: 2,
    content: '오늘은 조금 피곤하네요',
    emotion_summary: '지침',
    emotion_ids: [8],
    image_url: null,
    is_anonymous: true,
    like_count: 3,
    comment_count: 1,
    created_at: '2025-04-10T10:30:00Z'
  }],
  total_count: 2
};
var testComments = {
  success: true,
  comments: [{
    comment_id: 1,
    post_id: 1,
    user_id: 2,
    content: '너무 좋네요!',
    is_anonymous: false,
    created_at: '2025-04-10T13:00:00Z'
  }],
  total_count: 1
};
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var TestWrapper = function TestWrapper(_ref3) {
  var children = _ref3.children;
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsx)(_reactNativePaper.Provider, {
      children: children
    })
  });
};
describe('게시물 기능 E2E 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key === 'auth_token') return Promise.resolve('fake-token');
      if (key === 'user_info') return Promise.resolve(JSON.stringify(testUser));
      return Promise.resolve(null);
    });
  });
  describe('게시물 상세 화면', function () {
    it('게시물 상세 조회 및 댓글 작성', (0, _asyncToGenerator2.default)(function* () {
      var mockGetPostById = _postService.default.getPostById;
      mockGetPostById.mockResolvedValue({
        data: {
          success: true,
          post: testPosts.posts[0]
        }
      });
      var mockGetComments = _postService.default.getComments;
      mockGetComments.mockResolvedValue({
        data: testComments
      });
      var mockAddComment = _postService.default.addComment;
      mockAddComment.mockResolvedValue({
        data: {
          success: true,
          comment_id: 2,
          message: '댓글이 성공적으로 추가되었습니다.'
        }
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockPostScreen, {
            route: {
              params: {
                postId: 1
              }
            },
            navigation: mockNavigation
          })
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText;
      expect(getByText('게시물 ID: 1')).toBeTruthy();
      var commentInput = getByTestId('comment-input');
      _reactNative.fireEvent.changeText(commentInput, 'E2E 테스트로 작성한 댓글입니다!');
      var submitButton = getByTestId('submit-comment');
      _reactNative.fireEvent.press(submitButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAddComment).toHaveBeenCalledWith(1, expect.any(Object));
      });
    }), 10000);
  });
  describe('내 게시물 관리', function () {
    it('내 게시물 화면에서 게시물을 삭제할 수 있어야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockGetMyPosts = _postService.default.getMyPosts;
      mockGetMyPosts.mockResolvedValue({
        data: testPosts
      });
      var mockDeletePost = _postService.default.deletePost;
      mockDeletePost.mockResolvedValue({
        data: {
          success: true,
          message: '게시물이 성공적으로 삭제되었습니다.'
        }
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockMyPostsScreen, {
            navigation: mockNavigation
          })
        })),
        getByTestId = _render2.getByTestId;
      var deleteButton = getByTestId('delete-button');
      _reactNative.fireEvent.press(deleteButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockDeletePost).toHaveBeenCalledWith(1);
      });
    }), 10000);
  });
  describe('감정 통계', function () {
    it('통계 화면에서 감정 그래프가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockStatisticsScreen, {
            navigation: mockNavigation
          })
        })),
        getByTestId = _render3.getByTestId,
        getByText = _render3.getByText;
      expect(getByTestId('emotion-chart')).toBeTruthy();
      expect(getByText('감정 통계')).toBeTruthy();
    }), 10000);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJWaWV3IiwiVGV4dCIsIkJ1dHRvbiIsIlRleHRJbnB1dCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiamVzdCIsImZuIiwic3R5bGVzIiwiUGxhdGZvcm0iLCJPUyIsInNlbGVjdCIsIm9iaiIsImFuZHJvaWQiLCJkZWZhdWx0IiwiRGltZW5zaW9ucyIsImdldCIsIndpZHRoIiwiaGVpZ2h0IiwiTmF0aXZlTW9kdWxlcyIsIkRldk1lbnUiLCJzaG93IiwiTmF2aWdhdGlvbkNvbnRhaW5lciIsIl9yZWYiLCJjaGlsZHJlbiIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImdvQmFjayIsIlByb3ZpZGVyIiwiX3JlZjIiLCJjcmVhdGVQb3N0IiwiZ2V0UG9zdHMiLCJnZXRQb3N0QnlJZCIsImdldE15UG9zdHMiLCJsaWtlUG9zdCIsImFkZENvbW1lbnQiLCJnZXRDb21tZW50cyIsImRlbGV0ZVBvc3QiLCJnZXRJdGVtIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9uYXRpdmUiLCJfcmVhY3ROYXRpdmVQYXBlciIsIl9hc3luY1N0b3JhZ2UiLCJfcG9zdFNlcnZpY2UiLCJfTW9ja1NjcmVlbnMiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwidGVzdFVzZXIiLCJ1c2VyX2lkIiwidXNlcm5hbWUiLCJuaWNrbmFtZSIsImVtYWlsIiwidGVzdFBvc3RzIiwic3VjY2VzcyIsInBvc3RzIiwicG9zdF9pZCIsImNvbnRlbnQiLCJlbW90aW9uX3N1bW1hcnkiLCJlbW90aW9uX2lkcyIsImltYWdlX3VybCIsImlzX2Fub255bW91cyIsImxpa2VfY291bnQiLCJjb21tZW50X2NvdW50IiwiY3JlYXRlZF9hdCIsInRvdGFsX2NvdW50IiwidGVzdENvbW1lbnRzIiwiY29tbWVudHMiLCJjb21tZW50X2lkIiwibW9ja05hdmlnYXRpb24iLCJUZXN0V3JhcHBlciIsIl9yZWYzIiwianN4IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIkFzeW5jU3RvcmFnZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwiSlNPTiIsInN0cmluZ2lmeSIsIml0IiwibW9ja0dldFBvc3RCeUlkIiwicG9zdFNlcnZpY2UiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImRhdGEiLCJwb3N0IiwibW9ja0dldENvbW1lbnRzIiwibW9ja0FkZENvbW1lbnQiLCJtZXNzYWdlIiwiX3JlbmRlciIsInJlbmRlciIsIk1vY2tQb3N0U2NyZWVuIiwicm91dGUiLCJwYXJhbXMiLCJwb3N0SWQiLCJuYXZpZ2F0aW9uIiwiZ2V0QnlUZXN0SWQiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiY29tbWVudElucHV0IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInN1Ym1pdEJ1dHRvbiIsInByZXNzIiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYW55IiwiT2JqZWN0IiwibW9ja0dldE15UG9zdHMiLCJtb2NrRGVsZXRlUG9zdCIsIl9yZW5kZXIyIiwiTW9ja015UG9zdHNTY3JlZW4iLCJkZWxldGVCdXR0b24iLCJfcmVuZGVyMyIsIk1vY2tTdGF0aXN0aWNzU2NyZWVuIl0sInNvdXJjZXMiOlsicG9zdC5lMmUtbGlrZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vZTJlL3Bvc3QuZTJlLWxpa2UudGVzdC50c3hcclxuLy8gUmVhY3QgTmF0aXZlIOy7tO2PrOuEjO2KuCDrqoXsi5zsoIEg66qo7YK5IC0g7IiY7KCV65CcIOuyhOyghFxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICAvLyDsi6TsoJwg66qo65OI7J2EIOyalOq1rO2VmOyngCDslYrqs6Ag67mIIOqwneyytOulvCDrsJjtmZhcclxuICByZXR1cm4ge1xyXG4gICAgVmlldzogJ1ZpZXcnLFxyXG4gICAgVGV4dDogJ1RleHQnLFxyXG4gICAgQnV0dG9uOiAnQnV0dG9uJyxcclxuICAgIFRleHRJbnB1dDogJ1RleHRJbnB1dCcsXHJcbiAgICBUb3VjaGFibGVPcGFjaXR5OiAnVG91Y2hhYmxlT3BhY2l0eScsXHJcbiAgICBTdHlsZVNoZWV0OiB7XHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbihzdHlsZXMgPT4gc3R5bGVzKSxcclxuICAgIH0sXHJcbiAgICBQbGF0Zm9ybTogeyBcclxuICAgICAgT1M6ICdhbmRyb2lkJyxcclxuICAgICAgc2VsZWN0OiBqZXN0LmZuKG9iaiA9PiBvYmouYW5kcm9pZCB8fCBvYmouZGVmYXVsdCksXHJcbiAgICB9LFxyXG4gICAgRGltZW5zaW9uczogeyBcclxuICAgICAgZ2V0OiBqZXN0LmZuKCgpID0+ICh7IHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0pKSxcclxuICAgIH0sXHJcbiAgICBOYXRpdmVNb2R1bGVzOiB7fSxcclxuICAgIERldk1lbnU6IHtcclxuICAgICAgc2hvdzogamVzdC5mbigpLFxyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gUmVhY3QgTmF2aWdhdGlvbiDrqqjtgrnrj4Qg66qF7Iuc7KCB7Jy866GcIOyEpOyglVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgTmF2aWdhdGlvbkNvbnRhaW5lcjogKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4sXHJcbiAgICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICBnb0JhY2s6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gUmVhY3QgTmF0aXZlIFBhcGVyIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgUHJvdmlkZXI6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IE5hdmlnYXRpb25Db250YWluZXIgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQgeyBQcm92aWRlciBhcyBQYXBlclByb3ZpZGVyIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcclxuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XHJcbmltcG9ydCBwb3N0U2VydmljZSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYXBpL3Bvc3RTZXJ2aWNlJztcclxuXHJcblxyXG4vLyBTdGF0aXN0aWNzU2NyZWVuIOuwjyDri6Trpbgg7Iuk7KCcIO2ZlOuptCDsu7Ttj6zrhIztirggaW1wb3J0IOygnOqxsFxyXG4vLyBNb2NrU2NyZWVuc+unjCDsgqzsmqntlZjripQg6rKD7Jy866GcIOuzgOqyvVxyXG4vLyBNb2NrU2NyZWVuc+unjCDsgqzsmqntlZjripQg6rKD7Jy866GcIOuzgOqyvVxyXG5pbXBvcnQgeyBNb2NrUG9zdFNjcmVlbiwgTW9ja015UG9zdHNTY3JlZW4sIE1vY2tTdGF0aXN0aWNzU2NyZWVuIH0gZnJvbSAnLi4vbW9ja3MvTW9ja1NjcmVlbnMnO1xyXG5cclxuLy8g7Lu07Y+s64SM7Yq47JmAIOyEnOu5hOyKpOydmCDthrXtlansnYQg7YWM7Iqk7Yq47ZWY6riwIOychO2VnCDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvYXBpL3Bvc3RTZXJ2aWNlJywgKCkgPT4gKHtcclxuICBjcmVhdGVQb3N0OiBqZXN0LmZuKCksXHJcbiAgZ2V0UG9zdHM6IGplc3QuZm4oKSxcclxuICBnZXRQb3N0QnlJZDogamVzdC5mbigpLFxyXG4gIGdldE15UG9zdHM6IGplc3QuZm4oKSxcclxuICBsaWtlUG9zdDogamVzdC5mbigpLFxyXG4gIGFkZENvbW1lbnQ6IGplc3QuZm4oKSxcclxuICBnZXRDb21tZW50czogamVzdC5mbigpLFxyXG4gIGRlbGV0ZVBvc3Q6IGplc3QuZm4oKVxyXG59KSk7XHJcblxyXG4vLyDsnbjspp0g6rSA66CoIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcclxuICBnZXRJdGVtOiBqZXN0LmZuKCksXHJcbiAgc2V0SXRlbTogamVzdC5mbigpLFxyXG4gIHJlbW92ZUl0ZW06IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8g7YWM7Iqk7Yq47JqpIOuNsOydtO2EsFxyXG5jb25zdCB0ZXN0VXNlciA9IHtcclxuICB1c2VyX2lkOiAxLFxyXG4gIHVzZXJuYW1lOiAndGVzdHVzZXInLFxyXG4gIG5pY2tuYW1lOiAn7YWM7Iqk7Yq47Jyg7KCAJyxcclxuICBlbWFpbDogJ3Rlc3RAZXhhbXBsZS5jb20nLFxyXG59O1xyXG5cclxuLy8g7YWM7Iqk7Yq47JqpIOqyjOyLnOusvCDrjbDsnbTthLBcclxuY29uc3QgdGVzdFBvc3RzID0ge1xyXG4gIHN1Y2Nlc3M6IHRydWUsXHJcbiAgcG9zdHM6IFtcclxuICAgIHtcclxuICAgICAgcG9zdF9pZDogMSxcclxuICAgICAgdXNlcl9pZDogMSxcclxuICAgICAgY29udGVudDogJ+2Wieuzte2VnCDtlZjro6jsmIDslrTsmpQnLFxyXG4gICAgICBlbW90aW9uX3N1bW1hcnk6ICftlonrs7UnLFxyXG4gICAgICBlbW90aW9uX2lkczogWzFdLFxyXG4gICAgICBpbWFnZV91cmw6IG51bGwsXHJcbiAgICAgIGlzX2Fub255bW91czogZmFsc2UsXHJcbiAgICAgIGxpa2VfY291bnQ6IDUsXHJcbiAgICAgIGNvbW1lbnRfY291bnQ6IDIsXHJcbiAgICAgIGNyZWF0ZWRfYXQ6ICcyMDI1LTA0LTEwVDEyOjAwOjAwWidcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHBvc3RfaWQ6IDIsXHJcbiAgICAgIHVzZXJfaWQ6IDIsXHJcbiAgICAgIGNvbnRlbnQ6ICfsmKTripjsnYAg7KGw6riIIO2UvOqzpO2VmOuEpOyalCcsXHJcbiAgICAgIGVtb3Rpb25fc3VtbWFyeTogJ+yngOy5qCcsXHJcbiAgICAgIGVtb3Rpb25faWRzOiBbOF0sXHJcbiAgICAgIGltYWdlX3VybDogbnVsbCxcclxuICAgICAgaXNfYW5vbnltb3VzOiB0cnVlLFxyXG4gICAgICBsaWtlX2NvdW50OiAzLFxyXG4gICAgICBjb21tZW50X2NvdW50OiAxLFxyXG4gICAgICBjcmVhdGVkX2F0OiAnMjAyNS0wNC0xMFQxMDozMDowMFonXHJcbiAgICB9XHJcbiAgXSxcclxuICB0b3RhbF9jb3VudDogMlxyXG59O1xyXG5cclxuLy8g7YWM7Iqk7Yq47JqpIOuMk+q4gCDrjbDsnbTthLBcclxuY29uc3QgdGVzdENvbW1lbnRzID0ge1xyXG4gIHN1Y2Nlc3M6IHRydWUsXHJcbiAgY29tbWVudHM6IFtcclxuICAgIHtcclxuICAgICAgY29tbWVudF9pZDogMSxcclxuICAgICAgcG9zdF9pZDogMSxcclxuICAgICAgdXNlcl9pZDogMixcclxuICAgICAgY29udGVudDogJ+uEiOustCDsoovrhKTsmpQhJyxcclxuICAgICAgaXNfYW5vbnltb3VzOiBmYWxzZSxcclxuICAgICAgY3JlYXRlZF9hdDogJzIwMjUtMDQtMTBUMTM6MDA6MDBaJ1xyXG4gICAgfVxyXG4gIF0sXHJcbiAgdG90YWxfY291bnQ6IDFcclxufTtcclxuXHJcbi8vIOuEpOu5hOqyjOydtOyFmCDrqqjtgrlcclxuY29uc3QgbW9ja05hdmlnYXRpb24gPSB7XHJcbiAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICBnb0JhY2s6IGplc3QuZm4oKVxyXG59O1xyXG5cclxuLy8g7YWM7Iqk7Yq4IOy7tO2PrOuEjO2KuCDrnpjtjbxcclxuY29uc3QgVGVzdFdyYXBwZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4gKFxyXG4gIDxOYXZpZ2F0aW9uQ29udGFpbmVyPlxyXG4gICAgPFBhcGVyUHJvdmlkZXI+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvUGFwZXJQcm92aWRlcj5cclxuICA8L05hdmlnYXRpb25Db250YWluZXI+XHJcbik7XHJcblxyXG5kZXNjcmliZSgn6rKM7Iuc66y8IOq4sOuKpSBFMkUg7YWM7Iqk7Yq4JywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICBcclxuICAgIC8vIEFzeW5jU3RvcmFnZSDrqqjtgrlcclxuICAgIChBc3luY1N0b3JhZ2UuZ2V0SXRlbSBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5KSA9PiB7XHJcbiAgICAgIGlmIChrZXkgPT09ICdhdXRoX3Rva2VuJykgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnZmFrZS10b2tlbicpO1xyXG4gICAgICBpZiAoa2V5ID09PSAndXNlcl9pbmZvJykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShKU09OLnN0cmluZ2lmeSh0ZXN0VXNlcikpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCfqsozsi5zrrLwg7IOB7IS4IO2ZlOuptCcsICgpID0+IHtcclxuICAgIGl0KCfqsozsi5zrrLwg7IOB7IS4IOyhsO2ajCDrsI8g64yT6riAIOyekeyEsScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgbW9ja0dldFBvc3RCeUlkID0gcG9zdFNlcnZpY2UuZ2V0UG9zdEJ5SWQgYXMgamVzdC5Nb2NrO1xyXG4gICAgICBtb2NrR2V0UG9zdEJ5SWQubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICBwb3N0OiB0ZXN0UG9zdHMucG9zdHNbMF1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgbW9ja0dldENvbW1lbnRzID0gcG9zdFNlcnZpY2UuZ2V0Q29tbWVudHMgYXMgamVzdC5Nb2NrO1xyXG4gICAgICBtb2NrR2V0Q29tbWVudHMubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICAgIGRhdGE6IHRlc3RDb21tZW50c1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IG1vY2tBZGRDb21tZW50ID0gcG9zdFNlcnZpY2UuYWRkQ29tbWVudCBhcyBqZXN0Lk1vY2s7XHJcbiAgICAgIG1vY2tBZGRDb21tZW50Lm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgY29tbWVudF9pZDogMixcclxuICAgICAgICAgIG1lc3NhZ2U6ICfrjJPquIDsnbQg7ISx6rO17KCB7Jy866GcIOy2lOqwgOuQmOyXiOyKteuLiOuLpC4nXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIE1vY2sg6rKM7Iuc66y8IOyDgeyEuCDsu7Ttj6zrhIztirgg66CM642U66eBXHJcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICAgIDxUZXN0V3JhcHBlcj5cclxuICAgICAgICAgIDxNb2NrUG9zdFNjcmVlblxyXG4gICAgICAgICAgICByb3V0ZT17eyBwYXJhbXM6IHsgcG9zdElkOiAxIH0gfX1cclxuICAgICAgICAgICAgbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyDqsozsi5zrrLwgSUTqsIAg7ZGc7Iuc65CY64qU7KeAIO2ZleyduFxyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfqsozsi5zrrLwgSUQ6IDEnKSkudG9CZVRydXRoeSgpO1xyXG5cclxuICAgICAgLy8g64yT6riAIOyeheugpSDtlYTrk5wg7ZmV7J24XHJcbiAgICAgIGNvbnN0IGNvbW1lbnRJbnB1dCA9IGdldEJ5VGVzdElkKCdjb21tZW50LWlucHV0Jyk7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGNvbW1lbnRJbnB1dCwgJ0UyRSDthYzsiqTtirjroZwg7J6R7ISx7ZWcIOuMk+q4gOyeheuLiOuLpCEnKTtcclxuXHJcbiAgICAgIC8vIOuMk+q4gCDsoJzstpwg67KE7Yq8IO2BtOumrVxyXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRlc3RJZCgnc3VibWl0LWNvbW1lbnQnKTtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKHN1Ym1pdEJ1dHRvbik7XHJcblxyXG4gICAgICAvLyBhZGRDb21tZW50IOyEnOu5hOyKpOqwgCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChtb2NrQWRkQ29tbWVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoMSwgZXhwZWN0LmFueShPYmplY3QpKTtcclxuICAgICAgfSk7XHJcbiAgICB9LCAxMDAwMCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCfrgrQg6rKM7Iuc66y8IOq0gOumrCcsICgpID0+IHtcclxuICAgIGl0KCfrgrQg6rKM7Iuc66y8IO2ZlOuptOyXkOyEnCDqsozsi5zrrLzsnYQg7IKt7KCc7ZWgIOyImCDsnojslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyDqsozsi5zrrLwg66qp66GdIEFQSSDrqqjtgrlcclxuICAgICAgY29uc3QgbW9ja0dldE15UG9zdHMgPSBwb3N0U2VydmljZS5nZXRNeVBvc3RzIGFzIGplc3QuTW9jaztcclxuICAgICAgbW9ja0dldE15UG9zdHMubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICAgIGRhdGE6IHRlc3RQb3N0c1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIC8vIOqyjOyLnOusvCDsgq3soJwgQVBJIOuqqO2CuVxyXG4gICAgICBjb25zdCBtb2NrRGVsZXRlUG9zdCA9IHBvc3RTZXJ2aWNlLmRlbGV0ZVBvc3QgYXMgamVzdC5Nb2NrO1xyXG4gICAgICBtb2NrRGVsZXRlUG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgIG1lc3NhZ2U6ICfqsozsi5zrrLzsnbQg7ISx6rO17KCB7Jy866GcIOyCreygnOuQmOyXiOyKteuLiOuLpC4nXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgICA8VGVzdFdyYXBwZXI+XHJcbiAgICAgICAgICA8TW9ja015UG9zdHNTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+XHJcbiAgICAgICAgPC9UZXN0V3JhcHBlcj5cclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIOyCreygnCDrsoTtirwg7YG066atXHJcbiAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdkZWxldGUtYnV0dG9uJyk7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhkZWxldGVCdXR0b24pO1xyXG5cclxuICAgICAgLy8gZGVsZXRlUG9zdOqwgCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChtb2NrRGVsZXRlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoMSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgMTAwMDApO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgn6rCQ7KCVIO2GteqzhCcsICgpID0+IHtcclxuICAgIGl0KCfthrXqs4Qg7ZmU66m07JeQ7IScIOqwkOyglSDqt7jrnpjtlITqsIAg7ZGc7Iuc65CY7Ja07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgICAgPFRlc3RXcmFwcGVyPlxyXG4gICAgICAgICAgPE1vY2tTdGF0aXN0aWNzU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPlxyXG4gICAgICAgIDwvVGVzdFdyYXBwZXI+XHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyDqt7jrnpjtlIQg7JiB7Jet7J20IOyhtOyerO2VmOuKlOyngCDtmZXsnbhcclxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdlbW90aW9uLWNoYXJ0JykpLnRvQmVUcnV0aHkoKTtcclxuICAgICAgZXhwZWN0KGdldEJ5VGV4dCgn6rCQ7KCVIO2GteqzhCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9LCAxMDAwMCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBRUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRSxZQUFNO0VBRTlCLE9BQU87SUFDTEMsSUFBSSxFQUFFLE1BQU07SUFDWkMsSUFBSSxFQUFFLE1BQU07SUFDWkMsTUFBTSxFQUFFLFFBQVE7SUFDaEJDLFNBQVMsRUFBRSxXQUFXO0lBQ3RCQyxnQkFBZ0IsRUFBRSxrQkFBa0I7SUFDcENDLFVBQVUsRUFBRTtNQUNWQyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUFDLE1BQU07UUFBQSxPQUFJQSxNQUFNO01BQUE7SUFDbEMsQ0FBQztJQUNEQyxRQUFRLEVBQUU7TUFDUkMsRUFBRSxFQUFFLFNBQVM7TUFDYkMsTUFBTSxF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