f77acd2e34212793af31adc696647a63
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _postService = _interopRequireDefault(require("../services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var PostScreen = function PostScreen(_ref) {
  var route = _ref.route,
    navigation = _ref.navigation;
  var postId = route.params.postId;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    post = _useState2[0],
    setPost = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    comments = _useState4[0],
    setComments = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    newComment = _useState6[0],
    setNewComment = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isAnonymous = _useState8[0],
    setIsAnonymous = _useState8[1];
  var _useState9 = (0, _react.useState)(true),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    loading = _useState10[0],
    setLoading = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    submitting = _useState12[0],
    setSubmitting = _useState12[1];
  var _useState13 = (0, _react.useState)(''),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    error = _useState14[0],
    setError = _useState14[1];
  (0, _react.useEffect)(function () {
    fetchPostData();
    fetchComments();
  }, [postId]);
  var fetchPostData = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setLoading(true);
        var response = yield _postService.default.getPostById(postId);
        setPost(response.data.post);
      } catch (error) {
        setError('게시물을 불러오는 중 오류가 발생했습니다');
        console.error('Error fetching post:', error);
      } finally {
        setLoading(false);
      }
    });
    return function fetchPostData() {
      return _ref2.apply(this, arguments);
    };
  }();
  var fetchComments = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield _postService.default.getComments(postId);
        setComments(response.data.comments || []);
      } catch (error) {
        console.error('Error fetching comments:', error);
      }
    });
    return function fetchComments() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleAddComment = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      if (!newComment.trim()) return;
      try {
        setSubmitting(true);
        yield _postService.default.addComment(postId, {
          content: newComment,
          is_anonymous: isAnonymous
        });
        setNewComment('');
        fetchComments();
      } catch (error) {
        setError('댓글을 작성하는 중 오류가 발생했습니다');
        console.error('Error adding comment:', error);
      } finally {
        setSubmitting(false);
      }
    });
    return function handleAddComment() {
      return _ref4.apply(this, arguments);
    };
  }();
  if (loading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.centerContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
        size: "large",
        color: "#0000ff"
      })
    });
  }
  if (!post) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.centerContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "\uAC8C\uC2DC\uBB3C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4"
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.postContainer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.postHeader,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.postDate,
          children: new Date(post.created_at).toLocaleDateString()
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.emotionTag,
          children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
            name: "emoticon-happy-outline",
            size: 16,
            color: "#FFD700"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.emotionText,
            children: post.emotion_summary
          })]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.postContent,
        children: post.content
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.statsContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.statItem,
          children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
            name: "heart-outline",
            size: 20,
            color: "#FF6347"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.statText,
            testID: "like-count",
            children: post.like_count
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.statItem,
          children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
            name: "comment-outline",
            size: 20,
            color: "#4682B4"
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.statText,
            testID: "comment-count",
            children: post.comment_count
          })]
        })]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.divider
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.sectionTitle,
      children: ["\uB313\uAE00 ", comments.length, "\uAC1C"]
    }), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: comments,
      keyExtractor: function keyExtractor(item) {
        return item.comment_id.toString();
      },
      renderItem: function renderItem(_ref5) {
        var item = _ref5.item;
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.commentItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.commentAuthor,
            children: item.is_anonymous ? '익명' : `사용자 ${item.user_id}`
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.commentContent,
            children: item.content
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.commentDate,
            children: new Date(item.created_at).toLocaleDateString()
          })]
        });
      },
      ListEmptyComponent: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyText,
        children: "\uCCAB \uBC88\uC9F8 \uB313\uAE00\uC744 \uB0A8\uACA8\uBCF4\uC138\uC694!"
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.commentInputContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
        mode: isAnonymous ? "contained" : "outlined",
        onPress: function onPress() {
          return setIsAnonymous(!isAnonymous);
        },
        style: styles.anonymousButton,
        children: "\uC775\uBA85"
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.commentInput,
        placeholder: "\uB313\uAE00\uC744 \uC785\uB825\uD558\uC138\uC694...",
        value: newComment,
        onChangeText: setNewComment,
        multiline: true
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
        mode: "contained",
        onPress: handleAddComment,
        loading: submitting,
        disabled: submitting || !newComment.trim(),
        children: "\uAC8C\uC2DC"
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff'
  },
  centerContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  postContainer: {
    marginBottom: 16
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8
  },
  postDate: {
    color: '#666',
    fontSize: 14
  },
  emotionTag: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12
  },
  emotionText: {
    marginLeft: 4,
    fontSize: 12,
    color: '#333'
  },
  postContent: {
    fontSize: 16,
    lineHeight: 24,
    marginVertical: 12
  },
  statsContainer: {
    flexDirection: 'row',
    marginTop: 8
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16
  },
  statText: {
    marginLeft: 4,
    fontSize: 14,
    color: '#666'
  },
  divider: {
    height: 1,
    backgroundColor: '#e0e0e0',
    marginVertical: 16
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 12
  },
  commentItem: {
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0'
  },
  commentAuthor: {
    fontWeight: 'bold',
    marginBottom: 4
  },
  commentContent: {
    fontSize: 14,
    lineHeight: 20
  },
  commentDate: {
    fontSize: 12,
    color: '#999',
    marginTop: 4
  },
  emptyText: {
    textAlign: 'center',
    color: '#666',
    marginTop: 24
  },
  commentInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8,
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0'
  },
  anonymousButton: {
    marginRight: 8
  },
  commentInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 8,
    maxHeight: 100,
    marginRight: 8
  }
});
var _default = exports.default = PostScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,