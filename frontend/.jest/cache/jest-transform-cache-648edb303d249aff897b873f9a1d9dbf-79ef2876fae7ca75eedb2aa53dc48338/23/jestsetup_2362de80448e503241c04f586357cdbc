bff831f511dcb75d912bd310911c853e
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  RN.NativeModules.PlatformConstants = Object.assign({}, RN.NativeModules.PlatformConstants, {
    ReactNativeVersion: {
      major: 0,
      minor: 69,
      patch: 0
    }
  });
  return RN;
});
_getJestObj().mock('@testing-library/react-native', function () {
  var originalModule = jest.requireActual('@testing-library/react-native');
  return Object.assign({}, originalModule, {
    waitFor: jest.fn(function (callback, options) {
      return originalModule.waitFor(callback, Object.assign({}, options, {
        timeout: (options == null ? void 0 : options.timeout) || 20000
      }));
    })
  });
});
_getJestObj().mock('axios', function () {
  return {
    create: jest.fn(function () {
      return {
        get: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        post: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        put: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        delete: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        defaults: {
          headers: {
            common: {}
          }
        }
      };
    }),
    get: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    post: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    put: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    delete: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    })
  };
});
_getJestObj().mock('@testing-library/jest-native/extend-expect', function () {
  return {};
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    clear: jest.fn(function () {
      return Promise.resolve();
    }),
    getAllKeys: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiGet: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiSet: jest.fn(function () {
      return Promise.resolve();
    }),
    multiRemove: jest.fn(function () {
      return Promise.resolve();
    }),
    multiMerge: jest.fn(function () {
      return Promise.resolve();
    }),
    mergeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    useAsyncStorage: jest.fn(function () {
      return {
        getItem: jest.fn(function () {
          return Promise.resolve(null);
        }),
        setItem: jest.fn(function () {
          return Promise.resolve();
        }),
        removeItem: jest.fn(function () {
          return Promise.resolve();
        }),
        mergeItem: jest.fn(function () {
          return Promise.resolve();
        })
      };
    }),
    default: {
      setItem: jest.fn(function () {
        return Promise.resolve();
      }),
      getItem: jest.fn(function () {
        return Promise.resolve(null);
      }),
      removeItem: jest.fn(function () {
        return Promise.resolve();
      }),
      clear: jest.fn(function () {
        return Promise.resolve();
      }),
      getAllKeys: jest.fn(function () {
        return Promise.resolve([]);
      }),
      multiGet: jest.fn(function () {
        return Promise.resolve([]);
      }),
      multiSet: jest.fn(function () {
        return Promise.resolve();
      }),
      multiRemove: jest.fn(function () {
        return Promise.resolve();
      }),
      multiMerge: jest.fn(function () {
        return Promise.resolve();
      }),
      mergeItem: jest.fn(function () {
        return Promise.resolve();
      })
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      }),
      absoluteFill: {},
      hairlineWidth: 1
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      }),
      Version: 29
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Animated: {
      View: 'Animated.View',
      Text: 'Animated.Text',
      Image: 'Animated.Image',
      createAnimatedComponent: jest.fn(function (component) {
        return component;
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          }),
          addListener: jest.fn(),
          removeListener: jest.fn()
        };
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    SectionList: 'SectionList',
    Image: 'Image',
    TextInput: 'TextInput',
    Button: 'Button',
    Switch: 'Switch',
    ActivityIndicator: 'ActivityIndicator',
    Alert: {
      alert: jest.fn()
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      })
    },
    TurboModuleRegistry: {
      get: jest.fn(function () {
        return null;
      }),
      getEnforcing: jest.fn(function (name) {
        if (name === 'DevMenu') {
          return {
            show: jest.fn(),
            reload: jest.fn(),
            debugRemotely: jest.fn(),
            setProfilingEnabled: jest.fn(),
            setHotLoadingEnabled: jest.fn()
          };
        }
        return null;
      })
    },
    DevSettings: {
      reload: jest.fn(),
      addMenuItem: jest.fn(),
      setIsDebuggingRemotely: jest.fn()
    },
    NativeModules: {
      DevMenu: {
        show: jest.fn(),
        reload: jest.fn(),
        debugRemotely: jest.fn(),
        setProfilingEnabled: jest.fn(),
        setHotLoadingEnabled: jest.fn()
      },
      DevSettings: {
        reload: jest.fn(),
        setIsDebuggingRemotely: jest.fn()
      },
      StatusBarManager: {
        HEIGHT: 42,
        setStyle: jest.fn(),
        setHidden: jest.fn(),
        getHeight: jest.fn(function (cb) {
          return cb && cb(42);
        })
      },
      RNCAsyncStorage: {
        getItem: jest.fn(function (key, callback) {
          return callback(null, null);
        }),
        setItem: jest.fn(function (key, value, callback) {
          return callback(null);
        }),
        removeItem: jest.fn(function (key, callback) {
          return callback(null);
        }),
        getAllKeys: jest.fn(function (callback) {
          return callback(null, []);
        }),
        multiGet: jest.fn(function (keys, callback) {
          return callback(null, []);
        }),
        multiSet: jest.fn(function (keyValuePairs, callback) {
          return callback(null);
        }),
        multiRemove: jest.fn(function (keys, callback) {
          return callback(null);
        }),
        multiMerge: jest.fn(function (keyValuePairs, callback) {
          return callback(null);
        })
      }
    },
    I18nManager: {
      isRTL: false,
      getConstants: function getConstants() {
        return {
          isRTL: false
        };
      }
    },
    ViewStyle: {},
    TextStyle: {}
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
require("@testing-library/jest-native/extend-expect");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.__DEV__ = true;
global.React = _react.default;
jest.setTimeout(30000);
var originalConsoleError = console.error;
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['Unable to find an element', 'Warning: An update inside a test was not wrapped in act', 'Cannot read properties of undefined', 'ReactCurrentDispatcher', 'ReactCurrentOwner', 'act(', 'inside a test was not wrapped in act', 'DevMenu could not be found'];
  if (ignoredErrors.some(function (error) {
    return errorMessage.includes(error);
  })) {
    return;
  }
  originalConsoleError.apply(void 0, arguments);
};
var originalConsoleWarn = console.warn;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found', 'DevSettings', 'NativeModule: AsyncStorage is null'];
  if (ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    return;
  }
  originalConsoleWarn.apply(void 0, arguments);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,