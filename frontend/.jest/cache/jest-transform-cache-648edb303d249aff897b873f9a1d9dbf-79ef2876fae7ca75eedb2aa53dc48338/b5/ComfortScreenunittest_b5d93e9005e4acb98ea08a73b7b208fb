2744c1acab7845930261df0e37db300e
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    _Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return {
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee'
        }
      };
    },
    Card: function Card(props) {
      return React.createElement(View, props, props.children);
    },
    TextInput: function TextInput(props) {
      return React.createElement(View, {
        testID: props.testID
      }, props.label);
    },
    Button: function Button(props) {
      return React.createElement(TouchableOpacity, {
        testID: props.testID
      }, props.children);
    },
    Title: function Title(props) {
      return React.createElement(_Text, {}, props.children);
    },
    Paragraph: function Paragraph(props) {
      return React.createElement(_Text, {}, props.children);
    },
    Chip: function Chip(props) {
      return React.createElement(View, {}, props.children);
    },
    List: {
      Section: function Section(props) {
        return React.createElement(View, {
          testID: props.testID
        }, props.children);
      },
      Item: function Item(props) {
        return React.createElement(View, {}, [React.createElement(_Text, {
          key: 'title'
        }, props.title), props.right && props.right({})]);
      },
      Icon: function Icon() {
        return React.createElement(View, {}, null);
      }
    },
    FAB: function FAB(props) {
      return React.createElement(TouchableOpacity, {
        testID: props.testID
      }, props.icon);
    },
    ActivityIndicator: function ActivityIndicator() {
      return React.createElement(View, {
        testID: 'activity-indicator'
      });
    },
    Text: function Text(props) {
      return React.createElement(_Text, {}, props.children);
    }
  };
});
_getJestObj().mock("../../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          data: [{
            post_id: 1,
            title: '힘든 하루',
            content: '오늘은 정말 힘든 하루였어요.',
            user_id: 1,
            is_anonymous: true,
            like_count: 8,
            comment_count: 5,
            created_at: '2024-04-06T12:00:00.000Z'
          }]
        }
      });
    }),
    getBestPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          data: [{
            post_id: 3,
            title: '여러분 덕분에 이겨냈어요',
            content: '지난주에 올린 고민, 여러분의 댓글 덕분에 용기를 얻었어요.',
            like_count: 25,
            comment_count: 12
          }]
        }
      });
    }),
    createPost: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success'
        }
      });
    }),
    sendMessage: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success'
        }
      });
    })
  };
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  return Object.assign({}, rn, {
    Alert: Object.assign({}, rn.Alert, {
      alert: jest.fn()
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../../src/screens/ComfortScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(console, 'error').mockImplementation(function () {});
jest.spyOn(console, 'warn').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('ComfortScreen 단위 테스트', function () {
  var comfortWallService = require("../../../src/services/api/comfortWallService");
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('화면 렌더링 확인', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      toJSON = _render.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  test('API 서비스 함수 호출 확인', function () {
    expect(typeof comfortWallService.getPosts).toBe('function');
    expect(typeof comfortWallService.getBestPosts).toBe('function');
    expect(typeof comfortWallService.createPost).toBe('function');
    expect(typeof comfortWallService.sendMessage).toBe('function');
  });
  test('getPosts API가 올바른 데이터 구조 반환', (0, _asyncToGenerator2.default)(function* () {
    var result = yield comfortWallService.getPosts();
    expect(result.data.status).toBe('success');
    expect(Array.isArray(result.data.data)).toBe(true);
    expect(result.data.data.length).toBeGreaterThan(0);
    var post = result.data.data[0];
    expect(post).toHaveProperty('post_id');
    expect(post).toHaveProperty('title');
    expect(post).toHaveProperty('content');
  }));
  test('getBestPosts API가 올바른 데이터 구조 반환', (0, _asyncToGenerator2.default)(function* () {
    var result = yield comfortWallService.getBestPosts();
    expect(result.data.status).toBe('success');
    expect(Array.isArray(result.data.data)).toBe(true);
    if (result.data.data.length > 0) {
      var post = result.data.data[0];
      expect(post).toHaveProperty('post_id');
      expect(post).toHaveProperty('title');
      expect(post).toHaveProperty('content');
    }
  }));
  test('createPost 함수 호출 테스트', (0, _asyncToGenerator2.default)(function* () {
    var postData = {
      title: '테스트 제목',
      content: '테스트 내용',
      is_anonymous: true
    };
    yield comfortWallService.createPost(postData);
    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);
  }));
  test('sendMessage 함수 호출 테스트', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var messageData = {
      message: '응원 메시지',
      is_anonymous: true
    };
    yield comfortWallService.sendMessage(postId, messageData);
    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,