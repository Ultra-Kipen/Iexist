dad981212c0f0a1e3c1c23ff27ceb422
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  return Object.assign({}, rn, {
    Animated: Object.assign({}, rn.Animated, {
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          })
        };
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          })
        };
      })
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
describe('Toast', function () {
  afterEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  test('renders correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        testID: "toast"
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('toast')).toBeTruthy();
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  test('does not render when visible is false', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        testID: "toast"
      })),
      queryByTestId = _render2.queryByTestId;
    expect(queryByTestId('toast')).toBeNull();
  });
  test('renders with different types', function () {
    var types = ['success', 'error', 'info', 'warning'];
    types.forEach(function (type) {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
          visible: true,
          message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
          type: type,
          testID: "toast"
        })),
        getByTestId = _render3.getByTestId;
      expect(getByTestId('toast')).toBeTruthy();
    });
  });
  test('renders with top position', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        position: "top",
        testID: "toast"
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('toast')).toBeTruthy();
  });
  test('icon renders correctly', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
        testID: "toast"
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('test-icon')).toBeTruthy();
  });
  test('closes when pressed', function () {
    var onClose = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose,
        testID: "toast"
      })),
      getByTestId = _render6.getByTestId;
    _reactNative.fireEvent.press(getByTestId('toast-touchable'));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  });
  test('onClose is called after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  });
  test('hide animation works correctly', function () {
    var onClose = jest.fn();
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose,
        testID: "toast"
      })),
      rerender = _render7.rerender;
    rerender((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  });
  test('ToastController should handle show and hide', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    expect(mockToast.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockToast.hide).toHaveBeenCalled();
  });
  test('ToastController handles missing instance', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,