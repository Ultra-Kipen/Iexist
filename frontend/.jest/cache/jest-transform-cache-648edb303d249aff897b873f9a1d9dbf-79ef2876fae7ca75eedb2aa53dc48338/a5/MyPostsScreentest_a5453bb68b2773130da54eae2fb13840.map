{"version":3,"names":["_getJestObj","mock","rn","jest","requireActual","mockReact","Object","assign","FlatList","_ref","data","renderItem","ListEmptyComponent","length","_jsxRuntime","jsx","Fragment","children","map","item","index","useNavigation","navigate","fn","goBack","addListener","getMyPosts","deletePost","_jest$requireActual","View","Text","TouchableOpacity","Button","props","onPress","testID","style","Card","Content","Actions","Dialog","visible","Title","Chip","jsxs","icon","Portal","_jest$requireActual2","MockIcon","name","alert","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_MyPostsScreen","_postService","_require","mockPosts","post_id","content","emotion_summary","like_count","comment_count","created_at","createMockResponse","status","statusText","headers","config","describe","beforeEach","clearAllMocks","postService","mockResolvedValue","posts","afterEach","cleanup","it","default","render","navigation","route","waitFor","expect","screen","getByText","toBeTruthy","timeout"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react-native';\r\nimport MyPostsScreen from '../../src/screens/MyPostsScreen';\r\nimport postService from '../../src/services/api/postService';\r\nimport { Alert } from 'react-native';\r\nimport { AxiosResponse } from 'axios';\r\n\r\n// 타입 정의\r\ntype MockFn<T extends (...args: any[]) => any> = jest.Mock<ReturnType<T>, Parameters<T>>;\r\n\r\n// FlatList 모킹 - 실제로 자식 요소들을 렌더링하도록 함\r\njest.mock('react-native', () => {\r\n  const rn = jest.requireActual('react-native');\r\n  const mockReact = jest.requireActual('react');\r\n  \r\n  return {\r\n    ...rn,\r\n    FlatList: ({ data, renderItem, ListEmptyComponent }) => {\r\n      if (!data || data.length === 0) {\r\n        return ListEmptyComponent || null;\r\n      }\r\n      \r\n      return (\r\n        <>\r\n          {data.map((item, index) => (\r\n            <mockReact.Fragment key={index}>\r\n              {renderItem({ item, index })}\r\n            </mockReact.Fragment>\r\n          ))}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n});\r\n\r\n// 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    addListener: jest.fn(() => jest.fn()),\r\n  }),\r\n}));\r\n\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn(),\r\n  deletePost: jest.fn(),\r\n}));\r\n\r\n// Paper 모킹 - 설정 파일에 이미 있는 모킹을 활용\r\njest.mock('react-native-paper', () => {\r\n  const mockReact = jest.requireActual('react');\r\n  const { View, Text, TouchableOpacity } = jest.requireActual('react-native');\r\n  \r\n  const Button = function Button(props) {\r\n    return (\r\n      <TouchableOpacity \r\n        onPress={props.onPress} \r\n        testID={props.testID} \r\n        style={props.style}\r\n      >\r\n        <Text>{props.children}</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  \r\n  const Card = function Card(props) {\r\n    return (\r\n      <View style={props.style} testID={props.testID}>\r\n        {props.children}\r\n      </View>\r\n    );\r\n  };\r\n  \r\n  Card.Content = function Content(props) {\r\n    return <View>{props.children}</View>;\r\n  };\r\n  \r\n  Card.Actions = function Actions(props) {\r\n    return <View>{props.children}</View>;\r\n  };\r\n  \r\n  const Dialog = function Dialog(props) {\r\n    if (!props.visible) return null;\r\n    return <View>{props.children}</View>;\r\n  };\r\n  \r\n  Dialog.Title = function Title(props) {\r\n    return <Text>{props.children}</Text>;\r\n  };\r\n  \r\n  Dialog.Content = function Content(props) {\r\n    return <View>{props.children}</View>;\r\n  };\r\n  \r\n  Dialog.Actions = function Actions(props) {\r\n    return <View>{props.children}</View>;\r\n  };\r\n  \r\n  const Chip = function Chip(props) {\r\n    return (\r\n      <View style={props.style}>\r\n        {props.icon && props.icon()}\r\n        <Text>{props.children}</Text>\r\n      </View>\r\n    );\r\n  };\r\n  \r\n  const Portal = function Portal(props) {\r\n    return props.children;\r\n  };\r\n\r\n  return {\r\n    Button,\r\n    Card,\r\n    Chip,\r\n    Dialog,\r\n    Portal,\r\n  };\r\n});\r\n\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => {\r\n  const mockReact = jest.requireActual('react');\r\n  const { Text } = jest.requireActual('react-native');\r\n  \r\n  return function MockIcon(props) {\r\n    return <Text>{props.name}</Text>;\r\n  };\r\n});\r\n\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 테스트 데이터\r\nconst mockPosts = [\r\n  {\r\n    post_id: 1,\r\n    content: '첫 번째 테스트 게시물입니다.',\r\n    emotion_summary: '행복',\r\n    like_count: 5,\r\n    comment_count: 2,\r\n    created_at: '2025-03-01T12:00:00Z',\r\n  },\r\n  {\r\n    post_id: 2,\r\n    content: '두 번째 테스트 게시물입니다.',\r\n    emotion_summary: '슬픔',\r\n    like_count: 2,\r\n    comment_count: 1,\r\n    created_at: '2025-03-02T12:00:00Z',\r\n  },\r\n];\r\n\r\n// Axios 응답 모킹 헬퍼 함수\r\nfunction createMockResponse<T>(data: T): AxiosResponse<T> {\r\n  return {\r\n    data,\r\n    status: 200,\r\n    statusText: 'OK',\r\n    headers: {},\r\n    config: {} as any,\r\n  };\r\n}\r\n\r\ndescribe('MyPostsScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 타입 어설션 추가\r\n    (postService.getMyPosts as MockFn<typeof postService.getMyPosts>).mockResolvedValue(\r\n      createMockResponse({ posts: mockPosts })\r\n    );\r\n  });\r\n\r\n  afterEach(() => {\r\n    cleanup();\r\n  });\r\n\r\n  it('renders post list correctly', async () => {\r\n    render(<MyPostsScreen navigation={{ navigate: jest.fn(), addListener: jest.fn(() => jest.fn()) }} route={{}} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('내 게시물')).toBeTruthy();\r\n    }, { timeout: 2000 });\r\n  });\r\n});"],"mappings":"AAYAA,WAAA,GAAKC,IAAI,CAAC,cAAc,EAAE,YAAM;EAC9B,IAAMC,EAAE,GAAGC,IAAI,CAACC,aAAa,CAAC,cAAc,CAAC;EAC7C,IAAMC,SAAS,GAAGF,IAAI,CAACC,aAAa,CAAC,OAAO,CAAC;EAE7C,OAAAE,MAAA,CAAAC,MAAA,KACKL,EAAE;IACLM,QAAQ,EAAE,SAAVA,QAAQA,CAAAC,IAAA,EAAgD;MAAA,IAA3CC,IAAI,GAAAD,IAAA,CAAJC,IAAI;QAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;QAAEC,kBAAkB,GAAAH,IAAA,CAAlBG,kBAAkB;MAC/C,IAAI,CAACF,IAAI,IAAIA,IAAI,CAACG,MAAM,KAAK,CAAC,EAAE;QAC9B,OAAOD,kBAAkB,IAAI,IAAI;MACnC;MAEA,OACE,IAAAE,WAAA,CAAAC,GAAA,EAAAD,WAAA,CAAAE,QAAA;QAAAC,QAAA,EACGP,IAAI,CAACQ,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK;UAAA,OACpB,IAAAN,WAAA,CAAAC,GAAA,EAACV,SAAS,CAACW,QAAQ;YAAAC,QAAA,EAChBN,UAAU,CAAC;cAAEQ,IAAI,EAAJA,IAAI;cAAEC,KAAK,EAALA;YAAM,CAAC;UAAC,GADLA,KAEL,CAAC;QAAA,CACtB;MAAC,CACF,CAAC;IAEP;EAAC;AAEL,CAAC,CAAC;AAGFpB,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE;EAAA,OAAO;IAC3CoB,aAAa,EAAE,SAAfA,aAAaA,CAAA;MAAA,OAAS;QACpBC,QAAQ,EAAEnB,IAAI,CAACoB,EAAE,CAAC,CAAC;QACnBC,MAAM,EAAErB,IAAI,CAACoB,EAAE,CAAC,CAAC;QACjBE,WAAW,EAAEtB,IAAI,CAACoB,EAAE,CAAC;UAAA,OAAMpB,IAAI,CAACoB,EAAE,CAAC,CAAC;QAAA;MACtC,CAAC;IAAA;EACH,CAAC;AAAA,CAAC,CAAC;AAEHvB,WAAA,GAAKC,IAAI,uCAAuC;EAAA,OAAO;IACrDyB,UAAU,EAAEvB,IAAI,CAACoB,EAAE,CAAC,CAAC;IACrBI,UAAU,EAAExB,IAAI,CAACoB,EAAE,CAAC;EACtB,CAAC;AAAA,CAAC,CAAC;AAGHvB,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE,YAAM;EACpC,IAAMI,SAAS,GAAGF,IAAI,CAACC,aAAa,CAAC,OAAO,CAAC;EAC7C,IAAAwB,mBAAA,GAAyCzB,IAAI,CAACC,aAAa,CAAC,cAAc,CAAC;IAAnEyB,IAAI,GAAAD,mBAAA,CAAJC,IAAI;IAAEC,IAAI,GAAAF,mBAAA,CAAJE,IAAI;IAAEC,gBAAgB,GAAAH,mBAAA,CAAhBG,gBAAgB;EAEpC,IAAMC,MAAM,GAAG,SAASA,MAAMA,CAACC,KAAK,EAAE;IACpC,OACE,IAAAnB,WAAA,CAAAC,GAAA,EAACgB,gBAAgB;MACfG,OAAO,EAAED,KAAK,CAACC,OAAQ;MACvBC,MAAM,EAAEF,KAAK,CAACE,MAAO;MACrBC,KAAK,EAAEH,KAAK,CAACG,KAAM;MAAAnB,QAAA,EAEnB,IAAAH,WAAA,CAAAC,GAAA,EAACe,IAAI;QAAAb,QAAA,EAAEgB,KAAK,CAAChB;MAAQ,CAAO;IAAC,CACb,CAAC;EAEvB,CAAC;EAED,IAAMoB,IAAI,GAAG,SAASA,IAAIA,CAACJ,KAAK,EAAE;IAChC,OACE,IAAAnB,WAAA,CAAAC,GAAA,EAACc,IAAI;MAACO,KAAK,EAAEH,KAAK,CAACG,KAAM;MAACD,MAAM,EAAEF,KAAK,CAACE,MAAO;MAAAlB,QAAA,EAC5CgB,KAAK,CAAChB;IAAQ,CACX,CAAC;EAEX,CAAC;EAEDoB,IAAI,CAACC,OAAO,GAAG,SAASA,OAAOA,CAACL,KAAK,EAAE;IACrC,OAAO,IAAAnB,WAAA,CAAAC,GAAA,EAACc,IAAI;MAAAZ,QAAA,EAAEgB,KAAK,CAAChB;IAAQ,CAAO,CAAC;EACtC,CAAC;EAEDoB,IAAI,CAACE,OAAO,GAAG,SAASA,OAAOA,CAACN,KAAK,EAAE;IACrC,OAAO,IAAAnB,WAAA,CAAAC,GAAA,EAACc,IAAI;MAAAZ,QAAA,EAAEgB,KAAK,CAAChB;IAAQ,CAAO,CAAC;EACtC,CAAC;EAED,IAAMuB,MAAM,GAAG,SAASA,MAAMA,CAACP,KAAK,EAAE;IACpC,IAAI,CAACA,KAAK,CAACQ,OAAO,EAAE,OAAO,IAAI;IAC/B,OAAO,IAAA3B,WAAA,CAAAC,GAAA,EAACc,IAAI;MAAAZ,QAAA,EAAEgB,KAAK,CAAChB;IAAQ,CAAO,CAAC;EACtC,CAAC;EAEDuB,MAAM,CAACE,KAAK,GAAG,SAASA,KAAKA,CAACT,KAAK,EAAE;IACnC,OAAO,IAAAnB,WAAA,CAAAC,GAAA,EAACe,IAAI;MAAAb,QAAA,EAAEgB,KAAK,CAAChB;IAAQ,CAAO,CAAC;EACtC,CAAC;EAEDuB,MAAM,CAACF,OAAO,GAAG,SAASA,OAAOA,CAACL,KAAK,EAAE;IACvC,OAAO,IAAAnB,WAAA,CAAAC,GAAA,EAACc,IAAI;MAAAZ,QAAA,EAAEgB,KAAK,CAAChB;IAAQ,CAAO,CAAC;EACtC,CAAC;EAEDuB,MAAM,CAACD,OAAO,GAAG,SAASA,OAAOA,CAACN,KAAK,EAAE;IACvC,OAAO,IAAAnB,WAAA,CAAAC,GAAA,EAACc,IAAI;MAAAZ,QAAA,EAAEgB,KAAK,CAAChB;IAAQ,CAAO,CAAC;EACtC,CAAC;EAED,IAAM0B,IAAI,GAAG,SAASA,IAAIA,CAACV,KAAK,EAAE;IAChC,OACE,IAAAnB,WAAA,CAAA8B,IAAA,EAACf,IAAI;MAACO,KAAK,EAAEH,KAAK,CAACG,KAAM;MAAAnB,QAAA,GACtBgB,KAAK,CAACY,IAAI,IAAIZ,KAAK,CAACY,IAAI,CAAC,CAAC,EAC3B,IAAA/B,WAAA,CAAAC,GAAA,EAACe,IAAI;QAAAb,QAAA,EAAEgB,KAAK,CAAChB;MAAQ,CAAO,CAAC;IAAA,CACzB,CAAC;EAEX,CAAC;EAED,IAAM6B,MAAM,GAAG,SAASA,MAAMA,CAACb,KAAK,EAAE;IACpC,OAAOA,KAAK,CAAChB,QAAQ;EACvB,CAAC;EAED,OAAO;IACLe,MAAM,EAANA,MAAM;IACNK,IAAI,EAAJA,IAAI;IACJM,IAAI,EAAJA,IAAI;IACJH,MAAM,EAANA,MAAM;IACNM,MAAM,EAANA;EACF,CAAC;AACH,CAAC,CAAC;AAEF9C,WAAA,GAAKC,IAAI,CAAC,kDAAkD,EAAE,YAAM;EAClE,IAAMI,SAAS,GAAGF,IAAI,CAACC,aAAa,CAAC,OAAO,CAAC;EAC7C,IAAA2C,oBAAA,GAAiB5C,IAAI,CAACC,aAAa,CAAC,cAAc,CAAC;IAA3C0B,IAAI,GAAAiB,oBAAA,CAAJjB,IAAI;EAEZ,OAAO,SAASkB,QAAQA,CAACf,KAAK,EAAE;IAC9B,OAAO,IAAAnB,WAAA,CAAAC,GAAA,EAACe,IAAI;MAAAb,QAAA,EAAEgB,KAAK,CAACgB;IAAI,CAAO,CAAC;EAClC,CAAC;AACH,CAAC,CAAC;AAEFjD,WAAA,GAAKC,IAAI,CAAC,oCAAoC,EAAE;EAAA,OAAO;IACrDiD,KAAK,EAAE/C,IAAI,CAACoB,EAAE,CAAC;EACjB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAA4B,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AApIJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,cAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,YAAA,GAAAN,sBAAA,CAAAC,OAAA;AAA6D,IAAAtC,WAAA,GAAAsC,OAAA;AAAA,SAAApD,YAAA;EAAA,IAAA0D,QAAA,GAAAN,OAAA;IAAAjD,IAAA,GAAAuD,QAAA,CAAAvD,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAoI7D,IAAMwD,SAAS,GAAG,CAChB;EACEC,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE,kBAAkB;EAC3BC,eAAe,EAAE,IAAI;EACrBC,UAAU,EAAE,CAAC;EACbC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE;AACd,CAAC,EACD;EACEL,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE,kBAAkB;EAC3BC,eAAe,EAAE,IAAI;EACrBC,UAAU,EAAE,CAAC;EACbC,aAAa,EAAE,CAAC;EAChBC,UAAU,EAAE;AACd,CAAC,CACF;AAGD,SAASC,kBAAkBA,CAAIxD,IAAO,EAAoB;EACxD,OAAO;IACLA,IAAI,EAAJA,IAAI;IACJyD,MAAM,EAAE,GAAG;IACXC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE,CAAC,CAAC;IACXC,MAAM,EAAE,CAAC;EACX,CAAC;AACH;AAEAC,QAAQ,CAAC,eAAe,EAAE,YAAM;EAC9BC,UAAU,CAAC,YAAM;IACfrE,IAAI,CAACsE,aAAa,CAAC,CAAC;IAGnBC,oBAAW,CAAChD,UAAU,CAA2CiD,iBAAiB,CACjFT,kBAAkB,CAAC;MAAEU,KAAK,EAAEjB;IAAU,CAAC,CACzC,CAAC;EACH,CAAC,CAAC;EAEFkB,SAAS,CAAC,YAAM;IACd,IAAAC,oBAAO,EAAC,CAAC;EACX,CAAC,CAAC;EAEFC,EAAE,CAAC,6BAA6B,MAAA1B,kBAAA,CAAA2B,OAAA,EAAE,aAAY;IAC5C,IAAAC,mBAAM,EAAC,IAAAnE,WAAA,CAAAC,GAAA,EAACyC,cAAA,CAAAwB,OAAa;MAACE,UAAU,EAAE;QAAE5D,QAAQ,EAAEnB,IAAI,CAACoB,EAAE,CAAC,CAAC;QAAEE,WAAW,EAAEtB,IAAI,CAACoB,EAAE,CAAC;UAAA,OAAMpB,IAAI,CAACoB,EAAE,CAAC,CAAC;QAAA;MAAE,CAAE;MAAC4D,KAAK,EAAE,CAAC;IAAE,CAAE,CAAC,CAAC;IAEhH,MAAM,IAAAC,oBAAO,EAAC,YAAM;MAClBC,MAAM,CAACC,mBAAM,CAACC,SAAS,CAAC,OAAO,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC;IAChD,CAAC,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;EACvB,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}