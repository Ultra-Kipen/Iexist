054f2dba9a00b75760679bbd32d83788
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var TagSelector = function TagSelector(_ref) {
  var tags = _ref.tags,
    selectedTags = _ref.selectedTags,
    onTagSelect = _ref.onTagSelect,
    onTagCreate = _ref.onTagCreate,
    _ref$title = _ref.title,
    title = _ref$title === void 0 ? '태그 선택' : _ref$title,
    _ref$allowCreation = _ref.allowCreation,
    allowCreation = _ref$allowCreation === void 0 ? false : _ref$allowCreation,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? true : _ref$multiple,
    maxSelected = _ref.maxSelected;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    newTagText = _useState2[0],
    setNewTagText = _useState2[1];
  var handleTagSelect = function handleTagSelect(tagId) {
    onTagSelect(tagId);
  };
  var handleCreateTag = function handleCreateTag() {
    if (newTagText.trim() && onTagCreate) {
      onTagCreate(newTagText.trim());
      setNewTagText('');
    }
  };
  var isMaxSelected = maxSelected !== undefined && selectedTags.length >= maxSelected;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: title
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      horizontal: false,
      showsVerticalScrollIndicator: false,
      style: styles.tagScroll,
      contentContainerStyle: styles.tagContainer,
      children: tags.map(function (tag) {
        var isSelected = selectedTags.includes(tag.id);
        var disabled = !isSelected && isMaxSelected;
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.tag, isSelected && styles.selectedTag, disabled && styles.disabledTag],
          onPress: function onPress() {
            return handleTagSelect(tag.id);
          },
          disabled: disabled,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.tagText, isSelected && styles.selectedTagText, disabled && styles.disabledTagText],
            children: tag.name
          })
        }, tag.id);
      })
    }), allowCreation && onTagCreate && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.createTagContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.input,
        value: newTagText,
        onChangeText: setNewTagText,
        placeholder: "\uC0C8 \uD0DC\uADF8 \uC785\uB825",
        maxLength: 20
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [styles.createButton, !newTagText.trim() && styles.disabledButton],
        onPress: handleCreateTag,
        disabled: !newTagText.trim(),
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.createButtonText,
          children: "\uCD94\uAC00"
        })
      })]
    }), maxSelected && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.helperText,
      children: [selectedTags.length, "/", maxSelected, " \uC120\uD0DD\uB428"]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    marginBottom: 16
  },
  title: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 8,
    color: '#333333'
  },
  tagScroll: {
    maxHeight: 120
  },
  tagContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap'
  },
  tag: {
    backgroundColor: '#F5F5F5',
    borderRadius: 16,
    paddingVertical: 6,
    paddingHorizontal: 12,
    margin: 4,
    borderWidth: 1,
    borderColor: '#EEEEEE'
  },
  selectedTag: {
    backgroundColor: '#E1EFF9',
    borderColor: '#4A90E2'
  },
  disabledTag: {
    opacity: 0.5
  },
  tagText: {
    color: '#666666',
    fontSize: 14
  },
  selectedTagText: {
    color: '#4A90E2',
    fontWeight: '500'
  },
  disabledTagText: {
    color: '#999999'
  },
  createTagContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 12
  },
  input: {
    flex: 1,
    height: 40,
    borderWidth: 1,
    borderColor: '#DDDDDD',
    borderRadius: 4,
    paddingHorizontal: 12,
    marginRight: 8
  },
  createButton: {
    backgroundColor: '#4A90E2',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 4
  },
  disabledButton: {
    backgroundColor: '#CCCCCC'
  },
  createButtonText: {
    color: '#FFFFFF',
    fontWeight: '500'
  },
  helperText: {
    fontSize: 12,
    color: '#999999',
    marginTop: 8
  }
});
var _default = exports.default = TagSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIlRhZ1NlbGVjdG9yIiwiX3JlZiIsInRhZ3MiLCJzZWxlY3RlZFRhZ3MiLCJvblRhZ1NlbGVjdCIsIm9uVGFnQ3JlYXRlIiwiX3JlZiR0aXRsZSIsInRpdGxlIiwiX3JlZiRhbGxvd0NyZWF0aW9uIiwiYWxsb3dDcmVhdGlvbiIsIl9yZWYkbXVsdGlwbGUiLCJtdWx0aXBsZSIsIm1heFNlbGVjdGVkIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwibmV3VGFnVGV4dCIsInNldE5ld1RhZ1RleHQiLCJoYW5kbGVUYWdTZWxlY3QiLCJ0YWdJZCIsImhhbmRsZUNyZWF0ZVRhZyIsInRyaW0iLCJpc01heFNlbGVjdGVkIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwianN4IiwiVGV4dCIsIlNjcm9sbFZpZXciLCJob3Jpem9udGFsIiwic2hvd3NWZXJ0aWNhbFNjcm9sbEluZGljYXRvciIsInRhZ1Njcm9sbCIsImNvbnRlbnRDb250YWluZXJTdHlsZSIsInRhZ0NvbnRhaW5lciIsIm1hcCIsInRhZyIsImlzU2VsZWN0ZWQiLCJpbmNsdWRlcyIsImlkIiwiZGlzYWJsZWQiLCJUb3VjaGFibGVPcGFjaXR5Iiwic2VsZWN0ZWRUYWciLCJkaXNhYmxlZFRhZyIsIm9uUHJlc3MiLCJ0YWdUZXh0Iiwic2VsZWN0ZWRUYWdUZXh0IiwiZGlzYWJsZWRUYWdUZXh0IiwibmFtZSIsImNyZWF0ZVRhZ0NvbnRhaW5lciIsIlRleHRJbnB1dCIsImlucHV0IiwidmFsdWUiLCJvbkNoYW5nZVRleHQiLCJwbGFjZWhvbGRlciIsIm1heExlbmd0aCIsImNyZWF0ZUJ1dHRvbiIsImRpc2FibGVkQnV0dG9uIiwiY3JlYXRlQnV0dG9uVGV4dCIsImhlbHBlclRleHQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwibWFyZ2luQm90dG9tIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY29sb3IiLCJtYXhIZWlnaHQiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nVmVydGljYWwiLCJwYWRkaW5nSG9yaXpvbnRhbCIsIm1hcmdpbiIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJvcGFjaXR5IiwiYWxpZ25JdGVtcyIsIm1hcmdpblRvcCIsImZsZXgiLCJoZWlnaHQiLCJtYXJnaW5SaWdodCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlRhZ1NlbGVjdG9yLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tcG9uZW50cy9UYWdTZWxlY3Rvci50c3hcclxuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBWaWV3LCBUZXh0LCBTdHlsZVNoZWV0LCBUb3VjaGFibGVPcGFjaXR5LCBTY3JvbGxWaWV3LCBUZXh0SW5wdXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuaW50ZXJmYWNlIFRhZyB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBuYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBUYWdTZWxlY3RvclByb3BzIHtcclxuICB0YWdzOiBUYWdbXTtcclxuICBzZWxlY3RlZFRhZ3M6IG51bWJlcltdO1xyXG4gIG9uVGFnU2VsZWN0OiAodGFnSWQ6IG51bWJlcikgPT4gdm9pZDtcclxuICBvblRhZ0NyZWF0ZT86ICh0YWdOYW1lOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgYWxsb3dDcmVhdGlvbj86IGJvb2xlYW47XHJcbiAgbXVsdGlwbGU/OiBib29sZWFuO1xyXG4gIG1heFNlbGVjdGVkPzogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBUYWdTZWxlY3RvcjogUmVhY3QuRkM8VGFnU2VsZWN0b3JQcm9wcz4gPSAoe1xyXG4gIHRhZ3MsXHJcbiAgc2VsZWN0ZWRUYWdzLFxyXG4gIG9uVGFnU2VsZWN0LFxyXG4gIG9uVGFnQ3JlYXRlLFxyXG4gIHRpdGxlID0gJ+2DnOq3uCDshKDtg50nLFxyXG4gIGFsbG93Q3JlYXRpb24gPSBmYWxzZSxcclxuICBtdWx0aXBsZSA9IHRydWUsXHJcbiAgbWF4U2VsZWN0ZWQsXHJcbn0pID0+IHtcclxuICBjb25zdCBbbmV3VGFnVGV4dCwgc2V0TmV3VGFnVGV4dF0gPSB1c2VTdGF0ZSgnJyk7XHJcbiAgXHJcbiAgY29uc3QgaGFuZGxlVGFnU2VsZWN0ID0gKHRhZ0lkOiBudW1iZXIpID0+IHtcclxuICAgIG9uVGFnU2VsZWN0KHRhZ0lkKTtcclxuICB9O1xyXG4gIFxyXG4gIGNvbnN0IGhhbmRsZUNyZWF0ZVRhZyA9ICgpID0+IHtcclxuICAgIGlmIChuZXdUYWdUZXh0LnRyaW0oKSAmJiBvblRhZ0NyZWF0ZSkge1xyXG4gICAgICBvblRhZ0NyZWF0ZShuZXdUYWdUZXh0LnRyaW0oKSk7XHJcbiAgICAgIHNldE5ld1RhZ1RleHQoJycpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgXHJcbiAgY29uc3QgaXNNYXhTZWxlY3RlZCA9IG1heFNlbGVjdGVkICE9PSB1bmRlZmluZWQgJiYgc2VsZWN0ZWRUYWdzLmxlbmd0aCA+PSBtYXhTZWxlY3RlZDtcclxuICBcclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxyXG4gICAgICB7dGl0bGUgJiYgPFRleHQgc3R5bGU9e3N0eWxlcy50aXRsZX0+e3RpdGxlfTwvVGV4dD59XHJcbiAgICAgIFxyXG4gICAgICA8U2Nyb2xsVmlldyBcclxuICAgICAgICBob3Jpem9udGFsPXtmYWxzZX0gXHJcbiAgICAgICAgc2hvd3NWZXJ0aWNhbFNjcm9sbEluZGljYXRvcj17ZmFsc2V9XHJcbiAgICAgICAgc3R5bGU9e3N0eWxlcy50YWdTY3JvbGx9XHJcbiAgICAgICAgY29udGVudENvbnRhaW5lclN0eWxlPXtzdHlsZXMudGFnQ29udGFpbmVyfVxyXG4gICAgICA+XHJcbiAgICAgICAge3RhZ3MubWFwKCh0YWcpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSBzZWxlY3RlZFRhZ3MuaW5jbHVkZXModGFnLmlkKTtcclxuICAgICAgICAgIGNvbnN0IGRpc2FibGVkID0gIWlzU2VsZWN0ZWQgJiYgaXNNYXhTZWxlY3RlZDtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcclxuICAgICAgICAgICAgICBrZXk9e3RhZy5pZH1cclxuICAgICAgICAgICAgICBzdHlsZT17W1xyXG4gICAgICAgICAgICAgICAgc3R5bGVzLnRhZyxcclxuICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQgJiYgc3R5bGVzLnNlbGVjdGVkVGFnLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkVGFnLFxyXG4gICAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT4gaGFuZGxlVGFnU2VsZWN0KHRhZy5pZCl9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgIHN0eWxlPXtbXHJcbiAgICAgICAgICAgICAgICAgIHN0eWxlcy50YWdUZXh0LFxyXG4gICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkICYmIHN0eWxlcy5zZWxlY3RlZFRhZ1RleHQsXHJcbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkICYmIHN0eWxlcy5kaXNhYmxlZFRhZ1RleHQsXHJcbiAgICAgICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHt0YWcubmFtZX1cclxuICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSl9XHJcbiAgICAgIDwvU2Nyb2xsVmlldz5cclxuICAgICAgXHJcbiAgICAgIHthbGxvd0NyZWF0aW9uICYmIG9uVGFnQ3JlYXRlICYmIChcclxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNyZWF0ZVRhZ0NvbnRhaW5lcn0+XHJcbiAgICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMuaW5wdXR9XHJcbiAgICAgICAgICAgIHZhbHVlPXtuZXdUYWdUZXh0fVxyXG4gICAgICAgICAgICBvbkNoYW5nZVRleHQ9e3NldE5ld1RhZ1RleHR9XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwi7IOIIO2DnOq3uCDsnoXroKVcIlxyXG4gICAgICAgICAgICBtYXhMZW5ndGg9ezIwfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XHJcbiAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLmNyZWF0ZUJ1dHRvbiwgIW5ld1RhZ1RleHQudHJpbSgpICYmIHN0eWxlcy5kaXNhYmxlZEJ1dHRvbl19XHJcbiAgICAgICAgICAgIG9uUHJlc3M9e2hhbmRsZUNyZWF0ZVRhZ31cclxuICAgICAgICAgICAgZGlzYWJsZWQ9eyFuZXdUYWdUZXh0LnRyaW0oKX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5jcmVhdGVCdXR0b25UZXh0fT7stpTqsIA8L1RleHQ+XHJcbiAgICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XHJcbiAgICAgICAgPC9WaWV3PlxyXG4gICAgICApfVxyXG4gICAgICBcclxuICAgICAge21heFNlbGVjdGVkICYmIChcclxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmhlbHBlclRleHR9PlxyXG4gICAgICAgICAge3NlbGVjdGVkVGFncy5sZW5ndGh9L3ttYXhTZWxlY3RlZH0g7ISg7YOd65CoXHJcbiAgICAgICAgPC9UZXh0PlxyXG4gICAgICApfVxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XHJcbiAgY29udGFpbmVyOiB7XHJcbiAgICBtYXJnaW5Cb3R0b206IDE2LFxyXG4gIH0sXHJcbiAgdGl0bGU6IHtcclxuICAgIGZvbnRTaXplOiAxNixcclxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxyXG4gICAgbWFyZ2luQm90dG9tOiA4LFxyXG4gICAgY29sb3I6ICcjMzMzMzMzJyxcclxuICB9LFxyXG4gIHRhZ1Njcm9sbDoge1xyXG4gICAgbWF4SGVpZ2h0OiAxMjAsXHJcbiAgfSxcclxuICB0YWdDb250YWluZXI6IHtcclxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxyXG4gICAgZmxleFdyYXA6ICd3cmFwJyxcclxuICB9LFxyXG4gIHRhZzoge1xyXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI0Y1RjVGNScsXHJcbiAgICBib3JkZXJSYWRpdXM6IDE2LFxyXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiA2LFxyXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxyXG4gICAgbWFyZ2luOiA0LFxyXG4gICAgYm9yZGVyV2lkdGg6IDEsXHJcbiAgICBib3JkZXJDb2xvcjogJyNFRUVFRUUnLFxyXG4gIH0sXHJcbiAgc2VsZWN0ZWRUYWc6IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyNFMUVGRjknLFxyXG4gICAgYm9yZGVyQ29sb3I6ICcjNEE5MEUyJyxcclxuICB9LFxyXG4gIGRpc2FibGVkVGFnOiB7XHJcbiAgICBvcGFjaXR5OiAwLjUsXHJcbiAgfSxcclxuICB0YWdUZXh0OiB7XHJcbiAgICBjb2xvcjogJyM2NjY2NjYnLFxyXG4gICAgZm9udFNpemU6IDE0LFxyXG4gIH0sXHJcbiAgc2VsZWN0ZWRUYWdUZXh0OiB7XHJcbiAgICBjb2xvcjogJyM0QTkwRTInLFxyXG4gICAgZm9udFdlaWdodDogJzUwMCcsXHJcbiAgfSxcclxuICBkaXNhYmxlZFRhZ1RleHQ6IHtcclxuICAgIGNvbG9yOiAnIzk5OTk5OScsXHJcbiAgfSxcclxuICBjcmVhdGVUYWdDb250YWluZXI6IHtcclxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxyXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICBtYXJnaW5Ub3A6IDEyLFxyXG4gIH0sXHJcbiAgaW5wdXQ6IHtcclxuICAgIGZsZXg6IDEsXHJcbiAgICBoZWlnaHQ6IDQwLFxyXG4gICAgYm9yZGVyV2lkdGg6IDEsXHJcbiAgICBib3JkZXJDb2xvcjogJyNEREREREQnLFxyXG4gICAgYm9yZGVyUmFkaXVzOiA0LFxyXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxyXG4gICAgbWFyZ2luUmlnaHQ6IDgsXHJcbiAgfSxcclxuICBjcmVhdGVCdXR0b246IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyM0QTkwRTInLFxyXG4gICAgcGFkZGluZ1ZlcnRpY2FsOiA4LFxyXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxyXG4gICAgYm9yZGVyUmFkaXVzOiA0LFxyXG4gIH0sXHJcbiAgZGlzYWJsZWRCdXR0b246IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyNDQ0NDQ0MnLFxyXG4gIH0sXHJcbiAgY3JlYXRlQnV0dG9uVGV4dDoge1xyXG4gICAgY29sb3I6ICcjRkZGRkZGJyxcclxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxyXG4gIH0sXHJcbiAgaGVscGVyVGV4dDoge1xyXG4gICAgZm9udFNpemU6IDEyLFxyXG4gICAgY29sb3I6ICcjOTk5OTk5JyxcclxuICAgIG1hcmdpblRvcDogOCxcclxuICB9LFxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhZ1NlbGVjdG9yOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQStGLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUFBLFNBQUFHLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBTCx3QkFBQUssQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVB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SGlDLGVBQWUsRUFBRSxTQUFTO0lBQzFCQyxZQUFZLEVBQUUsRUFBRTtJQUNoQkMsZUFBZSxFQUFFLENBQUM7SUFDbEJDLGlCQUFpQixFQUFFLEVBQUU7SUFDckJDLE1BQU0sRUFBRSxDQUFDO0lBQ1RDLFdBQVcsRUFBRSxDQUFDO0lBQ2RDLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRGpDLFdBQVcsRUFBRTtJQUNYMkIsZUFBZSxFQUFFLFNBQVM7SUFDMUJNLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDRGhDLFdBQVcsRUFBRTtJQUNYaUMsT0FBTyxFQUFFO0VBQ1gsQ0FBQztFQUNEL0IsT0FBTyxFQUFFO0lBQ1BvQixLQUFLLEVBQUUsU0FBUztJQUNoQkYsUUFBUSxFQUFFO0VBQ1osQ0FBQztFQUNEakIsZUFBZSxFQUFFO0lBQ2ZtQixLQUFLLEVBQUUsU0FBUztJQUNoQkQsVUFBVSxFQUFFO0VBQ2QsQ0FBQztFQUNEakIsZUFBZSxFQUFFO0lBQ2ZrQixLQUFLLEVBQUU7RUFDVCxDQUFDO0VBQ0RoQixrQkFBa0IsRUFBRTtJQUNsQmtCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCVSxVQUFVLEVBQUUsUUFBUTtJQUNwQkMsU0FBUyxFQUFFO0VBQ2IsQ0FBQztFQUNEM0IsS0FBSyxFQUFFO0lBQ0w0QixJQUFJLEVBQUUsQ0FBQztJQUNQQyxNQUFNLEVBQUUsRUFBRTtJQUNWTixXQUFXLEVBQUUsQ0FBQztJQUNkQyxXQUFXLEVBQUUsU0FBUztJQUN0QkwsWUFBWSxFQUFFLENBQUM7SUFDZkUsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQlMsV0FBVyxFQUFFO0VBQ2YsQ0FBQztFQUNEekIsWUFBWSxFQUFFO0lBQ1phLGVBQWUsRUFBRSxTQUFTO0lBQzFCRSxlQUFlLEVBQUUsQ0FBQztJQUNsQkMsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQkYsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFDRGIsY0FBYyxFQUFFO0lBQ2RZLGVBQWUsRUFBRTtFQUNuQixDQUFDO0VBQ0RYLGdCQUFnQixFQUFFO0lBQ2hCTyxLQUFLLEVBQUUsU0FBUztJQUNoQkQsVUFBVSxFQUFFO0VBQ2QsQ0FBQztFQUNETCxVQUFVLEVBQUU7SUFDVkksUUFBUSxFQUFFLEVBQUU7SUFDWkUsS0FBSyxFQUFFLFNBQVM7SUFDaEJhLFNBQVMsRUFBRTtFQUNiO0FBQ0YsQ0FBQyxDQUFDO0FBQUMsSUFBQUksUUFBQSxHQUFBQyxPQUFBLENBQUF0RyxPQUFBLEdBRVljLFdBQVciLCJpZ25vcmVMaXN0IjpbXX0=