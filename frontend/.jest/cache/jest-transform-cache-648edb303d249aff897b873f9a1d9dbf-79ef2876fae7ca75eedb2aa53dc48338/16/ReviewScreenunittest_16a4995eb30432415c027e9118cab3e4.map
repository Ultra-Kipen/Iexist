{"version":3,"names":["_getJestObj","mock","actual","jest","requireActual","Object","assign","useTheme","fn","colors","primary","background","_interopRequireDefault","require","_react","_reactNative","_ReviewScreen","_reactNativePaper","_jsxRuntime","_require","describe","it","expect","render","jsx","default","not","toThrow","_render","UNSAFE_getByProps","segmentedButtons","value","toBeTruthy","_render2","UNSAFE_getAllByType","buttons","SegmentedButtons","length","toBeGreaterThan","_render3","props","onValueChange","_render4","cards","Card","toBeGreaterThanOrEqual","_render5","consoleSpy","spyOn","console","Button","graphButton","find","button","children","includes","onPress","toHaveBeenCalledWith","mockRestore","_render6"],"sources":["ReviewScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/tests/unit/screens/ReviewScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport ReviewScreen from '../../../src/screens/ReviewScreen';\r\nimport { Button, Card, SegmentedButtons } from 'react-native-paper';\r\n\r\n// useTheme 모킹\r\njest.mock('react-native-paper', () => {\r\n  const actual = jest.requireActual('react-native-paper');\r\n  return {\r\n    ...actual,\r\n    useTheme: jest.fn(() => ({\r\n      colors: {\r\n        primary: '#000',\r\n        background: '#fff',\r\n      },\r\n    })),\r\n  };\r\n});\r\n\r\ndescribe('ReviewScreen 단위 테스트', () => {\r\n  it('컴포넌트가 렌더링 되어야 함', () => {\r\n    expect(() => render(<ReviewScreen />)).not.toThrow();\r\n  });\r\n  \r\n  it('useState 훅이 period 상태를 제대로 관리해야 함', () => {\r\n    const { UNSAFE_getByProps } = render(<ReviewScreen />);\r\n    \r\n    // 초기 상태값이 'weekly'인지 확인\r\n    const segmentedButtons = UNSAFE_getByProps({ value: 'weekly' });\r\n    expect(segmentedButtons).toBeTruthy();\r\n  });\r\n  \r\n  it('SegmentedButtons 컴포넌트가 존재해야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // SegmentedButtons 컴포넌트가 있는지 확인\r\n    const buttons = UNSAFE_getAllByType(SegmentedButtons);\r\n    expect(buttons.length).toBeGreaterThan(0);\r\n  });\r\n  \r\n  it('period 상태가 변경되면 UI가 업데이트되어야 함', () => {\r\n    const { UNSAFE_getByProps } = render(<ReviewScreen />);\r\n    \r\n    // 초기 상태값이 'weekly'인지 확인\r\n    let segmentedButtons = UNSAFE_getByProps({ value: 'weekly' });\r\n    expect(segmentedButtons).toBeTruthy();\r\n    \r\n    // onValueChange 함수를 호출하여 period 상태 변경\r\n    segmentedButtons.props.onValueChange('monthly');\r\n    \r\n    // 변경된 상태값이 'monthly'인지 확인\r\n    segmentedButtons = UNSAFE_getByProps({ value: 'monthly' });\r\n    expect(segmentedButtons).toBeTruthy();\r\n  });\r\n  \r\n  it('이미지 그리드에 카드가 렌더링되어야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // Card 컴포넌트 개수 확인 (정확한 숫자 대신 최소 개수 확인)\r\n    const cards = UNSAFE_getAllByType(Card);\r\n    expect(cards.length).toBeGreaterThanOrEqual(6);\r\n  });\r\n  \r\n  it('감정 변화 그래프 버튼이 존재하고 클릭 가능해야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    const consoleSpy = jest.spyOn(console, 'log');\r\n    \r\n    // Button 컴포넌트 찾기\r\n    const buttons = UNSAFE_getAllByType(Button);\r\n    const graphButton = buttons.find(button => \r\n      button.props.children && \r\n      typeof button.props.children === 'string' && \r\n      button.props.children.includes('감정 변화 그래프')\r\n    );\r\n    \r\n    expect(graphButton).toBeTruthy();\r\n    \r\n    // 버튼 클릭 시뮬레이션\r\n    graphButton?.props.onPress();\r\n    \r\n    // console.log가 호출되었는지 확인\r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n    \r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('통계 카드가 존재해야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // Card 컴포넌트 중에서 통계 카드 찾기 (더 단순한 접근법)\r\n    const cards = UNSAFE_getAllByType(Card);\r\n    // 적어도 하나의 카드는 통계 카드여야 함 - 마지막 카드가 통계 카드일 가능성이 높음\r\n    expect(cards.length).toBeGreaterThan(0);\r\n    // 여기서는 카드가 존재하는지만 확인하고, 내용은 검증하지 않음\r\n  });\r\n});"],"mappings":"AAOAA,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE,YAAM;EACpC,IAAMC,MAAM,GAAGC,IAAI,CAACC,aAAa,CAAC,oBAAoB,CAAC;EACvD,OAAAC,MAAA,CAAAC,MAAA,KACKJ,MAAM;IACTK,QAAQ,EAAEJ,IAAI,CAACK,EAAE,CAAC;MAAA,OAAO;QACvBC,MAAM,EAAE;UACNC,OAAO,EAAE,MAAM;UACfC,UAAU,EAAE;QACd;MACF,CAAC;IAAA,CAAC;EAAC;AAEP,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAjBH,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,iBAAA,GAAAJ,OAAA;AAAoE,IAAAK,WAAA,GAAAL,OAAA;AAAA,SAAAb,YAAA;EAAA,IAAAmB,QAAA,GAAAN,OAAA;IAAAV,IAAA,GAAAgB,QAAA,CAAAhB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAgBpEiB,QAAQ,CAAC,qBAAqB,EAAE,YAAM;EACpCC,EAAE,CAAC,iBAAiB,EAAE,YAAM;IAC1BC,MAAM,CAAC;MAAA,OAAM,IAAAC,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;IAAA,EAAC,CAACC,GAAG,CAACC,OAAO,CAAC,CAAC;EACtD,CAAC,CAAC;EAEFN,EAAE,CAAC,mCAAmC,EAAE,YAAM;IAC5C,IAAAO,OAAA,GAA8B,IAAAL,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;MAA9CI,iBAAiB,GAAAD,OAAA,CAAjBC,iBAAiB;IAGzB,IAAMC,gBAAgB,GAAGD,iBAAiB,CAAC;MAAEE,KAAK,EAAE;IAAS,CAAC,CAAC;IAC/DT,MAAM,CAACQ,gBAAgB,CAAC,CAACE,UAAU,CAAC,CAAC;EACvC,CAAC,CAAC;EAEFX,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAAY,QAAA,GAAgC,IAAAV,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;MAAhDS,mBAAmB,GAAAD,QAAA,CAAnBC,mBAAmB;IAG3B,IAAMC,OAAO,GAAGD,mBAAmB,CAACE,kCAAgB,CAAC;IACrDd,MAAM,CAACa,OAAO,CAACE,MAAM,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;EAC3C,CAAC,CAAC;EAEFjB,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAAkB,QAAA,GAA8B,IAAAhB,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;MAA9CI,iBAAiB,GAAAU,QAAA,CAAjBV,iBAAiB;IAGzB,IAAIC,gBAAgB,GAAGD,iBAAiB,CAAC;MAAEE,KAAK,EAAE;IAAS,CAAC,CAAC;IAC7DT,MAAM,CAACQ,gBAAgB,CAAC,CAACE,UAAU,CAAC,CAAC;IAGrCF,gBAAgB,CAACU,KAAK,CAACC,aAAa,CAAC,SAAS,CAAC;IAG/CX,gBAAgB,GAAGD,iBAAiB,CAAC;MAAEE,KAAK,EAAE;IAAU,CAAC,CAAC;IAC1DT,MAAM,CAACQ,gBAAgB,CAAC,CAACE,UAAU,CAAC,CAAC;EACvC,CAAC,CAAC;EAEFX,EAAE,CAAC,uBAAuB,EAAE,YAAM;IAChC,IAAAqB,QAAA,GAAgC,IAAAnB,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;MAAhDS,mBAAmB,GAAAQ,QAAA,CAAnBR,mBAAmB;IAG3B,IAAMS,KAAK,GAAGT,mBAAmB,CAACU,sBAAI,CAAC;IACvCtB,MAAM,CAACqB,KAAK,CAACN,MAAM,CAAC,CAACQ,sBAAsB,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;EAEFxB,EAAE,CAAC,8BAA8B,EAAE,YAAM;IACvC,IAAAyB,QAAA,GAAgC,IAAAvB,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;MAAhDS,mBAAmB,GAAAY,QAAA,CAAnBZ,mBAAmB;IAC3B,IAAMa,UAAU,GAAG5C,IAAI,CAAC6C,KAAK,CAACC,OAAO,EAAE,KAAK,CAAC;IAG7C,IAAMd,OAAO,GAAGD,mBAAmB,CAACgB,wBAAM,CAAC;IAC3C,IAAMC,WAAW,GAAGhB,OAAO,CAACiB,IAAI,CAAC,UAAAC,MAAM;MAAA,OACrCA,MAAM,CAACb,KAAK,CAACc,QAAQ,IACrB,OAAOD,MAAM,CAACb,KAAK,CAACc,QAAQ,KAAK,QAAQ,IACzCD,MAAM,CAACb,KAAK,CAACc,QAAQ,CAACC,QAAQ,CAAC,WAAW,CAAC;IAAA,CAC7C,CAAC;IAEDjC,MAAM,CAAC6B,WAAW,CAAC,CAACnB,UAAU,CAAC,CAAC;IAGhCmB,WAAW,YAAXA,WAAW,CAAEX,KAAK,CAACgB,OAAO,CAAC,CAAC;IAG5BlC,MAAM,CAACyB,UAAU,CAAC,CAACU,oBAAoB,CAAC,oBAAoB,CAAC;IAE7DV,UAAU,CAACW,WAAW,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEFrC,EAAE,CAAC,eAAe,EAAE,YAAM;IACxB,IAAAsC,QAAA,GAAgC,IAAApC,mBAAM,EAAC,IAAAL,WAAA,CAAAM,GAAA,EAACR,aAAA,CAAAS,OAAY,IAAE,CAAC,CAAC;MAAhDS,mBAAmB,GAAAyB,QAAA,CAAnBzB,mBAAmB;IAG3B,IAAMS,KAAK,GAAGT,mBAAmB,CAACU,sBAAI,CAAC;IAEvCtB,MAAM,CAACqB,KAAK,CAACN,MAAM,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;EAEzC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}