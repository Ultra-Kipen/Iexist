6e696ab0bc3b9250fd31f593bd306a13
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var i18n = {
  currentLocale: 'ko',
  translations: {
    ko: {
      greeting: '안녕하세요',
      welcome: '환영합니다',
      submit: '제출',
      cancel: '취소',
      date_format: 'YYYY년 MM월 DD일'
    },
    en: {
      greeting: 'Hello',
      welcome: 'Welcome',
      submit: 'Submit',
      cancel: 'Cancel',
      date_format: 'MM/DD/YYYY'
    }
  },
  t: function t(key) {
    var locale = this.currentLocale;
    var translations = this.translations[locale] || {};
    return translations[key] || key;
  },
  setLocale: function setLocale(locale) {
    if (this.translations[locale]) {
      this.currentLocale = locale;
    }
  }
};
var LocalizedComponent = function LocalizedComponent() {
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "greeting",
      children: i18n.t('greeting')
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "welcome",
      children: i18n.t('welcome')
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: i18n.t('submit'),
      onPress: function onPress() {},
      testID: "submit-button"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: i18n.t('cancel'),
      onPress: function onPress() {},
      testID: "cancel-button"
    })]
  });
};
var DateFormatComponent = function DateFormatComponent(_ref) {
  var date = _ref.date;
  var formatDate = function formatDate(date, format) {
    var year = date.getFullYear();
    var month = (date.getMonth() + 1).toString().padStart(2, '0');
    var day = date.getDate().toString().padStart(2, '0');
    if (format === 'YYYY년 MM월 DD일') {
      return `${year}년 ${month}월 ${day}일`;
    } else {
      return `${month}/${day}/${year}`;
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "formatted-date",
    children: formatDate(date, i18n.t('date_format'))
  });
};
describe('로컬라이제이션 테스트', function () {
  test('기본 언어(한국어)로 텍스트가 표시되어야 함', function () {
    i18n.setLocale('ko');
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(LocalizedComponent, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('greeting').props.children).toBe('안녕하세요');
    expect(getByTestId('welcome').props.children).toBe('환영합니다');
    expect(getByTestId('submit-button').props.title).toBe('제출');
    expect(getByTestId('cancel-button').props.title).toBe('취소');
  });
  test('영어로 언어 변경 시 텍스트가 영어로 표시되어야 함', function () {
    i18n.setLocale('en');
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(LocalizedComponent, {})),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('greeting').props.children).toBe('Hello');
    expect(getByTestId('welcome').props.children).toBe('Welcome');
    expect(getByTestId('submit-button').props.title).toBe('Submit');
    expect(getByTestId('cancel-button').props.title).toBe('Cancel');
  });
  test('날짜 형식이 현재 언어에 맞게 표시되어야 함', function () {
    var testDate = new Date(2023, 0, 15);
    i18n.setLocale('ko');
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(DateFormatComponent, {
        date: testDate
      })),
      getByTestId = _render3.getByTestId,
      rerender = _render3.rerender;
    expect(getByTestId('formatted-date').props.children).toBe('2023년 01월 15일');
    i18n.setLocale('en');
    rerender((0, _jsxRuntime.jsx)(DateFormatComponent, {
      date: testDate
    }));
    expect(getByTestId('formatted-date').props.children).toBe('01/15/2023');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,