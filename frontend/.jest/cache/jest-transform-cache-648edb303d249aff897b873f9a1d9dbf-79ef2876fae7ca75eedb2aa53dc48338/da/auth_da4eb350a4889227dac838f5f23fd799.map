{"version":3,"names":["_index","require","_storage","login","exports","_ref","_asyncToGenerator2","default","dispatch","email","password","type","ActionType","SET_LOADING","payload","CLEAR_ERROR","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","setAuthToken","token","setUserData","user","SET_AUTHENTICATED","SET_USER","error","errorMessage","message","SET_ERROR","_x","_x2","_x3","apply","arguments","logout","_ref2","removeAuthToken","RESET_STATE","_x4","register","_ref3","userData","_x5","_x6","getCurrentUser","_ref4","_x7"],"sources":["auth.ts"],"sourcesContent":["import { Dispatch } from 'react';\r\nimport { Action, ActionType } from './index';\r\nimport { setAuthToken, setUserData, removeAuthToken } from '../utils/storage';\r\nimport { handleApiError } from '../utils/error';\r\n\r\n// 로그인 함수\r\nexport const login = async (\r\n  dispatch: Dispatch<Action>,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    dispatch({ type: ActionType.CLEAR_ERROR });\r\n\r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch('/api/auth/login', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('로그인에 실패했습니다.');\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // 토큰과 사용자 데이터 저장\r\n    await setAuthToken(data.token);\r\n    await setUserData(data.user);\r\n    \r\n    // 상태 업데이트\r\n    dispatch({ type: ActionType.SET_AUTHENTICATED, payload: true });\r\n    dispatch({ type: ActionType.SET_USER, payload: data.user });\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : '로그인에 실패했습니다.';\r\n    dispatch({ type: ActionType.SET_ERROR, payload: errorMessage });\r\n    throw error;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};\r\n\r\n// 로그아웃 함수\r\nexport const logout = async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    \r\n    // 토큰 제거\r\n    await removeAuthToken();\r\n    \r\n    // 상태 초기화\r\n    dispatch({ type: ActionType.RESET_STATE });\r\n    \r\n  } catch (error) {\r\n    dispatch({\r\n      type: ActionType.SET_ERROR,\r\n      payload: '로그아웃 중 오류가 발생했습니다.',\r\n    });\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};\r\n\r\n// 회원가입 함수\r\nexport const register = async (\r\n  dispatch: Dispatch<Action>,\r\n  userData: {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    nickname?: string;\r\n  }\r\n) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    dispatch({ type: ActionType.CLEAR_ERROR });\r\n    \r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch('/api/auth/register', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('회원가입에 실패했습니다.');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // 자동 로그인이 필요하면 아래 코드 활성화\r\n     await setAuthToken(data.token);\r\n     await setUserData(data.user);\r\n     dispatch({ type: ActionType.SET_AUTHENTICATED, payload: true });\r\n    dispatch({ type: ActionType.SET_USER, payload: data.user });\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : '회원가입에 실패했습니다.';\r\n    dispatch({ type: ActionType.SET_ERROR, payload: errorMessage });\r\n    throw error;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};\r\n\r\n// 사용자 정보 가져오기\r\nexport const getCurrentUser = async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    \r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch('/api/users/me', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 토큰 추가\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('사용자 정보를 가져오는데 실패했습니다.');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // 상태 업데이트\r\n    dispatch({ type: ActionType.SET_USER, payload: data });\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    const errorMessage = error instanceof Error ? error.message : '사용자 정보를 가져오는데 실패했습니다.';\r\n    dispatch({ type: ActionType.SET_ERROR, payload: errorMessage });\r\n    throw error;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]}