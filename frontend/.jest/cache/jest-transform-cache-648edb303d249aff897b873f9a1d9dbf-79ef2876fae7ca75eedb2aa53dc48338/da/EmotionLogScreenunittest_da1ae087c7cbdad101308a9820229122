2b1fc3a10ad7d057da10a5f95187fde1
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: function Text(_ref) {
      var children = _ref.children,
        style = _ref.style;
      return {
        type: 'Text',
        props: {
          children: children,
          style: style
        }
      };
    },
    Chip: function Chip(_ref2) {
      var children = _ref2.children,
        selected = _ref2.selected,
        onPress = _ref2.onPress,
        style = _ref2.style,
        textStyle = _ref2.textStyle,
        testID = _ref2.testID;
      return {
        type: 'Chip',
        props: {
          children: children,
          selected: selected,
          onPress: onPress,
          style: style,
          textStyle: textStyle,
          testID: testID
        }
      };
    },
    Button: function Button(_ref3) {
      var children = _ref3.children,
        mode = _ref3.mode,
        onPress = _ref3.onPress,
        style = _ref3.style,
        disabled = _ref3.disabled,
        testID = _ref3.testID;
      return {
        type: 'Button',
        props: {
          children: children,
          mode: mode,
          onPress: onPress,
          style: style,
          disabled: disabled,
          testID: testID
        }
      };
    },
    TextInput: function TextInput(_ref4) {
      var label = _ref4.label,
        value = _ref4.value,
        onChangeText = _ref4.onChangeText,
        mode = _ref4.mode,
        multiline = _ref4.multiline,
        numberOfLines = _ref4.numberOfLines,
        style = _ref4.style,
        testID = _ref4.testID;
      return {
        type: 'TextInput',
        props: {
          label: label,
          value: value,
          onChangeText: onChangeText,
          mode: mode,
          multiline: multiline,
          numberOfLines: numberOfLines,
          style: style,
          testID: testID
        }
      };
    },
    ActivityIndicator: function ActivityIndicator(_ref5) {
      var size = _ref5.size;
      return {
        type: 'ActivityIndicator',
        props: {
          size: size
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  var mockEmotions = [{
    emotion_id: 1,
    name: '행복',
    icon: 'happy-icon',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '슬픔',
    icon: 'sad-icon',
    color: '#4682B4'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
  });
  it('renders emotion chips correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('행복')).toBeTruthy();
      expect(getByText('슬픔')).toBeTruthy();
    });
  }));
  it('allows selecting and deselecting emotions', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var happyChip = getByText('행복');
      _reactNative.fireEvent.press(happyChip);
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }));
  it('shows error when no emotion is selected', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
    });
  }));
  it('submits emotions successfully', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockResolvedValue({
      data: {
        status: 'success'
      }
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var happyChip = getByText('행복');
      _reactNative.fireEvent.press(happyChip);
      var noteInput = getByTestId('emotion-note-input');
      _reactNative.fireEvent.changeText(noteInput, '오늘은 매우 행복한 날');
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: '오늘은 매우 행복한 날'
      });
    });
  }));
  it('handles emotion submission error', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValue({
      response: {
        data: {
          message: '감정 기록 중 오류가 발생했습니다.'
        }
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render5.getByText,
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var happyChip = getByText('행복');
      _reactNative.fireEvent.press(happyChip);
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(require('react-native/Libraries/Alert/Alert').alert).toHaveBeenCalledWith('오류', '감정 기록 중 오류가 발생했습니다.');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJUZXh0IiwiX3JlZiIsImNoaWxkcmVuIiwic3R5bGUiLCJ0eXBlIiwicHJvcHMiLCJDaGlwIiwiX3JlZjIiLCJzZWxlY3RlZCIsIm9uUHJlc3MiLCJ0ZXh0U3R5bGUiLCJ0ZXN0SUQiLCJCdXR0b24iLCJfcmVmMyIsIm1vZGUiLCJkaXNhYmxlZCIsIlRleHRJbnB1dCIsIl9yZWY0IiwibGFiZWwiLCJ2YWx1ZSIsIm9uQ2hhbmdlVGV4dCIsIm11bHRpbGluZSIsIm51bWJlck9mTGluZXMiLCJBY3Rpdml0eUluZGljYXRvciIsIl9yZWY1Iiwic2l6ZSIsImFsZXJ0IiwiamVzdCIsImZuIiwiZ2V0QWxsRW1vdGlvbnMiLCJyZWNvcmRFbW90aW9ucyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0Vtb3Rpb25Mb2dTY3JlZW4iLCJfZW1vdGlvblNlcnZpY2UiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJtb2NrTmF2aWdhdGlvbiIsImdvQmFjayIsIm1vY2tFbW90aW9ucyIsImVtb3Rpb25faWQiLCJuYW1lIiwiaWNvbiIsImNvbG9yIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJlbW90aW9uU2VydmljZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsInN0YXR1cyIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJuYXZpZ2F0aW9uIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsImdldEJ5VGVzdElkIiwiaGFwcHlDaGlwIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJzdWJtaXRCdXR0b24iLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJ0b0JlRmFsc3kiLCJfcmVuZGVyMyIsIl9yZW5kZXI0Iiwibm90ZUlucHV0IiwiY2hhbmdlVGV4dCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiZW1vdGlvbl9pZHMiLCJub3RlIiwibW9ja1JlamVjdGVkVmFsdWUiLCJyZXNwb25zZSIsIm1lc3NhZ2UiLCJfcmVuZGVyNSJdLCJzb3VyY2VzIjpbIkVtb3Rpb25Mb2dTY3JlZW4udW5pdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFbW90aW9uTG9nU2NyZWVuLnVuaXQudGVzdC50c3hcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBFbW90aW9uTG9nU2NyZWVuIGZyb20gJy4uLy4uLy4uL3NyYy9zY3JlZW5zL0Vtb3Rpb25Mb2dTY3JlZW4nO1xyXG5pbXBvcnQgZW1vdGlvblNlcnZpY2UgZnJvbSAnLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9lbW90aW9uU2VydmljZSc7XHJcblxyXG4vLyByZWFjdC1uYXRpdmUtcGFwZXIg66qo7YK5IOy2lOqwgFxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+ICh7XHJcbiAgVGV4dDogKHsgY2hpbGRyZW4sIHN0eWxlIH0pID0+ICh7IHR5cGU6ICdUZXh0JywgcHJvcHM6IHsgY2hpbGRyZW4sIHN0eWxlIH0gfSksXHJcbiAgQ2hpcDogKHsgY2hpbGRyZW4sIHNlbGVjdGVkLCBvblByZXNzLCBzdHlsZSwgdGV4dFN0eWxlLCB0ZXN0SUQgfSkgPT4gXHJcbiAgICAoeyB0eXBlOiAnQ2hpcCcsIHByb3BzOiB7IGNoaWxkcmVuLCBzZWxlY3RlZCwgb25QcmVzcywgc3R5bGUsIHRleHRTdHlsZSwgdGVzdElEIH0gfSksXHJcbiAgQnV0dG9uOiAoeyBjaGlsZHJlbiwgbW9kZSwgb25QcmVzcywgc3R5bGUsIGRpc2FibGVkLCB0ZXN0SUQgfSkgPT4gXHJcbiAgICAoeyB0eXBlOiAnQnV0dG9uJywgcHJvcHM6IHsgY2hpbGRyZW4sIG1vZGUsIG9uUHJlc3MsIHN0eWxlLCBkaXNhYmxlZCwgdGVzdElEIH0gfSksXHJcbiAgVGV4dElucHV0OiAoeyBsYWJlbCwgdmFsdWUsIG9uQ2hhbmdlVGV4dCwgbW9kZSwgbXVsdGlsaW5lLCBudW1iZXJPZkxpbmVzLCBzdHlsZSwgdGVzdElEIH0pID0+IFxyXG4gICAgKHsgdHlwZTogJ1RleHRJbnB1dCcsIHByb3BzOiB7IGxhYmVsLCB2YWx1ZSwgb25DaGFuZ2VUZXh0LCBtb2RlLCBtdWx0aWxpbmUsIG51bWJlck9mTGluZXMsIHN0eWxlLCB0ZXN0SUQgfSB9KSxcclxuICBBY3Rpdml0eUluZGljYXRvcjogKHsgc2l6ZSB9KSA9PiAoeyB0eXBlOiAnQWN0aXZpdHlJbmRpY2F0b3InLCBwcm9wczogeyBzaXplIH0gfSlcclxufSkpO1xyXG5cclxuLy8gTWF0ZXJpYWxDb21tdW5pdHlJY29ucyDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL01hdGVyaWFsQ29tbXVuaXR5SWNvbnMnLCAoKSA9PiAnTWF0ZXJpYWxDb21tdW5pdHlJY29ucycpO1xyXG5cclxuLy8gQWxlcnQg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbGVydC9BbGVydCcsICgpID0+ICh7XHJcbiAgYWxlcnQ6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8gZW1vdGlvblNlcnZpY2Ug66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9lbW90aW9uU2VydmljZScsICgpID0+ICh7XHJcbiAgZ2V0QWxsRW1vdGlvbnM6IGplc3QuZm4oKSxcclxuICByZWNvcmRFbW90aW9uczogamVzdC5mbigpLFxyXG59KSk7XHJcbmRlc2NyaWJlKCdFbW90aW9uTG9nU2NyZWVuJywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tOYXZpZ2F0aW9uID0ge1xyXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbW9ja0Vtb3Rpb25zID0gW1xyXG4gICAgeyBcclxuICAgICAgZW1vdGlvbl9pZDogMSwgXHJcbiAgICAgIG5hbWU6ICftlonrs7UnLCBcclxuICAgICAgaWNvbjogJ2hhcHB5LWljb24nLCBcclxuICAgICAgY29sb3I6ICcjRkZENzAwJyBcclxuICAgIH0sXHJcbiAgICB7IFxyXG4gICAgICBlbW90aW9uX2lkOiAyLCBcclxuICAgICAgbmFtZTogJ+yKrO2UlCcsIFxyXG4gICAgICBpY29uOiAnc2FkLWljb24nLCBcclxuICAgICAgY29sb3I6ICcjNDY4MkI0JyBcclxuICAgIH1cclxuICBdO1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgXHJcbiAgICAvLyDrqqjrk6Ag7YWM7Iqk7Yq47JeQIOuMgO2VnCDquLDrs7gg66qo7YK5IOyEpOyglVxyXG4gICAgKGVtb3Rpb25TZXJ2aWNlLmdldEFsbEVtb3Rpb25zIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7IFxyXG4gICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLCBcclxuICAgICAgICBkYXRhOiBtb2NrRW1vdGlvbnMgXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncmVuZGVycyBlbW90aW9uIGNoaXBzIGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPlxyXG4gICAgKTtcclxuXHJcbiAgICAvLyDqsJDsoJUg642w7J207YSwIOuhnOuUqSDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCftlonrs7UnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCfsiqztlJQnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdhbGxvd3Mgc2VsZWN0aW5nIGFuZCBkZXNlbGVjdGluZyBlbW90aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz5cclxuICAgICk7XHJcblxyXG4gICAgLy8g6rCQ7KCVIOuNsOydtO2EsCDroZzrlKkg64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgY29uc3QgaGFwcHlDaGlwID0gZ2V0QnlUZXh0KCftlonrs7UnKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOqwkOyglSDshKDtg51cclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGhhcHB5Q2hpcCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyDsoJzstpwg67KE7Yq8IO2ZleyduFxyXG4gICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICAgIGV4cGVjdChzdWJtaXRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlRmFsc3koKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvd3MgZXJyb3Igd2hlbiBubyBlbW90aW9uIGlzIHNlbGVjdGVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz5cclxuICAgICk7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgICAgXHJcbiAgICAgIC8vIOygnOy2nCDrsoTtirwg67mE7Zmc7ISx7ZmUIO2ZleyduFxyXG4gICAgICBleHBlY3Qoc3VibWl0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzdWJtaXRzIGVtb3Rpb25zIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIHJlY29yZEVtb3Rpb25zIOyEseqztSDrqqjtgrlcclxuICAgIChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgZGF0YTogeyBzdGF0dXM6ICdzdWNjZXNzJyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+XHJcbiAgICApO1xyXG5cclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICAgIGNvbnN0IGhhcHB5Q2hpcCA9IGdldEJ5VGV4dCgn7ZaJ67O1Jyk7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhoYXBweUNoaXApO1xyXG5cclxuICAgICAgLy8g66mU66qoIOyeheugpVxyXG4gICAgICBjb25zdCBub3RlSW5wdXQgPSBnZXRCeVRlc3RJZCgnZW1vdGlvbi1ub3RlLWlucHV0Jyk7XHJcbiAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KG5vdGVJbnB1dCwgJ+yYpOuKmOydgCDrp6TsmrAg7ZaJ67O17ZWcIOuCoCcpO1xyXG5cclxuICAgICAgLy8g7KCc7LacIOuyhO2KvCDtgbTrpq1cclxuICAgICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOygnOy2nCDtm4Qg6rKA7KadXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KGVtb3Rpb25TZXJ2aWNlLnJlY29yZEVtb3Rpb25zKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XHJcbiAgICAgICAgZW1vdGlvbl9pZHM6IFsxXSxcclxuICAgICAgICBub3RlOiAn7Jik64qY7J2AIOunpOyasCDtlonrs7XtlZwg64KgJ1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnaGFuZGxlcyBlbW90aW9uIHN1Ym1pc3Npb24gZXJyb3InLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyByZWNvcmRFbW90aW9ucyDsi6TtjKgg66qo7YK5XHJcbiAgICAoZW1vdGlvblNlcnZpY2UucmVjb3JkRW1vdGlvbnMgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZSh7XHJcbiAgICAgIHJlc3BvbnNlOiB7XHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgbWVzc2FnZTogJ+qwkOyglSDquLDroZ0g7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPlxyXG4gICAgKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgLy8g6rCQ7KCVIOyEoO2DnVxyXG4gICAgICBjb25zdCBoYXBweUNoaXAgPSBnZXRCeVRleHQoJ+2WieuztScpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoaGFwcHlDaGlwKTtcclxuXHJcbiAgICAgIC8vIOygnOy2nCDrsoTtirwg7YG066atXHJcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKHN1Ym1pdEJ1dHRvbik7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDsmKTrpZgg7Ja865+/IO2YuOy2nCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QocmVxdWlyZSgncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbGVydC9BbGVydCcpLmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgICAn7Jik66WYJyxcclxuICAgICAgICAn6rCQ7KCVIOq4sOuhnSDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7RUFBQSxPQUFPO0lBQ3JDQyxJQUFJLEVBQUUsU0FBTkEsSUFBSUEsQ0FBQUMsSUFBQTtNQUFBLElBQUtDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO1FBQUVDLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO01BQUEsT0FBUTtRQUFFQyxJQUFJLEVBQUUsTUFBTTtRQUFFQyxLQUFLLEVBQUU7VUFBRUgsUUFBUSxFQUFSQSxRQUFRO1VBQUVDLEtBQUssRUFBTEE7UUFBTTtNQUFFLENBQUM7SUFBQSxDQUFDO0lBQzdFRyxJQUFJLEVBQUUsU0FBTkEsSUFBSUEsQ0FBQUMsS0FBQTtNQUFBLElBQUtMLFFBQVEsR0FBQUssS0FBQSxDQUFSTCxRQUFRO1FBQUVNLFFBQVEsR0FBQUQsS0FBQSxDQUFSQyxRQUFRO1FBQUVDLE9BQU8sR0FBQUYsS0FBQSxDQUFQRSxPQUFPO1FBQUVOLEtB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