{"version":3,"names":["_fs","_interopRequireDefault","require","_path","describe","authStackSource","beforeAll","authStackPath","path","resolve","__dirname","fs","readFileSync","it","expect","toContain"],"sources":["AuthStack.test.tsx"],"sourcesContent":["// __tests__/navigation/AuthStack.test.tsx\r\nimport React from 'react';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\ndescribe('AuthStack 소스 코드 검증', () => {\r\n  let authStackSource;\r\n  \r\n  beforeAll(() => {\r\n    // AuthStack.tsx 파일 읽기\r\n    const authStackPath = path.resolve(__dirname, '../../src/navigation/AuthStack.tsx');\r\n    authStackSource = fs.readFileSync(authStackPath, 'utf8');\r\n  });\r\n  \r\n  it('AuthStack이 필요한 컴포넌트를 import해야 함', () => {\r\n    expect(authStackSource).toContain('import React from');\r\n    expect(authStackSource).toContain('import { createNativeStackNavigator }');\r\n    expect(authStackSource).toContain('import LoginScreen from');\r\n    expect(authStackSource).toContain('import RegisterScreen from');\r\n    expect(authStackSource).toContain('import ApiTestScreen from'); // 테스트용 화면 확인\r\n  });\r\n  \r\n  it('AuthStack이 네비게이션 타입을 정의해야 함', () => {\r\n    expect(authStackSource).toContain('type AuthStackParamList');\r\n    expect(authStackSource).toContain('Login: undefined');\r\n    expect(authStackSource).toContain('Register: undefined');\r\n    expect(authStackSource).toContain('ApiTest: undefined'); // 테스트용 화면 타입 확인\r\n  });\r\n  \r\n  it('AuthStack이 Navigator를 생성해야 함', () => {\r\n    expect(authStackSource).toContain('const Stack = createNativeStackNavigator');\r\n  });\r\n  \r\n  it('AuthStack이 올바른 화면을 포함해야 함', () => {\r\n    // screenOptions가 포함된 Navigator 확인\r\n    expect(authStackSource).toContain('<Stack.Navigator');\r\n    expect(authStackSource).toContain('screenOptions={{');\r\n    expect(authStackSource).toContain('headerShown: false');\r\n    \r\n    // 화면 구성 확인\r\n    expect(authStackSource).toContain('<Stack.Screen name=\"Login\" component={LoginScreen}');\r\n    expect(authStackSource).toContain('<Stack.Screen name=\"Register\" component={RegisterScreen}');\r\n    expect(authStackSource).toContain('<Stack.Screen name=\"ApiTest\" component={ApiTestScreen}');\r\n  });\r\n  \r\n  it('AuthStack이 올바르게 export되어야 함', () => {\r\n    expect(authStackSource).toContain('export default AuthStack');\r\n  });\r\n  \r\n  it('Navigator에 헤더 숨김 옵션이 있어야 함', () => {\r\n    expect(authStackSource).toContain('headerShown: false');\r\n  });\r\n});"],"mappings":";AAEA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEAE,QAAQ,CAAC,oBAAoB,EAAE,YAAM;EACnC,IAAIC,eAAe;EAEnBC,SAAS,CAAC,YAAM;IAEd,IAAMC,aAAa,GAAGC,aAAI,CAACC,OAAO,CAACC,SAAS,EAAE,oCAAoC,CAAC;IACnFL,eAAe,GAAGM,WAAE,CAACC,YAAY,CAACL,aAAa,EAAE,MAAM,CAAC;EAC1D,CAAC,CAAC;EAEFM,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC1CC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,mBAAmB,CAAC;IACtDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,uCAAuC,CAAC;IAC1ED,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,yBAAyB,CAAC;IAC5DD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,4BAA4B,CAAC;IAC/DD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,2BAA2B,CAAC;EAChE,CAAC,CAAC;EAEFF,EAAE,CAAC,6BAA6B,EAAE,YAAM;IACtCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,yBAAyB,CAAC;IAC5DD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,kBAAkB,CAAC;IACrDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,qBAAqB,CAAC;IACxDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,oBAAoB,CAAC;EACzD,CAAC,CAAC;EAEFF,EAAE,CAAC,8BAA8B,EAAE,YAAM;IACvCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,0CAA0C,CAAC;EAC/E,CAAC,CAAC;EAEFF,EAAE,CAAC,2BAA2B,EAAE,YAAM;IAEpCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,kBAAkB,CAAC;IACrDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,kBAAkB,CAAC;IACrDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,oBAAoB,CAAC;IAGvDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,oDAAoD,CAAC;IACvFD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,0DAA0D,CAAC;IAC7FD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,wDAAwD,CAAC;EAC7F,CAAC,CAAC;EAEFF,EAAE,CAAC,6BAA6B,EAAE,YAAM;IACtCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,0BAA0B,CAAC;EAC/D,CAAC,CAAC;EAEFF,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACrCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,oBAAoB,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}