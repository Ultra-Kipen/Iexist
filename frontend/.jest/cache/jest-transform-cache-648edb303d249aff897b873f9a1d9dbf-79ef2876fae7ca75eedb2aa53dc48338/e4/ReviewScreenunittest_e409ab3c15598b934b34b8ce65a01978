c8e5dd778e7b2b29b7e6bd50194e554b
_getJestObj().mock('react-native-paper', function () {
  return {
    SegmentedButtons: function SegmentedButtons() {
      return null;
    },
    Card: function Card() {
      return null;
    },
    Button: function Button() {
      return null;
    },
    Title: function Title() {
      return null;
    },
    Paragraph: function Paragraph() {
      return null;
    },
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-paper/lib/commonjs/components/Card/Card', function () {
  return {
    __esModule: true,
    default: function _default() {
      return null;
    },
    Cover: function Cover() {
      return null;
    },
    Content: function Content() {
      return null;
    }
  };
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  rn.Image = function () {
    return null;
  };
  return rn;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 단위 테스트', function () {
  it('컴포넌트가 정의되어 있어야 함', function () {
    expect(_ReviewScreen.default).toBeDefined();
  });
  it('컴포넌트가 함수여야 함', function () {
    expect(typeof _ReviewScreen.default).toBe('function');
  });
  it('오류 없이 렌더링되어야 함', function () {
    expect(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJTZWdtZW50ZWRCdXR0b25zIiwiQ2FyZCIsIkJ1dHRvbiIsIlRpdGxlIiwiUGFyYWdyYXBoIiwidXNlVGhlbWUiLCJjb2xvcnMiLCJwcmltYXJ5IiwiYmFja2dyb3VuZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiQ292ZXIiLCJDb250ZW50Iiwicm4iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIkltYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfUmV2aWV3U2NyZWVuIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJSZXZpZXdTY3JlZW4iLCJ0b0JlRGVmaW5lZCIsInRvQmUiLCJyZW5kZXIiLCJqc3giLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiUmV2aWV3U2NyZWVuLnVuaXQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcm9vdC9mcm9udGVuZC90ZXN0cy91bml0L3NjcmVlbnMvUmV2aWV3U2NyZWVuLnVuaXQudGVzdC50c3hcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgUmV2aWV3U2NyZWVuIGZyb20gJy4uLy4uLy4uL3NyYy9zY3JlZW5zL1Jldmlld1NjcmVlbic7XHJcblxyXG4vLyByZWFjdC1uYXRpdmUtcGFwZXIg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXBhcGVyJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBTZWdtZW50ZWRCdXR0b25zOiAoKSA9PiBudWxsLFxyXG4gICAgQ2FyZDogKCkgPT4gbnVsbCxcclxuICAgIEJ1dHRvbjogKCkgPT4gbnVsbCxcclxuICAgIFRpdGxlOiAoKSA9PiBudWxsLFxyXG4gICAgUGFyYWdyYXBoOiAoKSA9PiBudWxsLFxyXG4gICAgdXNlVGhlbWU6ICgpID0+ICh7XHJcbiAgICAgIGNvbG9yczoge1xyXG4gICAgICAgIHByaW1hcnk6ICcjMDAwJyxcclxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyDsubTrk5wg7ZWY7JyEIOy7tO2PrOuEjO2KuCDrqqjtgrkg7LaU6rCAXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXBhcGVyL2xpYi9jb21tb25qcy9jb21wb25lbnRzL0NhcmQvQ2FyZCcsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgX19lc01vZHVsZTogdHJ1ZSxcclxuICAgIGRlZmF1bHQ6ICgpID0+IG51bGwsXHJcbiAgICBDb3ZlcjogKCkgPT4gbnVsbCxcclxuICAgIENvbnRlbnQ6ICgpID0+IG51bGwsXHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyDsnbTrr7jsp4Ag66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xyXG4gIGNvbnN0IHJuID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcclxuICBybi5JbWFnZSA9ICgpID0+IG51bGw7XHJcbiAgcmV0dXJuIHJuO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdSZXZpZXdTY3JlZW4g64uo7JyEIO2FjOyKpO2KuCcsICgpID0+IHtcclxuICBpdCgn7Lu07Y+s64SM7Yq46rCAIOygleydmOuQmOyWtCDsnojslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KFJldmlld1NjcmVlbikudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+y7tO2PrOuEjO2KuOqwgCDtlajsiJjsl6zslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHR5cGVvZiBSZXZpZXdTY3JlZW4pLnRvQmUoJ2Z1bmN0aW9uJyk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfsmKTrpZgg7JeG7J20IOugjOuNlOungeuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoKCkgPT4ge1xyXG4gICAgICByZW5kZXIoPFJldmlld1NjcmVlbiAvPik7XHJcbiAgICB9KS5ub3QudG9UaHJvdygpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ3BDLE9BQU87SUFDTEMsZ0JBQWdCLEVBQUUsU0FBbEJBLGdCQUFnQkEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0lBQzVCQyxJQUFJLEVBQUUsU0FBTkEsSUFBSUEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0lBQ2hCQyxNQUFNLEVBQUUsU0FBUkEsTUFBTUEsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0lBQ2xCQyxLQUFLLEVBQUUsU0FBUEEsS0FBS0EsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0lBQ2pCQyxTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBQTtNQUFBLE9BQVEsSUFBSTtJQUFBO0lBQ3JCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFDZkMsTUFBTSxFQUFFO1VBQ05DLE9BQU8sRUFBRSxNQUFNO1VBQ2ZDLFVBQVUsRUFBRTtRQUNkO01BQ0YsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUdGVixXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsRUFBRSxZQUFNO0VBQ3RFLE9BQU87SUFDTFUsVUFBVSxFQUFFLElBQUk7SUFDaEJDLE9BQU8sRUFBRSxTQUFUQSxRQUFPQSxDQUFBO01BQUEsT0FBUSxJQUFJO0lBQUE7SUFDbkJDLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFBO01BQUEsT0FBUSxJQUFJO0lBQUE7SUFDakJDLE9BQU8sRUFBRSxTQUFUQSxPQUFPQSxDQUFBO01BQUEsT0FBUSxJQUFJO0lBQUE7RUFDckIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUdGZCxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNYyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUM3Q0YsRUFBRSxDQUFDRyxLQUFLLEdBQUc7SUFBQSxPQUFNLElBQUk7RUFBQTtFQUNyQixPQUFPSCxFQUFFO0FBQ1gsQ0FBQyxDQUFDO0FBQUMsSUFBQUksc0JBQUEsR0FBQUMsT0FBQTtBQXBDSCxJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBNkQsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQXBCLFlBQUE7RUFBQSxJQUFBeUIsUUFBQSxHQUFBTCxPQUFBO0lBQUFKLElBQUEsR0FBQVMsUUFBQSxDQUFBVCxJQUFBO0VBQUFoQixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBZ0IsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBb0M3RFUsUUFBUSxDQUFDLHFCQUFxQixFQUFFLFlBQU07RUFDcENDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxZQUFNO0lBQzNCQyxNQUFNLENBQUNDLHFCQUFZLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7RUFDcEMsQ0FBQyxDQUFDO0VBRUZILEVBQUUsQ0FBQyxjQUFjLEVBQUUsWUFBTTtJQUN2QkMsTUFBTSxDQUFDLE9BQU9DLHFCQUFZLENBQUMsQ0FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLGdCQUFnQixFQUFFLFlBQU07SUFDekJDLE1BQU0sQ0FBQyxZQUFNO01BQ1gsSUFBQUksbUJBQU0sRUFBQyxJQUFBUixXQUFBLENBQUFTLEdBQUEsRUFBQ1YsYUFBQSxDQUFBWCxPQUFZLElBQUUsQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDc0IsR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNsQixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=