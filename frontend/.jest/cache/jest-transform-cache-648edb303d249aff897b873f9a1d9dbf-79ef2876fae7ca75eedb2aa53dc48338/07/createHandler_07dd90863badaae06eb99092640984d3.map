{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_customDirectEventTypes","_RNGestureHandlerModule","_interopRequireDefault","_State","_handlersRegistry","_getNextHandlerTag","_utils","_findNodeHandle","_utils2","_ActionType","_PressabilityDebugView","_GestureHandlerRootViewContext","_ghQueueMicrotask","_mountRegistry","UIManagerAny","UIManager","customDirectEventTypes","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","Object","assign","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","getViewManagerConfig","call","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","default","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_defineProperty3","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_this","_classCallCheck2","_callSuper","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","_props","viewNode","child","Children","only","children","ref","isReact19","newConfig","getNextHandlerTag","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","ghQueueMicrotask","MountRegistry","gestureHandlerWillMount","updateGestureHandler","createRef","isMountedRef","id","handlerIDToTag","Error","_inherits2","_createClass2","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","filterConfig","concat","_toConsumableArray2","displayName","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","unregisterOldGestureHandler","dropGestureHandler","handlerID","gestureHandlerWillUnmount","remainingTries","_this3","deepEqual","setNativeProps","updates","mergedProps","render","_this$props$testID","context","isTestEnv","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","e","tagMessage","grandChildren","type","toArray","push","createElement","PressabilityDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID","Component"],"sources":["createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport {\n  deepEqual,\n  isFabric,\n  isReact19,\n  isTestEnv,\n  tagMessage,\n} from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\nimport { ReactElement } from 'react';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n\nconst UIManagerConstants = UIManagerAny.getViewManagerConfig?.('getConstants');\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag = -1;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // @ts-ignore Since React 19 ref is accessible as standard prop\n      // https://react.dev/blog/2024/04/25/react-19-upgrade-guide#deprecated-element-ref\n      const ref = isReact19() ? (child as ReactElement).props?.ref : child?.ref;\n\n      if (!ref) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.handlerTag = getNextHandlerTag();\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]}