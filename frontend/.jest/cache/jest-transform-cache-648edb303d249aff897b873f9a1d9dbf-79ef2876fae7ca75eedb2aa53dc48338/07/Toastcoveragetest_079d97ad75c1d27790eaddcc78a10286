2e37057780ba657eee3ae711787110dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
jest.useFakeTimers();
function mountComponent(Component) {
  var wrapper = {
    current: null
  };
  var instance = {
    current: null
  };
  var Wrapper = function (_React$Component) {
    function Wrapper() {
      var _this;
      (0, _classCallCheck2.default)(this, Wrapper);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, Wrapper, [].concat(args));
      _this.state = {
        visible: true,
        message: "테스트 메시지",
        type: "info",
        position: "bottom",
        duration: 3000,
        onClose: jest.fn()
      };
      return _this;
    }
    (0, _inherits2.default)(Wrapper, _React$Component);
    return (0, _createClass2.default)(Wrapper, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        wrapper.current = this;
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _jsxRuntime.jsx)(Component, {
          ref: function ref(_ref) {
            instance.current = _ref;
          },
          visible: this.state.visible,
          message: this.state.message,
          type: this.state.type,
          position: this.state.position,
          duration: this.state.duration,
          onClose: this.state.onClose,
          testID: "toast"
        });
      }
    }]);
  }(_react.default.Component);
  var component = new Wrapper({});
  component.componentDidMount();
  component.render();
  return {
    wrapper: wrapper,
    instance: instance,
    setProps: function setProps(props) {
      wrapper.current.setState(props);
      wrapper.current.render();
    }
  };
}
describe('Toast Coverage Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
    jest.spyOn(_reactNative2.Animated, 'timing').mockImplementation(function () {
      return {
        start: jest.fn(function (callback) {
          return callback && callback({
            finished: true
          });
        })
      };
    });
  });
  test('Tests all prop combinations for coverage', function () {
    var _mountComponent = mountComponent(_Toast.default),
      setProps = _mountComponent.setProps;
    ['success', 'error', 'warning', 'info'].forEach(function (type) {
      setProps({
        type: type
      });
      jest.runAllTimers();
    });
    ['top', 'bottom'].forEach(function (position) {
      setProps({
        position: position
      });
      jest.runAllTimers();
    });
    setProps({
      visible: false
    });
    jest.runAllTimers();
    setProps({
      visible: true
    });
    jest.runAllTimers();
    setProps({
      duration: 500
    });
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(500);
    });
    setProps({
      icon: (0, _jsxRuntime.jsx)(_reactNative2.View, {
        testID: "test-icon"
      })
    });
    jest.runAllTimers();
  });
  test('Tests hideToast function directly', function () {
    var onClose = jest.fn();
    var _mountComponent2 = mountComponent(_Toast.default),
      instance = _mountComponent2.instance;
    instance.current.hideToast();
    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
  });
  test('Tests useEffect cleanup', function () {
    var _mountComponent3 = mountComponent(_Toast.default),
      setProps = _mountComponent3.setProps;
    setProps({
      visible: true,
      duration: 3000
    });
    (0, _reactNative.act)(function () {
      _react.default.useEffect.mock.calls[0][0]()();
    });
    jest.runAllTimers();
  });
  test('Tests ToastController functionality', function () {
    var _mountComponent4 = mountComponent(_Toast.default),
      instance = _mountComponent4.instance;
    _Toast.ToastController.setRef(instance.current);
    _Toast.ToastController.show({
      message: '새 메시지',
      type: 'success',
      position: 'top',
      duration: 2000,
      icon: (0, _jsxRuntime.jsx)(_reactNative2.View, {})
    });
    jest.runAllTimers();
    _Toast.ToastController.hide();
    jest.runAllTimers();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,