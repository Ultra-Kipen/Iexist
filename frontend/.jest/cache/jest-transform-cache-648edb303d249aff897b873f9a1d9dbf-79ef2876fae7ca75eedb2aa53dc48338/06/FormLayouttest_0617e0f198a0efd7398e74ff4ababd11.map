{"version":3,"names":["_getJestObj","mock","View","Text","StyleSheet","create","styles","ScrollView","KeyboardAvoidingView","TouchableWithoutFeedback","Keyboard","dismiss","jest","fn","Platform","OS","select","obj","ios","useTheme","theme","colors","background","dark","_interopRequireDefault","require","_react","_reactNative","_FormLayout","_jsxRuntime","_require","describe","it","component","render","jsx","default","children","expect","toBeDefined","_render","loading","container","header","footer","avoidKeyboard","style","backgroundColor","contentContainerStyle","padding"],"sources":["FormLayout.test.tsx"],"sourcesContent":["// tests/layouts/FormLayout.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport FormLayout from '../../src/layouts/FormLayout';\r\n\r\n// 간단한 문자열 모킹 사용\r\njest.mock('react-native', () => ({\r\n  View: 'View',\r\n  Text: 'Text',\r\n  StyleSheet: {\r\n    create: (styles) => styles,\r\n  },\r\n  ScrollView: 'ScrollView',\r\n  KeyboardAvoidingView: 'KeyboardAvoidingView',\r\n  TouchableWithoutFeedback: 'TouchableWithoutFeedback',\r\n  Keyboard: {\r\n    dismiss: jest.fn(),\r\n  },\r\n  Platform: {\r\n    OS: 'ios',\r\n    select: jest.fn((obj) => obj.ios),\r\n  },\r\n}));\r\n\r\n// useTheme 모킹\r\njest.mock('../../src/hooks/useTheme', () => ({\r\n  useTheme: () => ({\r\n    theme: {\r\n      colors: {\r\n        background: '#ffffff',\r\n      },\r\n      dark: false,\r\n    },\r\n  }),\r\n}));\r\n\r\n// LoadingIndicator 모킹 - 단순 문자열로 모킹\r\njest.mock('../../src/components/LoadingIndicator', () => 'LoadingIndicator');\r\n\r\ndescribe('FormLayout', () => {\r\n  // 기본적인 렌더링만 테스트\r\n  it('renders without crashing', () => {\r\n    const component = render(\r\n      <FormLayout>\r\n        <text>폼 내용</text>\r\n      </FormLayout>\r\n    );\r\n    expect(component).toBeDefined();\r\n  });\r\n  \r\n  // 로딩 상태 테스트\r\n  it('shows loading indicator when loading is true', () => {\r\n    const { container } = render(\r\n      <FormLayout loading={true}>\r\n        <text>폼 내용</text>\r\n      </FormLayout>\r\n    );\r\n    expect(container).toBeDefined();\r\n  });\r\n  \r\n  // 헤더와 푸터 렌더링 테스트\r\n  it('renders with header and footer', () => {\r\n    const component = render(\r\n      <FormLayout\r\n        header={<text>폼 헤더</text>}\r\n        footer={<text>폼 푸터</text>}\r\n      >\r\n        <text>폼 내용</text>\r\n      </FormLayout>\r\n    );\r\n    expect(component).toBeDefined();\r\n  });\r\n  \r\n  // 키보드 회피 옵션 테스트\r\n  it('renders with avoidKeyboard=false', () => {\r\n    const component = render(\r\n      <FormLayout avoidKeyboard={false}>\r\n        <text>폼 내용</text>\r\n      </FormLayout>\r\n    );\r\n    expect(component).toBeDefined();\r\n  });\r\n  \r\n  // 스타일 적용 테스트\r\n  it('applies custom styles', () => {\r\n    const component = render(\r\n      <FormLayout \r\n        style={{ backgroundColor: 'red' }}\r\n        contentContainerStyle={{ padding: 20 }}\r\n      >\r\n        <text>폼 내용</text>\r\n      </FormLayout>\r\n    );\r\n    expect(component).toBeDefined();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}