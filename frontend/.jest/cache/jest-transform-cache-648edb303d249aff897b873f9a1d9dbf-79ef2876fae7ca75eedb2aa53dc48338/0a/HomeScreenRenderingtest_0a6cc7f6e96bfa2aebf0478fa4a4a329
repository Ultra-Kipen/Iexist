9447a8c0bf32228655ed746b48484408
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  var isAuthenticatedValue = true;
  var mockUser = {
    id: 1,
    username: 'testuser',
    nickname: '테스트유저'
  };
  return {
    useAuth: jest.fn(function () {
      return {
        user: isAuthenticatedValue ? mockUser : null,
        isAuthenticated: isAuthenticatedValue,
        isLoading: false
      };
    }),
    __setAuthState: function __setAuthState(newState) {
      isAuthenticatedValue = newState;
    }
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn(function () {
      return {
        emotions: [{
          emotion_id: 1,
          name: '행복',
          icon: 'emoticon-happy-outline',
          color: '#FFD700'
        }],
        selectedEmotions: [],
        logEmotion: jest.fn(),
        selectEmotion: jest.fn(),
        unselectEmotion: jest.fn(),
        clearSelectedEmotions: jest.fn()
      };
    })
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    Button: 'Button',
    Card: {
      Content: 'Card.Content',
      Actions: 'Card.Actions',
      Title: 'Card.Title'
    },
    Chip: 'Chip',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    Surface: 'Surface',
    FAB: 'FAB',
    IconButton: 'IconButton',
    Avatar: {
      Icon: 'Avatar.Icon'
    },
    Divider: 'Divider',
    Portal: 'Portal',
    TextInput: 'TextInput',
    ActivityIndicator: 'ActivityIndicator',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee',
          surface: '#ffffff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  var MockHomeScreen = function MockHomeScreen() {
    var _require = require("../../src/contexts/AuthContext"),
      useAuth = _require.useAuth;
    var _useAuth = useAuth(),
      user = _useAuth.user,
      isAuthenticated = _useAuth.isAuthenticated;
    var React = require('react');
    var _require2 = require('react-native'),
      View = _require2.View,
      Text = _require2.Text;
    if (!isAuthenticated) {
      return React.createElement(View, {
        testID: 'login-required-view'
      }, [React.createElement(Text, {
        key: 'title'
      }, '로그인이 필요합니다'), React.createElement(Text, {
        key: 'message'
      }, '게시물을 보려면, 먼저 로그인해주세요.')]);
    }
    return React.createElement(View, {
      testID: 'home-screen-container'
    }, [React.createElement(Text, {
      key: 'welcome',
      testID: 'welcome-text'
    }, `환영합니다, ${user.nickname || user.username}님`), React.createElement(View, {
      key: 'emotion',
      testID: 'emotion-surface'
    }, React.createElement(Text, null, '오늘의 감정')), React.createElement(View, {
      key: 'input',
      testID: 'post-input-card'
    }, React.createElement(Text, null, '게시물 입력')), React.createElement(Text, {
      key: 'posts-title',
      testID: 'posts-section-title'
    }, '누군가의 하루는..')]);
  };
  MockHomeScreen.displayName = 'HomeScreen';
  return {
    __esModule: true,
    default: MockHomeScreen
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen Conditional Rendering', function () {
  it('shows login required message when user is not authenticated', function () {
    require("../../src/contexts/AuthContext").__setAuthState(false);
    var HomeScreen = require("../../src/screens/HomeScreen").default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('login-required-view')).toBeTruthy();
    expect(getByText('로그인이 필요합니다')).toBeTruthy();
    expect(getByText('게시물을 보려면, 먼저 로그인해주세요.')).toBeTruthy();
  });
  it('shows main content when user is authenticated', function () {
    require("../../src/contexts/AuthContext").__setAuthState(true);
    var HomeScreen = require("../../src/screens/HomeScreen").default;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    expect(getByTestId('home-screen-container')).toBeTruthy();
    expect(getByTestId('welcome-text')).toBeTruthy();
    expect(getByText('환영합니다, 테스트유저님')).toBeTruthy();
    expect(getByTestId('emotion-surface')).toBeTruthy();
    expect(getByText('오늘의 감정')).toBeTruthy();
    expect(getByTestId('post-input-card')).toBeTruthy();
    expect(getByText('게시물 입력')).toBeTruthy();
    expect(getByTestId('posts-section-title')).toBeTruthy();
    expect(getByText('누군가의 하루는..')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,