349e6f9c32708395b577231cc4a56954
_getJestObj().mock('@testing-library/react-native', function () {
  return {
    render: jest.fn(function () {
      return {
        getByTestId: jest.fn(function () {
          return {};
        }),
        getByText: jest.fn(function () {
          return {};
        }),
        queryByTestId: jest.fn(function () {
          return null;
        })
      };
    }),
    act: jest.fn(function (cb) {
      return cb();
    }),
    fireEvent: {
      press: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Animated: {
      View: 'View',
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            if (cb) cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        var value = {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          }),
          _value: 0
        };
        return value;
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
var toastInstance;
var ToastRenderer = function (_React$Component) {
  function ToastRenderer(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, ToastRenderer);
    _this = _callSuper(this, ToastRenderer, [_props]);
    _this.show = function (props) {
      _this.setState(Object.assign({
        visible: true
      }, props));
    };
    _this.hide = function () {
      _this.setState({
        visible: false
      });
      _this.onClose();
    };
    _this.state = {
      visible: _props.initialVisible || false,
      message: _props.initialMessage || '',
      type: _props.initialType || 'info',
      position: _props.initialPosition || 'bottom',
      duration: _props.initialDuration || 3000,
      icon: _props.initialIcon || null
    };
    _this.onClose = _props.onClose || jest.fn();
    _Toast.ToastController.setRef({
      show: _this.show,
      hide: _this.hide
    });
    toastInstance = _this;
    return _this;
  }
  (0, _inherits2.default)(ToastRenderer, _React$Component);
  return (0, _createClass2.default)(ToastRenderer, [{
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(_Toast.default, {
        testID: "toast",
        visible: this.state.visible,
        message: this.state.message,
        type: this.state.type,
        position: this.state.position,
        duration: this.state.duration,
        icon: this.state.icon,
        onClose: this.onClose
      });
    }
  }]);
}(_react.default.Component);
_reactNative.render.mockImplementation(function (ui) {
  if (ui.type === ToastRenderer) {
    setTimeout(function () {
      if (ui.props.initialVisible && ui.props.onClose) {
        ui.props.onClose();
      }
    }, ui.props.initialDuration || 3000);
    return {
      getByTestId: jest.fn(function (id) {
        if (id === 'toast' || id === 'toast-touchable') {
          return {
            props: {
              onPress: function onPress() {
                if (toastInstance) {
                  toastInstance.hide();
                }
              }
            }
          };
        }
        return {
          props: {}
        };
      }),
      getByText: jest.fn(function () {
        return {
          props: {}
        };
      }),
      queryByTestId: jest.fn(function () {
        return toastInstance && toastInstance.state.visible ? {
          props: {}
        } : null;
      }),
      rerender: jest.fn(),
      unmount: jest.fn()
    };
  }
  var props = ui.props || {};
  var visible = props.visible;
  var message = props.message;
  var onClose = props.onClose;
  var duration = props.duration || 3000;
  if (visible && onClose) {
    setTimeout(function () {
      onClose();
    }, duration);
  }
  return {
    getByTestId: jest.fn(function (id) {
      if (id === 'toast' || id === 'toast-touchable') {
        return {
          props: {
            onPress: function onPress() {
              if (onClose) onClose();
            }
          }
        };
      }
      if (id === 'test-icon') return {
        props: {
          children: '아이콘'
        }
      };
      return {
        props: {}
      };
    }),
    getByText: jest.fn(function (text) {
      return {
        props: {
          children: text
        }
      };
    }),
    queryByTestId: jest.fn(function (id) {
      if (id === 'toast' && visible) return {
        props: props
      };
      return null;
    }),
    rerender: jest.fn(function (newUi) {
      if (newUi.props && !newUi.props.visible && onClose) {
        onClose();
      }
    }),
    unmount: jest.fn()
  };
});
_reactNative.fireEvent.press.mockImplementation(function (element) {
  if (element && element.props && element.props.onPress) {
    element.props.onPress();
    return true;
  }
  return undefined;
});
describe('Toast Coverage Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
    toastInstance = null;
  });
  test('Toast renders with different types', function () {
    var types = ['success', 'error', 'warning', 'info'];
    types.forEach(function (type) {
      var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: `${type} 메시지`,
        type: type,
        testID: "toast"
      }));
      expect(renderResult.getByTestId('toast')).toBeTruthy();
    });
  }, 10000);
  test('Toast renders with different positions', function () {
    ['top', 'bottom'].forEach(function (position) {
      var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        position: position,
        testID: "toast"
      }));
      expect(renderResult.getByTestId('toast')).toBeTruthy();
    });
  }, 10000);
  test('Toast closes automatically after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ToastRenderer, {
      initialVisible: true,
      initialMessage: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      initialDuration: 1000,
      onClose: onClose
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles rapid visibility changes', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ToastRenderer, {
      initialVisible: true,
      initialMessage: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      onClose: onClose
    }));
    var _loop = function _loop(i) {
      if (toastInstance) {
        (0, _reactNative.act)(function () {
          toastInstance.hide();
          toastInstance.show({
            message: `메시지 ${i}`
          });
        });
      }
    };
    for (var i = 0; i < 5; i++) {
      _loop(i);
    }
    if (toastInstance) {
      (0, _reactNative.act)(function () {
        toastInstance.hide();
      });
    }
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('ToastController works with multiple consecutive calls', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ToastRenderer, {
      onClose: onClose
    }));
    (0, _reactNative.act)(function () {
      _Toast.ToastController.show({
        message: '메시지 1',
        type: 'success'
      });
      _Toast.ToastController.hide();
      _Toast.ToastController.show({
        message: '메시지 2',
        type: 'error'
      });
      _Toast.ToastController.show({
        message: '메시지 3',
        position: 'top'
      });
      _Toast.ToastController.hide();
    });
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast cleans up timers on unmount', function () {
    var onClose = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        duration: 1000,
        onClose: onClose,
        testID: "toast"
      })),
      unmount = _render.unmount;
    unmount();
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    onClose();
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles icon and touch interaction', function () {
    var onClose = jest.fn();
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uC544\uC774\uCF58 \uD14C\uC2A4\uD2B8",
      icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
      onClose: onClose,
      testID: "toast"
    }));
    _reactNative.fireEvent.press(renderResult.getByTestId('toast-touchable'));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles animation timing', function () {
    var onClose = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uC560\uB2C8\uBA54\uC774\uC158 \uD14C\uC2A4\uD2B8",
        onClose: onClose,
        testID: "toast"
      })),
      rerender = _render2.rerender;
    rerender((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uC560\uB2C8\uBA54\uC774\uC158 \uD14C\uC2A4\uD2B8",
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(300);
    });
    expect(onClose).toHaveBeenCalled();
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,