58a7f19bd08eb8e419ebd31c481453e0
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SceneView = SceneView;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var _EnsureSingleNavigator = require("./EnsureSingleNavigator.js");
var _NavigationFocusedRouteStateContext = require("./NavigationFocusedRouteStateContext.js");
var _NavigationStateContext = require("./NavigationStateContext.js");
var _StaticContainer = require("./StaticContainer.js");
var _useOptionsGetters2 = require("./useOptionsGetters.js");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["state", "screen", "params", "initial"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function SceneView(_ref) {
  var screen = _ref.screen,
    route = _ref.route,
    navigation = _ref.navigation,
    routeState = _ref.routeState,
    getState = _ref.getState,
    setState = _ref.setState,
    options = _ref.options,
    clearOptions = _ref.clearOptions;
  var navigatorKeyRef = React.useRef();
  var getKey = React.useCallback(function () {
    return navigatorKeyRef.current;
  }, []);
  var _useOptionsGetters = (0, _useOptionsGetters2.useOptionsGetters)({
      key: route.key,
      options: options,
      navigation: navigation
    }),
    addOptionsGetter = _useOptionsGetters.addOptionsGetter;
  var setKey = React.useCallback(function (key) {
    navigatorKeyRef.current = key;
  }, []);
  var getCurrentState = React.useCallback(function () {
    var state = getState();
    var currentRoute = state.routes.find(function (r) {
      return r.key === route.key;
    });
    return currentRoute ? currentRoute.state : undefined;
  }, [getState, route.key]);
  var setCurrentState = React.useCallback(function (child) {
    var state = getState();
    setState(Object.assign({}, state, {
      routes: state.routes.map(function (r) {
        if (r.key !== route.key) {
          return r;
        }
        var nextRoute = Object.assign({}, r, {
          state: child
        });
        if (nextRoute.params && ('state' in nextRoute.params && typeof nextRoute.params.state === 'object' && nextRoute.params.state !== null || 'screen' in nextRoute.params && typeof nextRoute.params.screen === 'string')) {
          var _nextRoute$params = nextRoute.params,
            _state = _nextRoute$params.state,
            _screen = _nextRoute$params.screen,
            params = _nextRoute$params.params,
            initial = _nextRoute$params.initial,
            rest = (0, _objectWithoutProperties2.default)(_nextRoute$params, _excluded);
          if (Object.keys(rest).length) {
            nextRoute.params = rest;
          } else {
            delete nextRoute.params;
          }
        }
        return nextRoute;
      })
    }));
  }, [getState, route.key, setState]);
  var isInitialRef = React.useRef(true);
  React.useEffect(function () {
    isInitialRef.current = false;
  });
  React.useEffect(function () {
    return clearOptions;
  }, []);
  var getIsInitial = React.useCallback(function () {
    return isInitialRef.current;
  }, []);
  var parentFocusedRouteState = React.useContext(_NavigationFocusedRouteStateContext.NavigationFocusedRouteStateContext);
  var focusedRouteState = React.useMemo(function () {
    var state = {
      routes: [{
        key: route.key,
        name: route.name,
        params: route.params,
        path: route.path
      }]
    };
    var _addState = function addState(parent) {
      var parentRoute = parent == null ? void 0 : parent.routes[0];
      if (parentRoute) {
        return {
          routes: [Object.assign({}, parentRoute, {
            state: _addState(parentRoute.state)
          })]
        };
      }
      return state;
    };
    return _addState(parentFocusedRouteState);
  }, [parentFocusedRouteState, route.key, route.name, route.params, route.path]);
  var context = React.useMemo(function () {
    return {
      state: routeState,
      getState: getCurrentState,
      setState: setCurrentState,
      getKey: getKey,
      setKey: setKey,
      getIsInitial: getIsInitial,
      addOptionsGetter: addOptionsGetter
    };
  }, [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);
  var ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;
  return (0, _jsxRuntime.jsx)(_NavigationStateContext.NavigationStateContext.Provider, {
    value: context,
    children: (0, _jsxRuntime.jsx)(_NavigationFocusedRouteStateContext.NavigationFocusedRouteStateContext.Provider, {
      value: focusedRouteState,
      children: (0, _jsxRuntime.jsx)(_EnsureSingleNavigator.EnsureSingleNavigator, {
        children: (0, _jsxRuntime.jsx)(_StaticContainer.StaticContainer, {
          name: screen.name,
          render: ScreenComponent || screen.children,
          navigation: navigation,
          route: route,
          children: ScreenComponent !== undefined ? (0, _jsxRuntime.jsx)(ScreenComponent, {
            navigation: navigation,
            route: route
          }) : screen.children !== undefined ? screen.children({
            navigation: navigation,
            route: route
          }) : null
        })
      })
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,