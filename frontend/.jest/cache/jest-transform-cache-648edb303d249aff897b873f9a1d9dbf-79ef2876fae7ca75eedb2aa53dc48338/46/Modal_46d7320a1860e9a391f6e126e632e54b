fec1102d8916f6f44d2add5e12c7d7f9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Modal = function Modal(_ref) {
  var isVisible = _ref.isVisible,
    onClose = _ref.onClose,
    title = _ref.title,
    children = _ref.children,
    footer = _ref.footer,
    _ref$animationType = _ref.animationType,
    animationType = _ref$animationType === void 0 ? 'fade' : _ref$animationType,
    _ref$closeOnBackdropP = _ref.closeOnBackdropPress,
    closeOnBackdropPress = _ref$closeOnBackdropP === void 0 ? true : _ref$closeOnBackdropP;
  var _useState = (0, _react.useState)(isVisible),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    visible = _useState2[0],
    setVisible = _useState2[1];
  (0, _react.useEffect)(function () {
    setVisible(isVisible);
  }, [isVisible]);
  var handleBackdropPress = function handleBackdropPress() {
    if (closeOnBackdropPress) {
      onClose();
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    transparent: true,
    visible: visible,
    animationType: animationType,
    onRequestClose: onClose,
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.backdrop,
      activeOpacity: 1,
      onPress: handleBackdropPress,
      testID: "modal-backdrop",
      accessibilityLabel: "modal-backdrop",
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.modalContainer,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        testID: "modal-container",
        children: [title && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.header,
          testID: "modal-header",
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.headerText,
            children: title
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: onClose,
            style: styles.closeButton,
            testID: "modal-close-button",
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.closeButtonText,
              children: "\xD7"
            })
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.content,
          testID: "modal-content-container",
          children: children
        }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.footer,
          testID: "modal-footer",
          children: footer
        })]
      })
    })
  });
};
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width;
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center'
  },
  modalContainer: {
    width: width * 0.85,
    backgroundColor: 'white',
    borderRadius: 10,
    overflow: 'hidden',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0'
  },
  headerText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333'
  },
  closeButton: {
    padding: 5
  },
  closeButtonText: {
    fontSize: 24,
    color: '#999',
    lineHeight: 24
  },
  content: {
    padding: 15
  },
  footer: {
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  }
});
var _default = exports.default = Modal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,