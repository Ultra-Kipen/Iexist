{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_withErrorHandling","_reactNative2","_jsxRuntime","originalConsoleError","console","error","beforeAll","jest","fn","afterAll","describe","ErrorComponent","_ref","_ref$shouldThrow","shouldThrow","Error","jsx","Text","children","ComponentWithErrorHandling","withErrorHandling","test","_render","render","getByText","expect","toBeTruthy","_render2","_render3","queryByText","retryButton","fireEvent","press","displayName","toBe","spy","spyOn","prototype","toHaveBeenCalled","toHaveBeenCalledWith","any","anything"],"sources":["withErrorHandling.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { withErrorHandling } from '../../src/hoc/withErrorHandling';\r\nimport { Text } from 'react-native';\r\n\r\n// 콘솔 에러 방지\r\nconst originalConsoleError = console.error;\r\nbeforeAll(() => {\r\n  console.error = jest.fn();\r\n});\r\nafterAll(() => {\r\n  console.error = originalConsoleError;\r\n});\r\n\r\ndescribe('withErrorHandling HOC', () => {\r\n  // 에러를 유발하는 테스트 컴포넌트\r\n  const ErrorComponent = ({ shouldThrow = false }) => {\r\n    if (shouldThrow) {\r\n      throw new Error('테스트 에러');\r\n    }\r\n    return <Text>정상 컴포넌트</Text>;\r\n  };\r\n\r\n  const ComponentWithErrorHandling = withErrorHandling(ErrorComponent);\r\n\r\n  test('에러가 없으면 원래 컴포넌트를 렌더링해야 함', () => {\r\n    const { getByText } = render(<ComponentWithErrorHandling shouldThrow={false} />);\r\n    expect(getByText('정상 컴포넌트')).toBeTruthy();\r\n  });\r\n\r\n  test('에러 발생 시 에러 UI를 표시해야 함', () => {\r\n    const { getByText } = render(<ComponentWithErrorHandling shouldThrow={true} />);\r\n    expect(getByText('문제가 발생했습니다')).toBeTruthy();\r\n    expect(getByText(/테스트 에러/)).toBeTruthy();\r\n  });\r\n\r\n  test('에러 UI에서 다시 시도 버튼 클릭 시 에러 상태를 초기화해야 함', () => {\r\n    const { getByText, queryByText } = render(<ComponentWithErrorHandling shouldThrow={true} />);\r\n    \r\n    // 에러 UI가 표시되는지 확인\r\n    expect(getByText('문제가 발생했습니다')).toBeTruthy();\r\n    \r\n    // 다시 시도 버튼 클릭\r\n    const retryButton = getByText('다시 시도');\r\n    fireEvent.press(retryButton);\r\n    \r\n    // shouldThrow 값이 여전히 true이기 때문에 다시 에러 UI가 표시되어야 함\r\n    // (실제 시나리오에서는 props가 변경되어 정상 렌더링될 수 있음)\r\n    expect(getByText('문제가 발생했습니다')).toBeTruthy();\r\n  });\r\n\r\n  test('HOC가 displayName을 올바르게 설정해야 함', () => {\r\n    expect(ComponentWithErrorHandling.displayName).toBe('withErrorHandling(ErrorComponent)');\r\n  });\r\n\r\n  test('componentDidCatch가 호출되고 에러 정보가 저장되어야 함', () => {\r\n    const spy = jest.spyOn(ComponentWithErrorHandling.prototype, 'componentDidCatch');\r\n    render(<ComponentWithErrorHandling shouldThrow={true} />);\r\n    expect(spy).toHaveBeenCalled();\r\n    expect(console.error).toHaveBeenCalledWith('컴포넌트 오류:', expect.any(Error), expect.anything());\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}