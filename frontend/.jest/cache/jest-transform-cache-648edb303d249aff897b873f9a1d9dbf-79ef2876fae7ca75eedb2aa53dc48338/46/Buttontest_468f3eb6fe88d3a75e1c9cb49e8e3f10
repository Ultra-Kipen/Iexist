57a098225d9acee26364462fcbcf6fd0
_getJestObj().mock("../../src/components/Button", function () {
  return {
    __esModule: true,
    default: jest.fn().mockImplementation(function (_ref) {
      var onPress = _ref.onPress,
        title = _ref.title,
        disabled = _ref.disabled,
        loading = _ref.loading,
        leftIcon = _ref.leftIcon,
        rightIcon = _ref.rightIcon,
        _ref$testID = _ref.testID,
        testID = _ref$testID === void 0 ? 'button-component' : _ref$testID;
      var React = require('react');
      var _require = require('react-native'),
        View = _require.View,
        Text = _require.Text;
      return (0, _jsxRuntime.jsx)(View, {
        testID: testID,
        onTouchablePress: onPress,
        disabled: disabled,
        children: !loading ? (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [leftIcon, (0, _jsxRuntime.jsx)(Text, {
            testID: "button-text",
            children: title
          }), rightIcon]
        }) : (0, _jsxRuntime.jsx)(Text, {
          testID: "loading-indicator",
          children: "Loading..."
        })
      });
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Button = _interopRequireDefault(require("../../src/components/Button"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var LeftIcon = function LeftIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "left-icon-content"
  });
};
var RightIcon = function RightIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "right-icon-content"
  });
};
describe('Button 컴포넌트', function () {
  var mockOnPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('버튼이 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD14C\uC2A4\uD2B8 \uBC84\uD2BC"
      })),
      getByTestId = _render.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('버튼 클릭 시 onPress 함수가 호출되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD14C\uC2A4\uD2B8 \uBC84\uD2BC"
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('button-component');
    _reactNative.fireEvent.press(button);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('비활성화된 버튼은 onPress 함수를 호출하지 않아야 함', function () {
    var disabledMockOnPress = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: disabledMockOnPress,
        title: "\uBE44\uD65C\uC131\uD654 \uBC84\uD2BC",
        disabled: true
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button-component');
    _reactNative.fireEvent.press(button);
    expect(disabledMockOnPress).not.toHaveBeenCalled();
  });
  it('로딩 상태의 버튼은 텍스트를 숨겨야 함', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uB85C\uB529 \uBC84\uD2BC",
        loading: true
      })),
      queryByTestId = _render4.queryByTestId;
    var buttonText = queryByTestId('button-text');
    expect(buttonText).toBeNull();
    var loadingIndicator = queryByTestId('loading-indicator');
    expect(loadingIndicator).toBeDefined();
  });
  it('primary 타입 버튼이 렌더링되어야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD504\uB77C\uC774\uBA38\uB9AC \uBC84\uD2BC",
        type: "primary"
      })),
      getByTestId = _render5.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('secondary 타입 버튼이 렌더링되어야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC138\uCEE8\uB354\uB9AC \uBC84\uD2BC",
        type: "secondary"
      })),
      getByTestId = _render6.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('outline 타입 버튼이 렌더링되어야 함', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC544\uC6C3\uB77C\uC778 \uBC84\uD2BC",
        type: "outline"
      })),
      getByTestId = _render7.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('text 타입 버튼이 렌더링되어야 함', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD14D\uC2A4\uD2B8 \uBC84\uD2BC",
        type: "text"
      })),
      getByTestId = _render8.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('small 크기 버튼이 렌더링되어야 함', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC791\uC740 \uBC84\uD2BC",
        size: "small"
      })),
      getByTestId = _render9.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('large 크기 버튼이 렌더링되어야 함', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD070 \uBC84\uD2BC",
        size: "large"
      })),
      getByTestId = _render10.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('커스텀 스타일이 적용된 버튼이 렌더링되어야 함', function () {
    var customStyle = {
      backgroundColor: '#FF5733',
      borderRadius: 20
    };
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uCEE4\uC2A4\uD140 \uC2A4\uD0C0\uC77C \uBC84\uD2BC",
        style: customStyle
      })),
      getByTestId = _render11.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('커스텀 텍스트 스타일이 적용된 버튼이 렌더링되어야 함', function () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uCEE4\uC2A4\uD140 \uD14D\uC2A4\uD2B8 \uC2A4\uD0C0\uC77C",
        textStyle: {
          fontSize: 18,
          fontWeight: 'bold',
          color: '#FF0000'
        }
      })),
      getByTestId = _render12.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('leftIcon이 있는 버튼이 올바르게 렌더링되어야 함', function () {
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC67C\uCABD \uC544\uC774\uCF58 \uBC84\uD2BC",
        leftIcon: (0, _jsxRuntime.jsx)(LeftIcon, {})
      })),
      getByTestId = _render13.getByTestId;
    var button = getByTestId('button-component');
    expect(button).toBeDefined();
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('rightIcon이 있는 버튼이 올바르게 렌더링되어야 함', function () {
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC624\uB978\uCABD \uC544\uC774\uCF58 \uBC84\uD2BC",
        rightIcon: (0, _jsxRuntime.jsx)(RightIcon, {})
      })),
      getByTestId = _render14.getByTestId;
    var button = getByTestId('button-component');
    expect(button).toBeDefined();
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeDefined();
  });
  it('로딩 상태에서는 아이콘이 표시되지 않아야 함', function () {
    var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uB85C\uB529 \uC0C1\uD0DC \uC544\uC774\uCF58 \uBC84\uD2BC",
        leftIcon: (0, _jsxRuntime.jsx)(LeftIcon, {}),
        rightIcon: (0, _jsxRuntime.jsx)(RightIcon, {}),
        loading: true
      })),
      queryByTestId = _render15.queryByTestId;
    var buttonText = queryByTestId('button-text');
    expect(buttonText).toBeNull();
    var loadingIndicator = queryByTestId('loading-indicator');
    expect(loadingIndicator).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,