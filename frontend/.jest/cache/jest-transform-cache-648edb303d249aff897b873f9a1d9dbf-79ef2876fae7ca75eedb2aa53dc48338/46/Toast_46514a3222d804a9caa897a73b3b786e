c051a273e0a566f98942ba551450541d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToastController = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Toast = function Toast(_ref) {
  var visible = _ref.visible,
    message = _ref.message,
    _ref$duration = _ref.duration,
    duration = _ref$duration === void 0 ? 3000 : _ref$duration,
    onClose = _ref.onClose,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'info' : _ref$type,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? 'bottom' : _ref$position,
    icon = _ref.icon,
    testID = _ref.testID;
  var _useState = (0, _react.useState)(visible),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isVisible = _useState2[0],
    setIsVisible = _useState2[1];
  var fadeAnim = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  var timerRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (visible) {
      setIsVisible(true);
      _reactNative.Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true
      }).start();
      timerRef.current = setTimeout(function () {
        hideToast();
      }, duration);
    } else {
      hideToast();
    }
    return function () {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
    };
  }, [visible, duration]);
  var hideToast = function hideToast() {
    _reactNative.Animated.timing(fadeAnim, {
      toValue: 0,
      duration: 300,
      useNativeDriver: true
    }).start(function () {
      setIsVisible(false);
      if (onClose) onClose();
    });
  };
  var getBackgroundColor = function getBackgroundColor() {
    switch (type) {
      case 'success':
        return '#4CAF50';
      case 'error':
        return '#F44336';
      case 'warning':
        return '#FF9800';
      case 'info':
      default:
        return '#2196F3';
    }
  };
  if (!isVisible) return null;
  var positionStyle = position === 'top' ? {
    top: 50
  } : {
    bottom: 50
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
    testID: testID,
    style: [styles.container, positionStyle, {
      backgroundColor: getBackgroundColor(),
      opacity: fadeAnim
    }],
    children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: hideToast,
      style: styles.content,
      testID: "toast-touchable",
      children: [icon && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.iconContainer,
        children: icon
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text,
        children: message
      })]
    })
  });
};
var toastInstance = null;
var ToastController = exports.ToastController = {
  show: function show(props) {
    if (toastInstance) {
      toastInstance.show(props);
    }
  },
  hide: function hide() {
    if (toastInstance) {
      toastInstance.hide();
    }
  },
  setRef: function setRef(ref) {
    toastInstance = ref;
  }
};
var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    left: 20,
    right: 20,
    padding: 15,
    borderRadius: 8,
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 6,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 3
    },
    shadowOpacity: 0.27,
    shadowRadius: 4.65,
    zIndex: 9999
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1
  },
  iconContainer: {
    marginRight: 10
  },
  text: {
    color: '#fff',
    fontSize: 16,
    flex: 1
  }
});
var _default = exports.default = Toast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,