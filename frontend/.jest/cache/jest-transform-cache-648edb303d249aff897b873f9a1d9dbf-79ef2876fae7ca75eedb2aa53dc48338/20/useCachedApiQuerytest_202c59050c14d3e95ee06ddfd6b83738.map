{"version":3,"names":["_getJestObj","mock","useCache","jest","fn","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_useCachedApiQuery","_useCache","_require","global","fetch","describe","mockEndpoint","mockParams","id","filter","mockData","name","mockUseCacheReturn","data","loading","error","refetch","invalidateCache","beforeEach","clearAllMocks","mockReturnValue","mockResolvedValue","ok","json","success","it","renderHook","useCachedApiQuery","expect","toHaveBeenCalledWith","JSON","stringify","any","Function","ttl","undefined","autoLoad","_renderHook","result","current","toBe","default","fetchDataFn","mockImplementation","key","fetchFn","rejects","toThrow","mockOnSuccess","onSuccess","status","mockOnError","mockError","Error","Object","assign","onError","String"],"sources":["useCachedApiQuery.test.ts"],"sourcesContent":["// __tests__/hooks/useCachedApiQuery.test.ts\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport { useCachedApiQuery } from '../../src/hooks/useCachedApiQuery';\r\nimport { useCache } from '../../src/hooks/useCache';\r\n\r\n// fetch 모킹\r\nglobal.fetch = jest.fn();\r\n\r\n// useCache 모킹\r\njest.mock('../../src/hooks/useCache', () => ({\r\n  useCache: jest.fn(),\r\n}));\r\n\r\ndescribe('useCachedApiQuery', () => {\r\n  const mockEndpoint = '/api/test';\r\n  const mockParams = { id: 1, filter: 'active' };\r\n  const mockData = { id: 1, name: 'Test Data' };\r\n  \r\n  // useCache 반환값 기본 설정\r\n  const mockUseCacheReturn = {\r\n    data: mockData,\r\n    loading: false,\r\n    error: null,\r\n    refetch: jest.fn(),\r\n    invalidateCache: jest.fn(),\r\n  };\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // useCache 모킹 설정\r\n    (useCache as jest.Mock).mockReturnValue(mockUseCacheReturn);\r\n    \r\n    // fetch 모킹 설정\r\n    (global.fetch as jest.Mock).mockResolvedValue({\r\n      ok: true,\r\n      json: jest.fn().mockResolvedValue({\r\n        success: true,\r\n        data: mockData,\r\n      }),\r\n    });\r\n  });\r\n\r\n  it('useCache를 올바른 파라미터로 호출한다', () => {\r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams)\r\n    );\r\n    \r\n    // useCache 호출 확인\r\n    expect(useCache).toHaveBeenCalledWith(\r\n      `api:${mockEndpoint}:${JSON.stringify(mockParams)}`,\r\n      expect.any(Function),\r\n      { ttl: undefined, autoLoad: true }\r\n    );\r\n  });\r\n\r\n  it('useCache에서 반환된 데이터, 로딩, 에러 상태를 반환한다', () => {\r\n    const { result } = renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams)\r\n    );\r\n    \r\n    expect(result.current.data).toBe(mockData);\r\n    expect(result.current.loading).toBe(false);\r\n    expect(result.current.error).toBe(null);\r\n    expect(result.current.refetch).toBe(mockUseCacheReturn.refetch);\r\n    expect(result.current.invalidateCache).toBe(mockUseCacheReturn.invalidateCache);\r\n  });\r\n\r\n  it('fetchData 함수는 올바른 API 엔드포인트로 요청한다', async () => {\r\n    // useCache 내부 fetchData 함수 추출\r\n    let fetchDataFn: () => Promise<any>;\r\n    \r\n    (useCache as jest.Mock).mockImplementation((key, fetchFn) => {\r\n      fetchDataFn = fetchFn;\r\n      return mockUseCacheReturn;\r\n    });\r\n    \r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams)\r\n    );\r\n    \r\n    // fetchData 함수 호출\r\n    await (fetchDataFn as any)();\r\n    \r\n    // fetch 호출 확인\r\n    expect(global.fetch).toHaveBeenCalledWith(\r\n      `${mockEndpoint}?id=1&filter=active`\r\n    );\r\n  });\r\n\r\n  it('API 응답이 실패하면 오류를 발생시킨다', async () => {\r\n    // 실패 응답 모킹\r\n    (global.fetch as jest.Mock).mockResolvedValue({\r\n      ok: true,\r\n      json: jest.fn().mockResolvedValue({\r\n        success: false,\r\n        error: '데이터를 가져오는데 실패했습니다.',\r\n      }),\r\n    });\r\n    \r\n    // useCache 내부 fetchData 함수 추출\r\n    let fetchDataFn: () => Promise<any>;\r\n    \r\n    (useCache as jest.Mock).mockImplementation((key, fetchFn) => {\r\n      fetchDataFn = fetchFn;\r\n      return mockUseCacheReturn;\r\n    });\r\n    \r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams)\r\n    );\r\n    \r\n    // fetchData 함수 호출 시 오류 발생 확인\r\n    await expect((fetchDataFn as any)()).rejects.toThrow('데이터를 가져오는데 실패했습니다.');\r\n  });\r\n\r\n  it('onSuccess 콜백이 제공되면 데이터 로드 성공 시 호출된다', async () => {\r\n    const mockOnSuccess = jest.fn();\r\n    \r\n    // useCache 내부 fetchData 함수 추출\r\n    let fetchDataFn: () => Promise<any>;\r\n    \r\n    (useCache as jest.Mock).mockImplementation((key, fetchFn) => {\r\n      fetchDataFn = fetchFn;\r\n      return mockUseCacheReturn;\r\n    });\r\n    \r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams, { onSuccess: mockOnSuccess })\r\n    );\r\n    \r\n    // fetchData 함수 호출\r\n    await (fetchDataFn as any)();\r\n    \r\n    // onSuccess 콜백 호출 확인\r\n    expect(mockOnSuccess).toHaveBeenCalledWith(mockData);\r\n  });\r\n\r\n  it('HTTP 요청 실패 시 오류를 발생시킨다', async () => {\r\n    // HTTP 오류 모킹\r\n    (global.fetch as jest.Mock).mockResolvedValue({\r\n      ok: false,\r\n      status: 404,\r\n    });\r\n    \r\n    // useCache 내부 fetchData 함수 추출\r\n    let fetchDataFn: () => Promise<any>;\r\n    \r\n    (useCache as jest.Mock).mockImplementation((key, fetchFn) => {\r\n      fetchDataFn = fetchFn;\r\n      return mockUseCacheReturn;\r\n    });\r\n    \r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams)\r\n    );\r\n    \r\n    // fetchData 함수 호출 시 오류 발생 확인\r\n    await expect((fetchDataFn as any)()).rejects.toThrow('API 요청 오류: 404');\r\n  });\r\n\r\n  it('onError 콜백이 제공되면 오류 발생 시 호출된다', () => {\r\n    const mockOnError = jest.fn();\r\n    const mockError = new Error('테스트 에러');\r\n    \r\n    // 에러 상태로 useCache 모킹\r\n    (useCache as jest.Mock).mockReturnValue({\r\n      ...mockUseCacheReturn,\r\n      error: mockError,\r\n    });\r\n    \r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams, { onError: mockOnError })\r\n    );\r\n    \r\n    // onError 콜백 호출 확인\r\n    expect(mockOnError).toHaveBeenCalledWith(mockError);\r\n  });\r\n\r\n  it('ttl과 autoLoad 옵션을 useCache에 전달한다', () => {\r\n    const ttl = 60000; // 1분\r\n    const autoLoad = false;\r\n    \r\n    renderHook(() => \r\n      useCachedApiQuery(mockEndpoint, mockParams, { ttl, autoLoad })\r\n    );\r\n    \r\n    // useCache 호출 확인\r\n    expect(useCache).toHaveBeenCalledWith(\r\n      expect.any(String),\r\n      expect.any(Function),\r\n      { ttl, autoLoad }\r\n    );\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}