8d94007d3a9c1877cf4d2a0812a4c770
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _useAPI = require("../../src/hooks/useAPI");
var _client = _interopRequireDefault(require("../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockApiResponse = {
  data: {
    message: '성공'
  },
  status: 200
};
var mockApiError = {
  response: {
    status: 400,
    data: {
      message: '오류 발생'
    }
  }
};
var waitForNextUpdate = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    return new Promise(function (resolve) {
      return setTimeout(resolve, 0);
    });
  });
  return function waitForNextUpdate() {
    return _ref.apply(this, arguments);
  };
}();
describe('useAPI 훅', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('초기 상태가 올바르게 설정되어야 함', function () {
    var _renderHook = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET');
      }),
      result = _renderHook.result;
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
    expect(result.current.data).toBeNull();
  });
  it('API 호출 시 로딩 상태로 변경되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockResolvedValueOnce(mockApiResponse);
    var _renderHook2 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET');
      }),
      result = _renderHook2.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      result.current.execute();
      yield waitForNextUpdate();
    }));
    expect(result.current.loading).toBe(false);
  }));
  it('API 호출 성공 시 데이터가 올바르게 설정되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockResolvedValueOnce(mockApiResponse);
    var _renderHook3 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET');
      }),
      result = _renderHook3.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute();
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toEqual(mockApiResponse.data);
    expect(result.current.error).toBeNull();
  }));
  it('API 호출 실패 시 에러가 올바르게 설정되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockRejectedValueOnce(mockApiError);
    var _renderHook4 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET');
      }),
      result = _renderHook4.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.execute();
      } catch (_unused) {}
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.data).toBeNull();
    expect(result.current.error).toBeTruthy();
  }));
  it('파라미터를 사용하여 API 호출이 가능해야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockResolvedValueOnce(mockApiResponse);
    var _renderHook5 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET');
      }),
      result = _renderHook5.result;
    var params = {
      id: 1,
      name: '테스트'
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute(params);
    }));
    expect(_client.default.get).toHaveBeenCalledWith('/test', {
      params: params
    });
    expect(result.current.data).toEqual(mockApiResponse.data);
  }));
  it('reset 함수를 호출하면 상태가 초기화되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockResolvedValueOnce(mockApiResponse);
    var _renderHook6 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET');
      }),
      result = _renderHook6.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute();
    }));
    expect(result.current.data).toEqual(mockApiResponse.data);
    (0, _reactNative.act)(function () {
      result.current.reset();
    });
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeNull();
    expect(result.current.data).toBeNull();
  }));
  it('POST 메서드로 API 호출이 가능해야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.post.mockResolvedValueOnce(mockApiResponse);
    var _renderHook7 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'POST');
      }),
      result = _renderHook7.result;
    var payload = {
      name: '테스트',
      age: 25
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute(payload);
    }));
    expect(_client.default.post).toHaveBeenCalledWith('/test', payload);
    expect(result.current.data).toEqual(mockApiResponse.data);
  }));
  it('PUT 메서드로 API 호출이 가능해야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.put.mockResolvedValueOnce(mockApiResponse);
    var _renderHook8 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test/1', 'PUT');
      }),
      result = _renderHook8.result;
    var payload = {
      name: '수정된 테스트',
      age: 30
    };
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute(payload);
    }));
    expect(_client.default.put).toHaveBeenCalledWith('/test/1', payload);
    expect(result.current.data).toEqual(mockApiResponse.data);
  }));
  it('DELETE 메서드로 API 호출이 가능해야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.delete.mockResolvedValueOnce(mockApiResponse);
    var _renderHook9 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test/1', 'DELETE');
      }),
      result = _renderHook9.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute();
    }));
    expect(_client.default.delete).toHaveBeenCalledWith('/test/1', {
      params: undefined
    });
    expect(result.current.data).toEqual(mockApiResponse.data);
  }));
  it('지원되지 않는 메서드로 호출할 경우 에러를 발생시켜야 함', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook10 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'PATCH');
      }),
      result = _renderHook10.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.execute();
        fail('에러가 발생해야 함');
      } catch (error) {
        expect(error).toBeInstanceOf(Error);
        expect(error.message).toContain('지원되지 않는 메서드');
      }
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBeTruthy();
  }));
  it('onSuccess 콜백이 성공 시 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockResolvedValueOnce(mockApiResponse);
    var onSuccess = jest.fn();
    var _renderHook11 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET', {
          onSuccess: onSuccess
        });
      }),
      result = _renderHook11.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.execute();
    }));
    expect(onSuccess).toHaveBeenCalledWith(mockApiResponse.data);
  }));
  it('onError 콜백이 실패 시 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.get.mockRejectedValueOnce(mockApiError);
    var onError = jest.fn();
    var _renderHook12 = (0, _reactNative.renderHook)(function () {
        return (0, _useAPI.useAPI)('/test', 'GET', {
          onError: onError
        });
      }),
      result = _renderHook12.result;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.execute();
      } catch (_unused2) {}
    }));
    expect(onError).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,