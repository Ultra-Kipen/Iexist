6721038bc2d0ebfc41f3dfa7cea62690
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    ActivityIndicator: 'ActivityIndicator',
    Chip: function Chip(_ref) {
      var children = _ref.children,
        onPress = _ref.onPress,
        testID = _ref.testID,
        selected = _ref.selected,
        icon = _ref.icon;
      var Icon = icon ? icon() : null;
      return (0, _jsxRuntime.jsxs)("button", {
        onClick: onPress,
        "data-testid": testID,
        "data-selected": selected,
        children: [Icon, children]
      });
    },
    Button: function Button(_ref2) {
      var children = _ref2.children,
        onPress = _ref2.onPress,
        testID = _ref2.testID,
        disabled = _ref2.disabled;
      return (0, _jsxRuntime.jsx)("button", {
        onClick: onPress,
        "data-testid": testID,
        disabled: disabled,
        children: children
      });
    },
    TextInput: function TextInput(_ref3) {
      var value = _ref3.value,
        onChangeText = _ref3.onChangeText,
        testID = _ref3.testID;
      return (0, _jsxRuntime.jsx)("input", {
        value: value,
        onChange: function onChange(e) {
          return onChangeText(e.target.value);
        },
        "data-testid": testID
      });
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return {
    __esModule: true,
    default: function _default(_ref4) {
      var name = _ref4.name,
        size = _ref4.size,
        color = _ref4.color;
      return (0, _jsxRuntime.jsx)("span", {
        style: {
          color: color
        },
        "data-icon": name,
        "data-size": size
      });
    }
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    __esModule: true,
    default: {
      getAllEmotions: jest.fn(),
      recordEmotions: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = {
  alert: jest.fn()
};
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(mockAlert.alert);
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}];
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    var mockedEmotionService = _emotionService.default;
    mockedEmotionService.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      },
      status: 200,
      statusText: 'OK',
      headers: {},
      config: {}
    });
    mockedEmotionService.recordEmotions.mockResolvedValue({
      data: {},
      status: 200,
      statusText: 'OK',
      headers: {},
      config: {}
    });
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render.findByText;
    yield findByText('오늘의 감정');
    yield findByText('현재 어떤 감정을 느끼고 계신가요?');
  }));
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render2.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      expect(chips.length).toBe(mockEmotions.length);
    });
  }));
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render3.getAllByTestId,
      findByTestId = _render3.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton.props.disabled).toBeFalsy();
  }));
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render4.getAllByTestId,
      findByTestId = _render4.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      _reactNative.fireEvent.press(chips[1]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton.props.disabled).toBeFalsy();
  }));
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render5.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }));
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId,
      findByTestId = _render6.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', [{
      text: '확인',
      onPress: expect.any(Function)
    }]);
  }));
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render7.getAllByTestId,
      findByTestId = _render7.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
    });
  }));
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render8.getAllByTestId,
      findByTestId = _render8.findByTestId;
    var chips;
    yield (0, _reactNative.waitFor)(function () {
      chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton.props.disabled).toBeFalsy();
    _reactNative.fireEvent.press(chips[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.disabled).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,