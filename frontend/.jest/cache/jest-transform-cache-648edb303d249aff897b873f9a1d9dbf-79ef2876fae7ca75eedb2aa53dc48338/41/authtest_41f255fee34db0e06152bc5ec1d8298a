2bf420a8d1c98e2f75d2b0c3008e411f
_getJestObj().mock("../../src/utils/storage", function () {
  return {
    setAuthToken: jest.fn(),
    setUserData: jest.fn(),
    removeAuthToken: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _auth = require("../../src/store/auth");
var _storage = require("../../src/utils/storage");
var _types = require("../../src/store/types");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockFetch = jest.fn();
global.fetch = mockFetch;
describe('인증 관련 함수', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('login', function () {
    var dispatch = jest.fn();
    var email = 'test@example.com';
    var password = 'password123';
    test('로그인 성공 시 토큰과 사용자 데이터를 저장하고 상태를 업데이트한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue({
          token: 'test-token',
          user: {
            id: 1,
            username: 'test',
            email: email
          }
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      yield (0, _auth.login)(dispatch, email, password);
      expect(mockFetch).toHaveBeenCalledWith('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: email,
          password: password
        })
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.CLEAR_ERROR
      });
      expect(_storage.setAuthToken).toHaveBeenCalledWith('test-token');
      expect(_storage.setUserData).toHaveBeenCalledWith({
        id: 1,
        username: 'test',
        email: email
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_AUTHENTICATED,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_USER,
        payload: {
          id: 1,
          username: 'test',
          email: email
        }
      });
    }));
    test('로그인 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 401,
        json: jest.fn().mockResolvedValue({
          message: '이메일 또는 비밀번호가 잘못되었습니다.'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _auth.login)(dispatch, email, password);
        fail('로그인 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.CLEAR_ERROR
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '로그인에 실패했습니다.'
        });
        expect(_storage.setAuthToken).not.toHaveBeenCalled();
        expect(_storage.setUserData).not.toHaveBeenCalled();
      }
    }));
  });
  describe('logout', function () {
    var dispatch = jest.fn();
    test('로그아웃 시 토큰을 제거하고 상태를 초기화한다', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _auth.logout)(dispatch);
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(_storage.removeAuthToken).toHaveBeenCalled();
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.RESET_STATE
      });
    }));
    test('토큰 제거 중 오류 발생 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      _storage.removeAuthToken.mockRejectedValue(new Error('토큰 제거 오류'));
      yield (0, _auth.logout)(dispatch);
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_ERROR,
        payload: '로그아웃 중 오류가 발생했습니다.'
      });
    }));
  });
  describe('register', function () {
    var dispatch = jest.fn();
    var userData = {
      username: 'newuser',
      email: 'newuser@example.com',
      password: 'password123',
      nickname: 'New User'
    };
    test('회원가입 성공 시 응답 데이터를 반환한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue({
          message: '회원가입이 완료되었습니다.',
          user: {
            id: 2,
            username: userData.username,
            email: userData.email,
            nickname: userData.nickname
          }
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      var result = yield (0, _auth.register)(dispatch, userData);
      expect(mockFetch).toHaveBeenCalledWith('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.CLEAR_ERROR
      });
      expect(result).toEqual({
        message: '회원가입이 완료되었습니다.',
        user: {
          id: 2,
          username: userData.username,
          email: userData.email,
          nickname: userData.nickname
        }
      });
    }));
    test('회원가입 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 400,
        json: jest.fn().mockResolvedValue({
          message: '이미 사용 중인 이메일입니다.'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _auth.register)(dispatch, userData);
        fail('회원가입 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.CLEAR_ERROR
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '회원가입에 실패했습니다.'
        });
      }
    }));
  });
  describe('getCurrentUser', function () {
    var dispatch = jest.fn();
    test('사용자 정보 가져오기 성공 시 상태를 업데이트한다', (0, _asyncToGenerator2.default)(function* () {
      var mockUser = {
        id: 1,
        username: 'test',
        email: 'test@example.com'
      };
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue(mockUser)
      };
      mockFetch.mockResolvedValue(mockResponse);
      var result = yield (0, _auth.getCurrentUser)(dispatch);
      expect(mockFetch).toHaveBeenCalledWith('/api/users/me', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_USER,
        payload: mockUser
      });
      expect(result).toEqual(mockUser);
    }));
    test('사용자 정보 가져오기 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 401,
        json: jest.fn().mockResolvedValue({
          message: '인증이 필요합니다.'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _auth.getCurrentUser)(dispatch);
        fail('사용자 정보 가져오기 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '사용자 정보를 가져오는데 실패했습니다.'
        });
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,