ecc64e5bce77198f41a127dc47aca4f3
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var config = {
  preset: 'react-native',
  testEnvironment: 'jsdom',
  transform: {
    '^.+\\.(ts|tsx)$': ['ts-jest', {
      tsconfig: 'tsconfig.json',
      isolatedModules: true
    }],
    '^.+\\.(js|jsx)$': ['babel-jest', {
      configFile: './babel.config.js'
    }]
  },
  transformIgnorePatterns: ['node_modules/(?!(react-native|@react-native|@react-native-community|react-native-vector-icons|react-native-paper|@react-navigation|react-native-reanimated|react-native-gesture-handler)/)'],
  moduleNameMapper: {
    "\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/__mocks__/fileMock.js",
    'axios-mock-adapter': '<rootDir>/node_modules/axios-mock-adapter',
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@components/(.*)$': '<rootDir>/src/components/$1',
    '^@screens/(.*)$': '<rootDir>/src/screens/$1',
    '^@contexts/(.*)$': '<rootDir>/src/contexts/$1',
    '^@services/(.*)$': '<rootDir>/src/services/$1',
    '^src/(.*)$': '<rootDir>/src/$1'
  },
  setupFiles: ['<rootDir>/jest.setup.ts'],
  testMatch: ["**/__tests__/**/*.test.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)"],
  testPathIgnorePatterns: ["/node_modules/", "/dist/"],
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  globals: {
    'ts-jest': {
      tsconfig: 'tsconfig.json',
      isolatedModules: true
    },
    __DEV__: true
  },
  cacheDirectory: '.jest/cache',
  testTimeout: 10000,
  maxWorkers: 2,
  maxConcurrency: 2
};
var _default = exports.default = config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25maWciLCJwcmVzZXQiLCJ0ZXN0RW52aXJvbm1lbnQiLCJ0cmFuc2Zvcm0iLCJ0c2NvbmZpZyIsImlzb2xhdGVkTW9kdWxlcyIsImNvbmZpZ0ZpbGUiLCJ0cmFuc2Zvcm1JZ25vcmVQYXR0ZXJucyIsIm1vZHVsZU5hbWVNYXBwZXIiLCJzZXR1cEZpbGVzIiwidGVzdE1hdGNoIiwidGVzdFBhdGhJZ25vcmVQYXR0ZXJucyIsIm1vZHVsZUZpbGVFeHRlbnNpb25zIiwiZ2xvYmFscyIsIl9fREVWX18iLCJjYWNoZURpcmVjdG9yeSIsInRlc3RUaW1lb3V0IiwibWF4V29ya2VycyIsIm1heENvbmN1cnJlbmN5IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkVtb3Rpb25TZWxlY3Rvci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbmZpZyB9IGZyb20gJ0BqZXN0L3R5cGVzJztcclxuXHJcbmNvbnN0IGNvbmZpZzogQ29uZmlnLkluaXRpYWxPcHRpb25zID0ge1xyXG4gIHByZXNldDogJ3JlYWN0LW5hdGl2ZScsXHJcbiAgdGVzdEVudmlyb25tZW50OiAnanNkb20nLCAvLyBqc2RvbeycvOuhnCDshKTsoJVcclxuICB0cmFuc2Zvcm06IHtcclxuICAgICdeLitcXFxcLih0c3x0c3gpJCc6IFtcclxuICAgICAgJ3RzLWplc3QnLFxyXG4gICAgICB7XHJcbiAgICAgICAgdHNjb25maWc6ICd0c2NvbmZpZy5qc29uJyxcclxuICAgICAgICBpc29sYXRlZE1vZHVsZXM6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgJ14uK1xcXFwuKGpzfGpzeCkkJzogWydiYWJlbC1qZXN0JywgeyBjb25maWdGaWxlOiAnLi9iYWJlbC5jb25maWcuanMnIH1dLFxyXG4gIH0sXHJcbiAgdHJhbnNmb3JtSWdub3JlUGF0dGVybnM6IFtcclxuICAgICdub2RlX21vZHVsZXMvKD8hKHJlYWN0LW5hdGl2ZXxAcmVhY3QtbmF0aXZlfEByZWFjdC1uYXRpdmUtY29tbXVuaXR5fHJlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnN8cmVhY3QtbmF0aXZlLXBhcGVyfEByZWFjdC1uYXZpZ2F0aW9ufHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkfHJlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIpLyknLFxyXG4gIF0sXHJcbiAgbW9kdWxlTmFtZU1hcHBlcjoge1xyXG4gICAgXCJcXFxcLihqcGd8anBlZ3xwbmd8Z2lmfGVvdHxvdGZ8d2VicHxzdmd8dHRmfHdvZmZ8d29mZjJ8bXA0fHdlYm18d2F2fG1wM3xtNGF8YWFjfG9nYSkkXCI6IFwiPHJvb3REaXI+L19fbW9ja3NfXy9maWxlTW9jay5qc1wiLFxyXG4gICAgJ2F4aW9zLW1vY2stYWRhcHRlcic6ICc8cm9vdERpcj4vbm9kZV9tb2R1bGVzL2F4aW9zLW1vY2stYWRhcHRlcicsXHJcbiAgICAnXkAvKC4qKSQnOiAnPHJvb3REaXI+L3NyYy8kMScsXHJcbiAgICAnXkBjb21wb25lbnRzLyguKikkJzogJzxyb290RGlyPi9zcmMvY29tcG9uZW50cy8kMScsXHJcbiAgICAnXkBzY3JlZW5zLyguKikkJzogJzxyb290RGlyPi9zcmMvc2NyZWVucy8kMScsXHJcbiAgICAnXkBjb250ZXh0cy8oLiopJCc6ICc8cm9vdERpcj4vc3JjL2NvbnRleHRzLyQxJyxcclxuICAgICdeQHNlcnZpY2VzLyguKikkJzogJzxyb290RGlyPi9zcmMvc2VydmljZXMvJDEnLFxyXG4gICAgJ15zcmMvKC4qKSQnOiAnPHJvb3REaXI+L3NyYy8kMSdcclxuICB9LFxyXG4gIHNldHVwRmlsZXM6IFtcclxuICAgICc8cm9vdERpcj4vamVzdC5zZXR1cC50cydcclxuICBdLFxyXG4gIHRlc3RNYXRjaDogW1xyXG4gICAgXCIqKi9fX3Rlc3RzX18vKiovKi50ZXN0LltqdF1zPyh4KVwiLCBcclxuICAgIFwiKiovPygqLikrKHNwZWN8dGVzdCkuW2p0XXM/KHgpXCJcclxuICBdLFxyXG4gIHRlc3RQYXRoSWdub3JlUGF0dGVybnM6IFtcclxuICAgIFwiL25vZGVfbW9kdWxlcy9cIiwgXHJcbiAgICBcIi9kaXN0L1wiXHJcbiAgXSxcclxuICBtb2R1bGVGaWxlRXh0ZW5zaW9uczogWyd0cycsICd0c3gnLCAnanMnLCAnanN4JywgJ2pzb24nLCAnbm9kZSddLFxyXG4gIGdsb2JhbHM6IHtcclxuICAgICd0cy1qZXN0Jzoge1xyXG4gICAgICB0c2NvbmZpZzogJ3RzY29uZmlnLmpzb24nLFxyXG4gICAgICBpc29sYXRlZE1vZHVsZXM6IHRydWUsXHJcbiAgICB9LFxyXG4gICAgX19ERVZfXzogdHJ1ZVxyXG4gIH0sXHJcbiAgY2FjaGVEaXJlY3Rvcnk6ICcuamVzdC9jYWNoZScsXHJcbiAgdGVzdFRpbWVvdXQ6IDEwMDAwLFxyXG4gIG1heFdvcmtlcnM6IDIsXHJcbiAgbWF4Q29uY3VycmVuY3k6IDIsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25maWc7Il0sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBTUEsTUFBNkIsR0FBRztFQUNwQ0MsTUFBTSxFQUFFLGNBQWM7RUFDdEJDLGVBQWUsRUFBRSxPQUFPO0VBQ3hCQyxTQUFTLEVBQUU7SUFDVCxpQkFBaUIsRUFBRSxDQUNqQixTQUFTLEVBQ1Q7TUFDRUMsUUFBUSxFQUFFLGVBQWU7TUFDekJDLGVBQWUsRUFBRTtJQUNuQixDQUFDLENBQ0Y7SUFDRCxpQkFBaUIsRUFBRSxDQUFDLFlBQVksRUFBRTtNQUFFQyxVQUFVLEVBQUU7SUFBb0IsQ0FBQztFQUN2RSxDQUFDO0VBQ0RDLHVCQUF1QixFQUFFLENBQ3ZCLDRMQUE0TCxDQUM3TDtFQUNEQyxnQkFBZ0IsRUFBRTtJQUNoQixxRkFBcUYsRUFBRSxpQ0FBaUM7SUFDeEgsb0JBQW9CLEVBQUUsMkNBQTJDO0lBQ2pFLFVBQVUsRUFBRSxrQkFBa0I7SUFDOUIsb0JBQW9CLEVBQUUsNkJBQTZCO0lBQ25ELGlCQUFpQixFQUFFLDBCQUEwQjtJQUM3QyxrQkFBa0IsRUFBRSwyQkFBMkI7SUFDL0Msa0JBQWtCLEVBQUUsMkJBQTJCO0lBQy9DLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBQ0RDLFVBQVUsRUFBRSxDQUNWLHlCQUF5QixDQUMxQjtFQUNEQyxTQUFTLEVBQUUsQ0FDVCxrQ0FBa0MsRUFDbEMsZ0NBQWdDLENBQ2pDO0VBQ0RDLHNCQUFzQixFQUFFLENBQ3RCLGdCQUFnQixFQUNoQixRQUFRLENBQ1Q7RUFDREMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztFQUNoRUMsT0FBTyxFQUFFO0lBQ1AsU0FBUyxFQUFFO01BQ1RULFFBQVEsRUFBRSxlQUFlO01BQ3pCQyxlQUFlLEVBQUU7SUFDbkIsQ0FBQztJQUNEUyxPQUFPLEVBQUU7RUFDWCxDQUFDO0VBQ0RDLGNBQWMsRUFBRSxhQUFhO0VBQzdCQyxXQUFXLEVBQUUsS0FBSztFQUNsQkMsVUFBVSxFQUFFLENBQUM7RUFDYkMsY0FBYyxFQUFFO0FBQ2xCLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVhckIsTUFBTSIsImlnbm9yZUxpc3QiOltdfQ==