e97ff0b0529860e1c5d87dcf79aae1aa
_getJestObj().mock("../../src/services/api/notificationService", function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    deleteNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _useNotification = (0, _NotificationContext.useNotification)(),
    notifications = _useNotification.notifications,
    unreadCount = _useNotification.unreadCount,
    isLoading = _useNotification.isLoading,
    error = _useNotification.error,
    markAsRead = _useNotification.markAsRead,
    markAllAsRead = _useNotification.markAllAsRead,
    deleteNotification = _useNotification.deleteNotification;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading",
      children: isLoading ? 'loading' : 'not-loading'
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "error",
      children: error || 'no-error'
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "unread-count",
      children: unreadCount.toString()
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "notifications-count",
      children: notifications.length.toString()
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "mark-read",
      onPress: function onPress() {
        return markAsRead(1);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Mark Read"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "mark-all-read",
      onPress: function onPress() {
        return markAllAsRead();
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Mark All Read"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "delete-notification",
      onPress: function onPress() {
        return deleteNotification(1);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Delete"
      })
    })]
  });
};
describe('NotificationContext', function () {
  var mockNotifications = [{
    id: 1,
    user_id: 1,
    content: 'Test notification 1',
    notification_type: 'like',
    is_read: false,
    created_at: '2024-01-01T00:00:00Z'
  }, {
    id: 2,
    user_id: 1,
    content: 'Test notification 2',
    notification_type: 'comment',
    is_read: true,
    created_at: '2024-01-02T00:00:00Z'
  }];
  beforeEach(function () {
    jest.useFakeTimers();
    jest.clearAllMocks();
    jest.spyOn(global, 'setInterval').mockImplementation(function () {
      return {};
    });
    _notificationService.default.getNotifications.mockResolvedValue({
      data: mockNotifications
    });
    _notificationService.default.markAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.deleteNotification.mockResolvedValue({
      success: true
    });
  });
  afterEach(function () {
    jest.clearAllTimers();
    jest.useRealTimers();
  });
  it('initializes with correct data', (0, _asyncToGenerator2.default)(function* () {
    var component;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      jest.advanceTimersByTime(100);
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(100);
    }));
    expect(_notificationService.default.getNotifications).toHaveBeenCalled();
    var notificationsCountElement = component.getByTestId('notifications-count');
    var unreadCountElement = component.getByTestId('unread-count');
    var errorElement = component.getByTestId('error');
    expect(notificationsCountElement.props.children).toBe('2');
    expect(unreadCountElement.props.children).toBe('1');
    expect(errorElement.props.children).toBe('no-error');
  }));
  it('can mark a notification as read', (0, _asyncToGenerator2.default)(function* () {
    var component;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      jest.advanceTimersByTime(100);
    }));
    var markReadButton = component.getByTestId('mark-read');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      markReadButton.props.onPress();
      jest.advanceTimersByTime(100);
    }));
    expect(_notificationService.default.markAsRead).toHaveBeenCalledWith(1);
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('can mark all notifications as read', (0, _asyncToGenerator2.default)(function* () {
    var component;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      jest.advanceTimersByTime(100);
    }));
    var markAllReadButton = component.getByTestId('mark-all-read');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      markAllReadButton.props.onPress();
      jest.advanceTimersByTime(100);
    }));
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('can delete a notification', (0, _asyncToGenerator2.default)(function* () {
    var component;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
      jest.advanceTimersByTime(100);
    }));
    var deleteButton = component.getByTestId('delete-notification');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      deleteButton.props.onPress();
      jest.advanceTimersByTime(100);
    }));
    expect(_notificationService.default.deleteNotification).toHaveBeenCalledWith(1);
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,