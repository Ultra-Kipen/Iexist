482e396e29bf1e387c61c94e8cf8e553
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toHaveTextContent = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
function collectNormalizedText(element) {
  var childrenText = collectChildrenText(element).join('');
  return (0, utils_1.normalize)(childrenText);
}
function collectChildrenText(element) {
  if (typeof element === 'string') return [element];
  if (!(element != null && element.children)) return [];
  var result = [];
  element.children.forEach(function (child) {
    result.push.apply(result, (0, _toConsumableArray2.default)(collectChildrenText(child)));
  });
  return result;
}
function toHaveTextContent(element, checkWith) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toHaveTextContent, this);
  var textContent = collectNormalizedText(element);
  return {
    pass: (0, utils_1.matches)(textContent, checkWith),
    message: function message() {
      var to = _this.isNot ? 'not to' : 'to';
      return (0, utils_1.getMessage)((0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), `Expected element ${to} have text content`, checkWith, 'Received', textContent);
    }
  };
}
exports.toHaveTextContent = toHaveTextContent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvSGF2ZVRleHRDb250ZW50IiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJ1dGlsc18xIiwiY29sbGVjdE5vcm1hbGl6ZWRUZXh0IiwiZWxlbWVudCIsImNoaWxkcmVuVGV4dCIsImNvbGxlY3RDaGlsZHJlblRleHQiLCJqb2luIiwibm9ybWFsaXplIiwiY2hpbGRyZW4iLCJyZXN1bHQiLCJmb3JFYWNoIiwiY2hpbGQiLCJwdXNoIiwiYXBwbHkiLCJkZWZhdWx0IiwiY2hlY2tXaXRoIiwiX3RoaXMiLCJjaGVja1JlYWN0RWxlbWVudCIsInRleHRDb250ZW50IiwicGFzcyIsIm1hdGNoZXMiLCJtZXNzYWdlIiwidG8iLCJpc05vdCIsImdldE1lc3NhZ2UiLCJtYXRjaGVySGludCJdLCJzb3VyY2VzIjpbInRvLWhhdmUtdGV4dC1jb250ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0hhdmVUZXh0Q29udGVudCA9IHZvaWQgMDtcbmNvbnN0IGplc3RfbWF0Y2hlcl91dGlsc18xID0gcmVxdWlyZShcImplc3QtbWF0Y2hlci11dGlsc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGNvbGxlY3ROb3JtYWxpemVkVGV4dChlbGVtZW50KSB7XG4gICAgY29uc3QgY2hpbGRyZW5UZXh0ID0gY29sbGVjdENoaWxkcmVuVGV4dChlbGVtZW50KS5qb2luKCcnKTtcbiAgICByZXR1cm4gKDAsIHV0aWxzXzEubm9ybWFsaXplKShjaGlsZHJlblRleHQpO1xufVxuZnVuY3Rpb24gY29sbGVjdENoaWxkcmVuVGV4dChlbGVtZW50KSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIFtlbGVtZW50XTtcbiAgICBpZiAoIWVsZW1lbnQ/LmNoaWxkcmVuKVxuICAgICAgICByZXR1cm4gW107XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZWxlbWVudC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICByZXN1bHQucHVzaCguLi5jb2xsZWN0Q2hpbGRyZW5UZXh0KGNoaWxkKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvSGF2ZVRleHRDb250ZW50KGVsZW1lbnQsIGNoZWNrV2l0aCkge1xuICAgICgwLCB1dGlsc18xLmNoZWNrUmVhY3RFbGVtZW50KShlbGVtZW50LCB0b0hhdmVUZXh0Q29udGVudCwgdGhpcyk7XG4gICAgY29uc3QgdGV4dENvbnRlbnQgPSBjb2xsZWN0Tm9ybWFsaXplZFRleHQoZWxlbWVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogKDAsIHV0aWxzXzEubWF0Y2hlcykodGV4dENvbnRlbnQsIGNoZWNrV2l0aCksXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRvID0gdGhpcy5pc05vdCA/ICdub3QgdG8nIDogJ3RvJztcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5nZXRNZXNzYWdlKSgoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEubWF0Y2hlckhpbnQpKGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9IYXZlVGV4dENvbnRlbnRgLCAnZWxlbWVudCcsICcnKSwgYEV4cGVjdGVkIGVsZW1lbnQgJHt0b30gaGF2ZSB0ZXh0IGNvbnRlbnRgLCBjaGVja1dpdGgsICdSZWNlaXZlZCcsIHRleHRDb250ZW50KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0hhdmVUZXh0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