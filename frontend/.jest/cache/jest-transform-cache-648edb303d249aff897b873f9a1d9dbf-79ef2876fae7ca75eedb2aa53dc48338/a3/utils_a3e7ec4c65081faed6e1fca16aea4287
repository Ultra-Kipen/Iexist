ac8c114693a14ad421d73054d4933182
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterConfig = filterConfig;
exports.transformIntoHandlerTags = transformIntoHandlerTags;
exports.findNodeHandle = findNodeHandle;
exports.scheduleFlushOperations = scheduleFlushOperations;
var _reactNative = require("react-native");
var _handlersRegistry = require("./handlersRegistry");
var _utils = require("../utils");
var _RNGestureHandlerModule = _interopRequireDefault(require("../RNGestureHandlerModule"));
var _ghQueueMicrotask = require("../ghQueueMicrotask");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function isConfigParam(param, name) {
  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';
}
function filterConfig(props, validProps) {
  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var filteredConfig = Object.assign({}, defaults);
  for (var key of validProps) {
    var value = props[key];
    if (isConfigParam(value, key)) {
      if (key === 'simultaneousHandlers' || key === 'waitFor') {
        value = transformIntoHandlerTags(props[key]);
      } else if (key === 'hitSlop' && typeof value !== 'object') {
        value = {
          top: value,
          left: value,
          bottom: value,
          right: value
        };
      }
      filteredConfig[key] = value;
    }
  }
  return filteredConfig;
}
function transformIntoHandlerTags(handlerIDs) {
  handlerIDs = (0, _utils.toArray)(handlerIDs);
  if (_reactNative.Platform.OS === 'web') {
    return handlerIDs.map(function (_ref) {
      var current = _ref.current;
      return current;
    }).filter(function (handle) {
      return handle;
    });
  }
  return handlerIDs.map(function (handlerID) {
    var _handlerID$current;
    return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;
  }).filter(function (handlerTag) {
    return handlerTag > 0;
  });
}
function findNodeHandle(node) {
  if (_reactNative.Platform.OS === 'web') {
    return node;
  }
  return (0, _reactNative.findNodeHandle)(node);
}
var flushOperationsScheduled = false;
function scheduleFlushOperations() {
  if (!flushOperationsScheduled) {
    flushOperationsScheduled = true;
    (0, _ghQueueMicrotask.ghQueueMicrotask)(function () {
      _RNGestureHandlerModule.default.flushOperations();
      flushOperationsScheduled = false;
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2hhbmRsZXJzUmVnaXN0cnkiLCJfdXRpbHMiLCJfUk5HZXN0dXJlSGFuZGxlck1vZHVsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZ2hRdWV1ZU1pY3JvdGFzayIsImlzQ29uZmlnUGFyYW0iLCJwYXJhbSIsIm5hbWUiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJmaWx0ZXJDb25maWciLCJwcm9wcyIsInZhbGlkUHJvcHMiLCJkZWZhdWx0cyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZpbHRlcmVkQ29uZmlnIiwiYXNzaWduIiwia2V5IiwidmFsdWUiLCJ0cmFuc2Zvcm1JbnRvSGFuZGxlclRhZ3MiLCJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiLCJoYW5kbGVySURzIiwidG9BcnJheSIsIlBsYXRmb3JtIiwiT1MiLCJtYXAiLCJfcmVmIiwiY3VycmVudCIsImZpbHRlciIsImhhbmRsZSIsImhhbmRsZXJJRCIsIl9oYW5kbGVySUQkY3VycmVudCIsImhhbmRsZXJJRFRvVGFnIiwiaGFuZGxlclRhZyIsImZpbmROb2RlSGFuZGxlIiwibm9kZSIsImZsdXNoT3BlcmF0aW9uc1NjaGVkdWxlZCIsInNjaGVkdWxlRmx1c2hPcGVyYXRpb25zIiwiZ2hRdWV1ZU1pY3JvdGFzayIsImRlZmF1bHQiLCJmbHVzaE9wZXJhdGlvbnMiXSwic291cmNlcyI6WyJ1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQbGF0Zm9ybSwgZmluZE5vZGVIYW5kbGUgYXMgZmluZE5vZGVIYW5kbGVSTiB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBoYW5kbGVySURUb1RhZyB9IGZyb20gJy4vaGFuZGxlcnNSZWdpc3RyeSc7XG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IFJOR2VzdHVyZUhhbmRsZXJNb2R1bGUgZnJvbSAnLi4vUk5HZXN0dXJlSGFuZGxlck1vZHVsZSc7XG5pbXBvcnQgeyBnaFF1ZXVlTWljcm90YXNrIH0gZnJvbSAnLi4vZ2hRdWV1ZU1pY3JvdGFzayc7XG5cbmZ1bmN0aW9uIGlzQ29uZmlnUGFyYW0ocGFyYW06IHVua25vd24sIG5hbWU6IHN0cmluZykge1xuICAvLyBwYXJhbSAhPT0gT2JqZWN0KHBhcmFtKSByZXR1cm5zIGZhbHNlIGlmIGBwYXJhbWAgaXMgYSBmdW5jdGlvblxuICAvLyBvciBhbiBvYmplY3QgYW5kIHJldHVybnMgdHJ1ZSBpZiBgcGFyYW1gIGlzIG51bGxcbiAgcmV0dXJuIChcbiAgICBwYXJhbSAhPT0gdW5kZWZpbmVkICYmXG4gICAgKHBhcmFtICE9PSBPYmplY3QocGFyYW0pIHx8XG4gICAgICAhKCdfX2lzTmF0aXZlJyBpbiAocGFyYW0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pKSkgJiZcbiAgICBuYW1lICE9PSAnb25IYW5kbGVyU3RhdGVDaGFuZ2UnICYmXG4gICAgbmFtZSAhPT0gJ29uR2VzdHVyZUV2ZW50J1xuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyQ29uZmlnKFxuICBwcm9wczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gIHZhbGlkUHJvcHM6IHN0cmluZ1tdLFxuICBkZWZhdWx0czogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fVxuKSB7XG4gIGNvbnN0IGZpbHRlcmVkQ29uZmlnID0geyAuLi5kZWZhdWx0cyB9O1xuICBmb3IgKGNvbnN0IGtleSBvZiB2YWxpZFByb3BzKSB7XG4gICAgbGV0IHZhbHVlID0gcHJvcHNba2V5XTtcbiAgICBpZiAoaXNDb25maWdQYXJhbSh2YWx1ZSwga2V5KSkge1xuICAgICAgaWYgKGtleSA9PT0gJ3NpbXVsdGFuZW91c0hhbmRsZXJzJyB8fCBrZXkgPT09ICd3YWl0Rm9yJykge1xuICAgICAgICB2YWx1ZSA9IHRyYW5zZm9ybUludG9IYW5kbGVyVGFncyhwcm9wc1trZXldKTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaGl0U2xvcCcgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB2YWx1ZSA9IHsgdG9wOiB2YWx1ZSwgbGVmdDogdmFsdWUsIGJvdHRvbTogdmFsdWUsIHJpZ2h0OiB2YWx1ZSB9O1xuICAgICAgfVxuICAgICAgZmlsdGVyZWRDb25maWdba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlsdGVyZWRDb25maWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1JbnRvSGFuZGxlclRhZ3MoaGFuZGxlcklEczogYW55KSB7XG4gIGhhbmRsZXJJRHMgPSB0b0FycmF5KGhhbmRsZXJJRHMpO1xuXG4gIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ3dlYicpIHtcbiAgICByZXR1cm4gaGFuZGxlcklEc1xuICAgICAgLm1hcCgoeyBjdXJyZW50IH06IHsgY3VycmVudDogYW55IH0pID0+IGN1cnJlbnQpXG4gICAgICAuZmlsdGVyKChoYW5kbGU6IGFueSkgPT4gaGFuZGxlKTtcbiAgfVxuICAvLyBjb252ZXJ0cyBoYW5kbGVyIHN0cmluZyBJRHMgaW50byB0aGVpciBudW1lcmljIHRhZ3NcbiAgcmV0dXJuIGhhbmRsZXJJRHNcbiAgICAubWFwKFxuICAgICAgKGhhbmRsZXJJRDogYW55KSA9PlxuICAgICAgICBoYW5kbGVySURUb1RhZ1toYW5kbGVySURdIHx8IGhhbmRsZXJJRC5jdXJyZW50Py5oYW5kbGVyVGFnIHx8IC0xXG4gICAgKVxuICAgIC5maWx0ZXIoKGhhbmRsZXJUYWc6IG51bWJlcikgPT4gaGFuZGxlclRhZyA+IDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZE5vZGVIYW5kbGUoXG4gIG5vZGU6IG51bGwgfCBudW1iZXIgfCBSZWFjdC5Db21wb25lbnQ8YW55LCBhbnk+IHwgUmVhY3QuQ29tcG9uZW50Q2xhc3M8YW55PlxuKTogbnVsbCB8IG51bWJlciB8IFJlYWN0LkNvbXBvbmVudDxhbnksIGFueT4gfCBSZWFjdC5Db21wb25lbnRDbGFzczxhbnk+IHtcbiAgaWYgKFBsYXRmb3JtLk9TID09PSAnd2ViJykge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIHJldHVybiBmaW5kTm9kZUhhbmRsZVJOKG5vZGUpO1xufVxubGV0IGZsdXNoT3BlcmF0aW9uc1NjaGVkdWxlZCA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVGbHVzaE9wZXJhdGlvbnMoKSB7XG4gIGlmICghZmx1c2hPcGVyYXRpb25zU2NoZWR1bGVkKSB7XG4gICAgZmx1c2hPcGVyYXRpb25zU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBnaFF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgIFJOR2VzdHVyZUhhbmRsZXJNb2R1bGUuZmx1c2hPcGVyYXRpb25zKCk7XG5cbiAgICAgIGZsdXNoT3BlcmF0aW9uc1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLGlCQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyx1QkFBQSxHQUFBQyxzQkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssaUJBQUEsR0FBQUwsT0FBQTs7Ozs7O0FBRUEsU0FBU00sYUFBVEEsQ0FBdUJDLEtBQXZCLEVBQXVDQyxJQUF2QyxFQUFxRDtFQUduRCxPQUNFRCxLQUFLLEtBQUtFLFNBQVYsS0FDQ0YsS0FBSyxLQUFLRyxNQUFNLENBQUNILEtBQUQsQ0FBaEIsSUFDQyxFQUFFLGdCQUFpQkEsS0FBbkIsQ0FGRixLQUdBQyxJQUFJLEtBQUssc0JBSFQsSUFJQUEsSUFBSSxLQUFLLGdCQUxYO0FBT0Q7QUFFTSxTQUFTRyxZQUFUQSxDQUNMQyxLQURLLEVBRUxDLFVBRkssRUFJTDtFQUFBLElBREFDLFFBQWlDLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFOLFNBQUEsR0FBQU0sU0FBQSxNQUFHLEVBSC9CO0VBS0wsSUFBTUUsY0FBYyxHQUFBUCxNQUFBLENBQUFRLE1BQUEsS0FBUUosUUFBQSxDQUE1QjtFQUNBLEtBQUssSUFBTUssR0FBWCxJQUFrQk4sVUFBbEIsRUFBOEI7SUFDNUIsSUFBSU8sS0FBSyxHQUFHUixLQUFLLENBQUNPLEdBQUQsQ0FBakI7SUFDQSxJQUFJYixhQUFhLENBQUNjLEtBQUQsRUFBUUQsR0FBUixDQUFqQixFQUErQjtNQUM3QixJQUFJQSxHQUFHLEtBQUssc0JBQVIsSUFBa0NBLEdBQUcsS0FBSyxTQUE5QyxFQUF5RDtRQUN2REMsS0FBSyxHQUFHQyx3QkFBd0IsQ0FBQ1QsS0FBSyxDQUFDTyxHQUFELENBQU4sQ0FBaEM7TUFDRCxDQUZELE1BRU8sSUFBSUEsR0FBRyxLQUFLLFNBQVIsSUFBcUIsT0FBT0MsS0FBUCxLQUFpQixRQUExQyxFQUFvRDtRQUN6REEsS0FBSyxHQUFHO1VBQUVFLEdBQUcsRUFBRUYsS0FBUDtVQUFjRyxJQUFJLEVBQUVILEtBQXBCO1VBQTJCSSxNQUFNLEVBQUVKLEtBQW5DO1VBQTBDSyxLQUFLLEVBQUVMO1FBQWpELENBQVI7TUFDRDtNQUNESCxjQUFjLENBQUNFLEdBQUQsQ0FBZCxHQUFzQkMsS0FBdEI7SUFDRDtFQUNGO0VBQ0QsT0FBT0gsY0FBUDtBQUNEO0FBRU0sU0FBU0ksd0JBQVRBLENBQWtDSyxVQUFsQyxFQUFtRDtFQUN4REEsVUFBVSxHQUFHLElBQUF4QixNQUFBLENBQUF5QixPQUFBLEVBQVFELFVBQVIsQ0FBYjtFQUVBLElBQUkzQixZQUFBLENBQUE2QixRQUFBLENBQVNDLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7SUFDekIsT0FBT0gsVUFBVSxDQUNkSSxHQURJLENBQ0EsVUFBQUMsSUFBQTtNQUFBLElBQUdDLE9BQUEsR0FBQUQsSUFBQSxDQUFBQyxPQUFBO01BQUEsT0FBZ0NBLE9BRG5DO0lBQUEsR0FFSkMsTUFGSSxDQUVJLFVBQUFDLE1BQUQ7TUFBQSxPQUFpQkEsTUFGcEI7SUFBQSxFQUFQO0VBR0Q7RUFFRCxPQUFPUixVQUFVLENBQ2RJLEdBREksQ0FFRixVQUFBSyxTQUFEO0lBQUEsSUFBQUMsa0JBQUE7SUFBQSxPQUNFbkMsaUJBQUEsQ0FBQW9DLGNBQUEsQ0FBZUYsU0FBZixPQUFBQyxrQkFBQSxHQUE2QkQsU0FBUyxDQUFDSCxPQUF2QyxjQUFBSSxrQkFBQSx1QkFBNkJBLGtCQUFBLENBQW1CRSxVQUFoRCxLQUE4RCxDQUFDLENBRGpFO0VBQUEsQ0FGRyxFQUtKTCxNQUxJLENBS0ksVUFBQUssVUFBRDtJQUFBLE9BQXdCQSxVQUFVLEdBQUcsQ0FMeEM7RUFBQSxFQUFQO0FBTUQ7QUFFTSxTQUFTQyxjQUFUQSxDQUNMQyxJQURLLEVBRWtFO0VBQ3ZFLElBQUl6QyxZQUFBLENBQUE2QixRQUFBLENBQVNDLEVBQVQsS0FBZ0IsS0FBcEIsRUFBMkI7SUFDekIsT0FBT1csSUFBUDtFQUNEO0VBQ0QsT0FBTyxJQUFBekMsWUFBQSxDQUFBd0MsY0FBQSxFQUFpQkMsSUFBakIsQ0FBUDtBQUNEO0FBQ0QsSUFBSUMsd0JBQXdCLEdBQUcsS0FBL0I7QUFFTyxTQUFTQyx1QkFBVEEsQ0FBQSxFQUFtQztFQUN4QyxJQUFJLENBQUNELHdCQUFMLEVBQStCO0lBQzdCQSx3QkFBd0IsR0FBRyxJQUEzQjtJQUNBLElBQUFwQyxpQkFBQSxDQUFBc0MsZ0JBQUEsRUFBaUIsWUFBTTtNQUNyQnhDLHVCQUFBLENBQUF5QyxPQUFBLENBQXVCQyxlQUF2QjtNQUVBSix3QkFBd0IsR0FBRyxLQUEzQjtJQUNELENBSkQ7RUFLRDtBQUNGIiwiaWdub3JlTGlzdCI6W119