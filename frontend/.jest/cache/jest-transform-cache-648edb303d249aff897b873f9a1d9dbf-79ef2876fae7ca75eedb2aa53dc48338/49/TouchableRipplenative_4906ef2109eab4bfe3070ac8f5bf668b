d302573a324393ca8f7c6f0cb4fc3923
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["style", "background", "borderless", "disabled", "rippleColor", "underlayColor", "children", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Pressable = require("./Pressable");
var _utils = require("./utils");
var _settings = require("../../core/settings");
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _hasTouchHandler = _interopRequireDefault(require("../../utils/hasTouchHandler"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var ANDROID_VERSION_LOLLIPOP = 21;
var ANDROID_VERSION_PIE = 28;
var _TouchableRipple = function TouchableRipple(_ref, ref) {
  var style = _ref.style,
    background = _ref.background,
    _ref$borderless = _ref.borderless,
    borderless = _ref$borderless === void 0 ? false : _ref$borderless,
    disabledProp = _ref.disabled,
    rippleColor = _ref.rippleColor,
    underlayColor = _ref.underlayColor,
    children = _ref.children,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _React$useContext = React.useContext(_settings.SettingsContext),
    rippleEffectEnabled = _React$useContext.rippleEffectEnabled;
  var onPress = rest.onPress,
    onLongPress = rest.onLongPress,
    onPressIn = rest.onPressIn,
    onPressOut = rest.onPressOut;
  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: onPressIn,
    onPressOut: onPressOut
  });
  var disabled = disabledProp || !hasPassedTouchHandler;
  var _ref3 = (0, _utils.getTouchableRippleColors)({
      theme: theme,
      rippleColor: rippleColor,
      underlayColor: underlayColor
    }),
    calculatedRippleColor = _ref3.calculatedRippleColor,
    calculatedUnderlayColor = _ref3.calculatedUnderlayColor;
  var useForeground = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_PIE && borderless;
  if (_TouchableRipple.supported) {
    var androidRipple = rippleEffectEnabled ? background != null ? background : {
      color: calculatedRippleColor,
      borderless: borderless,
      foreground: useForeground
    } : undefined;
    return React.createElement(_Pressable.Pressable, _extends({}, rest, {
      ref: ref,
      disabled: disabled,
      style: [borderless && styles.overflowHidden, style],
      android_ripple: androidRipple
    }), React.Children.only(children));
  }
  return React.createElement(_Pressable.Pressable, _extends({}, rest, {
    ref: ref,
    disabled: disabled,
    style: [borderless && styles.overflowHidden, style]
  }), function (_ref2) {
    var pressed = _ref2.pressed;
    return React.createElement(React.Fragment, null, pressed && rippleEffectEnabled && React.createElement(_reactNative.View, {
      testID: "touchable-ripple-underlay",
      style: [styles.underlay, {
        backgroundColor: calculatedUnderlayColor
      }]
    }), React.Children.only(children));
  });
};
_TouchableRipple.supported = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;
var styles = _reactNative.StyleSheet.create({
  overflowHidden: {
    overflow: 'hidden'
  },
  underlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {
    zIndex: 2
  })
});
var Component = (0, _forwardRef.forwardRef)(_TouchableRipple);
var _default = Component;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,