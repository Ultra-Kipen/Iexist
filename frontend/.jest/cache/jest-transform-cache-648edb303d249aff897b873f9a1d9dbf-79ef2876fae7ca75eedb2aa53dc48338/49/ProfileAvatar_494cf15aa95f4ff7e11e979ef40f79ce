3e9c6d488e55067cdf26d0c21d6dc6fd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var ProfileAvatar = function ProfileAvatar(_ref) {
  var imageUrl = _ref.imageUrl,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 48 : _ref$size,
    name = _ref.name,
    _ref$showName = _ref.showName,
    showName = _ref$showName === void 0 ? false : _ref$showName,
    onPress = _ref.onPress,
    style = _ref.style,
    _ref$isAnonymous = _ref.isAnonymous,
    isAnonymous = _ref$isAnonymous === void 0 ? false : _ref$isAnonymous;
  var renderInitial = function renderInitial() {
    if (isAnonymous) {
      return '익';
    }
    if (name && name.length > 0) {
      return name.charAt(0).toUpperCase();
    }
    return '?';
  };
  var AvatarContainer = onPress ? _reactNative.TouchableOpacity : _reactNative.View;
  return (0, _jsxRuntime.jsxs)(AvatarContainer, {
    style: [styles.container, style],
    onPress: onPress,
    activeOpacity: onPress ? 0.8 : 1,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.avatar, isAnonymous && styles.anonymousAvatar, {
        width: size,
        height: size,
        borderRadius: size / 2
      }],
      children: imageUrl ? (0, _jsxRuntime.jsx)(_reactNative.Image, {
        source: {
          uri: imageUrl
        },
        style: [styles.image, {
          width: size,
          height: size,
          borderRadius: size / 2
        }]
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: [styles.initial, {
          fontSize: size / 2.5
        }],
        children: renderInitial()
      })
    }), showName && name && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.name,
      children: isAnonymous ? '익명' : name
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center'
  },
  avatar: {
    backgroundColor: '#E1EFF9',
    justifyContent: 'center',
    alignItems: 'center',
    overflow: 'hidden'
  },
  anonymousAvatar: {
    backgroundColor: '#F0F0F0'
  },
  image: {
    resizeMode: 'cover'
  },
  initial: {
    color: '#4A90E2',
    fontWeight: 'bold'
  },
  name: {
    marginTop: 4,
    fontSize: 12,
    color: '#333333'
  }
});
var _default = exports.default = ProfileAvatar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiUHJvZmlsZUF2YXRhciIsIl9yZWYiLCJpbWFnZVVybCIsIl9yZWYkc2l6ZSIsInNpemUiLCJuYW1lIiwiX3JlZiRzaG93TmFtZSIsInNob3dOYW1lIiwib25QcmVzcyIsInN0eWxlIiwiX3JlZiRpc0Fub255bW91cyIsImlzQW5vbnltb3VzIiwicmVuZGVySW5pdGlhbCIsImxlbmd0aCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiQXZhdGFyQ29udGFpbmVyIiwiVG91Y2hhYmxlT3BhY2l0eSIsIlZpZXciLCJqc3hzIiwic3R5bGVzIiwiY29udGFpbmVyIiwiYWN0aXZlT3BhY2l0eSIsImNoaWxkcmVuIiwianN4IiwiYXZhdGFyIiwiYW5vbnltb3VzQXZhdGFyIiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJJbWFnZSIsInNvdXJjZSIsInVyaSIsImltYWdlIiwiVGV4dCIsImluaXRpYWwiLCJmb250U2l6ZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJhbGlnbkl0ZW1zIiwiYmFja2dyb3VuZENvbG9yIiwianVzdGlmeUNvbnRlbnQiLCJvdmVyZmxvdyIsInJlc2l6ZU1vZGUiLCJjb2xvciIsImZvbnRXZWlnaHQiLCJtYXJnaW5Ub3AiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiUHJvZmlsZUF2YXRhci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2NvbXBvbmVudHMvUHJvZmlsZUF2YXRhci50c3hcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVmlldywgSW1hZ2UsIFRleHQsIFN0eWxlU2hlZXQsIFRvdWNoYWJsZU9wYWNpdHksIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcblxyXG5pbnRlcmZhY2UgUHJvZmlsZUF2YXRhclByb3BzIHtcclxuICBpbWFnZVVybD86IHN0cmluZztcclxuICBzaXplPzogbnVtYmVyO1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbiAgc2hvd05hbWU/OiBib29sZWFuO1xyXG4gIG9uUHJlc3M/OiAoKSA9PiB2b2lkO1xyXG4gIHN0eWxlPzogVmlld1N0eWxlO1xyXG4gIGlzQW5vbnltb3VzPzogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgUHJvZmlsZUF2YXRhcjogUmVhY3QuRkM8UHJvZmlsZUF2YXRhclByb3BzPiA9ICh7XHJcbiAgaW1hZ2VVcmwsXHJcbiAgc2l6ZSA9IDQ4LFxyXG4gIG5hbWUsXHJcbiAgc2hvd05hbWUgPSBmYWxzZSxcclxuICBvblByZXNzLFxyXG4gIHN0eWxlLFxyXG4gIGlzQW5vbnltb3VzID0gZmFsc2UsXHJcbn0pID0+IHtcclxuICBjb25zdCByZW5kZXJJbml0aWFsID0gKCkgPT4ge1xyXG4gICAgaWYgKGlzQW5vbnltb3VzKSB7XHJcbiAgICAgIHJldHVybiAn7J21JztcclxuICAgIH1cclxuICAgIGlmIChuYW1lICYmIG5hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXR1cm4gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcclxuICAgIH1cclxuICAgIHJldHVybiAnPyc7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgQXZhdGFyQ29udGFpbmVyID0gb25QcmVzcyA/IFRvdWNoYWJsZU9wYWNpdHkgOiBWaWV3O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPEF2YXRhckNvbnRhaW5lclxyXG4gICAgICBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHN0eWxlXX1cclxuICAgICAgb25QcmVzcz17b25QcmVzc31cclxuICAgICAgYWN0aXZlT3BhY2l0eT17b25QcmVzcyA/IDAuOCA6IDF9XHJcbiAgICA+XHJcbiAgICAgIDxWaWV3XHJcbiAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgIHN0eWxlcy5hdmF0YXIsXHJcbiAgICAgICAgICBpc0Fub255bW91cyAmJiBzdHlsZXMuYW5vbnltb3VzQXZhdGFyLFxyXG4gICAgICAgICAgeyB3aWR0aDogc2l6ZSwgaGVpZ2h0OiBzaXplLCBib3JkZXJSYWRpdXM6IHNpemUgLyAyIH0sXHJcbiAgICAgICAgXX1cclxuICAgICAgPlxyXG4gICAgICAgIHtpbWFnZVVybCA/IChcclxuICAgICAgICAgIDxJbWFnZVxyXG4gICAgICAgICAgICBzb3VyY2U9e3sgdXJpOiBpbWFnZVVybCB9fVxyXG4gICAgICAgICAgICBzdHlsZT17W3N0eWxlcy5pbWFnZSwgeyB3aWR0aDogc2l6ZSwgaGVpZ2h0OiBzaXplLCBib3JkZXJSYWRpdXM6IHNpemUgLyAyIH1dfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICApIDogKFxyXG4gICAgICAgICAgPFRleHQgc3R5bGU9e1tzdHlsZXMuaW5pdGlhbCwgeyBmb250U2l6ZTogc2l6ZSAvIDIuNSB9XX0+XHJcbiAgICAgICAgICAgIHtyZW5kZXJJbml0aWFsKCl9XHJcbiAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9WaWV3PlxyXG4gICAgICBcclxuICAgICAge3Nob3dOYW1lICYmIG5hbWUgJiYgKFxyXG4gICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubmFtZX0+XHJcbiAgICAgICAgICB7aXNBbm9ueW1vdXMgPyAn7J2166qFJyA6IG5hbWV9XHJcbiAgICAgICAgPC9UZXh0PlxyXG4gICAgICApfVxyXG4gICAgPC9BdmF0YXJDb250YWluZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcclxuICBjb250YWluZXI6IHtcclxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gIH0sXHJcbiAgYXZhdGFyOiB7XHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRTFFRkY5JyxcclxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG4gIH0sXHJcbiAgYW5vbnltb3VzQXZhdGFyOiB7XHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRjBGMEYwJyxcclxuICB9LFxyXG4gIGltYWdlOiB7XHJcbiAgICByZXNpemVNb2RlOiAnY292ZXInLFxyXG4gIH0sXHJcbiAgaW5pdGlhbDoge1xyXG4gICAgY29sb3I6ICcjNEE5MEUyJyxcclxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcclxuICB9LFxyXG4gIG5hbWU6IHtcclxuICAgIG1hcmdpblRvcDogNCxcclxuICAgIGZvbnRTaXplOiAxMixcclxuICAgIGNvbG9yOiAnIzMzMzMzMycsXHJcbiAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9maWxlQXZhdGFyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFBMEYsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBWTFGLElBQU1HLGFBQTJDLEdBQUcsU0FBOUNBLGFBQTJDQSxDQUFBQyxJQUFBLEVBUTNDO0VBQUEsSUFQSkMsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7SUFBQUMsU0FBQSxHQUFBRixJQUFBLENBQ1JHLElBQUk7SUFBSkEsSUFBSSxHQUFBRCxTQUFBLGNBQUcsRUFBRSxHQUFBQSxTQUFBO0lBQ1RFLElBQUksR0FBQUosSUFBQSxDQUFKSSxJQUFJO0lBQUFDLGFBQUEsR0FBQUwsSUFBQSxDQUNKTSxRQUFRO0lBQVJBLFFBQVEsR0FBQUQsYUFBQSxjQUFHLEtBQUssR0FBQUEsYUFBQTtJQUNoQkUsT0FBTyxHQUFBUCxJQUFBLENBQVBPLE9BQU87SUFDUEMsS0FBSyxHQUFBUixJQUFBLENBQUxRLEtBQUs7SUFBQUMsZ0JBQUEsR0FBQVQsSUFBQSxDQUNMVSxXQUFXO0lBQVhBLFdBQVcsR0FBQUQsZ0JBQUEsY0FBRyxLQUFLLEdBQUFBLGdCQUFBO0VB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