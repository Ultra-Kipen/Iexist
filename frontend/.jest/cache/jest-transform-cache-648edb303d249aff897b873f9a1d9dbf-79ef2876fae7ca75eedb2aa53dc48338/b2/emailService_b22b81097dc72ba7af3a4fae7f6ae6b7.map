{"version":3,"names":["_client","_interopRequireDefault","require","emailService","requestPasswordReset","_requestPasswordReset","_asyncToGenerator2","default","email","client","post","_x","apply","arguments","resetPassword","_resetPassword","token","newPassword","new_password","_x2","_x3","requestVerificationCode","_requestVerificationCode","_x4","verifyCode","_verifyCode","code","_x5","_x6","sendContactRequest","_sendContactRequest","name","subject","message","_x7","_x8","_x9","_x10","_default","exports"],"sources":["emailService.ts"],"sourcesContent":["// services/api/emailService.ts\r\nimport client from './client';\r\n\r\n/**\r\n * 이메일 관련 API 서비스\r\n */\r\nconst emailService = {\r\n  /**\r\n   * 비밀번호 재설정 이메일 요청\r\n   * @param email 사용자 이메일\r\n   */\r\n  requestPasswordReset: async (email: string) => {\r\n    return client.post('/auth/forgot-password', { email });\r\n  },\r\n\r\n  /**\r\n   * 비밀번호 재설정\r\n   * @param token 재설정 토큰\r\n   * @param newPassword 새 비밀번호\r\n   */\r\n  resetPassword: async (token: string, newPassword: string) => {\r\n    return client.post('/auth/reset-password', { token, new_password: newPassword });\r\n  },\r\n  \r\n  /**\r\n   * 이메일 확인 코드 요청 (회원가입 시)\r\n   * @param email 사용자 이메일\r\n   */\r\n  requestVerificationCode: async (email: string) => {\r\n    return client.post('/auth/request-verification', { email });\r\n  },\r\n  \r\n  /**\r\n   * 이메일 확인 코드 검증\r\n   * @param email 사용자 이메일\r\n   * @param code 확인 코드\r\n   */\r\n  verifyCode: async (email: string, code: string) => {\r\n    return client.post('/auth/verify-email', { email, code });\r\n  },\r\n  \r\n  /**\r\n   * 연락 요청 (고객 지원)\r\n   * @param name 이름\r\n   * @param email 이메일\r\n   * @param subject 제목\r\n   * @param message 메시지\r\n   */\r\n  sendContactRequest: async (name: string, email: string, subject: string, message: string) => {\r\n    return client.post('/contact', { name, email, subject, message });\r\n  }\r\n};\r\n\r\nexport default emailService;"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAKA,IAAMC,YAAY,GAAG;EAKnBC,oBAAoB;IAAA,IAAAC,qBAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAE,WAAOC,KAAa,EAAK;MAC7C,OAAOC,eAAM,CAACC,IAAI,CAAC,uBAAuB,EAAE;QAAEF,KAAK,EAALA;MAAM,CAAC,CAAC;IACxD,CAAC;IAAA,SAFDJ,oBAAoBA,CAAAO,EAAA;MAAA,OAAAN,qBAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;IAAA,OAApBT,oBAAoB;EAAA,GAEnB;EAODU,aAAa;IAAA,IAAAC,cAAA,OAAAT,kBAAA,CAAAC,OAAA,EAAE,WAAOS,KAAa,EAAEC,WAAmB,EAAK;MAC3D,OAAOR,eAAM,CAACC,IAAI,CAAC,sBAAsB,EAAE;QAAEM,KAAK,EAALA,KAAK;QAAEE,YAAY,EAAED;MAAY,CAAC,CAAC;IAClF,CAAC;IAAA,SAFDH,aAAaA,CAAAK,GAAA,EAAAC,GAAA;MAAA,OAAAL,cAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAbC,aAAa;EAAA,GAEZ;EAMDO,uBAAuB;IAAA,IAAAC,wBAAA,OAAAhB,kBAAA,CAAAC,OAAA,EAAE,WAAOC,KAAa,EAAK;MAChD,OAAOC,eAAM,CAACC,IAAI,CAAC,4BAA4B,EAAE;QAAEF,KAAK,EAALA;MAAM,CAAC,CAAC;IAC7D,CAAC;IAAA,SAFDa,uBAAuBA,CAAAE,GAAA;MAAA,OAAAD,wBAAA,CAAAV,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAvBQ,uBAAuB;EAAA,GAEtB;EAODG,UAAU;IAAA,IAAAC,WAAA,OAAAnB,kBAAA,CAAAC,OAAA,EAAE,WAAOC,KAAa,EAAEkB,IAAY,EAAK;MACjD,OAAOjB,eAAM,CAACC,IAAI,CAAC,oBAAoB,EAAE;QAAEF,KAAK,EAALA,KAAK;QAAEkB,IAAI,EAAJA;MAAK,CAAC,CAAC;IAC3D,CAAC;IAAA,SAFDF,UAAUA,CAAAG,GAAA,EAAAC,GAAA;MAAA,OAAAH,WAAA,CAAAb,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAVW,UAAU;EAAA,GAET;EASDK,kBAAkB;IAAA,IAAAC,mBAAA,OAAAxB,kBAAA,CAAAC,OAAA,EAAE,WAAOwB,IAAY,EAAEvB,KAAa,EAAEwB,OAAe,EAAEC,OAAe,EAAK;MAC3F,OAAOxB,eAAM,CAACC,IAAI,CAAC,UAAU,EAAE;QAAEqB,IAAI,EAAJA,IAAI;QAAEvB,KAAK,EAALA,KAAK;QAAEwB,OAAO,EAAPA,OAAO;QAAEC,OAAO,EAAPA;MAAQ,CAAC,CAAC;IACnE,CAAC;IAAA,SAFDJ,kBAAkBA,CAAAK,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA;MAAA,OAAAP,mBAAA,CAAAlB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBgB,kBAAkB;EAAA;AAGpB,CAAC;AAAC,IAAAS,QAAA,GAAAC,OAAA,CAAAhC,OAAA,GAEaJ,YAAY","ignoreList":[]}