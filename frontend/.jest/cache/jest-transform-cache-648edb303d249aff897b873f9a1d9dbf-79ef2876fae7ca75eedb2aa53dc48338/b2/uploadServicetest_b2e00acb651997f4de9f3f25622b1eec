a6958749576fbdcf4ddd1aab6ab11695
_getJestObj().mock("../../../../src/services/api/client", function () {
  return {
    post: jest.fn(),
    head: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _uploadService = _interopRequireDefault(require("../../../../src/services/api/uploadService"));
var _client = _interopRequireDefault(require("../../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var MockFormData = function () {
  function MockFormData() {
    (0, _classCallCheck2.default)(this, MockFormData);
    this.data = {};
  }
  return (0, _createClass2.default)(MockFormData, [{
    key: "append",
    value: function append(key, value) {
      this.data[key] = value;
    }
  }]);
}();
global.FormData = MockFormData;
describe('uploadService', function () {
  var originalURL;
  var mockURL;
  var mockFile = {
    uri: 'file:///mock/image.jpg',
    name: 'image.jpg',
    type: 'image/jpeg'
  };
  var mockResponse = {
    data: {
      image_url: 'https://example.com/uploads/image.jpg',
      original_name: 'image.jpg',
      file_size: 12345
    }
  };
  beforeEach(function () {
    originalURL = global.URL;
    mockURL = {
      createObjectURL: jest.fn().mockReturnValue('mock-url'),
      revokeObjectURL: jest.fn()
    };
    global.URL = mockURL;
    jest.clearAllMocks();
  });
  afterEach(function () {
    global.URL = originalURL;
  });
  it('이미지 업로드 요청을 올바르게 보내야 함', (0, _asyncToGenerator2.default)(function* () {
    _client.default.post.mockResolvedValueOnce(mockResponse);
    var result = yield _uploadService.default.uploadImage(mockFile.uri);
    expect(_client.default.post).toHaveBeenCalledWith('/uploads/image', expect.any(MockFormData), expect.objectContaining({
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    }));
    expect(result).toEqual(mockResponse);
  }));
  it('업로드 실패 시 오류를 던져야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockError = new Error('업로드 실패');
    _client.default.post.mockRejectedValueOnce(mockError);
    yield expect(_uploadService.default.uploadImage(mockFile.uri)).rejects.toThrow('업로드 실패');
  }));
  it('파일 객체로 이미지 업로드가 가능해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockFileObject = new File(['dummy content'], 'test.jpg', {
      type: 'image/jpeg',
      lastModified: Date.now()
    });
    _client.default.post.mockResolvedValueOnce(mockResponse);
    var result = yield _uploadService.default.uploadImage(mockFileObject);
    expect(_client.default.post).toHaveBeenCalledWith('/uploads/image', expect.any(MockFormData), expect.objectContaining({
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    }));
    expect(result).toEqual(mockResponse);
  }));
  it('진행 상태 콜백이 정상적으로 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockProgressCallback = jest.fn();
    _client.default.post.mockImplementation(function (url, data, config) {
      if (config.onUploadProgress) {
        config.onUploadProgress({
          loaded: 50,
          total: 100
        });
      }
      return Promise.resolve(mockResponse);
    });
    yield _uploadService.default.uploadImage(mockFile.uri, mockProgressCallback);
    expect(mockProgressCallback).toHaveBeenCalledWith(50);
  }));
  it('다중 이미지 업로드가 올바르게 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockFiles = [new File(['dummy1'], 'test1.jpg', {
      type: 'image/jpeg',
      lastModified: Date.now()
    }), new File(['dummy2'], 'test2.jpg', {
      type: 'image/jpeg',
      lastModified: Date.now()
    })];
    _client.default.post.mockResolvedValueOnce(mockResponse);
    var result = yield _uploadService.default.uploadMultipleImages(mockFiles);
    expect(_client.default.post).toHaveBeenCalledWith('/uploads/images', expect.any(MockFormData), expect.objectContaining({
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    }));
    expect(result).toEqual(mockResponse);
  }));
  it('프로필 이미지 업로드가 올바르게 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockProfileFile = new File(['dummy profile'], 'profile.jpg', {
      type: 'image/jpeg',
      lastModified: Date.now()
    });
    _client.default.post.mockResolvedValueOnce(mockResponse);
    var result = yield _uploadService.default.uploadProfileImage(mockProfileFile);
    expect(_client.default.post).toHaveBeenCalledWith('/uploads/profile', expect.any(MockFormData), expect.objectContaining({
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    }));
    expect(result).toEqual(mockResponse);
  }));
  it('이미지 URL 검증이 올바르게 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockImageUrl = 'https://example.com/image.jpg';
    _client.default.head = jest.fn().mockResolvedValueOnce(undefined);
    var successResult = yield _uploadService.default.validateImageUrl(mockImageUrl);
    expect(successResult).toBe(true);
    _client.default.head = jest.fn().mockRejectedValueOnce(new Error('Not Found'));
    var failureResult = yield _uploadService.default.validateImageUrl(mockImageUrl);
    expect(failureResult).toBe(false);
  }));
  it('임시 URL 생성 및 해제가 올바르게 작동해야 함', function () {
    var mockFile = new File(['dummy'], 'test.jpg', {
      type: 'image/jpeg',
      lastModified: Date.now()
    });
    var createdUrl = _uploadService.default.createObjectURL(mockFile);
    expect(createdUrl).toBe('mock-url');
    expect(mockURL.createObjectURL).toHaveBeenCalledWith(mockFile);
    _uploadService.default.revokeObjectURL(createdUrl);
    expect(mockURL.revokeObjectURL).toHaveBeenCalledWith(createdUrl);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,