{"version":3,"names":["_getJestObj","mock","post","jest","fn","head","_interopRequireDefault","require","_asyncToGenerator2","_classCallCheck2","_createClass2","_uploadService","_client","_require","MockFormData","default","data","key","value","append","global","FormData","describe","originalURL","mockURL","mockFile","uri","name","type","mockResponse","image_url","original_name","file_size","beforeEach","URL","createObjectURL","mockReturnValue","revokeObjectURL","clearAllMocks","afterEach","it","client","mockResolvedValueOnce","result","uploadService","uploadImage","expect","toHaveBeenCalledWith","any","objectContaining","headers","toEqual","mockError","Error","mockRejectedValueOnce","rejects","toThrow","mockFileObject","File","lastModified","Date","now","mockProgressCallback","mockImplementation","url","config","onUploadProgress","loaded","total","Promise","resolve","mockFiles","uploadMultipleImages","mockProfileFile","uploadProfileImage","mockImageUrl","undefined","successResult","validateImageUrl","toBe","failureResult","createdUrl"],"sources":["uploadService.test.ts"],"sourcesContent":["// uploadService.test.ts\r\nimport uploadService from '../../../../src/services/api/uploadService';\r\nimport client from '../../../../src/services/api/client';\r\nimport { AxiosResponse } from 'axios';\r\n// URL 모킹을 위한 타입 선언\r\ninterface MockURL {\r\n    createObjectURL: jest.Mock;\r\n    revokeObjectURL: jest.Mock;\r\n  }\r\n// 전역 FormData 모킹\r\nclass MockFormData {\r\n    private data: { [key: string]: any } = {};\r\n    \r\n    append(key: string, value: any) {\r\n      this.data[key] = value;\r\n    }\r\n  }\r\n  \r\n  // 전역 객체에 FormData 추가\r\n  (global as any).FormData = MockFormData;\r\n  \r\n  jest.mock('../../../../src/services/api/client', () => ({\r\n    post: jest.fn(),\r\n    head: jest.fn()\r\n  }));\r\ndescribe('uploadService', () => {\r\n    let originalURL: URL;\r\n    let mockURL: MockURL;\r\n    const mockFile = {\r\n      uri: 'file:///mock/image.jpg',\r\n      name: 'image.jpg',\r\n      type: 'image/jpeg'\r\n    };\r\n    \r\n    const mockResponse = {\r\n      data: {\r\n        image_url: 'https://example.com/uploads/image.jpg',\r\n        original_name: 'image.jpg',\r\n        file_size: 12345\r\n      }\r\n    };\r\n    \r\n    beforeEach(() => {\r\n        originalURL = (global as any).URL;\r\n         // URL 모킹\r\n    mockURL = {\r\n        createObjectURL: jest.fn().mockReturnValue('mock-url'),\r\n        revokeObjectURL: jest.fn()\r\n      };\r\n  \r\n      // @ts-ignore\r\n      global.URL = mockURL;\r\n      jest.clearAllMocks();\r\n    });\r\n    afterEach(() => {\r\n        // 원본 URL 복원\r\n        (global as any).URL = originalURL;\r\n      });\r\n\r\n  it('이미지 업로드 요청을 올바르게 보내야 함', async () => {\r\n    // 모킹된 클라이언트 post 메서드 구현\r\n    (client.post as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    const result = await uploadService.uploadImage(mockFile.uri);\r\n    \r\n    // 클라이언트의 post 메서드가 올바른 인자로 호출되었는지 확인\r\n    expect(client.post).toHaveBeenCalledWith(\r\n      '/uploads/image',\r\n      expect.any(MockFormData),\r\n      expect.objectContaining({\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n    );\r\n    \r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  it('업로드 실패 시 오류를 던져야 함', async () => {\r\n    const mockError = new Error('업로드 실패');\r\n    \r\n    // 클라이언트의 post 메서드를 오류와 함께 모킹\r\n    (client.post as jest.Mock).mockRejectedValueOnce(mockError);\r\n    \r\n    // 오류가 올바르게 전파되는지 확인\r\n    await expect(uploadService.uploadImage(mockFile.uri)).rejects.toThrow('업로드 실패');\r\n  });\r\n\r\n   // 추가 테스트 케이스들\r\n   it('파일 객체로 이미지 업로드가 가능해야 함', async () => {\r\n    // File 생성 시 lastModified 추가\r\n    const mockFileObject = new File(\r\n      ['dummy content'], \r\n      'test.jpg', \r\n      { \r\n        type: 'image/jpeg', \r\n        lastModified: Date.now() \r\n      }\r\n    );\r\n    \r\n    (client.post as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    const result = await uploadService.uploadImage(mockFileObject);\r\n    \r\n    expect(client.post).toHaveBeenCalledWith(\r\n      '/uploads/image',\r\n      expect.any(MockFormData),\r\n      expect.objectContaining({\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n    );\r\n    \r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n\r\n  it('진행 상태 콜백이 정상적으로 호출되어야 함', async () => {\r\n    const mockProgressCallback = jest.fn();\r\n    \r\n    (client.post as jest.Mock).mockImplementation((url, data, config) => {\r\n      // 모의 업로드 진행 이벤트 시뮬레이션\r\n      if (config.onUploadProgress) {\r\n        config.onUploadProgress({\r\n          loaded: 50,\r\n          total: 100\r\n        });\r\n      }\r\n      return Promise.resolve(mockResponse);\r\n    });\r\n    \r\n    await uploadService.uploadImage(mockFile.uri, mockProgressCallback);\r\n    \r\n    expect(mockProgressCallback).toHaveBeenCalledWith(50);\r\n  });\r\n\r\n  it('다중 이미지 업로드가 올바르게 작동해야 함', async () => {\r\n    const mockFiles = [\r\n      new File(\r\n        ['dummy1'], \r\n        'test1.jpg', \r\n        { \r\n          type: 'image/jpeg', \r\n          lastModified: Date.now() \r\n        }\r\n      ),\r\n      new File(\r\n        ['dummy2'], \r\n        'test2.jpg', \r\n        { \r\n          type: 'image/jpeg', \r\n          lastModified: Date.now() \r\n        }\r\n      )\r\n    ];\r\n    \r\n    (client.post as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    const result = await uploadService.uploadMultipleImages(mockFiles);\r\n    \r\n    expect(client.post).toHaveBeenCalledWith(\r\n      '/uploads/images',\r\n      expect.any(MockFormData),\r\n      expect.objectContaining({\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n    );\r\n    \r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  it('프로필 이미지 업로드가 올바르게 작동해야 함', async () => {\r\n    const mockProfileFile = new File(\r\n      ['dummy profile'], \r\n      'profile.jpg', \r\n      { \r\n        type: 'image/jpeg', \r\n        lastModified: Date.now() \r\n      }\r\n    );\r\n    \r\n    (client.post as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    const result = await uploadService.uploadProfileImage(mockProfileFile);\r\n    \r\n    expect(client.post).toHaveBeenCalledWith(\r\n      '/uploads/profile',\r\n      expect.any(MockFormData),\r\n      expect.objectContaining({\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      })\r\n    );\r\n    \r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  it('이미지 URL 검증이 올바르게 작동해야 함', async () => {\r\n    const mockImageUrl = 'https://example.com/image.jpg';\r\n    \r\n    // 성공 케이스\r\n    (client.head as jest.Mock) = jest.fn().mockResolvedValueOnce(undefined);\r\n    const successResult = await uploadService.validateImageUrl(mockImageUrl);\r\n    expect(successResult).toBe(true);\r\n    \r\n    // 실패 케이스\r\n    (client.head as jest.Mock) = jest.fn().mockRejectedValueOnce(new Error('Not Found'));\r\n    const failureResult = await uploadService.validateImageUrl(mockImageUrl);\r\n    expect(failureResult).toBe(false);\r\n  });\r\n\r\n  it('임시 URL 생성 및 해제가 올바르게 작동해야 함', () => {\r\n    // File 생성 시 lastModified 추가\r\n    const mockFile = new File(\r\n      ['dummy'], \r\n      'test.jpg', \r\n      { \r\n        type: 'image/jpeg', \r\n        lastModified: Date.now() \r\n      }\r\n    );\r\n    \r\n    // URL 생성 테스트\r\n    const createdUrl = uploadService.createObjectURL(mockFile);\r\n    expect(createdUrl).toBe('mock-url');\r\n    expect(mockURL.createObjectURL).toHaveBeenCalledWith(mockFile);\r\n    \r\n    // URL 해제 테스트\r\n    uploadService.revokeObjectURL(createdUrl);\r\n    expect(mockURL.revokeObjectURL).toHaveBeenCalledWith(createdUrl);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}