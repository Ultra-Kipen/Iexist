15b3fc3cad985c4911a11e2f9ed9bb8d
_getJestObj().mock("../../src/screens/ComfortScreen", function () {
  var React = require('react');
  return function MockComfortScreen(props) {
    return React.createElement('view', Object.assign({}, props, {
      testID: 'comfort-screen-scrollview',
      children: [React.createElement('view', {
        key: 'loading',
        testID: 'loading-indicator'
      }), React.createElement('view', {
        key: 'best-posts',
        testID: 'best-posts-title'
      }, '우울증을 극복한 경험'), React.createElement('view', {
        key: 'posts-list',
        testID: 'posts-list'
      }, [React.createElement('text', {
        key: 'post-1'
      }, '오늘 너무 힘들어요'), React.createElement('text', {
        key: 'post-2'
      }, '대인관계가 어려워요')]), React.createElement('button', {
        key: 'new-post',
        testID: 'new-post-button'
      }), React.createElement('text', {
        key: 'modal-title'
      }, '고민 나누기'), React.createElement('input', {
        key: 'title-input',
        testID: 'post-title-input',
        value: ''
      }), React.createElement('input', {
        key: 'content-input',
        testID: 'post-content-input',
        value: ''
      }), React.createElement('view', {
        key: 'checkbox',
        testID: 'anonymous-checkbox',
        children: [{}]
      }), React.createElement('button', {
        key: 'cancel',
        testID: 'cancel-post-button'
      }), React.createElement('button', {
        key: 'submit',
        testID: 'submit-post-button'
      }), React.createElement('text', {
        key: 'message-modal'
      }, '응원 메시지 보내기'), React.createElement('input', {
        key: 'comment-input',
        testID: 'comment-input',
        value: ''
      }), React.createElement('button', {
        key: 'comment-button-1',
        testID: 'comment-button-1'
      }), React.createElement('button', {
        key: 'like-button-1',
        testID: 'like-button-1'
      }), React.createElement('button', {
        key: 'cancel-message',
        testID: 'cancel-message-button'
      }), React.createElement('button', {
        key: 'submit-comment',
        testID: 'submit-comment-button'
      })]
    }));
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      setOptions: jest.fn(),
      addListener: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    }),
    useIsFocused: jest.fn().mockReturnValue(true)
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(),
    getBestPosts: jest.fn(),
    createPost: jest.fn(),
    sendMessage: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        accent: '#03dac4',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        disabled: '#000000',
        placeholder: '#000000',
        backdrop: '#000000',
        onSurface: '#000000'
      }
    }),
    Card: {
      Content: jest.fn().mockImplementation(function (_ref) {
        var children = _ref.children;
        return children;
      })
    },
    TextInput: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    Button: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    List: {
      Section: jest.fn().mockImplementation(function (_ref2) {
        var children = _ref2.children;
        return children;
      }),
      Item: jest.fn().mockImplementation(function (props) {
        return null;
      }),
      Icon: jest.fn().mockImplementation(function (props) {
        return null;
      })
    },
    Title: jest.fn().mockImplementation(function (_ref3) {
      var children = _ref3.children;
      return children;
    }),
    Paragraph: jest.fn().mockImplementation(function (_ref4) {
      var children = _ref4.children;
      return children;
    }),
    FAB: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    ActivityIndicator: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    Chip: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    Text: jest.fn().mockImplementation(function (_ref5) {
      var children = _ref5.children;
      return children;
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _reactNative2 = require("react-native");
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn(function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (args[0] && typeof args[0] === 'string' && args[0].includes('게시물 로드 오류')) {
    return;
  }
  originalConsoleError.apply(void 0, args);
});
var mockPosts = [{
  post_id: 1,
  title: '오늘 너무 힘들어요',
  content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
  user_id: 1,
  is_anonymous: true,
  like_count: 5,
  comment_count: 3,
  created_at: '2025-04-08T12:00:00Z'
}, {
  post_id: 2,
  title: '대인관계가 어려워요',
  content: '새로운 사람들을 만나는 것이 두려워요...',
  user_id: 2,
  is_anonymous: true,
  like_count: 10,
  comment_count: 7,
  created_at: '2025-04-07T10:00:00Z'
}];
var mockBestPosts = [{
  post_id: 3,
  title: '우울증을 극복한 경험',
  content: '저는 작년에 심한 우울증을 겪었지만...',
  like_count: 50,
  comment_count: 20
}];
var renderComfortScreen = function renderComfortScreen() {
  return (0, _reactNative.render)(_react.default.createElement(_ComfortScreen.default));
};
describe('ComfortScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: mockBestPosts
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
  });
  test('should render loading state initially', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen = renderComfortScreen(),
      getByTestId = _renderComfortScreen.getByTestId,
      queryByTestId = _renderComfortScreen.queryByTestId;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    expect(queryByTestId('comfort-screen-scrollview')).toBeNull();
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(1);
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalledTimes(1);
    });
  }));
  test('should display posts and best posts when loaded', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen2 = renderComfortScreen(),
      getByTestId = _renderComfortScreen2.getByTestId,
      getByText = _renderComfortScreen2.getByText,
      queryByTestId = _renderComfortScreen2.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('loading-indicator')).toBeNull();
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    expect(getByTestId('best-posts-title')).toBeTruthy();
    expect(getByText('우울증을 극복한 경험')).toBeTruthy();
    expect(getByTestId('posts-list')).toBeTruthy();
    expect(getByText('오늘 너무 힘들어요')).toBeTruthy();
    expect(getByText('대인관계가 어려워요')).toBeTruthy();
  }));
  test('should open new post modal when FAB button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen3 = renderComfortScreen(),
      getByTestId = _renderComfortScreen3.getByTestId,
      getByText = _renderComfortScreen3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    expect(getByTestId('post-title-input')).toBeTruthy();
    expect(getByTestId('post-content-input')).toBeTruthy();
    expect(getByTestId('anonymous-checkbox')).toBeTruthy();
  }));
  test('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen4 = renderComfortScreen(),
      getByTestId = _renderComfortScreen4.getByTestId,
      getByText = _renderComfortScreen4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
  }));
  test('should not submit post with empty fields', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen5 = renderComfortScreen(),
      getByTestId = _renderComfortScreen5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(_comfortWallService.default.createPost).not.toHaveBeenCalled();
  }));
  test('should open comment modal when clicking on a post', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen6 = renderComfortScreen(),
      getByTestId = _renderComfortScreen6.getByTestId,
      getByText = _renderComfortScreen6.getByText,
      getAllByText = _renderComfortScreen6.getAllByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    var titleElements = getAllByText('오늘 너무 힘들어요');
    expect(titleElements.length).toBeGreaterThan(0);
    expect(getByTestId('comment-input')).toBeTruthy();
  }));
  test('should send a comment successfully', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen7 = renderComfortScreen(),
      getByTestId = _renderComfortScreen7.getByTestId,
      getByText = _renderComfortScreen7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '힘내세요! 응원합니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '힘내세요! 응원합니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.', expect.anything());
  }));
  test('should not submit empty comment', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen8 = renderComfortScreen(),
      getByTestId = _renderComfortScreen8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');
    expect(_comfortWallService.default.sendMessage).not.toHaveBeenCalled();
  }));
  test('should handle API error when loading posts', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(console, 'error').mockImplementation(function () {});
    _comfortWallService.default.getPosts.mockRejectedValue(new Error('API Error'));
    renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    });
    console.error.mockRestore();
  }));
  test('should handle API error when creating post', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValue({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen9 = renderComfortScreen(),
      getByTestId = _renderComfortScreen9.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    });
  }));
  test('should toggle anonymous checkbox', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen10 = renderComfortScreen(),
      getByTestId = _renderComfortScreen10.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should handle modal open and close properly', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen11 = renderComfortScreen(),
      getByTestId = _renderComfortScreen11.getByTestId,
      getByText = _renderComfortScreen11.getByText,
      queryByText = _renderComfortScreen11.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    expect(queryByText('고민 나누기')).toBeNull();
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    }, {
      timeout: 3000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('고민 나누기')).toBeTruthy();
    });
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '테스트 제목');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '테스트 내용');
    expect(getByTestId('submit-post-button')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
    });
  }));
  test('should like a post', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen12 = renderComfortScreen(),
      getByTestId = _renderComfortScreen12.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
  }));
  test('should toggle like status for a post', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValueOnce({
      data: {
        message: 'liked'
      }
    }).mockResolvedValueOnce({
      data: {
        message: 'unliked'
      }
    });
    var _renderComfortScreen13 = renderComfortScreen(),
      getByTestId = _renderComfortScreen13.getByTestId,
      getAllByTestId = _renderComfortScreen13.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(3);
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen14 = renderComfortScreen(),
      getByTestId = _renderComfortScreen14.getByTestId,
      getAllByTestId = _renderComfortScreen14.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should handle multiple modals correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen15 = renderComfortScreen(),
      getByTestId = _renderComfortScreen15.getByTestId,
      getByText = _renderComfortScreen15.getByText,
      queryByText = _renderComfortScreen15.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-message-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('응원 메시지 보내기')).toBeNull();
    });
  }));
  test('should toggle like status when pressing like button multiple times', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValue({
      data: {
        message: 'success'
      }
    });
    var _renderComfortScreen16 = renderComfortScreen(),
      getByTestId = _renderComfortScreen16.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen17 = renderComfortScreen(),
      getByTestId = _renderComfortScreen17.getByTestId,
      getAllByTestId = _renderComfortScreen17.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen18 = renderComfortScreen(),
      getByTestId = _renderComfortScreen18.getByTestId,
      getByText = _renderComfortScreen18.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen19 = renderComfortScreen(),
      getByTestId = _renderComfortScreen19.getByTestId,
      getByText = _renderComfortScreen19.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJNb2NrQ29tZm9ydFNjcmVlbiIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsIk9iamVjdCIsImFzc2lnbiIsInRlc3RJRCIsImNoaWxkcmVuIiwia2V5IiwidmFsdWUiLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJzZXRPcHRpb25zIiwiYWRkTGlzdGVuZXIiLCJnb0JhY2siLCJ1c2VSb3V0ZSIsInBhcmFtcyIsInVzZUlzRm9jdXNlZCIsImdldFBvc3RzIiwiZ2V0QmVzdFBvc3RzIiwiY3JlYXRlUG9zdCIsInNlbmRNZXNzYWdlIiwibGlrZVBvc3QiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImRhdGEiLCJtZXNzYWdlIiwiYWxlcnQiLCJ1c2VUaGVtZSIsImNvbG9ycyIsInByaW1hcnkiLCJhY2NlbnQiLCJiYWNrZ3JvdW5kIiwic3VyZmFjZSIsImVycm9yIiwidGV4dCIsImRpc2FibGVkIiwicGxhY2Vob2xkZXIiLCJiYWNrZHJvcCIsIm9uU3VyZmFjZSIsIkNhcmQiLCJDb250ZW50IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiX3JlZiIsIlRleHRJbnB1dCIsIkJ1dHRvbiIsIkxpc3QiLCJTZWN0aW9uIiwiX3JlZjIiLCJJdGVtIiwiSWNvbiIsIlRpdGxlIiwiX3JlZjMiLCJQYXJhZ3JhcGgiLCJfcmVmNCIsIkZBQiIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiQ2hpcCIsIlRleHQiLCJfcmVmNSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfQ29tZm9ydFNjcmVlbiIsIl9jb21mb3J0V2FsbFNlcnZpY2UiLCJfcmVhY3ROYXRpdmUyIiwiX3Bvc3RTZXJ2aWNlIiwiX3JlcXVpcmUiLCJvcmlnaW5hbENvbnNvbGVFcnJvciIsImNvbnNvbGUiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImluY2x1ZGVzIiwiYXBwbHkiLCJtb2NrUG9zdHMiLCJwb3N0X2lkIiwidGl0bGUiLCJjb250ZW50IiwidXNlcl9pZCIsImlzX2Fub255bW91cyIsImxpa2VfY291bnQiLCJjb21tZW50X2NvdW50IiwiY3JlYXRlZF9hdCIsIm1vY2tCZXN0UG9zdHMiLCJyZW5kZXJDb21mb3J0U2NyZWVuIiwicmVuZGVyIiwiQ29tZm9ydFNjcmVlbiIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJjb21mb3J0V2FsbFNlcnZpY2UiLCJ0ZXN0IiwiZGVmYXVsdCIsIl9yZW5kZXJDb21mb3J0U2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJxdWVyeUJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInRvQmVOdWxsIiwid2FpdEZvciIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXJDb21mb3J0U2NyZWVuMiIsImdldEJ5VGV4dCIsIl9yZW5kZXJDb21mb3J0U2NyZWVuMyIsInRpbWVvdXQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIl9yZW5kZXJDb21mb3J0U2NyZWVuNCIsImNoYW5nZVRleHQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIkFsZXJ0IiwiYW55dGhpbmciLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjUiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlckNvbWZvcnRTY3JlZW42IiwiZ2V0QWxsQnlUZXh0IiwidGl0bGVFbGVtZW50cyIsInRvQmVHcmVhdGVyVGhhbiIsIl9yZW5kZXJDb21mb3J0U2NyZWVuNyIsIl9yZW5kZXJDb21mb3J0U2NyZWVuOCIsInNweU9uIiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciIsIm1vY2tSZXN0b3JlIiwicmVzcG9uc2UiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjkiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjEwIiwiY2hlY2tib3giLCJpbml0aWFsU3RhdGUiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjExIiwicXVlcnlCeVRleHQiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjEyIiwibGlrZUJ1dHRvbiIsInBvc3RTZXJ2aWNlIiwibW9ja1Jlc29sdmVkVmFsdWVPbmNlIiwiX3JlbmRlckNvbWZvcnRTY3JlZW4xMyIsImdldEFsbEJ5VGVzdElkIiwiX3JlbmRlckNvbWZvcnRTY3JlZW4xNCIsIl9yZW5kZXJDb21mb3J0U2NyZWVuMTUiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjE2IiwiX3JlbmRlckNvbWZvcnRTY3JlZW4xNyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsIl9yZW5kZXJDb21mb3J0U2NyZWVuMTgiLCJ0ZXN0VGl0bGUiLCJ0ZXN0Q29udGVudCIsInRpdGxlSW5wdXQiLCJjb250ZW50SW5wdXQiLCJ0b0JlIiwiX3JlbmRlckNvbWZvcnRTY3JlZW4xOSJdLCJzb3VyY2VzIjpbImNvbWZvcnRXYWxsLmUyZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9lMmUvY29tZm9ydFdhbGwuZTJlLnRlc3QudHNcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcblxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zY3JlZW5zL0NvbWZvcnRTY3JlZW4nLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4gIHJldHVybiBmdW5jdGlvbiBNb2NrQ29tZm9ydFNjcmVlbihwcm9wcykge1xyXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3ZpZXcnLCB7XHJcbiAgICAgIC4uLnByb3BzLFxyXG4gICAgICB0ZXN0SUQ6ICdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JyxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCd2aWV3JywgeyBrZXk6ICdsb2FkaW5nJywgdGVzdElEOiAnbG9hZGluZy1pbmRpY2F0b3InIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3ZpZXcnLCB7IGtleTogJ2Jlc3QtcG9zdHMnLCB0ZXN0SUQ6ICdiZXN0LXBvc3RzLXRpdGxlJyB9LCAn7Jqw7Jq47Kad7J2EIOq3ueuzte2VnCDqsr3tl5gnKSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCd2aWV3JywgeyBrZXk6ICdwb3N0cy1saXN0JywgdGVzdElEOiAncG9zdHMtbGlzdCcgfSwgW1xyXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgndGV4dCcsIHsga2V5OiAncG9zdC0xJyB9LCAn7Jik64qYIOuEiOustCDtnpjrk6TslrTsmpQnKSxcclxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RleHQnLCB7IGtleTogJ3Bvc3QtMicgfSwgJ+uMgOyduOq0gOqzhOqwgCDslrTroKTsm4zsmpQnKVxyXG4gICAgICAgIF0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsIHsga2V5OiAnbmV3LXBvc3QnLCB0ZXN0SUQ6ICduZXctcG9zdC1idXR0b24nIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RleHQnLCB7IGtleTogJ21vZGFsLXRpdGxlJyB9LCAn6rOg66+8IOuCmOuIhOq4sCcpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyBrZXk6ICd0aXRsZS1pbnB1dCcsIHRlc3RJRDogJ3Bvc3QtdGl0bGUtaW5wdXQnLCB2YWx1ZTogJycgfSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7IGtleTogJ2NvbnRlbnQtaW5wdXQnLCB0ZXN0SUQ6ICdwb3N0LWNvbnRlbnQtaW5wdXQnLCB2YWx1ZTogJycgfSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgndmlldycsIHsga2V5OiAnY2hlY2tib3gnLCB0ZXN0SUQ6ICdhbm9ueW1vdXMtY2hlY2tib3gnLCBjaGlsZHJlbjogW3t9XSB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IGtleTogJ2NhbmNlbCcsIHRlc3RJRDogJ2NhbmNlbC1wb3N0LWJ1dHRvbicgfSksXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgeyBrZXk6ICdzdWJtaXQnLCB0ZXN0SUQ6ICdzdWJtaXQtcG9zdC1idXR0b24nIH0pLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3RleHQnLCB7IGtleTogJ21lc3NhZ2UtbW9kYWwnIH0sICfsnZHsm5Ag66mU7Iuc7KeAIOuztOuCtOq4sCcpLFxyXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JywgeyBrZXk6ICdjb21tZW50LWlucHV0JywgdGVzdElEOiAnY29tbWVudC1pbnB1dCcsIHZhbHVlOiAnJyB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IGtleTogJ2NvbW1lbnQtYnV0dG9uLTEnLCB0ZXN0SUQ6ICdjb21tZW50LWJ1dHRvbi0xJyB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IGtleTogJ2xpa2UtYnV0dG9uLTEnLCB0ZXN0SUQ6ICdsaWtlLWJ1dHRvbi0xJyB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IGtleTogJ2NhbmNlbC1tZXNzYWdlJywgdGVzdElEOiAnY2FuY2VsLW1lc3NhZ2UtYnV0dG9uJyB9KSxcclxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdidXR0b24nLCB7IGtleTogJ3N1Ym1pdC1jb21tZW50JywgdGVzdElEOiAnc3VibWl0LWNvbW1lbnQtYnV0dG9uJyB9KVxyXG4gICAgICBdXHJcbiAgICB9KTtcclxuICB9O1xyXG59KTtcclxuXHJcbi8vIOyLpOygnCDsu7Ttj6zrhIztirgg64yA7IugIOuqqeyXhSDqsIDsoLjsmKTquLBcclxuaW1wb3J0IENvbWZvcnRTY3JlZW4gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvQ29tZm9ydFNjcmVlbic7XHJcbmltcG9ydCBjb21mb3J0V2FsbFNlcnZpY2UgZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9jb21mb3J0V2FsbFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBwb3N0U2VydmljZSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYXBpL3Bvc3RTZXJ2aWNlJztcclxuXHJcbi8vIOybkOuemCBjb25zb2xlLmVycm9yIOyggOyepVxyXG5jb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XHJcblxyXG4vLyBjb25zb2xlLmVycm9yIOuqqO2CuSAoQVBJIOyYpOulmCDthYzsiqTtirjsl5DshJwg7Jik66WYIOuhnOq3uCDrrLTsi5wpXHJcbmNvbnNvbGUuZXJyb3IgPSBqZXN0LmZuKCguLi5hcmdzKSA9PiB7XHJcbiAgLy8gQVBJIEVycm9yIOq0gOugqCDroZzqt7jripQg66y07IucXHJcbiAgaWYgKGFyZ3NbMF0gJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnICYmIGFyZ3NbMF0uaW5jbHVkZXMoJ+qyjOyLnOusvCDroZzrk5wg7Jik66WYJykpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgb3JpZ2luYWxDb25zb2xlRXJyb3IoLi4uYXJncyk7XHJcbn0pO1xyXG5cclxuLy8gTmF2aWdhdGlvbiDqtIDroKgg66qo7YK5XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcclxuICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICBzZXRPcHRpb25zOiBqZXN0LmZuKCksXHJcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXHJcbiAgfSksXHJcbiAgdXNlUm91dGU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgcGFyYW1zOiB7fVxyXG4gIH0pLFxyXG4gIHVzZUlzRm9jdXNlZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKSxcclxufSkpO1xyXG5cclxuLy8gY29tZm9ydFdhbGxTZXJ2aWNlIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvY29tZm9ydFdhbGxTZXJ2aWNlJywgKCkgPT4gKHtcclxuICBnZXRQb3N0czogamVzdC5mbigpLFxyXG4gIGdldEJlc3RQb3N0czogamVzdC5mbigpLFxyXG4gIGNyZWF0ZVBvc3Q6IGplc3QuZm4oKSxcclxuICBzZW5kTWVzc2FnZTogamVzdC5mbigpLFxyXG59KSk7XHJcbi8vIHBvc3RTZXJ2aWNlIOuqqO2CuSDstpTqsIAgKOuLpOuluCDrqqjtgrkg7L2U65OcIOyYhuyXkCDrsLDsuZgpXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9wb3N0U2VydmljZScsICgpID0+ICh7XHJcbiAgbGlrZVBvc3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgbWVzc2FnZTogJ3N1Y2Nlc3MnIH0gfSksXHJcbn0pKTtcclxuXHJcbi8vIEFsZXJ0IOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQWxlcnQvQWxlcnQnLCAoKSA9PiAoe1xyXG4gIGFsZXJ0OiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbi8vIFJlYWN0IE5hdGl2ZSBQYXBlciDrqqjtgrlcclxuLy8g7IiY7KCVIO2bhFxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlVGhlbWU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBjb2xvcnM6IHtcclxuICAgICAgICBwcmltYXJ5OiAnIzYyMDBlZScsXHJcbiAgICAgICAgYWNjZW50OiAnIzAzZGFjNCcsXHJcbiAgICAgICAgYmFja2dyb3VuZDogJyNmNmY2ZjYnLFxyXG4gICAgICAgIHN1cmZhY2U6ICcjZmZmZmZmJyxcclxuICAgICAgICBlcnJvcjogJyNCMDAwMjAnLFxyXG4gICAgICAgIHRleHQ6ICcjMDAwMDAwJyxcclxuICAgICAgICBkaXNhYmxlZDogJyMwMDAwMDAnLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnIzAwMDAwMCcsXHJcbiAgICAgICAgYmFja2Ryb3A6ICcjMDAwMDAwJyxcclxuICAgICAgICBvblN1cmZhY2U6ICcjMDAwMDAwJyxcclxuICAgICAgfVxyXG4gICAgfSksXHJcbiAgICBDYXJkOiB7XHJcbiAgICAgIENvbnRlbnQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4pLFxyXG4gICAgfSxcclxuICAgIFRleHRJbnB1dDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihwcm9wcyA9PiBudWxsKSxcclxuICAgIEJ1dHRvbjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihwcm9wcyA9PiBudWxsKSxcclxuICAgIExpc3Q6IHtcclxuICAgICAgU2VjdGlvbjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbiksXHJcbiAgICAgIEl0ZW06IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24ocHJvcHMgPT4gbnVsbCksXHJcbiAgICAgIEljb246IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24ocHJvcHMgPT4gbnVsbCksXHJcbiAgICB9LFxyXG4gICAgVGl0bGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4pLFxyXG4gICAgUGFyYWdyYXBoOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuKSxcclxuICAgIEZBQjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihwcm9wcyA9PiBudWxsKSxcclxuICAgIEFjdGl2aXR5SW5kaWNhdG9yOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKHByb3BzID0+IG51bGwpLFxyXG4gICAgQ2hpcDogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihwcm9wcyA9PiBudWxsKSxcclxuICAgIFRleHQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHsgY2hpbGRyZW4gfSkgPT4gY2hpbGRyZW4pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8g7YWM7Iqk7Yq4IOuNsOydtO2EsFxyXG5jb25zdCBtb2NrUG9zdHMgPSBbXHJcbiAge1xyXG4gICAgcG9zdF9pZDogMSxcclxuICAgIHRpdGxlOiAn7Jik64qYIOuEiOustCDtnpjrk6TslrTsmpQnLFxyXG4gICAgY29udGVudDogJ+yngeyepeyXkOyEnCDsiqTtirjroIjsiqTqsIAg64SI66y0IOunjuyVhOyalC4g7Ja065a76rKMIO2VtOyVvCDtlaDquYzsmpQ/JyxcclxuICAgIHVzZXJfaWQ6IDEsXHJcbiAgICBpc19hbm9ueW1vdXM6IHRydWUsXHJcbiAgICBsaWtlX2NvdW50OiA1LFxyXG4gICAgY29tbWVudF9jb3VudDogMyxcclxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI1LTA0LTA4VDEyOjAwOjAwWicsXHJcbiAgfSxcclxuICB7XHJcbiAgICBwb3N0X2lkOiAyLFxyXG4gICAgdGl0bGU6ICfrjIDsnbjqtIDqs4TqsIAg7Ja066Ck7JuM7JqUJyxcclxuICAgIGNvbnRlbnQ6ICfsg4jroZzsmrQg7IKs656M65Ok7J2EIOunjOuCmOuKlCDqsoPsnbQg65GQ66Ck7JuM7JqULi4uJyxcclxuICAgIHVzZXJfaWQ6IDIsXHJcbiAgICBpc19hbm9ueW1vdXM6IHRydWUsXHJcbiAgICBsaWtlX2NvdW50OiAxMCxcclxuICAgIGNvbW1lbnRfY291bnQ6IDcsXHJcbiAgICBjcmVhdGVkX2F0OiAnMjAyNS0wNC0wN1QxMDowMDowMFonLFxyXG4gIH0sXHJcbl07XHJcblxyXG5jb25zdCBtb2NrQmVzdFBvc3RzID0gW1xyXG4gIHtcclxuICAgIHBvc3RfaWQ6IDMsXHJcbiAgICB0aXRsZTogJ+yasOyauOymneydhCDqt7nrs7XtlZwg6rK97ZeYJyxcclxuICAgIGNvbnRlbnQ6ICfsoIDripQg7J6R64WE7JeQIOyLrO2VnCDsmrDsmrjspp3snYQg6rKq7JeI7KeA66eMLi4uJyxcclxuICAgIGxpa2VfY291bnQ6IDUwLFxyXG4gICAgY29tbWVudF9jb3VudDogMjAsXHJcbiAgfSxcclxuXTtcclxuXHJcbi8vIENvbWZvcnRTY3JlZW4g7Lu07Y+s64SM7Yq466W8IOugjOuNlOunge2VmOuKlCDtlajsiJhcclxuY29uc3QgcmVuZGVyQ29tZm9ydFNjcmVlbiA9ICgpID0+IHtcclxuICByZXR1cm4gcmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tZm9ydFNjcmVlbikpO1xyXG59O1xyXG5cclxuZGVzY3JpYmUoJ0NvbWZvcnRTY3JlZW4gRTJFIFRlc3RzJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgLy8g66qo65OgIOuqqO2CuSDstIjquLDtmZRcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgXHJcbiAgICAvLyDquLDrs7gg7J2R64u1IOyEpOyglVxyXG4gICAgKGNvbWZvcnRXYWxsU2VydmljZS5nZXRQb3N0cyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgZGF0YTogeyBkYXRhOiBtb2NrUG9zdHMgfSxcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAoY29tZm9ydFdhbGxTZXJ2aWNlLmdldEJlc3RQb3N0cyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgZGF0YTogeyBkYXRhOiBtb2NrQmVzdFBvc3RzIH0sXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgKGNvbWZvcnRXYWxsU2VydmljZS5jcmVhdGVQb3N0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7IG1lc3NhZ2U6ICfqsozsi5zrrLzsnbQg7ISx6rO17KCB7Jy866GcIOuTseuhneuQmOyXiOyKteuLiOuLpC4nIH0sXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgKGNvbWZvcnRXYWxsU2VydmljZS5zZW5kTWVzc2FnZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgZGF0YTogeyBtZXNzYWdlOiAn66mU7Iuc7KeA6rCAIOyEseqzteyggeycvOuhnCDsoITshqHrkJjsl4jsirXri4jri6QuJyB9LFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgbG9hZGluZyBzdGF0ZSBpbml0aWFsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgICBcclxuICAgIC8vIOuhnOuUqSDsnbjrlJTsvIDsnbTthLDqsIAg67O07J2064qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdsb2FkaW5nLWluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBcclxuICAgIC8vIOuplOyduCDsvZjthZDsuKDqsIAg7JWE7KeBIOuztOydtOyngCDslYrripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlTnVsbCgpO1xyXG4gICAgXHJcbiAgICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLmdldFBvc3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2UuZ2V0QmVzdFBvc3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgZGlzcGxheSBwb3N0cyBhbmQgYmVzdCBwb3N0cyB3aGVuIGxvYWRlZCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCwgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gICAgXHJcbiAgICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnbG9hZGluZy1pbmRpY2F0b3InKSkudG9CZU51bGwoKTtcclxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrsqDsiqTtirgg6rKM7Iuc66y8IOyEueyFmOydtCDroIzrjZTrp4Eg65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdiZXN0LXBvc3RzLXRpdGxlJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+yasOyauOymneydhCDqt7nrs7XtlZwg6rK97ZeYJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIFxyXG4gICAgLy8g6rKM7Iuc66y8IOuqqeuhneydtCDroIzrjZTrp4Eg65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdwb3N0cy1saXN0JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+yYpOuKmCDrhIjrrLQg7Z6Y65Ok7Ja07JqUJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+uMgOyduOq0gOqzhOqwgCDslrTroKTsm4zsmpQnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgb3BlbiBuZXcgcG9zdCBtb2RhbCB3aGVuIEZBQiBidXR0b24gaXMgcHJlc3NlZCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gICAgXHJcbiAgICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoXHJcbiAgICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICAgIHsgdGltZW91dDogNTAwMCB9IC8vIO2DgOyehOyVhOybgyDsi5zqsIQg64qY66as6riwXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyBGQUIg67KE7Yq8IO2BtOumrVxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCduZXctcG9zdC1idXR0b24nKSk7XHJcbiAgICBcclxuICAgIC8vIOuqqOuLrOydtCDsl7TroLjripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfqs6Drr7wg64KY64iE6riwJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgncG9zdC10aXRsZS1pbnB1dCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3Bvc3QtY29udGVudC1pbnB1dCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2Fub255bW91cy1jaGVja2JveCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgcG9zdCBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICAgIFxyXG4gICAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKFxyXG4gICAgICAoKSA9PiBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvbWZvcnQtc2NyZWVuLXNjcm9sbHZpZXcnKSkudG9CZVRydXRoeSgpLFxyXG4gICAgICB7IHRpbWVvdXQ6IDUwMDAgfSAvLyDtg4DsnoTslYTsm4Mg7Iuc6rCEIOuKmOumrOq4sFxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6wg7Je06riwXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ25ldy1wb3N0LWJ1dHRvbicpKTtcclxuICAgIFxyXG4gICAgLy8g7Y+8IOyeheugpVxyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZ2V0QnlUZXN0SWQoJ3Bvc3QtdGl0bGUtaW5wdXQnKSwgJ+yDiOuhnOyatCDqs6Drr7wnKTtcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdwb3N0LWNvbnRlbnQtaW5wdXQnKSwgJ+ydtOqyg+ydgCDthYzsiqTtirgg6rOg66+87J6F64uI64ukLicpO1xyXG4gICAgXHJcbiAgICAvLyDtj7wg7KCc7LacXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1wb3N0LWJ1dHRvbicpKTtcclxuICAgIFxyXG4gICAgLy8gQVBJ6rCAIOyYrOuwlOuluCDrjbDsnbTthLDroZwg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2UuY3JlYXRlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICAgIHRpdGxlOiAn7IOI66Gc7Jq0IOqzoOuvvCcsXHJcbiAgICAgICAgY29udGVudDogJ+ydtOqyg+ydgCDthYzsiqTtirgg6rOg66+87J6F64uI64ukLicsXHJcbiAgICAgICAgaXNfYW5vbnltb3VzOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyEseqztSDslYzrprzsnbQg7ZGc7Iuc65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ+yEseqztScsXHJcbiAgICAgICfqsozsi5zrrLzsnbQg65Ox66Gd65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgbm90IHN1Ym1pdCBwb3N0IHdpdGggZW1wdHkgZmllbGRzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gICAgXHJcbiAgICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoXHJcbiAgICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICAgIHsgdGltZW91dDogNTAwMCB9IC8vIO2DgOyehOyVhOybgyDsi5zqsIQg64qY66as6riwXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyDsg4gg6rKM7Iuc66y8IOuqqOuLrCDsl7TquLBcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnbmV3LXBvc3QtYnV0dG9uJykpO1xyXG4gICAgXHJcbiAgICAvLyDtj7wg7J6F66ClIOyXhuydtCDsoJzstpxcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnc3VibWl0LXBvc3QtYnV0dG9uJykpO1xyXG4gICAgXHJcbiAgICAvLyDsnKDtmqjshLEg6rKA7IKsIOyVjOumvOydtCDtkZzsi5zrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfslYzrprwnLCAn7KCc66qp6rO8IOuCtOyaqeydhCDrqqjrkZAg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgXHJcbiAgICAvLyBBUEnqsIAg7Zi47Lac65CY7KeAIOyViuyVmOuKlOyngCDtmZXsnbhcclxuICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2UuY3JlYXRlUG9zdCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIG9wZW4gY29tbWVudCBtb2RhbCB3aGVuIGNsaWNraW5nIG9uIGEgcG9zdCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCwgZ2V0QWxsQnlUZXh0IH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgICBcclxuICAgIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcihcclxuICAgICAgKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKSxcclxuICAgICAgeyB0aW1lb3V0OiA1MDAwIH0gLy8g7YOA7J6E7JWE7JuDIOyLnOqwhCDripjrpqzquLBcclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOyyqyDrsojsp7gg6rKM7Iuc66y87J2YIOuMk+q4gCDrsoTtirwg7YG066atXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtYnV0dG9uLTEnKSk7XHJcbiAgICBcclxuICAgIC8vIOuMk+q4gCDrqqjri6zsnbQg7Je066C464qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7J2R7JuQIOuplOyLnOyngCDrs7TrgrTquLAnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgXHJcbiAgICAvLyDrqqjri6wg64K067aA7JeQIOygnOuqqeydtCDtkZzsi5zrkJjslrQg7J6I64qU7KeAIO2ZleyduCAo7Jes65+sIOqwnOqwgCDsnojsnYQg7IiYIOyeiOycvOuvgOuhnCBnZXRBbGxCeVRleHQg7IKs7JqpKVxyXG4gICAgY29uc3QgdGl0bGVFbGVtZW50cyA9IGdldEFsbEJ5VGV4dCgn7Jik64qYIOuEiOustCDtnpjrk6TslrTsmpQnKTtcclxuICAgIGV4cGVjdCh0aXRsZUVsZW1lbnRzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtaW5wdXQnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgc2VuZCBhIGNvbW1lbnQgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgICBcclxuICAgIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcihcclxuICAgICAgKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKSxcclxuICAgICAgeyB0aW1lb3V0OiA1MDAwIH0gLy8g7YOA7J6E7JWE7JuDIOyLnOqwhCDripjrpqzquLBcclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOyyqyDrsojsp7gg6rKM7Iuc66y87J2YIOuMk+q4gCDrsoTtirwg7YG066atXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtYnV0dG9uLTEnKSk7XHJcbiAgICBcclxuICAgIC8vIOuMk+q4gCDsnoXroKVcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdjb21tZW50LWlucHV0JyksICftnpjrgrTshLjsmpQhIOydkeybkO2VqeuLiOuLpC4nKTtcclxuICAgIFxyXG4gICAgLy8g64yT6riAIOygnOy2nFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtY29tbWVudC1idXR0b24nKSk7XHJcbiAgICBcclxuICAgIC8vIEFQSeqwgCDsmKzrsJTrpbgg642w7J207YSw66GcIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLnNlbmRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgICAxLCAvLyBwb3N0X2lkXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWVzc2FnZTogJ+2emOuCtOyEuOyalCEg7J2R7JuQ7ZWp64uI64ukLicsXHJcbiAgICAgICAgICBpc19hbm9ueW1vdXM6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7ISx6rO1IOyVjOumvOydtCDtkZzsi5zrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAn7ISx6rO1JywgXHJcbiAgICAgICfrqZTsi5zsp4DqsIAg7KCE7Iah65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgbm90IHN1Ym1pdCBlbXB0eSBjb21tZW50JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gICAgXHJcbiAgICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoXHJcbiAgICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICAgIHsgdGltZW91dDogNTAwMCB9IC8vIO2DgOyehOyVhOybgyDsi5zqsIQg64qY66as6riwXHJcbiAgICApO1xyXG4gICAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg64yT6riAIOuyhO2KvCDtgbTrpq1cclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnY29tbWVudC1idXR0b24tMScpKTtcclxuICAgIFxyXG4gICAgLy8g64yT6riAIOyeheugpSDsl4bsnbQg7KCc7LacXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1jb21tZW50LWJ1dHRvbicpKTtcclxuICAgIFxyXG4gICAgLy8g7Jyg7Zqo7ISxIOqygOyCrCDslYzrprzsnbQg7ZGc7Iuc65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgn7JWM66a8JywgJ+uplOyLnOyngCDrgrTsmqnsnYQg7J6F66Cl7ZW07KO87IS47JqULicpO1xyXG4gICAgXHJcbiAgICAvLyBBUEnqsIAg7Zi47Lac65CY7KeAIOyViuyVmOuKlOyngCDtmZXsnbhcclxuICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2Uuc2VuZE1lc3NhZ2UpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgQVBJIGVycm9yIHdoZW4gbG9hZGluZyBwb3N0cycsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIOy9mOyGlCDsl5Drn6wg66Gc6rmFIOyehOyLnCDruYTtmZzshLHtmZQgKO2FjOyKpO2KuOyXkOyEnOuKlCDsl5Drn6wg67Cc7IOd7J20IOyYiOyDgeuQqClcclxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2Vycm9yJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcclxuICAgIFxyXG4gICAgLy8gQVBJIOyYpOulmCDsi5zrrqzroIjsnbTshZhcclxuICAgIChjb21mb3J0V2FsbFNlcnZpY2UuZ2V0UG9zdHMgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0FQSSBFcnJvcicpKTtcclxuICAgIFxyXG4gICAgcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gICAgXHJcbiAgICAvLyDsmKTrpZgg7JWM66a87J20IO2RnOyLnOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfsmKTrpZgnLCAn6rKM7Iuc66y87J2EIOu2iOufrOyYpOuKlCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsvZjshpQg7JeQ65+sIOuhnOq5hSDrs7Xsm5BcclxuICAgIChjb25zb2xlLmVycm9yIGFzIGplc3QuTW9jaykubW9ja1Jlc3RvcmUoKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBBUEkgZXJyb3Igd2hlbiBjcmVhdGluZyBwb3N0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQVBJIOyYpOulmCDsi5zrrqzroIjsnbTshZhcclxuICAgIChjb21mb3J0V2FsbFNlcnZpY2UuY3JlYXRlUG9zdCBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlKHtcclxuICAgICAgcmVzcG9uc2U6IHsgZGF0YTogeyBtZXNzYWdlOiAn7ISc67KEIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9IH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgICBcclxuICAgIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcihcclxuICAgICAgKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKSxcclxuICAgICAgeyB0aW1lb3V0OiA1MDAwIH0gLy8g7YOA7J6E7JWE7JuDIOyLnOqwhCDripjrpqzquLBcclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOyDiCDqsozsi5zrrLwg66qo64usIOyXtOq4sFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCduZXctcG9zdC1idXR0b24nKSk7XHJcbiAgICBcclxuICAgIC8vIO2PvCDsnoXroKVcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdwb3N0LXRpdGxlLWlucHV0JyksICfsg4jroZzsmrQg6rOg66+8Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgncG9zdC1jb250ZW50LWlucHV0JyksICfsnbTqsoPsnYAg7YWM7Iqk7Yq4IOqzoOuvvOyeheuLiOuLpC4nKTtcclxuICAgIFxyXG4gICAgLy8g7Y+8IOygnOy2nFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtcG9zdC1idXR0b24nKSk7XHJcbiAgICBcclxuICAgIC8vIOyYpOulmCDslYzrprzsnbQg7ZGc7Iuc65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChBbGVydC5hbGVydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICAgJ+yYpOulmCcsXHJcbiAgICAgICAgJ+yEnOuyhCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLidcclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgdG9nZ2xlIGFub255bW91cyBjaGVja2JveCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICAgIFxyXG4gICAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKFxyXG4gICAgICAoKSA9PiBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvbWZvcnQtc2NyZWVuLXNjcm9sbHZpZXcnKSkudG9CZVRydXRoeSgpLFxyXG4gICAgICB7IHRpbWVvdXQ6IDUwMDAgfSAvLyDtg4DsnoTslYTsm4Mg7Iuc6rCEIOuKmOumrOq4sFxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6wg7Je06riwXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ25ldy1wb3N0LWJ1dHRvbicpKTtcclxuICAgIFxyXG4gICAgLy8g7LK07YGs67CV7IqkIO2GoOq4gCAo7J2166qFIOyytO2BrOuwleyKpOulvCDtgbTrpq3tlZjrqbQg7IOB7YOc6rCAIOuzgOqyveuQqClcclxuICAgIGNvbnN0IGNoZWNrYm94ID0gZ2V0QnlUZXN0SWQoJ2Fub255bW91cy1jaGVja2JveCcpO1xyXG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0gY2hlY2tib3gucHJvcHMuY2hpbGRyZW4gIT09IG51bGw7IC8vIOy0iOq4sCDsg4Htg5wg7KCA7J6lXHJcbiAgICBcclxuICAgIC8vIOyytO2BrOuwleyKpCDtgbTrpq1cclxuICAgIGZpcmVFdmVudC5wcmVzcyhjaGVja2JveCk7XHJcbiAgICBcclxuICAgIC8vIO2PvCDsnoXroKVcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdwb3N0LXRpdGxlLWlucHV0JyksICfsg4jroZzsmrQg6rOg66+8Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgncG9zdC1jb250ZW50LWlucHV0JyksICfsnbTqsoPsnYAg7YWM7Iqk7Yq4IOqzoOuvvOyeheuLiOuLpC4nKTtcclxuICAgIFxyXG4gICAgLy8g7Y+8IOygnOy2nFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtcG9zdC1idXR0b24nKSk7XHJcbiAgICBcclxuICAgIC8vIEFQSeqwgCBpc19hbm9ueW1vdXM6ICFpbml0aWFsU3RhdGXroZwg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgLy8g7LSI6riwIOyDge2DnOydmCDrsJjrjIDqsJLsnLzroZwg7ISk7KCV65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2UuY3JlYXRlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICAgIHRpdGxlOiAn7IOI66Gc7Jq0IOqzoOuvvCcsXHJcbiAgICAgICAgY29udGVudDogJ+ydtOqyg+ydgCDthYzsiqTtirgg6rOg66+87J6F64uI64ukLicsXHJcbiAgICAgICAgaXNfYW5vbnltb3VzOiAhaW5pdGlhbFN0YXRlXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuLy8g66qo64usIOy3qOyGjCDrsoTtirwg7YWM7Iqk7Yq4ICjsiJjsoJUpXHJcbi8vIOuqqOuLrOydtCDsl7Trpqzqs6Ag64ur7Z6I64qUIOuPmeyekSDthYzsiqTtirggKOuLpOyLnCDsiJjsoJUpXHJcbnRlc3QoJ3Nob3VsZCBoYW5kbGUgbW9kYWwgb3BlbiBhbmQgY2xvc2UgcHJvcGVybHknLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0LCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gIFxyXG4gIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gIGF3YWl0IHdhaXRGb3IoXHJcbiAgICAoKSA9PiBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvbWZvcnQtc2NyZWVuLXNjcm9sbHZpZXcnKSkudG9CZVRydXRoeSgpLFxyXG4gICAgeyB0aW1lb3V0OiA1MDAwIH0gLy8g7YOA7J6E7JWE7JuDIOyLnOqwhCDripjrpqzquLBcclxuICApO1xyXG4gIFxyXG4gIC8vIOyLnOyekSDsg4Htg5zsl5DshJzripQg66qo64us7J20IOuLq+2YgCDsnojslrTslbwg7ZWoXHJcbiAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqs6Drr7wg64KY64iE6riwJykpLnRvQmVOdWxsKCk7XHJcbiAgXHJcbiAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6wg7Je06riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCduZXctcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g66qo64us7J20IOyXtOuguOuKlOyngCDtmZXsnbhcclxuICBleHBlY3QoZ2V0QnlUZXh0KCfqs6Drr7wg64KY64iE6riwJykpLnRvQmVUcnV0aHkoKTtcclxuICBcclxuICAvLyDst6jshowg67KE7Yq87Jy866GcIOuqqOuLrCDri6vquLBcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NhbmNlbC1wb3N0LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyDrqqjri6zsnbQg64ur7ZiU64qU7KeAIO2ZleyduCAo67mE64+Z6riwIOyymOumrCDquLDri6TrprwpXHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ+qzoOuvvCDrgpjriITquLAnKSkudG9CZU51bGwoKTtcclxuICB9LCB7IHRpbWVvdXQ6IDMwMDAgfSk7XHJcbiAgXHJcbiAgLy8g64uk7IucIOuqqOuLrCDsl7TquLBcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ25ldy1wb3N0LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyDrqqjri6zsnbQg64uk7IucIOyXtOuguOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+qzoOuvvCDrgpjriITquLAnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIOqyjOyLnO2VmOq4sCDrsoTtirwg64+Z7J6RIO2ZleyduCAo7KCc66qp6rO8IOuCtOyaqSDsnoXroKUg7ZuEKVxyXG4gIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdwb3N0LXRpdGxlLWlucHV0JyksICfthYzsiqTtirgg7KCc66qpJyk7XHJcbiAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZ2V0QnlUZXN0SWQoJ3Bvc3QtY29udGVudC1pbnB1dCcpLCAn7YWM7Iqk7Yq4IOuCtOyaqScpO1xyXG4gIFxyXG4gIC8vIOqyjOyLnO2VmOq4sCDsoIQg7IOB7YOcIO2ZleyduFxyXG4gIGV4cGVjdChnZXRCeVRlc3RJZCgnc3VibWl0LXBvc3QtYnV0dG9uJykpLnRvQmVUcnV0aHkoKTtcclxuICBcclxuICAvLyDqsozsi5ztlZjquLAg67KE7Yq8IO2BtOumrVxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnc3VibWl0LXBvc3QtYnV0dG9uJykpO1xyXG4gIFxyXG4gIC8vIOyEseqztSDslYzrprzsnbQg7ZGc7Iuc65CY7JeI64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ+yEseqztScsXHJcbiAgICAgICfqsozsi5zrrLzsnbQg65Ox66Gd65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbnRlc3QoJ3Nob3VsZCBsaWtlIGEgcG9zdCcsIGFzeW5jICgpID0+IHtcclxuICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgXHJcbiAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgYXdhaXQgd2FpdEZvcihcclxuICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICB7IHRpbWVvdXQ6IDUwMDAgfSAvLyDtg4DsnoTslYTsm4Mg7Iuc6rCEIOuKmOumrOq4sFxyXG4gICk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg7KKL7JWE7JqUIOuyhO2KvCDssL7quLBcclxuICBjb25zdCBsaWtlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xpa2UtYnV0dG9uLTEnKTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq8IO2BtOumrVxyXG4gIGZpcmVFdmVudC5wcmVzcyhsaWtlQnV0dG9uKTtcclxuICBcclxuICAvLyBsaWtlUG9zdCBBUEnqsIAg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHBvc3RTZXJ2aWNlLmxpa2VQb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICB9KTtcclxuICBcclxuICAvLyDqsozsi5zrrLwg66qp66Gd7J20IOyDiOuhnOqzoOy5qCDrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgZXhwZWN0KGNvbWZvcnRXYWxsU2VydmljZS5nZXRQb3N0cykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG59KTtcclxuICAvLyDsoovslYTsmpQg7Leo7IaMKO2GoOq4gCkg7YWM7Iqk7Yq4XHJcbnRlc3QoJ3Nob3VsZCB0b2dnbGUgbGlrZSBzdGF0dXMgZm9yIGEgcG9zdCcsIGFzeW5jICgpID0+IHtcclxuICAvLyBwb3N0U2VydmljZS5saWtlUG9zdCDsnZHri7XsnYQg65GQIOuyiOynuCDtmLjstpzsl5Ag66ee6rKMIOyEpOyglVxyXG4gIChwb3N0U2VydmljZS5saWtlUG9zdCBhcyBqZXN0Lk1vY2spXHJcbiAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgZGF0YTogeyBtZXNzYWdlOiAnbGlrZWQnIH0gfSlcclxuICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBkYXRhOiB7IG1lc3NhZ2U6ICd1bmxpa2VkJyB9IH0pO1xyXG4gIFxyXG4gIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgXHJcbiAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgYXdhaXQgd2FpdEZvcihcclxuICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICB7IHRpbWVvdXQ6IDUwMDAgfSAvLyDtg4DsnoTslYTsm4Mg7Iuc6rCEIOuKmOumrOq4sFxyXG4gICk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg7KKL7JWE7JqUIOuyhO2KvCDssL7quLBcclxuICBjb25zdCBsaWtlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xpa2UtYnV0dG9uLTEnKTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq8IO2BtOumrSAo7KKL7JWE7JqUKVxyXG4gIGZpcmVFdmVudC5wcmVzcyhsaWtlQnV0dG9uKTtcclxuICBcclxuICAvLyBBUEnqsIAg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHBvc3RTZXJ2aWNlLmxpa2VQb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICB9KTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq87J2EIOuLpOyLnCDtgbTrpq0gKOyii+yVhOyalCDst6jshowpXHJcbiAgZmlyZUV2ZW50LnByZXNzKGxpa2VCdXR0b24pO1xyXG4gIFxyXG4gIC8vIEFQSeqwgCDrkZAg67KIIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChwb3N0U2VydmljZS5saWtlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIOqyjOyLnOusvCDrqqnroZ3snbQg7IOI66Gc6rOg7LmoIOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLmdldFBvc3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMyk7IC8vIOy0iOq4sCDroZzrk5wgKyDrkZAg67KI7J2YIOyii+yVhOyalCDthqDquIAg7ZuEIOyDiOuhnOqzoOy5qFxyXG59KTtcclxuXHJcbi8vIOuplOyLnOyngCDrqqjri6zsl5DshJwg7J2166qFIOyytO2BrOuwleyKpCDthqDquIAg7YWM7Iqk7Yq4XHJcbnRlc3QoJ3Nob3VsZCB0b2dnbGUgYW5vbnltb3VzIGNoZWNrYm94IGluIG1lc3NhZ2UgbW9kYWwnLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKFxyXG4gICAgKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKSxcclxuICAgIHsgdGltZW91dDogNTAwMCB9IC8vIO2DgOyehOyVhOybgyDsi5zqsIQg64qY66as6riwXHJcbiAgKTtcclxuICBcclxuICAvLyDssqsg67KI7Ke4IOqyjOyLnOusvOydmCDrjJPquIAg67KE7Yq8IO2BtOumrVxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnY29tbWVudC1idXR0b24tMScpKTtcclxuICBcclxuICAvLyDrqqjri6wg64K07J2YIOydteuqhSDssrTtgazrsJXsiqQg7LC+6riwXHJcbiAgY29uc3QgY2hlY2tib3ggPSBnZXRCeVRlc3RJZCgnYW5vbnltb3VzLWNoZWNrYm94Jyk7XHJcbiAgY29uc3QgaW5pdGlhbFN0YXRlID0gY2hlY2tib3gucHJvcHMuY2hpbGRyZW4gIT09IG51bGw7IC8vIOy0iOq4sCDsg4Htg5wg7KCA7J6lXHJcbiAgXHJcbiAgLy8g7LK07YGs67CV7IqkIO2BtOumrVxyXG4gIGZpcmVFdmVudC5wcmVzcyhjaGVja2JveCk7XHJcbiAgXHJcbiAgLy8g64yT6riAIOyeheugpVxyXG4gIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdjb21tZW50LWlucHV0JyksICfsnZHsm5Ag66mU7Iuc7KeA7J6F64uI64ukLicpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDsoJzstpxcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1jb21tZW50LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyBBUEnqsIAgaXNfYW5vbnltb3VzOiAhaW5pdGlhbFN0YXRl66GcIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2Uuc2VuZE1lc3NhZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAxLCAvLyBwb3N0X2lkXHJcbiAgICAgIHtcclxuICAgICAgICBtZXNzYWdlOiAn7J2R7JuQIOuplOyLnOyngOyeheuLiOuLpC4nLFxyXG4gICAgICAgIGlzX2Fub255bW91czogIWluaXRpYWxTdGF0ZVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8vIOqyjOyLnOusvOqzvCDrqZTsi5zsp4Ag66qo64usIOuPmeyLnOyXkCDsl7TquLAv64ur6riwIO2FjOyKpO2KuFxyXG50ZXN0KCdzaG91bGQgaGFuZGxlIG11bHRpcGxlIG1vZGFscyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0LCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gIFxyXG4gIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gIGF3YWl0IHdhaXRGb3IoXHJcbiAgICAoKSA9PiBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvbWZvcnQtc2NyZWVuLXNjcm9sbHZpZXcnKSkudG9CZVRydXRoeSgpLFxyXG4gICAgeyB0aW1lb3V0OiA1MDAwIH0gLy8g7YOA7J6E7JWE7JuDIOyLnOqwhCDripjrpqzquLBcclxuICApO1xyXG4gIFxyXG4gIC8vIOyDiCDqsozsi5zrrLwg66qo64usIOyXtOq4sFxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnbmV3LXBvc3QtYnV0dG9uJykpO1xyXG4gIFxyXG4gIC8vIOyDiCDqsozsi5zrrLwg66qo64us7J20IOyXtOuguOuKlOyngCDtmZXsnbhcclxuICBleHBlY3QoZ2V0QnlUZXh0KCfqs6Drr7wg64KY64iE6riwJykpLnRvQmVUcnV0aHkoKTtcclxuICBcclxuICAvLyDrqqjri6wg64ur6riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdjYW5jZWwtcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g66qo64us7J20IOuLq+2YlOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgn6rOg66+8IOuCmOuIhOq4sCcpKS50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDrqqjri6wg7Je06riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdjb21tZW50LWJ1dHRvbi0xJykpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDrqqjri6zsnbQg7Je066C464qU7KeAIO2ZleyduFxyXG4gIGV4cGVjdChnZXRCeVRleHQoJ+ydkeybkCDrqZTsi5zsp4Ag67O064K06riwJykpLnRvQmVUcnV0aHkoKTtcclxuICBcclxuICAvLyDrjJPquIAg66qo64usIOuLq+q4sFxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnY2FuY2VsLW1lc3NhZ2UtYnV0dG9uJykpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDrqqjri6zsnbQg64ur7ZiU64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfsnZHsm5Ag66mU7Iuc7KeAIOuztOuCtOq4sCcpKS50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4vLyDsoovslYTsmpQg7Yag6riAIO2FjOyKpO2KuFxyXG50ZXN0KCdzaG91bGQgdG9nZ2xlIGxpa2Ugc3RhdHVzIHdoZW4gcHJlc3NpbmcgbGlrZSBidXR0b24gbXVsdGlwbGUgdGltZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgLy8gcG9zdFNlcnZpY2UubGlrZVBvc3Qg7J2R64u1IOyEpOyglVxyXG4gIChwb3N0U2VydmljZS5saWtlUG9zdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogeyBtZXNzYWdlOiAnc3VjY2VzcycgfSB9KTtcclxuICBcclxuICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgXHJcbiAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgYXdhaXQgd2FpdEZvcihcclxuICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICB7IHRpbWVvdXQ6IDUwMDAgfSAvLyDtg4DsnoTslYTsm4Mg7Iuc6rCEIOuKmOumrOq4sFxyXG4gICk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg7KKL7JWE7JqUIOuyhO2KvCDssL7quLBcclxuICBjb25zdCBsaWtlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xpa2UtYnV0dG9uLTEnKTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq8IO2BtOumrSAo7KKL7JWE7JqUKVxyXG4gIGZpcmVFdmVudC5wcmVzcyhsaWtlQnV0dG9uKTtcclxuICBcclxuICAvLyBBUEnqsIAg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHBvc3RTZXJ2aWNlLmxpa2VQb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICB9KTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq87J2EIOuLpOyLnCDtgbTrpq0gKOyii+yVhOyalCDst6jshowpXHJcbiAgZmlyZUV2ZW50LnByZXNzKGxpa2VCdXR0b24pO1xyXG4gIFxyXG4gIC8vIEFQSeqwgCDrkZAg67KIIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChwb3N0U2VydmljZS5saWtlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8vIOuplOyLnOyngCDrqqjri6zsl5DshJwg7J2166qFIOyytO2BrOuwleyKpCDthqDquIAg7YWM7Iqk7Yq4XHJcbnRlc3QoJ3Nob3VsZCB0b2dnbGUgYW5vbnltb3VzIGNoZWNrYm94IGluIG1lc3NhZ2UgbW9kYWwnLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKFxyXG4gICAgKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKSxcclxuICAgIHsgdGltZW91dDogNTAwMCB9IC8vIO2DgOyehOyVhOybgyDsi5zqsIQg64qY66as6riwXHJcbiAgKTtcclxuICBcclxuICAvLyDssqsg67KI7Ke4IOqyjOyLnOusvOydmCDrjJPquIAg67KE7Yq8IO2BtOumrVxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnY29tbWVudC1idXR0b24tMScpKTtcclxuICBcclxuICAvLyDrqqjri6wg64K07J2YIOydteuqhSDssrTtgazrsJXsiqQg7LC+6riwXHJcbiAgY29uc3QgY2hlY2tib3ggPSBnZXRCeVRlc3RJZCgnYW5vbnltb3VzLWNoZWNrYm94Jyk7XHJcbiAgY29uc3QgaW5pdGlhbFN0YXRlID0gY2hlY2tib3gucHJvcHMuY2hpbGRyZW4gIT09IG51bGw7IC8vIOy0iOq4sCDsg4Htg5wg7KCA7J6lXHJcbiAgXHJcbiAgLy8g7LK07YGs67CV7IqkIO2BtOumrVxyXG4gIGZpcmVFdmVudC5wcmVzcyhjaGVja2JveCk7XHJcbiAgXHJcbiAgLy8g64yT6riAIOyeheugpVxyXG4gIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdjb21tZW50LWlucHV0JyksICfsnZHsm5Ag66mU7Iuc7KeA7J6F64uI64ukLicpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDsoJzstpxcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1jb21tZW50LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyBBUEnqsIAgaXNfYW5vbnltb3VzOiAhaW5pdGlhbFN0YXRl66GcIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChjb21mb3J0V2FsbFNlcnZpY2Uuc2VuZE1lc3NhZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAxLCAvLyBwb3N0X2lkXHJcbiAgICAgIHtcclxuICAgICAgICBtZXNzYWdlOiAn7J2R7JuQIOuplOyLnOyngOyeheuLiOuLpC4nLFxyXG4gICAgICAgIGlzX2Fub255bW91czogIWluaXRpYWxTdGF0ZVxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8vIEFQSSDsmKTrpZgg7IucIO2PvCDsg4Htg5wg7Jyg7KeAIO2FjOyKpO2KuFxyXG50ZXN0KCdzaG91bGQgcHJlc2VydmUgZm9ybSBpbnB1dCB3aGVuIEFQSSBlcnJvciBvY2N1cnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgLy8gQVBJIOyYpOulmCDsi5zrrqzroIjsnbTshZhcclxuICAoY29tZm9ydFdhbGxTZXJ2aWNlLmNyZWF0ZVBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgcmVzcG9uc2U6IHsgZGF0YTogeyBtZXNzYWdlOiAn7ISc67KEIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9IH1cclxuICB9KTtcclxuICBcclxuICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKFxyXG4gICAgKCkgPT4gZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKSxcclxuICAgIHsgdGltZW91dDogNTAwMCB9IC8vIO2DgOyehOyVhOybgyDsi5zqsIQg64qY66as6riwXHJcbiAgKTtcclxuICBcclxuICAvLyDsg4gg6rKM7Iuc66y8IOuqqOuLrCDsl7TquLBcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ25ldy1wb3N0LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyDtj7wg7J6F66ClXHJcbiAgY29uc3QgdGVzdFRpdGxlID0gJ+2FjOyKpO2KuCDsoJzrqqknO1xyXG4gIGNvbnN0IHRlc3RDb250ZW50ID0gJ+2FjOyKpO2KuCDrgrTsmqnsnoXri4jri6QuJztcclxuICBcclxuICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgncG9zdC10aXRsZS1pbnB1dCcpLCB0ZXN0VGl0bGUpO1xyXG4gIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdwb3N0LWNvbnRlbnQtaW5wdXQnKSwgdGVzdENvbnRlbnQpO1xyXG4gIFxyXG4gIC8vIO2PvCDsoJzstpxcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1wb3N0LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyDsmKTrpZgg67Cc7IOdIO2bhOyXkOuPhCDtj7wg7J6F66Cl7J20IOycoOyngOuQmOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChBbGVydC5hbGVydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ+yYpOulmCcsICfshJzrsoQg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nKTtcclxuICAgIFxyXG4gICAgLy8g7KCc66qp6rO8IOuCtOyaqeydtCDsnKDsp4DrkJjslrTslbwg7ZWoXHJcbiAgICBjb25zdCB0aXRsZUlucHV0ID0gZ2V0QnlUZXN0SWQoJ3Bvc3QtdGl0bGUtaW5wdXQnKTtcclxuICAgIGNvbnN0IGNvbnRlbnRJbnB1dCA9IGdldEJ5VGVzdElkKCdwb3N0LWNvbnRlbnQtaW5wdXQnKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHRpdGxlSW5wdXQucHJvcHMudmFsdWUpLnRvQmUodGVzdFRpdGxlKTtcclxuICAgIGV4cGVjdChjb250ZW50SW5wdXQucHJvcHMudmFsdWUpLnRvQmUodGVzdENvbnRlbnQpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4vLyBBUEkg7Jik66WYIOyLnCDtj7wg7IOB7YOcIOycoOyngCDthYzsiqTtirhcclxudGVzdCgnc2hvdWxkIHByZXNlcnZlIGZvcm0gaW5wdXQgd2hlbiBBUEkgZXJyb3Igb2NjdXJzJywgYXN5bmMgKCkgPT4ge1xyXG4gIC8vIEFQSSDsmKTrpZgg7Iuc666s66CI7J207IWYXHJcbiAgKGNvbWZvcnRXYWxsU2VydmljZS5jcmVhdGVQb3N0IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKHtcclxuICAgIHJlc3BvbnNlOiB7IGRhdGE6IHsgbWVzc2FnZTogJ+yEnOuyhCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicgfSB9XHJcbiAgfSk7XHJcbiAgXHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgXHJcbiAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgYXdhaXQgd2FpdEZvcihcclxuICAgICgpID0+IGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCksXHJcbiAgICB7IHRpbWVvdXQ6IDUwMDAgfSAvLyDtg4DsnoTslYTsm4Mg7Iuc6rCEIOuKmOumrOq4sFxyXG4gICk7XHJcbiAgXHJcbiAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6wg7Je06riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCduZXctcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g7Y+8IOyeheugpVxyXG4gIGNvbnN0IHRlc3RUaXRsZSA9ICfthYzsiqTtirgg7KCc66qpJztcclxuICBjb25zdCB0ZXN0Q29udGVudCA9ICfthYzsiqTtirgg64K07Jqp7J6F64uI64ukLic7XHJcbiAgXHJcbiAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZ2V0QnlUZXN0SWQoJ3Bvc3QtdGl0bGUtaW5wdXQnKSwgdGVzdFRpdGxlKTtcclxuICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgncG9zdC1jb250ZW50LWlucHV0JyksIHRlc3RDb250ZW50KTtcclxuICBcclxuICAvLyDtj7wg7KCc7LacXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g7Jik66WYIOuwnOyDnSDtm4Tsl5Drj4Qg7Y+8IOyeheugpeydtCDsnKDsp4DrkJjripTsp4Ag7ZmV7J24XHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfsmKTrpZgnLCAn7ISc67KEIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyk7XHJcbiAgICBcclxuICAgIC8vIOygnOuqqeqzvCDrgrTsmqnsnbQg7Jyg7KeA65CY7Ja07JW8IO2VqFxyXG4gICAgY29uc3QgdGl0bGVJbnB1dCA9IGdldEJ5VGVzdElkKCdwb3N0LXRpdGxlLWlucHV0Jyk7XHJcbiAgICBjb25zdCBjb250ZW50SW5wdXQgPSBnZXRCeVRlc3RJZCgncG9zdC1jb250ZW50LWlucHV0Jyk7XHJcbiAgICBcclxuICAgIGV4cGVjdCh0aXRsZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKHRlc3RUaXRsZSk7XHJcbiAgICBleHBlY3QoY29udGVudElucHV0LnByb3BzLnZhbHVlKS50b0JlKHRlc3RDb250ZW50KTtcclxuICB9KTtcclxufSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBSUFBLFdBQUEsR0FBS0MsSUFBSSxvQ0FBb0MsWUFBTTtFQUNqRCxJQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7RUFDOUIsT0FBTyxTQUFTQyxpQkFBaUJBLENBQUNDLEtBQUssRUFBRTtJQUN2QyxPQUFPSCxLQUFLLENBQUNJLGFBQWEsQ0FBQyxNQUFNLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUM1QkgsS0FBSztNQUNSSSxNQUFNLEVBQUUsMkJBQTJCO01BQ25DQyxRQUFRLEVBQUUsQ0FDUlIsS0FBSyxDQUFDSSxhQUFhLENBQUMsTUFBTSxFQUFFO1FBQUVLLEdBQUcsRUFBRSxTQUFTO1FBQUVGLE1BQU0sRUFBRTtNQUFvQixDQUFDLENBQUMsRUFDNUVQLEtB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TUFDakVqQixRQUFRLEVBQUU7UUFBRXpHLElBQUksRUFBRTtVQUFFQyxPQUFPLEVBQUU7UUFBaUI7TUFBRTtJQUNsRCxDQUFDLENBQUM7SUFFRixJQUFBZ0ksc0JBQUEsR0FBbUNqRSxtQkFBbUIsQ0FBQyxDQUFDO01BQWhEVSxXQUFXLEdBQUF1RCxzQkFBQSxDQUFYdkQsV0FBVztNQUFFUSxTQUFTLEdBQUErQyxzQkFBQSxDQUFUL0MsU0FBUztJQUc5QixNQUFNLElBQUFILG9CQUFPLEVBQ1g7TUFBQSxPQUFNSCxNQUFNLENBQUNGLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0lBQUEsR0FDbkU7TUFBRU8sT0FBTyxFQUFFO0lBQUssQ0FDbEIsQ0FBQztJQUdEQyxzQkFBUyxDQUFDQyxLQUFLLENBQUNaLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRy9DLElBQU1rRCxTQUFTLEdBQUcsUUFBUTtJQUMxQixJQUFNQyxXQUFXLEdBQUcsWUFBWTtJQUVoQ3hDLHNCQUFTLENBQUNHLFVBQVUsQ0FBQ2QsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEVBQUVrRCxTQUFTLENBQUM7SUFDaEV2QyxzQkFBUyxDQUFDRyxVQUFVLENBQUNkLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFbUQsV0FBVyxDQUFDO0lBR3BFeEMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDWixXQUFXLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUdsRCxNQUFNLElBQUFLLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkgsTUFBTSxDQUFDYyxtQkFBSyxDQUFDeEYsS0FBSyxDQUFDLENBQUN1RixvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUM7TUFHaEUsSUFBTXFDLFVBQVUsR0FBR3BELFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztNQUNsRCxJQUFNcUQsWUFBWSxHQUFHckQsV0FBVyxDQUFDLG9CQUFvQixDQUFDO01BRXRERSxNQUFNLENBQUNrRCxVQUFVLENBQUN2SixLQUFLLENBQUNPLEtBQUssQ0FBQyxDQUFDa0osSUFBSSxDQUFDSixTQUFTLENBQUM7TUFDOUNoRCxNQUFNLENBQUNtRCxZQUFZLENBQUN4SixLQUFLLENBQUNPLEtBQUssQ0FBQyxDQUFDa0osSUFBSSxDQUFDSCxXQUFXLENBQUM7SUFDcEQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119