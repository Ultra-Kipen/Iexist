{"version":3,"names":["testEmotions","label","icon","color","testPosts","id","anonymousId","content","emotion","emotionIcon","image","likes","comments","timestamp","handlePostSubmission","imageUrl","setIsLoading","setIsDialogVisible","setTimeout","handleImageUploadAction","setImageUrl","handleLikeAction","posts","postId","setPosts","map","post","Object","assign","handleCommentAction","commentContent","concat","_toConsumableArray2","default","Date","now","author","describe","beforeEach","jest","clearAllMocks","useFakeTimers","afterEach","useRealTimers","it","fn","result","expect","toBe","toHaveBeenCalledWith","advanceTimersByTime","not","toHaveBeenCalled","updatedPosts","mock","calls","mockDateNow","spyOn","mockImplementation","length"],"sources":["HomeScreenUtils.test.ts"],"sourcesContent":["// __tests__/utils/HomeScreenUtils.test.ts\r\n\r\n/**\r\n * HomeScreen 유틸리티 함수들에 대한 유닛 테스트\r\n * \r\n * 이 테스트는 HomeScreen 컴포넌트에서 추출한 유틸리티 함수들만을 테스트합니다.\r\n * 이렇게 하면 React Native의 UI 렌더링과 관련된 복잡성을 피하면서\r\n * 핵심 비즈니스 로직을 테스트할 수 있습니다.\r\n */\r\n\r\n// 테스트할 함수들 직접 정의 (HomeScreen에서 임포트하지 않고!)\r\n// 이렇게 하면 의존성 문제를 완전히 회피할 수 있습니다.\r\n\r\n// 타입 정의\r\ntype Emotion = {\r\n    label: string;\r\n    icon: string;\r\n    color: string;\r\n  };\r\n  \r\n  type Comment = {\r\n    id: number;\r\n    author: string;\r\n    content: string;\r\n  };\r\n  \r\n  type Post = {\r\n    id: number;\r\n    anonymousId: string;\r\n    content: string;\r\n    emotion: string;\r\n    emotionIcon: string;\r\n    image: string;\r\n    likes: number;\r\n    comments: Comment[];\r\n    timestamp: string;\r\n  };\r\n  \r\n  // 테스트용 감정 데이터\r\n  const testEmotions: Emotion[] = [\r\n    { label: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n    { label: '감사', icon: 'hand-heart', color: '#FF69B4' },\r\n  ];\r\n  \r\n  // 테스트용 게시물 데이터\r\n  const testPosts: Post[] = [\r\n    {\r\n      id: 1,\r\n      anonymousId: '익명1',\r\n      content: '테스트 게시물',\r\n      emotion: '행복',\r\n      emotionIcon: '😊',\r\n      image: '',\r\n      likes: 5,\r\n      comments: [],\r\n      timestamp: '1시간 전'\r\n    }\r\n  ];\r\n  \r\n  // handlePostSubmission 함수 정의\r\n  function handlePostSubmission(\r\n    content: string, \r\n    emotion: Emotion | null, \r\n    imageUrl: string, \r\n    setIsLoading: (value: boolean) => void,\r\n    setIsDialogVisible: (value: boolean) => void\r\n  ): boolean {\r\n    if (content && emotion) {\r\n      setIsLoading(true);\r\n      // 게시물 업로드 로직을 시뮬레이트\r\n      setTimeout(() => {\r\n        setIsLoading(false);\r\n        setIsDialogVisible(true);\r\n      }, 1000);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  // handleImageUploadAction 함수 정의\r\n  function handleImageUploadAction(\r\n    setImageUrl: (url: string) => void\r\n  ): void {\r\n    setImageUrl('https://via.placeholder.com/150');\r\n  }\r\n  \r\n  // handleLikeAction 함수 정의\r\n  function handleLikeAction(\r\n    posts: Post[],\r\n    postId: number, \r\n    setPosts: (posts: Post[]) => void\r\n  ): void {\r\n    setPosts(posts.map(post =>\r\n      post.id === postId ? { ...post, likes: post.likes + 1 } : post\r\n    ));\r\n  }\r\n  \r\n  // handleCommentAction 함수 정의\r\n  function handleCommentAction(\r\n    posts: Post[],\r\n    postId: number, \r\n    commentContent: string,\r\n    setPosts: (posts: Post[]) => void\r\n  ): void {\r\n    setPosts(posts.map(post =>\r\n      post.id === postId\r\n        ? {\r\n            ...post,\r\n            comments: [\r\n              ...post.comments,\r\n              {\r\n                id: Date.now(),\r\n                author: '익명',\r\n                content: commentContent\r\n              }\r\n            ]\r\n          }\r\n        : post\r\n    ));\r\n  }\r\n  \r\n  // 실제 테스트 코드\r\n  describe('HomeScreen 유틸리티 함수', () => {\r\n    // 테스트 전에 실행\r\n    beforeEach(() => {\r\n      jest.clearAllMocks();\r\n      jest.useFakeTimers();\r\n    });\r\n  \r\n    // 테스트 후에 실행\r\n    afterEach(() => {\r\n      jest.useRealTimers();\r\n    });\r\n  \r\n    // handlePostSubmission 테스트\r\n    describe('handlePostSubmission 함수', () => {\r\n      it('내용과 감정이 있을 때 true를 반환해야 함', () => {\r\n        // Mock 함수 생성\r\n        const setIsLoading = jest.fn();\r\n        const setIsDialogVisible = jest.fn();\r\n        \r\n        // 테스트 데이터\r\n        const content = '테스트 게시물';\r\n        const emotion = testEmotions[0]; // '행복' 감정\r\n        const imageUrl = 'https://example.com/image.jpg';\r\n        \r\n        // 함수 호출\r\n        const result = handlePostSubmission(\r\n          content, \r\n          emotion, \r\n          imageUrl, \r\n          setIsLoading, \r\n          setIsDialogVisible\r\n        );\r\n        \r\n        // 검증\r\n        expect(result).toBe(true);\r\n        expect(setIsLoading).toHaveBeenCalledWith(true);\r\n        \r\n        // setTimeout을 시뮬레이션\r\n        jest.advanceTimersByTime(1000);\r\n        \r\n        // 타이머 완료 후 상태 검증\r\n        expect(setIsLoading).toHaveBeenCalledWith(false);\r\n        expect(setIsDialogVisible).toHaveBeenCalledWith(true);\r\n      });\r\n      \r\n      it('내용이 없을 때 false를 반환해야 함', () => {\r\n        // Mock 함수 생성\r\n        const setIsLoading = jest.fn();\r\n        const setIsDialogVisible = jest.fn();\r\n        \r\n        // 내용 없음\r\n        const content = '';\r\n        const emotion = testEmotions[0]; // '행복' 감정\r\n        const imageUrl = 'https://example.com/image.jpg';\r\n        \r\n        // 함수 호출\r\n        const result = handlePostSubmission(\r\n          content, \r\n          emotion, \r\n          imageUrl, \r\n          setIsLoading, \r\n          setIsDialogVisible\r\n        );\r\n        \r\n        // 검증\r\n        expect(result).toBe(false);\r\n        expect(setIsLoading).not.toHaveBeenCalled();\r\n        expect(setIsDialogVisible).not.toHaveBeenCalled();\r\n      });\r\n      \r\n      it('감정이 없을 때 false를 반환해야 함', () => {\r\n        // Mock 함수 생성\r\n        const setIsLoading = jest.fn();\r\n        const setIsDialogVisible = jest.fn();\r\n        \r\n        // 감정 없음\r\n        const content = '테스트 게시물';\r\n        const emotion = null;\r\n        const imageUrl = 'https://example.com/image.jpg';\r\n        \r\n        // 함수 호출\r\n        const result = handlePostSubmission(\r\n          content, \r\n          emotion, \r\n          imageUrl, \r\n          setIsLoading, \r\n          setIsDialogVisible\r\n        );\r\n        \r\n        // 검증\r\n        expect(result).toBe(false);\r\n        expect(setIsLoading).not.toHaveBeenCalled();\r\n        expect(setIsDialogVisible).not.toHaveBeenCalled();\r\n      });\r\n    });\r\n    \r\n    // handleImageUploadAction 테스트\r\n    describe('handleImageUploadAction 함수', () => {\r\n      it('이미지 URL을 설정해야 함', () => {\r\n        // Mock 함수 생성\r\n        const setImageUrl = jest.fn();\r\n        \r\n        // 함수 호출\r\n        handleImageUploadAction(setImageUrl);\r\n        \r\n        // 검증\r\n        expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');\r\n      });\r\n    });\r\n    \r\n    // handleLikeAction 테스트\r\n    describe('handleLikeAction 함수', () => {\r\n      it('좋아요 수를 증가시켜야 함', () => {\r\n        // 테스트 데이터\r\n        const posts = [...testPosts]; // 기존 게시물 복사\r\n        const postId = 1;\r\n        const setPosts = jest.fn();\r\n        \r\n        // 함수 호출\r\n        handleLikeAction(posts, postId, setPosts);\r\n        \r\n        // 검증\r\n        expect(setPosts).toHaveBeenCalled();\r\n        \r\n        // setPosts에 전달된 새 게시물 배열 가져오기\r\n        const updatedPosts = setPosts.mock.calls[0][0];\r\n        \r\n        // 좋아요 수가 증가했는지 확인\r\n        expect(updatedPosts[0].likes).toBe(6);\r\n      });\r\n    });\r\n    \r\n    // handleCommentAction 테스트\r\n    describe('handleCommentAction 함수', () => {\r\n      it('댓글을 추가해야 함', () => {\r\n        // 테스트 데이터\r\n        const posts = [...testPosts]; // 기존 게시물 복사\r\n        const postId = 1;\r\n        const commentContent = '테스트 댓글';\r\n        const setPosts = jest.fn();\r\n        \r\n        // Date.now 모킹\r\n        const mockDateNow = 123456789;\r\n        jest.spyOn(Date, 'now').mockImplementation(() => mockDateNow);\r\n        \r\n        // 함수 호출\r\n        handleCommentAction(posts, postId, commentContent, setPosts);\r\n        \r\n        // 검증\r\n        expect(setPosts).toHaveBeenCalled();\r\n        \r\n        // setPosts에 전달된 새 게시물 배열 가져오기\r\n        const updatedPosts = setPosts.mock.calls[0][0];\r\n        \r\n        // 댓글이 추가되었는지 확인\r\n        expect(updatedPosts[0].comments.length).toBe(1);\r\n        expect(updatedPosts[0].comments[0].content).toBe('테스트 댓글');\r\n        expect(updatedPosts[0].comments[0].id).toBe(mockDateNow);\r\n        expect(updatedPosts[0].comments[0].author).toBe('익명');\r\n      });\r\n    });\r\n  });"],"mappings":";;AAuCE,IAAMA,YAAuB,GAAG,CAC9B;EAAEC,KAAK,EAAE,IAAI;EAAEC,IAAI,EAAE,wBAAwB;EAAEC,KAAK,EAAE;AAAU,CAAC,EACjE;EAAEF,KAAK,EAAE,IAAI;EAAEC,IAAI,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAU,CAAC,CACtD;AAGD,IAAMC,SAAiB,GAAG,CACxB;EACEC,EAAE,EAAE,CAAC;EACLC,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,IAAI;EACbC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,CAAC;EACRC,QAAQ,EAAE,EAAE;EACZC,SAAS,EAAE;AACb,CAAC,CACF;AAGD,SAASC,oBAAoBA,CAC3BP,OAAe,EACfC,OAAuB,EACvBO,QAAgB,EAChBC,YAAsC,EACtCC,kBAA4C,EACnC;EACT,IAAIV,OAAO,IAAIC,OAAO,EAAE;IACtBQ,YAAY,CAAC,IAAI,CAAC;IAElBE,UAAU,CAAC,YAAM;MACfF,YAAY,CAAC,KAAK,CAAC;MACnBC,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;AAGA,SAASE,uBAAuBA,CAC9BC,WAAkC,EAC5B;EACNA,WAAW,CAAC,iCAAiC,CAAC;AAChD;AAGA,SAASC,gBAAgBA,CACvBC,KAAa,EACbC,MAAc,EACdC,QAAiC,EAC3B;EACNA,QAAQ,CAACF,KAAK,CAACG,GAAG,CAAC,UAAAC,IAAI;IAAA,OACrBA,IAAI,CAACrB,EAAE,KAAKkB,MAAM,GAAAI,MAAA,CAAAC,MAAA,KAAQF,IAAI;MAAEf,KAAK,EAAEe,IAAI,CAACf,KAAK,GAAG;IAAC,KAAKe,IAAI;EAAA,CAChE,CAAC,CAAC;AACJ;AAGA,SAASG,mBAAmBA,CAC1BP,KAAa,EACbC,MAAc,EACdO,cAAsB,EACtBN,QAAiC,EAC3B;EACNA,QAAQ,CAACF,KAAK,CAACG,GAAG,CAAC,UAAAC,IAAI;IAAA,OACrBA,IAAI,CAACrB,EAAE,KAAKkB,MAAM,GAAAI,MAAA,CAAAC,MAAA,KAETF,IAAI;MACPd,QAAQ,KAAAmB,MAAA,KAAAC,mBAAA,CAAAC,OAAA,EACHP,IAAI,CAACd,QAAQ,IAChB;QACEP,EAAE,EAAE6B,IAAI,CAACC,GAAG,CAAC,CAAC;QACdC,MAAM,EAAE,IAAI;QACZ7B,OAAO,EAAEuB;MACX,CAAC;IACF,KAEHJ,IAAI;EAAA,CACV,CAAC,CAAC;AACJ;AAGAW,QAAQ,CAAC,oBAAoB,EAAE,YAAM;EAEnCC,UAAU,CAAC,YAAM;IACfC,IAAI,CAACC,aAAa,CAAC,CAAC;IACpBD,IAAI,CAACE,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAGFC,SAAS,CAAC,YAAM;IACdH,IAAI,CAACI,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAGFN,QAAQ,CAAC,yBAAyB,EAAE,YAAM;IACxCO,EAAE,CAAC,2BAA2B,EAAE,YAAM;MAEpC,IAAM5B,YAAY,GAAGuB,IAAI,CAACM,EAAE,CAAC,CAAC;MAC9B,IAAM5B,kBAAkB,GAAGsB,IAAI,CAACM,EAAE,CAAC,CAAC;MAGpC,IAAMtC,OAAO,GAAG,SAAS;MACzB,IAAMC,OAAO,GAAGR,YAAY,CAAC,CAAC,CAAC;MAC/B,IAAMe,QAAQ,GAAG,+BAA+B;MAGhD,IAAM+B,MAAM,GAAGhC,oBAAoB,CACjCP,OAAO,EACPC,OAAO,EACPO,QAAQ,EACRC,YAAY,EACZC,kBACF,CAAC;MAGD8B,MAAM,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,IAAI,CAAC;MACzBD,MAAM,CAAC/B,YAAY,CAAC,CAACiC,oBAAoB,CAAC,IAAI,CAAC;MAG/CV,IAAI,CAACW,mBAAmB,CAAC,IAAI,CAAC;MAG9BH,MAAM,CAAC/B,YAAY,CAAC,CAACiC,oBAAoB,CAAC,KAAK,CAAC;MAChDF,MAAM,CAAC9B,kBAAkB,CAAC,CAACgC,oBAAoB,CAAC,IAAI,CAAC;IACvD,CAAC,CAAC;IAEFL,EAAE,CAAC,wBAAwB,EAAE,YAAM;MAEjC,IAAM5B,YAAY,GAAGuB,IAAI,CAACM,EAAE,CAAC,CAAC;MAC9B,IAAM5B,kBAAkB,GAAGsB,IAAI,CAACM,EAAE,CAAC,CAAC;MAGpC,IAAMtC,OAAO,GAAG,EAAE;MAClB,IAAMC,OAAO,GAAGR,YAAY,CAAC,CAAC,CAAC;MAC/B,IAAMe,QAAQ,GAAG,+BAA+B;MAGhD,IAAM+B,MAAM,GAAGhC,oBAAoB,CACjCP,OAAO,EACPC,OAAO,EACPO,QAAQ,EACRC,YAAY,EACZC,kBACF,CAAC;MAGD8B,MAAM,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;MAC1BD,MAAM,CAAC/B,YAAY,CAAC,CAACmC,GAAG,CAACC,gBAAgB,CAAC,CAAC;MAC3CL,MAAM,CAAC9B,kBAAkB,CAAC,CAACkC,GAAG,CAACC,gBAAgB,CAAC,CAAC;IACnD,CAAC,CAAC;IAEFR,EAAE,CAAC,wBAAwB,EAAE,YAAM;MAEjC,IAAM5B,YAAY,GAAGuB,IAAI,CAACM,EAAE,CAAC,CAAC;MAC9B,IAAM5B,kBAAkB,GAAGsB,IAAI,CAACM,EAAE,CAAC,CAAC;MAGpC,IAAMtC,OAAO,GAAG,SAAS;MACzB,IAAMC,OAAO,GAAG,IAAI;MACpB,IAAMO,QAAQ,GAAG,+BAA+B;MAGhD,IAAM+B,MAAM,GAAGhC,oBAAoB,CACjCP,OAAO,EACPC,OAAO,EACPO,QAAQ,EACRC,YAAY,EACZC,kBACF,CAAC;MAGD8B,MAAM,CAACD,MAAM,CAAC,CAACE,IAAI,CAAC,KAAK,CAAC;MAC1BD,MAAM,CAAC/B,YAAY,CAAC,CAACmC,GAAG,CAACC,gBAAgB,CAAC,CAAC;MAC3CL,MAAM,CAAC9B,kBAAkB,CAAC,CAACkC,GAAG,CAACC,gBAAgB,CAAC,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;EAGFf,QAAQ,CAAC,4BAA4B,EAAE,YAAM;IAC3CO,EAAE,CAAC,iBAAiB,EAAE,YAAM;MAE1B,IAAMxB,WAAW,GAAGmB,IAAI,CAACM,EAAE,CAAC,CAAC;MAG7B1B,uBAAuB,CAACC,WAAW,CAAC;MAGpC2B,MAAM,CAAC3B,WAAW,CAAC,CAAC6B,oBAAoB,CAAC,iCAAiC,CAAC;IAC7E,CAAC,CAAC;EACJ,CAAC,CAAC;EAGFZ,QAAQ,CAAC,qBAAqB,EAAE,YAAM;IACpCO,EAAE,CAAC,gBAAgB,EAAE,YAAM;MAEzB,IAAMtB,KAAK,MAAAS,MAAA,CAAO3B,SAAS,CAAC;MAC5B,IAAMmB,MAAM,GAAG,CAAC;MAChB,IAAMC,QAAQ,GAAGe,IAAI,CAACM,EAAE,CAAC,CAAC;MAG1BxB,gBAAgB,CAACC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,CAAC;MAGzCuB,MAAM,CAACvB,QAAQ,CAAC,CAAC4B,gBAAgB,CAAC,CAAC;MAGnC,IAAMC,YAAY,GAAG7B,QAAQ,CAAC8B,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAG9CR,MAAM,CAACM,YAAY,CAAC,CAAC,CAAC,CAAC1C,KAAK,CAAC,CAACqC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,CAAC;EAGFX,QAAQ,CAAC,wBAAwB,EAAE,YAAM;IACvCO,EAAE,CAAC,YAAY,EAAE,YAAM;MAErB,IAAMtB,KAAK,MAAAS,MAAA,CAAO3B,SAAS,CAAC;MAC5B,IAAMmB,MAAM,GAAG,CAAC;MAChB,IAAMO,cAAc,GAAG,QAAQ;MAC/B,IAAMN,QAAQ,GAAGe,IAAI,CAACM,EAAE,CAAC,CAAC;MAG1B,IAAMW,WAAW,GAAG,SAAS;MAC7BjB,IAAI,CAACkB,KAAK,CAACvB,IAAI,EAAE,KAAK,CAAC,CAACwB,kBAAkB,CAAC;QAAA,OAAMF,WAAW;MAAA,EAAC;MAG7D3B,mBAAmB,CAACP,KAAK,EAAEC,MAAM,EAAEO,cAAc,EAAEN,QAAQ,CAAC;MAG5DuB,MAAM,CAACvB,QAAQ,CAAC,CAAC4B,gBAAgB,CAAC,CAAC;MAGnC,IAAMC,YAAY,GAAG7B,QAAQ,CAAC8B,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAG9CR,MAAM,CAACM,YAAY,CAAC,CAAC,CAAC,CAACzC,QAAQ,CAAC+C,MAAM,CAAC,CAACX,IAAI,CAAC,CAAC,CAAC;MAC/CD,MAAM,CAACM,YAAY,CAAC,CAAC,CAAC,CAACzC,QAAQ,CAAC,CAAC,CAAC,CAACL,OAAO,CAAC,CAACyC,IAAI,CAAC,QAAQ,CAAC;MAC1DD,MAAM,CAACM,YAAY,CAAC,CAAC,CAAC,CAACzC,QAAQ,CAAC,CAAC,CAAC,CAACP,EAAE,CAAC,CAAC2C,IAAI,CAACQ,WAAW,CAAC;MACxDT,MAAM,CAACM,YAAY,CAAC,CAAC,CAAC,CAACzC,QAAQ,CAAC,CAAC,CAAC,CAACwB,MAAM,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;IACvD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}