0fd61541fa886a3b3aeb88d7f3c93bef
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCache = useCache;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _cache = require("../utils/cache");
function useCache(key, fetchFn) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ttl = options.ttl,
    _options$autoLoad = options.autoLoad,
    autoLoad = _options$autoLoad === void 0 ? true : _options$autoLoad,
    _options$cacheInstanc = options.cacheInstance,
    cacheInstance = _options$cacheInstanc === void 0 ? _cache.globalCache : _options$cacheInstanc;
  var _useState = (0, _react.useState)(cacheInstance.get(key)),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    data = _useState2[0],
    setData = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var fetchData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    if (!force && cacheInstance.get(key)) {
      setData(cacheInstance.get(key));
      return;
    }
    setLoading(true);
    setError(null);
    try {
      var result = yield fetchFn();
      setData(result);
      cacheInstance.set(key, result, ttl);
    } catch (err) {
      setError(err instanceof Error ? err : new Error(String(err)));
      setData(undefined);
    } finally {
      setLoading(false);
    }
  }), [key, fetchFn, ttl, cacheInstance]);
  var invalidateCache = (0, _react.useCallback)(function () {
    cacheInstance.delete(key);
    fetchData(true);
  }, [key, fetchData, cacheInstance]);
  (0, _react.useEffect)(function () {
    if (autoLoad) {
      fetchData();
    }
  }, [autoLoad, fetchData]);
  return {
    data: data,
    loading: loading,
    error: error,
    refetch: fetchData,
    invalidateCache: invalidateCache
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2NhY2hlIiwidXNlQ2FjaGUiLCJrZXkiLCJmZXRjaEZuIiwib3B0aW9ucyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsInR0bCIsIl9vcHRpb25zJGF1dG9Mb2FkIiwiYXV0b0xvYWQiLCJfb3B0aW9ucyRjYWNoZUluc3RhbmMiLCJjYWNoZUluc3RhbmNlIiwiZ2xvYmFsQ2FjaGUiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsImdldCIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiZGF0YSIsInNldERhdGEiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJlcnJvciIsInNldEVycm9yIiwiZmV0Y2hEYXRhIiwidXNlQ2FsbGJhY2siLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJmb3JjZSIsInJlc3VsdCIsInNldCIsImVyciIsIkVycm9yIiwiU3RyaW5nIiwiaW52YWxpZGF0ZUNhY2hlIiwiZGVsZXRlIiwidXNlRWZmZWN0IiwicmVmZXRjaCJdLCJzb3VyY2VzIjpbInVzZUNhY2hlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBnbG9iYWxDYWNoZSwgTWVtb3J5Q2FjaGUgfSBmcm9tICcuLi91dGlscy9jYWNoZSc7XHJcblxyXG5pbnRlcmZhY2UgVXNlQ2FjaGVPcHRpb25zIHtcclxuICAvKiog7LqQ7IucIOycoO2aqCDsi5zqsIQgKOuwgOumrOy0iCkgKi9cclxuICB0dGw/OiBudW1iZXI7XHJcbiAgLyoqIOyekOuPmSDroZzrlKkg7Jes67aAICovXHJcbiAgYXV0b0xvYWQ/OiBib29sZWFuO1xyXG4gIC8qKiDtirnsoJUg7LqQ7IucIOyduOyKpO2EtOyKpCDsgqzsmqkgKOq4sOuzuOqwkjogZ2xvYmFsQ2FjaGUpICovXHJcbiAgY2FjaGVJbnN0YW5jZT86IE1lbW9yeUNhY2hlO1xyXG59XHJcblxyXG4vKipcclxuICog642w7J207YSwIOy6kOyLsSDrsI8g67aI65+s7Jik6riw66W8IOychO2VnCDtm4VcclxuICogQHBhcmFtIGtleSDsupDsi5wg7YKkXHJcbiAqIEBwYXJhbSBmZXRjaEZuIOuNsOydtO2EsCDrtojrn6zsmKTripQg7ZWo7IiYXHJcbiAqIEBwYXJhbSBvcHRpb25zIOy6kOyLnCDsmLXshZhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZTxUPihcclxuICBrZXk6IHN0cmluZyxcclxuICBmZXRjaEZuOiAoKSA9PiBQcm9taXNlPFQ+LFxyXG4gIG9wdGlvbnM6IFVzZUNhY2hlT3B0aW9ucyA9IHt9XHJcbikge1xyXG4gIGNvbnN0IHtcclxuICAgIHR0bCxcclxuICAgIGF1dG9Mb2FkID0gdHJ1ZSxcclxuICAgIGNhY2hlSW5zdGFuY2UgPSBnbG9iYWxDYWNoZVxyXG4gIH0gPSBvcHRpb25zO1xyXG5cclxuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZTxUIHwgdW5kZWZpbmVkPihjYWNoZUluc3RhbmNlLmdldDxUPihrZXkpKTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxFcnJvciB8IG51bGw+KG51bGwpO1xyXG5cclxuICAvLyDrjbDsnbTthLAg67aI65+s7Jik6riwIO2VqOyImFxyXG4gIGNvbnN0IGZldGNoRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jIChmb3JjZSA9IGZhbHNlKSA9PiB7XHJcbiAgICAvLyDsupDsi5zsl5Ag7J6I6rOgIOqwleygnCDqsLHsi6DsnbQg7JWE64uI66m0IOy6kOyLnCDrjbDsnbTthLAg7IKs7JqpXHJcbiAgICBpZiAoIWZvcmNlICYmIGNhY2hlSW5zdGFuY2UuZ2V0PFQ+KGtleSkpIHtcclxuICAgICAgc2V0RGF0YShjYWNoZUluc3RhbmNlLmdldDxUPihrZXkpKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICBzZXRFcnJvcihudWxsKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaEZuKCk7XHJcbiAgICAgIHNldERhdGEocmVzdWx0KTtcclxuICAgICAgY2FjaGVJbnN0YW5jZS5zZXQoa2V5LCByZXN1bHQsIHR0bCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgc2V0RXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpKTtcclxuICAgICAgc2V0RGF0YSh1bmRlZmluZWQpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSwgW2tleSwgZmV0Y2hGbiwgdHRsLCBjYWNoZUluc3RhbmNlXSk7XHJcblxyXG4gIC8vIOy6kOyLnCDqsJXsoJwg6rCx7IugXHJcbiAgY29uc3QgaW52YWxpZGF0ZUNhY2hlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgY2FjaGVJbnN0YW5jZS5kZWxldGUoa2V5KTtcclxuICAgIGZldGNoRGF0YSh0cnVlKTtcclxuICB9LCBba2V5LCBmZXRjaERhdGEsIGNhY2hlSW5zdGFuY2VdKTtcclxuXHJcbiAgLy8g7Lu07Y+s64SM7Yq4IOuniOyatO2KuCDsi5wg7J6Q64+ZIOuhnOuUqVxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoYXV0b0xvYWQpIHtcclxuICAgICAgZmV0Y2hEYXRhKCk7XHJcbiAgICB9XHJcbiAgfSwgW2F1dG9Mb2FkLCBmZXRjaERhdGFdKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGRhdGEsXHJcbiAgICBsb2FkaW5nLFxyXG4gICAgZXJyb3IsXHJcbiAgICByZWZldGNoOiBmZXRjaERhdGEsXHJcbiAgICBpbnZhbGlkYXRlQ2FjaGVcclxuICB9O1xyXG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBaUJPLFNBQVNFLFFBQVFBLENBQ3RCQyxHQUFXLEVBQ1hDLE9BQXlCLEVBRXpCO0VBQUEsSUFEQUMsT0FBd0IsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsQ0FBQyxDQUFDO0VBRTdCLElBQ0VHLEdBQUcsR0FHREosT0FBTyxDQUhUSSxHQUFHO0lBQUFDLGlCQUFBLEdBR0RMLE9BQU8sQ0FGVE0sUUFBUTtJQUFSQSxRQUFRLEdBQUFELGlCQUFBLGNBQUcsSUFBSSxHQUFBQSxpQkFBQTtJQUFBRSxxQkFBQSxHQUViUCxPQUFPLENBRFRRLGFBQWE7SUFBYkEsYUFBYSxHQUFBRCxxQkFBQSxjQUFHRSxrQkFBVyxHQUFBRixxQkFBQTtFQUc3QixJQUFBRyxTQUFBLEdBQXdCLElBQUFDLGVBQVEsRUFBZ0JILGFBQWEsQ0FBQ0ksR0FBRyxDQUFJZCxHQUFHLENBQUMsQ0FBQztJQUFBZSxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBTCxTQUFBO0lBQW5FTSxJQUFJLEdBQUFILFVBQUE7SUFBRUksT0FBTyxHQUFBSixVQUFBO0VBQ3BCLElBQUFLLFVBQUEsR0FBOEIsSUFBQVAsZUFBUSxFQUFVLEtBQUssQ0FBQztJQUFBUSxVQUFBLE9BQUFMLGVBQUEsQ0FBQUMsT0FBQSxFQUFBRyxVQUFBO0lBQS9DRSxPQUFPLEdBQUFELFVBQUE7SUFBRUUsVUFBVSxHQUFBRixVQUFBO0VBQzFCLElBQUFHLFVBQUEsR0FBMEIsSUFBQVgsZUFBUSxFQUFlLElBQUksQ0FBQztJQUFBWSxVQUFBLE9BQUFULGVBQUEsQ0FBQUMsT0FBQSxFQUFBTyxVQUFBO0lBQS9DRSxLQUFLLEdBQUFELFVBQUE7SUFBRUUsUUFBUSxHQUFBRixVQUFBO0VBR3RCLElBQU1HLFNBQVMsR0FBRyxJQUFBQyxrQkFBVyxNQUFBQyxrQkFBQSxDQUFBYixPQUFBLEVBQUMsYUFBeUI7SUFBQSxJQUFsQmMsS0FBSyxHQUFBNUIsU0FBQSxDQUFBQyxNQUFBLFFBQUFELFNBQUEsUUFBQUUsU0FBQSxHQUFBRixTQUFBLE1BQUcsS0FBSztJQUVoRCxJQUFJLENBQUM0QixLQUFLLElBQUlyQixhQUFhLENBQUNJLEdBQUcsQ0FBSWQsR0FBRyxDQUFDLEVBQUU7TUFDdkNtQixPQUFPLENBQUNULGFBQWEsQ0FBQ0ksR0FBRyxDQUFJZCxHQUFHLENBQUMsQ0FBQztNQUNsQztJQUNGO0lBRUF1QixVQUFVLENBQUMsSUFBSSxDQUFDO0lBQ2hCSSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBRWQsSUFBSTtNQUNGLElBQU1LLE1BQU0sU0FBUy9CLE9BQU8sQ0FBQyxDQUFDO01BQzlCa0IsT0FBTyxDQUFDYSxNQUFNLENBQUM7TUFDZnRCLGFBQWEsQ0FBQ3VCLEdBQUcsQ0FBQ2pDLEdBQUcsRUFBRWdDLE1BQU0sRUFBRTFCLEdBQUcsQ0FBQztJQUNyQyxDQUFDLENBQUMsT0FBTzRCLEdBQUcsRUFBRTtNQUNaUCxRQUFRLENBQUNPLEdBQUcsWUFBWUMsS0FBSyxHQUFHRCxHQUFHLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxNQUFNLENBQUNGLEdBQUcsQ0FBQyxDQUFDLENBQUM7TUFDN0RmLE9BQU8sQ0FBQ2QsU0FBUyxDQUFDO0lBQ3BCLENBQUMsU0FBUztNQUNSa0IsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUNuQjtFQUNGLENBQUMsR0FBRSxDQUFDdkIsR0FBRyxFQUFFQyxPQUFPLEVBQUVLLEdBQUcsRUFBRUksYUFBYSxDQUFDLENBQUM7RUFHdEMsSUFBTTJCLGVBQWUsR0FBRyxJQUFBUixrQkFBVyxFQUFDLFlBQU07SUFDeENuQixhQUFhLENBQUM0QixNQUFNLENBQUN0QyxHQUFHLENBQUM7SUFDekI0QixTQUFTLENBQUMsSUFBSSxDQUFDO0VBQ2pCLENBQUMsRUFBRSxDQUFDNUIsR0FBRyxFQUFFNEIsU0FBUyxFQUFFbEIsYUFBYSxDQUFDLENBQUM7RUFHbkMsSUFBQTZCLGdCQUFTLEVBQUMsWUFBTTtJQUNkLElBQUkvQixRQUFRLEVBQUU7TUFDWm9CLFNBQVMsQ0FBQyxDQUFDO0lBQ2I7RUFDRixDQUFDLEVBQUUsQ0FBQ3BCLFFBQVEsRUFBRW9CLFNBQVMsQ0FBQyxDQUFDO0VBRXpCLE9BQU87SUFDTFYsSUFBSSxFQUFKQSxJQUFJO0lBQ0pJLE9BQU8sRUFBUEEsT0FBTztJQUNQSSxLQUFLLEVBQUxBLEtBQUs7SUFDTGMsT0FBTyxFQUFFWixTQUFTO0lBQ2xCUyxlQUFlLEVBQWZBO0VBQ0YsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119