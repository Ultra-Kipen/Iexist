{"version":3,"names":["_getJestObj","mock","createPost","jest","fn","getPosts","getPostById","getMyPosts","likePost","addComment","getComments","deletePost","getItem","setItem","removeItem","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_native","_reactNativePaper","_asyncStorage","_postService","_MockScreens","_jsxRuntime","_require","testUser","user_id","username","nickname","email","testPosts","success","posts","post_id","content","emotion_summary","emotion_ids","image_url","is_anonymous","like_count","comment_count","created_at","total_count","testComments","comments","comment_id","mockNavigation","navigate","goBack","TestWrapper","_ref","children","jsx","NavigationContainer","Provider","describe","beforeEach","clearAllMocks","AsyncStorage","mockImplementation","key","Promise","resolve","JSON","stringify","it","default","mockGetPostById","postService","mockResolvedValue","data","post","mockGetComments","mockAddComment","message","_render","render","MockPostScreen","route","params","postId","navigation","getByTestId","getByText","expect","toBeTruthy","commentInput","fireEvent","changeText","submitButton","press","waitFor","toHaveBeenCalledWith","any","Object","mockGetMyPosts","mockDeletePost","_render2","MockMyPostsScreen","deleteButton","_render3","MockStatisticsScreen"],"sources":["post.e2e-like.test.tsx"],"sourcesContent":["// __tests__/e2e/post.e2e-like.test.tsx\r\n\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { Provider as PaperProvider } from 'react-native-paper';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport postService from '../../src/services/api/postService';\r\n\r\n\r\n// StatisticsScreen 및 다른 실제 화면 컴포넌트 import 제거\r\n// MockScreens만 사용하는 것으로 변경\r\n// MockScreens만 사용하는 것으로 변경\r\nimport { MockPostScreen, MockMyPostsScreen, MockStatisticsScreen } from '../mocks/MockScreens';\r\n\r\n// 컴포넌트와 서비스의 통합을 테스트하기 위한 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  createPost: jest.fn(),\r\n  getPosts: jest.fn(),\r\n  getPostById: jest.fn(),\r\n  getMyPosts: jest.fn(),\r\n  likePost: jest.fn(),\r\n  addComment: jest.fn(),\r\n  getComments: jest.fn(),\r\n  deletePost: jest.fn()\r\n}));\r\n\r\n// 인증 관련 모킹\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn(),\r\n}));\r\n\r\n// 테스트용 데이터\r\nconst testUser = {\r\n  user_id: 1,\r\n  username: 'testuser',\r\n  nickname: '테스트유저',\r\n  email: 'test@example.com',\r\n};\r\n\r\n// 테스트용 게시물 데이터\r\nconst testPosts = {\r\n  success: true,\r\n  posts: [\r\n    {\r\n      post_id: 1,\r\n      user_id: 1,\r\n      content: '행복한 하루였어요',\r\n      emotion_summary: '행복',\r\n      emotion_ids: [1],\r\n      image_url: null,\r\n      is_anonymous: false,\r\n      like_count: 5,\r\n      comment_count: 2,\r\n      created_at: '2025-04-10T12:00:00Z'\r\n    },\r\n    {\r\n      post_id: 2,\r\n      user_id: 2,\r\n      content: '오늘은 조금 피곤하네요',\r\n      emotion_summary: '지침',\r\n      emotion_ids: [8],\r\n      image_url: null,\r\n      is_anonymous: true,\r\n      like_count: 3,\r\n      comment_count: 1,\r\n      created_at: '2025-04-10T10:30:00Z'\r\n    }\r\n  ],\r\n  total_count: 2\r\n};\r\n\r\n// 테스트용 댓글 데이터\r\nconst testComments = {\r\n  success: true,\r\n  comments: [\r\n    {\r\n      comment_id: 1,\r\n      post_id: 1,\r\n      user_id: 2,\r\n      content: '너무 좋네요!',\r\n      is_anonymous: false,\r\n      created_at: '2025-04-10T13:00:00Z'\r\n    }\r\n  ],\r\n  total_count: 1\r\n};\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n  goBack: jest.fn()\r\n};\r\n\r\n// 테스트 컴포넌트 래퍼\r\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <NavigationContainer>\r\n    <PaperProvider>\r\n      {children}\r\n    </PaperProvider>\r\n  </NavigationContainer>\r\n);\r\n\r\ndescribe('게시물 기능 E2E 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // AsyncStorage 모킹\r\n    (AsyncStorage.getItem as jest.Mock).mockImplementation((key) => {\r\n      if (key === 'auth_token') return Promise.resolve('fake-token');\r\n      if (key === 'user_info') return Promise.resolve(JSON.stringify(testUser));\r\n      return Promise.resolve(null);\r\n    });\r\n  });\r\n\r\n  describe('게시물 상세 화면', () => {\r\n    it('게시물 상세 조회 및 댓글 작성', async () => {\r\n      const mockGetPostById = postService.getPostById as jest.Mock;\r\n      mockGetPostById.mockResolvedValue({\r\n        data: {\r\n          success: true,\r\n          post: testPosts.posts[0]\r\n        }\r\n      });\r\n      \r\n      const mockGetComments = postService.getComments as jest.Mock;\r\n      mockGetComments.mockResolvedValue({\r\n        data: testComments\r\n      });\r\n      \r\n      const mockAddComment = postService.addComment as jest.Mock;\r\n      mockAddComment.mockResolvedValue({\r\n        data: {\r\n          success: true,\r\n          comment_id: 2,\r\n          message: '댓글이 성공적으로 추가되었습니다.'\r\n        }\r\n      });\r\n\r\n      // Mock 게시물 상세 컴포넌트 렌더링\r\n      const { getByTestId, getByText } = render(\r\n        <TestWrapper>\r\n          <MockPostScreen\r\n            route={{ params: { postId: 1 } }}\r\n            navigation={mockNavigation}\r\n          />\r\n        </TestWrapper>\r\n      );\r\n\r\n      // 게시물 ID가 표시되는지 확인\r\n      expect(getByText('게시물 ID: 1')).toBeTruthy();\r\n\r\n      // 댓글 입력 필드 확인\r\n      const commentInput = getByTestId('comment-input');\r\n      fireEvent.changeText(commentInput, 'E2E 테스트로 작성한 댓글입니다!');\r\n\r\n      // 댓글 제출 버튼 클릭\r\n      const submitButton = getByTestId('submit-comment');\r\n      fireEvent.press(submitButton);\r\n\r\n      // addComment 서비스가 호출되었는지 확인\r\n      await waitFor(() => {\r\n        expect(mockAddComment).toHaveBeenCalledWith(1, expect.any(Object));\r\n      });\r\n    }, 10000);\r\n  });\r\n\r\n  describe('내 게시물 관리', () => {\r\n    it('내 게시물 화면에서 게시물을 삭제할 수 있어야 함', async () => {\r\n      // 게시물 목록 API 모킹\r\n      const mockGetMyPosts = postService.getMyPosts as jest.Mock;\r\n      mockGetMyPosts.mockResolvedValue({\r\n        data: testPosts\r\n      });\r\n      \r\n      // 게시물 삭제 API 모킹\r\n      const mockDeletePost = postService.deletePost as jest.Mock;\r\n      mockDeletePost.mockResolvedValue({\r\n        data: {\r\n          success: true,\r\n          message: '게시물이 성공적으로 삭제되었습니다.'\r\n        }\r\n      });\r\n\r\n      const { getByTestId } = render(\r\n        <TestWrapper>\r\n          <MockMyPostsScreen navigation={mockNavigation} />\r\n        </TestWrapper>\r\n      );\r\n\r\n      // 삭제 버튼 클릭\r\n      const deleteButton = getByTestId('delete-button');\r\n      fireEvent.press(deleteButton);\r\n\r\n      // deletePost가 호출되었는지 확인\r\n      await waitFor(() => {\r\n        expect(mockDeletePost).toHaveBeenCalledWith(1);\r\n      });\r\n    }, 10000);\r\n  });\r\n\r\n  describe('감정 통계', () => {\r\n    it('통계 화면에서 감정 그래프가 표시되어야 함', async () => {\r\n      const { getByTestId, getByText } = render(\r\n        <TestWrapper>\r\n          <MockStatisticsScreen navigation={mockNavigation} />\r\n        </TestWrapper>\r\n      );\r\n\r\n      // 그래프 영역이 존재하는지 확인\r\n      expect(getByTestId('emotion-chart')).toBeTruthy();\r\n      expect(getByText('감정 통계')).toBeTruthy();\r\n    }, 10000);\r\n  });\r\n});"],"mappings":"AAgBAA,WAAA,GAAKC,IAAI,uCAAuC;EAAA,OAAO;IACrDC,UAAU,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IACrBC,QAAQ,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC;IACnBE,WAAW,EAAEH,IAAI,CAACC,EAAE,CAAC,CAAC;IACtBG,UAAU,EAAEJ,IAAI,CAACC,EAAE,CAAC,CAAC;IACrBI,QAAQ,EAAEL,IAAI,CAACC,EAAE,CAAC,CAAC;IACnBK,UAAU,EAAEN,IAAI,CAACC,EAAE,CAAC,CAAC;IACrBM,WAAW,EAAEP,IAAI,CAACC,EAAE,CAAC,CAAC;IACtBO,UAAU,EAAER,IAAI,CAACC,EAAE,CAAC;EACtB,CAAC;AAAA,CAAC,CAAC;AAGHJ,WAAA,GAAKC,IAAI,CAAC,2CAA2C,EAAE;EAAA,OAAO;IAC5DW,OAAO,EAAET,IAAI,CAACC,EAAE,CAAC,CAAC;IAClBS,OAAO,EAAEV,IAAI,CAACC,EAAE,CAAC,CAAC;IAClBU,UAAU,EAAEX,IAAI,CAACC,EAAE,CAAC;EACtB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAW,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AA9BJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AACA,IAAAK,iBAAA,GAAAL,OAAA;AACA,IAAAM,aAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,YAAA,GAAAR,sBAAA,CAAAC,OAAA;AAMA,IAAAQ,YAAA,GAAAR,OAAA;AAA+F,IAAAS,WAAA,GAAAT,OAAA;AAAA,SAAAhB,YAAA;EAAA,IAAA0B,QAAA,GAAAV,OAAA;IAAAb,IAAA,GAAAuB,QAAA,CAAAvB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAsB/F,IAAMwB,QAAQ,GAAG;EACfC,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE,OAAO;EACjBC,KAAK,EAAE;AACT,CAAC;AAGD,IAAMC,SAAS,GAAG;EAChBC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,CACL;IACEC,OAAO,EAAE,CAAC;IACVP,OAAO,EAAE,CAAC;IACVQ,OAAO,EAAE,WAAW;IACpBC,eAAe,EAAE,IAAI;IACrBC,WAAW,EAAE,CAAC,CAAC,CAAC;IAChBC,SAAS,EAAE,IAAI;IACfC,YAAY,EAAE,KAAK;IACnBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE;EACd,CAAC,EACD;IACER,OAAO,EAAE,CAAC;IACVP,OAAO,EAAE,CAAC;IACVQ,OAAO,EAAE,cAAc;IACvBC,eAAe,EAAE,IAAI;IACrBC,WAAW,EAAE,CAAC,CAAC,CAAC;IAChBC,SAAS,EAAE,IAAI;IACfC,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,CAAC;IAChBC,UAAU,EAAE;EACd,CAAC,CACF;EACDC,WAAW,EAAE;AACf,CAAC;AAGD,IAAMC,YAAY,GAAG;EACnBZ,OAAO,EAAE,IAAI;EACba,QAAQ,EAAE,CACR;IACEC,UAAU,EAAE,CAAC;IACbZ,OAAO,EAAE,CAAC;IACVP,OAAO,EAAE,CAAC;IACVQ,OAAO,EAAE,SAAS;IAClBI,YAAY,EAAE,KAAK;IACnBG,UAAU,EAAE;EACd,CAAC,CACF;EACDC,WAAW,EAAE;AACf,CAAC;AAGD,IAAMI,cAAc,GAAG;EACrBC,QAAQ,EAAE9C,IAAI,CAACC,EAAE,CAAC,CAAC;EACnB8C,MAAM,EAAE/C,IAAI,CAACC,EAAE,CAAC;AAClB,CAAC;AAGD,IAAM+C,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA;EAAA,IAAMC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAAA,OAC7B,IAAA5B,WAAA,CAAA6B,GAAA,EAAClC,OAAA,CAAAmC,mBAAmB;IAAAF,QAAA,EAClB,IAAA5B,WAAA,CAAA6B,GAAA,EAACjC,iBAAA,CAAAmC,QAAa;MAAAH,QAAA,EACXA;IAAQ,CACI;EAAC,CACG,CAAC;AAAA,CACvB;AAEDI,QAAQ,CAAC,gBAAgB,EAAE,YAAM;EAC/BC,UAAU,CAAC,YAAM;IACfvD,IAAI,CAACwD,aAAa,CAAC,CAAC;IAGnBC,qBAAY,CAAChD,OAAO,CAAeiD,kBAAkB,CAAC,UAACC,GAAG,EAAK;MAC9D,IAAIA,GAAG,KAAK,YAAY,EAAE,OAAOC,OAAO,CAACC,OAAO,CAAC,YAAY,CAAC;MAC9D,IAAIF,GAAG,KAAK,WAAW,EAAE,OAAOC,OAAO,CAACC,OAAO,CAACC,IAAI,CAACC,SAAS,CAACvC,QAAQ,CAAC,CAAC;MACzE,OAAOoC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFP,QAAQ,CAAC,WAAW,EAAE,YAAM;IAC1BU,EAAE,CAAC,mBAAmB,MAAAlD,kBAAA,CAAAmD,OAAA,EAAE,aAAY;MAClC,IAAMC,eAAe,GAAGC,oBAAW,CAAChE,WAAwB;MAC5D+D,eAAe,CAACE,iBAAiB,CAAC;QAChCC,IAAI,EAAE;UACJvC,OAAO,EAAE,IAAI;UACbwC,IAAI,EAAEzC,SAAS,CAACE,KAAK,CAAC,CAAC;QACzB;MACF,CAAC,CAAC;MAEF,IAAMwC,eAAe,GAAGJ,oBAAW,CAAC5D,WAAwB;MAC5DgE,eAAe,CAACH,iBAAiB,CAAC;QAChCC,IAAI,EAAE3B;MACR,CAAC,CAAC;MAEF,IAAM8B,cAAc,GAAGL,oBAAW,CAAC7D,UAAuB;MAC1DkE,cAAc,CAACJ,iBAAiB,CAAC;QAC/BC,IAAI,EAAE;UACJvC,OAAO,EAAE,IAAI;UACbc,UAAU,EAAE,CAAC;UACb6B,OAAO,EAAE;QACX;MACF,CAAC,CAAC;MAGF,IAAAC,OAAA,GAAmC,IAAAC,mBAAM,EACvC,IAAArD,WAAA,CAAA6B,GAAA,EAACH,WAAW;UAAAE,QAAA,EACV,IAAA5B,WAAA,CAAA6B,GAAA,EAAC9B,YAAA,CAAAuD,cAAc;YACbC,KAAK,EAAE;cAAEC,MAAM,EAAE;gBAAEC,MAAM,EAAE;cAAE;YAAE,CAAE;YACjCC,UAAU,EAAEnC;UAAe,CAC5B;QAAC,CACS,CACf,CAAC;QAPOoC,WAAW,GAAAP,OAAA,CAAXO,WAAW;QAAEC,SAAS,GAAAR,OAAA,CAATQ,SAAS;MAU9BC,MAAM,CAACD,SAAS,CAAC,WAAW,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;MAG3C,IAAMC,YAAY,GAAGJ,WAAW,CAAC,eAAe,CAAC;MACjDK,sBAAS,CAACC,UAAU,CAACF,YAAY,EAAE,qBAAqB,CAAC;MAGzD,IAAMG,YAAY,GAAGP,WAAW,CAAC,gBAAgB,CAAC;MAClDK,sBAAS,CAACG,KAAK,CAACD,YAAY,CAAC;MAG7B,MAAM,IAAAE,oBAAO,EAAC,YAAM;QAClBP,MAAM,CAACX,cAAc,CAAC,CAACmB,oBAAoB,CAAC,CAAC,EAAER,MAAM,CAACS,GAAG,CAACC,MAAM,CAAC,CAAC;MACpE,CAAC,CAAC;IACJ,CAAC,GAAE,KAAK,CAAC;EACX,CAAC,CAAC;EAEFvC,QAAQ,CAAC,UAAU,EAAE,YAAM;IACzBU,EAAE,CAAC,6BAA6B,MAAAlD,kBAAA,CAAAmD,OAAA,EAAE,aAAY;MAE5C,IAAM6B,cAAc,GAAG3B,oBAAW,CAAC/D,UAAuB;MAC1D0F,cAAc,CAAC1B,iBAAiB,CAAC;QAC/BC,IAAI,EAAExC;MACR,CAAC,CAAC;MAGF,IAAMkE,cAAc,GAAG5B,oBAAW,CAAC3D,UAAuB;MAC1DuF,cAAc,CAAC3B,iBAAiB,CAAC;QAC/BC,IAAI,EAAE;UACJvC,OAAO,EAAE,IAAI;UACb2C,OAAO,EAAE;QACX;MACF,CAAC,CAAC;MAEF,IAAAuB,QAAA,GAAwB,IAAArB,mBAAM,EAC5B,IAAArD,WAAA,CAAA6B,GAAA,EAACH,WAAW;UAAAE,QAAA,EACV,IAAA5B,WAAA,CAAA6B,GAAA,EAAC9B,YAAA,CAAA4E,iBAAiB;YAACjB,UAAU,EAAEnC;UAAe,CAAE;QAAC,CACtC,CACf,CAAC;QAJOoC,WAAW,GAAAe,QAAA,CAAXf,WAAW;MAOnB,IAAMiB,YAAY,GAAGjB,WAAW,CAAC,eAAe,CAAC;MACjDK,sBAAS,CAACG,KAAK,CAACS,YAAY,CAAC;MAG7B,MAAM,IAAAR,oBAAO,EAAC,YAAM;QAClBP,MAAM,CAACY,cAAc,CAAC,CAACJ,oBAAoB,CAAC,CAAC,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC,GAAE,KAAK,CAAC;EACX,CAAC,CAAC;EAEFrC,QAAQ,CAAC,OAAO,EAAE,YAAM;IACtBU,EAAE,CAAC,yBAAyB,MAAAlD,kBAAA,CAAAmD,OAAA,EAAE,aAAY;MACxC,IAAAkC,QAAA,GAAmC,IAAAxB,mBAAM,EACvC,IAAArD,WAAA,CAAA6B,GAAA,EAACH,WAAW;UAAAE,QAAA,EACV,IAAA5B,WAAA,CAAA6B,GAAA,EAAC9B,YAAA,CAAA+E,oBAAoB;YAACpB,UAAU,EAAEnC;UAAe,CAAE;QAAC,CACzC,CACf,CAAC;QAJOoC,WAAW,GAAAkB,QAAA,CAAXlB,WAAW;QAAEC,SAAS,GAAAiB,QAAA,CAATjB,SAAS;MAO9BC,MAAM,CAACF,WAAW,CAAC,eAAe,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC;MACjDD,MAAM,CAACD,SAAS,CAAC,OAAO,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IACzC,CAAC,GAAE,KAAK,CAAC;EACX,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}