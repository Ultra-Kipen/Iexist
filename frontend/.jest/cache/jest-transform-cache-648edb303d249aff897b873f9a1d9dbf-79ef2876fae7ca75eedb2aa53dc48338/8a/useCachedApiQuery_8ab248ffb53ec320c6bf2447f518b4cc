b88dc2ef7dd55636eca09e4d0b7df685
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCachedApiQuery = useCachedApiQuery;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _useCache2 = require("./useCache");
function useCachedApiQuery(endpoint, params) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ttl = options.ttl,
    _options$autoLoad = options.autoLoad,
    autoLoad = _options$autoLoad === void 0 ? true : _options$autoLoad,
    onError = options.onError,
    onSuccess = options.onSuccess;
  var fetchData = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    var queryString = params ? `?${new URLSearchParams(params).toString()}` : '';
    var response = yield fetch(`${endpoint}${queryString}`);
    if (!response.ok) {
      throw new Error(`API 요청 오류: ${response.status}`);
    }
    var result = yield response.json();
    if (!result.success) {
      throw new Error(result.error || '알 수 없는 오류가 발생했습니다.');
    }
    if (onSuccess && result.data) {
      onSuccess(result.data);
    }
    if (result.data === undefined) {
      throw new Error('API 응답에 데이터가 없습니다.');
    }
    return result.data;
  }), [endpoint, params, onSuccess]);
  var cacheKey = `api:${endpoint}:${JSON.stringify(params || {})}`;
  var _useCache = (0, _useCache2.useCache)(cacheKey, fetchData, {
      ttl: ttl,
      autoLoad: autoLoad
    }),
    data = _useCache.data,
    loading = _useCache.loading,
    error = _useCache.error,
    refetch = _useCache.refetch,
    invalidateCache = _useCache.invalidateCache;
  if (error && onError) {
    onError(error);
  }
  return {
    data: data,
    loading: loading,
    error: error,
    refetch: refetch,
    invalidateCache: invalidateCache
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3VzZUNhY2hlMiIsInVzZUNhY2hlZEFwaVF1ZXJ5IiwiZW5kcG9pbnQiLCJwYXJhbXMiLCJvcHRpb25zIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidHRsIiwiX29wdGlvbnMkYXV0b0xvYWQiLCJhdXRvTG9hZCIsIm9uRXJyb3IiLCJvblN1Y2Nlc3MiLCJmZXRjaERhdGEiLCJ1c2VDYWxsYmFjayIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJxdWVyeVN0cmluZyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJzdGF0dXMiLCJyZXN1bHQiLCJqc29uIiwic3VjY2VzcyIsImVycm9yIiwiZGF0YSIsImNhY2hlS2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsIl91c2VDYWNoZSIsInVzZUNhY2hlIiwibG9hZGluZyIsInJlZmV0Y2giLCJpbnZhbGlkYXRlQ2FjaGUiXSwic291cmNlcyI6WyJ1c2VDYWNoZWRBcGlRdWVyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlQ2FjaGUgfSBmcm9tICcuL3VzZUNhY2hlJztcclxuaW1wb3J0IHsgQXBpUmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy9hcGknO1xyXG5cclxuaW50ZXJmYWNlIEFwaVF1ZXJ5T3B0aW9ucyB7XHJcbiAgLyoqIOy6kOyLnCDsnKDtmqgg7Iuc6rCEICjrsIDrpqzstIgpICovXHJcbiAgdHRsPzogbnVtYmVyO1xyXG4gIC8qKiDsnpDrj5kg66Gc65SpIOyXrOu2gCAqL1xyXG4gIGF1dG9Mb2FkPzogYm9vbGVhbjtcclxuICAvKiog7JeQ65+sIO2VuOuTpOungSDtlajsiJggKi9cclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZDtcclxuICAvKiog7ISx6rO1IO2VuOuTpOungSDtlajsiJggKi9cclxuICBvblN1Y2Nlc3M/OiA8VD4oZGF0YTogVCkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFQSSDsmpTssq3snYQg7LqQ7Iux7ZWY64qUIO2bhVxyXG4gKiBAcGFyYW0gZW5kcG9pbnQgQVBJIOyXlOuTnO2PrOyduO2KuFxyXG4gKiBAcGFyYW0gcGFyYW1zIEFQSSDtjIzrnbzrr7jthLAg6rCd7LK0XHJcbiAqIEBwYXJhbSBvcHRpb25zIOy6kOyLnCDsmLXshZhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRBcGlRdWVyeTxUID0gYW55LCBQID0gUmVjb3JkPHN0cmluZywgYW55Pj4oXHJcbiAgZW5kcG9pbnQ6IHN0cmluZyxcclxuICBwYXJhbXM/OiBQLFxyXG4gIG9wdGlvbnM6IEFwaVF1ZXJ5T3B0aW9ucyA9IHt9XHJcbikge1xyXG4gIGNvbnN0IHsgdHRsLCBhdXRvTG9hZCA9IHRydWUsIG9uRXJyb3IsIG9uU3VjY2VzcyB9ID0gb3B0aW9ucztcclxuICBcclxuICAvLyBBUEkg7JqU7LKtIO2VqOyImFxyXG4gIGNvbnN0IGZldGNoRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpOiBQcm9taXNlPFQ+ID0+IHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gcGFyYW1zIFxyXG4gICAgICA/IGA/JHtuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcyBhcyBhbnkpLnRvU3RyaW5nKCl9YCBcclxuICAgICAgOiAnJztcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7ZW5kcG9pbnR9JHtxdWVyeVN0cmluZ31gKTtcclxuICAgIFxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSDsmpTssq0g7Jik66WYOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpIGFzIEFwaVJlc3BvbnNlPFQ+O1xyXG4gICAgXHJcbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuZXJyb3IgfHwgJ+yVjCDsiJgg7JeG64qUIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOyEseqztSDsvZzrsLFcclxuICAgIGlmIChvblN1Y2Nlc3MgJiYgcmVzdWx0LmRhdGEpIHtcclxuICAgICAgb25TdWNjZXNzKHJlc3VsdC5kYXRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gZGF0YeqwgCDsl4bripQg6rK97Jqw7JeQIOuMgO2VnCDsspjrpqwg7LaU6rCAXHJcbiAgICBpZiAocmVzdWx0LmRhdGEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FQSSDsnZHri7Xsl5Ag642w7J207YSw6rCAIOyXhuyKteuLiOuLpC4nKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xyXG4gIH0sIFtlbmRwb2ludCwgcGFyYW1zLCBvblN1Y2Nlc3NdKTtcclxuICBcclxuICAvLyDsupDsi5wg7YKkIOyDneyEsVxyXG4gIGNvbnN0IGNhY2hlS2V5ID0gYGFwaToke2VuZHBvaW50fToke0pTT04uc3RyaW5naWZ5KHBhcmFtcyB8fCB7fSl9YDtcclxuICBcclxuICBjb25zdCB7IFxyXG4gICAgZGF0YSwgXHJcbiAgICBsb2FkaW5nLCBcclxuICAgIGVycm9yLCBcclxuICAgIHJlZmV0Y2gsIFxyXG4gICAgaW52YWxpZGF0ZUNhY2hlIFxyXG4gIH0gPSB1c2VDYWNoZTxUPihjYWNoZUtleSwgZmV0Y2hEYXRhLCB7IHR0bCwgYXV0b0xvYWQgfSk7XHJcbiAgXHJcbiAgLy8g7JeQ65+sIO2VuOuTpOungVxyXG4gIGlmIChlcnJvciAmJiBvbkVycm9yKSB7XHJcbiAgICBvbkVycm9yKGVycm9yKTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHsgXHJcbiAgICBkYXRhLCBcclxuICAgIGxvYWRpbmcsIFxyXG4gICAgZXJyb3IsIFxyXG4gICAgcmVmZXRjaCwgXHJcbiAgICBpbnZhbGlkYXRlQ2FjaGUgXHJcbiAgfTtcclxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRCxPQUFBO0FBb0JPLFNBQVNFLGlCQUFpQkEsQ0FDL0JDLFFBQWdCLEVBQ2hCQyxNQUFVLEVBRVY7RUFBQSxJQURBQyxPQUF3QixHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBRyxDQUFDLENBQUM7RUFFN0IsSUFBUUcsR0FBRyxHQUEwQ0osT0FBTyxDQUFwREksR0FBRztJQUFBQyxpQkFBQSxHQUEwQ0wsT0FBTyxDQUEvQ00sUUFBUTtJQUFSQSxRQUFRLEdBQUFELGlCQUFBLGNBQUcsSUFBSSxHQUFBQSxpQkFBQTtJQUFFRSxPQUFPLEdBQWdCUCxPQUFPLENBQTlCTyxPQUFPO0lBQUVDLFNBQVMsR0FBS1IsT0FBTyxDQUFyQlEsU0FBUztFQUdoRCxJQUFNQyxTQUFTLEdBQUcsSUFBQUMsa0JBQVcsTUFBQUMsa0JBQUEsQ0FBQUMsT0FBQSxFQUFDLGFBQXdCO0lBQ3BELElBQU1DLFdBQVcsR0FBR2QsTUFBTSxHQUN0QixJQUFJLElBQUllLGVBQWUsQ0FBQ2YsTUFBYSxDQUFDLENBQUNnQixRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQ25ELEVBQUU7SUFDTixJQUFNQyxRQUFRLFNBQVNDLEtBQUssQ0FBQyxHQUFHbkIsUUFBUSxHQUFHZSxXQUFXLEVBQUUsQ0FBQztJQUV6RCxJQUFJLENBQUNHLFFBQVEsQ0FBQ0UsRUFBRSxFQUFFO01BQ2hCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLGNBQWNILFFBQVEsQ0FBQ0ksTUFBTSxFQUFFLENBQUM7SUFDbEQ7SUFFQSxJQUFNQyxNQUFNLFNBQVNMLFFBQVEsQ0FBQ00sSUFBSSxDQUFDLENBQW1CO0lBRXRELElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxPQUFPLEVBQUU7TUFDbkIsTUFBTSxJQUFJSixLQUFLLENBQUNFLE1BQU0sQ0FBQ0csS0FBSyxJQUFJLG9CQUFvQixDQUFDO0lBQ3ZEO0lBR0EsSUFBSWhCLFNBQVMsSUFBSWEsTUFBTSxDQUFDSSxJQUFJLEVBQUU7TUFDNUJqQixTQUFTLENBQUNhLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDO0lBQ3hCO0lBR0EsSUFBSUosTUFBTSxDQUFDSSxJQUFJLEtBQUt0QixTQUFTLEVBQUU7TUFDN0IsTUFBTSxJQUFJZ0IsS0FBSyxDQUFDLG9CQUFvQixDQUFDO0lBQ3ZDO0lBRUEsT0FBT0UsTUFBTSxDQUFDSSxJQUFJO0VBQ3BCLENBQUMsR0FBRSxDQUFDM0IsUUFBUSxFQUFFQyxNQUFNLEVBQUVTLFNBQVMsQ0FBQyxDQUFDO0VBR2pDLElBQU1rQixRQUFRLEdBQUcsT0FBTzVCLFFBQVEsSUFBSTZCLElBQUksQ0FBQ0MsU0FBUyxDQUFDN0IsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7RUFFbEUsSUFBQThCLFNBQUEsR0FNSSxJQUFBQyxtQkFBUSxFQUFJSixRQUFRLEVBQUVqQixTQUFTLEVBQUU7TUFBRUwsR0FBRyxFQUFIQSxHQUFHO01BQUVFLFFBQVEsRUFBUkE7SUFBUyxDQUFDLENBQUM7SUFMckRtQixJQUFJLEdBQUFJLFNBQUEsQ0FBSkosSUFBSTtJQUNKTSxPQUFPLEdBQUFGLFNBQUEsQ0FBUEUsT0FBTztJQUNQUCxLQUFLLEdBQUFLLFNBQUEsQ0FBTEwsS0FBSztJQUNMUSxPQUFPLEdBQUFILFNBQUEsQ0FBUEcsT0FBTztJQUNQQyxlQUFlLEdBQUFKLFNBQUEsQ0FBZkksZUFBZTtFQUlqQixJQUFJVCxLQUFLLElBQUlqQixPQUFPLEVBQUU7SUFDcEJBLE9BQU8sQ0FBQ2lCLEtBQUssQ0FBQztFQUNoQjtFQUVBLE9BQU87SUFDTEMsSUFBSSxFQUFKQSxJQUFJO0lBQ0pNLE9BQU8sRUFBUEEsT0FBTztJQUNQUCxLQUFLLEVBQUxBLEtBQUs7SUFDTFEsT0FBTyxFQUFQQSxPQUFPO0lBQ1BDLGVBQWUsRUFBZkE7RUFDRixDQUFDO0FBQ0giLCJpZ25vcmVMaXN0IjpbXX0=