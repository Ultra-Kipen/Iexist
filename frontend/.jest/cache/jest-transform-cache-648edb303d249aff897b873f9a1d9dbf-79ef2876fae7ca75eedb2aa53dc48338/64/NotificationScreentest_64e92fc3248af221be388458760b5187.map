{"version":3,"names":["_getJestObj","mock","__esModule","default","get","jest","fn","put","delete","getNotifications","markAsRead","markAllAsRead","getUnreadCount","deleteNotification","updateNotificationSettings","getNotificationSettings","useNavigation","navigate","goBack","alert","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_NotificationScreen","_reactNative2","_notificationService","_jsxRuntime","_require","mockNotifications","id","user_id","content","notification_type","related_id","is_read","created_at","Date","toISOString","now","describe","beforeEach","clearAllMocks","notificationService","mockResolvedValue","data","pagination","page","limit","total","success","it","_render","render","jsx","UNSAFE_getByType","expect","toBeTruthy","_render2","getByText","findByText","waitFor","_render3","_render4","notification","fireEvent","press","toHaveBeenCalledWith","_render5","markAllButton","toHaveBeenCalled","Alert","mockRejectedValue","Error","_render6","_render7","markAllReadButton"],"sources":["NotificationScreen.test.tsx"],"sourcesContent":["// __tests__/screens/NotificationScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport NotificationScreen from '../../src/screens/NotificationScreen';\r\nimport { Alert } from 'react-native';\r\n\r\n// API 클라이언트 모킹\r\njest.mock('../../src/services/api/client', () => {\r\n  return {\r\n    __esModule: true,\r\n    default: {\r\n      get: jest.fn(),\r\n      put: jest.fn(),\r\n      delete: jest.fn()\r\n    }\r\n  };\r\n});\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/notificationService', () => {\r\n  return {\r\n    getNotifications: jest.fn(),\r\n    markAsRead: jest.fn(),\r\n    markAllAsRead: jest.fn(),\r\n    getUnreadCount: jest.fn(),\r\n    deleteNotification: jest.fn(),\r\n    updateNotificationSettings: jest.fn(),\r\n    getNotificationSettings: jest.fn()\r\n  };\r\n});\r\n\r\n// 네비게이션 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n  }),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 컴포넌트 모킹\r\njest.mock('../../src/components/LoadingIndicator', () => 'LoadingIndicator');\r\njest.mock('../../src/components/Button', () => 'Button');\r\n\r\n// 테스트에 필요한 모듈 가져오기\r\nimport notificationService from '../../src/services/api/notificationService';\r\n\r\n// 테스트 데이터\r\nconst mockNotifications = [\r\n  {\r\n    id: 1,\r\n    user_id: 101,\r\n    content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',\r\n    notification_type: 'like',\r\n    related_id: 101,\r\n    is_read: false,\r\n    created_at: new Date().toISOString(),\r\n  },\r\n  {\r\n    id: 2,\r\n    user_id: 102,\r\n    content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',\r\n    notification_type: 'comment',\r\n    related_id: 102,\r\n    is_read: true,\r\n    created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1일 전\r\n  },\r\n  {\r\n    id: 3,\r\n    user_id: 103,\r\n    content: '행복 챌린지가 시작되었습니다.',\r\n    notification_type: 'challenge',\r\n    related_id: 5,\r\n    is_read: false,\r\n    created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3일 전\r\n  },\r\n];\r\n\r\ndescribe('NotificationScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // API 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: mockNotifications,\r\n      pagination: { page: 1, limit: 20, total: 3 }\r\n    });\r\n    \r\n    (notificationService.markAsRead as jest.Mock).mockResolvedValue({ success: true });\r\n    (notificationService.markAllAsRead as jest.Mock).mockResolvedValue({ success: true });\r\n  });\r\n\r\n  it('renders loading state initially', () => {\r\n    const { UNSAFE_getByType } = render(<NotificationScreen />);\r\n    expect(UNSAFE_getByType('LoadingIndicator')).toBeTruthy();\r\n  });\r\n\r\n  it('renders notifications list correctly', async () => {\r\n    const { getByText, findByText } = render(<NotificationScreen />);\r\n    \r\n    // 비동기적으로 컴포넌트가 업데이트될 때까지 대기\r\n    await findByText('알림');\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('알림')).toBeTruthy();\r\n      expect(getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.')).toBeTruthy();\r\n      expect(getByText('김철수님이 회원님의 게시물에 댓글을 남겼습니다.')).toBeTruthy();\r\n      expect(getByText('행복 챌린지가 시작되었습니다.')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('shows empty state when no notifications', async () => {\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: [],\r\n      pagination: { page: 1, limit: 20, total: 0 }\r\n    });\r\n    \r\n    const { findByText } = render(<NotificationScreen />);\r\n    \r\n    await findByText('알림이 없습니다.');\r\n  });\r\n\r\n  it('marks notification as read when clicked', async () => {\r\n    const { findByText } = render(<NotificationScreen />);\r\n    \r\n    const notification = await findByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.');\r\n    fireEvent.press(notification);\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.markAsRead).toHaveBeenCalledWith(1);\r\n    });\r\n  });\r\n\r\n  it('marks all notifications as read', async () => {\r\n    const { findByText } = render(<NotificationScreen />);\r\n    \r\n    const markAllButton = await findByText('모두 읽음');\r\n    fireEvent.press(markAllButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n      expect(Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');\r\n    });\r\n  });\r\n\r\n  it('handles error during loading', async () => {\r\n    (notificationService.getNotifications as jest.Mock).mockRejectedValue(new Error('네트워크 오류'));\r\n    \r\n    const { findByText } = render(<NotificationScreen />);\r\n    \r\n    await findByText('알림을 불러오는 중 오류가 발생했습니다.');\r\n    await findByText('다시 시도');\r\n  });\r\n\r\n  it('handles refresh functionality', async () => {\r\n    const { findByText } = render(<NotificationScreen />);\r\n    \r\n    const markAllReadButton = await findByText('모두 읽음');\r\n    fireEvent.press(markAllReadButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}