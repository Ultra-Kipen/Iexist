15ea6035d336420bd61a395d67ea19b0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderPosts = exports.renderPostInput = exports.renderEmotionSelector = exports.renderEmotionIcon = exports.initialPosts = exports.handlePostSubmission = exports.handleLikeAction = exports.handleImageUploadAction = exports.handleCommentAction = exports.emotions = exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _reactNativePaper = require("react-native-paper");
var _AuthContext = require("../contexts/AuthContext");
var _EmotionContext = require("../contexts/EmotionContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var emotions = exports.emotions = [{
  label: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  label: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}, {
  label: '위로',
  icon: 'hand-peace',
  color: '#87CEEB'
}, {
  label: '감동',
  icon: 'heart-outline',
  color: '#FF6347'
}, {
  label: '슬픔',
  icon: 'emoticon-sad-outline',
  color: '#4682B4'
}, {
  label: '불안',
  icon: 'alert-outline',
  color: '#DDA0DD'
}, {
  label: '화남',
  icon: 'emoticon-angry-outline',
  color: '#FF4500'
}, {
  label: '지침',
  icon: 'emoticon-neutral-outline',
  color: '#A9A9A9'
}, {
  label: '우울',
  icon: 'weather-cloudy',
  color: '#708090'
}, {
  label: '고독',
  icon: 'account-outline',
  color: '#8B4513'
}, {
  label: '충격',
  icon: 'lightning-bolt',
  color: '#9932CC'
}, {
  label: '편함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
var initialPosts = exports.initialPosts = [{
  id: 1,
  anonymousId: '익명1',
  content: '오늘도 난 여기 존재하고 있어요. 작은 일상이 감사하네요.',
  emotion: '감사',
  emotionIcon: '🙏',
  image: 'https://via.placeholder.com/150',
  likes: 15,
  comments: [{
    id: 1,
    author: '익명2',
    content: '당신의 존재 자체가 소중해요. 힘내세요!'
  }, {
    id: 2,
    author: '익명3',
    content: '저도 같은 마음이에요. 함께 이겨내요.'
  }],
  timestamp: '2시간 전'
}, {
  id: 2,
  anonymousId: '익명4',
  content: '힘든 날이지만, 그래도 난 여기 있어요. 누군가 내 마음을 알아줬으면 좋겠어요.',
  emotion: '위로',
  emotionIcon: '🤗',
  image: 'https://via.placeholder.com/150',
  likes: 23,
  comments: [{
    id: 1,
    author: '익명5',
    content: '당신의 마음 잘 알겠어요. 함께 있어 줄게요.'
  }],
  timestamp: '4시간 전'
}];
var renderEmotionIcon = exports.renderEmotionIcon = function renderEmotionIcon(iconName, color) {
  try {
    return (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
      name: iconName,
      size: 20,
      color: color
    });
  } catch (error) {
    console.error("Icon rendering error:", error);
    return null;
  }
};
var handlePostSubmission = exports.handlePostSubmission = function handlePostSubmission(content, emotion, imageUrl, setIsLoading, setIsDialogVisible) {
  if (content && emotion) {
    setIsLoading(true);
    setTimeout(function () {
      setIsLoading(false);
      setIsDialogVisible(true);
    }, 1000);
    return true;
  }
  return false;
};
var handleImageUploadAction = exports.handleImageUploadAction = function handleImageUploadAction(setImageUrl) {
  setImageUrl('https://via.placeholder.com/150');
  console.log('이미지 업로드 기능이 호출되었습니다.');
};
var handleLikeAction = exports.handleLikeAction = function handleLikeAction(posts, postId, setPosts) {
  setPosts(posts.map(function (post) {
    return post.id === postId ? Object.assign({}, post, {
      likes: post.likes + 1
    }) : post;
  }));
};
var handleCommentAction = exports.handleCommentAction = function handleCommentAction(posts, postId, commentContent, setPosts) {
  setPosts(posts.map(function (post) {
    return post.id === postId ? Object.assign({}, post, {
      comments: [].concat((0, _toConsumableArray2.default)(post.comments), [{
        id: Date.now(),
        author: '익명',
        content: commentContent
      }])
    }) : post;
  }));
};
var renderEmotionSelector = exports.renderEmotionSelector = function renderEmotionSelector(selectedEmotion, setSelectedEmotion, styles) {
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.emotionSelector,
    children: emotions.map(function (emotion) {
      return (0, _jsxRuntime.jsx)(_reactNativePaper.Chip, {
        selected: selectedEmotion === emotion,
        onPress: function onPress() {
          return setSelectedEmotion(emotion);
        },
        style: [styles.emotionChip, {
          backgroundColor: selectedEmotion === emotion ? emotion.color : 'transparent'
        }],
        textStyle: [styles.emotionLabel, {
          color: selectedEmotion === emotion ? '#FFFFFF' : emotion.color
        }],
        icon: function icon() {
          return renderEmotionIcon(emotion.icon, selectedEmotion === emotion ? '#FFFFFF' : emotion.color);
        },
        testID: `emotion-chip-${emotion.label}`,
        children: emotion.label
      }, emotion.label);
    })
  });
};
var renderPostInput = exports.renderPostInput = function renderPostInput(postContent, setPostContent, imageUrl, handleImageUpload, styles) {
  return (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
      value: postContent,
      onChangeText: setPostContent,
      placeholder: "\uB098\uC758 \uC624\uB298\uC740...",
      multiline: true,
      numberOfLines: 4,
      mode: "outlined",
      style: styles.postInput,
      testID: "post-content-input"
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
      icon: "camera",
      mode: "outlined",
      onPress: handleImageUpload,
      style: styles.imageButton,
      testID: "image-upload-button",
      children: "\uC0AC\uC9C4 \uCD94\uAC00"
    }), imageUrl && (0, _jsxRuntime.jsx)(_reactNative.Image, {
      source: {
        uri: imageUrl
      },
      style: styles.uploadedImage,
      testID: "uploaded-image"
    })]
  });
};
var renderPosts = exports.renderPosts = function renderPosts(posts, handleLike, handleComment, theme, styles) {
  return posts.map(function (post) {
    return (0, _jsxRuntime.jsxs)(_reactNativePaper.Card, {
      style: styles.postCard,
      testID: `post-card-${post.id}`,
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Card.Title, {
        title: post.anonymousId,
        subtitle: post.timestamp,
        left: function left(props) {
          return (0, _jsxRuntime.jsx)(_reactNativePaper.Avatar.Icon, Object.assign({}, props, {
            icon: "account"
          }));
        },
        right: function right(props) {
          return (0, _jsxRuntime.jsx)(_reactNativePaper.IconButton, Object.assign({}, props, {
            icon: "dots-vertical",
            onPress: function onPress() {}
          }));
        }
      }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.postContent,
          children: post.content
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.emotionContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
            style: styles.emotionIcon,
            children: post.emotionIcon
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.Chip, {
            style: styles.emotionChip,
            children: post.emotion
          })]
        }), post.image && (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: post.image
          },
          style: styles.postImage
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Actions, {
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.IconButton, {
          testID: `like-button-${post.id}`,
          icon: "heart-outline",
          onPress: function onPress() {
            return handleLike(post.id);
          },
          iconColor: theme.colors.primary
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          children: post.likes
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.IconButton, {
          icon: "comment-outline",
          onPress: function onPress() {},
          iconColor: theme.colors.primary
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          children: post.comments.length
        })]
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Divider, {}), (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        children: [post.comments.map(function (comment) {
          return (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.commentContainer,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              style: styles.commentAuthor,
              children: comment.author
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
              children: comment.content
            })]
          }, comment.id);
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          placeholder: "\uB530\uB73B\uD55C \uB9D0 \uD55C\uB9C8\uB514...",
          testID: `comment-input-${post.id}`,
          right: (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput.Icon, {
            icon: "send",
            onPress: function onPress() {
              return handleComment(post.id, '새 댓글');
            }
          })
        })]
      })]
    }, post.id);
  });
};
var HomeScreen = function HomeScreen() {
  var theme = (0, _reactNativePaper.useTheme)();
  var _useAuth = (0, _AuthContext.useAuth)(),
    user = _useAuth.user,
    isAuthenticated = _useAuth.isAuthenticated;
  var _useEmotion = (0, _EmotionContext.useEmotion)(),
    apiEmotions = _useEmotion.emotions,
    selectedEmotions = _useEmotion.selectedEmotions,
    selectApiEmotion = _useEmotion.selectEmotion,
    logEmotion = _useEmotion.logEmotion;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedEmotion = _useState2[0],
    setSelectedEmotion = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    postContent = _useState4[0],
    setPostContent = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    imageUrl = _useState6[0],
    setImageUrl = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isLoading = _useState8[0],
    setIsLoading = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isDialogVisible = _useState10[0],
    setIsDialogVisible = _useState10[1];
  var _useState11 = (0, _react.useState)(initialPosts),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    posts = _useState12[0],
    setPosts = _useState12[1];
  var handlePost = function handlePost() {
    var result = handlePostSubmission(postContent, selectedEmotion, imageUrl, setIsLoading, setIsDialogVisible);
    if (result && selectedEmotion) {
      var apiEmotion = apiEmotions.find(function (e) {
        return e.name === selectedEmotion.label;
      });
      if (apiEmotion && apiEmotion.emotion_id) {
        logEmotion(apiEmotion.emotion_id, postContent);
      }
    }
  };
  var handleImageUpload = function handleImageUpload() {
    handleImageUploadAction(setImageUrl);
  };
  var handleLike = function handleLike(postId) {
    handleLikeAction(posts, postId, setPosts);
  };
  var handleComment = function handleComment(postId, commentContent) {
    handleCommentAction(posts, postId, commentContent, setPosts);
  };
  if (!isAuthenticated) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: [styles.container, styles.centerContent],
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: styles.sectionTitle,
        children: "\uB85C\uADF8\uC778\uC774 \uD544\uC694\uD569\uB2C8\uB2E4"
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        children: "\uAC8C\uC2DC\uBB3C\uC744 \uBCF4\uB824\uBA74, \uBA3C\uC800 \uB85C\uADF8\uC778\uD574\uC8FC\uC138\uC694."
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "home-screen-container",
    children: [(0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      style: styles.content,
      children: [user && (0, _jsxRuntime.jsxs)(_reactNativePaper.Text, {
        style: styles.welcomeText,
        children: ["\uD658\uC601\uD569\uB2C8\uB2E4, ", user.nickname || user.username, "\uB2D8"]
      }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Surface, {
        style: styles.emotionSurface,
        testID: "emotion-surface",
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.sectionTitle,
          children: "\uC624\uB298\uC758 \uAC10\uC815"
        }), renderEmotionSelector(selectedEmotion, setSelectedEmotion, styles)]
      }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Card, {
        style: styles.inputCard,
        testID: "post-input-card",
        children: [renderPostInput(postContent, setPostContent, imageUrl, handleImageUpload, styles), (0, _jsxRuntime.jsx)(_reactNativePaper.Card.Actions, {
          children: (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
            mode: "contained",
            onPress: handlePost,
            disabled: isLoading,
            style: styles.postButton,
            testID: "share-post-button",
            children: isLoading ? (0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
              color: theme.colors.surface
            }) : '나의 하루 공유하기'
          })
        })]
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: styles.sectionTitle,
        children: "\uB204\uAD70\uAC00\uC758 \uD558\uB8E8\uB294.."
      }), renderPosts(posts, handleLike, handleComment, theme, styles)]
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Portal, {
      children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Dialog, {
        visible: isDialogVisible,
        onDismiss: function onDismiss() {
          return setIsDialogVisible(false);
        },
        testID: "success-dialog",
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Dialog.Title, {
          children: "\uAC8C\uC2DC \uC644\uB8CC"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Dialog.Content, {
          children: (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
            children: "\uB2F9\uC2E0\uC758 \uD558\uB8E8\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uACF5\uC720\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
          })
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Dialog.Actions, {
          children: (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
            onPress: function onPress() {
              return setIsDialogVisible(false);
            },
            testID: "dialog-confirm-button",
            children: "\uD655\uC778"
          })
        })]
      })
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.FAB, {
      style: styles.fab,
      icon: "plus",
      onPress: function onPress() {
        return console.log('FAB Pressed');
      },
      testID: "fab-button"
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0e6ff'
  },
  centerContent: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  welcomeText: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 16,
    color: '#4a0e4e',
    textAlign: 'center'
  },
  emotionSurface: {
    elevation: 4,
    borderRadius: 8,
    padding: 16,
    marginBottom: 16
  },
  header: {
    paddingVertical: 16,
    paddingHorizontal: 20
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white'
  },
  headerSubtitle: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.8)',
    marginTop: 4
  },
  content: {
    flex: 1,
    padding: 16
  },
  emotionSelector: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between'
  },
  emotionChip: {
    margin: 4
  },
  selectedEmotionChip: {
    backgroundColor: '#f0e6ff',
    borderColor: '#4a0e4e',
    borderWidth: 2
  },
  emotionChipText: {
    fontSize: 15
  },
  emotionIcon: {
    marginBottom: 4
  },
  emotionLabel: {
    fontSize: 15,
    textAlign: 'center',
    fontWeight: 'bold'
  },
  selectedEmotionChipText: {
    color: '#4a0e4e'
  },
  selectedEmotionLabel: {
    fontWeight: 'bold'
  },
  inputCard: {
    marginBottom: 16
  },
  postInput: {
    backgroundColor: 'transparent',
    marginBottom: 10
  },
  imageButton: {
    marginBottom: 10
  },
  uploadedImage: {
    width: '100%',
    height: 200,
    borderRadius: 8,
    marginTop: 10
  },
  postButton: {
    width: '100%',
    paddingVertical: 8
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 12,
    color: '#4a0e4e'
  },
  postCard: {
    marginBottom: 16
  },
  postContent: {
    fontSize: 16,
    marginBottom: 8
  },
  emotionContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8
  },
  postImage: {
    width: '100%',
    height: 200,
    borderRadius: 8,
    marginTop: 8
  },
  commentContainer: {
    marginVertical: 4
  },
  commentAuthor: {
    fontWeight: 'bold',
    marginRight: 8
  },
  fab: {
    position: 'absolute',
    margin: 16,
    right: 0,
    bottom: 0
  }
});
var _default = exports.default = HomeScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,