{"version":3,"names":["_cache","require","describe","beforeEach","clearCache","it","key","value","name","id","setCache","cachedValue","getCache","expect","toEqual","jest","useFakeTimers","ttl","toBe","advanceTimersByTime","toBeNull","useRealTimers","removeCache","keys","getCacheKeys","toContain","length","getCacheSize","isCacheExpired"],"sources":["cache.test.ts"],"sourcesContent":["import { \r\n    setCache, \r\n    getCache, \r\n    removeCache, \r\n    clearCache,\r\n    getCacheKeys,\r\n    getCacheSize,\r\n    isCacheExpired\r\n  } from '../../../src/utils/cache';\r\n  \r\n  describe('Cache utils', () => {\r\n    beforeEach(() => {\r\n      // 각 테스트 전에 캐시 초기화\r\n      clearCache();\r\n    });\r\n  \r\n    describe('setCache and getCache', () => {\r\n      it('should store and retrieve cache items correctly', () => {\r\n        const key = 'testKey';\r\n        const value = { name: '테스트', id: 123 };\r\n        \r\n        setCache(key, value);\r\n        const cachedValue = getCache(key);\r\n        \r\n        expect(cachedValue).toEqual(value);\r\n      });\r\n  \r\n      it('should handle expiration time correctly', () => {\r\n        jest.useFakeTimers();\r\n        \r\n        const key = 'expiringKey';\r\n        const value = 'will expire';\r\n        const ttl = 60; // 60초 후 만료\r\n        \r\n        setCache(key, value, ttl);\r\n        \r\n        // TTL 지나기 전에는 값이 존재해야 함\r\n        expect(getCache(key)).toBe(value);\r\n        \r\n        // TTL 이후에는 값이 null이어야 함\r\n        jest.advanceTimersByTime(ttl * 1000 + 100); // 약간 더 진행\r\n        expect(getCache(key)).toBeNull();\r\n        \r\n        jest.useRealTimers();\r\n      });\r\n    });\r\n  \r\n    describe('removeCache', () => {\r\n      it('should remove specific cache item', () => {\r\n        setCache('key1', 'value1');\r\n        setCache('key2', 'value2');\r\n        \r\n        removeCache('key1');\r\n        \r\n        expect(getCache('key1')).toBeNull();\r\n        expect(getCache('key2')).toBe('value2');\r\n      });\r\n    });\r\n  \r\n    describe('clearCache', () => {\r\n      it('should remove all cache items', () => {\r\n        setCache('key1', 'value1');\r\n        setCache('key2', 'value2');\r\n        \r\n        clearCache();\r\n        \r\n        expect(getCache('key1')).toBeNull();\r\n        expect(getCache('key2')).toBeNull();\r\n      });\r\n    });\r\n  \r\n    describe('getCacheKeys', () => {\r\n      it('should return all cache keys', () => {\r\n        setCache('key1', 'value1');\r\n        setCache('key2', 'value2');\r\n        \r\n        const keys = getCacheKeys();\r\n        \r\n        expect(keys).toContain('key1');\r\n        expect(keys).toContain('key2');\r\n        expect(keys.length).toBe(2);\r\n      });\r\n    });\r\n  \r\n    describe('getCacheSize', () => {\r\n      it('should return correct number of cache items', () => {\r\n        expect(getCacheSize()).toBe(0);\r\n        \r\n        setCache('key1', 'value1');\r\n        expect(getCacheSize()).toBe(1);\r\n        \r\n        setCache('key2', 'value2');\r\n        expect(getCacheSize()).toBe(2);\r\n        \r\n        removeCache('key1');\r\n        expect(getCacheSize()).toBe(1);\r\n        \r\n        clearCache();\r\n        expect(getCacheSize()).toBe(0);\r\n      });\r\n    });\r\n  \r\n    describe('isCacheExpired', () => {\r\n      it('should correctly check if cache is expired', () => {\r\n        jest.useFakeTimers();\r\n        \r\n        const key = 'expiringKey';\r\n        const value = 'will expire';\r\n        const ttl = 60; // 60초 후 만료\r\n        \r\n        setCache(key, value, ttl);\r\n        \r\n        expect(isCacheExpired(key)).toBe(false);\r\n        \r\n        jest.advanceTimersByTime(ttl * 1000 + 100);\r\n        expect(isCacheExpired(key)).toBe(true);\r\n        \r\n        jest.useRealTimers();\r\n      });\r\n  \r\n      it('should return true for non-existent keys', () => {\r\n        expect(isCacheExpired('nonExistentKey')).toBe(true);\r\n      });\r\n    });\r\n  });"],"mappings":"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","ignoreList":[]}