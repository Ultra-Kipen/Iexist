11b32a0e1134e7fb200d5cc048ade77c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useForm = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var useForm = exports.useForm = function useForm(_ref) {
  var initialValues = _ref.initialValues,
    onSubmit = _ref.onSubmit,
    validate = _ref.validate;
  var _useState = (0, _react.useState)(initialValues),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    values = _useState2[0],
    setValues = _useState2[1];
  var _useState3 = (0, _react.useState)({}),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    errors = _useState4[0],
    setErrors = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isSubmitting = _useState6[0],
    setIsSubmitting = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    touched = _useState8[0],
    setTouched = _useState8[1];
  var handleTextChange = (0, _react.useCallback)(function (name) {
    return function (e) {
      var value = e.nativeEvent.text;
      handleChange(name, value);
    };
  }, []);
  var handleToggleChange = (0, _react.useCallback)(function (name) {
    return function (value) {
      handleChange(name, value);
    };
  }, []);
  var setAllTouched = (0, _react.useCallback)(function () {
    var allTouched = {};
    Object.keys(values).forEach(function (key) {
      allTouched[key] = true;
    });
    setTouched(allTouched);
  }, [values]);
  var handleChange = (0, _react.useCallback)(function (name, value) {
    setValues(function (prevValues) {
      return Object.assign({}, prevValues, (0, _defineProperty2.default)({}, name, value));
    });
    setTouched(function (prev) {
      return Object.assign({}, prev, (0, _defineProperty2.default)({}, name, true));
    });
    if (errors[name]) {
      setErrors(function (prev) {
        var newErrors = Object.assign({}, prev);
        delete newErrors[name];
        return newErrors;
      });
    }
  }, [errors]);
  var setFieldValues = (0, _react.useCallback)(function (newValues) {
    setValues(function (prev) {
      return Object.assign({}, prev, newValues);
    });
  }, []);
  var setFieldValue = (0, _react.useCallback)(function (name, value) {
    setValues(function (prev) {
      return Object.assign({}, prev, (0, _defineProperty2.default)({}, name, value));
    });
  }, []);
  var setFieldTouched = (0, _react.useCallback)(function (name) {
    var isTouched = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    setTouched(function (prev) {
      return Object.assign({}, prev, (0, _defineProperty2.default)({}, name, isTouched));
    });
  }, []);
  var validateForm = (0, _react.useCallback)(function () {
    if (!validate) return {};
    var validationErrors = validate(values);
    setErrors(validationErrors);
    return validationErrors;
  }, [validate, values]);
  var handleSubmit = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    setAllTouched();
    var validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      return;
    }
    setIsSubmitting(true);
    try {
      yield onSubmit(values);
    } catch (error) {
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  }), [onSubmit, setAllTouched, validateForm, values]);
  var resetForm = (0, _react.useCallback)(function () {
    setValues(initialValues);
    setErrors({});
    setTouched({});
  }, [initialValues]);
  var setFieldError = (0, _react.useCallback)(function (name, error) {
    setErrors(function (prev) {
      return Object.assign({}, prev, (0, _defineProperty2.default)({}, name, error));
    });
  }, []);
  var getFieldError = (0, _react.useCallback)(function (name) {
    return errors[name] || '';
  }, [errors]);
  var isTouched = (0, _react.useCallback)(function (name) {
    return !!touched[name];
  }, [touched]);
  var isValid = (0, _react.useCallback)(function () {
    return Object.keys(errors).length === 0;
  }, [errors]);
  return {
    values: values,
    errors: errors,
    touched: touched,
    isSubmitting: isSubmitting,
    handleChange: handleChange,
    handleTextChange: handleTextChange,
    handleToggleChange: handleToggleChange,
    handleSubmit: handleSubmit,
    setFieldValue: setFieldValue,
    setFieldValues: setFieldValues,
    setFieldTouched: setFieldTouched,
    setAllTouched: setAllTouched,
    resetForm: resetForm,
    validateForm: validateForm,
    setFieldError: setFieldError,
    getFieldError: getFieldError,
    isTouched: isTouched,
    isValid: isValid
  };
};
var _default = exports.default = useForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,