d741f91e22657dac0e746bd84146e6f4
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  function ViewComponent(props) {
    return props.children;
  }
  function TextComponent(props) {
    return props.children;
  }
  function TouchableOpacityComponent(props) {
    return props.children;
  }
  function ImageComponent(props) {
    return null;
  }
  function ScrollViewComponent(props) {
    return props.children;
  }
  function TextInputComponent(props) {
    return null;
  }
  return Object.assign({}, RN, {
    Alert: {
      alert: jest.fn()
    },
    View: ViewComponent,
    Text: TextComponent,
    TouchableOpacity: TouchableOpacityComponent,
    Image: ImageComponent,
    ScrollView: ScrollViewComponent,
    TextInput: TextInputComponent,
    Animated: Object.assign({}, RN.Animated, {
      timing: function timing() {
        return {
          start: function start(callback) {
            return callback && callback();
          }
        };
      },
      spring: function spring() {
        return {
          start: function start(callback) {
            return callback && callback();
          }
        };
      },
      View: ViewComponent,
      Text: TextComponent,
      Image: ImageComponent
    }),
    Platform: Object.assign({}, RN.Platform, {
      OS: 'android',
      select: function select(obj) {
        return obj.android || obj.default;
      }
    }),
    Keyboard: {
      dismiss: jest.fn(),
      addListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      })
    },
    NativeEventEmitter: jest.fn().mockImplementation(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    })
  });
});
require("@testing-library/jest-native/extend-expect");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
global.window = global.window || {};
global.window.PR_SHOULD_USE_CONTINUATION = true;
global.__DEV__ = true;
if (typeof global.ReactTestInstance !== 'undefined') {
  Object.defineProperty(global.ReactTestInstance.prototype, 'textContent', {
    get: function get() {
      return String(this.toString());
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiVmlld0NvbXBvbmVudCIsInByb3BzIiwiY2hpbGRyZW4iLCJUZXh0Q29tcG9uZW50IiwiVG91Y2hhYmxlT3BhY2l0eUNvbXBvbmVudCIsIkltYWdlQ29tcG9uZW50IiwiU2Nyb2xsVmlld0NvbXBvbmVudCIsIlRleHRJbnB1dENvbXBvbmVudCIsIk9iamVjdCIsImFzc2lnbiIsIkFsZXJ0IiwiYWxlcnQiLCJmbiIsIlZpZXciLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkltYWdlIiwiU2Nyb2xsVmlldyIsIlRleHRJbnB1dCIsIkFuaW1hdGVkIiwidGltaW5nIiwic3RhcnQiLCJjYWxsYmFjayIsInNwcmluZyIsIlBsYXRmb3JtIiwiT1MiLCJzZWxlY3QiLCJvYmoiLCJhbmRyb2lkIiwiZGVmYXVsdCIsIktleWJvYXJkIiwiZGlzbWlzcyIsImFkZExpc3RlbmVyIiwicmVtb3ZlIiwiTmF0aXZlRXZlbnRFbWl0dGVyIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicmVtb3ZlTGlzdGVuZXJzIiwicmVxdWlyZSIsIl9yZXF1aXJlIiwidXNlRmFrZVRpbWVycyIsImdsb2JhbCIsIndpbmRvdyIsIlBSX1NIT1VMRF9VU0VfQ09OVElOVUFUSU9OIiwiX19ERVZfXyIsIlJlYWN0VGVzdEluc3RhbmNlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJTdHJpbmciLCJ0b1N0cmluZyJdLCJzb3VyY2VzIjpbInNldHVwLXRlc3RpbmctbGlicmFyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vc2V0dXAtdGVzdGluZy1saWJyYXJ5LnRzXHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcclxuXHJcbi8vIO2DgOydtOuouCDrqqjtgrkgKOyVoOuLiOuplOydtOyFmCDrsI8g7YOA7J2066i4IOq0gOugqCDthYzsiqTtirjrpbwg7JyE7ZW0KVxyXG5qZXN0LnVzZUZha2VUaW1lcnMoKTtcclxuXHJcbi8vIFBSX1NIT1VMRF9VU0VfQ09OVElOVUFUSU9OIOyGjeyEseydhCB3aW5kb3fsl5Ag7LaU6rCAXHJcbi8vIEB0cy1pZ25vcmUgLSB3aW5kb3cg7IaN7ISxIOustOyLnFxyXG5nbG9iYWwud2luZG93ID0gZ2xvYmFsLndpbmRvdyB8fCB7fTtcclxuLy8gQHRzLWlnbm9yZSAtIFBSX1NIT1VMRF9VU0VfQ09OVElOVUFUSU9OIOyGjeyEsSDstpTqsIBcclxuZ2xvYmFsLndpbmRvdy5QUl9TSE9VTERfVVNFX0NPTlRJTlVBVElPTiA9IHRydWU7XHJcblxyXG4vLyBfX0RFVl9f6rCAIOydtOuvuCDshKDslrjrkJjslrQg7J6I7Jy866+A66GcIOqwkuunjCDshKTsoJVcclxuLy8gQHRzLWlnbm9yZSAtIF9fREVWX18g7J6s7ISg7Ja4IOustOyLnFxyXG5nbG9iYWwuX19ERVZfXyA9IHRydWU7XHJcblxyXG4vLyBSZWFjdFRlc3RJbnN0YW5jZeyXkCB0ZXh0Q29udGVudCDsho3shLEg7LaU6rCAIOuwqeyLnSDsiJjsoJVcclxuLy8gQHRzLWlnbm9yZVxyXG5pZiAodHlwZW9mIGdsb2JhbC5SZWFjdFRlc3RJbnN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAvLyBAdHMtaWdub3JlXHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbC5SZWFjdFRlc3RJbnN0YW5jZS5wcm90b3R5cGUsICd0ZXh0Q29udGVudCcsIHtcclxuICAgIGdldDogZnVuY3Rpb24odGhpczogYW55KSB7XHJcbiAgICAgIHJldHVybiBTdHJpbmcodGhpcy50b1N0cmluZygpKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLy8gcmVhY3QtbmF0aXZlIOuqqOuTiCDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIFxyXG4gIGZ1bmN0aW9uIFZpZXdDb21wb25lbnQocHJvcHM6IGFueSkge1xyXG4gICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gVGV4dENvbXBvbmVudChwcm9wczogYW55KSB7XHJcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBUb3VjaGFibGVPcGFjaXR5Q29tcG9uZW50KHByb3BzOiBhbnkpIHtcclxuICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEltYWdlQ29tcG9uZW50KHByb3BzOiBhbnkpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gU2Nyb2xsVmlld0NvbXBvbmVudChwcm9wczogYW55KSB7XHJcbiAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW47XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBUZXh0SW5wdXRDb21wb25lbnQocHJvcHM6IGFueSkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5STixcclxuICAgIEFsZXJ0OiB7XHJcbiAgICAgIGFsZXJ0OiBqZXN0LmZuKClcclxuICAgIH0sXHJcbiAgICBWaWV3OiBWaWV3Q29tcG9uZW50LFxyXG4gICAgVGV4dDogVGV4dENvbXBvbmVudCxcclxuICAgIFRvdWNoYWJsZU9wYWNpdHk6IFRvdWNoYWJsZU9wYWNpdHlDb21wb25lbnQsXHJcbiAgICBJbWFnZTogSW1hZ2VDb21wb25lbnQsXHJcbiAgICBTY3JvbGxWaWV3OiBTY3JvbGxWaWV3Q29tcG9uZW50LFxyXG4gICAgVGV4dElucHV0OiBUZXh0SW5wdXRDb21wb25lbnQsXHJcbiAgICBBbmltYXRlZDoge1xyXG4gICAgICAuLi5STi5BbmltYXRlZCxcclxuICAgICAgdGltaW5nOiAoKSA9PiAoe1xyXG4gICAgICAgIHN0YXJ0OiAoY2FsbGJhY2s/OiBhbnkpID0+IGNhbGxiYWNrICYmIGNhbGxiYWNrKCksXHJcbiAgICAgIH0pLFxyXG4gICAgICBzcHJpbmc6ICgpID0+ICh7XHJcbiAgICAgICAgc3RhcnQ6IChjYWxsYmFjaz86IGFueSkgPT4gY2FsbGJhY2sgJiYgY2FsbGJhY2soKSxcclxuICAgICAgfSksXHJcbiAgICAgIFZpZXc6IFZpZXdDb21wb25lbnQsXHJcbiAgICAgIFRleHQ6IFRleHRDb21wb25lbnQsXHJcbiAgICAgIEltYWdlOiBJbWFnZUNvbXBvbmVudCxcclxuICAgIH0sXHJcbiAgICBQbGF0Zm9ybToge1xyXG4gICAgICAuLi5STi5QbGF0Zm9ybSxcclxuICAgICAgT1M6ICdhbmRyb2lkJyxcclxuICAgICAgc2VsZWN0OiAob2JqOiBhbnkpID0+IG9iai5hbmRyb2lkIHx8IG9iai5kZWZhdWx0LFxyXG4gICAgfSxcclxuICAgIEtleWJvYXJkOiB7XHJcbiAgICAgIGRpc21pc3M6IGplc3QuZm4oKSxcclxuICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKCkgPT4gKHsgcmVtb3ZlOiBqZXN0LmZuKCkgfSkpLFxyXG4gICAgfSxcclxuICAgIE5hdGl2ZUV2ZW50RW1pdHRlcjogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xyXG4gICAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcclxuICAgIH0pKSxcclxuICB9O1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQTRCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUM7RUFFN0MsU0FBU0MsYUFBYUEsQ0FBQ0MsS0FBVSxFQUFFO0lBQ2pDLE9BQU9BLEtBQUssQ0FBQ0MsUUFBUTtFQUN2QjtFQUVBLFNBQVNDLGFBQWFBLENBQUNGLEtBQVUsRUFBRTtJ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