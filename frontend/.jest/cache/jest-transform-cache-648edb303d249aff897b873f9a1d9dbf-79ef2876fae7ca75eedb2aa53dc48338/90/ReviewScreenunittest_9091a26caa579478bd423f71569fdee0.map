{"version":3,"names":["_getJestObj","mock","StyleSheet","create","styles","View","ScrollView","Image","SegmentedButtons","Card","Button","Title","Paragraph","useTheme","jest","fn","colors","primary","background","Object","defineProperty","exports","value","_require","require","consoleSpy","spyOn","console","mockImplementation","describe","afterEach","mockClear","afterAll","mockRestore","it","ReviewScreenModule","expect","toBeDefined","e","error","fail","message","fs","path","componentPath","resolve","__dirname","existsSync","toBe","componentCode","readFileSync","toContain","toMatch","styleProps","forEach","prop"],"sources":["ReviewScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/tests/unit/screens/ReviewScreen.unit.test.tsx\r\nimport React from 'react';\r\n\r\n// 단순 모킹만 사용 - 외부 변수 없이\r\njest.mock('react-native', () => ({\r\n  StyleSheet: {\r\n    create: (styles) => styles,\r\n  },\r\n  View: 'View',\r\n  ScrollView: 'ScrollView',\r\n  Image: 'Image',\r\n}));\r\n\r\n// react-native-paper 모킹 - 단순 문자열 컴포넌트로\r\njest.mock('react-native-paper', () => ({\r\n  SegmentedButtons: 'SegmentedButtons', \r\n  Card: 'Card',\r\n  Button: 'Button',\r\n  Title: 'Title',\r\n  Paragraph: 'Paragraph',\r\n  useTheme: jest.fn(() => ({\r\n    colors: {\r\n      primary: '#000',\r\n      background: '#fff',\r\n    }\r\n  }))\r\n}));\r\n\r\n// 콘솔 스파이 설정\r\nconst consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\ndescribe('ReviewScreen 모듈 테스트', () => {\r\n  afterEach(() => {\r\n    consoleSpy.mockClear();\r\n  });\r\n  \r\n  afterAll(() => {\r\n    consoleSpy.mockRestore();\r\n  });\r\n\r\n  it('ReviewScreen 모듈을 불러올 수 있어야 함', () => {\r\n    try {\r\n      // 단순히 모듈이 불러와지는지 확인\r\n      const ReviewScreenModule = require('../../../src/screens/ReviewScreen');\r\n      expect(ReviewScreenModule).toBeDefined();\r\n    } catch (e) {\r\n      console.error('모듈 로드 오류:', e);\r\n      fail('ReviewScreen 모듈을 불러오는 데 실패했습니다: ' + e.message);\r\n    }\r\n  });\r\n});\r\n\r\n// 파일 구조 검증 테스트\r\ndescribe('ReviewScreen 구조 검증', () => {\r\n  // 컴포넌트 코드를 문자열로 검사\r\n  it('올바른 구조와 중요 요소를 포함해야 함', () => {\r\n    try {\r\n      const fs = require('fs');\r\n      const path = require('path');\r\n      \r\n      // ReviewScreen.tsx 파일 경로\r\n      const componentPath = path.resolve(__dirname, '../../../src/screens/ReviewScreen.tsx');\r\n      \r\n      // 파일 존재 확인\r\n      expect(fs.existsSync(componentPath)).toBe(true);\r\n      \r\n      // 파일 내용 읽기\r\n      const componentCode = fs.readFileSync(componentPath, 'utf8');\r\n      \r\n      // 필수 구성 요소 확인\r\n      expect(componentCode).toContain('import React, { useState } from');\r\n      expect(componentCode).toContain('const ReviewScreen = () =>');\r\n      expect(componentCode).toContain('const [period, setPeriod] = useState');\r\n      expect(componentCode).toContain('<SegmentedButtons');\r\n      expect(componentCode).toContain('<Card');\r\n      expect(componentCode).toContain('StyleSheet.create');\r\n      \r\n      // 핵심 기능 확인\r\n      expect(componentCode).toContain('onPress={() => console.log');\r\n      expect(componentCode).toContain('value={period}');\r\n      expect(componentCode).toContain('onValueChange={setPeriod}');\r\n      \r\n      // 이미지 그리드 확인\r\n      expect(componentCode).toMatch(/\\[\\s*1\\s*,\\s*2\\s*,\\s*3\\s*,\\s*4\\s*,\\s*5\\s*,\\s*6\\s*\\]/);\r\n      \r\n      // 통계 섹션 확인\r\n      expect(componentCode).toContain('이번 {period === \\'weekly\\' ? \\'주\\' : \\'달\\'}의 통계');\r\n      \r\n    } catch (e) {\r\n      console.error('파일 검사 오류:', e);\r\n      fail('ReviewScreen 구조 검증에 실패했습니다: ' + e.message);\r\n    }\r\n  });\r\n  \r\n  // 추가 테스트: 구성 요소 분석\r\n  it('주요 UI 요소가 올바르게 구성되어 있어야 함', () => {\r\n    try {\r\n      const fs = require('fs');\r\n      const path = require('path');\r\n      \r\n      // 파일 내용 읽기\r\n      const componentPath = path.resolve(__dirname, '../../../src/screens/ReviewScreen.tsx');\r\n      const componentCode = fs.readFileSync(componentPath, 'utf8');\r\n      \r\n      // 스타일 속성 검증\r\n      const styleProps = [\r\n        'container', 'segmentedButtons', 'title', 'imageGrid', \r\n        'imageCard', 'graphButton', 'statsCard'\r\n      ];\r\n      \r\n      styleProps.forEach(prop => {\r\n        expect(componentCode).toContain(prop + ':');\r\n      });\r\n      \r\n      // 주요 UI 요소 검증\r\n      expect(componentCode).toContain('ScrollView');\r\n      expect(componentCode).toContain('SegmentedButtons');\r\n      expect(componentCode).toContain('buttons={[');\r\n      expect(componentCode).toContain('감정 변화 그래프 보기');\r\n      expect(componentCode).toContain('Card.Content');\r\n      expect(componentCode).toContain('Card.Cover');\r\n      \r\n      // 이미지 URL 형식 검증\r\n      expect(componentCode).toContain('https://picsum.photos/300?random=');\r\n      \r\n      // 데이터 형식 및 처리 검증\r\n      expect(componentCode).toContain('{ value: \\'weekly\\', label: \\'주간\\' }');\r\n      expect(componentCode).toContain('{ value: \\'monthly\\', label: \\'월간\\' }');\r\n      \r\n    } catch (e) {\r\n      console.error('UI 요소 검사 오류:', e);\r\n      fail('ReviewScreen UI 요소 검증에 실패했습니다: ' + e.message);\r\n    }\r\n  });\r\n  \r\n  // 추가 테스트: 기능적 측면 검증\r\n  it('상태 관리와 이벤트 처리 로직이 올바르게 구현되어 있어야 함', () => {\r\n    try {\r\n      const fs = require('fs');\r\n      const path = require('path');\r\n      \r\n      // 파일 내용 읽기\r\n      const componentPath = path.resolve(__dirname, '../../../src/screens/ReviewScreen.tsx');\r\n      const componentCode = fs.readFileSync(componentPath, 'utf8');\r\n      \r\n      // 상태 관리 검증\r\n      expect(componentCode).toContain('const [period, setPeriod] = useState(\\'weekly\\')');\r\n      \r\n      // 이벤트 핸들러 검증\r\n      expect(componentCode).toContain('onValueChange={setPeriod}');\r\n      expect(componentCode).toContain('onPress={() => console.log(\\'Show emotion graph\\')');\r\n      \r\n      // 조건부 렌더링 검증\r\n      expect(componentCode).toContain('period === \\'weekly\\' ? \\'주간\\' : \\'월간\\'');\r\n      expect(componentCode).toContain('이번 {period === \\'weekly\\' ? \\'주\\' : \\'달\\'}의 통계');\r\n      \r\n      // 동적 콘텐츠 검증\r\n      expect(componentCode).toMatch(/\\{item\\}/); // 매핑된 아이템 참조\r\n      \r\n    } catch (e) {\r\n      console.error('기능 검사 오류:', e);\r\n      fail('ReviewScreen 기능 검증에 실패했습니다: ' + e.message);\r\n    }\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}