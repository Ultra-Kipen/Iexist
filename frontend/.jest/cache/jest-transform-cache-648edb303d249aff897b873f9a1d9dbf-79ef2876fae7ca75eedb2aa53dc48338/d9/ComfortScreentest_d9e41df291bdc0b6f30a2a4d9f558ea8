060f4395f6bf9a5d8b57cbda06c31583
_getJestObj().mock('react-native-paper', function () {
  return {
    Card: {
      Content: 'CardContent'
    },
    TextInput: 'TextInput',
    Button: 'Button',
    List: {
      Section: 'ListSection',
      Item: 'ListItem',
      Icon: 'ListIcon'
    },
    Title: 'Title',
    Paragraph: 'Paragraph',
    FAB: 'FAB',
    ActivityIndicator: 'ActivityIndicator',
    Chip: 'Chip',
    Text: 'PaperText',
    Modal: 'Modal',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff',
          surface: '#fff',
          accent: '#f1c40f',
          error: '#f13a59',
          text: '#000'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    getBestPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    createPost: jest.fn().mockResolvedValue({
      data: {
        data: {}
      }
    }),
    sendMessage: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    }),
    likePost: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn();
var mockPosts = [{
  post_id: 1,
  title: '불안감이 심해요',
  content: '최근에 불안감이 심해져서 잠을 잘 못자고 있어요.',
  user_id: 101,
  is_anonymous: true,
  like_count: 5,
  comment_count: 2,
  created_at: '2025-04-30T10:00:00Z'
}];
var mockBestPosts = [{
  post_id: 3,
  title: '인간관계 고민',
  content: '친구와 갈등이 생겼는데 어떻게 해결해야 할지 모르겠어요.',
  like_count: 30,
  comment_count: 15
}];
jest.spyOn(_reactNative.Alert, 'alert').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('ComfortScreen 기본 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: mockBestPosts
      }
    });
  });
  afterAll(function () {
    console.error = originalConsoleError;
  });
  test('컴포넌트가 오류 없이 렌더링됨', function () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
  });
  test('마운트 시 게시물 API 호출', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    });
  }));
  test('API 오류 발생 시 경고창 표시', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockRejectedValueOnce(new Error('네트워크 오류'));
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    });
  }));
  test('createPost API 호출 시 올바른 데이터 전달', (0, _asyncToGenerator2.default)(function* () {
    var testData = {
      title: '테스트 제목',
      content: '테스트 내용',
      is_anonymous: true
    };
    yield _comfortWallService.default.createPost(testData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledWith(testData);
  }));
  test('sendMessage API 호출 시 올바른 데이터 전달', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var messageData = {
      message: '응원 메시지',
      is_anonymous: true
    };
    yield _comfortWallService.default.sendMessage(postId, messageData);
    expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(postId, messageData);
  }));
  test('likePost API 호출 시 올바른 게시물 ID 전달', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    yield _comfortWallService.default.likePost(postId);
    expect(_comfortWallService.default.likePost).toHaveBeenCalledWith(postId);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,