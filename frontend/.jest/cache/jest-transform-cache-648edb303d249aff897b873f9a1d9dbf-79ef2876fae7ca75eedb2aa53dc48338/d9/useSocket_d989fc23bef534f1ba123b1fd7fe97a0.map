{"version":3,"names":["_react","require","_socketService","_interopRequireDefault","useSocket","exports","options","arguments","length","undefined","_options$autoConnect","autoConnect","_options$events","events","_useState","useState","_useState2","_slicedToArray2","default","isConnected","setIsConnected","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","eventsRef","useRef","mountedRef","initialConnectRef","useEffect","current","safeSetState","useCallback","setStateFn","value","handleConnect","handleError","err","errorMessage","Error","message","handleDisconnect","connect","_asyncToGenerator2","socketService","init","connectionStatus","disconnect","emit","event","data","console","warn","connectHandler","disconnectHandler","errorHandler","on","Object","entries","forEach","_ref2","_ref3","callback","catch","off","_ref4","_ref5","_default"],"sources":["useSocket.ts"],"sourcesContent":["// hooks/useSocket.ts\r\nimport { useEffect, useState, useCallback, useRef } from 'react';\r\nimport socketService from '../services/socketService';\r\n\r\ninterface UseSocketOptions {\r\n  autoConnect?: boolean;\r\n  events?: Record<string, (...args: any[]) => void>;\r\n}\r\n\r\n/**\r\n * Socket.IO 연결 및 이벤트를 관리하는 커스텀 훅\r\n * @param options 설정 옵션\r\n */\r\nexport const useSocket = (options: UseSocketOptions = {}) => {\r\n  const { autoConnect = true, events = {} } = options;\r\n  // 초기 상태를 항상 false로 설정하여 테스트와 일치시킴\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(autoConnect);\r\n  const eventsRef = useRef(events);\r\n  const mountedRef = useRef(true);\r\n  const initialConnectRef = useRef(autoConnect);\r\n\r\n  // 이벤트 참조 업데이트\r\n  useEffect(() => {\r\n    eventsRef.current = events;\r\n  }, [events]);\r\n\r\n  // 안전한 상태 업데이트 함수\r\n  const safeSetState = useCallback((setStateFn: React.Dispatch<any>, value: any) => {\r\n    if (mountedRef.current) {\r\n      setStateFn(value);\r\n    }\r\n  }, []);\r\n\r\n  // 연결 상태 업데이트 핸들러\r\n  const handleConnect = useCallback(() => {\r\n    safeSetState(setIsConnected, true);\r\n    safeSetState(setError, null);\r\n    safeSetState(setIsLoading, false);\r\n  }, [safeSetState]);\r\n\r\n  // 연결 오류 핸들러\r\n  const handleError = useCallback((err: Error) => {\r\n    const errorMessage = err instanceof Error \r\n      ? err.message \r\n      : '연결 중 오류가 발생했습니다.';\r\n    \r\n    safeSetState(setError, errorMessage);\r\n    safeSetState(setIsLoading, false);\r\n    safeSetState(setIsConnected, false);\r\n  }, [safeSetState]);\r\n\r\n  // 연결 해제 핸들러\r\n  const handleDisconnect = useCallback(() => {\r\n    safeSetState(setIsConnected, false);\r\n    safeSetState(setIsLoading, false);\r\n  }, [safeSetState]);\r\n\r\n  // 소켓 연결 함수\r\n  const connect = useCallback(async () => {\r\n    try {\r\n      safeSetState(setIsLoading, true);\r\n      safeSetState(setError, null);\r\n      await socketService.init();\r\n      \r\n      // 연결 상태 확인 및 설정\r\n      const connectionStatus = socketService.isConnected();\r\n      safeSetState(setIsConnected, connectionStatus);\r\n      safeSetState(setIsLoading, false);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error \r\n        ? err.message \r\n        : '연결 중 오류가 발생했습니다.';\r\n      \r\n      safeSetState(setError, errorMessage);\r\n      safeSetState(setIsLoading, false);\r\n      safeSetState(setIsConnected, false);\r\n    }\r\n  }, [safeSetState]);\r\n\r\n  // 연결 해제 함수\r\n  const disconnect = useCallback(() => {\r\n    socketService.disconnect();\r\n    safeSetState(setIsConnected, false);\r\n    safeSetState(setIsLoading, false);\r\n  }, [safeSetState]);\r\n\r\n  // 이벤트 발신 함수\r\n  const emit = useCallback((event: string, data?: any) => {\r\n    if (!socketService.isConnected()) {\r\n      console.warn('소켓이 연결되지 않았습니다.');\r\n      return;\r\n    }\r\n    socketService.emit(event, data);\r\n  }, []);\r\n\r\n  // 컴포넌트 마운트/언마운트 시 이벤트 리스너 설정\r\n  useEffect(() => {\r\n    mountedRef.current = true;\r\n\r\n    // 연결 이벤트 리스너\r\n    const connectHandler = () => {\r\n      handleConnect();\r\n    };\r\n\r\n    const disconnectHandler = () => {\r\n      handleDisconnect();\r\n    };\r\n\r\n    const errorHandler = (err: Error) => {\r\n      handleError(err);\r\n    };\r\n\r\n    socketService.on('connect', connectHandler);\r\n    socketService.on('disconnect', disconnectHandler);\r\n    socketService.on('connect_error', errorHandler);\r\n    socketService.on('error', errorHandler);\r\n    \r\n    // 사용자 정의 이벤트 리스너 등록\r\n    Object.entries(eventsRef.current).forEach(([event, callback]) => {\r\n      socketService.on(event, callback);\r\n    });\r\n\r\n    // 자동 연결 설정이 있으면 연결\r\n    if (autoConnect && !isConnected) {\r\n      connect().catch(errorHandler);\r\n    }\r\n\r\n    // 컴포넌트 언마운트 시 리스너 제거\r\n    return () => {\r\n      mountedRef.current = false;\r\n      socketService.off('connect', connectHandler);\r\n      socketService.off('disconnect', disconnectHandler);\r\n      socketService.off('connect_error', errorHandler);\r\n      socketService.off('error', errorHandler);\r\n      \r\n      // 사용자 정의 이벤트 리스너 제거\r\n      Object.entries(eventsRef.current).forEach(([event, callback]) => {\r\n        socketService.off(event, callback);\r\n      });\r\n    };\r\n  }, [autoConnect, connect, handleConnect, handleDisconnect, handleError, isConnected, safeSetState]);\r\n\r\n  return {\r\n    isConnected,\r\n    isLoading,\r\n    error,\r\n    connect,\r\n    disconnect,\r\n    emit,\r\n    // 추가 이벤트 수신 함수를 등록\r\n    on: socketService.on,\r\n    off: socketService.off\r\n  };\r\n};\r\n\r\nexport default useSocket;"],"mappings":"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","ignoreList":[]}