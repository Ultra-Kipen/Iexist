{"version":3,"names":["_validation","require","describe","it","expect","isValidEmail","toBe","isValidPassword","isValidUsername","isValidPhoneNumber","isRequired","undefined","validator","minLength","maxLength","hasUpperCase","hasLowerCase","hasNumber"],"sources":["validation.test.ts"],"sourcesContent":["import { \r\n    isValidEmail, \r\n    isValidPassword, \r\n    isValidUsername,\r\n    isValidPhoneNumber,\r\n    isRequired,\r\n    minLength,\r\n    maxLength,\r\n    hasUpperCase,\r\n    hasLowerCase,\r\n    hasNumber\r\n  } from '../../../src/utils/validation';\r\n  \r\n  describe('Validation utils', () => {\r\n    describe('isValidEmail', () => {\r\n      it('should validate correct email addresses', () => {\r\n        expect(isValidEmail('test@example.com')).toBe(true);\r\n        expect(isValidEmail('user.name@domain.co.kr')).toBe(true);\r\n        expect(isValidEmail('user+tag@example.org')).toBe(true);\r\n      });\r\n  \r\n      it('should reject invalid email addresses', () => {\r\n        expect(isValidEmail('invalid')).toBe(false);\r\n        expect(isValidEmail('invalid@')).toBe(false);\r\n        expect(isValidEmail('@domain.com')).toBe(false);\r\n        expect(isValidEmail('user@domain')).toBe(false);\r\n        expect(isValidEmail('')).toBe(false);\r\n      });\r\n    });\r\n  \r\n    describe('isValidPassword', () => {\r\n      it('should validate strong passwords', () => {\r\n        expect(isValidPassword('Password123!')).toBe(true);\r\n        expect(isValidPassword('Abcde12345@')).toBe(true);\r\n      });\r\n  \r\n      it('should reject weak passwords', () => {\r\n        expect(isValidPassword('password')).toBe(false); // No uppercase, no number, no special char\r\n        expect(isValidPassword('Password')).toBe(false); // No number, no special char\r\n        expect(isValidPassword('password123')).toBe(false); // No uppercase, no special char\r\n        expect(isValidPassword('Pass1!')).toBe(false); // Too short\r\n        expect(isValidPassword('')).toBe(false);\r\n      });\r\n    });\r\n  \r\n    describe('isValidUsername', () => {\r\n      it('should validate correct usernames', () => {\r\n        expect(isValidUsername('user123')).toBe(true);\r\n        expect(isValidUsername('user_name')).toBe(true);\r\n        expect(isValidUsername('User-Name')).toBe(true);\r\n      });\r\n  \r\n      it('should reject invalid usernames', () => {\r\n        expect(isValidUsername('us')).toBe(false); // Too short\r\n        expect(isValidUsername('user name')).toBe(false); // Contains space\r\n        expect(isValidUsername('user@name')).toBe(false); // Contains special char\r\n        expect(isValidUsername('verylongusernamethatisover30characters')).toBe(false); // Too long\r\n        expect(isValidUsername('')).toBe(false);\r\n      });\r\n    });\r\n  \r\n    describe('isValidPhoneNumber', () => {\r\n      it('should validate correct Korean phone numbers', () => {\r\n        expect(isValidPhoneNumber('01012345678')).toBe(true);\r\n        expect(isValidPhoneNumber('010-1234-5678')).toBe(true);\r\n        expect(isValidPhoneNumber('02-123-4567')).toBe(true);\r\n      });\r\n  \r\n      it('should reject invalid phone numbers', () => {\r\n        expect(isValidPhoneNumber('0101234')).toBe(false); // Too short\r\n        expect(isValidPhoneNumber('010-1234-567')).toBe(false); // Invalid format\r\n        expect(isValidPhoneNumber('abc1234567')).toBe(false); // Contains non-numeric chars\r\n        expect(isValidPhoneNumber('')).toBe(false);\r\n      });\r\n    });\r\n\r\n    describe('isRequired', () => {\r\n        it('should validate non-empty values', () => {\r\n          expect(isRequired('text')).toBe(true);\r\n          expect(isRequired(0)).toBe(true);\r\n          expect(isRequired(false)).toBe(true);\r\n        });\r\n    \r\n        it('should reject empty values', () => {\r\n          expect(isRequired('')).toBe(false);\r\n          expect(isRequired(null)).toBe(false);\r\n          expect(isRequired(undefined)).toBe(false);\r\n        });\r\n      });\r\n    \r\n      describe('minLength', () => {\r\n        it('should validate strings of sufficient length', () => {\r\n          const validator = minLength(5);\r\n          expect(validator('12345')).toBe(true);\r\n          expect(validator('123456')).toBe(true);\r\n        });\r\n    \r\n        it('should reject strings that are too short', () => {\r\n          const validator = minLength(5);\r\n          expect(validator('1234')).toBe(false);\r\n          expect(validator('')).toBe(false);\r\n        });\r\n      });\r\n    \r\n      describe('maxLength', () => {\r\n        it('should validate strings that are not too long', () => {\r\n          const validator = maxLength(5);\r\n          expect(validator('12345')).toBe(true);\r\n          expect(validator('1234')).toBe(true);\r\n          expect(validator('')).toBe(true);\r\n        });\r\n    \r\n        it('should reject strings that are too long', () => {\r\n          const validator = maxLength(5);\r\n          expect(validator('123456')).toBe(false);\r\n        });\r\n      });\r\n    \r\n      describe('hasUpperCase', () => {\r\n        it('should validate strings with uppercase letters', () => {\r\n          expect(hasUpperCase('Password')).toBe(true);\r\n          expect(hasUpperCase('pAssword')).toBe(true);\r\n        });\r\n    \r\n        it('should reject strings without uppercase letters', () => {\r\n          expect(hasUpperCase('password')).toBe(false);\r\n          expect(hasUpperCase('123456')).toBe(false);\r\n          expect(hasUpperCase('')).toBe(false);\r\n        });\r\n      });\r\n    \r\n      describe('hasLowerCase', () => {\r\n        it('should validate strings with lowercase letters', () => {\r\n          expect(hasLowerCase('Password')).toBe(true);\r\n          expect(hasLowerCase('PASSWORd')).toBe(true);\r\n        });\r\n    \r\n        it('should reject strings without lowercase letters', () => {\r\n          expect(hasLowerCase('PASSWORD')).toBe(false);\r\n          expect(hasLowerCase('123456')).toBe(false);\r\n          expect(hasLowerCase('')).toBe(false);\r\n        });\r\n      });\r\n    \r\n      describe('hasNumber', () => {\r\n        it('should validate strings with numbers', () => {\r\n          expect(hasNumber('Password1')).toBe(true);\r\n          expect(hasNumber('1Password')).toBe(true);\r\n        });\r\n    \r\n        it('should reject strings without numbers', () => {\r\n          expect(hasNumber('Password')).toBe(false);\r\n          expect(hasNumber('')).toBe(false);\r\n        });\r\n      });\r\n    });"],"mappings":"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","ignoreList":[]}