2783d0136d7dd2da5807f7a41f961289
var _reducer = require("../../src/store/reducer");
var _types = require("../../src/store/types");
describe('리듀서', function () {
  test('초기 상태가 올바르게 설정되어 있다', function () {
    expect(_reducer.initialState).toEqual({
      isAuthenticated: false,
      user: null,
      notifications: [],
      theme: 'system',
      loading: false,
      error: null
    });
  });
  test('SET_AUTHENTICATED 액션이 인증 상태를 업데이트한다', function () {
    var action = {
      type: _types.ActionType.SET_AUTHENTICATED,
      payload: true
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState.isAuthenticated).toBe(true);
    expect(newState).not.toBe(_reducer.initialState);
  });
  test('SET_USER 액션이 사용자 정보를 업데이트한다', function () {
    var user = {
      id: 1,
      username: 'test',
      email: 'test@example.com'
    };
    var action = {
      type: _types.ActionType.SET_USER,
      payload: user
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState.user).toEqual(user);
    expect(newState).not.toBe(_reducer.initialState);
  });
  test('ADD_NOTIFICATION 액션이 알림을 추가한다', function () {
    var notification = {
      id: '1',
      content: 'Test notification',
      notificationType: 'system',
      isRead: false,
      createdAt: '2024-01-01T00:00:00Z'
    };
    var action = {
      type: _types.ActionType.ADD_NOTIFICATION,
      payload: notification
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState.notifications).toHaveLength(1);
    expect(newState.notifications[0]).toEqual(notification);
    expect(newState).not.toBe(_reducer.initialState);
  });
  test('REMOVE_NOTIFICATION 액션이 알림을 제거한다', function () {
    var notification1 = {
      id: '1',
      content: 'Test notification 1',
      notificationType: 'system',
      isRead: false,
      createdAt: '2024-01-01T00:00:00Z'
    };
    var notification2 = {
      id: '2',
      content: 'Test notification 2',
      notificationType: 'like',
      isRead: false,
      createdAt: '2024-01-01T00:00:00Z'
    };
    var stateWithNotifications = Object.assign({}, _reducer.initialState, {
      notifications: [notification1, notification2]
    });
    var action = {
      type: _types.ActionType.REMOVE_NOTIFICATION,
      payload: '1'
    };
    var newState = (0, _reducer.reducer)(stateWithNotifications, action);
    expect(newState.notifications).toHaveLength(1);
    expect(newState.notifications[0]).toEqual(notification2);
    expect(newState).not.toBe(stateWithNotifications);
  });
  test('CLEAR_NOTIFICATIONS 액션이 모든 알림을 제거한다', function () {
    var notification = {
      id: '1',
      content: 'Test notification',
      notificationType: 'system',
      isRead: false,
      createdAt: '2024-01-01T00:00:00Z'
    };
    var stateWithNotifications = Object.assign({}, _reducer.initialState, {
      notifications: [notification]
    });
    var action = {
      type: _types.ActionType.CLEAR_NOTIFICATIONS
    };
    var newState = (0, _reducer.reducer)(stateWithNotifications, action);
    expect(newState.notifications).toHaveLength(0);
    expect(newState).not.toBe(stateWithNotifications);
  });
  test('SET_THEME 액션이 테마를 업데이트한다', function () {
    var action = {
      type: _types.ActionType.SET_THEME,
      payload: 'dark'
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState.theme).toBe('dark');
    expect(newState).not.toBe(_reducer.initialState);
  });
  test('SET_LOADING 액션이 로딩 상태를 업데이트한다', function () {
    var action = {
      type: _types.ActionType.SET_LOADING,
      payload: true
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState.loading).toBe(true);
    expect(newState).not.toBe(_reducer.initialState);
  });
  test('SET_ERROR 액션이 오류 메시지를 업데이트한다', function () {
    var action = {
      type: _types.ActionType.SET_ERROR,
      payload: '오류 메시지'
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState.error).toBe('오류 메시지');
    expect(newState).not.toBe(_reducer.initialState);
  });
  test('CLEAR_ERROR 액션이 오류 메시지를 제거한다', function () {
    var stateWithError = Object.assign({}, _reducer.initialState, {
      error: '오류 메시지'
    });
    var action = {
      type: _types.ActionType.CLEAR_ERROR
    };
    var newState = (0, _reducer.reducer)(stateWithError, action);
    expect(newState.error).toBeNull();
    expect(newState).not.toBe(stateWithError);
  });
  test('RESET_STATE 액션이 상태를 초기화한다', function () {
    var modifiedState = {
      isAuthenticated: true,
      user: {
        id: 1,
        username: 'test',
        email: 'test@example.com'
      },
      notifications: [{
        id: '1',
        content: 'Test notification',
        notificationType: 'system',
        isRead: false,
        createdAt: '2024-01-01T00:00:00Z'
      }],
      theme: 'dark',
      loading: true,
      error: '오류 메시지'
    };
    var action = {
      type: _types.ActionType.RESET_STATE
    };
    var newState = (0, _reducer.reducer)(modifiedState, action);
    expect(newState).toEqual(_reducer.initialState);
    expect(newState).not.toBe(modifiedState);
  });
  test('알 수 없는 액션 타입이 원래 상태를 반환한다', function () {
    var action = {
      type: 'UNKNOWN_ACTION'
    };
    var newState = (0, _reducer.reducer)(_reducer.initialState, action);
    expect(newState).toBe(_reducer.initialState);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,