{"version":3,"names":["_getJestObj","mock","RN","jest","requireActual","Object","assign","DevSettings","addMenuItem","fn","DevMenu","_interopRequireDefault","require","defineProperty","exports","value","default","_asyncToGenerator2","_slicedToArray2","_react","_interopRequireWildcard","_reactNative","_reactNativePaper","_emotionService","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","has","get","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_require","EmotionLogScreen","_ref","navigation","_useState","useState","_useState2","emotions","setEmotions","_useState3","_useState4","selectedEmotions","setSelectedEmotions","_useState5","_useState6","note","setNote","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","isSubmitting","setIsSubmitting","useEffect","loadEmotions","_ref2","response","emotionService","getAllEmotions","emotionResponse","data","error","Alert","alert","process","env","NODE_ENV","console","apply","arguments","jsxs","View","style","styles","loadingContainer","children","jsx","ActivityIndicator","size","Text","loadingText","ScrollView","container","title","subtitle","emotionsContainer","map","emotion","Chip","selected","includes","emotion_id","onPress","toggleEmotion","emotionChip","backgroundColor","color","textStyle","testID","name","TextInput","label","onChangeText","mode","multiline","numberOfLines","noteInput","Button","handleSubmit","submitButton","disabled","length","StyleSheet","create","flex","padding","justifyContent","alignItems","marginTop","fontSize","fontWeight","marginBottom","flexDirection","flexWrap","margin","paddingVertical","_default"],"sources":["EmotionLogScreen.tsx"],"sourcesContent":["// EmotionLogScreen.tsx 또는 관련 테스트 파일\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, ScrollView, StyleSheet, Alert } from 'react-native';\r\nimport { Text, Chip, Button, TextInput, ActivityIndicator } from 'react-native-paper';\r\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\r\nimport emotionService from '../services/api/emotionService';\r\n\r\n// 필요한 모킹 설정 추가\r\njest.mock('react-native', () => {\r\n  const RN = jest.requireActual('react-native');\r\n  return {\r\n    ...RN,\r\n    DevSettings: {\r\n      addMenuItem: jest.fn(),\r\n    },\r\n    DevMenu: {\r\n      addMenuItem: jest.fn(),\r\n    },\r\n  };\r\n});\r\n\r\ninterface Emotion {\r\n  emotion_id: number;\r\n  name: string;\r\n  icon: string;\r\n  color: string;\r\n}\r\n\r\ninterface EmotionResponse {\r\n  status: string;\r\n  data: Emotion[];\r\n}\r\n\r\nconst EmotionLogScreen = ({ navigation }: any) => {\r\n  const [emotions, setEmotions] = useState<Emotion[]>([]);\r\n  const [selectedEmotions, setSelectedEmotions] = useState<number[]>([]);\r\n  const [note, setNote] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadEmotions();\r\n  }, []);\r\n\r\n  const loadEmotions = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await emotionService.getAllEmotions();\r\n      const emotionResponse = response.data as EmotionResponse;\r\n      setEmotions(emotionResponse.data);\r\n    } catch (error) {\r\n      Alert.alert('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');\r\n      \r\n      if (process.env.NODE_ENV !== 'test') {\r\n        console.error('감정 로드 오류:', error);\r\n      }\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <View style={styles.loadingContainer}>\r\n        <ActivityIndicator size=\"large\" />\r\n        <Text style={styles.loadingText}>감정 데이터를 불러오는 중...</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Text style={styles.title}>오늘의 감정</Text>\r\n      <Text style={styles.subtitle}>현재 어떤 감정을 느끼고 계신가요?</Text>\r\n\r\n      <View style={styles.emotionsContainer}>\r\n        {emotions.map((emotion) => (\r\n          <Chip\r\n            key={emotion.emotion_id}\r\n            selected={selectedEmotions.includes(emotion.emotion_id)}\r\n            onPress={() => toggleEmotion(emotion.emotion_id)}\r\n            style={[\r\n              styles.emotionChip,\r\n              selectedEmotions.includes(emotion.emotion_id) && { backgroundColor: emotion.color }\r\n            ]}\r\n            textStyle={{\r\n              color: selectedEmotions.includes(emotion.emotion_id) ? '#FFFFFF' : emotion.color\r\n            }}\r\n            testID=\"emotion-chip\"\r\n          >\r\n            {emotion.name}\r\n          </Chip>\r\n        ))}\r\n      </View>\r\n\r\n      <TextInput\r\n        label=\"감정에 대한 메모 (선택사항)\"\r\n        value={note}\r\n        onChangeText={setNote}\r\n        mode=\"outlined\"\r\n        multiline\r\n        numberOfLines={4}\r\n        style={styles.noteInput}\r\n        testID=\"emotion-note-input\"\r\n      />\r\n\r\n      <Button\r\n        mode=\"contained\"\r\n        onPress={handleSubmit}\r\n        style={styles.submitButton}\r\n        disabled={isSubmitting || selectedEmotions.length === 0}\r\n        testID=\"emotion-submit-button\"\r\n      >\r\n        {isSubmitting ? '기록 중...' : '감정 기록하기'}\r\n      </Button>\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 16,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  loadingText: {\r\n    marginTop: 16,\r\n    fontSize: 16,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 8,\r\n    color: '#4a0e4e',\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    color: '#666',\r\n    marginBottom: 24,\r\n  },\r\n  emotionsContainer: {\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    marginBottom: 24,\r\n  },\r\n  emotionChip: {\r\n    margin: 4,\r\n  },\r\n  noteInput: {\r\n    marginBottom: 24,\r\n  },\r\n  submitButton: {\r\n    paddingVertical: 8,\r\n  },\r\n});\r\n\r\nexport default EmotionLogScreen;"],"mappings":"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","ignoreList":[]}