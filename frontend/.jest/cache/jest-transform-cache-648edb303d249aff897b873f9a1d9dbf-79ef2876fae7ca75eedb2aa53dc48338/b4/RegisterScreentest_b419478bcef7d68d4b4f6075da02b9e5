b7bf5a22ce57847fbc848589abca439a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _RegisterScreen = _interopRequireDefault(require("../../src/screens/RegisterScreen"));
var _AuthContext = require("../../src/contexts/AuthContext");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn()
};
describe('RegisterScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_RegisterScreen.default, {
          navigation: mockNavigation
        })
      })),
      getAllByText = _render.getAllByText,
      getByText = _render.getByText;
    expect(getAllByText('회원가입')[0]).toBeTruthy();
    expect(getByText('IExist와 함께 나의 존재를 기록해보세요')).toBeTruthy();
    expect(getByText('이미 계정이 있으신가요?')).toBeTruthy();
    expect(getByText('로그인')).toBeTruthy();
  });
  it('validates form inputs', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_RegisterScreen.default, {
          navigation: mockNavigation
        })
      })),
      getAllByText = _render2.getAllByText,
      getByText = _render2.getByText;
    var registerButtons = getAllByText('회원가입');
    var registerButton = registerButtons[registerButtons.length - 1];
    _reactNative.fireEvent.press(registerButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('사용자 이름을 입력해주세요')).toBeTruthy();
      expect(getByText('이메일을 입력해주세요')).toBeTruthy();
      expect(getByText('비밀번호를 입력해주세요')).toBeTruthy();
      expect(getByText('비밀번호 확인을 입력해주세요')).toBeTruthy();
    });
  }));
  it('validates password confirmation', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_RegisterScreen.default, {
          navigation: mockNavigation
        })
      })),
      getAllByText = _render3.getAllByText,
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.changeText(getByTestId('input-사용자 이름'), 'testuser');
    _reactNative.fireEvent.changeText(getByTestId('input-이메일'), 'test@example.com');
    _reactNative.fireEvent.changeText(getByTestId('input-비밀번호'), 'password123');
    _reactNative.fireEvent.changeText(getByTestId('input-비밀번호 확인'), 'different');
    var registerButtons = getAllByText('회원가입');
    var registerButton = registerButtons[registerButtons.length - 1];
    _reactNative.fireEvent.press(registerButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('비밀번호가 일치하지 않습니다')).toBeTruthy();
    });
  }));
  it('navigates to login screen', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_RegisterScreen.default, {
          navigation: mockNavigation
        })
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('로그인'));
    expect(mockNavigation.navigate).toHaveBeenCalledWith('Login');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,