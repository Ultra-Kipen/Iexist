2fd62cbf0f8fe5eda66de299900318df
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withAuth = void 0;
var _react = _interopRequireWildcard(require("react"));
var _native = require("@react-navigation/native");
var _store = require("../store");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var withAuth = exports.withAuth = function withAuth(WrappedComponent) {
  var WithAuth = function WithAuth(props) {
    var _useStore = (0, _store.useStore)(),
      state = _useStore.state;
    var navigation = (0, _native.useNavigation)();
    (0, _react.useEffect)(function () {
      if (!state.isAuthenticated) {
        navigation.navigate('Login');
      }
    }, [state.isAuthenticated, navigation]);
    if (!state.isAuthenticated) {
      return null;
    }
    return (0, _jsxRuntime.jsx)(WrappedComponent, Object.assign({}, props));
  };
  var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
  WithAuth.displayName = `withAuth(${wrappedComponentName})`;
  return WithAuth;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfbmF0aXZlIiwiX3N0b3JlIiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJ3aXRoQXV0aCIsImV4cG9ydHMiLCJXcmFwcGVkQ29tcG9uZW50IiwiV2l0aEF1dGgiLCJwcm9wcyIsIl91c2VTdG9yZSIsInVzZVN0b3JlIiwic3RhdGUiLCJuYXZpZ2F0aW9uIiwidXNlTmF2aWdhdGlvbiIsInVzZUVmZmVjdCIsImlzQXV0aGVudGljYXRlZCIsIm5hdmlnYXRlIiwianN4IiwiYXNzaWduIiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJkaXNwbGF5TmFtZSIsIm5hbWUiXSwic291cmNlcyI6WyJ3aXRoQXV0aC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlTmF2aWdhdGlvbiB9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi4vc3RvcmUnO1xyXG5cclxuLyoqXHJcbiAqIOyduOymneydtCDtlYTsmpTtlZwg7Lu07Y+s64SM7Yq466W8IOuemO2Vke2VmOuKlCBIT0NcclxuICog7J247Kad65CY7KeAIOyViuydgCDsgqzsmqnsnpDripQg66Gc6re47J24IO2ZlOuptOycvOuhnCDrpqzrlJTroInshZhcclxuICogQHBhcmFtIFdyYXBwZWRDb21wb25lbnQg656Y7ZWR7ZWgIOy7tO2PrOuEjO2KuFxyXG4gKiBAcmV0dXJucyDsnbjspp0g66Gc7KeB7J20IOy2lOqwgOuQnCDsg4gg7Lu07Y+s64SM7Yq4XHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgd2l0aEF1dGggPSA8UCBleHRlbmRzIG9iamVjdD4oXHJcbiAgV3JhcHBlZENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPlxyXG4pID0+IHtcclxuICBjb25zdCBXaXRoQXV0aDogUmVhY3QuRkM8UD4gPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHVzZVN0b3JlKCk7XHJcbiAgICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbigpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIGlmICghc3RhdGUuaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgICAgLy8g7J247Kad65CY7KeAIOyViuydgCDqsr3smrAg66Gc6re47J24IO2ZlOuptOycvOuhnCDsnbTrj5lcclxuICAgICAgICBuYXZpZ2F0aW9uLm5hdmlnYXRlKCdMb2dpbicgYXMgbmV2ZXIpO1xyXG4gICAgICB9XHJcbiAgICB9LCBbc3RhdGUuaXNBdXRoZW50aWNhdGVkLCBuYXZpZ2F0aW9uXSk7XHJcblxyXG4gICAgLy8g7J247Kad65CY7KeAIOyViuyVmOuLpOuptCBudWxsIOuwmO2ZmCAo66CM642U66eBIOuwqeyngClcclxuICAgIGlmICghc3RhdGUuaXNBdXRoZW50aWNhdGVkKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOyduOymneuQnCDqsr3smrAg7JuQ656YIOy7tO2PrOuEjO2KuCDroIzrjZTrp4FcclxuICAgIHJldHVybiA8V3JhcHBlZENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xyXG4gIH07XHJcblxyXG4gIC8vIOy7tO2PrOuEjO2KuCDrlJTsiqTtlIzroIjsnbQg7J2066aEIOyEpOyglSAo65SU67KE6rmF7JqpKVxyXG4gIGNvbnN0IHdyYXBwZWRDb21wb25lbnROYW1lID0gXHJcbiAgICBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFxyXG4gICAgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8IFxyXG4gICAgJ0NvbXBvbmVudCc7XHJcbiAgICBcclxuICBXaXRoQXV0aC5kaXNwbGF5TmFtZSA9IGB3aXRoQXV0aCgke3dyYXBwZWRDb21wb25lbnROYW1lfSlgO1xyXG5cclxuICByZXR1cm4gV2l0aEF1dGg7XHJcbn07Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQW9DLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUFBLFNBQUFJLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBTix3QkFBQU0sQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFRN0IsSUFBTVcsUUFBUSxHQUFBQyxPQUFBLENBQUFELFFBQUEsR0FBRyxTQUFYQSxRQUFRQSxDQUNuQkUsZ0JBQXdDLEVBQ3JDO0VBQ0gsSUFBTUMsUUFBcUIsR0FBRyxTQUF4QkEsUUFBcUJBLENBQUlDLEtBQUssRUFBSztJQUN2QyxJQUFBQyxTQUFBLEdBQWtCLElBQUFDLGVBQVEsRUFBQyxDQUFDO01BQXBCQyxLQUFLLEdBQUFGLFNBQUEsQ0FBTEUsS0FBSztJQUNiLElBQU1DLFVBQVUsR0FBRyxJQUFBQyxxQkFBYSxFQUFDLENBQUM7SUFFbEMsSUFBQUMsZ0JBQVMsRUFBQyxZQUFNO01BQ2QsSUFBSSxDQUFDSCxLQUFLLENBQUNJLGVBQWUsRUFBRTtRQUUxQkgsVUFBVSxDQUFDSSxRQUFRLENBQUMsT0FBZ0IsQ0FBQztNQUN2QztJQUNGLENBQUMsRUFBRSxDQUFDTCxLQUFLLENBQUNJLGVBQWUsRUFBRUgsVUFBVSxDQUFDLENBQUM7SUFHdkMsSUFBSSxDQUFDRCxLQUFLLENBQUNJLGVBQWUsRUFBRTtNQUMxQixPQUFPLElBQUk7SUFDYjtJQUdBLE9BQU8sSUFBQWhDLFdBQUEsQ0FBQWtDLEdBQUEsRUFBQ1gsZ0JBQWdCLEVBQUFWLE1BQUEsQ0FBQXNCLE1BQUEsS0FBS1YsS0FBSyxDQUFHLENBQUM7RUFDeEMsQ0FBQztFQUdELElBQU1XLG9CQUFvQixHQUN4QmIsZ0JBQWdCLENBQUNjLFdBQVcsSUFDNUJkLGdCQUFnQixDQUFDZSxJQUFJLElBQ3JCLFdBQVc7RUFFYmQsUUFBUSxDQUFDYSxXQUFXLEdBQUcsWUFBWUQsb0JBQW9CLEdBQUc7RUFFMUQsT0FBT1osUUFBUTtBQUNqQixDQUFDIiwiaWdub3JlTGlzdCI6W119