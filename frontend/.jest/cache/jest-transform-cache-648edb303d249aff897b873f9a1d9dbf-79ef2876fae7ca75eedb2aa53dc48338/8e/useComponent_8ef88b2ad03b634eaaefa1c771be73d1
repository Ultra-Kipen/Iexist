81e70865514ac5d588e7e31036491281
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useComponent = useComponent;
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var NavigationContent = function NavigationContent(_ref) {
  var render = _ref.render,
    children = _ref.children;
  return render(children);
};
function useComponent(render) {
  var renderRef = React.useRef(render);
  renderRef.current = render;
  React.useEffect(function () {
    renderRef.current = null;
  });
  return React.useRef(function (_ref2) {
    var children = _ref2.children;
    var render = renderRef.current;
    if (render === null) {
      throw new Error('The returned component must be rendered in the same render phase as the hook.');
    }
    return (0, _jsxRuntime.jsx)(NavigationContent, {
      render: render,
      children: children
    });
  }).current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiTmF2aWdhdGlvbkNvbnRlbnQiLCJfcmVmIiwicmVuZGVyIiwiY2hpbGRyZW4iLCJ1c2VDb21wb25lbnQiLCJyZW5kZXJSZWYiLCJ1c2VSZWYiLCJjdXJyZW50IiwidXNlRWZmZWN0IiwiX3JlZjIiLCJFcnJvciIsIl9qc3giXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXNlQ29tcG9uZW50LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQStCLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUFBLFNBQUFFLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSix3QkFBQUksQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFTL0IsSUFBTVcsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBQUMsSUFBQSxFQUFvQztFQUFBLElBQTlCQyxNQUFNLEdBQUFELElBQUEsQ0FBTkMsTUFBTTtJQUFFQyxRQUFBLEdBQUFGLElBQUEsQ0FBQUUsUUFBQTtFQUNuQyxPQUFPRCxNQUFNLENBQUNDLFFBQVEsQ0FBQztBQUN6QixDQUFDO0FBRU0sU0FBU0MsWUFBWUEsQ0FBQ0YsTUFBYyxFQUFFO0VBQzNDLElBQU1HLFNBQVMsR0FBRzdCLEtBQUssQ0FBQzhCLE1BQU0sQ0FBZ0JKLE1BQU0sQ0FBQztFQUtyREcsU0FBUyxDQUFDRSxPQUFPLEdBQUdMLE1BQU07RUFFMUIxQixLQUFLLENBQUNnQyxTQUFTLENBQUMsWUFBTTtJQUNwQkgsU0FBUyxDQUFDRSxPQUFPLEdBQUcsSUFBSTtFQUMxQixDQUFDLENBQUM7RUFFRixPQUFPL0IsS0FBSyxDQUFDOEIsTUFBTSxDQUFDLFVBQUFHLEtBQUEsRUFBaUQ7SUFBQSxJQUE5Q04sUUFBQSxHQUFBTSxLQUFBLENBQUFOLFFBQUE7SUFDckIsSUFBTUQsTUFBTSxHQUFHRyxTQUFTLENBQUNFLE9BQU87SUFFaEMsSUFBSUwsTUFBTSxLQUFLLElBQUksRUFBRTtNQUNuQixNQUFNLElBQUlRLEtBQUssQ0FDYiwrRUFDRixDQUFDO0lBQ0g7SUFFQSxPQUFPLElBQUFDLGVBQUEsRUFBQ1gsaUJBQWlCO01BQUNFLE1BQU0sRUFBRUEsTUFBTztNQUFBQyxRQUFBLEVBQUVBO0lBQVEsQ0FBb0IsQ0FBQztFQUMxRSxDQUFDLENBQUMsQ0FBQ0ksT0FBTztBQUNaIiwiaWdub3JlTGlzdCI6W119