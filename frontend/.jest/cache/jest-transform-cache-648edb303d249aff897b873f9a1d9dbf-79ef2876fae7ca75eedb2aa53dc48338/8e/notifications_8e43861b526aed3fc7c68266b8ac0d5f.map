{"version":3,"names":["_index","require","_error","fetchNotifications","exports","_ref","_asyncToGenerator2","default","dispatch","type","ActionType","SET_LOADING","payload","response","fetch","method","headers","ok","Error","data","json","forEach","notification","ADD_NOTIFICATION","error","appError","handleApiError","SET_ERROR","message","_x","apply","arguments","markNotificationAsRead","_ref2","notificationId","REMOVE_NOTIFICATION","updatedNotification","_x2","_x3","markAllNotificationsAsRead","_ref3","CLEAR_NOTIFICATIONS","updatedNotifications","_x4","deleteNotification","_ref4","_x5","_x6"],"sources":["notifications.ts"],"sourcesContent":["import { Dispatch } from 'react';\r\nimport { Action, ActionType } from './index';\r\nimport { handleApiError } from '../utils/error';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  content: string;\r\n  notificationType: 'like' | 'comment' | 'challenge' | 'system';\r\n  relatedId?: number;\r\n  isRead: boolean;\r\n  createdAt: string;\r\n}\r\n\r\n// 알림 목록 가져오기\r\nexport const fetchNotifications = async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    \r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch('/api/notifications', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 토큰 추가\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('알림을 가져오는데 실패했습니다.');\r\n    }\r\n    \r\n    const data: Notification[] = await response.json();\r\n    \r\n    // 각 알림을 추가\r\n    data.forEach(notification => {\r\n      dispatch({\r\n        type: ActionType.ADD_NOTIFICATION,\r\n        payload: notification,\r\n      });\r\n    });\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    const appError = handleApiError(error as any);\r\n    dispatch({ type: ActionType.SET_ERROR, payload: appError.message });\r\n    throw appError;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};\r\n\r\n// 알림 읽음 표시\r\nexport const markNotificationAsRead = async (\r\n  dispatch: Dispatch<Action>,\r\n  notificationId: string\r\n) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    \r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch(`/api/notifications/${notificationId}/read`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 토큰 추가\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('알림을 읽음 표시하는데 실패했습니다.');\r\n    }\r\n    \r\n    // 알림 상태 업데이트 (실제로는 받아온 업데이트된 알림으로 대체해야 함)\r\n    dispatch({\r\n      type: ActionType.REMOVE_NOTIFICATION,\r\n      payload: notificationId,\r\n    });\r\n    \r\n    const updatedNotification = await response.json();\r\n    dispatch({\r\n      type: ActionType.ADD_NOTIFICATION,\r\n      payload: updatedNotification,\r\n    });\r\n    \r\n    return updatedNotification;\r\n  } catch (error) {\r\n    const appError = handleApiError(error as any);\r\n    dispatch({ type: ActionType.SET_ERROR, payload: appError.message });\r\n    throw appError;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};\r\n\r\n// 모든 알림 읽음 표시\r\nexport const markAllNotificationsAsRead = async (dispatch: Dispatch<Action>) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    \r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch('/api/notifications/read-all', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 토큰 추가\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('모든 알림을 읽음 표시하는데 실패했습니다.');\r\n    }\r\n    \r\n    // 상태 초기화 후 새로운 알림 목록 설정\r\n    dispatch({ type: ActionType.CLEAR_NOTIFICATIONS });\r\n    \r\n    const updatedNotifications = await response.json();\r\n    updatedNotifications.forEach((notification: Notification) => {\r\n      dispatch({\r\n        type: ActionType.ADD_NOTIFICATION,\r\n        payload: notification,\r\n      });\r\n    });\r\n    \r\n    return updatedNotifications;\r\n  } catch (error) {\r\n    const appError = handleApiError(error as any);\r\n    dispatch({ type: ActionType.SET_ERROR, payload: appError.message });\r\n    throw appError;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};\r\n\r\n// 알림 삭제\r\nexport const deleteNotification = async (\r\n  dispatch: Dispatch<Action>,\r\n  notificationId: string\r\n) => {\r\n  try {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: true });\r\n    \r\n    // API 호출을 위한 실제 코드로 대체해야 합니다\r\n    const response = await fetch(`/api/notifications/${notificationId}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // 토큰 추가\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('알림을 삭제하는데 실패했습니다.');\r\n    }\r\n    \r\n    // 상태에서 알림 제거\r\n    dispatch({\r\n      type: ActionType.REMOVE_NOTIFICATION,\r\n      payload: notificationId,\r\n    });\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    const appError = handleApiError(error as any);\r\n    dispatch({ type: ActionType.SET_ERROR, payload: appError.message });\r\n    throw appError;\r\n  } finally {\r\n    dispatch({ type: ActionType.SET_LOADING, payload: false });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]}