5358967df8129772487b70fbf61485e1
_getJestObj().mock("../../src/hooks/useTheme", function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#ffffff'
          },
          dark: false
        }
      };
    }
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  var React = require('react');
  var ReactNative = require('react-native');
  return {
    __esModule: true,
    default: function _default() {
      return React.createElement(ReactNative.View, {
        testID: 'loading-indicator'
      });
    }
  };
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Button: function Button(_ref) {
      var onPress = _ref.onPress,
        title = _ref.title,
        testID = _ref.testID;
      return (0, _jsxRuntime.jsx)(RN.View, {
        testID: testID || 'button',
        children: (0, _jsxRuntime.jsx)(RN.Text, {
          onPress: onPress,
          children: title
        })
      });
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _FormLayout = _interopRequireDefault(require("../../src/layouts/FormLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('FormLayout', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('폼 내용')).toBeTruthy();
  });
  it('shows loading indicator when loading is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByTestId = _render2.getByTestId,
      queryByText = _render2.queryByText;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    expect(queryByText('폼 내용')).toBeNull();
  });
  it('renders header and footer when provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        header: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uD5E4\uB354"
        }),
        footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uD478\uD130"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByText = _render3.getByText;
    expect(getByText('폼 헤더')).toBeTruthy();
    expect(getByText('폼 푸터')).toBeTruthy();
    expect(getByText('폼 내용')).toBeTruthy();
  });
  it('calls onSubmit when form is submitted via footer button', function () {
    var onSubmitMock = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        onSubmit: onSubmitMock,
        footer: (0, _jsxRuntime.jsx)(_reactNative2.Button, {
          testID: "submit-button",
          title: "\uC81C\uCD9C",
          onPress: onSubmitMock
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    _reactNative.fireEvent.press(getByText('제출'));
    expect(onSubmitMock).toHaveBeenCalledTimes(1);
  });
  it('renders without KeyboardAvoidingView when avoidKeyboard is false', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        avoidKeyboard: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('폼 내용')).toBeTruthy();
  });
  it('applies custom style when provided', function () {
    var customStyle = {
      backgroundColor: 'red'
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        style: customStyle,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByText = _render6.getByText;
    expect(getByText('폼 내용')).toBeTruthy();
  });
  it('applies custom contentContainerStyle when provided', function () {
    var customContentContainerStyle = {
      padding: 20
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        contentContainerStyle: customContentContainerStyle,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByText = _render7.getByText;
    expect(getByText('폼 내용')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VUaGVtZSIsInRoZW1lIiwiY29sb3JzIiwiYmFja2dyb3VuZCIsImRhcmsiLCJSZWFjdCIsInJlcXVpcmUiLCJSZWFjdE5hdGl2ZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJ0ZXN0SUQiLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiQnV0dG9uIiwiX3JlZiIsIm9uUHJlc3MiLCJ0aXRsZSIsIl9qc3hSdW50aW1lIiwianN4IiwiY2hpbGRyZW4iLCJUZXh0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfRm9ybUxheW91dCIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJsb2FkaW5nIiwiZ2V0QnlUZXN0SWQiLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIiwiX3JlbmRlcjMiLCJoZWFkZXIiLCJmb290ZXIiLCJvblN1Ym1pdE1vY2siLCJmbiIsIl9yZW5kZXI0Iiwib25TdWJtaXQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZW5kZXI1IiwiYXZvaWRLZXlib2FyZCIsImN1c3RvbVN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiX3JlbmRlcjYiLCJzdHlsZSIsImN1c3RvbUNvbnRlbnRDb250YWluZXJTdHlsZSIsInBhZGRpbmciLCJfcmVuZGVyNyIsImNvbnRlbnRDb250YWluZXJTdHlsZSJdLCJzb3VyY2VzIjpbIkZvcm1MYXlvdXQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGVzdHMvbGF5b3V0cy9Gb3JtTGF5b3V0LnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBUZXh0LCBCdXR0b24sIFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgRm9ybUxheW91dCBmcm9tICcuLi8uLi9zcmMvbGF5b3V0cy9Gb3JtTGF5b3V0JztcclxuXHJcbi8vIHVzZVRoZW1lIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9ob29rcy91c2VUaGVtZScsICgpID0+ICh7XHJcbiAgdXNlVGhlbWU6ICgpID0+ICh7XHJcbiAgICB0aGVtZToge1xyXG4gICAgICBjb2xvcnM6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZmZmZicsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRhcms6IGZhbHNlLFxyXG4gICAgfSxcclxuICB9KSxcclxufSkpO1xyXG5cclxuLy8gTG9hZGluZ0luZGljYXRvciDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nSW5kaWNhdG9yJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuICBjb25zdCBSZWFjdE5hdGl2ZSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIHJldHVybiB7XHJcbiAgICBfX2VzTW9kdWxlOiB0cnVlLFxyXG4gICAgZGVmYXVsdDogKCkgPT4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdE5hdGl2ZS5WaWV3LCB7IHRlc3RJRDogJ2xvYWRpbmctaW5kaWNhdG9yJyB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbi8vIEJ1dHRvbiDsu7Ttj6zrhIztirjrpbwg66qo7YK57ZWY7JesIO2FjOyKpO2KuCDqsIDriqXtlZjqsowg66eM65OmXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJOID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKTtcclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgLi4uUk4sXHJcbiAgICBCdXR0b246ICh7IG9uUHJlc3MsIHRpdGxlLCB0ZXN0SUQgfSkgPT4gKFxyXG4gICAgICA8Uk4uVmlldyB0ZXN0SUQ9e3Rlc3RJRCB8fCAnYnV0dG9uJ30+XHJcbiAgICAgICAgPFJOLlRleHQgb25QcmVzcz17b25QcmVzc30+e3RpdGxlfTwvUk4uVGV4dD5cclxuICAgICAgPC9STi5WaWV3PlxyXG4gICAgKSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdGb3JtTGF5b3V0JywgKCkgPT4ge1xyXG4gIGl0KCdyZW5kZXJzIGNoaWxkcmVuIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxGb3JtTGF5b3V0PlxyXG4gICAgICAgIDxUZXh0Pu2PvCDrgrTsmqk8L1RleHQ+XHJcbiAgICAgIDwvRm9ybUxheW91dD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2PvCDrgrTsmqknKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdzaG93cyBsb2FkaW5nIGluZGljYXRvciB3aGVuIGxvYWRpbmcgaXMgdHJ1ZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxGb3JtTGF5b3V0IGxvYWRpbmc9e3RydWV9PlxyXG4gICAgICAgIDxUZXh0Pu2PvCDrgrTsmqk8L1RleHQ+XHJcbiAgICAgIDwvRm9ybUxheW91dD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnbG9hZGluZy1pbmRpY2F0b3InKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCftj7wg64K07JqpJykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3JlbmRlcnMgaGVhZGVyIGFuZCBmb290ZXIgd2hlbiBwcm92aWRlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxGb3JtTGF5b3V0XHJcbiAgICAgICAgaGVhZGVyPXs8VGV4dD7tj7wg7Zek642UPC9UZXh0Pn1cclxuICAgICAgICBmb290ZXI9ezxUZXh0Pu2PvCDtkbjthLA8L1RleHQ+fVxyXG4gICAgICA+XHJcbiAgICAgICAgPFRleHQ+7Y+8IOuCtOyaqTwvVGV4dD5cclxuICAgICAgPC9Gb3JtTGF5b3V0PlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7Y+8IO2XpOuNlCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCftj7wg7ZG47YSwJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2PvCDrgrTsmqknKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdjYWxscyBvblN1Ym1pdCB3aGVuIGZvcm0gaXMgc3VibWl0dGVkIHZpYSBmb290ZXIgYnV0dG9uJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgb25TdWJtaXRNb2NrID0gamVzdC5mbigpO1xyXG4gICAgXHJcbiAgICAvLyB0ZXN0SUTrpbwg7LaU6rCA7ZWY7JesIOuyhO2KvOydhCDssL7quLAg7Im96rKMIO2VqFxyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxGb3JtTGF5b3V0XHJcbiAgICAgICAgb25TdWJtaXQ9e29uU3VibWl0TW9ja31cclxuICAgICAgICBmb290ZXI9ezxCdXR0b24gdGVzdElEPVwic3VibWl0LWJ1dHRvblwiIHRpdGxlPVwi7KCc7LacXCIgb25QcmVzcz17b25TdWJtaXRNb2NrfSAvPn1cclxuICAgICAgPlxyXG4gICAgICAgIDxUZXh0Pu2PvCDrgrTsmqk8L1RleHQ+XHJcbiAgICAgIDwvRm9ybUxheW91dD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIO2FjeyKpO2KuOuhnCDrsoTtirzsnYQg7LC+7JWEIO2BtOumrVxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgn7KCc7LacJykpO1xyXG4gICAgZXhwZWN0KG9uU3VibWl0TW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gICAgXHJcbiAgICAvLyDrmJDripQgdGVzdElE66GcIOuyhO2KvOydhCDssL7snYQg7IiY64+EIOyeiOydjFxyXG4gICAgLy8gY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ3N1Ym1pdC1idXR0b24nKTtcclxuICAgIC8vIGZpcmVFdmVudC5wcmVzcyhzdWJtaXRCdXR0b24pO1xyXG4gICAgLy8gZXhwZWN0KG9uU3VibWl0TW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdyZW5kZXJzIHdpdGhvdXQgS2V5Ym9hcmRBdm9pZGluZ1ZpZXcgd2hlbiBhdm9pZEtleWJvYXJkIGlzIGZhbHNlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEZvcm1MYXlvdXQgYXZvaWRLZXlib2FyZD17ZmFsc2V9PlxyXG4gICAgICAgIDxUZXh0Pu2PvCDrgrTsmqk8L1RleHQ+XHJcbiAgICAgIDwvRm9ybUxheW91dD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2PvCDrgrTsmqknKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdhcHBsaWVzIGN1c3RvbSBzdHlsZSB3aGVuIHByb3ZpZGVkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgY3VzdG9tU3R5bGUgPSB7IGJhY2tncm91bmRDb2xvcjogJ3JlZCcgfTtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxGb3JtTGF5b3V0IHN0eWxlPXtjdXN0b21TdHlsZX0+XHJcbiAgICAgICAgPFRleHQ+7Y+8IOuCtOyaqTwvVGV4dD5cclxuICAgICAgPC9Gb3JtTGF5b3V0PlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7Y+8IOuCtOyaqScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2FwcGxpZXMgY3VzdG9tIGNvbnRlbnRDb250YWluZXJTdHlsZSB3aGVuIHByb3ZpZGVkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgY3VzdG9tQ29udGVudENvbnRhaW5lclN0eWxlID0geyBwYWRkaW5nOiAyMCB9O1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEZvcm1MYXlvdXQgY29udGVudENvbnRhaW5lclN0eWxlPXtjdXN0b21Db250ZW50Q29udGFpbmVyU3R5bGV9PlxyXG4gICAgICAgIDxUZXh0Pu2PvCDrgrTsmqk8L1RleHQ+XHJcbiAgICAgIDwvRm9ybUxheW91dD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2PvCDrgrTsmqknKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksNkJBQTZCO0VBQUEsT0FBTztJQUMzQ0MsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQ2ZDLEtBQUssRUFBRTtVQUNMQyxNQUFNLEVBQUU7WUFDTkMsVUFBVSxFQUFFO1VBQ2QsQ0FBQztVQUNEQyxJQUFJLEVBQUU7UUFDUjtNQUNGLENBQUM7SUFBQTtFQUNILENBQUM7QUFBQSxDQUFDLENBQUM7QUFHSE4sV0FBQSxHQUFLQyxJQUFJLDBDQUEwQyxZQUFNO0VBQ3ZELElBQU1NLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUM5QixJQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxjQUFjLENBQUM7RUFDM0MsT0FBTztJQUNMRSxVQUFVLEVB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