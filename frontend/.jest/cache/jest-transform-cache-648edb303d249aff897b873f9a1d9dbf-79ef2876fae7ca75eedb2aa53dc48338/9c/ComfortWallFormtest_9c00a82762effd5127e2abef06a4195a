202ce4e32c38cbcc3cda45f7ec4405b6
_getJestObj().mock("../../src/components/TagSelector", function () {
  return function MockTagSelector(props) {
    tagSelectorOnTagSelect = props.onTagSelect;
    return null;
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return function MockLoadingIndicator() {
    loadingIndicatorRendered = true;
    return null;
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortWallForm = _interopRequireDefault(require("../../src/components/ComfortWallForm"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
beforeEach(function () {
  jest.spyOn(_reactNative2.Alert, 'alert').mockClear();
});
var tagSelectorOnTagSelect = null;
var loadingIndicatorRendered = false;
describe('ComfortWallForm 컴포넌트', function () {
  var mockSubmit = jest.fn().mockResolvedValue(undefined);
  beforeEach(function () {
    jest.clearAllMocks();
    _reactNative2.Alert.alert.mockClear();
    tagSelectorOnTagSelect = null;
    loadingIndicatorRendered = false;
  });
  it('폼이 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render.getByPlaceholderText,
      getByText = _render.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    expect(titleInput).toBeDefined();
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    expect(contentInput).toBeDefined();
    var submitButton = getByText('작성 완료');
    expect(submitButton).toBeDefined();
    var anonymousText = getByText('익명으로 게시하기');
    expect(anonymousText).toBeDefined();
  });
  it('내용 입력 시 상태가 업데이트되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render2.getByPlaceholderText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다.');
    }));
    expect(titleInput.props.value).toBe('테스트 제목');
    expect(contentInput.props.value).toBe('테스트 내용입니다.');
  }));
  it('폼 제출 시 기본 익명 상태(true)로 제출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    mockSubmit.mockImplementation(function () {
      return Promise.resolve();
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render3.getByPlaceholderText,
      getByText = _render3.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(titleInput, '테스트 제목입니다');
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 최소 20자 이상이 필요합니다.');
    }));
    var submitButton = getByText('작성 완료');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalledWith({
      title: '테스트 제목입니다',
      content: '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 최소 20자 이상이 필요합니다.',
      is_anonymous: true,
      tag_ids: []
    });
  }));
  it('태그 선택이 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    mockSubmit.mockImplementation(function () {
      return Promise.resolve();
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render4.getByPlaceholderText,
      getByText = _render4.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(titleInput, '테스트 제목입니다');
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 최소 20자 이상이 필요합니다.');
    }));
    expect(tagSelectorOnTagSelect).toBeDefined();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      if (tagSelectorOnTagSelect) {
        tagSelectorOnTagSelect(1);
      }
    }));
    var submitButton = getByText('작성 완료');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalledWith({
      title: '테스트 제목입니다',
      content: '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 최소 20자 이상이 필요합니다.',
      is_anonymous: true,
      tag_ids: [1]
    });
  }));
  it('내용이 너무 짧으면 제출되지 않아야 함', (0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render5.getByPlaceholderText,
      getByText = _render5.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    _reactNative.fireEvent.changeText(titleInput, '충분히 긴 제목');
    _reactNative.fireEvent.changeText(contentInput, '짧은 내용');
    var submitButton = getByText('작성 완료');
    _reactNative.fireEvent.press(submitButton);
    expect(mockSubmit).not.toHaveBeenCalled();
  }));
  it('제목이 너무 짧으면 제출되지 않아야 함', (0, _asyncToGenerator2.default)(function* () {
    jest.clearAllMocks();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render6.getByPlaceholderText,
      getByText = _render6.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    _reactNative.fireEvent.changeText(titleInput, '짧');
    _reactNative.fireEvent.changeText(contentInput, '충분히 긴 내용입니다. 이 내용은 20자를 넘어야 합니다.');
    var submitButton = getByText('작성 완료');
    _reactNative.fireEvent.press(submitButton);
    expect(mockSubmit).not.toHaveBeenCalled();
  }));
  it('제출 실패 시 에러 처리가 되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockError = new Error('제출 실패');
    mockSubmit.mockRejectedValueOnce(mockError);
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render7.getByPlaceholderText,
      getByText = _render7.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    var contentInput = getByPlaceholderText('당신의 고민을 자유롭게 적어주세요 (20-2000자)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(titleInput, '테스트 제목입니다');
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 최소 20자 이상이 필요합니다.');
    }));
    var submitButton = getByText('작성 완료');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물 작성 중 문제가 발생했습니다. 다시 시도해주세요.');
    expect(titleInput.props.value).toBe('테스트 제목입니다');
    expect(contentInput.props.value).toBe('테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 최소 20자 이상이 필요합니다.');
  }));
  it('로딩 상태일 때 로딩 인디케이터가 표시되어야 함', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallForm.default, {
      onSubmit: mockSubmit,
      isLoading: true
    }));
    expect(loadingIndicatorRendered).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,