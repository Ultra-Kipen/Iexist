{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_slicedToArray2","_react","_reactNative","_reactNative2","_axios","_jsxRuntime","_require","jest","DataFetchingComponent","_React$useState","React","useState","_React$useState2","default","data","setData","_React$useState3","_React$useState4","loading","setLoading","_React$useState5","_React$useState6","error","setError","fetchData","_ref","response","axios","get","err","apply","arguments","jsxs","View","children","jsx","Text","testID","Button","title","onPress","JSON","stringify","disabled","describe","beforeEach","clearAllMocks","test","mockRejectedValueOnce","Error","_render","render","getByTestId","queryByTestId","fireEvent","press","expect","toBeTruthy","waitFor","toBeNull","mockResolvedValueOnce","message","_render2"],"sources":["NetworkRecovery.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\r\nimport { Text, Button, View } from 'react-native';\r\nimport axios from 'axios';\r\n\r\n// axios 모킹\r\njest.mock('axios');\r\n\r\n// 네트워크 오류 처리 및 재시도 로직을 테스트하기 위한 컴포넌트\r\nconst DataFetchingComponent = () => {\r\n  const [data, setData] = React.useState<any>(null);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = React.useState<string | null>(null);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const response = await axios.get('https://api.example.com/data');\r\n      setData(response.data);\r\n    } catch (err) {\r\n      setError('데이터를 불러오는 중 오류가 발생했습니다.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {loading && <Text testID=\"loading\">로딩 중...</Text>}\r\n      {error && (\r\n        <View testID=\"error-view\">\r\n          <Text>{error}</Text>\r\n          <Button title=\"다시 시도\" onPress={fetchData} testID=\"retry-button\" />\r\n        </View>\r\n      )}\r\n      {data && <Text testID=\"data\">{JSON.stringify(data)}</Text>}\r\n      <Button\r\n        title=\"데이터 가져오기\"\r\n        onPress={fetchData}\r\n        disabled={loading}\r\n        testID=\"fetch-button\"\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('네트워크 오류 복구 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('네트워크 오류 발생 시 오류 메시지와 재시도 버튼을 표시해야 함', async () => {\r\n    // 첫 번째 요청에서 네트워크 오류를 발생시킴\r\n    (axios.get as jest.Mock).mockRejectedValueOnce(new Error('Network Error'));\r\n    \r\n    const { getByTestId, queryByTestId } = render(<DataFetchingComponent />);\r\n    \r\n    // 데이터 가져오기 버튼 클릭\r\n    fireEvent.press(getByTestId('fetch-button'));\r\n    \r\n    // 로딩 상태 확인\r\n    expect(getByTestId('loading')).toBeTruthy();\r\n    \r\n    // 오류 메시지와 재시도 버튼이 표시되는지 확인\r\n    await waitFor(() => {\r\n      expect(queryByTestId('loading')).toBeNull();\r\n      expect(getByTestId('error-view')).toBeTruthy();\r\n      expect(getByTestId('retry-button')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  test('재시도 버튼 클릭 시 데이터를 성공적으로 가져와야 함', async () => {\r\n    // 첫 번째 요청에서는 오류를 발생시키고, 두 번째 요청에서는 성공을 반환\r\n    (axios.get as jest.Mock)\r\n      .mockRejectedValueOnce(new Error('Network Error'))\r\n      .mockResolvedValueOnce({ data: { message: '성공적으로 데이터를 불러왔습니다.' } });\r\n    \r\n    const { getByTestId, queryByTestId } = render(<DataFetchingComponent />);\r\n    \r\n    // 데이터 가져오기 버튼 클릭\r\n    fireEvent.press(getByTestId('fetch-button'));\r\n    \r\n    // 오류 발생 후 재시도 버튼이 표시되기를 기다림\r\n    await waitFor(() => {\r\n      expect(getByTestId('error-view')).toBeTruthy();\r\n    });\r\n    \r\n    // 재시도 버튼 클릭\r\n    fireEvent.press(getByTestId('retry-button'));\r\n    \r\n    // 로딩 상태 확인\r\n    expect(getByTestId('loading')).toBeTruthy();\r\n    \r\n    // 데이터가 성공적으로 로드되는지 확인\r\n    await waitFor(() => {\r\n      expect(queryByTestId('loading')).toBeNull();\r\n      expect(queryByTestId('error-view')).toBeNull();\r\n      expect(getByTestId('data')).toBeTruthy();\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}