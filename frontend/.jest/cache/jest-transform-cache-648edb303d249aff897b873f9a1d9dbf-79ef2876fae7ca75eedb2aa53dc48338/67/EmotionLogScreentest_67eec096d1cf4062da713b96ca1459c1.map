{"version":3,"names":["_getJestObj","mock","getAllEmotions","jest","fn","recordEmotions","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_emotionService","_require","spyOn","Alert","mockImplementation","mockNavigation","goBack","mockEmotionsResponse","data","status","emotion_id","name","icon","color","describe","beforeEach","clearAllMocks","emotionService","mockResolvedValue","it","default","result","expect","toHaveBeenCalled","toEqual","emotionData","emotion_ids","note","toHaveBeenCalledWith","errorResponse","response","message","mockRejectedValueOnce","toBe","error","toBeDefined","Array","isArray","emotion","toHaveProperty"],"sources":["EmotionLogScreen.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\nimport emotionService from '../../src/services/api/emotionService';\r\n\r\n// EmotionLogScreen 컴포넌트 자체를 모킹\r\njest.mock('../../src/screens/EmotionLogScreen', () => 'MockedEmotionLogScreen');\r\n\r\n// 서비스 모킹\r\njest.mock('../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn(),\r\n  recordEmotions: jest.fn()\r\n}));\r\n\r\n// Alert 모킹\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigation = { goBack: jest.fn() };\r\n\r\n// 목 데이터\r\nconst mockEmotionsResponse = {\r\n  data: {\r\n    status: 'success',\r\n    data: [\r\n      { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n      { emotion_id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' }\r\n    ]\r\n  }\r\n};\r\n\r\ndescribe('EmotionService API 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (emotionService.getAllEmotions as jest.Mock).mockResolvedValue(mockEmotionsResponse);\r\n    (emotionService.recordEmotions as jest.Mock).mockResolvedValue({ status: 200 });\r\n  });\r\n\r\n  // getAllEmotions API 테스트\r\n  it('getAllEmotions API가 올바르게 호출됨', async () => {\r\n    // API 호출\r\n    const result = await emotionService.getAllEmotions();\r\n    \r\n    // 결과 검증\r\n    expect(emotionService.getAllEmotions).toHaveBeenCalled();\r\n    expect(result).toEqual(mockEmotionsResponse);\r\n  });\r\n\r\n  // recordEmotions API 테스트\r\n  it('recordEmotions API가 올바른 파라미터와 함께 호출됨', async () => {\r\n    // 테스트 데이터\r\n    const emotionData = {\r\n      emotion_ids: [1, 2],\r\n      note: '오늘은 기분이 좋았어요.'\r\n    };\r\n    \r\n    // API 호출\r\n    await emotionService.recordEmotions(emotionData);\r\n    \r\n    // 결과 검증\r\n    expect(emotionService.recordEmotions).toHaveBeenCalledWith(emotionData);\r\n  });\r\n\r\n  // 오류 처리 테스트\r\n  it('API 오류가 올바르게 처리됨', async () => {\r\n    // 오류 시뮬레이션\r\n    const errorResponse = { \r\n      response: { \r\n        data: { message: '감정 기록 실패' } \r\n      } \r\n    };\r\n    (emotionService.recordEmotions as jest.Mock).mockRejectedValueOnce(errorResponse);\r\n    \r\n    // 오류 발생 확인\r\n    try {\r\n      const emotionData = { emotion_ids: [1] };\r\n      await emotionService.recordEmotions(emotionData);\r\n      // 이 줄이 실행되면 테스트 실패\r\n      expect(true).toBe(false); \r\n    } catch (error) {\r\n      // 오류 객체 확인\r\n      expect(error).toEqual(errorResponse);\r\n    }\r\n  });\r\n  \r\n  // 응답 형식 테스트\r\n  it('감정 데이터가 올바른 형식으로 반환됨', async () => {\r\n    // API 호출\r\n    const result = await emotionService.getAllEmotions();\r\n    \r\n    // 결과 검증 - 데이터 구조 확인\r\n    expect(result.data).toBeDefined();\r\n    expect(result.data.status).toBe('success');\r\n    expect(Array.isArray(result.data.data)).toBe(true);\r\n    \r\n    // 첫 번째 감정 객체 검증\r\n    const emotion = result.data.data[0];\r\n    expect(emotion).toHaveProperty('emotion_id');\r\n    expect(emotion).toHaveProperty('name');\r\n    expect(emotion).toHaveProperty('icon');\r\n    expect(emotion).toHaveProperty('color');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}