ada328a715f006cd95d1c5257a792d0f
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/goalService", function () {
  return {
    getGoals: jest.fn(),
    createGoal: jest.fn(),
    deleteGoal: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/datetimepicker', function () {
  return {
    __esModule: true,
    default: function MockDateTimePicker() {
      return null;
    },
    display: {
      default: 'default',
      spinner: 'spinner',
      calendar: 'calendar',
      clock: 'clock'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyGoalsScreen = _interopRequireDefault(require("../../src/screens/MyGoalsScreen"));
var _goalService = _interopRequireDefault(require("../../src/services/api/goalService"));
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoals = [{
  goal_id: 1,
  target_emotion_id: 1,
  emotion_name: '행복',
  emotion_color: '#FFD700',
  start_date: '2025-03-01',
  end_date: '2025-04-30',
  progress: 60
}, {
  goal_id: 2,
  target_emotion_id: 2,
  emotion_name: '편안함',
  emotion_color: '#32CD32',
  start_date: '2025-03-15',
  end_date: '2025-05-15',
  progress: 30
}];
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '편안함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
describe('MyGoalsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _goalService.default.getGoals.mockResolvedValue({
      data: {
        data: mockGoals
      }
    });
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        data: mockEmotions
      }
    });
  });
  it('renders loading state initially', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {}));
    expect(_reactNative.screen.getByTestId('loading-indicator')).toBeTruthy();
  });
  it('renders goals list correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      getByText = _render.getByText,
      findByText = _render.findByText;
    yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
      expect(yield findByText('나의 감정 목표')).toBeTruthy();
      expect(yield findByText(/행복/)).toBeTruthy();
      expect(yield findByText(/편안함/)).toBeTruthy();
      expect(yield findByText(/60%/)).toBeTruthy();
      expect(yield findByText(/30%/)).toBeTruthy();
    }), {
      timeout: 10000
    });
  }));
  it('shows empty state when no goals', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockResolvedValue({
      data: {
        data: []
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render2.findByText;
    yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
      expect(yield findByText('아직 설정된 감정 목표가 없습니다.')).toBeTruthy();
      expect(yield findByText('새 목표 추가하기')).toBeTruthy();
    }), {
      timeout: 10000
    });
  }));
  it('toggles create form visibility', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render3.findByText,
      queryByText = _render3.queryByText;
    var addButton = yield findByText('새 목표 추가');
    _reactNative.fireEvent.press(addButton);
    expect(yield findByText('새 감정 목표 생성')).toBeTruthy();
    var cancelButton = yield findByText('취소');
    _reactNative.fireEvent.press(cancelButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('새 감정 목표 생성')).toBeNull();
    });
  }));
  it('validates emotion selection on form submission', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.createGoal.mockImplementation(function () {
      throw new Error('이 함수는 호출되면 안됩니다');
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render4.findByText;
    var addButton = yield findByText('새 목표 추가');
    _reactNative.fireEvent.press(addButton);
    var formTitle = yield findByText('새 감정 목표 생성');
    expect(formTitle).toBeTruthy();
    var submitButton = yield findByText('목표 생성하기');
    _reactNative.fireEvent.press(submitButton);
    expect(_goalService.default.createGoal).not.toHaveBeenCalled();
    yield (0, _reactNative.waitFor)(function () {
      expect(formTitle).toBeTruthy();
    });
  }));
  it('submits form successfully', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.createGoal.mockResolvedValue({
      data: {
        data: {
          goal_id: 3,
          target_emotion_id: 1,
          emotion_name: '행복',
          emotion_color: '#FFD700',
          start_date: '2025-04-01',
          end_date: '2025-05-01',
          progress: 0
        }
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render5.findByText,
      getAllByText = _render5.getAllByText,
      queryByText = _render5.queryByText;
    var addButton = yield findByText('새 목표 추가');
    _reactNative.fireEvent.press(addButton);
    yield findByText('새 감정 목표 생성');
    var happyButtons = yield (0, _reactNative.waitFor)(function () {
      return getAllByText(/행복/);
    });
    _reactNative.fireEvent.press(happyButtons[0]);
    var submitButton = yield findByText('목표 생성하기');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_goalService.default.createGoal).toHaveBeenCalled();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('새 감정 목표 생성')).toBeNull();
    });
  }));
  it('handles goal deletion', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.deleteGoal.mockResolvedValue({
      data: {
        success: true
      }
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render6.findByText,
      findAllByTestId = _render6.findAllByTestId;
    yield findByText('나의 감정 목표');
    var deleteButtons = yield findAllByTestId('delete-goal-button');
    expect(deleteButtons.length).toBeGreaterThan(0);
    _reactNative.fireEvent.press(deleteButtons[0]);
    expect(_goalService.default.deleteGoal).not.toHaveBeenCalled();
  }));
  it('shows error state when loading fails', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockRejectedValue(new Error('네트워크 오류'));
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render7.findByText;
    yield (0, _reactNative.waitFor)((0, _asyncToGenerator2.default)(function* () {
      expect(yield findByText('데이터를 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
      expect(yield findByText('다시 시도')).toBeTruthy();
    }));
  }));
  it('handles refresh', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockRejectedValueOnce(new Error('네트워크 오류')).mockResolvedValueOnce({
      data: {
        data: [Object.assign({}, mockGoals[0], {
          progress: 70
        }), Object.assign({}, mockGoals[1], {
          progress: 40
        })]
      }
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      findByText = _render8.findByText;
    var errorText = yield findByText('데이터를 불러오는 중 오류가 발생했습니다.');
    expect(errorText).toBeTruthy();
    var refreshButton = yield findByText('다시 시도');
    _reactNative.fireEvent.press(refreshButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_goalService.default.getGoals).toHaveBeenCalledTimes(2);
    });
    yield findByText('나의 감정 목표');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,