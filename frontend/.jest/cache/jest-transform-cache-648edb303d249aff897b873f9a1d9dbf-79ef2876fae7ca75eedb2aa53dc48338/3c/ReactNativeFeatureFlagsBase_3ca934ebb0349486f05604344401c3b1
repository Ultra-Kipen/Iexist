7dc583e926295da2e5b5147ea18fb77a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJavaScriptFlagGetter = createJavaScriptFlagGetter;
exports.createNativeFlagGetter = createNativeFlagGetter;
exports.getOverrides = getOverrides;
exports.setOverrides = setOverrides;
var _NativeReactNativeFeatureFlags = _interopRequireDefault(require("./specs/NativeReactNativeFeatureFlags"));
var accessedFeatureFlags = new Set();
var overrides;
function createGetter(configName, customValueGetter, defaultValue) {
  var cachedValue;
  return function () {
    if (cachedValue == null) {
      var _customValueGetter;
      cachedValue = (_customValueGetter = customValueGetter()) != null ? _customValueGetter : defaultValue;
    }
    return cachedValue;
  };
}
function createJavaScriptFlagGetter(configName, defaultValue) {
  return createGetter(configName, function () {
    var _overrides, _overrides$configName;
    accessedFeatureFlags.add(configName);
    return (_overrides = overrides) == null || (_overrides$configName = _overrides[configName]) == null ? void 0 : _overrides$configName.call(_overrides, defaultValue);
  }, defaultValue);
}
function createNativeFlagGetter(configName, defaultValue) {
  return createGetter(configName, function () {
    var _NativeReactNativeFea;
    var valueFromNative = _NativeReactNativeFeatureFlags.default == null || (_NativeReactNativeFea = _NativeReactNativeFeatureFlags.default[configName]) == null ? void 0 : _NativeReactNativeFea.call(_NativeReactNativeFeatureFlags.default);
    if (valueFromNative == null) {
      logUnavailableNativeModuleError(configName);
    }
    return valueFromNative;
  }, defaultValue);
}
function getOverrides() {
  return overrides;
}
function setOverrides(newOverrides) {
  if (overrides != null) {
    throw new Error('Feature flags cannot be overridden more than once');
  }
  if (accessedFeatureFlags.size > 0) {
    var accessedFeatureFlagsStr = Array.from(accessedFeatureFlags).join(', ');
    throw new Error(`Feature flags were accessed before being overridden: ${accessedFeatureFlagsStr}`);
  }
  overrides = newOverrides;
}
var reportedConfigNames = new Set();
function logUnavailableNativeModuleError(configName) {
  if (!reportedConfigNames.has(configName)) {
    reportedConfigNames.add(configName);
    console.error(`Could not access feature flag '${configName}' because native module method was not available`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImFjY2Vzc2VkRmVhdHVyZUZsYWdzIiwiU2V0Iiwib3ZlcnJpZGVzIiwiY3JlYXRlR2V0dGVyIiwiY29uZmlnTmFtZSIsImN1c3RvbVZhbHVlR2V0dGVyIiwiZGVmYXVsdFZhbHVlIiwiY2FjaGVkVmFsdWUiLCJfY3VzdG9tVmFsdWVHZXR0ZXIiLCJjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlciIsIl9vdmVycmlkZXMiLCJfb3ZlcnJpZGVzJGNvbmZpZ05hbWUiLCJhZGQiLCJjYWxsIiwiY3JlYXRlTmF0aXZlRmxhZ0dldHRlciIsIl9OYXRpdmVSZWFjdE5hdGl2ZUZlYSIsInZhbHVlRnJvbU5hdGl2ZSIsIk5hdGl2ZVJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzIiwibG9nVW5hdmFpbGFibGVOYXRpdmVNb2R1bGVFcnJvciIsImdldE92ZXJyaWRlcyIsInNldE92ZXJyaWRlcyIsIm5ld092ZXJyaWRlcyIsIkVycm9yIiwic2l6ZSIsImFjY2Vzc2VkRmVhdHVyZUZsYWdzU3RyIiwiQXJyYXkiLCJmcm9tIiwiam9pbiIsInJlcG9ydGVkQ29uZmlnTmFtZXMiLCJoYXMiLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlcyI6WyJSZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0Jhc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtcbiAgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHksXG4gIFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5T3ZlcnJpZGVzLFxufSBmcm9tICcuL1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzJztcblxuaW1wb3J0IE5hdGl2ZVJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzIGZyb20gJy4vc3BlY3MvTmF0aXZlUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MnO1xuXG5jb25zdCBhY2Nlc3NlZEZlYXR1cmVGbGFnczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG5sZXQgb3ZlcnJpZGVzOiA/UmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHlPdmVycmlkZXM7XG5cbmV4cG9ydCB0eXBlIEdldHRlcjxUPiA9ICgpID0+IFQ7XG5cbi8vIFRoaXMgZGVmaW5lcyB0aGUgdHlwZXMgZm9yIHRoZSBvdmVycmlkZXMgb2JqZWN0LCB3aG9zZSBtZXRob2RzIGFsc28gcmVjZWl2ZVxuLy8gdGhlIGRlZmF1bHQgdmFsdWUgYXMgYSBwYXJhbWV0ZXIuXG5leHBvcnQgdHlwZSBPdmVycmlkZXNGb3I8VD4gPSBQYXJ0aWFsPHtcbiAgW2tleSBpbiBrZXlvZiBUXTogKFJldHVyblR5cGU8VFtrZXldPikgPT4gUmV0dXJuVHlwZTxUW2tleV0+LFxufT47XG5cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlcjxUOiBib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nPihcbiAgY29uZmlnTmFtZTogc3RyaW5nLFxuICBjdXN0b21WYWx1ZUdldHRlcjogR2V0dGVyPD9UPixcbiAgZGVmYXVsdFZhbHVlOiBULFxuKTogR2V0dGVyPFQ+IHtcbiAgbGV0IGNhY2hlZFZhbHVlOiA/VDtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChjYWNoZWRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBjYWNoZWRWYWx1ZSA9IGN1c3RvbVZhbHVlR2V0dGVyKCkgPz8gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkVmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVKYXZhU2NyaXB0RmxhZ0dldHRlcjxcbiAgSzogJEtleXM8UmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHk+LFxuPihcbiAgY29uZmlnTmFtZTogSyxcbiAgZGVmYXVsdFZhbHVlOiBSZXR1cm5UeXBlPFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5W0tdPixcbik6IEdldHRlcjxSZXR1cm5UeXBlPFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzSnNPbmx5W0tdPj4ge1xuICByZXR1cm4gY3JlYXRlR2V0dGVyKFxuICAgIGNvbmZpZ05hbWUsXG4gICAgKCkgPT4ge1xuICAgICAgYWNjZXNzZWRGZWF0dXJlRmxhZ3MuYWRkKGNvbmZpZ05hbWUpO1xuICAgICAgcmV0dXJuIG92ZXJyaWRlcz8uW2NvbmZpZ05hbWVdPy4oZGVmYXVsdFZhbHVlKTtcbiAgICB9LFxuICAgIGRlZmF1bHRWYWx1ZSxcbiAgKTtcbn1cblxudHlwZSBOYXRpdmVGZWF0dXJlRmxhZ3MgPSAkTm9uTWF5YmVUeXBlPHR5cGVvZiBOYXRpdmVSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncz47XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOYXRpdmVGbGFnR2V0dGVyPEs6ICRLZXlzPE5hdGl2ZUZlYXR1cmVGbGFncz4+KFxuICBjb25maWdOYW1lOiBLLFxuICBkZWZhdWx0VmFsdWU6IFJldHVyblR5cGU8JE5vbk1heWJlVHlwZTxOYXRpdmVGZWF0dXJlRmxhZ3NbS10+Pixcbik6IEdldHRlcjxSZXR1cm5UeXBlPCROb25NYXliZVR5cGU8TmF0aXZlRmVhdHVyZUZsYWdzW0tdPj4+IHtcbiAgcmV0dXJuIGNyZWF0ZUdldHRlcihcbiAgICBjb25maWdOYW1lLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlRnJvbU5hdGl2ZSA9IE5hdGl2ZVJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzPy5bY29uZmlnTmFtZV0/LigpO1xuICAgICAgaWYgKHZhbHVlRnJvbU5hdGl2ZSA9PSBudWxsKSB7XG4gICAgICAgIGxvZ1VuYXZhaWxhYmxlTmF0aXZlTW9kdWxlRXJyb3IoY29uZmlnTmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWVGcm9tTmF0aXZlO1xuICAgIH0sXG4gICAgZGVmYXVsdFZhbHVlLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3ZlcnJpZGVzKCk6ID9SZWFjdE5hdGl2ZUZlYXR1cmVGbGFnc0pzT25seU92ZXJyaWRlcyB7XG4gIHJldHVybiBvdmVycmlkZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRPdmVycmlkZXMoXG4gIG5ld092ZXJyaWRlczogUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3NKc09ubHlPdmVycmlkZXMsXG4pOiB2b2lkIHtcbiAgaWYgKG92ZXJyaWRlcyAhPSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGZWF0dXJlIGZsYWdzIGNhbm5vdCBiZSBvdmVycmlkZGVuIG1vcmUgdGhhbiBvbmNlJyk7XG4gIH1cblxuICBpZiAoYWNjZXNzZWRGZWF0dXJlRmxhZ3Muc2l6ZSA+IDApIHtcbiAgICBjb25zdCBhY2Nlc3NlZEZlYXR1cmVGbGFnc1N0ciA9IEFycmF5LmZyb20oYWNjZXNzZWRGZWF0dXJlRmxhZ3MpLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEZlYXR1cmUgZmxhZ3Mgd2VyZSBhY2Nlc3NlZCBiZWZvcmUgYmVpbmcgb3ZlcnJpZGRlbjogJHthY2Nlc3NlZEZlYXR1cmVGbGFnc1N0cn1gLFxuICAgICk7XG4gIH1cblxuICBvdmVycmlkZXMgPSBuZXdPdmVycmlkZXM7XG59XG5cbmNvbnN0IHJlcG9ydGVkQ29uZmlnTmFtZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG5mdW5jdGlvbiBsb2dVbmF2YWlsYWJsZU5hdGl2ZU1vZHVsZUVycm9yKGNvbmZpZ05hbWU6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIXJlcG9ydGVkQ29uZmlnTmFtZXMuaGFzKGNvbmZpZ05hbWUpKSB7XG4gICAgcmVwb3J0ZWRDb25maWdOYW1lcy5hZGQoY29uZmlnTmFtZSk7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGBDb3VsZCBub3QgYWNjZXNzIGZlYXR1cmUgZmxhZyAnJHtjb25maWdOYW1lfScgYmVjYXVzZSBuYXRpdmUgbW9kdWxlIG1ldGhvZCB3YXMgbm90IGF2YWlsYWJsZWAsXG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQWVBLElBQUFBLDhCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFNQyxvQkFBaUMsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQztBQUNuRCxJQUFJQyxTQUFrRDtBQVV0RCxTQUFTQyxZQUFZQSxDQUNuQkMsVUFBa0IsRUFDbEJDLGlCQUE2QixFQUM3QkMsWUFBZSxFQUNKO0VBQ1gsSUFBSUMsV0FBZTtFQUVuQixPQUFPLFlBQU07SUFDWCxJQUFJQSxXQUFXLElBQUksSUFBSSxFQUFFO01BQUEsSUFBQUMsa0JBQUE7TUFDdkJELFdBQVcsSUFBQUMsa0JBQUEsR0FBR0gsaUJBQWlCLENBQUMsQ0FBQyxZQUFBRyxrQkFBQSxHQUFJRixZQUFZO0lBQ25EO0lBQ0EsT0FBT0MsV0FBVztFQUNwQixDQUFDO0FBQ0g7QUFFTyxTQUFTRSwwQkFBMEJBLENBR3hDTCxVQUFhLEVBQ2JFLFlBQTBELEVBQ0o7RUFDdEQsT0FBT0gsWUFBWSxDQUNqQkMsVUFBVSxFQUNWLFlBQU07SUFBQSxJQUFBTSxVQUFBLEVBQUFDLHFCQUFBO0lBQ0pYLG9CQUFvQixDQUFDWSxHQUFHLENBQUNSLFVBQVUsQ0FBQztJQUNwQyxRQUFBTSxVQUFBLEdBQU9SLFNBQVMsY0FBQVMscUJBQUEsR0FBVEQsVUFBQSxDQUFZTixVQUFVLENBQUMscUJBQXZCTyxxQkFBQSxDQUFBRSxJQUFBLENBQUFILFVBQUEsRUFBMEJKLFlBQVksQ0FBQztFQUNoRCxDQUFDLEVBQ0RBLFlBQ0YsQ0FBQztBQUNIO0FBSU8sU0FBU1Esc0JBQXNCQSxDQUNwQ1YsVUFBYSxFQUNiRSxZQUE4RCxFQUNKO0VBQzFELE9BQU9ILFlBQVksQ0FDakJDLFVBQVUsRUFDVixZQUFNO0lBQUEsSUFBQVcscUJBQUE7SUFDSixJQUFNQyxlQUFlLEdBQUdDLHNDQUE2QixhQUFBRixxQkFBQSxHQUE3QkUsc0NBQTZCLENBQUdiLFVBQVUsQ0FBQyxxQkFBM0NXLHFCQUFBLENBQUFGLElBQUEsQ0FBQUksc0NBQThDLENBQUM7SUFDdkUsSUFBSUQsZUFBZSxJQUFJLElBQUksRUFBRTtNQUMzQkUsK0JBQStCLENBQUNkLFVBQVUsQ0FBQztJQUM3QztJQUNBLE9BQU9ZLGVBQWU7RUFDeEIsQ0FBQyxFQUNEVixZQUNGLENBQUM7QUFDSDtBQUVPLFNBQVNhLFlBQVlBLENBQUEsRUFBNEM7RUFDdEUsT0FBT2pCLFNBQVM7QUFDbEI7QUFFTyxTQUFTa0IsWUFBWUEsQ0FDMUJDLFlBQW9ELEVBQzlDO0VBQ04sSUFBSW5CLFNBQVMsSUFBSSxJQUFJLEVBQUU7SUFDckIsTUFBTSxJQUFJb0IsS0FBSyxDQUFDLG1EQUFtRCxDQUFDO0VBQ3RFO0VBRUEsSUFBSXRCLG9CQUFvQixDQUFDdUIsSUFBSSxHQUFHLENBQUMsRUFBRTtJQUNqQyxJQUFNQyx1QkFBdUIsR0FBR0MsS0FBSyxDQUFDQyxJQUFJLENBQUMxQixvQkFBb0IsQ0FBQyxDQUFDMkIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMzRSxNQUFNLElBQUlMLEtBQUssQ0FDYix3REFBd0RFLHVCQUF1QixFQUNqRixDQUFDO0VBQ0g7RUFFQXRCLFNBQVMsR0FBR21CLFlBQVk7QUFDMUI7QUFFQSxJQUFNTyxtQkFBZ0MsR0FBRyxJQUFJM0IsR0FBRyxDQUFDLENBQUM7QUFFbEQsU0FBU2lCLCtCQUErQkEsQ0FBQ2QsVUFBa0IsRUFBUTtFQUNqRSxJQUFJLENBQUN3QixtQkFBbUIsQ0FBQ0MsR0FBRyxDQUFDekIsVUFBVSxDQUFDLEVBQUU7SUFDeEN3QixtQkFBbUIsQ0FBQ2hCLEdBQUcsQ0FBQ1IsVUFBVSxDQUFDO0lBQ25DMEIsT0FBTyxDQUFDQyxLQUFLLENBQ1gsa0NBQWtDM0IsVUFBVSxrREFDOUMsQ0FBQztFQUNIO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=