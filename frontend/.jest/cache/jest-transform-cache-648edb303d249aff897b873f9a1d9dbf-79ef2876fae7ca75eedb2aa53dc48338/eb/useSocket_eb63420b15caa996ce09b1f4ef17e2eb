3889092c4f1f10284ca68f3b617fa273
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSocket = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _socketService = _interopRequireDefault(require("../services/socketService"));
var useSocket = exports.useSocket = function useSocket() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$autoConnect = options.autoConnect,
    autoConnect = _options$autoConnect === void 0 ? true : _options$autoConnect,
    _options$events = options.events,
    events = _options$events === void 0 ? {} : _options$events;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isConnected = _useState2[0],
    setIsConnected = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var _useState5 = (0, _react.useState)(autoConnect),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var eventsRef = (0, _react.useRef)(events);
  var mountedRef = (0, _react.useRef)(true);
  var initialConnectRef = (0, _react.useRef)(autoConnect);
  (0, _react.useEffect)(function () {
    eventsRef.current = events;
  }, [events]);
  var safeSetState = (0, _react.useCallback)(function (setStateFn, value) {
    if (mountedRef.current) {
      setStateFn(value);
    }
  }, []);
  var handleConnect = (0, _react.useCallback)(function () {
    safeSetState(setIsConnected, true);
    safeSetState(setError, null);
    safeSetState(setIsLoading, false);
  }, [safeSetState]);
  var handleError = (0, _react.useCallback)(function (err) {
    var errorMessage = err instanceof Error ? err.message : '연결 중 오류가 발생했습니다.';
    safeSetState(setError, errorMessage);
    safeSetState(setIsLoading, false);
    safeSetState(setIsConnected, false);
  }, [safeSetState]);
  var handleDisconnect = (0, _react.useCallback)(function () {
    safeSetState(setIsConnected, false);
    safeSetState(setIsLoading, false);
  }, [safeSetState]);
  var connect = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      safeSetState(setIsLoading, true);
      safeSetState(setError, null);
      yield _socketService.default.init();
      var connectionStatus = _socketService.default.isConnected();
      safeSetState(setIsConnected, connectionStatus);
      safeSetState(setIsLoading, false);
    } catch (err) {
      var errorMessage = err instanceof Error ? err.message : '연결 중 오류가 발생했습니다.';
      safeSetState(setError, errorMessage);
      safeSetState(setIsLoading, false);
      safeSetState(setIsConnected, false);
    }
  }), [safeSetState]);
  var disconnect = (0, _react.useCallback)(function () {
    _socketService.default.disconnect();
    safeSetState(setIsConnected, false);
    safeSetState(setIsLoading, false);
  }, [safeSetState]);
  var emit = (0, _react.useCallback)(function (event, data) {
    if (!_socketService.default.isConnected()) {
      console.warn('소켓이 연결되지 않았습니다.');
      return;
    }
    _socketService.default.emit(event, data);
  }, []);
  (0, _react.useEffect)(function () {
    mountedRef.current = true;
    var connectHandler = function connectHandler() {
      handleConnect();
    };
    var disconnectHandler = function disconnectHandler() {
      handleDisconnect();
    };
    var errorHandler = function errorHandler(err) {
      handleError(err);
    };
    _socketService.default.on('connect', connectHandler);
    _socketService.default.on('disconnect', disconnectHandler);
    _socketService.default.on('connect_error', errorHandler);
    _socketService.default.on('error', errorHandler);
    Object.entries(eventsRef.current).forEach(function (_ref2) {
      var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
        event = _ref3[0],
        callback = _ref3[1];
      _socketService.default.on(event, callback);
    });
    if (autoConnect && !isConnected) {
      connect().catch(errorHandler);
    }
    return function () {
      mountedRef.current = false;
      _socketService.default.off('connect', connectHandler);
      _socketService.default.off('disconnect', disconnectHandler);
      _socketService.default.off('connect_error', errorHandler);
      _socketService.default.off('error', errorHandler);
      Object.entries(eventsRef.current).forEach(function (_ref4) {
        var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
          event = _ref5[0],
          callback = _ref5[1];
        _socketService.default.off(event, callback);
      });
    };
  }, [autoConnect, connect, handleConnect, handleDisconnect, handleError, isConnected, safeSetState]);
  return {
    isConnected: isConnected,
    isLoading: isLoading,
    error: error,
    connect: connect,
    disconnect: disconnect,
    emit: emit,
    on: _socketService.default.on,
    off: _socketService.default.off
  };
};
var _default = exports.default = useSocket;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,