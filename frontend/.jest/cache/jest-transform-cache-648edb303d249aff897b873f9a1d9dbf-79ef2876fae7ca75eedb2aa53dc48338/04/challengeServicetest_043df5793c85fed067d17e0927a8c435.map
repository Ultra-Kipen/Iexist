{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_challengeService","_client","_require","jest","mockedApiClient","apiClient","describe","beforeEach","clearAllMocks","it","default","mockChallengeData","title","description","start_date","end_date","is_public","mockResponse","data","Object","assign","id","post","mockResolvedValue","result","challengeService","createChallenge","expect","toHaveBeenCalledWith","toEqual","mockParams","page","limit","status","get","getChallenges","params","challengeId","getChallengeDetails","progressData","emotion_id","progress_note","message","updateChallengeProgress","participateInChallenge","delete","leaveChallenge"],"sources":["challengeService.test.ts"],"sourcesContent":["// __tests__/unit/services/api/challengeService.test.ts\r\n\r\nimport challengeService, { \r\n    ChallengeCreateData, \r\n    ChallengeProgressData \r\n  } from '../../../../src/services/api/challengeService';\r\n  import apiClient from '../../../../src/services/api/client';\r\n  \r\n  // apiClient를 모킹\r\n  jest.mock('../../../../src/services/api/client');\r\n  const mockedApiClient = apiClient as jest.Mocked<typeof apiClient>;\r\n  \r\n  describe('challengeService', () => {\r\n    beforeEach(() => {\r\n      // 모든 모크 초기화\r\n      jest.clearAllMocks();\r\n    });\r\n  \r\n    describe('createChallenge', () => {\r\n      it('챌린지 생성에 성공해야 함', async () => {\r\n        const mockChallengeData: ChallengeCreateData = {\r\n          title: '긍정 챌린지',\r\n          description: '매일 긍정적인 마인드셋 갖기',\r\n          start_date: '2024-05-01',\r\n          end_date: '2024-05-31',\r\n          is_public: true\r\n        };\r\n  \r\n        const mockResponse = { \r\n          data: { \r\n            id: 1, \r\n            ...mockChallengeData \r\n          } \r\n        };\r\n  \r\n        mockedApiClient.post.mockResolvedValue(mockResponse);\r\n  \r\n        const result = await challengeService.createChallenge(mockChallengeData);\r\n        \r\n        expect(mockedApiClient.post).toHaveBeenCalledWith('/challenges', mockChallengeData);\r\n        expect(result).toEqual(mockResponse);\r\n      });\r\n    });\r\n  \r\n    describe('getChallenges', () => {\r\n      it('챌린지 목록 조회에 성공해야 함', async () => {\r\n        const mockParams = { \r\n          page: 1, \r\n          limit: 10, \r\n          status: 'active' as 'active' \r\n        };\r\n  \r\n        const mockResponse = { \r\n          data: [{ id: 1, title: '첫 번째 챌린지' }] \r\n        };\r\n  \r\n        mockedApiClient.get.mockResolvedValue(mockResponse);\r\n  \r\n        const result = await challengeService.getChallenges(mockParams);\r\n        \r\n        expect(mockedApiClient.get).toHaveBeenCalledWith('/challenges', { params: mockParams });\r\n        expect(result).toEqual(mockResponse);\r\n      });\r\n    });\r\n  \r\n    describe('getChallengeDetails', () => {\r\n      it('특정 챌린지 상세 정보 조회에 성공해야 함', async () => {\r\n        const challengeId = 1;\r\n        const mockResponse = { \r\n          data: { \r\n            id: challengeId, \r\n            title: '상세 챌린지' \r\n          } \r\n        };\r\n  \r\n        mockedApiClient.get.mockResolvedValue(mockResponse);\r\n  \r\n        const result = await challengeService.getChallengeDetails(challengeId);\r\n        \r\n        expect(mockedApiClient.get).toHaveBeenCalledWith(`/challenges/${challengeId}`);\r\n        expect(result).toEqual(mockResponse);\r\n      });\r\n    });\r\n  \r\n    describe('updateChallengeProgress', () => {\r\n      it('챌린지 진행 상황 업데이트에 성공해야 함', async () => {\r\n        const challengeId = 1;\r\n        const progressData: ChallengeProgressData = {\r\n          emotion_id: 1,\r\n          progress_note: '오늘도 긍정적인 하루'\r\n        };\r\n  \r\n        const mockResponse = { \r\n          data: { \r\n            message: '진행 상황 업데이트 성공' \r\n          } \r\n        };\r\n  \r\n        mockedApiClient.post.mockResolvedValue(mockResponse);\r\n  \r\n        const result = await challengeService.updateChallengeProgress(challengeId, progressData);\r\n        \r\n        expect(mockedApiClient.post).toHaveBeenCalledWith(\r\n          `/challenges/${challengeId}/progress`, \r\n          progressData\r\n        );\r\n        expect(result).toEqual(mockResponse);\r\n      });\r\n    });\r\n  \r\n    describe('참여 및 탈퇴', () => {\r\n      it('챌린지 참여에 성공해야 함', async () => {\r\n        const challengeId = 1;\r\n        const mockResponse = { \r\n          data: { \r\n            message: '챌린지 참여 성공' \r\n          } \r\n        };\r\n  \r\n        mockedApiClient.post.mockResolvedValue(mockResponse);\r\n  \r\n        const result = await challengeService.participateInChallenge(challengeId);\r\n        \r\n        expect(mockedApiClient.post).toHaveBeenCalledWith(`/challenges/${challengeId}/participate`);\r\n        expect(result).toEqual(mockResponse);\r\n      });\r\n  \r\n      it('챌린지 탈퇴에 성공해야 함', async () => {\r\n        const challengeId = 1;\r\n        const mockResponse = { \r\n          data: { \r\n            message: '챌린지 탈퇴 성공' \r\n          } \r\n        };\r\n  \r\n        mockedApiClient.delete.mockResolvedValue(mockResponse);\r\n  \r\n        const result = await challengeService.leaveChallenge(challengeId);\r\n        \r\n        expect(mockedApiClient.delete).toHaveBeenCalledWith(`/challenges/${challengeId}/participate`);\r\n        expect(result).toEqual(mockResponse);\r\n      });\r\n    });\r\n  });"],"mappings":"AASEA,WAAA,GAAKC,IAAI,sCAAsC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAPnD,IAAAE,iBAAA,GAAAH,sBAAA,CAAAC,OAAA;AAIE,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAA4D,SAAAH,YAAA;EAAA,IAAAO,QAAA,GAAAJ,OAAA;IAAAK,IAAA,GAAAD,QAAA,CAAAC,IAAA;EAAAR,WAAA,YAAAA,YAAA;IAAA,OAAAQ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAI5D,IAAMC,eAAe,GAAGC,eAA0C;AAElEC,QAAQ,CAAC,kBAAkB,EAAE,YAAM;EACjCC,UAAU,CAAC,YAAM;IAEfJ,IAAI,CAACK,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFF,QAAQ,CAAC,iBAAiB,EAAE,YAAM;IAChCG,EAAE,CAAC,gBAAgB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;MAC/B,IAAMC,iBAAsC,GAAG;QAC7CC,KAAK,EAAE,QAAQ;QACfC,WAAW,EAAE,iBAAiB;QAC9BC,UAAU,EAAE,YAAY;QACxBC,QAAQ,EAAE,YAAY;QACtBC,SAAS,EAAE;MACb,CAAC;MAED,IAAMC,YAAY,GAAG;QACnBC,IAAI,EAAAC,MAAA,CAAAC,MAAA;UACFC,EAAE,EAAE;QAAC,GACFV,iBAAiB;MAExB,CAAC;MAEDP,eAAe,CAACkB,IAAI,CAACC,iBAAiB,CAACN,YAAY,CAAC;MAEpD,IAAMO,MAAM,SAASC,yBAAgB,CAACC,eAAe,CAACf,iBAAiB,CAAC;MAExEgB,MAAM,CAACvB,eAAe,CAACkB,IAAI,CAAC,CAACM,oBAAoB,CAAC,aAAa,EAAEjB,iBAAiB,CAAC;MACnFgB,MAAM,CAACH,MAAM,CAAC,CAACK,OAAO,CAACZ,YAAY,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFX,QAAQ,CAAC,eAAe,EAAE,YAAM;IAC9BG,EAAE,CAAC,mBAAmB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;MAClC,IAAMoB,UAAU,GAAG;QACjBC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE;MACV,CAAC;MAED,IAAMhB,YAAY,GAAG;QACnBC,IAAI,EAAE,CAAC;UAAEG,EAAE,EAAE,CAAC;UAAET,KAAK,EAAE;QAAW,CAAC;MACrC,CAAC;MAEDR,eAAe,CAAC8B,GAAG,CAACX,iBAAiB,CAACN,YAAY,CAAC;MAEnD,IAAMO,MAAM,SAASC,yBAAgB,CAACU,aAAa,CAACL,UAAU,CAAC;MAE/DH,MAAM,CAACvB,eAAe,CAAC8B,GAAG,CAAC,CAACN,oBAAoB,CAAC,aAAa,EAAE;QAAEQ,MAAM,EAAEN;MAAW,CAAC,CAAC;MACvFH,MAAM,CAACH,MAAM,CAAC,CAACK,OAAO,CAACZ,YAAY,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFX,QAAQ,CAAC,qBAAqB,EAAE,YAAM;IACpCG,EAAE,CAAC,yBAAyB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;MACxC,IAAM2B,WAAW,GAAG,CAAC;MACrB,IAAMpB,YAAY,GAAG;QACnBC,IAAI,EAAE;UACJG,EAAE,EAAEgB,WAAW;UACfzB,KAAK,EAAE;QACT;MACF,CAAC;MAEDR,eAAe,CAAC8B,GAAG,CAACX,iBAAiB,CAACN,YAAY,CAAC;MAEnD,IAAMO,MAAM,SAASC,yBAAgB,CAACa,mBAAmB,CAACD,WAAW,CAAC;MAEtEV,MAAM,CAACvB,eAAe,CAAC8B,GAAG,CAAC,CAACN,oBAAoB,CAAC,eAAeS,WAAW,EAAE,CAAC;MAC9EV,MAAM,CAACH,MAAM,CAAC,CAACK,OAAO,CAACZ,YAAY,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFX,QAAQ,CAAC,yBAAyB,EAAE,YAAM;IACxCG,EAAE,CAAC,wBAAwB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;MACvC,IAAM2B,WAAW,GAAG,CAAC;MACrB,IAAME,YAAmC,GAAG;QAC1CC,UAAU,EAAE,CAAC;QACbC,aAAa,EAAE;MACjB,CAAC;MAED,IAAMxB,YAAY,GAAG;QACnBC,IAAI,EAAE;UACJwB,OAAO,EAAE;QACX;MACF,CAAC;MAEDtC,eAAe,CAACkB,IAAI,CAACC,iBAAiB,CAACN,YAAY,CAAC;MAEpD,IAAMO,MAAM,SAASC,yBAAgB,CAACkB,uBAAuB,CAACN,WAAW,EAAEE,YAAY,CAAC;MAExFZ,MAAM,CAACvB,eAAe,CAACkB,IAAI,CAAC,CAACM,oBAAoB,CAC/C,eAAeS,WAAW,WAAW,EACrCE,YACF,CAAC;MACDZ,MAAM,CAACH,MAAM,CAAC,CAACK,OAAO,CAACZ,YAAY,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;EAEFX,QAAQ,CAAC,SAAS,EAAE,YAAM;IACxBG,EAAE,CAAC,gBAAgB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;MAC/B,IAAM2B,WAAW,GAAG,CAAC;MACrB,IAAMpB,YAAY,GAAG;QACnBC,IAAI,EAAE;UACJwB,OAAO,EAAE;QACX;MACF,CAAC;MAEDtC,eAAe,CAACkB,IAAI,CAACC,iBAAiB,CAACN,YAAY,CAAC;MAEpD,IAAMO,MAAM,SAASC,yBAAgB,CAACmB,sBAAsB,CAACP,WAAW,CAAC;MAEzEV,MAAM,CAACvB,eAAe,CAACkB,IAAI,CAAC,CAACM,oBAAoB,CAAC,eAAeS,WAAW,cAAc,CAAC;MAC3FV,MAAM,CAACH,MAAM,CAAC,CAACK,OAAO,CAACZ,YAAY,CAAC;IACtC,CAAC,EAAC;IAEFR,EAAE,CAAC,gBAAgB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;MAC/B,IAAM2B,WAAW,GAAG,CAAC;MACrB,IAAMpB,YAAY,GAAG;QACnBC,IAAI,EAAE;UACJwB,OAAO,EAAE;QACX;MACF,CAAC;MAEDtC,eAAe,CAACyC,MAAM,CAACtB,iBAAiB,CAACN,YAAY,CAAC;MAEtD,IAAMO,MAAM,SAASC,yBAAgB,CAACqB,cAAc,CAACT,WAAW,CAAC;MAEjEV,MAAM,CAACvB,eAAe,CAACyC,MAAM,CAAC,CAACjB,oBAAoB,CAAC,eAAeS,WAAW,cAAc,CAAC;MAC7FV,MAAM,CAACH,MAAM,CAAC,CAACK,OAAO,CAACZ,YAAY,CAAC;IACtC,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}