11b4cbff2c00bced27b4c0aea1a5ce08
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault2(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_MIN_PRESS_DURATION = exports.DEFAULT_LONG_PRESS_DELAY_MS = void 0;
exports.longPress = longPress;
exports.press = press;
var _act = _interopRequireDefault(require("../../act"));
var _eventHandler = require("../../event-handler");
var _componentTree = require("../../helpers/component-tree");
var _errors = require("../../helpers/errors");
var _hostComponentNames = require("../../helpers/host-component-names");
var _pointerEvents = require("../../helpers/pointer-events");
var _eventBuilder = require("../event-builder");
var _utils = require("../utils");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
var DEFAULT_MIN_PRESS_DURATION = exports.DEFAULT_MIN_PRESS_DURATION = 130;
var DEFAULT_LONG_PRESS_DELAY_MS = exports.DEFAULT_LONG_PRESS_DELAY_MS = 500;
function press(_x) {
  return _press.apply(this, arguments);
}
function _press() {
  _press = (0, _asyncToGenerator2.default)(function* (element) {
    if (!(0, _componentTree.isHostElement)(element)) {
      throw new _errors.ErrorWithStack(`press() works only with host elements. Passed element has type "${element.type}".`, press);
    }
    yield _basePress(this.config, element, {
      type: 'press'
    });
  });
  return _press.apply(this, arguments);
}
function longPress(_x2, _x3) {
  return _longPress.apply(this, arguments);
}
function _longPress() {
  _longPress = (0, _asyncToGenerator2.default)(function* (element, options) {
    var _options$duration;
    if (!(0, _componentTree.isHostElement)(element)) {
      throw new _errors.ErrorWithStack(`longPress() works only with host elements. Passed element has type "${element.type}".`, longPress);
    }
    yield _basePress(this.config, element, {
      type: 'longPress',
      duration: (_options$duration = options == null ? void 0 : options.duration) != null ? _options$duration : DEFAULT_LONG_PRESS_DELAY_MS
    });
  });
  return _longPress.apply(this, arguments);
}
var _basePress = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    if (isEnabledHostElement(element) && hasPressEventHandler(element)) {
      yield emitDirectPressEvents(config, element, options);
      return;
    }
    if (isEnabledTouchResponder(element)) {
      yield emitPressabilityPressEvents(config, element, options);
      return;
    }
    var hostParentElement = (0, _componentTree.getHostParent)(element);
    if (!hostParentElement) {
      return;
    }
    yield _basePress(config, hostParentElement, options);
  });
  return function basePress(_x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
function isEnabledHostElement(element) {
  if (!(0, _pointerEvents.isPointerEventEnabled)(element)) {
    return false;
  }
  if ((0, _hostComponentNames.isHostText)(element)) {
    return element.props.disabled !== true;
  }
  if ((0, _hostComponentNames.isHostTextInput)(element)) {
    return element.props.editable !== false;
  }
  return true;
}
function isEnabledTouchResponder(element) {
  return (0, _pointerEvents.isPointerEventEnabled)(element) && (element.props.onStartShouldSetResponder == null ? void 0 : element.props.onStartShouldSetResponder());
}
function hasPressEventHandler(element) {
  return (0, _eventHandler.getEventHandler)(element, 'press') || (0, _eventHandler.getEventHandler)(element, 'longPress') || (0, _eventHandler.getEventHandler)(element, 'pressIn') || (0, _eventHandler.getEventHandler)(element, 'pressOut');
}
function emitDirectPressEvents(_x7, _x8, _x9) {
  return _emitDirectPressEvents.apply(this, arguments);
}
function _emitDirectPressEvents() {
  _emitDirectPressEvents = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'pressIn', _eventBuilder.EventBuilder.Common.touch());
    yield (0, _utils.wait)(config, options.duration);
    if (options.type === 'longPress') {
      (0, _utils.dispatchEvent)(element, 'longPress', _eventBuilder.EventBuilder.Common.touch());
    }
    (0, _utils.dispatchEvent)(element, 'pressOut', _eventBuilder.EventBuilder.Common.touch());
    if (options.type === 'press') {
      (0, _utils.dispatchEvent)(element, 'press', _eventBuilder.EventBuilder.Common.touch());
    }
  });
  return _emitDirectPressEvents.apply(this, arguments);
}
function emitPressabilityPressEvents(_x10, _x11, _x12) {
  return _emitPressabilityPressEvents.apply(this, arguments);
}
function _emitPressabilityPressEvents() {
  _emitPressabilityPressEvents = (0, _asyncToGenerator2.default)(function* (config, element, options) {
    var _options$duration2;
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'responderGrant', _eventBuilder.EventBuilder.Common.responderGrant());
    var duration = (_options$duration2 = options.duration) != null ? _options$duration2 : DEFAULT_MIN_PRESS_DURATION;
    yield (0, _utils.wait)(config, duration);
    (0, _utils.dispatchEvent)(element, 'responderRelease', _eventBuilder.EventBuilder.Common.responderRelease());
    if (DEFAULT_MIN_PRESS_DURATION - duration > 0) {
      yield (0, _act.default)(function () {
        return (0, _utils.wait)(config, DEFAULT_MIN_PRESS_DURATION - duration);
      });
    }
  });
  return _emitPressabilityPressEvents.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,