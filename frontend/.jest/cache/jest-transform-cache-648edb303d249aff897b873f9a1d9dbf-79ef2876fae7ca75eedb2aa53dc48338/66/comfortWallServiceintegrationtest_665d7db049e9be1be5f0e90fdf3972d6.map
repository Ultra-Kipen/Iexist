{"version":3,"names":["_getJestObj","mock","post","jest","fn","get","_interopRequireDefault","require","_asyncToGenerator2","_comfortWallService","_client","_require","describe","beforeEach","clearAllMocks","it","default","mockResponse","status","data","id","title","content","created_at","apiClient","mockResolvedValue","postData","is_anonymous","result","comfortWallService","createPost","expect","toHaveBeenCalledWith","toEqual","mockError","response","error","message","mockRejectedValue","rejects","posts","pagination","total","page","limit","getPosts","params","undefined","sort_by","tag","like_count","period","getBestPosts","post_id","postId","messageData","sendMessage"],"sources":["comfortWallService.integration.test.ts"],"sourcesContent":["// __tests__/integration/services/comfortWallService.integration.test.ts\r\n\r\nimport comfortWallService from '../../../src/services/api/comfortWallService';\r\nimport apiClient from '../../../src/services/api/client';\r\n\r\n// apiClient를 모킹\r\njest.mock('../../../src/services/api/client', () => ({\r\n  post: jest.fn(),\r\n  get: jest.fn()\r\n}));\r\n\r\ndescribe('ComfortWall Service Integration Tests', () => {\r\n  // 각 테스트 전에 모킹 초기화\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createPost', () => {\r\n    it('should successfully create a post', async () => {\r\n      // 모의 응답 설정\r\n      const mockResponse = { \r\n        status: 201, \r\n        data: { \r\n          id: 1, \r\n          title: '테스트 제목', \r\n          content: '테스트 내용',\r\n          created_at: '2025-04-09T10:00:00Z'\r\n        } \r\n      };\r\n      (apiClient.post as jest.Mock).mockResolvedValue(mockResponse);\r\n      \r\n      // 테스트 실행\r\n      const postData = { \r\n        title: '테스트 제목', \r\n        content: '테스트 내용', \r\n        is_anonymous: true \r\n      };\r\n      const result = await comfortWallService.createPost(postData);\r\n      \r\n      // 검증\r\n      expect(apiClient.post).toHaveBeenCalledWith('/comfort-wall', postData);\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n\r\n    it('should handle error when creating a post', async () => {\r\n      // 모의 에러 응답 설정\r\n      const mockError = {\r\n        response: { \r\n          status: 400, \r\n          data: { \r\n            error: '유효성 검증 실패', \r\n            message: '제목과 내용은 필수입니다.' \r\n          } \r\n        }\r\n      };\r\n      (apiClient.post as jest.Mock).mockRejectedValue(mockError);\r\n      \r\n      // 테스트 실행 및 에러 검증\r\n      await expect(comfortWallService.createPost({ title: '', content: '' }))\r\n        .rejects.toEqual(mockError);\r\n    });\r\n  });\r\n\r\n  describe('getPosts', () => {\r\n    it('should get posts with default parameters', async () => {\r\n      // 모의 응답 설정\r\n      const mockResponse = { \r\n        status: 200, \r\n        data: { \r\n          posts: [\r\n            { id: 1, title: '첫 번째 글', content: '내용 1' },\r\n            { id: 2, title: '두 번째 글', content: '내용 2' }\r\n          ],\r\n          pagination: { total: 2, page: 1, limit: 10 }\r\n        } \r\n      };\r\n      (apiClient.get as jest.Mock).mockResolvedValue(mockResponse);\r\n      \r\n      // 테스트 실행\r\n      const result = await comfortWallService.getPosts();\r\n      \r\n      // 검증\r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall', { params: undefined });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n\r\n    it('should get posts with custom parameters', async () => {\r\n      // 모의 응답 설정\r\n      const mockResponse = { \r\n        status: 200, \r\n        data: { \r\n          posts: [\r\n            { id: 3, title: '인기 글', content: '내용 3' }\r\n          ],\r\n          pagination: { total: 1, page: 1, limit: 10 }\r\n        } \r\n      };\r\n      (apiClient.get as jest.Mock).mockResolvedValue(mockResponse);\r\n      \r\n      // 테스트 실행\r\n      const params = { page: 1, limit: 10, sort_by: 'popular' as const, tag: '불안' };\r\n      const result = await comfortWallService.getPosts(params);\r\n      \r\n      // 검증\r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall', { params });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n\r\n  describe('getBestPosts', () => {\r\n    it('should get best posts with specific period', async () => {\r\n      // 모의 응답 설정\r\n      const mockResponse = { \r\n        status: 200, \r\n        data: { \r\n          posts: [\r\n            { id: 5, title: '주간 인기글', content: '내용 5', like_count: 50 }\r\n          ] \r\n        } \r\n      };\r\n      (apiClient.get as jest.Mock).mockResolvedValue(mockResponse);\r\n      \r\n      // 테스트 실행\r\n      const params = { period: 'weekly' as const };\r\n      const result = await comfortWallService.getBestPosts(params);\r\n      \r\n      // 검증\r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall/best', { params });\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n\r\n  describe('sendMessage', () => {\r\n    it('should send a message to a post', async () => {\r\n      // 모의 응답 설정\r\n      const mockResponse = { \r\n        status: 201, \r\n        data: { \r\n          id: 1, \r\n          post_id: 5, \r\n          message: '응원 메시지', \r\n          created_at: '2025-04-09T11:00:00Z' \r\n        } \r\n      };\r\n      (apiClient.post as jest.Mock).mockResolvedValue(mockResponse);\r\n      \r\n      // 테스트 실행\r\n      const postId = 5;\r\n      const messageData = { message: '응원 메시지', is_anonymous: true };\r\n      const result = await comfortWallService.sendMessage(postId, messageData);\r\n      \r\n      // 검증\r\n      expect(apiClient.post).toHaveBeenCalledWith(`/comfort-wall/${postId}/message`, messageData);\r\n      expect(result).toEqual(mockResponse);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}