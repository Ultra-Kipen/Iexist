a95283714ea32c89f5bf3a5940546cbb
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    interceptors: {
      request: {
        use: jest.fn()
      },
      response: {
        use: jest.fn()
      }
    },
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve('test_token');
    }),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    Button: 'Button',
    Chip: 'Chip',
    TextInput: 'TextInput',
    Card: {
      Title: 'Card.Title',
      Content: 'Card.Content',
      Actions: 'Card.Actions'
    },
    Avatar: {
      Icon: 'Avatar.Icon'
    },
    IconButton: 'IconButton',
    FAB: 'FAB',
    Divider: 'Divider',
    Surface: 'Surface',
    ActivityIndicator: 'ActivityIndicator',
    Portal: 'Portal',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        onSurface: '#000000',
        disabled: 'rgba(0, 0, 0, 0.26)',
        placeholder: 'rgba(0, 0, 0, 0.54)',
        backdrop: 'rgba(0, 0, 0, 0.5)',
        notification: '#f50057'
      },
      dark: false,
      roundness: 4,
      animation: {
        scale: 1
      }
    })
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser',
        nickname: 'Test User'
      },
      isAuthenticated: true,
      login: jest.fn(),
      logout: jest.fn()
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn(),
      logEmotion: jest.fn()
    })
  };
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  rn.Image = 'Image';
  rn.View = 'View';
  rn.ScrollView = 'ScrollView';
  return rn;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HomeScreen = _interopRequireDefault(require("../../src/screens/HomeScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders without crashing', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      UNSAFE_getByType = _render.UNSAFE_getByType;
    expect(UNSAFE_getByType('View')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,