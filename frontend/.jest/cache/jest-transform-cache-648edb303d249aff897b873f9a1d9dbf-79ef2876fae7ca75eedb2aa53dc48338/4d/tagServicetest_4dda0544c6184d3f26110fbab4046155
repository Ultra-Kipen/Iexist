c3b40724001075569a6e7cd7bd0f44c9
_getJestObj().mock("../../../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: {
        use: jest.fn(),
        eject: jest.fn()
      },
      response: {
        use: jest.fn(),
        eject: jest.fn()
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _tagService = require("../../../../src/services/api/tagService");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('tagService 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('updateTag', function () {
    it('태그를 성공적으로 업데이트해야 함', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      var newTagName = '업데이트된 태그';
      var updatedTag = {
        tag_id: tagId,
        name: newTagName,
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      };
      _tagService.tagService.client.put.mockResolvedValue({
        data: {
          status: 'success',
          data: updatedTag
        }
      });
      var result = yield _tagService.tagService.updateTag(tagId, newTagName);
      expect(_tagService.tagService.client.put).toHaveBeenCalledWith(`/tags/${tagId}`, {
        name: newTagName
      });
      expect(result).toEqual(updatedTag);
    }));
    it('태그 업데이트 실패 시 오류 처리', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      var newTagName = '업데이트된 태그';
      _tagService.tagService.client.put.mockRejectedValue(new Error('태그 수정에 실패했습니다'));
      yield expect(_tagService.tagService.updateTag(tagId, newTagName)).rejects.toThrow('태그 수정에 실패했습니다');
    }));
  });
  describe('deleteTag', function () {
    it('태그를 성공적으로 삭제해야 함', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      var mockResponse = {
        status: 'success',
        message: '태그가 성공적으로 삭제되었습니다'
      };
      _tagService.tagService.client.delete.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _tagService.tagService.deleteTag(tagId);
      expect(_tagService.tagService.client.delete).toHaveBeenCalledWith(`/tags/${tagId}`);
      expect(result).toEqual(mockResponse);
    }));
    it('태그 삭제 실패 시 오류 처리', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      _tagService.tagService.client.delete.mockRejectedValue(new Error('태그 삭제에 실패했습니다'));
      yield expect(_tagService.tagService.deleteTag(tagId)).rejects.toThrow('태그 삭제에 실패했습니다');
    }));
  });
  describe('getTagById', function () {
    it('특정 태그를 성공적으로 조회해야 함', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      var mockTag = {
        tag_id: tagId,
        name: '위로',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      };
      _tagService.tagService.client.get.mockResolvedValue({
        data: {
          status: 'success',
          data: mockTag
        }
      });
      var result = yield _tagService.tagService.getTagById(tagId);
      expect(_tagService.tagService.client.get).toHaveBeenCalledWith(`/tags/${tagId}`);
      expect(result).toEqual(mockTag);
    }));
    it('존재하지 않는 태그 조회 시 오류 처리', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 999;
      _tagService.tagService.client.get.mockRejectedValue(new Error('태그 정보 조회에 실패했습니다'));
      yield expect(_tagService.tagService.getTagById(tagId)).rejects.toThrow('태그 정보 조회에 실패했습니다');
    }));
  });
  describe('getPostsByTag', function () {
    it('특정 태그의 게시물을 성공적으로 조회해야 함', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      var mockPosts = [{
        id: 1,
        title: '첫 번째 게시물'
      }, {
        id: 2,
        title: '두 번째 게시물'
      }];
      _tagService.tagService.client.get.mockResolvedValue({
        data: {
          status: 'success',
          data: mockPosts,
          pagination: {
            total: 2,
            page: 1,
            limit: 10
          }
        }
      });
      var result = yield _tagService.tagService.getPostsByTag(tagId, {
        page: 1,
        limit: 10,
        post_type: 'my_day'
      });
      expect(_tagService.tagService.client.get).toHaveBeenCalledWith(`/tags/${tagId}/posts`, {
        params: {
          page: 1,
          limit: 10,
          post_type: 'my_day'
        }
      });
      expect(result.data).toEqual(mockPosts);
      expect(result.pagination).toBeDefined();
    }));
    it('태그별 게시물 조회 실패 시 오류 처리', (0, _asyncToGenerator2.default)(function* () {
      var tagId = 1;
      _tagService.tagService.client.get.mockRejectedValue(new Error('태그별 게시물 조회에 실패했습니다'));
      yield expect(_tagService.tagService.getPostsByTag(tagId, {
        post_type: 'my_day'
      })).rejects.toThrow('태그별 게시물 조회에 실패했습니다');
    }));
  });
  describe('getAllTags', function () {
    it('모든 태그를 성공적으로 조회해야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockTags = [{
        tag_id: 1,
        name: '행복',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }, {
        tag_id: 2,
        name: '슬픔',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }];
      _tagService.tagService.client.get.mockResolvedValue({
        data: {
          status: 'success',
          data: mockTags
        }
      });
      var result = yield _tagService.tagService.getAllTags();
      expect(_tagService.tagService.client.get).toHaveBeenCalledWith('/tags');
      expect(result).toEqual(mockTags);
    }));
    it('태그 목록 조회 실패 시 오류 처리', (0, _asyncToGenerator2.default)(function* () {
      _tagService.tagService.client.get.mockRejectedValue(new Error('태그 목록 조회에 실패했습니다'));
      yield expect(_tagService.tagService.getAllTags()).rejects.toThrow('태그 목록 조회에 실패했습니다');
    }));
  });
  describe('getPopularTags', function () {
    it('인기 태그를 성공적으로 조회해야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockTags = [{
        tag_id: 1,
        name: '행복',
        post_count: 15,
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }, {
        tag_id: 2,
        name: '슬픔',
        post_count: 10,
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }];
      _tagService.tagService.client.get.mockResolvedValue({
        data: {
          status: 'success',
          data: mockTags
        }
      });
      var result = yield _tagService.tagService.getPopularTags(5);
      expect(_tagService.tagService.client.get).toHaveBeenCalledWith('/tags/popular', {
        params: {
          limit: 5
        }
      });
      expect(result).toEqual(mockTags);
    }));
  });
  describe('createTag', function () {
    it('새 태그를 성공적으로 생성해야 함', (0, _asyncToGenerator2.default)(function* () {
      var newTagName = '새로운태그';
      var mockTag = {
        tag_id: 3,
        name: newTagName,
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      };
      _tagService.tagService.client.post.mockResolvedValue({
        data: {
          status: 'success',
          data: mockTag
        }
      });
      var result = yield _tagService.tagService.createTag(newTagName);
      expect(_tagService.tagService.client.post).toHaveBeenCalledWith('/tags', {
        name: newTagName
      });
      expect(result).toEqual(mockTag);
    }));
  });
  describe('searchTags', function () {
    it('태그 검색이 성공적으로 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockTags = [{
        tag_id: 1,
        name: '행복한날',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }, {
        tag_id: 2,
        name: '행복여행',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }];
      _tagService.tagService.client.get.mockResolvedValue({
        data: {
          status: 'success',
          data: mockTags
        }
      });
      var result = yield _tagService.tagService.searchTags('행복');
      expect(_tagService.tagService.client.get).toHaveBeenCalledWith('/tags/search', {
        params: {
          query: '행복'
        }
      });
      expect(result).toEqual(mockTags);
    }));
  });
  describe('addTagToPost', function () {
    it('게시물에 태그를 성공적으로 추가해야 함', (0, _asyncToGenerator2.default)(function* () {
      var postId = 1;
      var tagId = 2;
      var postType = 'my_day';
      var mockResponse = {
        status: 'success',
        message: '태그가 게시물에 추가되었습니다'
      };
      _tagService.tagService.client.post.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _tagService.tagService.addTagToPost(postId, tagId, postType);
      expect(_tagService.tagService.client.post).toHaveBeenCalledWith(`/posts/${postId}/tags`, {
        tag_id: tagId,
        post_type: postType
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('removeTagFromPost', function () {
    it('게시물에서 태그를 성공적으로 제거해야 함', (0, _asyncToGenerator2.default)(function* () {
      var postId = 1;
      var tagId = 2;
      var postType = 'my_day';
      var mockResponse = {
        status: 'success',
        message: '태그가 게시물에서 제거되었습니다'
      };
      _tagService.tagService.client.delete.mockResolvedValue({
        data: mockResponse
      });
      var result = yield _tagService.tagService.removeTagFromPost(postId, tagId, postType);
      expect(_tagService.tagService.client.delete).toHaveBeenCalledWith(`/posts/${postId}/tags/${tagId}?post_type=${postType}`);
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('getPostTags', function () {
    it('게시물의 태그를 성공적으로 조회해야 함', (0, _asyncToGenerator2.default)(function* () {
      var postId = 1;
      var postType = 'my_day';
      var mockTags = [{
        tag_id: 1,
        name: '행복',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }, {
        tag_id: 2,
        name: '여행',
        created_at: '2024-04-25T10:00:00Z',
        updated_at: '2024-04-25T10:00:00Z'
      }];
      _tagService.tagService.client.get.mockResolvedValue({
        data: {
          status: 'success',
          data: mockTags
        }
      });
      var result = yield _tagService.tagService.getPostTags(postId, postType);
      expect(_tagService.tagService.client.get).toHaveBeenCalledWith(`/posts/${postId}/tags?post_type=${postType}`);
      expect(result).toEqual(mockTags);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,