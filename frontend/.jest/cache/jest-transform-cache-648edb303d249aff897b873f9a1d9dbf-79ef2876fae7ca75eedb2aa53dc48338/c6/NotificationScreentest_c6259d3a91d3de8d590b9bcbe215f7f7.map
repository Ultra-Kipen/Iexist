{"version":3,"names":["_getJestObj","mock","_require","require","View","_ref","data","renderItem","ListEmptyComponent","length","_jsxRuntime","jsx","children","map","item","index","__esModule","default","get","jest","fn","put","delete","getNotifications","markAsRead","markAllAsRead","getUnreadCount","deleteNotification","updateNotificationSettings","getNotificationSettings","useNavigation","navigate","goBack","alert","_interopRequireDefault","_asyncToGenerator2","_react","_reactNative","_NotificationScreen","_reactNative2","_notificationService","_require2","mockNotifications","id","user_id","content","notification_type","related_id","is_read","created_at","Date","toISOString","now","describe","beforeEach","clearAllMocks","notificationService","mockResolvedValue","pagination","page","limit","total","success","it","_render","render","UNSAFE_getByType","expect","toBeTruthy","_render2","getByText","waitFor","timeout","_render3","_render4","notification","fireEvent","press","toHaveBeenCalledWith","_render5","markAllButton","toHaveBeenCalled","Alert","mockRejectedValue","Error","_render6","button","props","title","toBe","_render7","markAllReadButton"],"sources":["NotificationScreen.test.tsx"],"sourcesContent":["// __tests__/screens/NotificationScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport NotificationScreen from '../../src/screens/NotificationScreen';\r\nimport { Alert } from 'react-native';\r\n\r\n// FlatList 모킹 추가\r\njest.mock('react-native/Libraries/Lists/FlatList', () => {\r\n  const { View } = require('react-native');\r\n  return ({ data, renderItem, ListEmptyComponent }) => {\r\n    if (data && data.length > 0) {\r\n      return (\r\n        <View>\r\n          {data.map((item, index) => (\r\n            <View key={index}>{renderItem({ item, index })}</View>\r\n          ))}\r\n        </View>\r\n      );\r\n    }\r\n    return ListEmptyComponent ? <View>{ListEmptyComponent}</View> : null;\r\n  };\r\n});\r\n\r\n// API 클라이언트 모킹\r\njest.mock('../../src/services/api/client', () => {\r\n  return {\r\n    __esModule: true,\r\n    default: {\r\n      get: jest.fn(),\r\n      put: jest.fn(),\r\n      delete: jest.fn()\r\n    }\r\n  };\r\n});\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/notificationService', () => {\r\n  return {\r\n    getNotifications: jest.fn(),\r\n    markAsRead: jest.fn(),\r\n    markAllAsRead: jest.fn(),\r\n    getUnreadCount: jest.fn(),\r\n    deleteNotification: jest.fn(),\r\n    updateNotificationSettings: jest.fn(),\r\n    getNotificationSettings: jest.fn()\r\n  };\r\n});\r\n\r\n// 네비게이션 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n  }),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 컴포넌트 모킹\r\njest.mock('../../src/components/LoadingIndicator', () => 'LoadingIndicator');\r\njest.mock('../../src/components/Button', () => 'Button');\r\n\r\n// 테스트에 필요한 모듈 가져오기\r\nimport notificationService from '../../src/services/api/notificationService';\r\n\r\n// 테스트 데이터\r\nconst mockNotifications = [\r\n  {\r\n    id: 1,\r\n    user_id: 101,\r\n    content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',\r\n    notification_type: 'like',\r\n    related_id: 101,\r\n    is_read: false,\r\n    created_at: new Date().toISOString(),\r\n  },\r\n  {\r\n    id: 2,\r\n    user_id: 102,\r\n    content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',\r\n    notification_type: 'comment',\r\n    related_id: 102,\r\n    is_read: true,\r\n    created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1일 전\r\n  },\r\n  {\r\n    id: 3,\r\n    user_id: 103,\r\n    content: '행복 챌린지가 시작되었습니다.',\r\n    notification_type: 'challenge',\r\n    related_id: 5,\r\n    is_read: false,\r\n    created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3일 전\r\n  },\r\n];\r\n\r\ndescribe('NotificationScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // API 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: mockNotifications,\r\n      pagination: { page: 1, limit: 20, total: 3 }\r\n    });\r\n    \r\n    (notificationService.markAsRead as jest.Mock).mockResolvedValue({ success: true });\r\n    (notificationService.markAllAsRead as jest.Mock).mockResolvedValue({ success: true });\r\n  });\r\n\r\n  it('renders loading state initially', () => {\r\n    const { UNSAFE_getByType } = render(<NotificationScreen />);\r\n    expect(UNSAFE_getByType('LoadingIndicator')).toBeTruthy();\r\n  });\r\n\r\n  it('renders notifications list correctly', async () => {\r\n    const { getByText } = render(<NotificationScreen />);\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('알림')).toBeTruthy();\r\n    });\r\n    \r\n    // 모의 데이터로 컴포넌트 상태 직접 업데이트\r\n    await waitFor(() => {\r\n      expect(getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.')).toBeTruthy();\r\n      expect(getByText('김철수님이 회원님의 게시물에 댓글을 남겼습니다.')).toBeTruthy();\r\n      expect(getByText('행복 챌린지가 시작되었습니다.')).toBeTruthy();\r\n    }, { timeout: 3000 });\r\n  });\r\n\r\n  it('shows empty state when no notifications', async () => {\r\n    // 빈 데이터 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: [],\r\n      pagination: { page: 1, limit: 20, total: 0 }\r\n    });\r\n    \r\n    const { getByText } = render(<NotificationScreen />);\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('알림이 없습니다.')).toBeTruthy();\r\n    }, { timeout: 3000 });\r\n  });\r\n\r\n  it('marks notification as read when clicked', async () => {\r\n    const { getByText } = render(<NotificationScreen />);\r\n    \r\n    await waitFor(() => {\r\n      const notification = getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.');\r\n      fireEvent.press(notification);\r\n    }, { timeout: 3000 });\r\n    \r\n    expect(notificationService.markAsRead).toHaveBeenCalledWith(1);\r\n  });\r\n\r\n  it('marks all notifications as read', async () => {\r\n    const { getByText } = render(<NotificationScreen />);\r\n    \r\n    await waitFor(() => {\r\n      const markAllButton = getByText('모두 읽음');\r\n      fireEvent.press(markAllButton);\r\n    }, { timeout: 3000 });\r\n    \r\n    expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n    expect(Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');\r\n  });\r\n\r\n  it('handles error during loading', async () => {\r\n    // 오류 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockRejectedValue(new Error('네트워크 오류'));\r\n    \r\n    const { getByText, UNSAFE_getByType } = render(<NotificationScreen />);\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('알림을 불러오는 중 오류가 발생했습니다.')).toBeTruthy();\r\n      // Button 컴포넌트를 직접 테스트\r\n      const button = UNSAFE_getByType('Button');\r\n      expect(button.props.title).toBe('다시 시도');\r\n    }, { timeout: 3000 });\r\n  });\r\n\r\n  it('handles refresh functionality', async () => {\r\n    const { getByText } = render(<NotificationScreen />);\r\n    \r\n    await waitFor(() => {\r\n      const markAllReadButton = getByText('모두 읽음');\r\n      fireEvent.press(markAllReadButton);\r\n    }, { timeout: 3000 });\r\n    \r\n    expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}