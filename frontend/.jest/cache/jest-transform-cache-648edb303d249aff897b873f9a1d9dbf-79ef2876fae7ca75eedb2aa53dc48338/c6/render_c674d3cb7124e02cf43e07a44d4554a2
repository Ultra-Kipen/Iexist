eb6bb41df11e7710be79c9648bf915b2
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["wrapper", "concurrentRoot", "unstable_validateStringsRenderedWithinText"],
  _excluded2 = ["wrapper"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;
exports.renderInternal = renderInternal;
var React = _interopRequireWildcard(require("react"));
var _act = _interopRequireDefault(require("./act"));
var _cleanup = require("./cleanup");
var _config = require("./config");
var _componentTree = require("./helpers/component-tree");
var _debug = require("./helpers/debug");
var _stringValidation = require("./helpers/string-validation");
var _renderAct = require("./render-act");
var _screen = require("./screen");
var _within = require("./within");
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    default: e
  };
}
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function render(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return renderInternal(component, options);
}
function renderInternal(component, options) {
  var _ref = options || {},
    Wrapper = _ref.wrapper,
    concurrentRoot = _ref.concurrentRoot,
    unstable_validateStringsRenderedWithinText = _ref.unstable_validateStringsRenderedWithinText,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var testRendererOptions = Object.assign({}, rest, {
    unstable_isConcurrent: concurrentRoot != null ? concurrentRoot : (0, _config.getConfig)().concurrentRoot
  });
  if (unstable_validateStringsRenderedWithinText) {
    return renderWithStringValidation(component, Object.assign({
      wrapper: Wrapper
    }, testRendererOptions));
  }
  var wrap = function wrap(element) {
    return Wrapper ? React.createElement(Wrapper, null, element) : element;
  };
  var renderer = (0, _renderAct.renderWithAct)(wrap(component), testRendererOptions);
  return buildRenderResult(renderer, wrap);
}
function renderWithStringValidation(component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _ref2 = options != null ? options : {},
    Wrapper = _ref2.wrapper,
    testRendererOptions = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var wrap = function wrap(element) {
    return React.createElement(React.Profiler, {
      id: "renderProfiler",
      onRender: handleRender
    }, Wrapper ? React.createElement(Wrapper, null, element) : element);
  };
  var handleRender = function handleRender(_, phase) {
    if (renderer && phase === 'update') {
      (0, _stringValidation.validateStringsRenderedWithinText)(renderer.toJSON());
    }
  };
  var renderer = (0, _renderAct.renderWithAct)(wrap(component), testRendererOptions);
  (0, _stringValidation.validateStringsRenderedWithinText)(renderer.toJSON());
  return buildRenderResult(renderer, wrap);
}
function buildRenderResult(renderer, wrap) {
  var update = updateWithAct(renderer, wrap);
  var instance = renderer.root;
  var unmount = function unmount() {
    void (0, _act.default)(function () {
      renderer.unmount();
    });
  };
  (0, _cleanup.addToCleanupQueue)(unmount);
  var result = Object.assign({}, (0, _within.getQueriesForElement)(instance), {
    update: update,
    unmount: unmount,
    rerender: update,
    toJSON: renderer.toJSON,
    debug: makeDebug(renderer),
    get root() {
      return (0, _componentTree.getHostSelves)(instance)[0];
    },
    UNSAFE_root: instance
  });
  Object.defineProperty(result, 'container', {
    enumerable: false,
    get: function get() {
      throw new Error("'container' property has been renamed to 'UNSAFE_root'.\n\n" + "Consider using 'root' property which returns root host element.");
    }
  });
  (0, _screen.setRenderResult)(result);
  return result;
}
function updateWithAct(renderer, wrap) {
  return function (component) {
    void (0, _act.default)(function () {
      renderer.update(wrap(component));
    });
  };
}
function makeDebug(renderer) {
  function debugImpl(options) {
    var _ref3 = (0, _config.getConfig)(),
      defaultDebugOptions = _ref3.defaultDebugOptions;
    var debugOptions = Object.assign({}, defaultDebugOptions, options);
    var json = renderer.toJSON();
    if (json) {
      return (0, _debug.debug)(json, debugOptions);
    }
  }
  return debugImpl;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,