05f450059bee92f642f624c8a3cc84a2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSyncState = useSyncState;
var React = _interopRequireWildcard(require("react"));
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _deepFreeze = require("./deepFreeze.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var createStore = function createStore(getInitialState) {
  var listeners = [];
  var initialized = false;
  var state;
  var getState = function getState() {
    if (initialized) {
      return state;
    }
    initialized = true;
    state = (0, _deepFreeze.deepFreeze)(getInitialState());
    return state;
  };
  var isBatching = false;
  var didUpdate = false;
  var setState = function setState(newState) {
    state = (0, _deepFreeze.deepFreeze)(newState);
    didUpdate = true;
    if (!isBatching) {
      listeners.forEach(function (listener) {
        return listener();
      });
    }
  };
  var subscribe = function subscribe(callback) {
    listeners.push(callback);
    return function () {
      var index = listeners.indexOf(callback);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  };
  var batchUpdates = function batchUpdates(callback) {
    isBatching = true;
    callback();
    isBatching = false;
    if (didUpdate) {
      didUpdate = false;
      listeners.forEach(function (listener) {
        return listener();
      });
    }
  };
  return {
    getState: getState,
    setState: setState,
    batchUpdates: batchUpdates,
    subscribe: subscribe
  };
};
function useSyncState(getInitialState) {
  var store = React.useRef(createStore(getInitialState)).current;
  var state = React.useSyncExternalStore(store.subscribe, store.getState, store.getState);
  React.useDebugValue(state);
  var pendingUpdatesRef = React.useRef([]);
  var scheduleUpdate = (0, _useLatestCallback.default)(function (callback) {
    pendingUpdatesRef.current.push(callback);
  });
  var flushUpdates = (0, _useLatestCallback.default)(function () {
    var pendingUpdates = pendingUpdatesRef.current;
    pendingUpdatesRef.current = [];
    if (pendingUpdates.length !== 0) {
      store.batchUpdates(function () {
        for (var update of pendingUpdates) {
          update();
        }
      });
    }
  });
  return {
    state: state,
    getState: store.getState,
    setState: store.setState,
    scheduleUpdate: scheduleUpdate,
    flushUpdates: flushUpdates
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl91c2VMYXRlc3RDYWxsYmFjayIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZGVlcEZyZWV6ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImNyZWF0ZVN0b3JlIiwiZ2V0SW5pdGlhbFN0YXRlIiwibGlzdGVuZXJzIiwiaW5pdGlhbGl6ZWQiLCJzdGF0ZSIsImdldFN0YXRlIiwiZGVlcEZyZWV6ZSIsImlzQmF0Y2hpbmciLCJkaWRVcGRhdGUiLCJzZXRTdGF0ZSIsIm5ld1N0YXRlIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwic3Vic2NyaWJlIiwiY2FsbGJhY2siLCJwdXNoIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiYmF0Y2hVcGRhdGVzIiwidXNlU3luY1N0YXRlIiwic3RvcmUiLCJ1c2VSZWYiLCJjdXJyZW50IiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VEZWJ1Z1ZhbHVlIiwicGVuZGluZ1VwZGF0ZXNSZWYiLCJzY2hlZHVsZVVwZGF0ZSIsInVzZUxhdGVzdENhbGxiYWNrIiwiZmx1c2hVcGRhdGVzIiwicGVuZGluZ1VwZGF0ZXMiLCJsZW5ndGgiLCJ1cGRhdGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXNlU3luY1N0YXRlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGtCQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9B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