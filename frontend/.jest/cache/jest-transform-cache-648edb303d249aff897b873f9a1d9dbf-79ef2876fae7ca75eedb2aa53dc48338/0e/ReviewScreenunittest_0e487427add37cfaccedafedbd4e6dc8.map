{"version":3,"names":["_getJestObj","mock","StyleSheet","create","styles","View","ScrollView","Image","Card","props","children","Cover","Content","SegmentedButtons","onValueChange","global","simulatePeriodChange","newPeriodValue","Button","onPress","simulateButtonClick","Title","Paragraph","useTheme","colors","primary","background","_interopRequireDefault","require","_react","_reactNative","_jsxRuntime","_require","jest","consoleSpy","spyOn","console","mockImplementation","describe","ReviewScreen","beforeEach","mockClear","resetModules","default","afterAll","mockRestore","it","expect","toBeDefined","toBe","render","jsx","not","toThrow","capturedInitialValue","React","mockImplementationOnce","initialValue","fn","toHaveBeenCalledWith","mockSetPeriod","mapSpy","Array","prototype","toHaveBeenCalled","mapCalls","calls","hasImageGridMap","some","call","length"],"sources":["ReviewScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/tests/unit/screens/ReviewScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\n\r\n// react-native 모킹 (파괴적 모킹 방지)\r\njest.mock('react-native', () => {\r\n  return {\r\n    StyleSheet: {\r\n      create: (styles) => styles,\r\n    },\r\n    View: 'View',\r\n    ScrollView: 'ScrollView',\r\n    Image: 'Image',\r\n  };\r\n});\r\n\r\n// react-native-paper 모킹\r\njest.mock('react-native-paper', () => {\r\n  const Card = function Card(props) { \r\n    return props.children || null; \r\n  };\r\n  Card.Cover = function Cover() { return null; };\r\n  Card.Content = function Content(props) { \r\n    return props.children || null; \r\n  };\r\n  \r\n  return {\r\n    SegmentedButtons: function SegmentedButtons(props) { \r\n      // 버튼 클릭 시뮬레이션을 위해 실제 동작 구현\r\n      if (props.onValueChange && global.simulatePeriodChange) {\r\n        props.onValueChange(global.newPeriodValue || 'monthly');\r\n        global.simulatePeriodChange = false;\r\n      }\r\n      return null; \r\n    },\r\n    Card,\r\n    Button: function Button(props) { \r\n      // 버튼 클릭 시뮬레이션을 위해 실제 동작 구현\r\n      if (props.onPress && global.simulateButtonClick) {\r\n        props.onPress();\r\n        global.simulateButtonClick = false;\r\n      }\r\n      return null; \r\n    },\r\n    Title: function Title(props) { return props.children || null; },\r\n    Paragraph: function Paragraph(props) { return props.children || null; },\r\n    useTheme: () => ({\r\n      colors: {\r\n        primary: '#000',\r\n        background: '#fff',\r\n      }\r\n    })\r\n  };\r\n});\r\n\r\n// 실제 컴포넌트 호출 캡처를 위한 스파이\r\nconst consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\ndescribe('ReviewScreen 단위 테스트', () => {\r\n  let ReviewScreen;\r\n  \r\n  beforeEach(() => {\r\n    // 각 테스트 전에 상태 초기화\r\n    global.simulatePeriodChange = false;\r\n    global.simulateButtonClick = false;\r\n    global.newPeriodValue = null;\r\n    consoleSpy.mockClear();\r\n    \r\n    // 매 테스트마다 모듈 새로 불러오기\r\n    jest.resetModules();\r\n    ReviewScreen = require('../../../src/screens/ReviewScreen').default;\r\n  });\r\n  \r\n  afterAll(() => {\r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('컴포넌트 모듈 자체가 존재해야 함', () => {\r\n    expect(ReviewScreen).toBeDefined();\r\n  });\r\n  \r\n  it('컴포넌트가 함수형이어야 함', () => {\r\n    expect(typeof ReviewScreen).toBe('function');\r\n  });\r\n  \r\n  it('오류 없이 렌더링되어야 함', () => {\r\n    expect(() => {\r\n      render(<ReviewScreen />);\r\n    }).not.toThrow();\r\n  });\r\n  \r\n  it('useState 훅이 올바른 초기값(weekly)으로 설정되어야 함', () => {\r\n    // useState 스파이 설정\r\n    let capturedInitialValue;\r\n    jest.spyOn(React, 'useState').mockImplementationOnce((initialValue) => {\r\n      capturedInitialValue = initialValue;\r\n      return [initialValue, jest.fn()];\r\n    });\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // 초기값 검증\r\n    expect(capturedInitialValue).toBe('weekly');\r\n  });\r\n  \r\n  it('그래프 버튼 클릭 시 console.log가 호출되어야 함', () => {\r\n    // 버튼 클릭 시뮬레이션 활성화\r\n    global.simulateButtonClick = true;\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // console.log 호출 확인\r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n  });\r\n  \r\n  it('기간 변경 시 period 상태가 올바르게 업데이트되어야 함', () => {\r\n    // 기간 변경 시뮬레이션 활성화\r\n    global.simulatePeriodChange = true;\r\n    global.newPeriodValue = 'monthly';\r\n    \r\n    // React.useState 모킹하여 setPeriod 호출 추적\r\n    const mockSetPeriod = jest.fn();\r\n    jest.spyOn(React, 'useState').mockImplementationOnce((initialValue) => {\r\n      return [initialValue, mockSetPeriod];\r\n    });\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // period 상태 변경 함수가 호출되었는지 확인\r\n    expect(mockSetPeriod).toHaveBeenCalledWith('monthly');\r\n  });\r\n  \r\n  it('이미지 그리드에 적절한 수의 이미지가 표시되어야 함', () => {\r\n    // 배열 매핑 함수를 추적하여 이미지 수 확인\r\n    const mapSpy = jest.spyOn(Array.prototype, 'map');\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // map 호출에서 이미지 배열 길이가 예상대로인지 확인\r\n    expect(mapSpy).toHaveBeenCalled();\r\n    \r\n    // 최소한 하나의 호출에서 배열 길이가 6인 경우가 있어야 함\r\n    const mapCalls = mapSpy.mock.calls;\r\n    const hasImageGridMap = mapCalls.some(call => \r\n      call[0] && call[0].length === 6 && typeof call[1] === 'function'\r\n    );\r\n    \r\n    expect(hasImageGridMap).toBe(true);\r\n    \r\n    // 스파이 정리\r\n    mapSpy.mockRestore();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}