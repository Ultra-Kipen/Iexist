0c37a52c240e1349fd51659b880be459
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  return Object.assign({}, rn, {
    Animated: Object.assign({}, rn.Animated, {
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              interpolate: jest.fn()
            };
          })
        };
      })
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Toast', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.clearAllMocks();
  });
  it('renders correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0"
      })),
      getByText = _render.getByText;
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('does not render when visible is false', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0"
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('테스트 메시지')).toBeNull();
  });
  it('renders with different background colors based on type', function () {
    var types = [{
      type: 'success',
      color: '#4CAF50'
    }, {
      type: 'error',
      color: '#F44336'
    }, {
      type: 'warning',
      color: '#FF9800'
    }, {
      type: 'info',
      color: '#2196F3'
    }];
    types.forEach(function (_ref) {
      var type = _ref.type,
        color = _ref.color;
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
          visible: true,
          message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
          type: type
        })),
        getByText = _render3.getByText;
      expect(getByText('테스트 메시지')).toBeTruthy();
    });
  });
  it('renders at the top when position is set to top', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        position: "top"
      })),
      getByText = _render4.getByText;
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('renders at the bottom by default', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0"
      })),
      getByText = _render5.getByText;
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('calls onClose after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 3000,
      onClose: onClose
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(3300);
    });
    expect(onClose).toHaveBeenCalled();
  });
  it('hides when tapped', function () {
    var onClose = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose
      })),
      getByTestId = _render6.getByTestId;
    _reactNative.fireEvent.press(getByTestId('toast-touchable'));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(300);
    });
    expect(onClose).toHaveBeenCalled();
  });
  it('renders icon when provided', function () {
    var TestIcon = function TestIcon() {
      return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uC544\uC774\uCF58"
      });
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        icon: (0, _jsxRuntime.jsx)(TestIcon, {})
      })),
      getByText = _render7.getByText;
    expect(getByText('아이콘')).toBeTruthy();
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('ToastController manages instances correctly', function () {
    var mockInstance = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockInstance);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockInstance.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    expect(mockInstance.hide).toHaveBeenCalledTimes(1);
  });
  it('ToastController handles missing instance gracefully', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,