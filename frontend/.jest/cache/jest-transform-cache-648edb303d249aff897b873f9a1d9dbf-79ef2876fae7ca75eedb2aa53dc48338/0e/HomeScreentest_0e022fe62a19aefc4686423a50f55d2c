0c5a518793af7e3d66d6028528f14df2
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
var _HomeScreen = require("../../src/screens/HomeScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò', function () {
  describe('handlePostSubmission', function () {
    it('ÎÇ¥Ïö©Í≥º Í∞êÏ†ïÏù¥ ÏûàÏùÑ Îïå trueÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = {
        label: 'ÌñâÎ≥µ',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      };
      var imageUrl = 'https://example.com/image.jpg';
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(true);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      jest.advanceTimersByTime(1000);
      expect(setIsLoading).toHaveBeenCalledWith(false);
      expect(setIsDialogVisible).toHaveBeenCalledWith(true);
    });
    it('ÎÇ¥Ïö© ÎòêÎäî Í∞êÏ†ïÏù¥ ÏóÜÏùÑ Îïå falseÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var imageUrl = 'https://example.com/image.jpg';
      var result = (0, _HomeScreen.handlePostSubmission)('', {
        label: 'ÌñâÎ≥µ',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      }, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      result = (0, _HomeScreen.handlePostSubmission)('ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º', null, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
    });
  });
  describe('handleImageUploadAction', function () {
    it('Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏÑ§Ï†ïÌï¥Ïïº Ìï®', function () {
      var setImageUrl = jest.fn();
      (0, _HomeScreen.handleImageUploadAction)(setImageUrl);
      expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    });
  });
  describe('handleLikeAction', function () {
    it('Ï¢ãÏïÑÏöî ÏàòÎ•º Ï¶ùÍ∞ÄÏãúÏºúÏïº Ìï®', function () {
      var posts = [{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 5,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }];
      var setPosts = jest.fn();
      (0, _HomeScreen.handleLikeAction)(posts, 1, setPosts);
      expect(setPosts).toHaveBeenCalled();
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].likes).toBe(6);
    });
  });
  describe('handleCommentAction', function () {
    it('ÎåìÍ∏ÄÏùÑ Ï∂îÍ∞ÄÌï¥Ïïº Ìï®', function () {
      var posts = [{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 5,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }];
      var setPosts = jest.fn();
      var commentContent = 'ÏÉà ÎåìÍ∏Ä';
      (0, _HomeScreen.handleCommentAction)(posts, 1, commentContent, setPosts);
      expect(setPosts).toHaveBeenCalled();
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].comments.length).toBe(1);
      expect(updatedPosts[0].comments[0].content).toBe('ÏÉà ÎåìÍ∏Ä');
    });
  });
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,