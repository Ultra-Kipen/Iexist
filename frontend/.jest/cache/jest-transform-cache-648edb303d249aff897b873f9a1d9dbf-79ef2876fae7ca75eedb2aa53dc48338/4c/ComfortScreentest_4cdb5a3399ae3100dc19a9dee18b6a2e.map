{"version":3,"names":["_getJestObj","mock","Card","Content","TextInput","Button","List","Section","Item","Icon","Title","Paragraph","FAB","ActivityIndicator","Chip","Text","Modal","useTheme","colors","primary","background","surface","accent","error","text","getPosts","jest","fn","mockResolvedValue","data","getBestPosts","createPost","sendMessage","message","likePost","success","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_ComfortScreen","_comfortWallService","_jsxRuntime","_require","originalConsoleError","console","mockPosts","post_id","title","content","user_id","is_anonymous","like_count","comment_count","created_at","mockBestPosts","spyOn","Alert","mockImplementation","mockNavigation","navigate","goBack","describe","beforeEach","clearAllMocks","comfortWallService","afterAll","test","render","jsx","default","navigation","waitFor","expect","toHaveBeenCalled","mockRejectedValueOnce","Error","alert","toHaveBeenCalledWith","testData","postId","messageData"],"sources":["ComfortScreen.test.tsx"],"sourcesContent":["// __tests__/screens/ComfortScreen.test.tsx\r\nimport React from 'react';\r\nimport { Alert } from 'react-native';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport ComfortScreen from '../../src/screens/ComfortScreen';\r\nimport comfortWallService from '../../src/services/api/comfortWallService';\r\n\r\n// console.error 모킹\r\nconst originalConsoleError = console.error;\r\nconsole.error = jest.fn();\r\n\r\n// 모든 react-native-paper 컴포넌트를 문자열로 모킹\r\njest.mock('react-native-paper', () => {\r\n  return {\r\n    Card: { Content: 'CardContent' },\r\n    TextInput: 'TextInput',\r\n    Button: 'Button',\r\n    List: { \r\n      Section: 'ListSection', \r\n      Item: 'ListItem', \r\n      Icon: 'ListIcon' \r\n    },\r\n    Title: 'Title',\r\n    Paragraph: 'Paragraph',\r\n    FAB: 'FAB',\r\n    ActivityIndicator: 'ActivityIndicator',\r\n    Chip: 'Chip',\r\n    Text: 'PaperText',\r\n    Modal: 'Modal',\r\n    useTheme: () => ({\r\n      colors: {\r\n        primary: '#000',\r\n        background: '#fff',\r\n        surface: '#fff',\r\n        accent: '#f1c40f',\r\n        error: '#f13a59',\r\n        text: '#000',\r\n      }\r\n    }),\r\n  };\r\n});\r\n\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'Icon');\r\n\r\n// 샘플 데이터\r\nconst mockPosts = [\r\n  {\r\n    post_id: 1,\r\n    title: '불안감이 심해요',\r\n    content: '최근에 불안감이 심해져서 잠을 잘 못자고 있어요.',\r\n    user_id: 101,\r\n    is_anonymous: true,\r\n    like_count: 5,\r\n    comment_count: 2,\r\n    created_at: '2025-04-30T10:00:00Z'\r\n  }\r\n];\r\n\r\nconst mockBestPosts = [\r\n  {\r\n    post_id: 3,\r\n    title: '인간관계 고민',\r\n    content: '친구와 갈등이 생겼는데 어떻게 해결해야 할지 모르겠어요.',\r\n    like_count: 30,\r\n    comment_count: 15\r\n  }\r\n];\r\n\r\n// comfortWallService 모킹\r\njest.mock('../../src/services/api/comfortWallService', () => ({\r\n  getPosts: jest.fn().mockResolvedValue({ data: { data: [] } }),\r\n  getBestPosts: jest.fn().mockResolvedValue({ data: { data: [] } }),\r\n  createPost: jest.fn().mockResolvedValue({ data: { data: {} } }),\r\n  sendMessage: jest.fn().mockResolvedValue({ data: { message: 'success' } }),\r\n  likePost: jest.fn().mockResolvedValue({ data: { success: true } }),\r\n}));\r\n\r\n// Alert 모킹\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n  goBack: jest.fn(),\r\n};\r\n\r\ndescribe('ComfortScreen 기본 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 기본 API 응답 설정\r\n    (comfortWallService.getPosts as jest.Mock).mockResolvedValue({ \r\n      data: { data: mockPosts } \r\n    });\r\n    (comfortWallService.getBestPosts as jest.Mock).mockResolvedValue({ \r\n      data: { data: mockBestPosts } \r\n    });\r\n  });\r\n  \r\n  afterAll(() => {\r\n    console.error = originalConsoleError;\r\n  });\r\n\r\n  // 기본 렌더링 테스트\r\n  test('컴포넌트가 오류 없이 렌더링됨', () => {\r\n    render(<ComfortScreen navigation={mockNavigation} />);\r\n    // 오류 없이 렌더링되면 테스트 통과\r\n  });\r\n\r\n  // API 호출 테스트\r\n  test('마운트 시 게시물 API 호출', async () => {\r\n    render(<ComfortScreen navigation={mockNavigation} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(comfortWallService.getPosts).toHaveBeenCalled();\r\n      expect(comfortWallService.getBestPosts).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  // API 오류 처리 테스트\r\n  test('API 오류 발생 시 경고창 표시', async () => {\r\n    (comfortWallService.getPosts as jest.Mock).mockRejectedValueOnce(\r\n      new Error('네트워크 오류')\r\n    );\r\n    \r\n    render(<ComfortScreen navigation={mockNavigation} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(Alert.alert).toHaveBeenCalledWith(\r\n        '오류', \r\n        '게시물을 불러오는 중 오류가 발생했습니다.'\r\n      );\r\n    });\r\n  });\r\n  \r\n  // API 요청 매개변수 테스트 (createPost)\r\n  test('createPost API 호출 시 올바른 데이터 전달', async () => {\r\n    const testData = {\r\n      title: '테스트 제목',\r\n      content: '테스트 내용',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.createPost(testData);\r\n    \r\n    expect(comfortWallService.createPost).toHaveBeenCalledWith(testData);\r\n  });\r\n  \r\n  // API 요청 매개변수 테스트 (sendMessage)\r\n  test('sendMessage API 호출 시 올바른 데이터 전달', async () => {\r\n    const postId = 1;\r\n    const messageData = {\r\n      message: '응원 메시지',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.sendMessage(postId, messageData);\r\n    \r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);\r\n  });\r\n  \r\n  // API 요청 매개변수 테스트 (likePost)\r\n  test('likePost API 호출 시 올바른 게시물 ID 전달', async () => {\r\n    const postId = 1;\r\n    \r\n    await comfortWallService.likePost(postId);\r\n    \r\n    expect(comfortWallService.likePost).toHaveBeenCalledWith(postId);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}