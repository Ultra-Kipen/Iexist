9471e8914b9c614ee568320c0a3c9cb9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function validateEmail(email) {
  if (!email) {
    return '이메일을 입력해주세요';
  } else if (!/\S+@\S+\.\S+/.test(email)) {
    return '유효한 이메일 주소를 입력해주세요';
  }
  return undefined;
}
function validatePassword(password) {
  if (!password) {
    return '비밀번호를 입력해주세요';
  } else if (password.length < 6) {
    return '비밀번호는 최소 6자 이상이어야 합니다';
  }
  return undefined;
}
function validateForm(email, password) {
  var errors = {};
  var emailError = validateEmail(email);
  if (emailError) {
    errors.email = emailError;
  }
  var passwordError = validatePassword(password);
  if (passwordError) {
    errors.password = passwordError;
  }
  return {
    isValid: Object.keys(errors).length === 0,
    errors: errors
  };
}
function handleLogin(_x, _x2, _x3, _x4, _x5, _x6) {
  return _handleLogin.apply(this, arguments);
}
function _handleLogin() {
  _handleLogin = (0, _asyncToGenerator2.default)(function* (email, password, onSuccess, onError, setIsLoading, login) {
    var _validateForm = validateForm(email, password),
      isValid = _validateForm.isValid,
      errors = _validateForm.errors;
    if (!isValid) {
      return;
    }
    setIsLoading(true);
    try {
      yield login({
        email: email,
        password: password
      });
      onSuccess();
    } catch (error) {
      onError(error);
    } finally {
      setIsLoading(false);
    }
  });
  return _handleLogin.apply(this, arguments);
}
describe('LoginScreen 유틸리티 함수', function () {
  describe('이메일 검증', function () {
    it('빈 이메일을 입력했을 때 에러 메시지 반환', function () {
      expect(validateEmail('')).toBe('이메일을 입력해주세요');
    });
    it('유효하지 않은 이메일 형식일 때 에러 메시지 반환', function () {
      expect(validateEmail('invalidEmail')).toBe('유효한 이메일 주소를 입력해주세요');
      expect(validateEmail('invalid@email')).toBe('유효한 이메일 주소를 입력해주세요');
      expect(validateEmail('invalid@.com')).toBe('유효한 이메일 주소를 입력해주세요');
    });
    it('유효한 이메일 형식일 때 undefined 반환', function () {
      expect(validateEmail('valid@email.com')).toBeUndefined();
      expect(validateEmail('test.user@example.co.kr')).toBeUndefined();
    });
  });
  describe('비밀번호 검증', function () {
    it('빈 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      expect(validatePassword('')).toBe('비밀번호를 입력해주세요');
    });
    it('짧은 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      expect(validatePassword('12345')).toBe('비밀번호는 최소 6자 이상이어야 합니다');
    });
    it('유효한 길이의 비밀번호를 입력했을 때 undefined 반환', function () {
      expect(validatePassword('123456')).toBeUndefined();
      expect(validatePassword('securePassword123')).toBeUndefined();
    });
  });
  describe('폼 검증', function () {
    it('빈 폼을 제출했을 때 두 필드 모두 에러 메시지 반환', function () {
      var result = validateForm('', '');
      expect(result.isValid).toBe(false);
      expect(result.errors.email).toBe('이메일을 입력해주세요');
      expect(result.errors.password).toBe('비밀번호를 입력해주세요');
    });
    it('잘못된 이메일과 짧은 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      var result = validateForm('invalid', '12345');
      expect(result.isValid).toBe(false);
      expect(result.errors.email).toBe('유효한 이메일 주소를 입력해주세요');
      expect(result.errors.password).toBe('비밀번호는 최소 6자 이상이어야 합니다');
    });
    it('유효한 이메일만 입력했을 때 비밀번호 에러 메시지 반환', function () {
      var result = validateForm('valid@email.com', '');
      expect(result.isValid).toBe(false);
      expect(result.errors.email).toBeUndefined();
      expect(result.errors.password).toBe('비밀번호를 입력해주세요');
    });
    it('유효한 비밀번호만 입력했을 때 이메일 에러 메시지 반환', function () {
      var result = validateForm('', 'password123');
      expect(result.isValid).toBe(false);
      expect(result.errors.email).toBe('이메일을 입력해주세요');
      expect(result.errors.password).toBeUndefined();
    });
    it('유효한 이메일과 비밀번호를 입력했을 때 유효성 확인', function () {
      var result = validateForm('valid@email.com', 'password123');
      expect(result.isValid).toBe(true);
      expect(result.errors).toEqual({});
    });
  });
  describe('로그인 처리', function () {
    beforeEach(function () {
      jest.clearAllMocks();
    });
    it('유효하지 않은 폼을 제출했을 때 로그인 시도하지 않음', (0, _asyncToGenerator2.default)(function* () {
      var onSuccess = jest.fn();
      var onError = jest.fn();
      var setIsLoading = jest.fn();
      var login = jest.fn();
      yield handleLogin('', '', onSuccess, onError, setIsLoading, login);
      expect(login).not.toHaveBeenCalled();
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(onSuccess).not.toHaveBeenCalled();
      expect(onError).not.toHaveBeenCalled();
    }));
    it('로그인 성공 시 onSuccess 콜백 실행', (0, _asyncToGenerator2.default)(function* () {
      var onSuccess = jest.fn();
      var onError = jest.fn();
      var setIsLoading = jest.fn();
      var login = jest.fn().mockResolvedValue({
        success: true
      });
      yield handleLogin('valid@email.com', 'password123', onSuccess, onError, setIsLoading, login);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      expect(login).toHaveBeenCalledWith({
        email: 'valid@email.com',
        password: 'password123'
      });
      expect(onSuccess).toHaveBeenCalled();
      expect(onError).not.toHaveBeenCalled();
      expect(setIsLoading).toHaveBeenCalledWith(false);
    }));
    it('로그인 실패 시 onError 콜백 실행', (0, _asyncToGenerator2.default)(function* () {
      var onSuccess = jest.fn();
      var onError = jest.fn();
      var setIsLoading = jest.fn();
      var mockError = new Error('인증 실패');
      var login = jest.fn().mockRejectedValue(mockError);
      yield handleLogin('valid@email.com', 'password123', onSuccess, onError, setIsLoading, login);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      expect(login).toHaveBeenCalledWith({
        email: 'valid@email.com',
        password: 'password123'
      });
      expect(onSuccess).not.toHaveBeenCalled();
      expect(onError).toHaveBeenCalledWith(mockError);
      expect(setIsLoading).toHaveBeenCalledWith(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,