893bbc8811d5fb4e49c4b8289d47954d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionSelector = _interopRequireDefault(require("../../src/components/EmotionSelector"));
var _jsxRuntime = require("react/jsx-runtime");
describe('EmotionSelector 컴포넌트', function () {
  var mockEmotions = [{
    emotion_id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '감사',
    icon: 'hand-heart',
    color: '#FF69B4'
  }];
  var mockOnSelectEmotion = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('감정 선택기가 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [],
        onSelectEmotion: mockOnSelectEmotion
      })),
      getByText = _render.getByText;
    expect(getByText('행복')).toBeDefined();
    expect(getByText('감사')).toBeDefined();
  });
  it('감정 아이템을 클릭하면 onSelectEmotion이 호출되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [],
        onSelectEmotion: mockOnSelectEmotion
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('행복'));
    expect(mockOnSelectEmotion).toHaveBeenCalledWith(mockEmotions[0]);
  });
  it('이미 선택된 감정이 강조되어야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [mockEmotions[0]],
        onSelectEmotion: mockOnSelectEmotion
      })),
      getByTestId = _render3.getByTestId;
    var selectedItem = getByTestId(`emotion-item-${mockEmotions[0].emotion_id}`);
    expect(selectedItem).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9FbW90aW9uU2VsZWN0b3IiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwibW9ja0Vtb3Rpb25zIiwiZW1vdGlvbl9pZCIsIm5hbWUiLCJpY29uIiwiY29sb3IiLCJtb2NrT25TZWxlY3RFbW90aW9uIiwiamVzdCIsImZuIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0IiwiZW1vdGlvbnMiLCJzZWxlY3RlZEVtb3Rpb25zIiwib25TZWxlY3RFbW90aW9uIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJfcmVuZGVyMiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyMyIsImdldEJ5VGVzdElkIiwic2VsZWN0ZWRJdGVtIl0sInNvdXJjZXMiOlsiRW1vdGlvblNlbGVjdG9yLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9jb21wb25lbnRzL0Vtb3Rpb25TZWxlY3Rvci50ZXN0LnRzeFxyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBFbW90aW9uU2VsZWN0b3IgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvRW1vdGlvblNlbGVjdG9yJztcclxuXHJcbmRlc2NyaWJlKCdFbW90aW9uU2VsZWN0b3Ig7Lu07Y+s64SM7Yq4JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tFbW90aW9ucyA9IFtcclxuICAgIHsgZW1vdGlvbl9pZDogMSwgbmFtZTogJ+2WieuztScsIGljb246ICdlbW90aWNvbi1oYXBweS1vdXRsaW5lJywgY29sb3I6ICcjRkZENzAwJyB9LFxyXG4gICAgeyBlbW90aW9uX2lkOiAyLCBuYW1lOiAn6rCQ7IKsJywgaWNvbjogJ2hhbmQtaGVhcnQnLCBjb2xvcjogJyNGRjY5QjQnIH0sXHJcbiAgXTtcclxuICBcclxuICBjb25zdCBtb2NrT25TZWxlY3RFbW90aW9uID0gamVzdC5mbigpO1xyXG4gIFxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfqsJDsoJUg7ISg7YOd6riw6rCAIOyYrOuwlOultOqyjCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25TZWxlY3RvclxyXG4gICAgICAgIGVtb3Rpb25zPXttb2NrRW1vdGlvbnN9XHJcbiAgICAgICAgc2VsZWN0ZWRFbW90aW9ucz17W119XHJcbiAgICAgICAgb25TZWxlY3RFbW90aW9uPXttb2NrT25TZWxlY3RFbW90aW9ufVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7ZaJ67O1JykpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfqsJDsgqwnKSkudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+qwkOyglSDslYTsnbTthZzsnYQg7YG066at7ZWY66m0IG9uU2VsZWN0RW1vdGlvbuydtCDtmLjstpzrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25TZWxlY3RvclxyXG4gICAgICAgIGVtb3Rpb25zPXttb2NrRW1vdGlvbnN9XHJcbiAgICAgICAgc2VsZWN0ZWRFbW90aW9ucz17W119XHJcbiAgICAgICAgb25TZWxlY3RFbW90aW9uPXttb2NrT25TZWxlY3RFbW90aW9ufVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGV4dCgn7ZaJ67O1JykpO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja09uU2VsZWN0RW1vdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0Vtb3Rpb25zWzBdKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+ydtOuvuCDshKDtg53rkJwg6rCQ7KCV7J20IOqwleyhsOuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uU2VsZWN0b3JcclxuICAgICAgICBlbW90aW9ucz17bW9ja0Vtb3Rpb25zfVxyXG4gICAgICAgIHNlbGVjdGVkRW1vdGlvbnM9e1ttb2NrRW1vdGlvbnNbMF1dfVxyXG4gICAgICAgIG9uU2VsZWN0RW1vdGlvbj17bW9ja09uU2VsZWN0RW1vdGlvbn1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOyEoO2DneuQnCDqsJDsoJUg7JWE7J207YWc7JeQIHRlc3RJRCDsho3shLHsnbQg7J6I64uk6rOgIOqwgOygle2VqeuLiOuLpC5cclxuICAgIC8vIEVtb3Rpb25TZWxlY3RvciDsu7Ttj6zrhIztirjsl5DshJwg7J2065+wIO2YleyLneycvOuhnCB0ZXN0SUTrpbwg7ISk7KCV7ZW07JW8IO2VqeuLiOuLpC5cclxuICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IGdldEJ5VGVzdElkKGBlbW90aW9uLWl0ZW0tJHttb2NrRW1vdGlvbnNbMF0uZW1vdGlvbl9pZH1gKTtcclxuICAgIGV4cGVjdChzZWxlY3RlZEl0ZW0pLnRvQmVEZWZpbmVkKCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IjtBQUVBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGdCQUFBLEdBQUFILHNCQUFBLENBQUFD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