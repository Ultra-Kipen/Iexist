60872dec79d1f1369a8c9af56b7a667e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PostItem = _interopRequireDefault(require("../../src/components/PostItem"));
var _jsxRuntime = require("react/jsx-runtime");
describe('PostItem Component', function () {
  var mockOnPress = jest.fn();
  var mockOnLikePress = jest.fn();
  var mockOnCommentPress = jest.fn();
  var defaultProps = {
    id: 1,
    content: 'Ïò§ÎäòÏùÄ Ï†ïÎßê ÌñâÎ≥µÌïú ÌïòÎ£®ÏòÄÏñ¥Ïöî!',
    userName: 'ÏÇ¨Ïö©Ïûê1',
    isAnonymous: false,
    createdAt: '2025-04-12T14:22:30Z',
    likeCount: 5,
    commentCount: 2,
    imageUrl: 'https://example.com/image1.jpg',
    emotions: [{
      id: 1,
      name: 'ÌñâÎ≥µ',
      color: '#FFD700'
    }],
    onPress: mockOnPress,
    onLikePress: mockOnLikePress,
    onCommentPress: mockOnCommentPress,
    isLiked: false
  };
  beforeEach(function () {
    mockOnPress.mockClear();
    mockOnLikePress.mockClear();
    mockOnCommentPress.mockClear();
  });
  it('renders post content correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render.getByText;
    expect(getByText(defaultProps.content)).toBeTruthy();
  });
  it('displays username correctly', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render2.getByText;
    expect(getByText(defaultProps.userName)).toBeTruthy();
  });
  it('displays anonymous instead of username when isAnonymous is true', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps, {
        isAnonymous: true
      }))),
      getByText = _render3.getByText;
    expect(getByText('ÏùµÎ™Ö')).toBeTruthy();
  });
  it('renders emotion tags correctly', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render4.getByText;
    expect(getByText('ÌñâÎ≥µ')).toBeTruthy();
  });
  it('calls onPress when post is pressed', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText(defaultProps.content));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('calls onLikePress when like button is pressed', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText('‚ô°'));
    expect(mockOnLikePress).toHaveBeenCalledTimes(1);
  });
  it('calls onCommentPress when comment button is pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render7.getByText;
    _reactNative.fireEvent.press(getByText('üí¨'));
    expect(mockOnCommentPress).toHaveBeenCalledTimes(1);
  });
  it('shows like count when greater than 0', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps))),
      getByText = _render8.getByText;
    expect(getByText('5')).toBeTruthy();
  });
  it('shows different heart icon when liked', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostItem.default, Object.assign({}, defaultProps, {
        isLiked: true
      }))),
      getByText = _render9.getByText;
    expect(getByText('‚ô•')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,