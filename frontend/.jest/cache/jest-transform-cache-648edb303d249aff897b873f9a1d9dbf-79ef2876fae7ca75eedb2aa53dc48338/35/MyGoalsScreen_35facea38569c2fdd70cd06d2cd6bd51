bf6a58a7a7d6a379126eb74e953995fd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _goalService = _interopRequireDefault(require("../services/api/goalService"));
var _emotionService = _interopRequireDefault(require("../services/api/emotionService"));
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _Card = _interopRequireDefault(require("../components/Card"));
var _Button = _interopRequireDefault(require("../components/Button"));
var _datetimepicker = _interopRequireDefault(require("@react-native-community/datetimepicker"));
var _EmotionSelector = _interopRequireDefault(require("../components/EmotionSelector"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MyGoalsScreen = function MyGoalsScreen() {
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    goals = _useState2[0],
    setGoals = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    emotions = _useState4[0],
    setEmotions = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    refreshing = _useState8[0],
    setRefreshing = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    error = _useState10[0],
    setError = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    showCreateForm = _useState12[0],
    setShowCreateForm = _useState12[1];
  var _useState13 = (0, _react.useState)(null),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    selectedEmotionId = _useState14[0],
    setSelectedEmotionId = _useState14[1];
  var _useState15 = (0, _react.useState)(new Date()),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    startDate = _useState16[0],
    setStartDate = _useState16[1];
  var _useState17 = (0, _react.useState)(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    endDate = _useState18[0],
    setEndDate = _useState18[1];
  var _useState19 = (0, _react.useState)(false),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    showStartDatePicker = _useState20[0],
    setShowStartDatePicker = _useState20[1];
  var _useState21 = (0, _react.useState)(false),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    showEndDatePicker = _useState22[0],
    setShowEndDatePicker = _useState22[1];
  var _useState23 = (0, _react.useState)(false),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    submitting = _useState24[0],
    setSubmitting = _useState24[1];
  (0, _react.useEffect)(function () {
    fetchData();
  }, []);
  var fetchData = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      try {
        if (refresh) {
          setRefreshing(true);
        } else {
          setLoading(true);
        }
        setError(null);
        var _yield$Promise$all = yield Promise.all([_goalService.default.getGoals(), _emotionService.default.getAllEmotions()]),
          _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2),
          goalsResponse = _yield$Promise$all2[0],
          emotionsResponse = _yield$Promise$all2[1];
        setGoals(goalsResponse.data.data);
        setEmotions(emotionsResponse.data.data);
      } catch (err) {
        console.error('데이터 로딩 오류:', err);
        setError('데이터를 불러오는 중 오류가 발생했습니다.');
      } finally {
        setLoading(false);
        setRefreshing(false);
      }
    });
    return function fetchData() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleCreateGoal = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!selectedEmotionId) {
        _reactNative.Alert.alert('알림', '목표 감정을 선택해주세요.');
        return;
      }
      try {
        setSubmitting(true);
        var response = yield _goalService.default.createGoal({
          target_emotion_id: selectedEmotionId,
          start_date: startDate.toISOString().split('T')[0],
          end_date: endDate.toISOString().split('T')[0]
        });
        setGoals([].concat((0, _toConsumableArray2.default)(goals), [response.data.data]));
        resetForm();
        _reactNative.Alert.alert('성공', '새로운 감정 목표가 생성되었습니다.');
      } catch (err) {
        console.error('목표 생성 오류:', err);
        _reactNative.Alert.alert('오류', '목표 생성 중 문제가 발생했습니다.');
      } finally {
        setSubmitting(false);
      }
    });
    return function handleCreateGoal() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleDeleteGoal = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (goalId) {
      _reactNative.Alert.alert('목표 삭제', '정말 이 목표를 삭제하시겠습니까?', [{
        text: '취소',
        style: 'cancel'
      }, {
        text: '삭제',
        style: 'destructive',
        onPress: function () {
          var _onPress = (0, _asyncToGenerator2.default)(function* () {
            try {
              yield _goalService.default.deleteGoal(goalId);
              setGoals(goals.filter(function (goal) {
                return goal.goal_id !== goalId;
              }));
              _reactNative.Alert.alert('성공', '목표가 삭제되었습니다.');
            } catch (err) {
              console.error('목표 삭제 오류:', err);
              _reactNative.Alert.alert('오류', '목표 삭제 중 문제가 발생했습니다.');
            }
          });
          function onPress() {
            return _onPress.apply(this, arguments);
          }
          return onPress;
        }()
      }]);
    });
    return function handleDeleteGoal(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var resetForm = function resetForm() {
    setSelectedEmotionId(null);
    setStartDate(new Date());
    setEndDate(new Date(Date.now() + 30 * 24 * 60 * 60 * 1000));
    setShowCreateForm(false);
  };
  var handleEmotionSelect = function handleEmotionSelect(emotionId) {
    setSelectedEmotionId(emotionId === selectedEmotionId ? null : emotionId);
  };
  var handleStartDateChange = function handleStartDateChange(event, selectedDate) {
    setShowStartDatePicker(false);
    if (selectedDate) {
      setStartDate(selectedDate);
    }
  };
  var handleEndDateChange = function handleEndDateChange(event, selectedDate) {
    setShowEndDatePicker(false);
    if (selectedDate) {
      setEndDate(selectedDate);
    }
  };
  var formatDate = function formatDate(dateString) {
    var date = new Date(dateString);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };
  var getEmotionById = function getEmotionById(emotionId) {
    return emotions.find(function (emotion) {
      return emotion.emotion_id === emotionId;
    });
  };
  var renderGoalItem = function renderGoalItem(_ref4) {
    var item = _ref4.item;
    var emotion = getEmotionById(item.target_emotion_id);
    var now = new Date();
    var end = new Date(item.end_date);
    var isActive = now <= end;
    var daysLeft = Math.max(0, Math.ceil((end.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)));
    return (0, _jsxRuntime.jsxs)(_Card.default, {
      style: styles.goalCard,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.goalHeader,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.emotionTag, {
            backgroundColor: `${item.emotion_color}20`
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.emotionText, {
              color: item.emotion_color
            }],
            children: item.emotion_name
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return handleDeleteGoal(item.goal_id);
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.deleteIcon,
            children: "\uD83D\uDDD1\uFE0F"
          })
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.goalDates,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.goalDate,
          children: [formatDate(item.start_date), " ~ ", formatDate(item.end_date)]
        }), isActive ? (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.daysLeft,
          children: ["\uB0A8\uC740 \uAE30\uAC04: ", daysLeft, "\uC77C"]
        }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.completed,
          children: "\uC644\uB8CC\uB428"
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.progressContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.progressBar,
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.progressFill, {
              width: `${item.progress}%`,
              backgroundColor: item.emotion_color
            }]
          })
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.progressText,
          children: [item.progress, "%"]
        })]
      })]
    });
  };
  if (loading && !refreshing) {
    return (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {
      testID: "loading-indicator",
      text: "\uBAA9\uD45C \uB370\uC774\uD130 \uB85C\uB529 \uC911..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "\uB098\uC758 \uAC10\uC815 \uBAA9\uD45C"
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.addButton,
        onPress: function onPress() {
          return setShowCreateForm(!showCreateForm);
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.addButtonText,
          children: showCreateForm ? '취소' : '새 목표 추가'
        })
      })]
    }), error && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: error
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uB2E4\uC2DC \uC2DC\uB3C4",
        onPress: function onPress() {
          return fetchData(true);
        },
        type: "primary"
      })]
    }), showCreateForm && (0, _jsxRuntime.jsxs)(_Card.default, {
      title: "\uC0C8 \uAC10\uC815 \uBAA9\uD45C \uC0DD\uC131",
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.formLabel,
        children: "\uBAA9\uD45C \uAC10\uC815"
      }), (0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: emotions.map(function (emotion) {
          return {
            id: emotion.emotion_id,
            name: emotion.name,
            icon: emotion.icon,
            color: emotion.color
          };
        }),
        selectedEmotions: selectedEmotionId ? [selectedEmotionId] : [],
        onSelect: handleEmotionSelect,
        multiple: false
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.dateContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.dateField,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.formLabel,
            children: "\uC2DC\uC791\uC77C"
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.dateButton,
            onPress: function onPress() {
              return setShowStartDatePicker(true);
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              children: formatDate(startDate.toISOString())
            })
          }), showStartDatePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
            value: startDate,
            mode: "date",
            display: "default",
            onChange: handleStartDateChange,
            minimumDate: new Date()
          })]
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.dateField,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.formLabel,
            children: "\uC885\uB8CC\uC77C"
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.dateButton,
            onPress: function onPress() {
              return setShowEndDatePicker(true);
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              children: formatDate(endDate.toISOString())
            })
          }), showEndDatePicker && (0, _jsxRuntime.jsx)(_datetimepicker.default, {
            value: endDate,
            mode: "date",
            display: "default",
            onChange: handleEndDateChange,
            minimumDate: startDate
          })]
        })]
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uBAA9\uD45C \uC0DD\uC131\uD558\uAE30",
        onPress: handleCreateGoal,
        type: "primary",
        loading: submitting,
        disabled: !selectedEmotionId,
        style: styles.submitButton
      })]
    }), goals.length > 0 ? (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: goals,
      renderItem: renderGoalItem,
      keyExtractor: function keyExtractor(item) {
        return item.goal_id.toString();
      },
      contentContainerStyle: styles.goalsList,
      onRefresh: function onRefresh() {
        return fetchData(true);
      },
      refreshing: refreshing
    }) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.emptyContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyText,
        children: "\uC544\uC9C1 \uC124\uC815\uB41C \uAC10\uC815 \uBAA9\uD45C\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4."
      }), !showCreateForm && (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uC0C8 \uBAA9\uD45C \uCD94\uAC00\uD558\uAE30",
        onPress: function onPress() {
          return setShowCreateForm(true);
        },
        type: "primary",
        style: styles.emptyButton
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F7F7F7'
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333333'
  },
  addButton: {
    paddingVertical: 6,
    paddingHorizontal: 12,
    backgroundColor: '#4A90E2',
    borderRadius: 16
  },
  addButtonText: {
    color: '#FFFFFF',
    fontWeight: '500',
    fontSize: 14
  },
  goalsList: {
    padding: 16
  },
  goalCard: {
    marginBottom: 16
  },
  goalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  emotionTag: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 16
  },
  emotionText: {
    fontSize: 14,
    fontWeight: '600'
  },
  deleteIcon: {
    fontSize: 18
  },
  goalDates: {
    marginBottom: 12
  },
  goalDate: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 4
  },
  daysLeft: {
    fontSize: 14,
    fontWeight: '500',
    color: '#4A90E2'
  },
  completed: {
    fontSize: 14,
    fontWeight: '500',
    color: '#27AE60'
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  progressBar: {
    flex: 1,
    height: 8,
    backgroundColor: '#E0E0E0',
    borderRadius: 4,
    overflow: 'hidden',
    marginRight: 8
  },
  progressFill: {
    height: '100%',
    borderRadius: 4
  },
  progressText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#666666',
    width: 40,
    textAlign: 'right'
  },
  formLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333333',
    marginBottom: 8
  },
  dateContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 16
  },
  dateField: {
    flex: 1,
    marginRight: 8
  },
  dateButton: {
    height: 40,
    borderWidth: 1,
    borderColor: '#DDDDDD',
    borderRadius: 8,
    paddingHorizontal: 12,
    justifyContent: 'center'
  },
  submitButton: {
    marginTop: 24
  },
  errorContainer: {
    padding: 20,
    alignItems: 'center'
  },
  errorText: {
    color: '#FF6B6B',
    fontSize: 16,
    marginBottom: 16,
    textAlign: 'center'
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  emptyText: {
    fontSize: 16,
    color: '#999999',
    marginBottom: 16,
    textAlign: 'center'
  },
  emptyButton: {
    width: 200
  }
});
var _default = exports.default = MyGoalsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,