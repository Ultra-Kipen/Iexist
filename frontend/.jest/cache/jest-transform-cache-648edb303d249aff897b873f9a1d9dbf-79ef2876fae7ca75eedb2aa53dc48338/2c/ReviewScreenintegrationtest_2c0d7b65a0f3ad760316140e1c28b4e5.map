{"version":3,"names":["_getJestObj","mock","useTheme","jest","fn","mockReturnValue","colors","primary","background","SegmentedButtons","Card","Button","Text","__esModule","default","_interopRequireDefault","require","_react","_reactNative","_reactNative2","_jsxRuntime","_require8","TestView","props","jsx","View","Object","assign","MockReviewScreen","jsxs","ScrollView","style","flex","padding","testID","children","value","onValueChange","buttons","label","flexDirection","flexWrap","justifyContent","Array","fill","map","_","index","width","marginBottom","onPress","console","log","describe","beforeEach","resetModules","reviewScreenModule","it","_require","ReviewScreen","expect","render","not","toThrow","_require2","_render","getByTestId","getAllByTestId","toBeTruthy","length","toBe","_require3","_render2","segmentedButtons","_require4","_render3","imageGridView","toEqual","objectContaining","cards","consoleSpy","spyOn","_require5","_render4","graphButton","toHaveBeenCalledWith","mockRestore","_require6","_render5","scrollView","_require7","_render6"],"sources":["ReviewScreen.integration.test.tsx"],"sourcesContent":["// root/frontend/tests/integration/screens/ReviewScreen.integration.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { View, ScrollView } from 'react-native';\r\n\r\n// 테스트 대상 컴포넌트 소스와 의존성을 모킹\r\njest.mock('react-native-paper', () => ({\r\n  useTheme: jest.fn().mockReturnValue({\r\n    colors: { primary: '#000', background: '#fff' }\r\n  }),\r\n  SegmentedButtons: 'SegmentedButtons',\r\n  Card: 'Card',\r\n  Button: 'Button',\r\n  Text: 'Text',\r\n}));\r\n\r\n// 커스텀 컴포넌트 타입 정의\r\ninterface TestProps {\r\n  testID?: string;\r\n  style?: any;\r\n  value?: string;\r\n  onValueChange?: () => void;\r\n  buttons?: Array<{value: string, label: string}>;\r\n  onPress?: () => void;\r\n  children?: React.ReactNode;\r\n}\r\n\r\n// TypeScript가 인식할 수 있도록 타입 캐스팅\r\nconst TestView = (props: TestProps) => <View {...props as any} />;\r\n\r\n// MockReviewScreen 컴포넌트 생성\r\nconst MockReviewScreen = () => (\r\n  <ScrollView style={{ flex: 1, padding: 16 }} testID=\"scrollView\">\r\n    <View testID=\"segmentedButtonsContainer\">\r\n      <TestView \r\n        testID=\"segmentedButtons\"\r\n        value=\"weekly\"\r\n        onValueChange={() => {}}\r\n        buttons={[\r\n          { value: 'weekly', label: '주간' },\r\n          { value: 'monthly', label: '월간' },\r\n        ]}\r\n      />\r\n    </View>\r\n    <View \r\n      style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}\r\n      testID=\"imageGrid\"\r\n    >\r\n      {Array(6).fill(0).map((_, index) => (\r\n        <TestView key={index} style={{ width: '48%', marginBottom: 16 }} testID=\"card\">\r\n          <View />\r\n        </TestView>\r\n      ))}\r\n    </View>\r\n    <TestView \r\n      testID=\"graphButton\" \r\n      onPress={() => console.log('Show emotion graph')}\r\n    >\r\n      감정 변화 그래프 보기\r\n    </TestView>\r\n  </ScrollView>\r\n);\r\n\r\n// 원래 컴포넌트를 모킹된 컴포넌트로 대체\r\njest.mock('../../../src/screens/ReviewScreen', () => {\r\n  return {\r\n    __esModule: true,\r\n    default: () => null\r\n  };\r\n});\r\n\r\n// 테스트 시작\r\ndescribe('ReviewScreen 통합 테스트', () => {\r\n  // 각 테스트 전에 ReviewScreen 모듈 교체\r\n  beforeEach(() => {\r\n    jest.resetModules();\r\n    const reviewScreenModule = require('../../../src/screens/ReviewScreen');\r\n    reviewScreenModule.default = MockReviewScreen;\r\n  });\r\n\r\n  it('컴포넌트가 네비게이션 환경에서 렌더링 되어야 함', () => {\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    expect(() => render(<ReviewScreen />)).not.toThrow();\r\n  });\r\n  \r\n  it('모든 주요 UI 요소가 렌더링되어야 함', () => {\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    expect(getByTestId('scrollView')).toBeTruthy();\r\n    expect(getByTestId('segmentedButtons')).toBeTruthy();\r\n    expect(getByTestId('imageGrid')).toBeTruthy();\r\n    expect(getAllByTestId('card').length).toBe(6);\r\n    expect(getByTestId('graphButton')).toBeTruthy();\r\n  });\r\n  \r\n  it('기간 선택 버튼이 존재하고 상태를 관리해야 함', () => {\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    const segmentedButtons = getByTestId('segmentedButtons');\r\n    expect(segmentedButtons.props.value).toBe('weekly');\r\n    expect(typeof segmentedButtons.props.onValueChange).toBe('function');\r\n  });\r\n  \r\n  it('이미지 그리드가 View 컴포넌트 내에 존재해야 함', () => {\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    const imageGridView = getByTestId('imageGrid');\r\n    expect(imageGridView).toBeTruthy();\r\n    expect(imageGridView.props.style).toEqual(expect.objectContaining({\r\n      flexDirection: 'row',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-between',\r\n    }));\r\n    \r\n    const cards = getAllByTestId('card');\r\n    expect(cards.length).toBe(6);\r\n  });\r\n  \r\n  it('감정 변화 그래프 버튼이 클릭되면 콘솔 로그가 출력되어야 함', () => {\r\n    const consoleSpy = jest.spyOn(console, 'log');\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    const graphButton = getByTestId('graphButton');\r\n    graphButton.props.onPress();\r\n    \r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('스타일이 올바르게 적용되어야 함', () => {\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    const scrollView = getByTestId('scrollView');\r\n    expect(scrollView.props.style).toEqual(expect.objectContaining({\r\n      flex: 1,\r\n      padding: 16,\r\n    }));\r\n    \r\n    const imageGridView = getByTestId('imageGrid');\r\n    expect(imageGridView.props.style).toEqual(expect.objectContaining({\r\n      flexDirection: 'row',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-between',\r\n    }));\r\n    \r\n    const cards = getAllByTestId('card');\r\n    if (cards.length > 0) {\r\n      expect(cards[0].props.style).toEqual(expect.objectContaining({\r\n        width: '48%',\r\n        marginBottom: 16,\r\n      }));\r\n    }\r\n  });\r\n  \r\n  it('SegmentedButtons의 두 옵션이 주간과 월간으로 표시되어야 함', () => {\r\n    const { default: ReviewScreen } = require('../../../src/screens/ReviewScreen');\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    const segmentedButtons = getByTestId('segmentedButtons');\r\n    expect(segmentedButtons.props.buttons).toEqual([\r\n      { value: 'weekly', label: '주간' },\r\n      { value: 'monthly', label: '월간' },\r\n    ]);\r\n  });\r\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE;EAAA,OAAO;IACrCC,QAAQ,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,eAAe,CAAC;MAClCC,MAAM,EAAE;QAAEC,OAAO,EAAE,MAAM;QAAEC,UAAU,EAAE;MAAO;IAChD,CAAC,CAAC;IACFC,gBAAgB,EAAE,kBAAkB;IACpCC,IAAI,EAAE,MAAM;IACZC,MAAM,EAAE,QAAQ;IAChBC,IAAI,EAAE;EACR,CAAC;AAAA,CAAC,CAAC;AAkDHZ,WAAA,GAAKC,IAAI,sCAAsC,YAAM;EACnD,OAAO;IACLY,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE,SAATA,QAAOA,CAAA;MAAA,OAAQ,IAAI;IAAA;EACrB,CAAC;AACH,CAAC,CAAC;AAAC,IAAAC,sBAAA,GAAAC,OAAA;AApEH,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AAAgD,IAAAI,WAAA,GAAAJ,OAAA;AAAA,SAAAhB,YAAA;EAAA,IAAAqB,SAAA,GAAAL,OAAA;IAAAb,IAAA,GAAAkB,SAAA,CAAAlB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAyBhD,IAAMmB,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,KAAgB;EAAA,OAAK,IAAAH,WAAA,CAAAI,GAAA,EAACL,aAAA,CAAAM,IAAI,EAAAC,MAAA,CAAAC,MAAA,KAAKJ,KAAK,CAAU,CAAC;AAAA;AAGjE,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA;EAAA,OACpB,IAAAR,WAAA,CAAAS,IAAA,EAACV,aAAA,CAAAW,UAAU;IAACC,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAG,CAAE;IAACC,MAAM,EAAC,YAAY;IAAAC,QAAA,GAC9D,IAAAf,WAAA,CAAAI,GAAA,EAACL,aAAA,CAAAM,IAAI;MAACS,MAAM,EAAC,2BAA2B;MAAAC,QAAA,EACtC,IAAAf,WAAA,CAAAI,GAAA,EAACF,QAAQ;QACPY,MAAM,EAAC,kBAAkB;QACzBE,KAAK,EAAC,QAAQ;QACdC,aAAa,EAAE,SAAfA,aAAaA,CAAA,EAAQ,CAAC,CAAE;QACxBC,OAAO,EAAE,CACP;UAAEF,KAAK,EAAE,QAAQ;UAAEG,KAAK,EAAE;QAAK,CAAC,EAChC;UAAEH,KAAK,EAAE,SAAS;UAAEG,KAAK,EAAE;QAAK,CAAC;MACjC,CACH;IAAC,CACE,CAAC,EACP,IAAAnB,WAAA,CAAAI,GAAA,EAACL,aAAA,CAAAM,IAAI;MACHM,KAAK,EAAE;QAAES,aAAa,EAAE,KAAK;QAAEC,QAAQ,EAAE,MAAM;QAAEC,cAAc,EAAE;MAAgB,CAAE;MACnFR,MAAM,EAAC,WAAW;MAAAC,QAAA,EAEjBQ,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,UAACC,CAAC,EAAEC,KAAK;QAAA,OAC7B,IAAA3B,WAAA,CAAAI,GAAA,EAACF,QAAQ;UAAaS,KAAK,EAAE;YAAEiB,KAAK,EAAE,KAAK;YAAEC,YAAY,EAAE;UAAG,CAAE;UAACf,MAAM,EAAC,MAAM;UAAAC,QAAA,EAC5E,IAAAf,WAAA,CAAAI,GAAA,EAACL,aAAA,CAAAM,IAAI,IAAE;QAAC,GADKsB,KAEL,CAAC;MAAA,CACZ;IAAC,CACE,CAAC,EACP,IAAA3B,WAAA,CAAAI,GAAA,EAACF,QAAQ;MACPY,MAAM,EAAC,aAAa;MACpBgB,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MAAA,CAAC;MAAAjB,QAAA,EAClD;IAED,CAAU,CAAC;EAAA,CACD,CAAC;AAAA,CACd;AAWDkB,QAAQ,CAAC,qBAAqB,EAAE,YAAM;EAEpCC,UAAU,CAAC,YAAM;IACfnD,IAAI,CAACoD,YAAY,CAAC,CAAC;IACnB,IAAMC,kBAAkB,GAAGxC,OAAO,oCAAoC,CAAC;IACvEwC,kBAAkB,CAAC1C,OAAO,GAAGc,gBAAgB;EAC/C,CAAC,CAAC;EAEF6B,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACrC,IAAAC,QAAA,GAAkC1C,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAAD,QAAA,CAArB5C,OAAO;IACf8C,MAAM,CAAC;MAAA,OAAM,IAAAC,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;IAAA,EAAC,CAACG,GAAG,CAACC,OAAO,CAAC,CAAC;EACtD,CAAC,CAAC;EAEFN,EAAE,CAAC,uBAAuB,EAAE,YAAM;IAChC,IAAAO,SAAA,GAAkChD,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAAK,SAAA,CAArBlD,OAAO;IACf,IAAAmD,OAAA,GAAwC,IAAAJ,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;MAAxDO,WAAW,GAAAD,OAAA,CAAXC,WAAW;MAAEC,cAAc,GAAAF,OAAA,CAAdE,cAAc;IAEnCP,MAAM,CAACM,WAAW,CAAC,YAAY,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IAC9CR,MAAM,CAACM,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IACpDR,MAAM,CAACM,WAAW,CAAC,WAAW,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IAC7CR,MAAM,CAACO,cAAc,CAAC,MAAM,CAAC,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7CV,MAAM,CAACM,WAAW,CAAC,aAAa,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACjD,CAAC,CAAC;EAEFX,EAAE,CAAC,2BAA2B,EAAE,YAAM;IACpC,IAAAc,SAAA,GAAkCvD,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAAY,SAAA,CAArBzD,OAAO;IACf,IAAA0D,QAAA,GAAwB,IAAAX,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;MAAxCO,WAAW,GAAAM,QAAA,CAAXN,WAAW;IAEnB,IAAMO,gBAAgB,GAAGP,WAAW,CAAC,kBAAkB,CAAC;IACxDN,MAAM,CAACa,gBAAgB,CAAClD,KAAK,CAACa,KAAK,CAAC,CAACkC,IAAI,CAAC,QAAQ,CAAC;IACnDV,MAAM,CAAC,OAAOa,gBAAgB,CAAClD,KAAK,CAACc,aAAa,CAAC,CAACiC,IAAI,CAAC,UAAU,CAAC;EACtE,CAAC,CAAC;EAEFb,EAAE,CAAC,8BAA8B,EAAE,YAAM;IACvC,IAAAiB,SAAA,GAAkC1D,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAAe,SAAA,CAArB5D,OAAO;IACf,IAAA6D,QAAA,GAAwC,IAAAd,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;MAAxDO,WAAW,GAAAS,QAAA,CAAXT,WAAW;MAAEC,cAAc,GAAAQ,QAAA,CAAdR,cAAc;IAEnC,IAAMS,aAAa,GAAGV,WAAW,CAAC,WAAW,CAAC;IAC9CN,MAAM,CAACgB,aAAa,CAAC,CAACR,UAAU,CAAC,CAAC;IAClCR,MAAM,CAACgB,aAAa,CAACrD,KAAK,CAACQ,KAAK,CAAC,CAAC8C,OAAO,CAACjB,MAAM,CAACkB,gBAAgB,CAAC;MAChEtC,aAAa,EAAE,KAAK;MACpBC,QAAQ,EAAE,MAAM;MAChBC,cAAc,EAAE;IAClB,CAAC,CAAC,CAAC;IAEH,IAAMqC,KAAK,GAAGZ,cAAc,CAAC,MAAM,CAAC;IACpCP,MAAM,CAACmB,KAAK,CAACV,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC;EAEFb,EAAE,CAAC,mCAAmC,EAAE,YAAM;IAC5C,IAAMuB,UAAU,GAAG7E,IAAI,CAAC8E,KAAK,CAAC9B,OAAO,EAAE,KAAK,CAAC;IAC7C,IAAA+B,SAAA,GAAkClE,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAAuB,SAAA,CAArBpE,OAAO;IACf,IAAAqE,QAAA,GAAwB,IAAAtB,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;MAAxCO,WAAW,GAAAiB,QAAA,CAAXjB,WAAW;IAEnB,IAAMkB,WAAW,GAAGlB,WAAW,CAAC,aAAa,CAAC;IAC9CkB,WAAW,CAAC7D,KAAK,CAAC2B,OAAO,CAAC,CAAC;IAE3BU,MAAM,CAACoB,UAAU,CAAC,CAACK,oBAAoB,CAAC,oBAAoB,CAAC;IAC7DL,UAAU,CAACM,WAAW,CAAC,CAAC;EAC1B,CAAC,CAAC;EAEF7B,EAAE,CAAC,mBAAmB,EAAE,YAAM;IAC5B,IAAA8B,SAAA,GAAkCvE,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAA4B,SAAA,CAArBzE,OAAO;IACf,IAAA0E,QAAA,GAAwC,IAAA3B,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;MAAxDO,WAAW,GAAAsB,QAAA,CAAXtB,WAAW;MAAEC,cAAc,GAAAqB,QAAA,CAAdrB,cAAc;IAEnC,IAAMsB,UAAU,GAAGvB,WAAW,CAAC,YAAY,CAAC;IAC5CN,MAAM,CAAC6B,UAAU,CAAClE,KAAK,CAACQ,KAAK,CAAC,CAAC8C,OAAO,CAACjB,MAAM,CAACkB,gBAAgB,CAAC;MAC7D9C,IAAI,EAAE,CAAC;MACPC,OAAO,EAAE;IACX,CAAC,CAAC,CAAC;IAEH,IAAM2C,aAAa,GAAGV,WAAW,CAAC,WAAW,CAAC;IAC9CN,MAAM,CAACgB,aAAa,CAACrD,KAAK,CAACQ,KAAK,CAAC,CAAC8C,OAAO,CAACjB,MAAM,CAACkB,gBAAgB,CAAC;MAChEtC,aAAa,EAAE,KAAK;MACpBC,QAAQ,EAAE,MAAM;MAChBC,cAAc,EAAE;IAClB,CAAC,CAAC,CAAC;IAEH,IAAMqC,KAAK,GAAGZ,cAAc,CAAC,MAAM,CAAC;IACpC,IAAIY,KAAK,CAACV,MAAM,GAAG,CAAC,EAAE;MACpBT,MAAM,CAACmB,KAAK,CAAC,CAAC,CAAC,CAACxD,KAAK,CAACQ,KAAK,CAAC,CAAC8C,OAAO,CAACjB,MAAM,CAACkB,gBAAgB,CAAC;QAC3D9B,KAAK,EAAE,KAAK;QACZC,YAAY,EAAE;MAChB,CAAC,CAAC,CAAC;IACL;EACF,CAAC,CAAC;EAEFQ,EAAE,CAAC,0CAA0C,EAAE,YAAM;IACnD,IAAAiC,SAAA,GAAkC1E,OAAO,oCAAoC,CAAC;MAA7D2C,YAAY,GAAA+B,SAAA,CAArB5E,OAAO;IACf,IAAA6E,QAAA,GAAwB,IAAA9B,mBAAM,EAAC,IAAAzC,WAAA,CAAAI,GAAA,EAACmC,YAAY,IAAE,CAAC,CAAC;MAAxCO,WAAW,GAAAyB,QAAA,CAAXzB,WAAW;IAEnB,IAAMO,gBAAgB,GAAGP,WAAW,CAAC,kBAAkB,CAAC;IACxDN,MAAM,CAACa,gBAAgB,CAAClD,KAAK,CAACe,OAAO,CAAC,CAACuC,OAAO,CAAC,CAC7C;MAAEzC,KAAK,EAAE,QAAQ;MAAEG,KAAK,EAAE;IAAK,CAAC,EAChC;MAAEH,KAAK,EAAE,SAAS;MAAEG,KAAK,EAAE;IAAK,CAAC,CAClC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}