20ab4d9e00a598abd2422cd67771152f
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        background: '#fff'
      }
    }),
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Text: 'Text'
  };
});
_getJestObj().mock("../../../src/screens/ReviewScreen", function () {
  return {
    __esModule: true,
    default: function _default() {
      return null;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require8 = require("@jest/globals"),
    jest = _require8.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestView = function TestView(props) {
  return (0, _jsxRuntime.jsx)(_reactNative2.View, Object.assign({}, props));
};
var MockReviewScreen = function MockReviewScreen() {
  return (0, _jsxRuntime.jsxs)(_reactNative2.ScrollView, {
    style: {
      flex: 1,
      padding: 16
    },
    testID: "scrollView",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "segmentedButtonsContainer",
      children: (0, _jsxRuntime.jsx)(TestView, {
        testID: "segmentedButtons",
        value: "weekly",
        onValueChange: function onValueChange() {},
        buttons: [{
          value: 'weekly',
          label: '주간'
        }, {
          value: 'monthly',
          label: '월간'
        }]
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      style: {
        flexDirection: 'row',
        flexWrap: 'wrap',
        justifyContent: 'space-between'
      },
      testID: "imageGrid",
      children: Array(6).fill(0).map(function (_, index) {
        return (0, _jsxRuntime.jsx)(TestView, {
          style: {
            width: '48%',
            marginBottom: 16
          },
          testID: "card",
          children: (0, _jsxRuntime.jsx)(_reactNative2.View, {})
        }, index);
      })
    }), (0, _jsxRuntime.jsx)(TestView, {
      testID: "graphButton",
      onPress: function onPress() {
        return console.log('Show emotion graph');
      },
      children: "\uAC10\uC815 \uBCC0\uD654 \uADF8\uB798\uD504 \uBCF4\uAE30"
    })]
  });
};
describe('ReviewScreen 통합 테스트', function () {
  beforeEach(function () {
    jest.resetModules();
    var reviewScreenModule = require("../../../src/screens/ReviewScreen");
    reviewScreenModule.default = MockReviewScreen;
  });
  it('컴포넌트가 네비게이션 환경에서 렌더링 되어야 함', function () {
    var _require = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require.default;
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    }).not.toThrow();
  });
  it('모든 주요 UI 요소가 렌더링되어야 함', function () {
    var _require2 = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require2.default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {})),
      getByTestId = _render.getByTestId,
      getAllByTestId = _render.getAllByTestId;
    expect(getByTestId('scrollView')).toBeTruthy();
    expect(getByTestId('segmentedButtons')).toBeTruthy();
    expect(getByTestId('imageGrid')).toBeTruthy();
    expect(getAllByTestId('card').length).toBe(6);
    expect(getByTestId('graphButton')).toBeTruthy();
  });
  it('기간 선택 버튼이 존재하고 상태를 관리해야 함', function () {
    var _require3 = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require3.default;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {})),
      getByTestId = _render2.getByTestId;
    var segmentedButtons = getByTestId('segmentedButtons');
    expect(segmentedButtons.props.value).toBe('weekly');
    expect(typeof segmentedButtons.props.onValueChange).toBe('function');
  });
  it('이미지 그리드가 View 컴포넌트 내에 존재해야 함', function () {
    var _require4 = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require4.default;
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {})),
      getByTestId = _render3.getByTestId,
      getAllByTestId = _render3.getAllByTestId;
    var imageGridView = getByTestId('imageGrid');
    expect(imageGridView).toBeTruthy();
    expect(imageGridView.props.style).toEqual(expect.objectContaining({
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    }));
    var cards = getAllByTestId('card');
    expect(cards.length).toBe(6);
  });
  it('감정 변화 그래프 버튼이 클릭되면 콘솔 로그가 출력되어야 함', function () {
    var consoleSpy = jest.spyOn(console, 'log');
    var _require5 = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require5.default;
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {})),
      getByTestId = _render4.getByTestId;
    var graphButton = getByTestId('graphButton');
    graphButton.props.onPress();
    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');
    consoleSpy.mockRestore();
  });
  it('스타일이 올바르게 적용되어야 함', function () {
    var _require6 = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require6.default;
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {})),
      getByTestId = _render5.getByTestId,
      getAllByTestId = _render5.getAllByTestId;
    var scrollView = getByTestId('scrollView');
    expect(scrollView.props.style).toEqual(expect.objectContaining({
      flex: 1,
      padding: 16
    }));
    var imageGridView = getByTestId('imageGrid');
    expect(imageGridView.props.style).toEqual(expect.objectContaining({
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    }));
    var cards = getAllByTestId('card');
    if (cards.length > 0) {
      expect(cards[0].props.style).toEqual(expect.objectContaining({
        width: '48%',
        marginBottom: 16
      }));
    }
  });
  it('SegmentedButtons의 두 옵션이 주간과 월간으로 표시되어야 함', function () {
    var _require7 = require("../../../src/screens/ReviewScreen"),
      ReviewScreen = _require7.default;
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {})),
      getByTestId = _render6.getByTestId;
    var segmentedButtons = getByTestId('segmentedButtons');
    expect(segmentedButtons.props.buttons).toEqual([{
      value: 'weekly',
      label: '주간'
    }, {
      value: 'monthly',
      label: '월간'
    }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,