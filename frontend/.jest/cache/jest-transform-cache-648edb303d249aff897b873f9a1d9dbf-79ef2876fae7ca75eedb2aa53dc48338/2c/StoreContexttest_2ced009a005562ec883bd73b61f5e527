632cbd87b30a1a35d1d1b3102bdc90bb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _StoreContext = require("../../src/store/StoreContext");
var _reducer = require("../../src/store/reducer");
var _types = require("../../src/store/types");
var _jsxRuntime = require("react/jsx-runtime");
var TestComponent = function TestComponent() {
  var _useStore = (0, _StoreContext.useStore)(),
    state = _useStore.state,
    dispatch = _useStore.dispatch;
  return (0, _jsxRuntime.jsxs)("div", {
    children: [(0, _jsxRuntime.jsx)("div", {
      "data-testid": "auth-status",
      children: state.isAuthenticated ? 'authenticated' : 'not-authenticated'
    }), (0, _jsxRuntime.jsx)("button", {
      onClick: function onClick() {
        return dispatch({
          type: _types.ActionType.SET_AUTHENTICATED,
          payload: !state.isAuthenticated
        });
      },
      "data-testid": "toggle-auth",
      children: "Toggle Auth"
    })]
  });
};
describe('StoreContext', function () {
  test('StoreProvider는 상태와 디스패치 함수를 제공한다', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StoreContext.StoreProvider, {
      children: (0, _jsxRuntime.jsx)(TestComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('auth-status').textContent).toBe('not-authenticated');
    _reactNative.screen.getByTestId('toggle-auth').click();
    expect(_reactNative.screen.getByTestId('auth-status').textContent).toBe('authenticated');
  });
  test('초기 상태가 올바르게 설정된다', function () {
    var StateCheckComponent = function StateCheckComponent() {
      var _useStore2 = (0, _StoreContext.useStore)(),
        state = _useStore2.state;
      return (0, _jsxRuntime.jsxs)("div", {
        children: [(0, _jsxRuntime.jsx)("div", {
          "data-testid": "is-authenticated",
          children: String(state.isAuthenticated)
        }), (0, _jsxRuntime.jsx)("div", {
          "data-testid": "user",
          children: state.user === null ? 'null' : 'user'
        }), (0, _jsxRuntime.jsx)("div", {
          "data-testid": "notifications-count",
          children: state.notifications.length
        }), (0, _jsxRuntime.jsx)("div", {
          "data-testid": "theme",
          children: state.theme
        }), (0, _jsxRuntime.jsx)("div", {
          "data-testid": "loading",
          children: String(state.loading)
        }), (0, _jsxRuntime.jsx)("div", {
          "data-testid": "error",
          children: state.error === null ? 'null' : state.error
        })]
      });
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StoreContext.StoreProvider, {
      children: (0, _jsxRuntime.jsx)(StateCheckComponent, {})
    }));
    expect(_reactNative.screen.getByTestId('is-authenticated').textContent).toBe(String(_reducer.initialState.isAuthenticated));
    expect(_reactNative.screen.getByTestId('user').textContent).toBe('null');
    expect(_reactNative.screen.getByTestId('notifications-count').textContent).toBe('0');
    expect(_reactNative.screen.getByTestId('theme').textContent).toBe(_reducer.initialState.theme);
    expect(_reactNative.screen.getByTestId('loading').textContent).toBe(String(_reducer.initialState.loading));
    expect(_reactNative.screen.getByTestId('error').textContent).toBe('null');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,