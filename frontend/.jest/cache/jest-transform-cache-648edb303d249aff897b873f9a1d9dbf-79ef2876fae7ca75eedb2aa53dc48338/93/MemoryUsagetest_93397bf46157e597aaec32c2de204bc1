f52874505cdb9abe9756c23357678f72
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var LargeDataComponent = function LargeDataComponent(_ref) {
  var _ref$itemCount = _ref.itemCount,
    itemCount = _ref$itemCount === void 0 ? 1000 : _ref$itemCount;
  var _useState = (0, _react.useState)(function () {
      return Array.from({
        length: itemCount
      }, function (_, i) {
        return {
          id: i,
          value: `Item ${i}`,
          largeData: new Array(1000).fill('데이터').join('')
        };
      });
    }),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    items = _useState2[0],
    setItems = _useState2[1];
  var addMoreItems = function addMoreItems() {
    var newItems = Array.from({
      length: 500
    }, function (_, i) {
      return {
        id: items.length + i,
        value: `Item ${items.length + i}`,
        largeData: new Array(1000).fill('데이터').join('')
      };
    });
    setItems([].concat((0, _toConsumableArray2.default)(items), newItems));
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Add 500 More Items",
      onPress: addMoreItems,
      testID: "add-more-button"
    }), (0, _jsxRuntime.jsx)(_reactNative2.FlatList, {
      data: items,
      keyExtractor: function keyExtractor(item) {
        return `item-${item.id}`;
      },
      renderItem: function renderItem(_ref2) {
        var item = _ref2.item;
        return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: item.value
        });
      }
    })]
  });
};
var MemoryLeakComponent = function MemoryLeakComponent() {
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    counter = _useState4[0],
    setCounter = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    leakedData = _useState6[0],
    setLeakedData = _useState6[1];
  var createLeak = function createLeak() {
    var newArray = new Array(10000).fill('메모리 누수 데이터');
    setLeakedData([].concat((0, _toConsumableArray2.default)(leakedData), [newArray]));
    setCounter(counter + 1);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "counter-text",
      children: ["Counter: ", counter]
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      testID: "leak-size-text",
      children: ["Leaked Data Size: ", leakedData.length]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "Create Memory Leak",
      onPress: createLeak,
      testID: "create-leak-button"
    })]
  });
};
var OptimizedComponent = function OptimizedComponent(_ref3) {
  var _ref3$itemCount = _ref3.itemCount,
    itemCount = _ref3$itemCount === void 0 ? 1000 : _ref3$itemCount;
  var _useState7 = (0, _react.useState)(function () {
      return Array.from({
        length: itemCount
      }, function (_, i) {
        return {
          id: i,
          value: `Item ${i}`
        };
      });
    }),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 1),
    items = _useState8[0];
  var renderItem = _react.default.useCallback(function (_ref4) {
    var item = _ref4.item;
    return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: item.value
    });
  }, []);
  return (0, _jsxRuntime.jsx)(_reactNative2.FlatList, {
    data: items,
    keyExtractor: function keyExtractor(item) {
      return `item-${item.id}`;
    },
    renderItem: renderItem,
    initialNumToRender: 10,
    maxToRenderPerBatch: 10,
    windowSize: 5,
    removeClippedSubviews: true
  });
};
describe('메모리 사용량 테스트', function () {
  test('LargeDataComponent가 많은 데이터를 처리할 수 있어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(LargeDataComponent, {
        itemCount: 100
      })),
      getByTestId = _render.getByTestId;
    var addButton = getByTestId('add-more-button');
    _reactNative.fireEvent.press(addButton);
  });
  test('MemoryLeakComponent가 버튼 클릭마다 메모리를 더 사용함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MemoryLeakComponent, {})),
      getByTestId = _render2.getByTestId;
    var leakButton = getByTestId('create-leak-button');
    for (var i = 0; i < 5; i++) {
      _reactNative.fireEvent.press(leakButton);
    }
    expect(getByTestId('counter-text').props.children).toEqual(['Counter: ', 5]);
    expect(getByTestId('leak-size-text').props.children).toEqual(['Leaked Data Size: ', 5]);
  });
  test('OptimizedComponent가 효율적으로 렌더링되어야 함', function () {
    var start = performance.now();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(OptimizedComponent, {
      itemCount: 500
    }));
    var end = performance.now();
    console.log(`OptimizedComponent 렌더링 시간: ${end - start}ms`);
  });
  test('컴포넌트가 마운트 해제될 때 메모리가 적절히 해제되어야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(LargeDataComponent, {
        itemCount: 500
      })),
      unmount = _render3.unmount;
    unmount();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,