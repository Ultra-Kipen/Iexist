8179d7a8ba9c5094d1c27429dd702023
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function ResponsiveComponent() {
  var _Dimensions$get = _reactNative2.Dimensions.get('window'),
    width = _Dimensions$get.width;
  var isLargeScreen = width >= 768;
  var isTablet = width >= 480 && width < 768;
  var styles = _reactNative2.StyleSheet.create({
    container: {
      padding: isLargeScreen ? 20 : isTablet ? 15 : 10,
      maxWidth: isLargeScreen ? 1024 : isTablet ? 640 : '100%'
    },
    text: {
      fontSize: isLargeScreen ? 18 : isTablet ? 16 : 14,
      fontWeight: isLargeScreen ? 'bold' : 'normal'
    }
  });
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "responsive-container",
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "responsive-text",
      style: styles.text,
      children: "\uBC18\uC751\uD615 \uCEF4\uD3EC\uB10C\uD2B8"
    }), isLargeScreen && (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "large-screen-only",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uB300\uD615 \uD654\uBA74\uC5D0\uC11C\uB9CC \uBCF4\uC774\uB294 \uCF58\uD150\uCE20"
      })
    }), isTablet && (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "tablet-only",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uD0DC\uBE14\uB9BF \uD654\uBA74\uC5D0\uC11C\uB9CC \uBCF4\uC774\uB294 \uCF58\uD150\uCE20"
      })
    }), width < 480 && (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "mobile-only",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uBAA8\uBC14\uC77C \uD654\uBA74\uC5D0\uC11C\uB9CC \uBCF4\uC774\uB294 \uCF58\uD150\uCE20"
      })
    })]
  });
}
describe('반응형 컴포넌트 테스트', function () {
  var originalDimensionsGet;
  beforeEach(function () {
    originalDimensionsGet = _reactNative2.Dimensions.get;
  });
  afterEach(function () {
    _reactNative2.Dimensions.get = originalDimensionsGet;
  });
  test('모바일 화면 크기에서 적절한 스타일과 컴포넌트가 렌더링되어야 함', function () {
    _reactNative2.Dimensions.get = jest.fn(function (dim) {
      if (dim === 'window' || dim === 'screen') {
        return {
          width: 360,
          height: 640,
          scale: 1,
          fontScale: 1
        };
      }
      return originalDimensionsGet(dim);
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ResponsiveComponent, {})),
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    var container = getByTestId('responsive-container');
    expect(container.props.style).toEqual({
      padding: 10,
      maxWidth: '100%'
    });
    var text = getByTestId('responsive-text');
    expect(text.props.style).toEqual({
      fontSize: 14,
      fontWeight: 'normal'
    });
    expect(queryByTestId('mobile-only')).toBeTruthy();
    expect(queryByTestId('tablet-only')).toBeNull();
    expect(queryByTestId('large-screen-only')).toBeNull();
  });
  test('태블릿 화면 크기에서 적절한 스타일과 컴포넌트가 렌더링되어야 함', function () {
    _reactNative2.Dimensions.get = jest.fn(function (dim) {
      if (dim === 'window' || dim === 'screen') {
        return {
          width: 600,
          height: 800,
          scale: 1,
          fontScale: 1
        };
      }
      return originalDimensionsGet(dim);
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ResponsiveComponent, {})),
      getByTestId = _render2.getByTestId,
      queryByTestId = _render2.queryByTestId;
    var container = getByTestId('responsive-container');
    expect(container.props.style).toEqual({
      padding: 15,
      maxWidth: 640
    });
    var text = getByTestId('responsive-text');
    expect(text.props.style).toEqual({
      fontSize: 16,
      fontWeight: 'normal'
    });
    expect(queryByTestId('mobile-only')).toBeNull();
    expect(queryByTestId('tablet-only')).toBeTruthy();
    expect(queryByTestId('large-screen-only')).toBeNull();
  });
  test('대형 화면 크기에서 적절한 스타일과 컴포넌트가 렌더링되어야 함', function () {
    _reactNative2.Dimensions.get = jest.fn(function (dim) {
      if (dim === 'window' || dim === 'screen') {
        return {
          width: 1024,
          height: 1366,
          scale: 1,
          fontScale: 1
        };
      }
      return originalDimensionsGet(dim);
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ResponsiveComponent, {})),
      getByTestId = _render3.getByTestId,
      queryByTestId = _render3.queryByTestId;
    var container = getByTestId('responsive-container');
    expect(container.props.style).toEqual({
      padding: 20,
      maxWidth: 1024
    });
    var text = getByTestId('responsive-text');
    expect(text.props.style).toEqual({
      fontSize: 18,
      fontWeight: 'bold'
    });
    expect(queryByTestId('mobile-only')).toBeNull();
    expect(queryByTestId('tablet-only')).toBeNull();
    expect(queryByTestId('large-screen-only')).toBeTruthy();
  });
  test('화면 크기가 변경될 때 컴포넌트가 올바르게 업데이트되어야 함', function () {
    _reactNative2.Dimensions.get = jest.fn(function (dim) {
      if (dim === 'window' || dim === 'screen') {
        return {
          width: 360,
          height: 640,
          scale: 1,
          fontScale: 1
        };
      }
      return originalDimensionsGet(dim);
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ResponsiveComponent, {})),
      getByTestId = _render4.getByTestId,
      queryByTestId = _render4.queryByTestId,
      rerender = _render4.rerender;
    expect(queryByTestId('mobile-only')).toBeTruthy();
    _reactNative2.Dimensions.get = jest.fn(function (dim) {
      if (dim === 'window' || dim === 'screen') {
        return {
          width: 600,
          height: 800,
          scale: 1,
          fontScale: 1
        };
      }
      return originalDimensionsGet(dim);
    });
    rerender((0, _jsxRuntime.jsx)(ResponsiveComponent, {}));
    expect(queryByTestId('mobile-only')).toBeNull();
    expect(queryByTestId('tablet-only')).toBeTruthy();
    _reactNative2.Dimensions.get = jest.fn(function (dim) {
      if (dim === 'window' || dim === 'screen') {
        return {
          width: 1024,
          height: 1366,
          scale: 1,
          fontScale: 1
        };
      }
      return originalDimensionsGet(dim);
    });
    rerender((0, _jsxRuntime.jsx)(ResponsiveComponent, {}));
    expect(queryByTestId('tablet-only')).toBeNull();
    expect(queryByTestId('large-screen-only')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,