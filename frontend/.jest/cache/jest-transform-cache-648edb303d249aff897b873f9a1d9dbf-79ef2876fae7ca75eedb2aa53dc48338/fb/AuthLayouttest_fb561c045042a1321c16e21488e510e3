0e63d9c22f465d4309d785a67f21b899
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Platform: {
      OS: 'ios',
      select: jest.fn(function (obj) {
        return obj.ios;
      })
    },
    Keyboard: {
      dismiss: jest.fn()
    },
    View: 'View',
    Text: 'Text',
    ScrollView: 'ScrollView',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    KeyboardAvoidingView: 'KeyboardAvoidingView',
    ImageBackground: 'ImageBackground',
    Image: 'Image',
    StatusBar: 'StatusBar'
  });
}, {
  virtual: true
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: 'SafeAreaView'
  };
}, {
  virtual: true
});
_getJestObj().mock("../../src/hooks/useTheme", function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#ffffff'
          },
          dark: false
        }
      };
    }
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
}, {
  virtual: true
});
_getJestObj().mock("../../src/assets/images/logo.png", function () {
  return 'logo.png';
}, {
  virtual: true
});
_getJestObj().mock("../../src/assets/images/auth-background.jpg", function () {
  return 'background.jpg';
}, {
  virtual: true
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _AuthLayout = _interopRequireDefault(require("../../src/layouts/AuthLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthLayout', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('shows loading indicator when loading is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('인증 내용')).toBeNull();
  });
  it('renders title and footer when provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        title: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uC81C\uBAA9"
        }),
        footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uD478\uD130"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render3.getByText;
    expect(getByText('인증 제목')).toBeTruthy();
    expect(getByText('인증 푸터')).toBeTruthy();
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('handles complex children correctly', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
          children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "\uCCAB \uBC88\uC9F8 \uC790\uC2DD"
          }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: "\uB450 \uBC88\uC9F8 \uC790\uC2DD"
          }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
            children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "\uC911\uCCA9\uB41C \uC790\uC2DD"
            })
          })]
        })
      })),
      getByText = _render4.getByText;
    expect(getByText('첫 번째 자식')).toBeTruthy();
    expect(getByText('두 번째 자식')).toBeTruthy();
    expect(getByText('중첩된 자식')).toBeTruthy();
  });
  it('renders correctly with only title', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        title: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uC81C\uBAA9\uB9CC"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render5.getByText;
    expect(getByText('인증 제목만')).toBeTruthy();
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('renders correctly with only footer', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uD478\uD130\uB9CC"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render6.getByText;
    expect(getByText('인증 푸터만')).toBeTruthy();
    expect(getByText('인증 내용')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,