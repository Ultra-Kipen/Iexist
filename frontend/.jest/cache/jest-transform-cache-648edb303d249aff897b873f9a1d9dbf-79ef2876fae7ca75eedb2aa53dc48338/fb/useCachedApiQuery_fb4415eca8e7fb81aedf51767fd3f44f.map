{"version":3,"names":["_react","require","_useCache","cov_1t8rtawdwr","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","useCachedApiQuery","endpoint","params","options","arguments","length","_ref","ttl","_ref$autoLoad","autoLoad","onError","onSuccess","fetchData","useCallback","_asyncToGenerator2","default","queryString","URLSearchParams","toString","response","fetch","ok","Error","status","result","json","success","error","data","cacheKey","JSON","stringify","_ref3","useCache","loading","refetch","invalidateCache"],"sources":["useCachedApiQuery.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { useCache } from './useCache';\r\nimport { ApiResponse } from '../types/api';\r\n\r\ninterface ApiQueryOptions {\r\n  /** 캐시 유효 시간 (밀리초) */\r\n  ttl?: number;\r\n  /** 자동 로딩 여부 */\r\n  autoLoad?: boolean;\r\n  /** 에러 핸들링 함수 */\r\n  onError?: (error: Error) => void;\r\n  /** 성공 핸들링 함수 */\r\n  onSuccess?: <T>(data: T) => void;\r\n}\r\n\r\n/**\r\n * API 요청을 캐싱하는 훅\r\n * @param endpoint API 엔드포인트\r\n * @param params API 파라미터 객체\r\n * @param options 캐시 옵션\r\n */\r\nexport function useCachedApiQuery<T = any, P = Record<string, any>>(\r\n  endpoint: string,\r\n  params?: P,\r\n  options: ApiQueryOptions = {}\r\n) {\r\n  const { ttl, autoLoad = true, onError, onSuccess } = options;\r\n  \r\n  // API 요청 함수\r\n  const fetchData = useCallback(async (): Promise<T> => {\r\n    const queryString = params \r\n      ? `?${new URLSearchParams(params as any).toString()}` \r\n      : '';\r\n    const response = await fetch(`${endpoint}${queryString}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`API 요청 오류: ${response.status}`);\r\n    }\r\n    \r\n    const result = await response.json() as ApiResponse<T>;\r\n    \r\n    if (!result.success) {\r\n      throw new Error(result.error || '알 수 없는 오류가 발생했습니다.');\r\n    }\r\n    \r\n    // 성공 콜백\r\n    if (onSuccess && result.data) {\r\n      onSuccess(result.data);\r\n    }\r\n    \r\n    // data가 없는 경우에 대한 처리 추가\r\n    if (result.data === undefined) {\r\n      throw new Error('API 응답에 데이터가 없습니다.');\r\n    }\r\n    \r\n    return result.data;\r\n  }, [endpoint, params, onSuccess]);\r\n  \r\n  // 캐시 키 생성\r\n  const cacheKey = `api:${endpoint}:${JSON.stringify(params || {})}`;\r\n  \r\n  const { \r\n    data, \r\n    loading, \r\n    error, \r\n    refetch, \r\n    invalidateCache \r\n  } = useCache<T>(cacheKey, fetchData, { ttl, autoLoad });\r\n  \r\n  // 에러 핸들링\r\n  if (error && onError) {\r\n    onError(error);\r\n  }\r\n  \r\n  return { \r\n    data, \r\n    loading, \r\n    error, \r\n    refetch, \r\n    invalidateCache \r\n  };\r\n}"],"mappings":"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","ignoreList":[]}