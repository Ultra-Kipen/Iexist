e421e321c15b01c2039a2f8d1966d7e1
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getButtonTouchableRippleStyle = exports.getButtonColors = void 0;
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _colors = require("../../styles/themes/v2/colors");
var _splitStyles = require("../../utils/splitStyles");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var isDark = function isDark(_ref) {
  var dark = _ref.dark,
    backgroundColor = _ref.backgroundColor;
  if (typeof dark === 'boolean') {
    return dark;
  }
  if (backgroundColor === 'transparent') {
    return false;
  }
  if (backgroundColor !== 'transparent') {
    return !(0, _color.default)(backgroundColor).isLight();
  }
  return false;
};
var getButtonBackgroundColor = function getButtonBackgroundColor(_ref2) {
  var isMode = _ref2.isMode,
    theme = _ref2.theme,
    disabled = _ref2.disabled,
    customButtonColor = _ref2.customButtonColor;
  if (customButtonColor && !disabled) {
    return customButtonColor;
  }
  if (theme.isV3) {
    if (disabled) {
      if (isMode('outlined') || isMode('text')) {
        return 'transparent';
      }
      return theme.colors.surfaceDisabled;
    }
    if (isMode('elevated')) {
      return theme.colors.elevation.level1;
    }
    if (isMode('contained')) {
      return theme.colors.primary;
    }
    if (isMode('contained-tonal')) {
      return theme.colors.secondaryContainer;
    }
  }
  if (isMode('contained')) {
    if (disabled) {
      return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    }
    return theme.colors.primary;
  }
  return 'transparent';
};
var getButtonTextColor = function getButtonTextColor(_ref3) {
  var isMode = _ref3.isMode,
    theme = _ref3.theme,
    disabled = _ref3.disabled,
    customTextColor = _ref3.customTextColor,
    backgroundColor = _ref3.backgroundColor,
    dark = _ref3.dark;
  if (customTextColor && !disabled) {
    return customTextColor;
  }
  if (theme.isV3) {
    if (disabled) {
      return theme.colors.onSurfaceDisabled;
    }
    if (typeof dark === 'boolean') {
      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {
        return isDark({
          dark: dark,
          backgroundColor: backgroundColor
        }) ? _colors.white : _colors.black;
      }
    }
    if (isMode('outlined') || isMode('text') || isMode('elevated')) {
      return theme.colors.primary;
    }
    if (isMode('contained')) {
      return theme.colors.onPrimary;
    }
    if (isMode('contained-tonal')) {
      return theme.colors.onSecondaryContainer;
    }
  }
  if (disabled) {
    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
  }
  if (isMode('contained')) {
    return isDark({
      dark: dark,
      backgroundColor: backgroundColor
    }) ? _colors.white : _colors.black;
  }
  return theme.colors.primary;
};
var getButtonBorderColor = function getButtonBorderColor(_ref4) {
  var isMode = _ref4.isMode,
    disabled = _ref4.disabled,
    theme = _ref4.theme;
  if (theme.isV3) {
    if (disabled && isMode('outlined')) {
      return theme.colors.surfaceDisabled;
    }
    if (isMode('outlined')) {
      return theme.colors.outline;
    }
  }
  if (isMode('outlined')) {
    return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
  }
  return 'transparent';
};
var getButtonBorderWidth = function getButtonBorderWidth(_ref5) {
  var isMode = _ref5.isMode,
    theme = _ref5.theme;
  if (theme.isV3) {
    if (isMode('outlined')) {
      return 1;
    }
  }
  if (isMode('outlined')) {
    return _reactNative.StyleSheet.hairlineWidth;
  }
  return 0;
};
var getButtonColors = function getButtonColors(_ref6) {
  var theme = _ref6.theme,
    mode = _ref6.mode,
    customButtonColor = _ref6.customButtonColor,
    customTextColor = _ref6.customTextColor,
    disabled = _ref6.disabled,
    dark = _ref6.dark;
  var isMode = function isMode(modeToCompare) {
    return mode === modeToCompare;
  };
  var backgroundColor = getButtonBackgroundColor({
    isMode: isMode,
    theme: theme,
    disabled: disabled,
    customButtonColor: customButtonColor
  });
  var textColor = getButtonTextColor({
    isMode: isMode,
    theme: theme,
    disabled: disabled,
    customTextColor: customTextColor,
    backgroundColor: backgroundColor,
    dark: dark
  });
  var borderColor = getButtonBorderColor({
    isMode: isMode,
    theme: theme,
    disabled: disabled
  });
  var borderWidth = getButtonBorderWidth({
    isMode: isMode,
    theme: theme
  });
  return {
    backgroundColor: backgroundColor,
    borderColor: borderColor,
    textColor: textColor,
    borderWidth: borderWidth
  };
};
exports.getButtonColors = getButtonColors;
var getButtonTouchableRippleStyle = function getButtonTouchableRippleStyle(style) {
  var borderWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  if (!style) return {};
  var touchableRippleStyle = {};
  var _ref7 = (0, _splitStyles.splitStyles)(style, function (style) {
      return style.startsWith('border') && style.endsWith('Radius');
    }),
    _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
    borderRadiusStyles = _ref8[1];
  Object.keys(borderRadiusStyles).forEach(function (key) {
    var value = style[key];
    if (typeof value === 'number') {
      var radius = value > 0 ? value - borderWidth : 0;
      touchableRippleStyle[key] = radius;
    }
  });
  return touchableRippleStyle;
};
exports.getButtonTouchableRippleStyle = getButtonTouchableRippleStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,