070e15437f5c8b5af41bdf391b51a954
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertEasingIsWorklet = assertEasingIsWorklet;
exports.cancelAnimation = void 0;
exports.defineAnimation = defineAnimation;
exports.getReduceMotionForAnimation = getReduceMotionForAnimation;
exports.getReduceMotionFromConfig = getReduceMotionFromConfig;
exports.initialUpdaterRun = initialUpdaterRun;
exports.isValidLayoutAnimationProp = isValidLayoutAnimationProp;
exports.recognizePrefixSuffix = recognizePrefixSuffix;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _Colors = require("../Colors.js");
var _commonTypes = require("../commonTypes.js");
var _errors = require("../errors.js");
var _index = require("../logger/index.js");
var _PlatformChecker = require("../PlatformChecker.js");
var _ReducedMotion = require("../ReducedMotion.js");
var _threads = require("../threads.js");
var _matrixUtils = require("./transformationMatrix/matrixUtils.js");
var IN_STYLE_UPDATER = false;
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var LAYOUT_ANIMATION_SUPPORTED_PROPS = {
  originX: true,
  originY: true,
  width: true,
  height: true,
  borderRadius: true,
  globalOriginX: true,
  globalOriginY: true,
  opacity: true,
  transform: true
};
function isValidLayoutAnimationProp(prop) {
  'worklet';

  return prop in LAYOUT_ANIMATION_SUPPORTED_PROPS;
}
if (true && _ReducedMotion.ReducedMotionManager.jsValue) {
  _index.logger.warn(`Reduced motion setting is enabled on this device. This warning is visible only in the development mode. Some animations will be disabled by default. You can override the behavior for individual animations, see https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#reduced-motion-setting-is-enabled-on-this-device.`);
}
function assertEasingIsWorklet(easing) {
  'worklet';

  if (_WORKLET) {
    return;
  }
  if (SHOULD_BE_USE_WEB) {
    return;
  }
  if (easing != null && easing.factory) {
    return;
  }
  if (!(0, _commonTypes.isWorkletFunction)(easing)) {
    throw new _errors.ReanimatedError('The easing function is not a worklet. Please make sure you import `Easing` from react-native-reanimated.');
  }
}
function initialUpdaterRun(updater) {
  IN_STYLE_UPDATER = true;
  var result = updater();
  IN_STYLE_UPDATER = false;
  return result;
}
function recognizePrefixSuffix(value) {
  'worklet';

  if (typeof value === 'string') {
    var _match$;
    var match = value.match(/([A-Za-z]*)(-?\d*\.?\d*)([eE][-+]?[0-9]+)?([A-Za-z%]*)/);
    if (!match) {
      throw new _errors.ReanimatedError("Couldn't parse animation value.");
    }
    var prefix = match[1];
    var suffix = match[4];
    var number = match[2] + ((_match$ = match[3]) != null ? _match$ : '');
    return {
      prefix: prefix,
      suffix: suffix,
      strippedValue: parseFloat(number)
    };
  } else {
    return {
      strippedValue: value
    };
  }
}
var isReduceMotionOnUI = _ReducedMotion.ReducedMotionManager.uiValue;
function getReduceMotionFromConfig(config) {
  'worklet';

  return !config || config === _commonTypes.ReduceMotion.System ? isReduceMotionOnUI.value : config === _commonTypes.ReduceMotion.Always;
}
function getReduceMotionForAnimation(config) {
  'worklet';
  if (!config) {
    return undefined;
  }
  return getReduceMotionFromConfig(config);
}
function applyProgressToMatrix(progress, a, b) {
  'worklet';

  return (0, _matrixUtils.addMatrices)(a, (0, _matrixUtils.scaleMatrix)((0, _matrixUtils.subtractMatrices)(b, a), progress));
}
function applyProgressToNumber(progress, a, b) {
  'worklet';

  return a + progress * (b - a);
}
function decorateAnimation(animation) {
  'worklet';

  var baseOnStart = animation.onStart;
  var baseOnFrame = animation.onFrame;
  if (animation.isHigherOrder) {
    animation.onStart = function (animation, value, timestamp, previousAnimation) {
      if (animation.reduceMotion === undefined) {
        animation.reduceMotion = getReduceMotionFromConfig();
      }
      return baseOnStart(animation, value, timestamp, previousAnimation);
    };
    return;
  }
  var animationCopy = Object.assign({}, animation);
  delete animationCopy.callback;
  var prefNumberSuffOnStart = function prefNumberSuffOnStart(animation, value, timestamp, previousAnimation) {
    var _animation$__prefix, _animation$__suffix;
    var _recognizePrefixSuffi = recognizePrefixSuffix(value),
      prefix = _recognizePrefixSuffi.prefix,
      suffix = _recognizePrefixSuffi.suffix,
      strippedValue = _recognizePrefixSuffi.strippedValue;
    animation.__prefix = prefix;
    animation.__suffix = suffix;
    animation.strippedCurrent = strippedValue;
    var _recognizePrefixSuffi2 = recognizePrefixSuffix(animation.toValue),
      strippedToValue = _recognizePrefixSuffi2.strippedValue;
    animation.current = strippedValue;
    animation.startValue = strippedValue;
    animation.toValue = strippedToValue;
    if (previousAnimation && previousAnimation !== animation) {
      var _recognizePrefixSuffi3 = recognizePrefixSuffix(previousAnimation.current),
        paPrefix = _recognizePrefixSuffi3.prefix,
        paSuffix = _recognizePrefixSuffi3.suffix,
        paStrippedValue = _recognizePrefixSuffi3.strippedValue;
      previousAnimation.current = paStrippedValue;
      previousAnimation.__prefix = paPrefix;
      previousAnimation.__suffix = paSuffix;
    }
    baseOnStart(animation, strippedValue, timestamp, previousAnimation);
    animation.current = ((_animation$__prefix = animation.__prefix) != null ? _animation$__prefix : '') + animation.current + ((_animation$__suffix = animation.__suffix) != null ? _animation$__suffix : '');
    if (previousAnimation && previousAnimation !== animation) {
      var _previousAnimation$__, _previousAnimation$__2;
      previousAnimation.current = ((_previousAnimation$__ = previousAnimation.__prefix) != null ? _previousAnimation$__ : '') + previousAnimation.current + ((_previousAnimation$__2 = previousAnimation.__suffix) != null ? _previousAnimation$__2 : '');
    }
  };
  var prefNumberSuffOnFrame = function prefNumberSuffOnFrame(animation, timestamp) {
    var _animation$__prefix2, _animation$__suffix2;
    animation.current = animation.strippedCurrent;
    var res = baseOnFrame(animation, timestamp);
    animation.strippedCurrent = animation.current;
    animation.current = ((_animation$__prefix2 = animation.__prefix) != null ? _animation$__prefix2 : '') + animation.current + ((_animation$__suffix2 = animation.__suffix) != null ? _animation$__suffix2 : '');
    return res;
  };
  var tab = ['R', 'G', 'B', 'A'];
  var colorOnStart = function colorOnStart(animation, value, timestamp, previousAnimation) {
    var RGBAValue;
    var RGBACurrent;
    var RGBAToValue;
    var res = [];
    if ((0, _Colors.isColor)(value)) {
      RGBACurrent = (0, _Colors.toLinearSpace)((0, _Colors.convertToRGBA)(animation.current));
      RGBAValue = (0, _Colors.toLinearSpace)((0, _Colors.convertToRGBA)(value));
      if (animation.toValue) {
        RGBAToValue = (0, _Colors.toLinearSpace)((0, _Colors.convertToRGBA)(animation.toValue));
      }
    }
    tab.forEach(function (i, index) {
      animation[i] = Object.assign({}, animationCopy);
      animation[i].current = RGBACurrent[index];
      animation[i].toValue = RGBAToValue ? RGBAToValue[index] : undefined;
      animation[i].onStart(animation[i], RGBAValue[index], timestamp, previousAnimation ? previousAnimation[i] : undefined);
      res.push(animation[i].current);
    });
    (0, _Colors.clampRGBA)(res);
    animation.current = (0, _Colors.rgbaArrayToRGBAColor)((0, _Colors.toGammaSpace)(res));
  };
  var colorOnFrame = function colorOnFrame(animation, timestamp) {
    var RGBACurrent = (0, _Colors.toLinearSpace)((0, _Colors.convertToRGBA)(animation.current));
    var res = [];
    var finished = true;
    tab.forEach(function (i, index) {
      animation[i].current = RGBACurrent[index];
      var result = animation[i].onFrame(animation[i], timestamp);
      finished = finished && result;
      res.push(animation[i].current);
    });
    (0, _Colors.clampRGBA)(res);
    animation.current = (0, _Colors.rgbaArrayToRGBAColor)((0, _Colors.toGammaSpace)(res));
    return finished;
  };
  var transformationMatrixOnStart = function transformationMatrixOnStart(animation, value, timestamp, previousAnimation) {
    var toValue = animation.toValue;
    animation.startMatrices = (0, _matrixUtils.decomposeMatrixIntoMatricesAndAngles)(value);
    animation.stopMatrices = (0, _matrixUtils.decomposeMatrixIntoMatricesAndAngles)(toValue);
    animation[0] = Object.assign({}, animationCopy);
    animation[0].current = 0;
    animation[0].toValue = 100;
    animation[0].onStart(animation[0], 0, timestamp, previousAnimation ? previousAnimation[0] : undefined);
    animation.current = value;
  };
  var transformationMatrixOnFrame = function transformationMatrixOnFrame(animation, timestamp) {
    var finished = true;
    var result = animation[0].onFrame(animation[0], timestamp);
    finished = finished && result;
    var progress = animation[0].current / 100;
    var transforms = ['translationMatrix', 'scaleMatrix', 'skewMatrix'];
    var mappedTransforms = [];
    transforms.forEach(function (key, _) {
      return mappedTransforms.push(applyProgressToMatrix(progress, animation.startMatrices[key], animation.stopMatrices[key]));
    });
    var currentTranslation = mappedTransforms[0],
      currentScale = mappedTransforms[1],
      skewMatrix = mappedTransforms[2];
    var rotations = ['x', 'y', 'z'];
    var mappedRotations = [];
    rotations.forEach(function (key, _) {
      var angle = applyProgressToNumber(progress, animation.startMatrices['r' + key], animation.stopMatrices['r' + key]);
      mappedRotations.push((0, _matrixUtils.getRotationMatrix)(angle, key));
    });
    var rotationMatrixX = mappedRotations[0],
      rotationMatrixY = mappedRotations[1],
      rotationMatrixZ = mappedRotations[2];
    var rotationMatrix = (0, _matrixUtils.multiplyMatrices)(rotationMatrixX, (0, _matrixUtils.multiplyMatrices)(rotationMatrixY, rotationMatrixZ));
    var updated = (0, _matrixUtils.flatten)((0, _matrixUtils.multiplyMatrices)((0, _matrixUtils.multiplyMatrices)(currentScale, (0, _matrixUtils.multiplyMatrices)(skewMatrix, rotationMatrix)), currentTranslation));
    animation.current = updated;
    return finished;
  };
  var arrayOnStart = function arrayOnStart(animation, value, timestamp, previousAnimation) {
    value.forEach(function (v, i) {
      animation[i] = Object.assign({}, animationCopy);
      animation[i].current = v;
      animation[i].toValue = animation.toValue[i];
      animation[i].onStart(animation[i], v, timestamp, previousAnimation ? previousAnimation[i] : undefined);
    });
    animation.current = (0, _toConsumableArray2.default)(value);
  };
  var arrayOnFrame = function arrayOnFrame(animation, timestamp) {
    var finished = true;
    animation.current.forEach(function (_, i) {
      var result = animation[i].onFrame(animation[i], timestamp);
      finished = finished && result;
      animation.current[i] = animation[i].current;
    });
    return finished;
  };
  var objectOnStart = function objectOnStart(animation, value, timestamp, previousAnimation) {
    for (var key in value) {
      animation[key] = Object.assign({}, animationCopy);
      animation[key].onStart = animation.onStart;
      animation[key].current = value[key];
      animation[key].toValue = animation.toValue[key];
      animation[key].onStart(animation[key], value[key], timestamp, previousAnimation ? previousAnimation[key] : undefined);
    }
    animation.current = value;
  };
  var objectOnFrame = function objectOnFrame(animation, timestamp) {
    var finished = true;
    var newObject = {};
    for (var key in animation.current) {
      var result = animation[key].onFrame(animation[key], timestamp);
      finished = finished && result;
      newObject[key] = animation[key].current;
    }
    animation.current = newObject;
    return finished;
  };
  animation.onStart = function (animation, value, timestamp, previousAnimation) {
    if (animation.reduceMotion === undefined) {
      animation.reduceMotion = getReduceMotionFromConfig();
    }
    if (animation.reduceMotion) {
      if (animation.toValue !== undefined) {
        animation.current = animation.toValue;
      } else {
        baseOnStart(animation, value, timestamp, previousAnimation);
      }
      animation.startTime = 0;
      animation.onFrame = function () {
        return true;
      };
      return;
    }
    if ((0, _Colors.isColor)(value)) {
      colorOnStart(animation, value, timestamp, previousAnimation);
      animation.onFrame = colorOnFrame;
      return;
    } else if ((0, _matrixUtils.isAffineMatrixFlat)(value)) {
      transformationMatrixOnStart(animation, value, timestamp, previousAnimation);
      animation.onFrame = transformationMatrixOnFrame;
      return;
    } else if (Array.isArray(value)) {
      arrayOnStart(animation, value, timestamp, previousAnimation);
      animation.onFrame = arrayOnFrame;
      return;
    } else if (typeof value === 'string') {
      prefNumberSuffOnStart(animation, value, timestamp, previousAnimation);
      animation.onFrame = prefNumberSuffOnFrame;
      return;
    } else if (typeof value === 'object' && value !== null) {
      objectOnStart(animation, value, timestamp, previousAnimation);
      animation.onFrame = objectOnFrame;
      return;
    }
    baseOnStart(animation, value, timestamp, previousAnimation);
  };
}
function defineAnimation(starting, factory) {
  'worklet';

  if (IN_STYLE_UPDATER) {
    return starting;
  }
  var create = function create() {
    'worklet';

    var animation = factory();
    decorateAnimation(animation);
    return animation;
  };
  if (_WORKLET || SHOULD_BE_USE_WEB) {
    return create();
  }
  create.__isAnimationDefinition = true;
  return create;
}
function cancelAnimationNative(sharedValue) {
  'worklet';
  if (_WORKLET) {
    sharedValue.value = sharedValue.value;
  } else {
    (0, _threads.runOnUI)(function () {
      'worklet';

      sharedValue.value = sharedValue.value;
    })();
  }
}
function cancelAnimationWeb(sharedValue) {
  sharedValue.value = sharedValue.value;
}
var cancelAnimation = exports.cancelAnimation = SHOULD_BE_USE_WEB ? cancelAnimationWeb : cancelAnimationNative;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,