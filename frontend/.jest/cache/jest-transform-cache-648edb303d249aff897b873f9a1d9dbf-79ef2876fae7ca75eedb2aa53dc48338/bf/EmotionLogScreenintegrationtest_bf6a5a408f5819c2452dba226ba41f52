272e5971117438167e7fce266b3d57ec
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  goBack: jest.fn()
};
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}, {
  emotion_id: 3,
  name: '위로',
  icon: 'hand-peace',
  color: '#87CEEB'
}, {
  emotion_id: 4,
  name: '감동',
  icon: 'heart-outline',
  color: '#FF6347'
}, {
  emotion_id: 5,
  name: '슬픔',
  icon: 'emoticon-sad-outline',
  color: '#4682B4'
}, {
  emotion_id: 6,
  name: '불안',
  icon: 'alert-outline',
  color: '#DDA0DD'
}, {
  emotion_id: 7,
  name: '화남',
  icon: 'emoticon-angry-outline',
  color: '#FF4500'
}, {
  emotion_id: 8,
  name: '지침',
  icon: 'emoticon-neutral-outline',
  color: '#A9A9A9'
}, {
  emotion_id: 9,
  name: '우울',
  icon: 'weather-cloudy',
  color: '#708090'
}, {
  emotion_id: 10,
  name: '고독',
  icon: 'account-outline',
  color: '#8B4513'
}, {
  emotion_id: 11,
  name: '충격',
  icon: 'lightning-bolt',
  color: '#9932CC'
}, {
  emotion_id: 12,
  name: '편함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
describe('EmotionLogScreen 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText;
    expect(getByText('감정 데이터를 불러오는 중...')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('오늘의 감정')).toBeTruthy();
      expect(getByText('현재 어떤 감정을 느끼고 계신가요?')).toBeTruthy();
    });
  }), 30000);
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render2.findByText;
    for (var emotion of mockEmotions) {
      var emotionChip = yield findByText(emotion.name);
      expect(emotionChip).toBeTruthy();
    }
  }), 30000);
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render3.findByText,
      findByTestId = _render3.findByTestId;
    var happyChip = yield findByText('행복');
    expect(happyChip).toBeTruthy();
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render4.findByText,
      findByTestId = _render4.findByTestId;
    var happyChip = yield findByText('행복');
    var gratefulChip = yield findByText('감사');
    var comfortChip = yield findByText('위로');
    _reactNative.fireEvent.press(happyChip);
    _reactNative.fireEvent.press(gratefulChip);
    _reactNative.fireEvent.press(comfortChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render5.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }), 30000);
  it('감정 선택 후 제출 버튼이 활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render6.findByText,
      findByTestId = _render6.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render7.findByText,
      findByTestId = _render7.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    var alertCall = _reactNative2.Alert.alert.mock.calls[0];
    var confirmButton = alertCall[2][0];
    confirmButton.onPress();
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }), 30000);
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render8.findByText,
      findByTestId = _render8.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
    });
  }), 30000);
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render9.findByText,
      findByTestId = _render9.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
    _reactNative.fireEvent.press(happyChip);
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
    });
  }), 30000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRBbGxFbW90aW9ucyIsImplc3QiLCJmbiIsInJlY29yZEVtb3Rpb25zIiwiYWxlcnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfRW1vdGlvbkxvZ1NjcmVlbiIsIl9lbW90aW9uU2VydmljZSIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJtb2NrTmF2aWdhdGlvbiIsImdvQmFjayIsIm1vY2tFbW90aW9ucyIsImVtb3Rpb25faWQiLCJuYW1lIiwiaWNvbiIsImNvbG9yIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImVtb3Rpb25TZXJ2aWNlIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJkYXRhIiwic3RhdHVzIiwiaXQiLCJkZWZhdWx0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsIm5hdmlnYXRpb24iLCJnZXRCeVRleHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwid2FpdEZvciIsIl9yZW5kZXIyIiwiZmluZEJ5VGV4dCIsImVtb3Rpb24iLCJlbW90aW9uQ2hpcCIsIl9yZW5kZXIzIiwiZmluZEJ5VGVzdElkIiwiaGFwcHlDaGlwIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJzdWJtaXRCdXR0b24iLCJwcm9wcyIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsImRpc2FibGVkIiwidG9CZUZhbHN5IiwiX3JlbmRlcjQiLCJncmF0ZWZ1bENoaXAiLCJjb21mb3J0Q2hpcCIsIl9yZW5kZXI1Iiwibm90ZUlucHV0IiwiY2hhbmdlVGV4dCIsIl9yZW5kZXI2IiwiX3JlbmRlcjciLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiQWxlcnQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImFueXRoaW5nIiwiYWxlcnRDYWxsIiwiY2FsbHMiLCJjb25maXJtQnV0dG9uIiwib25QcmVzcyIsIm1vY2tSZWplY3RlZFZhbHVlT25jZSIsInJlc3BvbnNlIiwibWVzc2FnZSIsIl9yZW5kZXI4IiwiX3JlbmRlcjkiXSwic291cmNlcyI6WyJFbW90aW9uTG9nU2NyZWVuLmludGVncmF0aW9uLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IEFsZXJ0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IEVtb3Rpb25Mb2dTY3JlZW4gZnJvbSAnLi4vLi4vLi4vc3JjL3NjcmVlbnMvRW1vdGlvbkxvZ1NjcmVlbic7XHJcbmltcG9ydCBlbW90aW9uU2VydmljZSBmcm9tICcuLi8uLi8uLi9zcmMvc2VydmljZXMvYXBpL2Vtb3Rpb25TZXJ2aWNlJztcclxuXHJcbi8vIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvZW1vdGlvblNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldEFsbEVtb3Rpb25zOiBqZXN0LmZuKCksXHJcbiAgcmVjb3JkRW1vdGlvbnM6IGplc3QuZm4oKVxyXG59KSk7XHJcblxyXG4vLyBBbGVydCDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0FsZXJ0L0FsZXJ0JywgKCkgPT4gKHtcclxuICBhbGVydDogamVzdC5mbigpXHJcbn0pKTtcclxuXHJcbi8vIOuEpOu5hOqyjOydtOyFmCDrqqjtgrlcclxuY29uc3QgbW9ja05hdmlnYXRpb24gPSB7IGdvQmFjazogamVzdC5mbigpIH07XHJcblxyXG4vLyDrqqkg642w7J207YSwIC0g7Iuk7KCcIEFQSSDsnZHri7Ug6rWs7KGw7JeQIOunnuy2sCDsiJjsoJVcclxuY29uc3QgbW9ja0Vtb3Rpb25zID0gW1xyXG4gIHsgZW1vdGlvbl9pZDogMSwgbmFtZTogJ+2WieuztScsIGljb246ICdlbW90aWNvbi1oYXBweS1vdXRsaW5lJywgY29sb3I6ICcjRkZENzAwJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogMiwgbmFtZTogJ+qwkOyCrCcsIGljb246ICdoYW5kLWhlYXJ0JywgY29sb3I6ICcjRkY2OUI0JyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogMywgbmFtZTogJ+ychOuhnCcsIGljb246ICdoYW5kLXBlYWNlJywgY29sb3I6ICcjODdDRUVCJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogNCwgbmFtZTogJ+qwkOuPmScsIGljb246ICdoZWFydC1vdXRsaW5lJywgY29sb3I6ICcjRkY2MzQ3JyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogNSwgbmFtZTogJ+yKrO2UlCcsIGljb246ICdlbW90aWNvbi1zYWQtb3V0bGluZScsIGNvbG9yOiAnIzQ2ODJCNCcgfSxcclxuICB7IGVtb3Rpb25faWQ6IDYsIG5hbWU6ICfrtojslYgnLCBpY29uOiAnYWxlcnQtb3V0bGluZScsIGNvbG9yOiAnI0REQTBERCcgfSxcclxuICB7IGVtb3Rpb25faWQ6IDcsIG5hbWU6ICftmZTrgqgnLCBpY29uOiAnZW1vdGljb24tYW5ncnktb3V0bGluZScsIGNvbG9yOiAnI0ZGNDUwMCcgfSxcclxuICB7IGVtb3Rpb25faWQ6IDgsIG5hbWU6ICfsp4DsuagnLCBpY29uOiAnZW1vdGljb24tbmV1dHJhbC1vdXRsaW5lJywgY29sb3I6ICcjQTlBOUE5JyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogOSwgbmFtZTogJ+yasOyauCcsIGljb246ICd3ZWF0aGVyLWNsb3VkeScsIGNvbG9yOiAnIzcwODA5MCcgfSxcclxuICB7IGVtb3Rpb25faWQ6IDEwLCBuYW1lOiAn6rOg64+FJywgaWNvbjogJ2FjY291bnQtb3V0bGluZScsIGNvbG9yOiAnIzhCNDUxMycgfSxcclxuICB7IGVtb3Rpb25faWQ6IDExLCBuYW1lOiAn7Lap6rKpJywgaWNvbjogJ2xpZ2h0bmluZy1ib2x0JywgY29sb3I6ICcjOTkzMkNDJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogMTIsIG5hbWU6ICftjrjtlagnLCBpY29uOiAnc29mYS1vdXRsaW5lJywgY29sb3I6ICcjMzJDRDMyJyB9XHJcbl07XHJcblxyXG5kZXNjcmliZSgnRW1vdGlvbkxvZ1NjcmVlbiDthYzsiqTtirgnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIFxyXG4gICAgLy8g66qo7YK565CcIO2VqOyImOqwgCDsponsi5wg7J2R64u17ZWY64+E66GdIOyEpOyglVxyXG4gICAgKGVtb3Rpb25TZXJ2aWNlLmdldEFsbEVtb3Rpb25zIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyBcclxuICAgICAgZGF0YTogeyBcclxuICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJywgXHJcbiAgICAgICAgZGF0YTogbW9ja0Vtb3Rpb25zIFxyXG4gICAgICB9IFxyXG4gICAgfSk7XHJcbiAgICAoZW1vdGlvblNlcnZpY2UucmVjb3JkRW1vdGlvbnMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN0YXR1czogMjAwIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyDsu7Ttj6zrhIztirgg66CM642U66eBIO2FjOyKpO2KuFxyXG4gIGl0KCfroIzrjZTrp4HsnbQg7Jis67CU66W06rKMIOuQqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g7LSI6riwIOuhnOuUqSDtmZTrqbQg7ZmV7J24XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfqsJDsoJUg642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEuLi4nKSkudG9CZVRydXRoeSgpO1xyXG4gICAgXHJcbiAgICAvLyDrjbDsnbTthLAg66Gc65OcIOyZhOujjCDtm4Qg7ZmU66m0IO2ZleyduFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ+yYpOuKmOydmCDqsJDsoJUnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCftmITsnqwg7Ja065akIOqwkOygleydhCDripDrgbzqs6Ag6rOE7Iug6rCA7JqUPycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOqwkOyglSDsuakg66CM642U66eBIO2FjOyKpO2KuFxyXG4gIGl0KCfrqqjrk6Ag6rCQ7KCVIOy5qeydtCDsmKzrsJTrpbTqsowg66CM642U66eB65CoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBmaW5kQnlUZXh0IH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8gZmluZEJ5VGV4dOulvCDsgqzsmqntlbQg6rCBIOqwkOygleydhCDtmZXsnbhcclxuICAgIGZvciAoY29uc3QgZW1vdGlvbiBvZiBtb2NrRW1vdGlvbnMpIHtcclxuICAgICAgY29uc3QgZW1vdGlvbkNoaXAgPSBhd2FpdCBmaW5kQnlUZXh0KGVtb3Rpb24ubmFtZSk7XHJcbiAgICAgIGV4cGVjdChlbW90aW9uQ2hpcCkudG9CZVRydXRoeSgpO1xyXG4gICAgfVxyXG4gIH0sIDMwMDAwKTtcclxuXHJcbiAgLy8g6rCQ7KCVIOyEoO2DnSDsg4Htg5wg67OA6rK9IO2FjOyKpO2KuFxyXG4gIGl0KCfqsJDsoJUg7Lmp7J2EIO2BtOumre2VmOuptCDshKDtg50g7IOB7YOc6rCAIOuzgOqyveuQqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCwgZmluZEJ5VGVzdElkIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g7ZaJ67O1IOqwkOyglSDssL7quLBcclxuICAgIGNvbnN0IGhhcHB5Q2hpcCA9IGF3YWl0IGZpbmRCeVRleHQoJ+2WieuztScpO1xyXG4gICAgZXhwZWN0KGhhcHB5Q2hpcCkudG9CZVRydXRoeSgpO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoaGFwcHlDaGlwKTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvOydtCDtmZzshLHtmZTrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzdWJtaXRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlRmFsc3koKTtcclxuICAgIH0pO1xyXG4gIH0sIDMwMDAwKTtcclxuXHJcbiAgLy8g7Jes65+sIOqwkOyglSDshKDtg50g7YWM7Iqk7Yq4XHJcbiAgaXQoJ+yXrOufrCDqsJDsoJXsnYQg7ISg7YOd7ZWgIOyImCDsnojsnYwnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGZpbmRCeVRleHQsIGZpbmRCeVRlc3RJZCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOyXrOufrCDqsJDsoJUg7LC+6riwIOuwjyDshKDtg51cclxuICAgIGNvbnN0IGhhcHB5Q2hpcCA9IGF3YWl0IGZpbmRCeVRleHQoJ+2WieuztScpO1xyXG4gICAgY29uc3QgZ3JhdGVmdWxDaGlwID0gYXdhaXQgZmluZEJ5VGV4dCgn6rCQ7IKsJyk7XHJcbiAgICBjb25zdCBjb21mb3J0Q2hpcCA9IGF3YWl0IGZpbmRCeVRleHQoJ+ychOuhnCcpO1xyXG4gICAgXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoaGFwcHlDaGlwKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhncmF0ZWZ1bENoaXApO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGNvbWZvcnRDaGlwKTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvOydtCDtmZzshLHtmZTrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzdWJtaXRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlRmFsc3koKTtcclxuICAgIH0pO1xyXG4gIH0sIDMwMDAwKTtcclxuXHJcbiAgLy8g66mU66qoIOyeheugpSDthYzsiqTtirhcclxuICBpdCgn66mU66qoIOyeheugpeydtCDqsIDriqXtlagnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGZpbmRCeVRlc3RJZCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIGNvbnN0IG5vdGVJbnB1dCA9IGF3YWl0IGZpbmRCeVRlc3RJZCgnZW1vdGlvbi1ub3RlLWlucHV0Jyk7XHJcbiAgICBleHBlY3Qobm90ZUlucHV0KS50b0JlVHJ1dGh5KCk7XHJcbiAgICBcclxuICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KG5vdGVJbnB1dCwgJ+yYpOuKmOydgCDsoJXrp5Ag7KKL7J2AIO2VmOujqOyYgOyKteuLiOuLpC4nKTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOygnOy2nCDrsoTtirwg7YWM7Iqk7Yq4XHJcbiAgaXQoJ+qwkOyglSDshKDtg50g7ZuEIOygnOy2nCDrsoTtirzsnbQg7Zmc7ISx7ZmU65CoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBmaW5kQnlUZXh0LCBmaW5kQnlUZXN0SWQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICBjb25zdCBoYXBweUNoaXAgPSBhd2FpdCBmaW5kQnlUZXh0KCftlonrs7UnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhoYXBweUNoaXApO1xyXG4gICAgXHJcbiAgICAvLyDsoJzstpwg67KE7Yq8IO2ZleyduFxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYXdhaXQgZmluZEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc3VibWl0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZUZhbHN5KCk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOq4sOuhnSDshLHqs7Ug7YWM7Iqk7Yq4XHJcbiAgaXQoJ+qwkOyglSDquLDroZ0g7KCc7LacIOyEseqztSDsi5wg7ZmV7J24IOuplOyLnOyngOyZgCDtmZTrqbQg7J2064+Z7J20IOuPmeyeke2VqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCwgZmluZEJ5VGVzdElkIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOyEoO2DnVxyXG4gICAgY29uc3QgaGFwcHlDaGlwID0gYXdhaXQgZmluZEJ5VGV4dCgn7ZaJ67O1Jyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoaGFwcHlDaGlwKTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvCDtgbTrpq1cclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGF3YWl0IGZpbmRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIFxyXG4gICAgLy8gQVBJIO2YuOy2nCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZW1vdGlvblNlcnZpY2UucmVjb3JkRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBBbGVydCDtmLjstpwg7ZmV7J24XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAn6rCQ7KCVIOq4sOuhnSDsmYTro4wnLFxyXG4gICAgICAn7Jik64qY7J2YIOqwkOygleydtCDshLHqs7XsoIHsnLzroZwg6riw66Gd65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyBBbGVydOydmCDsvZzrsLEg7ZWo7IiYIO2YuOy2nCDsi5zrrqzroIjsnbTshZhcclxuICAgIGNvbnN0IGFsZXJ0Q2FsbCA9IChBbGVydC5hbGVydCBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHNbMF07XHJcbiAgICBjb25zdCBjb25maXJtQnV0dG9uID0gYWxlcnRDYWxsWzJdWzBdO1xyXG4gICAgY29uZmlybUJ1dHRvbi5vblByZXNzKCk7XHJcbiAgICBcclxuICAgIC8vIOuEpOu5hOqyjOydtOyFmCDtmZXsnbhcclxuICAgIGV4cGVjdChtb2NrTmF2aWdhdGlvbi5nb0JhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOq4sOuhnSDsi6TtjKgg7YWM7Iqk7Yq4XHJcbiAgaXQoJ+qwkOyglSDquLDroZ0g7KCc7LacIOyLpO2MqCDsi5wg7JeQ65+sIOuplOyLnOyngOqwgCDtkZzsi5zrkKgnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBBUEkg7Jik66WYIOyEpOyglVxyXG4gICAgKGVtb3Rpb25TZXJ2aWNlLnJlY29yZEVtb3Rpb25zIGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKHtcclxuICAgICAgcmVzcG9uc2U6IHsgZGF0YTogeyBtZXNzYWdlOiAn6rCQ7KCVIOq4sOuhnSDsi6TtjKgnIH0gfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCwgZmluZEJ5VGVzdElkIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOyEoO2DnVxyXG4gICAgY29uc3QgaGFwcHlDaGlwID0gYXdhaXQgZmluZEJ5VGV4dCgn7ZaJ67O1Jyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoaGFwcHlDaGlwKTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvCDtgbTrpq1cclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGF3YWl0IGZpbmRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIFxyXG4gICAgLy8gQVBJIO2YuOy2nCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZW1vdGlvblNlcnZpY2UucmVjb3JkRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBBbGVydCDtmLjstpwg7ZmV7J24XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgn7Jik66WYJywgJ+qwkOyglSDquLDroZ0g7Iuk7YyoJyk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOyDiOuhnOyatCDthYzsiqTtirggLSDqsJDsoJUg7ISg7YOdIO2VtOygnCDthYzsiqTtirhcclxuICBpdCgn6rCQ7KCV7J2EIOyEoO2Dne2WiOuLpOqwgCDri6Tsi5wg7YG066at7ZWY66m0IOyEoO2DneydtCDtlbTsoJzrkKgnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGZpbmRCeVRleHQsIGZpbmRCeVRlc3RJZCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDshKDtg51cclxuICAgIGNvbnN0IGhhcHB5Q2hpcCA9IGF3YWl0IGZpbmRCeVRleHQoJ+2WieuztScpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGhhcHB5Q2hpcCk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirzsnbQg7Zmc7ISx7ZmU65CoXHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzdWJtaXRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlRmFsc3koKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg64uk7IucIO2BtOumre2VtOyEnCDshKDtg50g7ZW07KCcXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoaGFwcHlDaGlwKTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvOydtCDri6Tsi5wg67mE7Zmc7ISx7ZmU65CoXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHN1Ym1pdEJ1dHRvbi5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUuZGlzYWJsZWQpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gIH0sIDMwMDAwKTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxH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