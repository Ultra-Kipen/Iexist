{"version":3,"names":["_fs","_interopRequireDefault","require","_path","describe","homeStackSource","beforeAll","homeStackPath","path","resolve","__dirname","fs","readFileSync","it","expect","toContain"],"sources":["HomeStack.test.tsx"],"sourcesContent":["// __tests__/navigation/HomeStack.test.tsx\r\nimport React from 'react';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\ndescribe('HomeStack 소스 코드 검증', () => {\r\n  let homeStackSource;\r\n  \r\n  beforeAll(() => {\r\n    // HomeStack.tsx 파일 읽기\r\n    const homeStackPath = path.resolve(__dirname, '../../src/navigation/HomeStack.tsx');\r\n    homeStackSource = fs.readFileSync(homeStackPath, 'utf8');\r\n  });\r\n  \r\n  it('HomeStack이 필요한 컴포넌트를 import해야 함', () => {\r\n    expect(homeStackSource).toContain('import React from');\r\n    expect(homeStackSource).toContain('import { createNativeStackNavigator }');\r\n    expect(homeStackSource).toContain('import HomeScreen from');\r\n    expect(homeStackSource).toContain('import EmotionLogScreen from');\r\n  });\r\n  \r\n  it('HomeStack이 네비게이션 타입을 정의해야 함', () => {\r\n    expect(homeStackSource).toContain('type HomeStackParamList');\r\n    expect(homeStackSource).toContain('HomeMain: undefined');\r\n    expect(homeStackSource).toContain('EmotionLog: undefined');\r\n  });\r\n  \r\n  it('HomeStack이 네비게이션 스택을 생성해야 함', () => {\r\n    expect(homeStackSource).toContain('const Stack = createNativeStackNavigator');\r\n  });\r\n  \r\n  it('HomeStack이 올바른 화면을 포함해야 함', () => {\r\n    expect(homeStackSource).toContain('<Stack.Navigator>');\r\n    expect(homeStackSource).toContain('<Stack.Screen name=\"HomeMain\" component={HomeScreen}');\r\n    expect(homeStackSource).toContain('<Stack.Screen name=\"EmotionLog\" component={EmotionLogScreen}');\r\n  });\r\n  \r\n  it('HomeStack이 화면 옵션을 설정해야 함', () => {\r\n    expect(homeStackSource).toContain('options={{ title: \\'나의 하루\\' }}');\r\n    expect(homeStackSource).toContain('options={{ title: \\'감정 기록\\' }}');\r\n  });\r\n  \r\n  it('HomeStack이 올바르게 export되어야 함', () => {\r\n    expect(homeStackSource).toContain('export default HomeStack');\r\n  });\r\n});"],"mappings":";AAEA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEAE,QAAQ,CAAC,oBAAoB,EAAE,YAAM;EACnC,IAAIC,eAAe;EAEnBC,SAAS,CAAC,YAAM;IAEd,IAAMC,aAAa,GAAGC,aAAI,CAACC,OAAO,CAACC,SAAS,EAAE,oCAAoC,CAAC;IACnFL,eAAe,GAAGM,WAAE,CAACC,YAAY,CAACL,aAAa,EAAE,MAAM,CAAC;EAC1D,CAAC,CAAC;EAEFM,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC1CC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,mBAAmB,CAAC;IACtDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,uCAAuC,CAAC;IAC1ED,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,wBAAwB,CAAC;IAC3DD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,8BAA8B,CAAC;EACnE,CAAC,CAAC;EAEFF,EAAE,CAAC,6BAA6B,EAAE,YAAM;IACtCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,yBAAyB,CAAC;IAC5DD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,qBAAqB,CAAC;IACxDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,uBAAuB,CAAC;EAC5D,CAAC,CAAC;EAEFF,EAAE,CAAC,6BAA6B,EAAE,YAAM;IACtCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,0CAA0C,CAAC;EAC/E,CAAC,CAAC;EAEFF,EAAE,CAAC,2BAA2B,EAAE,YAAM;IACpCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,mBAAmB,CAAC;IACtDD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,sDAAsD,CAAC;IACzFD,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,8DAA8D,CAAC;EACnG,CAAC,CAAC;EAEFF,EAAE,CAAC,0BAA0B,EAAE,YAAM;IACnCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,gCAAgC,CAAC;IACnED,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,gCAAgC,CAAC;EACrE,CAAC,CAAC;EAEFF,EAAE,CAAC,6BAA6B,EAAE,YAAM;IACtCC,MAAM,CAACT,eAAe,CAAC,CAACU,SAAS,CAAC,0BAA0B,CAAC;EAC/D,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}