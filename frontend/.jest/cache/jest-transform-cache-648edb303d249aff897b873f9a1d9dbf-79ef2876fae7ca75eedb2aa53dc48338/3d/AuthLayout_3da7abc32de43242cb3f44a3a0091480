5b15af8851838878ffee08283994ff63
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var ReactNative = _interopRequireWildcard(require("react-native"));
var _useTheme2 = require("../hooks/useTheme");
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var View = ReactNative.View,
  StyleSheet = ReactNative.StyleSheet,
  Platform = ReactNative.Platform,
  ScrollView = ReactNative.ScrollView,
  KeyboardAvoidingView = ReactNative.KeyboardAvoidingView,
  TouchableWithoutFeedback = ReactNative.TouchableWithoutFeedback,
  Keyboard = ReactNative.Keyboard,
  ImageBackground = ReactNative.ImageBackground,
  Image = ReactNative.Image,
  StatusBar = ReactNative.StatusBar;
var AuthLayout = function AuthLayout(_ref) {
  var children = _ref.children,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    title = _ref.title,
    footer = _ref.footer,
    _ref$imageBackground = _ref.imageBackground,
    imageBackground = _ref$imageBackground === void 0 ? false : _ref$imageBackground,
    _ref$logoVisible = _ref.logoVisible,
    logoVisible = _ref$logoVisible === void 0 ? true : _ref$logoVisible;
  var _useTheme = (0, _useTheme2.useTheme)(),
    theme = _useTheme.theme;
  var dismissKeyboard = function dismissKeyboard() {
    try {
      if (Keyboard && typeof Keyboard.dismiss === 'function') {
        Keyboard.dismiss();
      }
    } catch (error) {
      console.error('키보드 닫기 오류', error);
    }
  };
  var renderContent = function renderContent() {
    return (0, _jsxRuntime.jsx)(KeyboardAvoidingView, {
      behavior: Platform.OS === 'ios' ? 'padding' : 'height',
      style: styles.keyboardView,
      testID: "keyboard-avoiding-view",
      children: (0, _jsxRuntime.jsx)(TouchableWithoutFeedback, {
        onPress: dismissKeyboard,
        testID: "keyboard-dismiss",
        children: (0, _jsxRuntime.jsxs)(ScrollView, {
          contentContainerStyle: styles.scrollView,
          keyboardShouldPersistTaps: "handled",
          testID: "scroll-view",
          children: [logoVisible && (0, _jsxRuntime.jsx)(View, {
            style: styles.logoContainer,
            testID: "logo-container",
            children: (0, _jsxRuntime.jsx)(Image, {
              source: require("../assets/images/logo.png"),
              style: styles.logo,
              resizeMode: "contain",
              testID: "logo-image"
            })
          }), title && (0, _jsxRuntime.jsx)(View, {
            style: styles.titleContainer,
            testID: "title-container",
            children: title
          }), (0, _jsxRuntime.jsx)(View, {
            style: styles.contentContainer,
            testID: "content-container",
            children: loading ? (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {}) : children
          }), footer && (0, _jsxRuntime.jsx)(View, {
            style: styles.footerContainer,
            testID: "footer-container",
            children: footer
          })]
        })
      })
    });
  };
  if (imageBackground) {
    return (0, _jsxRuntime.jsxs)(View, {
      style: styles.container,
      testID: "auth-layout",
      children: [(0, _jsxRuntime.jsx)(StatusBar, {
        backgroundColor: "transparent",
        barStyle: "light-content",
        testID: "status-bar"
      }), (0, _jsxRuntime.jsx)(ImageBackground, {
        source: require("../assets/images/auth-background.jpg"),
        style: styles.backgroundImage,
        resizeMode: "cover",
        testID: "image-background",
        children: (0, _jsxRuntime.jsx)(View, {
          style: styles.overlay,
          testID: "overlay",
          children: renderContent()
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(View, {
    style: [styles.container, {
      backgroundColor: theme.colors.background
    }],
    testID: "auth-layout",
    children: [(0, _jsxRuntime.jsx)(StatusBar, {
      backgroundColor: theme.colors.background,
      barStyle: theme.dark ? 'light-content' : 'dark-content',
      testID: "status-bar"
    }), renderContent()]
  });
};
var styles = StyleSheet.create({
  container: {
    flex: 1
  },
  backgroundImage: {
    flex: 1,
    width: '100%',
    height: '100%'
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    paddingTop: Platform.OS === 'android' ? 30 : 0
  },
  keyboardView: {
    flex: 1
  },
  scrollView: {
    flexGrow: 1,
    paddingHorizontal: 20,
    paddingBottom: 20
  },
  logoContainer: {
    alignItems: 'center',
    marginTop: 50,
    marginBottom: 30
  },
  logo: {
    width: 150,
    height: 150
  },
  titleContainer: {
    marginBottom: 30
  },
  contentContainer: {
    flex: 1,
    width: '100%'
  },
  footerContainer: {
    width: '100%',
    marginTop: 20,
    alignItems: 'center'
  }
});
var _default = exports.default = AuthLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,