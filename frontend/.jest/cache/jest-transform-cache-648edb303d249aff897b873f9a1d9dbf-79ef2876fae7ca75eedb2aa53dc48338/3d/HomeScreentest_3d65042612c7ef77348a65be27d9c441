98c8be6597139914a6072726b2218683
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    interceptors: {
      request: {
        use: jest.fn()
      },
      response: {
        use: jest.fn()
      }
    },
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve('test_token');
    }),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: function useAuth() {
      return {
        user: {
          username: 'testuser',
          nickname: 'Test User'
        },
        isAuthenticated: true,
        login: jest.fn(),
        logout: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: function useEmotion() {
      return {
        emotions: [{
          emotion_id: 1,
          name: '행복',
          icon: 'emoticon-happy-outline'
        }, {
          emotion_id: 2,
          name: '감사',
          icon: 'hand-heart'
        }],
        selectedEmotions: [],
        selectEmotion: jest.fn(),
        logEmotion: jest.fn()
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HomeScreen = _interopRequireDefault(require("../../src/screens/HomeScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen', function () {
  it('renders correctly when authenticated', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    var homeContainer = getByTestId('home-screen-container');
    expect(homeContainer).toBeTruthy();
    expect(getByText('환영합니다, Test User님')).toBeTruthy();
  });
  it('displays the emotion selector', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      getByTestId = _render2.getByTestId;
    var emotionSurface = getByTestId('emotion-surface');
    expect(emotionSurface).toBeTruthy();
  });
  it('allows users to create a post', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      getByTestId = _render3.getByTestId,
      getByPlaceholderText = _render3.getByPlaceholderText;
    var postInput = getByPlaceholderText('나의 오늘은...');
    _reactNative.fireEvent.changeText(postInput, '테스트 게시물 내용');
    var shareButton = getByTestId('share-post-button');
    _reactNative.fireEvent.press(shareButton);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,