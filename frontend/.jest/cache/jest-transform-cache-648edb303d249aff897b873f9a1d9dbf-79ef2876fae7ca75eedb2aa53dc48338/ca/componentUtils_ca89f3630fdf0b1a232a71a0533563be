78b7351acf1c5e9326cf2236cb066900
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getProcessedConfig = getProcessedConfig;
exports.getReducedMotionFromConfig = getReducedMotionFromConfig;
exports.handleExitingAnimation = handleExitingAnimation;
exports.handleLayoutTransition = handleLayoutTransition;
exports.maybeModifyStyleForKeyframe = maybeModifyStyleForKeyframe;
exports.saveSnapshot = saveSnapshot;
exports.setElementAnimation = setElementAnimation;
var _commonTypes = require("../../commonTypes.js");
var _Easing = require("../../Easing.js");
var _index = require("../../logger/index.js");
var _index2 = require("../../ReanimatedModule/js-reanimated/index.js");
var _ReducedMotion = require("../../ReducedMotion.js");
var _index3 = require("../animationBuilder/index.js");
var _componentStyle = require("./componentStyle.js");
var _config = require("./config.js");
var _createAnimation = require("./createAnimation.js");
var _domUtils = require("./domUtils.js");
var _EasingWeb = require("./Easing.web.js");
var _CurvedWeb = require("./transition/Curved.web.js");
function getEasingFromConfig(config) {
  if (!config.easingV) {
    return (0, _EasingWeb.getEasingByName)('linear');
  }
  var easingName = config.easingV[_Easing.EasingNameSymbol];
  if (!(easingName in _EasingWeb.WebEasings)) {
    _index.logger.warn(`Selected easing is not currently supported on web.`);
    return (0, _EasingWeb.getEasingByName)('linear');
  }
  return (0, _EasingWeb.getEasingByName)(easingName);
}
function getRandomDelay() {
  var maxDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
  return Math.floor(Math.random() * (maxDelay + 1)) / 1000;
}
function getDelayFromConfig(config) {
  var shouldRandomizeDelay = config.randomizeDelay;
  var delay = shouldRandomizeDelay ? getRandomDelay() : 0;
  if (!config.delayV) {
    return delay;
  }
  return shouldRandomizeDelay ? getRandomDelay(config.delayV) : config.delayV / 1000;
}
function getReducedMotionFromConfig(config) {
  if (!config.reduceMotionV) {
    return _ReducedMotion.ReducedMotionManager.jsValue;
  }
  switch (config.reduceMotionV) {
    case _commonTypes.ReduceMotion.Never:
      return false;
    case _commonTypes.ReduceMotion.Always:
      return true;
    default:
      return _ReducedMotion.ReducedMotionManager.jsValue;
  }
}
function getDurationFromConfig(config, animationName) {
  var defaultDuration = animationName in _config.Animations ? _config.Animations[animationName].duration : 0.3;
  return config.durationV !== undefined ? config.durationV / 1000 : defaultDuration;
}
function getCallbackFromConfig(config) {
  return config.callbackV !== undefined ? config.callbackV : null;
}
function getReversedFromConfig(config) {
  return !!config.reversed;
}
function getProcessedConfig(animationName, animationType, config) {
  return {
    animationName: animationName,
    animationType: animationType,
    duration: getDurationFromConfig(config, animationName),
    delay: getDelayFromConfig(config),
    easing: getEasingFromConfig(config),
    callback: getCallbackFromConfig(config),
    reversed: getReversedFromConfig(config)
  };
}
function maybeModifyStyleForKeyframe(element, config) {
  if (!(config instanceof _index3.Keyframe)) {
    return;
  }
  element.style.animationFillMode = 'forwards';
  for (var timestampRules of Object.values(config.definitions)) {
    if ('originX' in timestampRules || 'originY' in timestampRules) {
      element.style.position = 'absolute';
      return;
    }
  }
}
function saveSnapshot(element) {
  var rect = element.getBoundingClientRect();
  var snapshot = {
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height,
    scrollOffsets: getElementScrollValue(element)
  };
  _componentStyle.snapshots.set(element, snapshot);
}
function setElementAnimation(element, animationConfig) {
  var shouldSavePosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var animationName = animationConfig.animationName,
    duration = animationConfig.duration,
    delay = animationConfig.delay,
    easing = animationConfig.easing;
  var configureAnimation = function configureAnimation() {
    element.style.animationName = animationName;
    element.style.animationDuration = `${duration}s`;
    element.style.animationDelay = `${delay}s`;
    element.style.animationTimingFunction = easing;
  };
  if (animationConfig.animationType === _commonTypes.LayoutAnimationType.ENTERING) {
    requestAnimationFrame(configureAnimation);
  } else {
    configureAnimation();
  }
  element.onanimationend = function () {
    if (shouldSavePosition) {
      saveSnapshot(element);
    }
    if (parent != null && parent.contains(element)) {
      element.removedAfterAnimation = true;
      parent.removeChild(element);
    }
    animationConfig.callback == null || animationConfig.callback(true);
    element.removeEventListener('animationcancel', _animationCancelHandler);
  };
  var _animationCancelHandler = function animationCancelHandler() {
    animationConfig.callback == null || animationConfig.callback(false);
    if (parent != null && parent.contains(element)) {
      element.removedAfterAnimation = true;
      parent.removeChild(element);
    }
    element.removeEventListener('animationcancel', _animationCancelHandler);
  };
  element.onanimationstart = function () {
    if (animationConfig.animationType === _commonTypes.LayoutAnimationType.ENTERING) {
      (0, _index2._updatePropsJS)({
        visibility: 'initial'
      }, element);
    }
    element.addEventListener('animationcancel', _animationCancelHandler);
  };
  if (!(animationName in _config.Animations)) {
    (0, _domUtils.scheduleAnimationCleanup)(animationName, duration + delay, function () {
      if (shouldSavePosition) {
        (0, _componentStyle.setElementPosition)(element, _componentStyle.snapshots.get(element));
      }
    });
  }
}
function handleLayoutTransition(element, animationConfig, transitionData) {
  var animationName = animationConfig.animationName;
  var animationType;
  switch (animationName) {
    case 'LinearTransition':
      animationType = _config.TransitionType.LINEAR;
      break;
    case 'SequencedTransition':
      animationType = _config.TransitionType.SEQUENCED;
      break;
    case 'FadingTransition':
      animationType = _config.TransitionType.FADING;
      break;
    case 'JumpingTransition':
      animationType = _config.TransitionType.JUMPING;
      break;
    case 'CurvedTransition':
      animationType = _config.TransitionType.CURVED;
      break;
    case 'EntryExitTransition':
      animationType = _config.TransitionType.ENTRY_EXIT;
      break;
    default:
      animationType = _config.TransitionType.LINEAR;
      break;
  }
  var _TransitionGenerator = (0, _createAnimation.TransitionGenerator)(animationType, transitionData),
    transitionKeyframeName = _TransitionGenerator.transitionKeyframeName,
    dummyTransitionKeyframeName = _TransitionGenerator.dummyTransitionKeyframeName;
  animationConfig.animationName = transitionKeyframeName;
  if (animationType === _config.TransitionType.CURVED) {
    var _prepareCurvedTransit = (0, _CurvedWeb.prepareCurvedTransition)(element, animationConfig, transitionData, dummyTransitionKeyframeName),
      dummy = _prepareCurvedTransit.dummy,
      dummyAnimationConfig = _prepareCurvedTransit.dummyAnimationConfig;
    setElementAnimation(dummy, dummyAnimationConfig);
  }
  setElementAnimation(element, animationConfig);
}
function getElementScrollValue(element) {
  var current = element;
  var scrollOffsets = {
    scrollTopOffset: 0,
    scrollLeftOffset: 0
  };
  while (current) {
    if (current.scrollTop !== 0 && scrollOffsets.scrollTopOffset === 0) {
      scrollOffsets.scrollTopOffset = current.scrollTop;
    }
    if (current.scrollLeft !== 0 && scrollOffsets.scrollLeftOffset === 0) {
      scrollOffsets.scrollLeftOffset = current.scrollLeft;
    }
    current = current.parentElement;
  }
  return scrollOffsets;
}
function handleExitingAnimation(element, animationConfig) {
  var parent = element.offsetParent;
  var dummy = element.cloneNode();
  dummy.reanimatedDummy = true;
  element.style.animationName = '';
  dummy.style.animationName = '';
  while (element.firstChild) {
    dummy.appendChild(element.firstChild);
  }
  parent == null || parent.appendChild(dummy);
  var snapshot = _componentStyle.snapshots.get(element);
  var scrollOffsets = getElementScrollValue(element);
  var currentScrollTopOffset = scrollOffsets.scrollTopOffset;
  var lastScrollTopOffset = snapshot.scrollOffsets.scrollTopOffset;
  if (currentScrollTopOffset !== lastScrollTopOffset) {
    snapshot.top += lastScrollTopOffset - currentScrollTopOffset;
  }
  var currentScrollLeftOffset = scrollOffsets.scrollLeftOffset;
  var lastScrollLeftOffset = snapshot.scrollOffsets.scrollLeftOffset;
  if (currentScrollLeftOffset !== lastScrollLeftOffset) {
    snapshot.left += lastScrollLeftOffset - currentScrollLeftOffset;
  }
  _componentStyle.snapshots.set(dummy, snapshot);
  (0, _componentStyle.setElementPosition)(dummy, snapshot);
  setElementAnimation(dummy, animationConfig, false, parent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,