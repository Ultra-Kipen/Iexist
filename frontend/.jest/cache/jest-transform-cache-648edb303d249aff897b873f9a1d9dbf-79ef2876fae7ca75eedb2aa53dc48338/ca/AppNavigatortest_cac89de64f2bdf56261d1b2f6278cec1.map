{"version":3,"names":["_getJestObj","mock","useAuth","jest","fn","NavigationContainer","_ref","children","_jsxRuntime","jsx","Fragment","createNativeStackNavigator","Navigator","_ref3","Screen","props","mockScreen","_interopRequireDefault","require","_react","_reactNative","_AuthContext","_AppNavigator","_require","mockImplementation","_ref2","name","describe","beforeEach","mockClear","it","mockReturnValue","isAuthenticated","isLoading","render","default","expect","toHaveBeenCalledWith","objectContaining","_render","toJSON","toBeNull"],"sources":["AppNavigator.test.tsx"],"sourcesContent":["// __tests__/navigation/AppNavigator.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { useAuth } from '../../src/contexts/AuthContext';\r\nimport AppNavigator from '../../src/navigation/AppNavigator';\r\n\r\n// 컴포넌트 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: jest.fn(),\r\n}));\r\n\r\n// 네비게이션 관련 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  NavigationContainer: ({ children }: { children: React.ReactNode }) => <>{children}</>\r\n}));\r\n\r\n// 스택 네비게이터 모킹\r\nconst mockScreen = jest.fn().mockImplementation(({ name }) => <div>{name}</div>);\r\n\r\njest.mock('@react-navigation/native-stack', () => ({\r\n  createNativeStackNavigator: () => ({\r\n    Navigator: ({ children }: { children: React.ReactNode }) => <>{children}</>,\r\n    Screen: (props: any) => mockScreen(props)\r\n  })\r\n}));\r\n\r\n// 스택 컴포넌트 모킹\r\njest.mock('../../src/navigation/AuthStack', () => 'MockedAuthStack');\r\njest.mock('../../src/navigation/MainTabs', () => 'MockedMainTabs');\r\n\r\ndescribe('AppNavigator', () => {\r\n  beforeEach(() => {\r\n    mockScreen.mockClear();\r\n  });\r\n\r\n  it('인증되지 않은 상태일 때 AuthStack 스크린이 포함되어야 함', () => {\r\n    // 인증되지 않은 상태 설정\r\n    (useAuth as jest.Mock).mockReturnValue({\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n    });\r\n    \r\n    render(<AppNavigator />);\r\n    expect(mockScreen).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        name: 'AuthStack'\r\n      })\r\n    );\r\n  });\r\n  \r\n  it('인증된 상태일 때 MainTabs 스크린이 포함되어야 함', () => {\r\n    // 인증된 상태 설정\r\n    (useAuth as jest.Mock).mockReturnValue({\r\n      isAuthenticated: true,\r\n      isLoading: false,\r\n    });\r\n    \r\n    render(<AppNavigator />);\r\n    expect(mockScreen).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        name: 'MainTabs'\r\n      })\r\n    );\r\n  });\r\n  \r\n  it('로딩 중일 때 null을 반환해야 함', () => {\r\n    // 로딩 상태 설정\r\n    (useAuth as jest.Mock).mockReturnValue({\r\n      isAuthenticated: false,\r\n      isLoading: true,\r\n    });\r\n    \r\n    const { toJSON } = render(<AppNavigator />);\r\n    expect(toJSON()).toBeNull();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}