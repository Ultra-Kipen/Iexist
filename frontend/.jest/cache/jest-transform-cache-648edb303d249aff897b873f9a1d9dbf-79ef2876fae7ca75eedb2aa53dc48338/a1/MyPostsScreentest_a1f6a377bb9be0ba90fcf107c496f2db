0e6950d2625a821a81335eaf682c281a
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          posts: [{
            post_id: 1,
            content: '첫 번째 테스트 게시물입니다.',
            emotion_summary: '행복',
            like_count: 5,
            comment_count: 2,
            created_at: '2025-03-01T12:00:00Z'
          }]
        }
      });
    }),
    deletePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          success: true
        }
      });
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/screens/MyPostsScreen", function () {
  return 'MyPostsScreen';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _MyPostsScreen = _interopRequireDefault(require("../../src/screens/MyPostsScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockAddListener = jest.fn(function () {
  return jest.fn();
});
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('imports without crashing', function () {
    expect(_MyPostsScreen.default).toBeDefined();
  });
  it('has defined service methods', function () {
    expect(_postService.default.getMyPosts).toBeDefined();
    expect(_postService.default.deletePost).toBeDefined();
  });
  it('returns expected data from service mock', (0, _asyncToGenerator2.default)(function* () {
    var response = yield _postService.default.getMyPosts();
    expect(response.data.posts.length).toBe(1);
    expect(response.data.posts[0].post_id).toBe(1);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRNeVBvc3RzIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYXRhIiwicG9zdHMiLCJwb3N0X2lkIiwiY29udGVudCIsImVtb3Rpb25fc3VtbWFyeSIsImxpa2VfY291bnQiLCJjb21tZW50X2NvdW50IiwiY3JlYXRlZF9hdCIsImRlbGV0ZVBvc3QiLCJzdWNjZXNzIiwiYWxlcnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9NeVBvc3RzU2NyZWVuIiwiX3Bvc3RTZXJ2aWNlIiwiX3JlcXVpcmUiLCJtb2NrTmF2aWdhdGUiLCJtb2NrQWRkTGlzdGVuZXIiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJleHBlY3QiLCJNeVBvc3RzU2NyZWVuIiwidG9CZURlZmluZWQiLCJwb3N0U2VydmljZSIsImRlZmF1bHQiLCJyZXNwb25zZSIsImxlbmd0aCIsInRvQmUiXSwic291cmNlcyI6WyJNeVBvc3RzU2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fVEVTVFNfXy9zY3JlZW5zL015UG9zdHNTY3JlZW4udGVzdC50c3hcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IE15UG9zdHNTY3JlZW4gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvTXlQb3N0c1NjcmVlbic7XHJcbmltcG9ydCBwb3N0U2VydmljZSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYXBpL3Bvc3RTZXJ2aWNlJztcclxuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuLy8g7ISc67mE7IqkIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvcG9zdFNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldE15UG9zdHM6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgcG9zdHM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwb3N0X2lkOiAxLFxyXG4gICAgICAgICAgY29udGVudDogJ+yyqyDrsojsp7gg7YWM7Iqk7Yq4IOqyjOyLnOusvOyeheuLiOuLpC4nLFxyXG4gICAgICAgICAgZW1vdGlvbl9zdW1tYXJ5OiAn7ZaJ67O1JyxcclxuICAgICAgICAgIGxpa2VfY291bnQ6IDUsXHJcbiAgICAgICAgICBjb21tZW50X2NvdW50OiAyLFxyXG4gICAgICAgICAgY3JlYXRlZF9hdDogJzIwMjUtMDMtMDFUMTI6MDA6MDBaJyxcclxuICAgICAgICB9XHJcbiAgICAgIF1cclxuICAgIH1cclxuICB9KSksXHJcbiAgZGVsZXRlUG9zdDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgZGF0YTogeyBzdWNjZXNzOiB0cnVlIH1cclxuICB9KSlcclxufSkpO1xyXG5cclxuLy8gQWxlcnQg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbGVydC9BbGVydCcsICgpID0+ICh7XHJcbiAgYWxlcnQ6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8g7Lu07Y+s64SM7Yq4IOuqqO2CuSAtIOyLpOygnCDsu7Ttj6zrhIztirjrpbwg66CM642U66eB7ZWY7KeAIOyViuydjFxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zY3JlZW5zL015UG9zdHNTY3JlZW4nLCAoKSA9PiAnTXlQb3N0c1NjcmVlbicpO1xyXG5cclxuLy8g64Sk67mE6rKM7J207IWYIOuqqO2CuVxyXG5jb25zdCBtb2NrTmF2aWdhdGUgPSBqZXN0LmZuKCk7XHJcbmNvbnN0IG1vY2tBZGRMaXN0ZW5lciA9IGplc3QuZm4oKCkgPT4gamVzdC5mbigpKTtcclxuXHJcbmRlc2NyaWJlKCdNeVBvc3RzU2NyZWVuJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIDEuIOy7tO2PrOuEjO2KuCDrqqjrk4gg66Gc65SpIO2FjOyKpO2KuFxyXG4gIGl0KCdpbXBvcnRzIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QoTXlQb3N0c1NjcmVlbikudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxuXHJcbiAgLy8gMi4g7ISc67mE7IqkIO2VqOyImOqwgCDsoJXsnZjrkJjslrQg7J6I64qU7KeAIO2ZleyduFxyXG4gIGl0KCdoYXMgZGVmaW5lZCBzZXJ2aWNlIG1ldGhvZHMnLCAoKSA9PiB7XHJcbiAgICBleHBlY3QocG9zdFNlcnZpY2UuZ2V0TXlQb3N0cykudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChwb3N0U2VydmljZS5kZWxldGVQb3N0KS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG5cclxuICAvLyAzLiDshJzruYTsiqQg67CY7ZmYIOqwkiDtmZXsnbhcclxuICBpdCgncmV0dXJucyBleHBlY3RlZCBkYXRhIGZyb20gc2VydmljZSBtb2NrJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwb3N0U2VydmljZS5nZXRNeVBvc3RzKCk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YS5wb3N0cy5sZW5ndGgpLnRvQmUoMSk7XHJcbiAgICBleHBlY3QocmVzcG9uc2UuZGF0YS5wb3N0c1swXS5wb3N0X2lkKS50b0JlKDEpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksdUNBQXVDO0VBQUEsT0FBTztJQUNyREMsVUFBVSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1FBQ3hDQyxJQUFJLEVBQUU7VUFDSkMsS0FBSyxFQUFFLENBQ0w7WUFDRUMsT0FBTyxFQUFFLENBQUM7WUFDVkMsT0FBTyxFQUFFLGtCQUFrQjtZ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