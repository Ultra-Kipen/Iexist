36a8d8537db076ff97f698d98b9229e9
_getJestObj().mock('@testing-library/react-native', function () {
  return {
    render: jest.fn(function () {
      return {
        getByTestId: jest.fn(function () {
          return {};
        }),
        getByText: jest.fn(function () {
          return {};
        }),
        queryByTestId: jest.fn(function () {
          return null;
        })
      };
    }),
    act: jest.fn(function (cb) {
      return cb();
    })
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    Animated: {
      View: 'View',
      timing: jest.fn(function () {
        return {
          start: jest.fn()
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          })
        };
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
_reactNative.render.mockImplementation(function (ui) {
  var visible = ui.props.visible;
  var testID = ui.props.testID;
  var message = ui.props.message;
  var icon = ui.props.icon;
  var onClose = ui.props.onClose;
  var duration = ui.props.duration || 3000;
  if (visible && onClose) {
    setTimeout(function () {
      onClose();
    }, duration);
  }
  return {
    getByTestId: jest.fn(function (id) {
      if (id === testID && visible) return {
        props: ui.props
      };
      if (id === 'test-icon' && icon) return {
        props: {
          children: '아이콘'
        }
      };
      throw new Error(`TestID not found: ${id}`);
    }),
    getByText: jest.fn(function (text) {
      if (text === message && visible) return {
        props: {
          children: message
        }
      };
      throw new Error(`Text not found: ${text}`);
    }),
    queryByTestId: jest.fn(function (id) {
      if (id === testID && visible) return {
        props: ui.props
      };
      return null;
    })
  };
});
describe('Toast', function () {
  afterEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  test('renders correctly with default props', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      testID: "toast"
    }));
    expect(renderResult.getByTestId('toast')).toBeTruthy();
    expect(renderResult.getByText('테스트 메시지')).toBeTruthy();
  }, 120000);
  test('does not render when visible is false', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      testID: "toast"
    }));
    expect(renderResult.queryByTestId('toast')).toBeNull();
  }, 120000);
  test('icon renders correctly', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
      testID: "toast"
    }));
    expect(renderResult.getByTestId('test-icon')).toBeTruthy();
  }, 120000);
  test('onClose is called after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  }, 120000);
  test('ToastController should handle show and hide', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    expect(mockToast.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockToast.hide).toHaveBeenCalled();
  }, 120000);
  test('ToastController handles missing instance', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  }, 120000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,