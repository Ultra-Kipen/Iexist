ea5ed026c3db947d8d29b7f51341acfa
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollTo = scrollTo;
var _jestMatcherUtils = require("jest-matcher-utils");
var _errors = require("../../helpers/errors");
var _hostComponentNames = require("../../helpers/host-component-names");
var _object = require("../../helpers/object");
var _nativeState = require("../../native-state");
var _eventBuilder = require("../event-builder");
var _utils = require("../utils");
var _utils2 = require("./utils");
function scrollTo(_x, _x2) {
  return _scrollTo.apply(this, arguments);
}
function _scrollTo() {
  _scrollTo = (0, _asyncToGenerator2.default)(function* (element, options) {
    var _options$contentSize$, _options$contentSize, _options$contentSize$2, _options$contentSize2, _nativeState$nativeSt, _dragSteps$at, _ref, _momentumSteps$at;
    if (!(0, _hostComponentNames.isHostScrollView)(element)) {
      throw new _errors.ErrorWithStack(`scrollTo() works only with host "ScrollView" elements. Passed element has type "${element.type}".`, scrollTo);
    }
    ensureScrollViewDirection(element, options);
    (0, _utils.dispatchEvent)(element, 'contentSizeChange', (_options$contentSize$ = (_options$contentSize = options.contentSize) == null ? void 0 : _options$contentSize.width) != null ? _options$contentSize$ : 0, (_options$contentSize$2 = (_options$contentSize2 = options.contentSize) == null ? void 0 : _options$contentSize2.height) != null ? _options$contentSize$2 : 0);
    var initialOffset = (_nativeState$nativeSt = _nativeState.nativeState.contentOffsetForElement.get(element)) != null ? _nativeState$nativeSt : {
      x: 0,
      y: 0
    };
    var dragSteps = (0, _utils2.createScrollSteps)({
      y: options.y,
      x: options.x
    }, initialOffset, _utils2.linearInterpolator);
    yield emitDragScrollEvents(this.config, element, dragSteps, options);
    var momentumStart = (_dragSteps$at = dragSteps.at(-1)) != null ? _dragSteps$at : initialOffset;
    var momentumSteps = (0, _utils2.createScrollSteps)({
      y: options.momentumY,
      x: options.momentumX
    }, momentumStart, _utils2.inertialInterpolator);
    yield emitMomentumScrollEvents(this.config, element, momentumSteps, options);
    var finalOffset = (_ref = (_momentumSteps$at = momentumSteps.at(-1)) != null ? _momentumSteps$at : dragSteps.at(-1)) != null ? _ref : initialOffset;
    _nativeState.nativeState.contentOffsetForElement.set(element, finalOffset);
  });
  return _scrollTo.apply(this, arguments);
}
function emitDragScrollEvents(_x3, _x4, _x5, _x6) {
  return _emitDragScrollEvents.apply(this, arguments);
}
function _emitDragScrollEvents() {
  _emitDragScrollEvents = (0, _asyncToGenerator2.default)(function* (config, element, scrollSteps, scrollOptions) {
    if (scrollSteps.length === 0) {
      return;
    }
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'scrollBeginDrag', _eventBuilder.EventBuilder.ScrollView.scroll(scrollSteps[0], scrollOptions));
    for (var i = 1; i < scrollSteps.length - 1; i += 1) {
      yield (0, _utils.wait)(config);
      (0, _utils.dispatchEvent)(element, 'scroll', _eventBuilder.EventBuilder.ScrollView.scroll(scrollSteps[i], scrollOptions));
    }
    yield (0, _utils.wait)(config);
    var lastStep = scrollSteps.at(-1);
    (0, _utils.dispatchEvent)(element, 'scrollEndDrag', _eventBuilder.EventBuilder.ScrollView.scroll(lastStep, scrollOptions));
  });
  return _emitDragScrollEvents.apply(this, arguments);
}
function emitMomentumScrollEvents(_x7, _x8, _x9, _x10) {
  return _emitMomentumScrollEvents.apply(this, arguments);
}
function _emitMomentumScrollEvents() {
  _emitMomentumScrollEvents = (0, _asyncToGenerator2.default)(function* (config, element, scrollSteps, scrollOptions) {
    if (scrollSteps.length === 0) {
      return;
    }
    yield (0, _utils.wait)(config);
    (0, _utils.dispatchEvent)(element, 'momentumScrollBegin', _eventBuilder.EventBuilder.ScrollView.scroll(scrollSteps[0], scrollOptions));
    for (var i = 1; i < scrollSteps.length; i += 1) {
      yield (0, _utils.wait)(config);
      (0, _utils.dispatchEvent)(element, 'scroll', _eventBuilder.EventBuilder.ScrollView.scroll(scrollSteps[i], scrollOptions));
    }
    yield (0, _utils.wait)(config);
    var lastStep = scrollSteps.at(-1);
    (0, _utils.dispatchEvent)(element, 'momentumScrollEnd', _eventBuilder.EventBuilder.ScrollView.scroll(lastStep, scrollOptions));
  });
  return _emitMomentumScrollEvents.apply(this, arguments);
}
function ensureScrollViewDirection(element, options) {
  var isVerticalScrollView = element.props.horizontal !== true;
  var hasHorizontalScrollOptions = options.x !== undefined || options.momentumX !== undefined;
  if (isVerticalScrollView && hasHorizontalScrollOptions) {
    throw new _errors.ErrorWithStack(`scrollTo() expected only vertical scroll options: "y" and "momentumY" for vertical "ScrollView" element but received ${(0, _jestMatcherUtils.stringify)((0, _object.pick)(options, ['x', 'momentumX']))}`, scrollTo);
  }
  var hasVerticalScrollOptions = options.y !== undefined || options.momentumY !== undefined;
  if (!isVerticalScrollView && hasVerticalScrollOptions) {
    throw new _errors.ErrorWithStack(`scrollTo() expected only horizontal scroll options: "x" and "momentumX" for horizontal "ScrollView" element but received ${(0, _jestMatcherUtils.stringify)((0, _object.pick)(options, ['y', 'momentumY']))}`, scrollTo);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,