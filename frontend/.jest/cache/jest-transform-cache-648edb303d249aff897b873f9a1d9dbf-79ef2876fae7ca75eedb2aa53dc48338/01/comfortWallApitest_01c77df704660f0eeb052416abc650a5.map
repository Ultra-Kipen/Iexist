{"version":3,"names":["_getJestObj","mock","get","jest","fn","post","put","delete","_interopRequireDefault","require","_asyncToGenerator2","_comfortWallService","_postService","_client","_require","describe","beforeEach","clearAllMocks","test","default","apiClient","mockResolvedValueOnce","data","comfortWallService","getPosts","expect","toHaveBeenCalledWith","params","undefined","getBestPosts","message","postData","title","content","is_anonymous","createPost","messageData","sendMessage","postService","likePost"],"sources":["comfortWallApi.test.ts"],"sourcesContent":["// __tests__/integration/comfortWallApi.test.ts\r\n\r\nimport comfortWallService from '../../src/services/api/comfortWallService';\r\nimport postService from '../../src/services/api/postService';\r\nimport apiClient from '../../src/services/api/client';\r\n\r\n// API client 모킹\r\njest.mock('../../src/services/api/client', () => ({\r\n  get: jest.fn(),\r\n  post: jest.fn(),\r\n  put: jest.fn(),\r\n  delete: jest.fn(),\r\n}));\r\n\r\ndescribe('ComfortWall API Integration Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('getPosts should call correct API endpoint', async () => {\r\n    (apiClient.get as jest.Mock).mockResolvedValueOnce({\r\n      data: { data: [] }\r\n    });\r\n    \r\n    await comfortWallService.getPosts();\r\n    \r\n    expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall', { params: undefined });\r\n  });\r\n\r\n  test('getBestPosts should call correct API endpoint', async () => {\r\n    (apiClient.get as jest.Mock).mockResolvedValueOnce({\r\n      data: { data: [] }\r\n    });\r\n    \r\n    await comfortWallService.getBestPosts();\r\n    \r\n    expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall/best', { params: undefined });\r\n  });\r\n\r\n  test('createPost should call correct API endpoint with data', async () => {\r\n    (apiClient.post as jest.Mock).mockResolvedValueOnce({\r\n      data: { message: '게시물이 성공적으로 등록되었습니다.' }\r\n    });\r\n    \r\n    const postData = {\r\n      title: '테스트 게시물',\r\n      content: '테스트 내용',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.createPost(postData);\r\n    \r\n    expect(apiClient.post).toHaveBeenCalledWith('/comfort-wall', postData);\r\n  });\r\n\r\n  test('sendMessage should call correct API endpoint with data', async () => {\r\n    (apiClient.post as jest.Mock).mockResolvedValueOnce({\r\n      data: { message: '메시지가 성공적으로 전송되었습니다.' }\r\n    });\r\n    \r\n    const messageData = {\r\n      message: '응원 메시지',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.sendMessage(1, messageData);\r\n    \r\n    expect(apiClient.post).toHaveBeenCalledWith('/comfort-wall/1/message', messageData);\r\n  });\r\n\r\n  test('likePost should call correct API endpoint', async () => {\r\n    (apiClient.post as jest.Mock).mockResolvedValueOnce({\r\n      data: { message: 'success' }\r\n    });\r\n    \r\n    await postService.likePost(1);\r\n    \r\n    expect(apiClient.post).toHaveBeenCalledWith('/posts/1/like');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}