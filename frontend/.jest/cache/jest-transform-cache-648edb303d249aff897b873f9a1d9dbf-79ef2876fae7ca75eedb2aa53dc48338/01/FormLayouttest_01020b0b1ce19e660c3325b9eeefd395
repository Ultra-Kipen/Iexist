c70ff97e7fc8257938d9c37c57f44456
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    Text: 'Text',
    StyleSheet: {
      create: function create(styles) {
        return styles;
      }
    },
    ScrollView: 'ScrollView',
    KeyboardAvoidingView: 'KeyboardAvoidingView',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    Keyboard: {
      dismiss: jest.fn()
    },
    Platform: {
      OS: 'ios',
      select: jest.fn(function (obj) {
        return obj.ios;
      })
    }
  };
});
_getJestObj().mock("../../src/hooks/useTheme", function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#ffffff'
          },
          dark: false
        }
      };
    }
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _FormLayout = _interopRequireDefault(require("../../src/layouts/FormLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('FormLayout', function () {
  it('renders without crashing', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      toJSON = _render.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  it('shows loading indicator when loading is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      toJSON = _render2.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  it('renders with header and footer', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        header: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uD5E4\uB354"
        }),
        footer: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uD478\uD130"
        }),
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      toJSON = _render3.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  it('renders with avoidKeyboard=false', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        avoidKeyboard: false,
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      toJSON = _render4.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  it('applies custom styles', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        style: {
          backgroundColor: 'red'
        },
        contentContainerStyle: {
          padding: 20
        },
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      toJSON = _render5.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  it('renders with correct structure', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      loadingJSON = _render6.toJSON;
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        loading: false,
        children: (0, _jsxRuntime.jsx)("text", {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      contentJSON = _render7.toJSON;
    expect(JSON.stringify(loadingJSON())).not.toEqual(JSON.stringify(contentJSON()));
    expect(loadingJSON()).not.toBeNull();
    expect(contentJSON()).not.toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,