3734dfbee9b071d5bdf9758c0ccae361
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseNavigationContainer = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _routers = require("@react-navigation/routers");
var React = _interopRequireWildcard(require("react"));
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _checkDuplicateRouteNames = require("./checkDuplicateRouteNames.js");
var _checkSerializable = require("./checkSerializable.js");
var _createNavigationContainerRef = require("./createNavigationContainerRef.js");
var _DeprecatedNavigationInChildContext = require("./DeprecatedNavigationInChildContext.js");
var _EnsureSingleNavigator = require("./EnsureSingleNavigator.js");
var _findFocusedRoute = require("./findFocusedRoute.js");
var _NavigationBuilderContext = require("./NavigationBuilderContext.js");
var _NavigationContainerRefContext = require("./NavigationContainerRefContext.js");
var _NavigationIndependentTreeContext = require("./NavigationIndependentTreeContext.js");
var _NavigationStateContext = require("./NavigationStateContext.js");
var _ThemeProvider = require("./theming/ThemeProvider.js");
var _UnhandledActionContext = require("./UnhandledActionContext.js");
var _useChildListeners2 = require("./useChildListeners.js");
var _useEventEmitter = require("./useEventEmitter.js");
var _useKeyedChildListeners = require("./useKeyedChildListeners.js");
var _useNavigationIndependentTree = require("./useNavigationIndependentTree.js");
var _useOptionsGetters2 = require("./useOptionsGetters.js");
var _useSyncState2 = require("./useSyncState.js");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["key", "routeNames"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var serializableWarnings = [];
var duplicateNameWarnings = [];
var _getPartialState = function getPartialState(state) {
  if (state === undefined) {
    return;
  }
  var key = state.key,
    routeNames = state.routeNames,
    partialState = (0, _objectWithoutProperties2.default)(state, _excluded);
  return Object.assign({}, partialState, {
    stale: true,
    routes: state.routes.map(function (route) {
      if (route.state === undefined) {
        return route;
      }
      return Object.assign({}, route, {
        state: _getPartialState(route.state)
      });
    })
  });
};
var BaseNavigationContainer = exports.BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {
  var initialState = _ref.initialState,
    onStateChange = _ref.onStateChange,
    onReady = _ref.onReady,
    onUnhandledAction = _ref.onUnhandledAction,
    _ref$navigationInChil = _ref.navigationInChildEnabled,
    navigationInChildEnabled = _ref$navigationInChil === void 0 ? false : _ref$navigationInChil,
    theme = _ref.theme,
    children = _ref.children;
  var parent = React.useContext(_NavigationStateContext.NavigationStateContext);
  var independent = (0, _useNavigationIndependentTree.useNavigationIndependentTree)();
  if (!parent.isDefault && !independent) {
    throw new Error("Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, wrap the container in 'NavigationIndependentTree' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.");
  }
  var _useSyncState = (0, _useSyncState2.useSyncState)(function () {
      return _getPartialState(initialState == null ? undefined : initialState);
    }),
    state = _useSyncState.state,
    getState = _useSyncState.getState,
    setState = _useSyncState.setState,
    scheduleUpdate = _useSyncState.scheduleUpdate,
    flushUpdates = _useSyncState.flushUpdates;
  var isFirstMountRef = React.useRef(true);
  var navigatorKeyRef = React.useRef();
  var getKey = React.useCallback(function () {
    return navigatorKeyRef.current;
  }, []);
  var setKey = React.useCallback(function (key) {
    navigatorKeyRef.current = key;
  }, []);
  var _useChildListeners = (0, _useChildListeners2.useChildListeners)(),
    listeners = _useChildListeners.listeners,
    addListener = _useChildListeners.addListener;
  var _useKeyedChildListene = (0, _useKeyedChildListeners.useKeyedChildListeners)(),
    keyedListeners = _useKeyedChildListene.keyedListeners,
    addKeyedListener = _useKeyedChildListene.addKeyedListener;
  var dispatch = (0, _useLatestCallback.default)(function (action) {
    if (listeners.focus[0] == null) {
      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);
    } else {
      listeners.focus[0](function (navigation) {
        return navigation.dispatch(action);
      });
    }
  });
  var canGoBack = (0, _useLatestCallback.default)(function () {
    if (listeners.focus[0] == null) {
      return false;
    }
    var _listeners$focus$ = listeners.focus[0](function (navigation) {
        return navigation.canGoBack();
      }),
      result = _listeners$focus$.result,
      handled = _listeners$focus$.handled;
    if (handled) {
      return result;
    } else {
      return false;
    }
  });
  var resetRoot = (0, _useLatestCallback.default)(function (state) {
    var _state$key;
    var target = (_state$key = state == null ? void 0 : state.key) != null ? _state$key : keyedListeners.getState.root == null ? void 0 : keyedListeners.getState.root().key;
    if (target == null) {
      console.error(_createNavigationContainerRef.NOT_INITIALIZED_ERROR);
    } else {
      listeners.focus[0](function (navigation) {
        return navigation.dispatch(Object.assign({}, _routers.CommonActions.reset(state), {
          target: target
        }));
      });
    }
  });
  var getRootState = (0, _useLatestCallback.default)(function () {
    return keyedListeners.getState.root == null ? void 0 : keyedListeners.getState.root();
  });
  var getCurrentRoute = (0, _useLatestCallback.default)(function () {
    var state = getRootState();
    if (state == null) {
      return undefined;
    }
    var route = (0, _findFocusedRoute.findFocusedRoute)(state);
    return route;
  });
  var isReady = (0, _useLatestCallback.default)(function () {
    return listeners.focus[0] != null;
  });
  var emitter = (0, _useEventEmitter.useEventEmitter)();
  var _useOptionsGetters = (0, _useOptionsGetters2.useOptionsGetters)({}),
    addOptionsGetter = _useOptionsGetters.addOptionsGetter,
    getCurrentOptions = _useOptionsGetters.getCurrentOptions;
  var navigation = React.useMemo(function () {
    return Object.assign({}, Object.keys(_routers.CommonActions).reduce(function (acc, name) {
      acc[name] = function () {
        return (dispatch(_routers.CommonActions[name].apply(_routers.CommonActions, arguments))
        );
      };
      return acc;
    }, {}), emitter.create('root'), {
      dispatch: dispatch,
      resetRoot: resetRoot,
      isFocused: function isFocused() {
        return true;
      },
      canGoBack: canGoBack,
      getParent: function getParent() {
        return undefined;
      },
      getState: getState,
      getRootState: getRootState,
      getCurrentRoute: getCurrentRoute,
      getCurrentOptions: getCurrentOptions,
      isReady: isReady,
      setOptions: function setOptions() {
        throw new Error('Cannot call setOptions outside a screen');
      }
    });
  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, getState, isReady, resetRoot]);
  React.useImperativeHandle(ref, function () {
    return navigation;
  }, [navigation]);
  var onDispatchAction = (0, _useLatestCallback.default)(function (action, noop) {
    emitter.emit({
      type: '__unsafe_action__',
      data: {
        action: action,
        noop: noop,
        stack: stackRef.current
      }
    });
  });
  var lastEmittedOptionsRef = React.useRef();
  var onOptionsChange = (0, _useLatestCallback.default)(function (options) {
    if (lastEmittedOptionsRef.current === options) {
      return;
    }
    lastEmittedOptionsRef.current = options;
    emitter.emit({
      type: 'options',
      data: {
        options: options
      }
    });
  });
  var stackRef = React.useRef();
  var builderContext = React.useMemo(function () {
    return {
      addListener: addListener,
      addKeyedListener: addKeyedListener,
      onDispatchAction: onDispatchAction,
      onOptionsChange: onOptionsChange,
      scheduleUpdate: scheduleUpdate,
      flushUpdates: flushUpdates,
      stackRef: stackRef
    };
  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange, scheduleUpdate, flushUpdates]);
  var isInitialRef = React.useRef(true);
  var getIsInitial = React.useCallback(function () {
    return isInitialRef.current;
  }, []);
  var context = React.useMemo(function () {
    return {
      state: state,
      getState: getState,
      setState: setState,
      getKey: getKey,
      setKey: setKey,
      getIsInitial: getIsInitial,
      addOptionsGetter: addOptionsGetter
    };
  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);
  var onReadyRef = React.useRef(onReady);
  var onStateChangeRef = React.useRef(onStateChange);
  React.useEffect(function () {
    isInitialRef.current = false;
    onStateChangeRef.current = onStateChange;
    onReadyRef.current = onReady;
  });
  var onReadyCalledRef = React.useRef(false);
  React.useEffect(function () {
    if (!onReadyCalledRef.current && isReady()) {
      onReadyCalledRef.current = true;
      onReadyRef.current == null || onReadyRef.current();
      emitter.emit({
        type: 'ready'
      });
    }
  }, [state, isReady, emitter]);
  React.useEffect(function () {
    var hydratedState = getRootState();
    if (process.env.NODE_ENV !== 'production') {
      if (hydratedState !== undefined) {
        var serializableResult = (0, _checkSerializable.checkSerializable)(hydratedState);
        if (!serializableResult.serializable) {
          var location = serializableResult.location,
            reason = serializableResult.reason;
          var path = '';
          var pointer = hydratedState;
          var params = false;
          for (var i = 0; i < location.length; i++) {
            var curr = location[i];
            var prev = location[i - 1];
            pointer = pointer[curr];
            if (!params && curr === 'state') {
              continue;
            } else if (!params && curr === 'routes') {
              if (path) {
                path += ' > ';
              }
            } else if (!params && typeof curr === 'number' && prev === 'routes') {
              var _pointer;
              path += (_pointer = pointer) == null ? void 0 : _pointer.name;
            } else if (!params) {
              path += ` > ${curr}`;
              params = true;
            } else {
              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {
                path += `[${curr}]`;
              } else if (/^[a-z$_]+$/i.test(curr)) {
                path += `.${curr}`;
              } else {
                path += `[${JSON.stringify(curr)}]`;
              }
            }
          }
          var message = `Non-serializable values were found in the navigation state. Check:\n\n${path} (${reason})\n\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;
          if (!serializableWarnings.includes(message)) {
            serializableWarnings.push(message);
            console.warn(message);
          }
        }
        var duplicateRouteNamesResult = (0, _checkDuplicateRouteNames.checkDuplicateRouteNames)(hydratedState);
        if (duplicateRouteNamesResult.length) {
          var _message = `Found screens with the same name nested inside one another. Check:\n${duplicateRouteNamesResult.map(function (locations) {
            return `\n${locations.join(', ')}`;
          })}\n\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;
          if (!duplicateNameWarnings.includes(_message)) {
            duplicateNameWarnings.push(_message);
            console.warn(_message);
          }
        }
      }
    }
    emitter.emit({
      type: 'state',
      data: {
        state: state
      }
    });
    if (!isFirstMountRef.current && onStateChangeRef.current) {
      onStateChangeRef.current(hydratedState);
    }
    isFirstMountRef.current = false;
  }, [getRootState, emitter, state]);
  var defaultOnUnhandledAction = (0, _useLatestCallback.default)(function (action) {
    if (process.env.NODE_ENV === 'production') {
      return;
    }
    var payload = action.payload;
    var message = `The action '${action.type}'${payload ? ` with payload ${JSON.stringify(action.payload)}` : ''} was not handled by any navigator.`;
    switch (action.type) {
      case 'NAVIGATE':
      case 'PUSH':
      case 'REPLACE':
      case 'POP_TO':
      case 'JUMP_TO':
        if (payload != null && payload.name) {
          message += `\n\nDo you have a screen named '${payload.name}'?\n\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\n\nIf you're using conditional rendering, navigation will happen automatically and you shouldn't navigate manually, see.`;
        } else {
          message += `\n\nYou need to pass the name of the screen to navigate to.\n\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;
        }
        break;
      case 'GO_BACK':
      case 'POP':
      case 'POP_TO_TOP':
        message += `\n\nIs there any screen to go back to?`;
        break;
      case 'OPEN_DRAWER':
      case 'CLOSE_DRAWER':
      case 'TOGGLE_DRAWER':
        message += `\n\nIs your screen inside a Drawer navigator?`;
        break;
    }
    message += `\n\nThis is a development-only warning and won't be shown in production.`;
    console.error(message);
  });
  return (0, _jsxRuntime.jsx)(_NavigationIndependentTreeContext.NavigationIndependentTreeContext.Provider, {
    value: false,
    children: (0, _jsxRuntime.jsx)(_NavigationContainerRefContext.NavigationContainerRefContext.Provider, {
      value: navigation,
      children: (0, _jsxRuntime.jsx)(_NavigationBuilderContext.NavigationBuilderContext.Provider, {
        value: builderContext,
        children: (0, _jsxRuntime.jsx)(_NavigationStateContext.NavigationStateContext.Provider, {
          value: context,
          children: (0, _jsxRuntime.jsx)(_UnhandledActionContext.UnhandledActionContext.Provider, {
            value: onUnhandledAction != null ? onUnhandledAction : defaultOnUnhandledAction,
            children: (0, _jsxRuntime.jsx)(_DeprecatedNavigationInChildContext.DeprecatedNavigationInChildContext.Provider, {
              value: navigationInChildEnabled,
              children: (0, _jsxRuntime.jsx)(_EnsureSingleNavigator.EnsureSingleNavigator, {
                children: (0, _jsxRuntime.jsx)(_ThemeProvider.ThemeProvider, {
                  value: theme,
                  children: children
                })
              })
            })
          })
        })
      })
    })
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,