da6baf58309c96e1fb4e1bb73f3e9078
var _validation = require("../../../src/utils/validation");
describe('Validation utils', function () {
  describe('isValidEmail', function () {
    it('should validate correct email addresses', function () {
      expect((0, _validation.isValidEmail)('test@example.com')).toBe(true);
      expect((0, _validation.isValidEmail)('user.name@domain.co.kr')).toBe(true);
      expect((0, _validation.isValidEmail)('user+tag@example.org')).toBe(true);
    });
    it('should reject invalid email addresses', function () {
      expect((0, _validation.isValidEmail)('invalid')).toBe(false);
      expect((0, _validation.isValidEmail)('invalid@')).toBe(false);
      expect((0, _validation.isValidEmail)('@domain.com')).toBe(false);
      expect((0, _validation.isValidEmail)('user@domain')).toBe(false);
      expect((0, _validation.isValidEmail)('')).toBe(false);
    });
  });
  describe('isValidPassword', function () {
    it('should validate strong passwords', function () {
      expect((0, _validation.isValidPassword)('Password123!')).toBe(true);
      expect((0, _validation.isValidPassword)('Abcde12345@')).toBe(true);
    });
    it('should reject weak passwords', function () {
      expect((0, _validation.isValidPassword)('password')).toBe(false);
      expect((0, _validation.isValidPassword)('Password')).toBe(false);
      expect((0, _validation.isValidPassword)('password123')).toBe(false);
      expect((0, _validation.isValidPassword)('Pass1!')).toBe(false);
      expect((0, _validation.isValidPassword)('')).toBe(false);
    });
  });
  describe('isValidUsername', function () {
    it('should validate correct usernames', function () {
      expect((0, _validation.isValidUsername)('user123')).toBe(true);
      expect((0, _validation.isValidUsername)('user_name')).toBe(true);
      expect((0, _validation.isValidUsername)('User-Name')).toBe(true);
    });
    it('should reject invalid usernames', function () {
      expect((0, _validation.isValidUsername)('us')).toBe(false);
      expect((0, _validation.isValidUsername)('user name')).toBe(false);
      expect((0, _validation.isValidUsername)('user@name')).toBe(false);
      expect((0, _validation.isValidUsername)('verylongusernamethatisover30characters')).toBe(false);
      expect((0, _validation.isValidUsername)('')).toBe(false);
    });
  });
  describe('isValidPhoneNumber', function () {
    it('should validate correct Korean phone numbers', function () {
      expect((0, _validation.isValidPhoneNumber)('01012345678')).toBe(true);
      expect((0, _validation.isValidPhoneNumber)('010-1234-5678')).toBe(true);
      expect((0, _validation.isValidPhoneNumber)('02-123-4567')).toBe(true);
    });
    it('should reject invalid phone numbers', function () {
      expect((0, _validation.isValidPhoneNumber)('0101234')).toBe(false);
      expect((0, _validation.isValidPhoneNumber)('010-1234-567')).toBe(false);
      expect((0, _validation.isValidPhoneNumber)('abc1234567')).toBe(false);
      expect((0, _validation.isValidPhoneNumber)('')).toBe(false);
    });
  });
  describe('isRequired', function () {
    it('should validate non-empty values', function () {
      expect((0, _validation.isRequired)('text')).toBe(true);
      expect((0, _validation.isRequired)(0)).toBe(true);
      expect((0, _validation.isRequired)(false)).toBe(true);
    });
    it('should reject empty values', function () {
      expect((0, _validation.isRequired)('')).toBe(false);
      expect((0, _validation.isRequired)(null)).toBe(false);
      expect((0, _validation.isRequired)(undefined)).toBe(false);
    });
  });
  describe('minLength', function () {
    it('should validate strings of sufficient length', function () {
      var validator = (0, _validation.minLength)(5);
      expect(validator('12345')).toBe(true);
      expect(validator('123456')).toBe(true);
    });
    it('should reject strings that are too short', function () {
      var validator = (0, _validation.minLength)(5);
      expect(validator('1234')).toBe(false);
      expect(validator('')).toBe(false);
    });
  });
  describe('maxLength', function () {
    it('should validate strings that are not too long', function () {
      var validator = (0, _validation.maxLength)(5);
      expect(validator('12345')).toBe(true);
      expect(validator('1234')).toBe(true);
      expect(validator('')).toBe(true);
    });
    it('should reject strings that are too long', function () {
      var validator = (0, _validation.maxLength)(5);
      expect(validator('123456')).toBe(false);
    });
  });
  describe('hasUpperCase', function () {
    it('should validate strings with uppercase letters', function () {
      expect((0, _validation.hasUpperCase)('Password')).toBe(true);
      expect((0, _validation.hasUpperCase)('pAssword')).toBe(true);
    });
    it('should reject strings without uppercase letters', function () {
      expect((0, _validation.hasUpperCase)('password')).toBe(false);
      expect((0, _validation.hasUpperCase)('123456')).toBe(false);
      expect((0, _validation.hasUpperCase)('')).toBe(false);
    });
  });
  describe('hasLowerCase', function () {
    it('should validate strings with lowercase letters', function () {
      expect((0, _validation.hasLowerCase)('Password')).toBe(true);
      expect((0, _validation.hasLowerCase)('PASSWORd')).toBe(true);
    });
    it('should reject strings without lowercase letters', function () {
      expect((0, _validation.hasLowerCase)('PASSWORD')).toBe(false);
      expect((0, _validation.hasLowerCase)('123456')).toBe(false);
      expect((0, _validation.hasLowerCase)('')).toBe(false);
    });
  });
  describe('hasNumber', function () {
    it('should validate strings with numbers', function () {
      expect((0, _validation.hasNumber)('Password1')).toBe(true);
      expect((0, _validation.hasNumber)('1Password')).toBe(true);
    });
    it('should reject strings without numbers', function () {
      expect((0, _validation.hasNumber)('Password')).toBe(false);
      expect((0, _validation.hasNumber)('')).toBe(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,