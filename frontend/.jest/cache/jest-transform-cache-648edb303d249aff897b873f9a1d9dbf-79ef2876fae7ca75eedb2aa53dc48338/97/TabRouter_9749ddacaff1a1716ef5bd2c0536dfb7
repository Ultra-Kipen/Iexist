806f2fbaa8f9fb078d4864c89c0de3d1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabActions = void 0;
exports.TabRouter = TabRouter;
var _nonSecure = require("nanoid/non-secure");
var _BaseRouter = require("./BaseRouter.js");
var TYPE_ROUTE = 'route';
var TabActions = exports.TabActions = {
  jumpTo: function jumpTo(name, params) {
    return {
      type: 'JUMP_TO',
      payload: {
        name: name,
        params: params
      }
    };
  }
};
var getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {
  var history = [{
    type: TYPE_ROUTE,
    key: routes[index].key
  }];
  var initialRouteIndex;
  switch (backBehavior) {
    case 'order':
      for (var i = index; i > 0; i--) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[i - 1].key
        });
      }
      break;
    case 'firstRoute':
      if (index !== 0) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[0].key
        });
      }
      break;
    case 'initialRoute':
      initialRouteIndex = routes.findIndex(function (route) {
        return route.name === initialRouteName;
      });
      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;
      if (index !== initialRouteIndex) {
        history.unshift({
          type: TYPE_ROUTE,
          key: routes[initialRouteIndex].key
        });
      }
      break;
    case 'history':
      break;
  }
  return history;
};
var changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {
  var history;
  if (backBehavior === 'history') {
    var currentKey = state.routes[index].key;
    history = state.history.filter(function (it) {
      return it.type === 'route' ? it.key !== currentKey : false;
    }).concat({
      type: TYPE_ROUTE,
      key: currentKey
    });
  } else {
    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);
  }
  return Object.assign({}, state, {
    index: index,
    history: history
  });
};
function TabRouter(_ref) {
  var initialRouteName = _ref.initialRouteName,
    _ref$backBehavior = _ref.backBehavior,
    backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;
  var router = Object.assign({}, _BaseRouter.BaseRouter, {
    type: 'tab',
    getInitialState: function getInitialState(_ref2) {
      var routeNames = _ref2.routeNames,
        routeParamList = _ref2.routeParamList;
      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;
      var routes = routeNames.map(function (name) {
        return {
          name: name,
          key: `${name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[name]
        };
      });
      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      return {
        stale: false,
        type: 'tab',
        key: `tab-${(0, _nonSecure.nanoid)()}`,
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes,
        preloadedRouteKeys: []
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref3) {
      var _state$routes, _state$index, _state$history$filter, _state$history, _state$preloadedRoute, _state$preloadedRoute2;
      var routeNames = _ref3.routeNames,
        routeParamList = _ref3.routeParamList;
      var state = partialState;
      if (state.stale === false) {
        return state;
      }
      var routes = routeNames.map(function (name) {
        var route = state.routes.find(function (r) {
          return r.name === name;
        });
        return Object.assign({}, route, {
          name: name,
          key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined
        });
      });
      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state == null ? void 0 : state.index) != null ? _state$index : 0]) == null ? void 0 : _state$routes.name), 0), routes.length - 1);
      var routeKeys = routes.map(function (route) {
        return route.key;
      });
      var history = (_state$history$filter = (_state$history = state.history) == null ? void 0 : _state$history.filter(function (it) {
        return routeKeys.includes(it.key);
      })) != null ? _state$history$filter : [];
      return changeIndex({
        stale: false,
        type: 'tab',
        key: `tab-${(0, _nonSecure.nanoid)()}`,
        index: index,
        routeNames: routeNames,
        history: history,
        routes: routes,
        preloadedRouteKeys: (_state$preloadedRoute = (_state$preloadedRoute2 = state.preloadedRouteKeys) == null ? void 0 : _state$preloadedRoute2.filter(function (key) {
          return routeKeys.includes(key);
        })) != null ? _state$preloadedRoute : []
      }, index, backBehavior, initialRouteName);
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {
      var routeNames = _ref4.routeNames,
        routeParamList = _ref4.routeParamList,
        routeKeyChanges = _ref4.routeKeyChanges;
      var routes = routeNames.map(function (name) {
        return state.routes.find(function (r) {
          return r.name === name && !routeKeyChanges.includes(r.name);
        }) || {
          name: name,
          key: `${name}-${(0, _nonSecure.nanoid)()}`,
          params: routeParamList[name]
        };
      });
      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));
      var history = state.history.filter(function (it) {
        return it.type !== 'route' || routes.find(function (r) {
          return r.key === it.key;
        });
      });
      if (!history.length) {
        history = getRouteHistory(routes, index, backBehavior, initialRouteName);
      }
      return Object.assign({}, state, {
        history: history,
        routeNames: routeNames,
        routes: routes,
        index: index
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });
      if (index === -1 || index === state.index) {
        return state;
      }
      return changeIndex(state, index, backBehavior, initialRouteName);
    },
    getStateForAction: function getStateForAction(state, action, _ref5) {
      var routeParamList = _ref5.routeParamList,
        routeGetIdList = _ref5.routeGetIdList;
      switch (action.type) {
        case 'JUMP_TO':
        case 'NAVIGATE':
        case 'NAVIGATE_DEPRECATED':
          {
            var index = state.routes.findIndex(function (route) {
              return route.name === action.payload.name;
            });
            if (index === -1) {
              return null;
            }
            var updatedState = changeIndex(Object.assign({}, state, {
              routes: state.routes.map(function (route) {
                if (route.name !== action.payload.name) {
                  return route;
                }
                var getId = routeGetIdList[route.name];
                var currentId = getId == null ? void 0 : getId({
                  params: route.params
                });
                var nextId = getId == null ? void 0 : getId({
                  params: action.payload.params
                });
                var key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;
                var params;
                if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {
                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;
                } else {
                  params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;
                }
                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;
                return params !== route.params || path !== route.path ? Object.assign({}, route, {
                  key: key,
                  path: path,
                  params: params
                }) : route;
              })
            }), index, backBehavior, initialRouteName);
            return Object.assign({}, updatedState, {
              preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(function (key) {
                return key !== state.routes[updatedState.index].key;
              })
            });
          }
        case 'GO_BACK':
          {
            var _state$history2;
            if (state.history.length === 1) {
              return null;
            }
            var previousKey = (_state$history2 = state.history[state.history.length - 2]) == null ? void 0 : _state$history2.key;
            var _index = state.routes.findIndex(function (route) {
              return route.key === previousKey;
            });
            if (_index === -1) {
              return null;
            }
            return Object.assign({}, state, {
              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {
                return key !== state.routes[_index].key;
              }),
              history: state.history.slice(0, -1),
              index: _index
            });
          }
        case 'PRELOAD':
          {
            var routeIndex = state.routes.findIndex(function (route) {
              return route.name === action.payload.name;
            });
            if (routeIndex === -1) {
              return null;
            }
            var route = state.routes[routeIndex];
            var getId = routeGetIdList[route.name];
            var currentId = getId == null ? void 0 : getId({
              params: route.params
            });
            var nextId = getId == null ? void 0 : getId({
              params: action.payload.params
            });
            var key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;
            var params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : undefined;
            var newRoute = params !== route.params ? Object.assign({}, route, {
              key: key,
              params: params
            }) : route;
            return Object.assign({}, state, {
              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {
                return key !== route.key;
              }).concat(newRoute.key),
              routes: state.routes.map(function (route, index) {
                return index === routeIndex ? newRoute : route;
              }),
              history: key === route.key ? state.history : state.history.filter(function (record) {
                return record.key !== route.key;
              })
            });
          }
        default:
          return _BaseRouter.BaseRouter.getStateForAction(state, action);
      }
    },
    actionCreators: TabActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9uU2VjdXJlIiwicmVxdWlyZSIsIl9CYXNlUm91dGVyIiwiVFlQRV9ST1VURSIsIlRhYkFjdGlvbnMiLCJleHBvcnRzIiwianVtcFRvIiwibmFtZSIsInBhcmFtcyIsInR5cGUiLCJwYXlsb2FkIiwiZ2V0Um91dGVIaXN0b3J5Iiwicm91dGVzIiwiaW5kZXgiLCJiYWNrQmVoYXZpb3IiLCJpbml0aWFsUm91dGVOYW1lIiwiaGlzdG9yeSIsImtleSIsImluaXRpYWxSb3V0ZUluZGV4IiwiaSIsInVuc2hpZnQiLCJmaW5kSW5kZXgiLCJyb3V0ZSIsImNoYW5nZUluZGV4Iiwic3RhdGUiLCJjdXJyZW50S2V5IiwiZmlsdGVyIiwiaXQiLCJjb25jYXQiLCJPYmplY3QiLCJhc3NpZ24iLCJUYWJSb3V0ZXIiLCJfcmVmIiwiX3JlZiRiYWNrQmVoYXZpb3IiLCJyb3V0ZXIiLCJCYXNlUm91dGVyIiwiZ2V0SW5pdGlhbFN0YXRlIiwiX3JlZjIiLCJyb3V0ZU5hbWVzIiwicm91dGVQYXJhbUxpc3QiLCJ1bmRlZmluZWQiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJtYXAiLCJuYW5vaWQiLCJzdGFsZSIsInByZWxvYWRlZFJvdXRlS2V5cyIsImdldFJlaHlkcmF0ZWRTdGF0ZSIsInBhcnRpYWxTdGF0ZSIsIl9yZWYzIiwiX3N0YXRlJHJvdXRlcyIsIl9zdGF0ZSRpbmRleCIsIl9zdGF0ZSRoaXN0b3J5JGZpbHRlciIsIl9zdGF0ZSRoaXN0b3J5IiwiX3N0YXRlJHByZWxvYWRlZFJvdXRlIiwiX3N0YXRlJHByZWxvYWRlZFJvdXRlMiIsImZpbmQiLCJyIiwiTWF0aCIsIm1pbiIsIm1heCIsImxlbmd0aCIsInJvdXRlS2V5cyIsImdldFN0YXRlRm9yUm91dGVOYW1lc0NoYW5nZSIsIl9yZWY0Iiwicm91dGVLZXlDaGFuZ2VzIiwiZ2V0U3RhdGVGb3JSb3V0ZUZvY3VzIiwiZ2V0U3RhdGVGb3JBY3Rpb24iLCJhY3Rpb24iLCJfcmVmNSIsInJvdXRlR2V0SWRMaXN0IiwidXBkYXRlZFN0YXRlIiwiZ2V0SWQiLCJjdXJyZW50SWQiLCJuZXh0SWQiLCJtZXJnZSIsInBhdGgiLCJfc3RhdGUkaGlzdG9yeTIiLCJwcmV2aW91c0tleSIsInNsaWNlIiwicm91dGVJbmRleCIsIm5ld1JvdXRlIiwicmVjb3JkIiwiYWN0aW9uQ3JlYXRvcnMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvVGFiUm91dGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLFdBQUEsR0FBQUQsT0FBQTtBQStEQSxJQUFNRSxVQUFVLEdBQUcsT0FBZ0I7QUFFNUIsSUFBTUMsVUFBVSxHQUFBQyxPQUFBLENBQUFELFVBQUEsR0FBRztFQUN4QkUsTUFBTSxXQUFOQSxNQUFNQSxDQUFDQyxJQUFZLEVBQUVDLE1BQWUsRUFBaUI7SUFDbkQsT0FBTztNQUFFQyxJQUFJLEVBQUUsU0FBUztNQUFFQyxPQUFPLEVBQUU7UUFBRUgsSUFBSSxFQUFKQSxJQUFJO1FBQUVDLE1BQUEsRUFBQUE7TUFBTztJQUFFLENBQUM7RUFDdkQ7QUFDRixDQUFDO0FBRUQsSUFBTUcsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUNuQkMsTUFBdUIsRUFDdkJDLEtBQWEsRUFDYkMsWUFBMEIsRUFDMUJDLGdCQUFvQyxFQUNqQztFQUNILElBQU1DLE9BQU8sR0FBRyxDQUFDO0lBQUVQLElBQUksRUFBRU4sVUFBVTtJQUFFYyxHQUFHLEVBQUVMLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUNJO0VBQUksQ0FBQyxDQUFDO0VBQzlELElBQUlDLGlCQUFpQjtFQUVyQixRQUFRSixZQUFZO0lBQ2xCLEtBQUssT0FBTztNQUNWLEtBQUssSUFBSUssQ0FBQyxHQUFHTixLQUFLLEVBQUVNLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsRUFBRSxFQUFFO1FBQzlCSCxPQUFPLENBQUNJLE9BQU8sQ0FBQztVQUFFWCxJQUFJLEVBQUVOLFVBQVU7VUFBRWMsR0FBRyxFQUFFTCxNQUFNLENBQUNPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQ0Y7UUFBSSxDQUFDLENBQUM7TUFDL0Q7TUFDQTtJQUNGLEtBQUssWUFBWTtNQUNmLElBQUlKLEtBQUssS0FBSyxDQUFDLEVBQUU7UUFDZkcsT0FBTyxDQUFDSSxPQUFPLENBQUM7VUFDZFgsSUFBSSxFQUFFTixVQUFVO1VBQ2hCYyxHQUFHLEVBQUVMLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQ0s7UUFDakIsQ0FBQyxDQUFDO01BQ0o7TUFDQTtJQUNGLEtBQUssY0FBYztNQUNqQkMsaUJBQWlCLEdBQUdOLE1BQU0sQ0FBQ1MsU0FBUyxDQUNqQyxVQUFBQyxLQUFLO1FBQUEsT0FBS0EsS0FBSyxDQUFDZixJQUFJLEtBQUtRLGdCQUM1QjtNQUFBLEVBQUM7TUFDREcsaUJBQWlCLEdBQUdBLGlCQUFpQixLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBR0EsaUJBQWlCO01BRXBFLElBQUlMLEtBQUssS0FBS0ssaUJBQWlCLEVBQUU7UUFDL0JGLE9BQU8sQ0FBQ0ksT0FBTyxDQUFDO1VBQ2RYLElBQUksRUFBRU4sVUFBVTtVQUNoQmMsR0FBRyxFQUFFTCxNQUFNLENBQUNNLGlCQUFpQixDQUFDLENBQUNEO1FBQ2pDLENBQUMsQ0FBQztNQUNKO01BQ0E7SUFDRixLQUFLLFNBQVM7TUFFWjtFQUNKO0VBRUEsT0FBT0QsT0FBTztBQUNoQixDQUFDO0FBRUQsSUFBTU8sV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQ2ZDLEtBQXdDLEVBQ3hDWCxLQUFhLEVBQ2JDLFlBQTBCLEVBQzFCQyxnQkFBb0MsRUFDakM7RUFDSCxJQUFJQyxPQUFPO0VBRVgsSUFBSUYsWUFBWSxLQUFLLFNBQVMsRUFBRTtJQUM5QixJQUFNVyxVQUFVLEdBQUdELEtBQUssQ0FBQ1osTUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQ0ksR0FBRztJQUUxQ0QsT0FBTyxHQUFHUSxLQUFLLENBQUNSLE9BQU8sQ0FDcEJVLE1BQU0sQ0FBRSxVQUFBQyxFQUFFO01BQUEsT0FBTUEsRUFBRSxDQUFDbEIsSUFBSSxLQUFLLE9BQU8sR0FBR2tCLEVBQUUsQ0FBQ1YsR0FBRyxLQUFLUSxVQUFVLEdBQUcsS0FBTTtJQUFBLEVBQUMsQ0FDckVHLE1BQU0sQ0FBQztNQUFFbkIsSUFBSSxFQUFFTixVQUFVO01BQUVjLEdBQUcsRUFBRVE7SUFBVyxDQUFDLENBQUM7RUFDbEQsQ0FBQyxNQUFNO0lBQ0xULE9BQU8sR0FBR0wsZUFBZSxDQUN2QmEsS0FBSyxDQUFDWixNQUFNLEVBQ1pDLEtBQUssRUFDTEMsWUFBWSxFQUNaQyxnQkFDRixDQUFDO0VBQ0g7RUFFQSxPQUFBYyxNQUFBLENBQUFDLE1BQUEsS0FDS04sS0FBSztJQUNSWCxLQUFLLEVBQUxBLEtBQUs7SUFDTEcsT0FBQSxFQUFBQTtFQUFBO0FBRUosQ0FBQztBQUVNLFNBQVNlLFNBQVNBLENBQUFDLElBQUEsRUFHSjtFQUFBLElBRm5CakIsZ0JBQWdCLEdBQUFpQixJQUFBLENBQWhCakIsZ0JBQWdCO0lBQUFrQixpQkFBQSxHQUFBRCxJQUFBLENBQ2hCbEIsWUFBWTtJQUFaQSxZQUFZLEdBQUFtQixpQkFBQSxjQUFHLGVBQUFBLGlCQUFBO0VBRWYsSUFBTUMsTUFHTCxHQUFBTCxNQUFBLENBQUFDLE1BQUEsS0FDSUssc0JBQVU7SUFFYjFCLElBQUksRUFBRSxLQUFLO0lBRVgyQixlQUFlLFdBQWZBLGVBQWVBLENBQUFDLEtBQUEsRUFBaUM7TUFBQSxJQUE5QkMsVUFBVSxHQUFBRCxLQUFBLENBQVZDLFVBQVU7UUFBRUMsY0FBQSxHQUFBRixLQUFBLENBQUFFLGNBQUE7TUFDNUIsSUFBTTFCLEtBQUssR0FDVEUsZ0JBQWdCLEtBQUt5QixTQUFTLElBQUlGLFVBQVUsQ0FBQ0csUUFBUSxDQUFDMUIsZ0JBQWdCLENBQUMsR0FDbkV1QixVQUFVLENBQUNJLE9BQU8sQ0FBQzNCLGdCQUFnQixDQUFDLEdBQ3BDLENBQUM7TUFFUCxJQUFNSCxNQUFNLEdBQUcwQixVQUFVLENBQUNLLEdBQUcsQ0FBRSxVQUFBcEMsSUFBSTtRQUFBLE9BQU07VUFDdkNBLElBQUksRUFBSkEsSUFBSTtVQUNKVSxHQUFHLEVBQUUsR0FBR1YsSUFBSSxJQUFJLElBQUFxQyxpQkFBTSxFQUFDLENBQUMsRUFBRTtVQUMxQnBDLE1BQU0sRUFBRStCLGNBQWMsQ0FBQ2hDLElBQUk7UUFDN0IsQ0FBQztNQUFBLENBQUMsQ0FBQztNQUVILElBQU1TLE9BQU8sR0FBR0wsZUFBZSxDQUM3QkMsTUFBTSxFQUNOQyxLQUFLLEVBQ0xDLFlBQVksRUFDWkMsZ0JBQ0YsQ0FBQztNQUVELE9BQU87UUFDTDhCLEtBQUssRUFBRSxLQUFLO1FBQ1pwQyxJQUFJLEVBQUUsS0FBSztRQUNYUSxHQUFHLEVBQUUsT0FBTyxJQUFBMkIsaUJBQU0sRUFBQyxDQUFDLEVBQUU7UUFDdEIvQixLQUFLLEVBQUxBLEtBQUs7UUFDTHlCLFVBQVUsRUFBVkEsVUFBVTtRQUNWdEIsT0FBTyxFQUFQQSxPQUFPO1FBQ1BKLE1BQU0sRUFBTkEsTUFBTTtRQUNOa0Msa0JBQWtCLEVBQUU7TUFDdEIsQ0FBQztJQUNILENBQUM7SUFFREMsa0JBQWtCLFdBQWxCQSxrQkFBa0JBLENBQUNDLFlBQVksRUFBQUMsS0FBQSxFQUFrQztNQUFBLElBQUFDLGFBQUEsRUFBQUMsWUFBQSxFQUFBQyxxQkFBQSxFQUFBQyxjQUFBLEVBQUFDLHFCQUFBLEVBQUFDLHNCQUFBO01BQUEsSUFBOUJqQixVQUFVLEdBQUFXLEtBQUEsQ0FBVlgsVUFBVTtRQUFFQyxjQUFBLEdBQUFVLEtBQUEsQ0FBQVYsY0FBQTtNQUM3QyxJQUFNZixLQUFLLEdBQUd3QixZQUFZO01BRTFCLElBQUl4QixLQUFLLENBQUNxQixLQUFLLEtBQUssS0FBSyxFQUFFO1FBQ3pCLE9BQU9yQixLQUFLO01BQ2Q7TUFFQSxJQUFNWixNQUFNLEdBQUcwQixVQUFVLENBQUNLLEdBQUcsQ0FBRSxVQUFBcEMsSUFBSSxFQUFLO1FBQ3RDLElBQU1lLEtBQUssR0FDVEUsS0FBSyxDQUNMWixNQUFNLENBQUM0QyxJQUFJLENBQUUsVUFBQUMsQ0FBQztVQUFBLE9BQUtBLENBQUMsQ0FBQ2xELElBQUksS0FBS0EsSUFBSTtRQUFBLEVBQUM7UUFFckMsT0FBQXNCLE1BQUEsQ0FBQUMsTUFBQSxLQUNLUixLQUFLO1VBQ1JmLElBQUksRUFBSkEsSUFBSTtVQUNKVSxHQUFHLEVBQ0RLLEtBQUssSUFBSUEsS0FBSyxDQUFDZixJQUFJLEtBQUtBLElBQUksSUFBSWUsS0FBSyxDQUFDTCxHQUFHLEdBQ3JDSyxLQUFLLENBQUNMLEdBQUcsR0FDVCxHQUFHVixJQUFJLElBQUksSUFBQXFDLGlCQUFNLEVBQUMsQ0FBQyxFQUFFO1VBQzNCcEMsTUFBTSxFQUNKK0IsY0FBYyxDQUFDaEMsSUFBSSxDQUFDLEtBQUtpQyxTQUFTLEdBQUFYLE1BQUEsQ0FBQUMsTUFBQSxLQUV6QlMsY0FBYyxDQUFDaEMsSUFBSSxDQUFDLEVBQ25CZSxLQUFLLEdBQUdBLEtBQUssQ0FBQ2QsTUFBTSxHQUFHZ0MsU0FBUyxJQUV0Q2xCLEtBQUssR0FDSEEsS0FBSyxDQUFDZCxNQUFNLEdBQ1pnQztRQUFBO01BRVosQ0FBQyxDQUFDO01BRUYsSUFBTTNCLEtBQUssR0FBRzZDLElBQUksQ0FBQ0MsR0FBRyxDQUNwQkQsSUFBSSxDQUFDRSxHQUFHLENBQUN0QixVQUFVLENBQUNJLE9BQU8sRUFBQVEsYUFBQSxHQUFDMUIsS0FBSyxDQUFDWixNQUFNLEVBQUF1QyxZQUFBLEdBQUMzQixLQUFLLG9CQUFMQSxLQUFLLENBQUVYLEtBQUssWUFBQXNDLFlBQUEsR0FBSSxDQUFDLENBQUMscUJBQS9CRCxhQUFBLENBQWlDM0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ3RFSyxNQUFNLENBQUNpRCxNQUFNLEdBQUcsQ0FDbEIsQ0FBQztNQUVELElBQU1DLFNBQVMsR0FBR2xELE1BQU0sQ0FBQytCLEdBQUcsQ0FBRSxVQUFBckIsS0FBSztRQUFBLE9BQUtBLEtBQUssQ0FBQ0wsR0FBRztNQUFBLEVBQUM7TUFFbEQsSUFBTUQsT0FBTyxJQUFBb0MscUJBQUEsSUFBQUMsY0FBQSxHQUNYN0IsS0FBSyxDQUFDUixPQUFPLHFCQUFicUMsY0FBQSxDQUFlM0IsTUFBTSxDQUFFLFVBQUFDLEVBQUU7UUFBQSxPQUFLbUMsU0FBUyxDQUFDckIsUUFBUSxDQUFDZCxFQUFFLENBQUNWLEdBQUcsQ0FBQztNQUFBLEVBQUMsWUFBQW1DLHFCQUFBLEdBQUksRUFBRTtNQUVqRSxPQUFPN0IsV0FBVyxDQUNoQjtRQUNFc0IsS0FBSyxFQUFFLEtBQUs7UUFDWnBDLElBQUksRUFBRSxLQUFLO1FBQ1hRLEdBQUcsRUFBRSxPQUFPLElBQUEyQixpQkFBTSxFQUFDLENBQUMsRUFBRTtRQUN0Qi9CLEtBQUssRUFBTEEsS0FBSztRQUNMeUIsVUFBVSxFQUFWQSxVQUFVO1FBQ1Z0QixPQUFPLEVBQVBBLE9BQU87UUFDUEosTUFBTSxFQUFOQSxNQUFNO1FBQ05rQyxrQkFBa0IsR0FBQVEscUJBQUEsSUFBQUMsc0JBQUEsR0FDaEIvQixLQUFLLENBQUNzQixrQkFBa0IscUJBQXhCUyxzQkFBQSxDQUEwQjdCLE1BQU0sQ0FBRSxVQUFBVCxHQUFHO1VBQUEsT0FDbkM2QyxTQUFTLENBQUNyQixRQUFRLENBQUN4QixHQUFHLENBQ3hCO1FBQUEsRUFBQyxZQUFBcUMscUJBQUEsR0FBSTtNQUNULENBQUMsRUFDRHpDLEtBQUssRUFDTEMsWUFBWSxFQUNaQyxnQkFDRixDQUFDO0lBQ0gsQ0FBQztJQUVEZ0QsMkJBQTJCLFdBQTNCQSwyQkFBMkJBLENBQ3pCdkMsS0FBSyxFQUFBd0MsS0FBQSxFQUVMO01BQUEsSUFERTFCLFVBQVUsR0FBQTBCLEtBQUEsQ0FBVjFCLFVBQVU7UUFBRUMsY0FBYyxHQUFBeUIsS0FBQSxDQUFkekIsY0FBYztRQUFFMEIsZUFBQSxHQUFBRCxLQUFBLENBQUFDLGVBQUE7TUFFOUIsSUFBTXJELE1BQU0sR0FBRzBCLFVBQVUsQ0FBQ0ssR0FBRyxDQUMxQixVQUFBcEMsSUFBSTtRQUFBLE9BQ0hpQixLQUFLLENBQUNaLE1BQU0sQ0FBQzRDLElBQUksQ0FDZCxVQUFBQyxDQUFDO1VBQUEsT0FBS0EsQ0FBQyxDQUFDbEQsSUFBSSxLQUFLQSxJQUFJLElBQUksQ0FBQzBELGVBQWUsQ0FBQ3hCLFFBQVEsQ0FBQ2dCLENBQUMsQ0FBQ2xELElBQUksQ0FDNUQ7UUFBQSxFQUFDLElBQUk7VUFDSEEsSUFBSSxFQUFKQSxJQUFJO1VBQ0pVLEdBQUcsRUFBRSxHQUFHVixJQUFJLElBQUksSUFBQXFDLGlCQUFNLEVBQUMsQ0FBQyxFQUFFO1VBQzFCcEMsTUFBTSxFQUFFK0IsY0FBYyxDQUFDaEMsSUFBSTtRQUM3QixDQUNKO01BQUEsRUFBQztNQUVELElBQU1NLEtBQUssR0FBRzZDLElBQUksQ0FBQ0UsR0FBRyxDQUNwQixDQUFDLEVBQ0R0QixVQUFVLENBQUNJLE9BQU8sQ0FBQ2xCLEtBQUssQ0FBQ1osTUFBTSxDQUFDWSxLQUFLLENBQUNYLEtBQUssQ0FBQyxDQUFDTixJQUFJLENBQ25ELENBQUM7TUFFRCxJQUFJUyxPQUFPLEdBQUdRLEtBQUssQ0FBQ1IsT0FBTyxDQUFDVSxNQUFNLENBRS9CLFVBQUFDLEVBQUU7UUFBQSxPQUFLQSxFQUFFLENBQUNsQixJQUFJLEtBQUssT0FBTyxJQUFJRyxNQUFNLENBQUM0QyxJQUFJLENBQUUsVUFBQUMsQ0FBQztVQUFBLE9BQUtBLENBQUMsQ0FBQ3hDLEdBQUcsS0FBS1UsRUFBRSxDQUFDVixHQUFHO1FBQUEsRUFDcEU7TUFBQSxFQUFDO01BRUQsSUFBSSxDQUFDRCxPQUFPLENBQUM2QyxNQUFNLEVBQUU7UUFDbkI3QyxPQUFPLEdBQUdMLGVBQWUsQ0FDdkJDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxZQUFZLEVBQ1pDLGdCQUNGLENBQUM7TUFDSDtNQUVBLE9BQUFjLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO1FBQ1JSLE9BQU8sRUFBUEEsT0FBTztRQUNQc0IsVUFBVSxFQUFWQSxVQUFVO1FBQ1YxQixNQUFNLEVBQU5BLE1BQU07UUFDTkMsS0FBQSxFQUFBQTtNQUFBO0lBRUosQ0FBQztJQUVEcUQscUJBQXFCLFdBQXJCQSxxQkFBcUJBLENBQUMxQyxLQUFLLEVBQUVQLEdBQUcsRUFBRTtNQUNoQyxJQUFNSixLQUFLLEdBQUdXLEtBQUssQ0FBQ1osTUFBTSxDQUFDUyxTQUFTLENBQUUsVUFBQW9DLENBQUM7UUFBQSxPQUFLQSxDQUFDLENBQUN4QyxHQUFHLEtBQUtBLEdBQUc7TUFBQSxFQUFDO01BRTFELElBQUlKLEtBQUssS0FBSyxDQUFDLENBQUMsSUFBSUEsS0FBSyxLQUFLVyxLQUFLLENBQUNYLEtBQUssRUFBRTtRQUN6QyxPQUFPVyxLQUFLO01BQ2Q7TUFFQSxPQUFPRCxXQUFXLENBQUNDLEtBQUssRUFBRVgsS0FBSyxFQUFFQyxZQUFZLEVBQUVDLGdCQUFnQixDQUFDO0lBQ2xFLENBQUM7SUFFRG9ELGlCQUFpQixXQUFqQkEsaUJBQWlCQSxDQUFDM0MsS0FBSyxFQUFFNEMsTUFBTSxFQUFBQyxLQUFBLEVBQXNDO01BQUEsSUFBbEM5QixjQUFjLEdBQUE4QixLQUFBLENBQWQ5QixjQUFjO1FBQUUrQixjQUFBLEdBQUFELEtBQUEsQ0FBQUMsY0FBQTtNQUNqRCxRQUFRRixNQUFNLENBQUMzRCxJQUFJO1FBQ2pCLEtBQUssU0FBUztRQUNkLEtBQUssVUFBVTtRQUNmLEtBQUsscUJBQXFCO1VBQUU7WUFDMUIsSUFBTUksS0FBSyxHQUFHVyxLQUFLLENBQUNaLE1BQU0sQ0FBQ1MsU0FBUyxDQUNqQyxVQUFBQyxLQUFLO2NBQUEsT0FBS0EsS0FBSyxDQUFDZixJQUFJLEtBQUs2RCxNQUFNLENBQUMxRCxPQUFPLENBQUNILElBQzNDO1lBQUEsRUFBQztZQUVELElBQUlNLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtjQUNoQixPQUFPLElBQUk7WUFDYjtZQUVBLElBQU0wRCxZQUFZLEdBQUdoRCxXQUFXLENBQUFNLE1BQUEsQ0FBQUMsTUFBQSxLQUV6Qk4sS0FBSztjQUNSWixNQUFNLEVBQUVZLEtBQUssQ0FBQ1osTUFBTSxDQUFDK0IsR0FBRyxDQUFFLFVBQUFyQixLQUFLLEVBQUs7Z0JBQ2xDLElBQUlBLEtBQUssQ0FBQ2YsSUFBSSxLQUFLNkQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDSCxJQUFJLEVBQUU7a0JBQ3RDLE9BQU9lLEtBQUs7Z0JBQ2Q7Z0JBRUEsSUFBTWtELEtBQUssR0FBR0YsY0FBYyxDQUFDaEQsS0FBSyxDQUFDZixJQUFJLENBQUM7Z0JBRXhDLElBQU1rRSxTQUFTLEdBQUdELEtBQUssb0JBQUxBLEtBQUssQ0FBRztrQkFBRWhFLE1BQU0sRUFBRWMsS0FBSyxDQUFDZDtnQkFBTyxDQUFDLENBQUM7Z0JBQ25ELElBQU1rRSxNQUFNLEdBQUdGLEtBQUssb0JBQUxBLEtBQUssQ0FBRztrQkFBRWhFLE1BQU0sRUFBRTRELE1BQU0sQ0FBQzFELE9BQU8sQ0FBQ0Y7Z0JBQU8sQ0FBQyxDQUFDO2dCQUV6RCxJQUFNUyxHQUFHLEdBQ1B3RCxTQUFTLEtBQUtDLE1BQU0sR0FDaEJwRCxLQUFLLENBQUNMLEdBQUcsR0FDVCxHQUFHSyxLQUFLLENBQUNmLElBQUksSUFBSSxJQUFBcUMsaUJBQU0sRUFBQyxDQUFDLEVBQUU7Z0JBRWpDLElBQUlwQyxNQUFNO2dCQUVWLElBQ0UsQ0FBQzRELE1BQU0sQ0FBQzNELElBQUksS0FBSyxVQUFVLElBQ3pCMkQsTUFBTSxDQUFDM0QsSUFBSSxLQUFLLHFCQUFxQixLQUN2QzJELE1BQU0sQ0FBQzFELE9BQU8sQ0FBQ2lFLEtBQUssSUFDcEJGLFNBQVMsS0FBS0MsTUFBTSxFQUNwQjtrQkFDQWxFLE1BQU0sR0FDSjRELE1BQU0sQ0FBQzFELE9BQU8sQ0FBQ0YsTUFBTSxLQUFLZ0MsU0FBUyxJQUNuQ0QsY0FBYyxDQUFDakIsS0FBSyxDQUFDZixJQUFJLENBQUMsS0FBS2lDLFNBQVMsR0FBQVgsTUFBQSxDQUFBQyxNQUFBLEtBRS9CUyxjQUFjLENBQUNqQixLQUFLLENBQUNmLElBQUksQ0FBQyxFQUMxQmUsS0FBSyxDQUFDZCxNQUFNLEVBQ1o0RCxNQUFNLENBQUMxRCxPQUFPLENBQUNGLE1BQUEsSUFFcEJjLEtBQUssQ0FBQ2QsTUFBTTtnQkFDcEIsQ0FBQyxNQUFNO2tCQUNMQSxNQUFNLEdBQ0orQixjQUFjLENBQUNqQixLQUFLLENBQUNmLElBQUksQ0FBQyxLQUFLaUMsU0FBUyxHQUFBWCxNQUFBLENBQUFDLE1BQUEsS0FFL0JTLGNBQWMsQ0FBQ2pCLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLEVBQzFCNkQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDRixNQUFBLElBRXBCNEQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDRixNQUFNO2dCQUM3QjtnQkFFQSxJQUFNb0UsSUFBSSxHQUNSUixNQUFNLENBQUMzRCxJQUFJLEtBQUssVUFBVSxJQUFJMkQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDa0UsSUFBSSxJQUFJLElBQUksR0FDckRSLE1BQU0sQ0FBQzFELE9BQU8sQ0FBQ2tFLElBQUksR0FDbkJ0RCxLQUFLLENBQUNzRCxJQUFJO2dCQUVoQixPQUFPcEUsTUFBTSxLQUFLYyxLQUFLLENBQUNkLE1BQU0sSUFBSW9FLElBQUksS0FBS3RELEtBQUssQ0FBQ3NELElBQUksR0FBQS9DLE1BQUEsQ0FBQUMsTUFBQSxLQUM1Q1IsS0FBSztrQkFBRUwsR0FBRyxFQUFIQSxHQUFHO2tCQUFFMkQsSUFBSSxFQUFKQSxJQUFJO2tCQUFFcEUsTUFBQSxFQUFBQTtnQkFBQSxLQUN2QmMsS0FBSztjQUNYLENBQUM7WUFBQSxJQUVIVCxLQUFLLEVBQ0xDLFlBQVksRUFDWkMsZ0JBQ0YsQ0FBQztZQUVELE9BQUFjLE1BQUEsQ0FBQUMsTUFBQSxLQUNLeUMsWUFBWTtjQUNmekIsa0JBQWtCLEVBQUV5QixZQUFZLENBQUN6QixrQkFBa0IsQ0FBQ3BCLE1BQU0sQ0FDdkQsVUFBQVQsR0FBRztnQkFBQSxPQUFLQSxHQUFHLEtBQUtPLEtBQUssQ0FBQ1osTUFBTSxDQUFDMkQsWUFBWSxDQUFDMUQsS0FBSyxDQUFDLENBQUNJLEdBQ3BEO2NBQUE7WUFBQTtVQUVKO1FBRUEsS0FBSyxTQUFTO1VBQUU7WUFBQSxJQUFBNEQsZUFBQTtZQUNkLElBQUlyRCxLQUFLLENBQUNSLE9BQU8sQ0FBQzZDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Y0FDOUIsT0FBTyxJQUFJO1lBQ2I7WUFFQSxJQUFNaUIsV0FBVyxJQUFBRCxlQUFBLEdBQUdyRCxLQUFLLENBQUNSLE9BQU8sQ0FBQ1EsS0FBSyxDQUFDUixPQUFPLENBQUM2QyxNQUFNLEdBQUcsQ0FBQyxDQUFDLHFCQUF2Q2dCLGVBQUEsQ0FBeUM1RCxHQUFHO1lBQ2hFLElBQU1KLE1BQUssR0FBR1csS0FBSyxDQUFDWixNQUFNLENBQUNTLFNBQVMsQ0FDakMsVUFBQUMsS0FBSztjQUFBLE9BQUtBLEtBQUssQ0FBQ0wsR0FBRyxLQUFLNkQsV0FDM0I7WUFBQSxFQUFDO1lBRUQsSUFBSWpFLE1BQUssS0FBSyxDQUFDLENBQUMsRUFBRTtjQUNoQixPQUFPLElBQUk7WUFDYjtZQUVBLE9BQUFnQixNQUFBLENBQUFDLE1BQUEsS0FDS04sS0FBSztjQUNSc0Isa0JBQWtCLEVBQUV0QixLQUFLLENBQUNzQixrQkFBa0IsQ0FBQ3BCLE1BQU0sQ0FDaEQsVUFBQVQsR0FBRztnQkFBQSxPQUFLQSxHQUFHLEtBQUtPLEtBQUssQ0FBQ1osTUFBTSxDQUFDQyxNQUFLLENBQUMsQ0FBQ0ksR0FDdkM7Y0FBQSxFQUFDO2NBQ0RELE9BQU8sRUFBRVEsS0FBSyxDQUFDUixPQUFPLENBQUMrRCxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2NBQ25DbEUsS0FBQSxFQUFBQTtZQUFBO1VBRUo7UUFFQSxLQUFLLFNBQVM7VUFBRTtZQUNkLElBQU1tRSxVQUFVLEdBQUd4RCxLQUFLLENBQUNaLE1BQU0sQ0FBQ1MsU0FBUyxDQUN0QyxVQUFBQyxLQUFLO2NBQUEsT0FBS0EsS0FBSyxDQUFDZixJQUFJLEtBQUs2RCxNQUFNLENBQUMxRCxPQUFPLENBQUNILElBQzNDO1lBQUEsRUFBQztZQUNELElBQUl5RSxVQUFVLEtBQUssQ0FBQyxDQUFDLEVBQUU7Y0FDckIsT0FBTyxJQUFJO1lBQ2I7WUFDQSxJQUFNMUQsS0FBSyxHQUFHRSxLQUFLLENBQUNaLE1BQU0sQ0FBQ29FLFVBQVUsQ0FBQztZQUV0QyxJQUFNUixLQUFLLEdBQUdGLGNBQWMsQ0FBQ2hELEtBQUssQ0FBQ2YsSUFBSSxDQUFDO1lBRXhDLElBQU1rRSxTQUFTLEdBQUdELEtBQUssb0JBQUxBLEtBQUssQ0FBRztjQUFFaEUsTUFBTSxFQUFFYyxLQUFLLENBQUNkO1lBQU8sQ0FBQyxDQUFDO1lBQ25ELElBQU1rRSxNQUFNLEdBQUdGLEtBQUssb0JBQUxBLEtBQUssQ0FBRztjQUFFaEUsTUFBTSxFQUFFNEQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDRjtZQUFPLENBQUMsQ0FBQztZQUV6RCxJQUFNUyxHQUFHLEdBQ1B3RCxTQUFTLEtBQUtDLE1BQU0sR0FBR3BELEtBQUssQ0FBQ0wsR0FBRyxHQUFHLEdBQUdLLEtBQUssQ0FBQ2YsSUFBSSxJQUFJLElBQUFxQyxpQkFBTSxFQUFDLENBQUMsRUFBRTtZQUVoRSxJQUFNcEMsTUFBTSxHQUNWNEQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDRixNQUFNLEtBQUtnQyxTQUFTLElBQ25DRCxjQUFjLENBQUNqQixLQUFLLENBQUNmLElBQUksQ0FBQyxLQUFLaUMsU0FBUyxHQUFBWCxNQUFBLENBQUFDLE1BQUEsS0FFL0JTLGNBQWMsQ0FBQ2pCLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLEVBQzFCNkQsTUFBTSxDQUFDMUQsT0FBTyxDQUFDRixNQUFBLElBRXBCZ0MsU0FBUztZQUVmLElBQU15QyxRQUFRLEdBQ1p6RSxNQUFNLEtBQUtjLEtBQUssQ0FBQ2QsTUFBTSxHQUFBcUIsTUFBQSxDQUFBQyxNQUFBLEtBQVFSLEtBQUs7Y0FBRUwsR0FBRyxFQUFIQSxHQUFHO2NBQUVULE1BQUEsRUFBQUE7WUFBQSxLQUFXYyxLQUFLO1lBRTdELE9BQUFPLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO2NBQ1JzQixrQkFBa0IsRUFBRXRCLEtBQUssQ0FBQ3NCLGtCQUFrQixDQUN6Q3BCLE1BQU0sQ0FBRSxVQUFBVCxHQUFHO2dCQUFBLE9BQUtBLEdBQUcsS0FBS0ssS0FBSyxDQUFDTCxHQUFHO2NBQUEsRUFBQyxDQUNsQ1csTUFBTSxDQUFDcUQsUUFBUSxDQUFDaEUsR0FBRyxDQUFDO2NBQ3ZCTCxNQUFNLEVBQUVZLEtBQUssQ0FBQ1osTUFBTSxDQUFDK0IsR0FBRyxDQUFDLFVBQUNyQixLQUFLLEVBQUVULEtBQUs7Z0JBQUEsT0FDcENBLEtBQUssS0FBS21FLFVBQVUsR0FBR0MsUUFBUSxHQUFHM0QsS0FDcEM7Y0FBQSxFQUFDO2NBQ0ROLE9BQU8sRUFDTEMsR0FBRyxLQUFLSyxLQUFLLENBQUNMLEdBQUcsR0FDYk8sS0FBSyxDQUFDUixPQUFPLEdBQ2JRLEtBQUssQ0FBQ1IsT0FBTyxDQUFDVSxNQUFNLENBQUUsVUFBQXdELE1BQU07Z0JBQUEsT0FBS0EsTUFBTSxDQUFDakUsR0FBRyxLQUFLSyxLQUFLLENBQUNMLEdBQUc7Y0FBQTtZQUFBO1VBRW5FO1FBRUE7VUFDRSxPQUFPa0Isc0JBQVUsQ0FBQ2dDLGlCQUFpQixDQUFDM0MsS0FBSyxFQUFFNEMsTUFBTSxDQUFDO01BQ3REO0lBQ0YsQ0FBQztJQUVEZSxjQUFjLEVBQUUvRTtFQUFBLEVBQ2pCO0VBRUQsT0FBTzhCLE1BQU07QUFDZiIsImlnbm9yZUxpc3QiOltdfQ==