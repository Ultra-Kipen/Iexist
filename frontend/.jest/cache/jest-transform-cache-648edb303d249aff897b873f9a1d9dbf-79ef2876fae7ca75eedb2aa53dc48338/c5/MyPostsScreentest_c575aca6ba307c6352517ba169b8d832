c6ba9eb2720053eb82b9f6f435988d54
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  var Button = function Button(_ref) {
    var onPress = _ref.onPress,
      children = _ref.children,
      testID = _ref.testID,
      mode = _ref.mode,
      textColor = _ref.textColor,
      style = _ref.style;
    return (0, _jsxRuntime.jsx)(TouchableOpacity, {
      onPress: onPress,
      testID: testID,
      style: style,
      children: (0, _jsxRuntime.jsx)(Text, {
        children: children
      })
    });
  };
  var Card = function Card(_ref2) {
    var children = _ref2.children,
      style = _ref2.style,
      testID = _ref2.testID;
    return (0, _jsxRuntime.jsx)(View, {
      style: style,
      testID: testID,
      children: children
    });
  };
  Card.Content = function (_ref3) {
    var children = _ref3.children;
    return (0, _jsxRuntime.jsx)(View, {
      children: children
    });
  };
  Card.Actions = function (_ref4) {
    var children = _ref4.children;
    return (0, _jsxRuntime.jsx)(View, {
      children: children
    });
  };
  var Dialog = function Dialog(_ref5) {
    var visible = _ref5.visible,
      children = _ref5.children,
      onDismiss = _ref5.onDismiss;
    if (!visible) return null;
    return (0, _jsxRuntime.jsx)(View, {
      children: children
    });
  };
  Dialog.Title = function (_ref6) {
    var children = _ref6.children;
    return (0, _jsxRuntime.jsx)(Text, {
      children: children
    });
  };
  Dialog.Content = function (_ref7) {
    var children = _ref7.children;
    return (0, _jsxRuntime.jsx)(View, {
      children: children
    });
  };
  Dialog.Actions = function (_ref8) {
    var children = _ref8.children;
    return (0, _jsxRuntime.jsx)(View, {
      children: children
    });
  };
  var Chip = function Chip(_ref9) {
    var children = _ref9.children,
      icon = _ref9.icon,
      style = _ref9.style;
    return (0, _jsxRuntime.jsxs)(View, {
      style: style,
      children: [icon && icon(), (0, _jsxRuntime.jsx)(Text, {
        children: children
      })]
    });
  };
  var Portal = function Portal(_ref10) {
    var children = _ref10.children;
    return children;
  };
  return {
    Button: Button,
    Card: Card,
    Chip: Chip,
    Dialog: Dialog,
    Portal: Portal
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyPostsScreen = _interopRequireDefault(require("../../src/screens/MyPostsScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPosts = [{
  post_id: 1,
  content: '첫 번째 테스트 게시물입니다.',
  emotion_summary: '행복',
  like_count: 5,
  comment_count: 2,
  created_at: '2025-03-01T12:00:00Z'
}, {
  post_id: 2,
  content: '두 번째 테스트 게시물입니다.',
  emotion_summary: '슬픔',
  like_count: 2,
  comment_count: 1,
  created_at: '2025-03-02T12:00:00Z'
}];
function createMockResponse(data) {
  return {
    data: data,
    status: 200,
    statusText: 'OK',
    headers: {},
    config: {}
  };
}
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _postService.default.getMyPosts.mockResolvedValue(createMockResponse({
      posts: mockPosts
    }));
  });
  afterEach(function () {
    (0, _reactNative.cleanup)();
  });
  it('renders post list correctly', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('내 게시물')).toBeTruthy();
    }, {
      timeout: 2000
    });
  }));
  it('handles post deletion', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.deletePost.mockResolvedValue(createMockResponse({
      success: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      var deleteButtons = _reactNative.screen.getAllByText('삭제');
      _reactNative.fireEvent.press(deleteButtons[0]);
    }, {
      timeout: 2000
    });
    var confirmDeleteButton = _reactNative.screen.getAllByText('삭제')[_reactNative.screen.getAllByText('삭제').length - 1];
    _reactNative.fireEvent.press(confirmDeleteButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.deletePost).toHaveBeenCalledWith(1);
    }, {
      timeout: 2000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,