{"version":3,"names":["_getJestObj","mock","useNavigation","navigate","jest","fn","goBack","addListener","getMyPosts","deletePost","React","require","_require","View","Text","TouchableOpacity","Button","_ref","onPress","children","testID","mode","textColor","style","_jsxRuntime","jsx","Card","_ref2","Content","_ref3","Actions","_ref4","Dialog","_ref5","visible","onDismiss","Title","_ref6","_ref7","_ref8","Chip","_ref9","icon","jsxs","Portal","_ref10","alert","_interopRequireDefault","_asyncToGenerator2","_react","_reactNative","_MyPostsScreen","_postService","_require2","mockPosts","post_id","content","emotion_summary","like_count","comment_count","created_at","createMockResponse","data","status","statusText","headers","config","describe","beforeEach","clearAllMocks","postService","mockResolvedValue","posts","afterEach","cleanup","it","default","render","navigation","route","waitFor","expect","screen","getByText","toBeTruthy","timeout","success","deleteButtons","getAllByText","fireEvent","press","confirmDeleteButton","length","toHaveBeenCalledWith"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor, cleanup } from '@testing-library/react-native';\r\nimport MyPostsScreen from '../../src/screens/MyPostsScreen';\r\nimport postService from '../../src/services/api/postService';\r\nimport { Alert } from 'react-native';\r\nimport { AxiosResponse } from 'axios';\r\n\r\n// 타입 정의\r\ntype MockFn<T extends (...args: any[]) => any> = jest.Mock<ReturnType<T>, Parameters<T>>;\r\n\r\n// 모킹 재정의\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    addListener: jest.fn(() => jest.fn()),\r\n  }),\r\n}));\r\n\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn(),\r\n  deletePost: jest.fn(),\r\n}));\r\n\r\n// Paper 모킹 - 설정 파일에 이미 있는 모킹을 활용\r\njest.mock('react-native-paper', () => {\r\n  const React = require('react');\r\n  const { View, Text, TouchableOpacity } = require('react-native');\r\n  \r\n  const Button = ({ onPress, children, testID, mode, textColor, style }) => (\r\n    <TouchableOpacity onPress={onPress} testID={testID} style={style}>\r\n      <Text>{children}</Text>\r\n    </TouchableOpacity>\r\n  );\r\n  \r\n  const Card = ({ children, style, testID }) => (\r\n    <View style={style} testID={testID}>{children}</View>\r\n  );\r\n  \r\n  Card.Content = ({ children }) => <View>{children}</View>;\r\n  Card.Actions = ({ children }) => <View>{children}</View>;\r\n  \r\n  const Dialog = ({ visible, children, onDismiss }) => {\r\n    if (!visible) return null;\r\n    return <View>{children}</View>;\r\n  };\r\n  \r\n  Dialog.Title = ({ children }) => <Text>{children}</Text>;\r\n  Dialog.Content = ({ children }) => <View>{children}</View>;\r\n  Dialog.Actions = ({ children }) => <View>{children}</View>;\r\n  \r\n  const Chip = ({ children, icon, style }) => (\r\n    <View style={style}>\r\n      {icon && icon()}\r\n      <Text>{children}</Text>\r\n    </View>\r\n  );\r\n  \r\n  const Portal = ({ children }) => children;\r\n\r\n  return {\r\n    Button,\r\n    Card,\r\n    Chip,\r\n    Dialog,\r\n    Portal,\r\n  };\r\n});\r\n\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'MaterialCommunityIcons');\r\n\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 테스트 데이터\r\nconst mockPosts = [\r\n  {\r\n    post_id: 1,\r\n    content: '첫 번째 테스트 게시물입니다.',\r\n    emotion_summary: '행복',\r\n    like_count: 5,\r\n    comment_count: 2,\r\n    created_at: '2025-03-01T12:00:00Z',\r\n  },\r\n  {\r\n    post_id: 2,\r\n    content: '두 번째 테스트 게시물입니다.',\r\n    emotion_summary: '슬픔',\r\n    like_count: 2,\r\n    comment_count: 1,\r\n    created_at: '2025-03-02T12:00:00Z',\r\n  },\r\n];\r\n\r\n// Axios 응답 모킹 헬퍼 함수\r\nfunction createMockResponse<T>(data: T): AxiosResponse<T> {\r\n  return {\r\n    data,\r\n    status: 200,\r\n    statusText: 'OK',\r\n    headers: {},\r\n    config: {} as any,\r\n  };\r\n}\r\n\r\ndescribe('MyPostsScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 타입 어설션 추가\r\n    (postService.getMyPosts as MockFn<typeof postService.getMyPosts>).mockResolvedValue(\r\n      createMockResponse({ posts: mockPosts })\r\n    );\r\n  });\r\n\r\n  afterEach(() => {\r\n    cleanup();\r\n  });\r\n\r\n  // 시간 단축을 위해 꼭 필요한 테스트만 실행\r\n  it('renders post list correctly', async () => {\r\n    render(<MyPostsScreen navigation={{ navigate: jest.fn(), addListener: jest.fn(() => jest.fn()) }} route={{}} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('내 게시물')).toBeTruthy();\r\n    }, { timeout: 2000 });\r\n  });\r\n\r\n  it('handles post deletion', async () => {\r\n    (postService.deletePost as MockFn<typeof postService.deletePost>).mockResolvedValue(\r\n      createMockResponse({ success: true })\r\n    );\r\n    \r\n    render(<MyPostsScreen navigation={{ navigate: jest.fn(), addListener: jest.fn(() => jest.fn()) }} route={{}} />);\r\n    \r\n    await waitFor(() => {\r\n      const deleteButtons = screen.getAllByText('삭제');\r\n      fireEvent.press(deleteButtons[0]);\r\n    }, { timeout: 2000 });\r\n    \r\n    const confirmDeleteButton = screen.getAllByText('삭제')[screen.getAllByText('삭제').length - 1];\r\n    fireEvent.press(confirmDeleteButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(postService.deletePost).toHaveBeenCalledWith(1);\r\n    }, { timeout: 2000 });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}