b32f2643ce7927311ff7877a33609238
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogBoxNotification;
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var LogBoxData = _interopRequireWildcard(require("../Data/LogBoxData"));
var _LogBoxLog = _interopRequireDefault(require("../Data/LogBoxLog"));
var _LogBoxButton = _interopRequireDefault(require("./LogBoxButton"));
var _LogBoxNotificationCountBadge = _interopRequireDefault(require("./LogBoxNotificationCountBadge"));
var _LogBoxNotificationDismissButton = _interopRequireDefault(require("./LogBoxNotificationDismissButton"));
var _LogBoxNotificationMessage = _interopRequireDefault(require("./LogBoxNotificationMessage"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function LogBoxNotification(props) {
  var totalLogCount = props.totalLogCount,
    level = props.level,
    log = props.log;
  (0, _react.useEffect)(function () {
    LogBoxData.symbolicateLogLazy(log);
  }, [log]);
  return (0, _jsxRuntime.jsx)(_View.default, {
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_LogBoxButton.default, {
      onPress: props.onPressOpen,
      style: styles.press,
      backgroundColor: {
        default: LogBoxStyle.getBackgroundColor(1),
        pressed: LogBoxStyle.getBackgroundColor(0.9)
      },
      children: (0, _jsxRuntime.jsxs)(_View.default, {
        style: styles.content,
        children: [(0, _jsxRuntime.jsx)(_LogBoxNotificationCountBadge.default, {
          count: totalLogCount,
          level: level
        }), (0, _jsxRuntime.jsx)(_LogBoxNotificationMessage.default, {
          message: log.message
        }), (0, _jsxRuntime.jsx)(_LogBoxNotificationDismissButton.default, {
          onPress: props.onPressDismiss
        })]
      })
    })
  });
}
var styles = _StyleSheet.default.create({
  container: {
    height: 48,
    position: 'relative',
    width: '100%',
    justifyContent: 'center',
    marginTop: 0.5,
    backgroundColor: LogBoxStyle.getTextColor(1)
  },
  press: {
    height: 48,
    position: 'relative',
    width: '100%',
    justifyContent: 'center',
    marginTop: 0.5,
    paddingHorizontal: 12
  },
  content: {
    alignItems: 'flex-start',
    flexDirection: 'row',
    borderRadius: 8,
    flexGrow: 0,
    flexShrink: 0,
    flexBasis: 'auto'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJMb2dCb3hEYXRhIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfTG9nQm94TG9nIiwiX0xvZ0JveEJ1dHRvbiIsIl9Mb2dCb3hOb3RpZmljYXRpb25Db3VudEJhZGdlIiwiX0xvZ0JveE5vdGlmaWNhdGlvbkRpc21pc3NCdXR0b24iLCJfTG9nQm94Tm90aWZpY2F0aW9uTWVzc2FnZSIsIkxvZ0JveFN0eWxlIiwiX3JlYWN0IiwiUmVhY3QiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkxvZ0JveE5vdGlmaWNhdGlvbiIsInByb3BzIiwidG90YWxMb2dDb3VudCIsImxldmVsIiwibG9nIiwidXNlRWZmZWN0Iiwic3ltYm9saWNhdGVMb2dMYXp5IiwianN4Iiwic3R5bGUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJjaGlsZHJlbiIsIm9uUHJlc3MiLCJvblByZXNzT3BlbiIsInByZXNzIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwicHJlc3NlZCIsImpzeHMiLCJjb250ZW50IiwiY291bnQiLCJtZXNzYWdlIiwib25QcmVzc0Rpc21pc3MiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiaGVpZ2h0IiwicG9zaXRpb24iLCJ3aWR0aCIsImp1c3RpZnlDb250ZW50IiwibWFyZ2luVG9wIiwiZ2V0VGV4dENvbG9yIiwicGFkZGluZ0hvcml6b250YWwiLCJhbGlnbkl0ZW1zIiwiZmxleERpcmVjdGlvbiIsImJvcmRlclJhZGl1cyIsImZsZXhHcm93IiwiZmxleFNocmluayIsImZsZXhCYXNpcyJdLCJzb3VyY2VzIjpbIkxvZ0JveE5vdGlmaWNhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IFZpZXcgZnJvbSAnLi4vLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCAqIGFzIExvZ0JveERhdGEgZnJvbSAnLi4vRGF0YS9Mb2dCb3hEYXRhJztcbmltcG9ydCBMb2dCb3hMb2cgZnJvbSAnLi4vRGF0YS9Mb2dCb3hMb2cnO1xuaW1wb3J0IExvZ0JveEJ1dHRvbiBmcm9tICcuL0xvZ0JveEJ1dHRvbic7XG5pbXBvcnQgTG9nQm94Tm90aWZpY2F0aW9uQ291bnRCYWRnZSBmcm9tICcuL0xvZ0JveE5vdGlmaWNhdGlvbkNvdW50QmFkZ2UnO1xuaW1wb3J0IExvZ0JveE5vdGlmaWNhdGlvbkRpc21pc3NCdXR0b24gZnJvbSAnLi9Mb2dCb3hOb3RpZmljYXRpb25EaXNtaXNzQnV0dG9uJztcbmltcG9ydCBMb2dCb3hOb3RpZmljYXRpb25NZXNzYWdlIGZyb20gJy4vTG9nQm94Tm90aWZpY2F0aW9uTWVzc2FnZSc7XG5pbXBvcnQgKiBhcyBMb2dCb3hTdHlsZSBmcm9tICcuL0xvZ0JveFN0eWxlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlRWZmZWN0fSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSAkUmVhZE9ubHk8e1xuICBsb2c6IExvZ0JveExvZyxcbiAgdG90YWxMb2dDb3VudDogbnVtYmVyLFxuICBsZXZlbDogJ3dhcm4nIHwgJ2Vycm9yJyxcbiAgb25QcmVzc09wZW46ICgpID0+IHZvaWQsXG4gIG9uUHJlc3NEaXNtaXNzOiAoKSA9PiB2b2lkLFxufT47XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ0JveE5vdGlmaWNhdGlvbihwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlIHtcbiAgY29uc3Qge3RvdGFsTG9nQ291bnQsIGxldmVsLCBsb2d9ID0gcHJvcHM7XG5cbiAgLy8gRWFnZXJseSBzeW1ib2xpY2F0ZSBzbyB0aGUgc3RhY2sgaXMgYXZhaWxhYmxlIHdoZW4gcHJlc3NpbmcgdG8gaW5zcGVjdC5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBMb2dCb3hEYXRhLnN5bWJvbGljYXRlTG9nTGF6eShsb2cpO1xuICB9LCBbbG9nXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICA8TG9nQm94QnV0dG9uXG4gICAgICAgIG9uUHJlc3M9e3Byb3BzLm9uUHJlc3NPcGVufVxuICAgICAgICBzdHlsZT17c3R5bGVzLnByZXNzfVxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I9e3tcbiAgICAgICAgICBkZWZhdWx0OiBMb2dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMSksXG4gICAgICAgICAgcHJlc3NlZDogTG9nQm94U3R5bGUuZ2V0QmFja2dyb3VuZENvbG9yKDAuOSksXG4gICAgICAgIH19PlxuICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PlxuICAgICAgICAgIDxMb2dCb3hOb3RpZmljYXRpb25Db3VudEJhZGdlIGNvdW50PXt0b3RhbExvZ0NvdW50fSBsZXZlbD17bGV2ZWx9IC8+XG4gICAgICAgICAgPExvZ0JveE5vdGlmaWNhdGlvbk1lc3NhZ2UgbWVzc2FnZT17bG9nLm1lc3NhZ2V9IC8+XG4gICAgICAgICAgPExvZ0JveE5vdGlmaWNhdGlvbkRpc21pc3NCdXR0b24gb25QcmVzcz17cHJvcHMub25QcmVzc0Rpc21pc3N9IC8+XG4gICAgICAgIDwvVmlldz5cbiAgICAgIDwvTG9nQm94QnV0dG9uPlxuICAgIDwvVmlldz5cbiAgKTtcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBoZWlnaHQ6IDQ4LFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIG1hcmdpblRvcDogMC41LFxuICAgIGJhY2tncm91bmRDb2xvcjogTG9nQm94U3R5bGUuZ2V0VGV4dENvbG9yKDEpLFxuICB9LFxuICBwcmVzczoge1xuICAgIGhlaWdodDogNDgsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgbWFyZ2luVG9wOiAwLjUsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxuICB9LFxuICBjb250ZW50OiB7XG4gICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGJvcmRlclJhZGl1czogOCxcbiAgICBmbGV4R3JvdzogMCxcbiAgICBmbGV4U2hyaW5rOiAwLFxuICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBVUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBQyx1QkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksVUFBQSxHQUFBTCxzQkFB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