5a3cecd27a28b60a9dcf6bd563582092
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _RefreshControl = _interopRequireDefault(require("../../Components/RefreshControl/RefreshControl"));
var _ScrollView = _interopRequireDefault(require("../../Components/ScrollView/ScrollView"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _splitLayoutProps2 = _interopRequireDefault(require("../../StyleSheet/splitLayoutProps"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useMergeRefs = _interopRequireDefault(require("../../Utilities/useMergeRefs"));
var _createAnimatedComponent = _interopRequireDefault(require("../createAnimatedComponent"));
var _useAnimatedProps5 = _interopRequireDefault(require("../useAnimatedProps"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var AnimatedScrollView = React.forwardRef(function AnimatedScrollViewWithOrWithoutInvertedRefreshControl(props, forwardedRef) {
  if (_Platform.default.OS === 'android' && props.refreshControl != null && props.style != null) {
    return (0, _jsxRuntime.jsx)(AnimatedScrollViewWithInvertedRefreshControl, Object.assign({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: forwardedRef,
      refreshControl: props.refreshControl
    }));
  } else {
    return (0, _jsxRuntime.jsx)(AnimatedScrollViewWithoutInvertedRefreshControl, Object.assign({
      scrollEventThrottle: 0.0001
    }, props, {
      ref: forwardedRef
    }));
  }
});
var AnimatedScrollViewWithInvertedRefreshControl = React.forwardRef(function AnimatedScrollViewWithInvertedRefreshControl(props, forwardedRef) {
  var _useMemo = (0, _react.useMemo)(function () {
      var _splitLayoutProps = (0, _splitLayoutProps2.default)((0, _flattenStyle.default)(props.style)),
        outer = _splitLayoutProps.outer,
        inner = _splitLayoutProps.inner;
      return {
        intermediatePropsForRefreshControl: {
          style: outer
        },
        intermediatePropsForScrollView: Object.assign({}, props, {
          style: inner
        })
      };
    }, [props]),
    intermediatePropsForRefreshControl = _useMemo.intermediatePropsForRefreshControl,
    intermediatePropsForScrollView = _useMemo.intermediatePropsForScrollView;
  var _useAnimatedProps = (0, _useAnimatedProps5.default)(intermediatePropsForRefreshControl),
    _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
    refreshControlAnimatedProps = _useAnimatedProps2[0],
    refreshControlRef = _useAnimatedProps2[1];
  var refreshControl = React.cloneElement(props.refreshControl, Object.assign({}, refreshControlAnimatedProps, {
    ref: refreshControlRef
  }));
  var _useAnimatedProps3 = (0, _useAnimatedProps5.default)(intermediatePropsForScrollView),
    _useAnimatedProps4 = (0, _slicedToArray2.default)(_useAnimatedProps3, 2),
    scrollViewAnimatedProps = _useAnimatedProps4[0],
    scrollViewRef = _useAnimatedProps4[1];
  var ref = (0, _useMergeRefs.default)(scrollViewRef, forwardedRef);
  return (0, _jsxRuntime.jsx)(_ScrollView.default, Object.assign({}, scrollViewAnimatedProps, {
    ref: ref,
    refreshControl: refreshControl,
    style: _StyleSheet.default.compose(scrollViewAnimatedProps.style, refreshControlAnimatedProps.style)
  }));
});
var AnimatedScrollViewWithoutInvertedRefreshControl = (0, _createAnimatedComponent.default)(_ScrollView.default);
var _default = exports.default = AnimatedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,