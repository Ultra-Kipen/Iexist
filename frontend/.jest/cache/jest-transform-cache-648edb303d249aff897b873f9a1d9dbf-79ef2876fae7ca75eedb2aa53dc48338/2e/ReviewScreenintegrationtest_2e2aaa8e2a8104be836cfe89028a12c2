646e770d33f2345d901678717bcfc60d
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        background: '#fff'
      }
    }),
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Text: 'Text',
    ActivityIndicator: 'ActivityIndicator'
  };
});
_getJestObj().mock("../../../src/api/emotionApi", function () {
  return {
    getEmotionStats: jest.fn().mockResolvedValue({
      emotions: [{
        id: 1,
        name: '행복',
        count: 5,
        color: '#FFD700'
      }, {
        id: 5,
        name: '슬픔',
        count: 2,
        color: '#4682B4'
      }, {
        id: 6,
        name: '불안',
        count: 1,
        color: '#DDA0DD'
      }],
      mostFrequent: {
        id: 1,
        name: '행복',
        count: 5,
        color: '#FFD700'
      }
    }),
    getEmotionHistory: jest.fn().mockResolvedValue([{
      date: '2025-05-01',
      emotions: [{
        id: 1,
        name: '행복',
        color: '#FFD700'
      }]
    }, {
      date: '2025-05-02',
      emotions: [{
        id: 5,
        name: '슬픔',
        color: '#4682B4'
      }]
    }, {
      date: '2025-05-03',
      emotions: [{
        id: 1,
        name: '행복',
        color: '#FFD700'
      }]
    }])
  };
});
_getJestObj().mock("../../../src/api/postApi", function () {
  return {
    getUserPosts: jest.fn().mockResolvedValue([{
      id: 1,
      imageUrl: 'https://example.com/1.jpg',
      content: '좋은 하루',
      createdAt: '2025-05-03'
    }, {
      id: 2,
      imageUrl: 'https://example.com/2.jpg',
      content: '힘든 하루',
      createdAt: '2025-05-02'
    }, {
      id: 3,
      imageUrl: 'https://example.com/3.jpg',
      content: '평범한 하루',
      createdAt: '2025-05-01'
    }, {
      id: 4,
      imageUrl: 'https://example.com/4.jpg',
      content: '즐거운 하루',
      createdAt: '2025-04-30'
    }, {
      id: 5,
      imageUrl: 'https://example.com/5.jpg',
      content: '지친 하루',
      createdAt: '2025-04-29'
    }, {
      id: 6,
      imageUrl: 'https://example.com/6.jpg',
      content: '특별한 하루',
      createdAt: '2025-04-28'
    }])
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    })
  };
});
_getJestObj().mock("../../../src/screens/ReviewScreen", function () {
  return {
    default: function MockReviewScreen() {
      return null;
    },
    useReviewScreenLogic: function useReviewScreenLogic() {
      return {
        loadData: function loadData(period) {
          var postApi = require("../../../src/api/postApi");
          var emotionApi = require("../../../src/api/emotionApi");
          postApi.getUserPosts({
            period: period,
            limit: 20
          });
          emotionApi.getEmotionStats({
            period: period
          });
          return Promise.resolve();
        }
      };
    },
    useReviewScreenErrorHandling: function useReviewScreenErrorHandling() {
      return {
        handleError: function handleError(error, setError, setLoading) {
          setError(error.message);
          setLoading(false);
        }
      };
    },
    useReviewScreenNavigation: function useReviewScreenNavigation() {
      return {
        navigateToGraph: function navigateToGraph(data) {
          var navigation = require('@react-navigation/native').useNavigation();
          navigation.navigate('EmotionGraph', data);
        },
        navigateToPostDetail: function navigateToPostDetail(postId) {
          var navigation = require('@react-navigation/native').useNavigation();
          navigation.navigate('PostDetail', {
            postId: postId
          });
        }
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 통합 테스트', function () {
  it('API 호출이 올바르게 이루어져야 함', function () {
    var emotionApi = require("../../../src/api/emotionApi");
    var postApi = require("../../../src/api/postApi");
    var emotionStatsSpy = jest.spyOn(emotionApi, 'getEmotionStats');
    var userPostsSpy = jest.spyOn(postApi, 'getUserPosts');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    expect(emotionStatsSpy).toHaveBeenCalled();
    expect(userPostsSpy).toHaveBeenCalled();
    expect(userPostsSpy).toHaveBeenCalledWith({
      period: 'weekly',
      limit: expect.any(Number)
    });
  });
  it('월간/주간 변경 시 API가 올바른 인자와 함께 다시 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _require$useReviewScr = require("../../../src/screens/ReviewScreen").useReviewScreenLogic(),
      loadData = _require$useReviewScr.loadData;
    var postApi = require("../../../src/api/postApi");
    var userPostsSpy = jest.spyOn(postApi, 'getUserPosts');
    loadData('weekly');
    expect(userPostsSpy).toHaveBeenLastCalledWith({
      period: 'weekly',
      limit: expect.any(Number)
    });
    loadData('monthly');
    expect(userPostsSpy).toHaveBeenLastCalledWith({
      period: 'monthly',
      limit: expect.any(Number)
    });
  }));
  it('에러 상황이 올바르게 처리되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var postApi = require("../../../src/api/postApi");
    postApi.getUserPosts.mockRejectedValueOnce(new Error('데이터를 불러올 수 없습니다.'));
    var _require$useReviewScr2 = require("../../../src/screens/ReviewScreen").useReviewScreenErrorHandling(),
      handleError = _require$useReviewScr2.handleError;
    var setErrorMock = jest.fn();
    var setLoadingMock = jest.fn();
    yield handleError(new Error('데이터를 불러올 수 없습니다.'), setErrorMock, setLoadingMock);
    expect(setErrorMock).toHaveBeenCalledWith('데이터를 불러올 수 없습니다.');
    expect(setLoadingMock).toHaveBeenCalledWith(false);
  }));
  it('네비게이션 기능이 올바르게 동작해야 함', function () {
    var navigation = require('@react-navigation/native').useNavigation();
    var _require$useReviewScr3 = require("../../../src/screens/ReviewScreen").useReviewScreenNavigation(),
      navigateToGraph = _require$useReviewScr3.navigateToGraph,
      navigateToPostDetail = _require$useReviewScr3.navigateToPostDetail;
    navigateToGraph({
      emotionData: []
    });
    expect(navigation.navigate).toHaveBeenCalledWith('EmotionGraph', {
      emotionData: []
    });
    navigateToPostDetail(5);
    expect(navigation.navigate).toHaveBeenCalledWith('PostDetail', {
      postId: 5
    });
  });
  it('정상적인 데이터 로드 및 렌더링 시나리오 테스트', function () {
    var _require = require('react'),
      useState = _require.useState,
      useEffect = _require.useEffect;
    jest.spyOn(useState, 'useEffect').mockImplementation(function (callback) {
      callback();
      return function () {};
    });
    var setDataMock = jest.fn();
    var setLoadingMock = jest.fn();
    var setErrorMock = jest.fn();
    jest.spyOn(useState, 'useState').mockImplementationOnce(function () {
      return ['weekly', jest.fn()];
    }).mockImplementationOnce(function () {
      return [[], setDataMock];
    }).mockImplementationOnce(function () {
      return [true, setLoadingMock];
    }).mockImplementationOnce(function () {
      return [null, setErrorMock];
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    expect(setLoadingMock).toHaveBeenCalledWith(false);
    expect(setDataMock).toHaveBeenCalled();
    expect(setErrorMock).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,