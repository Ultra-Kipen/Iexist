{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_EmotionSelector","_jsxRuntime","mockEmotions","id","name","icon","color","describe","it","_render","render","jsx","default","emotions","selectedEmotions","onSelect","jest","fn","getByText","expect","toBeTruthy","_render2","selectedEmotionName","mockOnSelect","_render3","fireEvent","press","toHaveBeenCalledWith","_render4","multiple"],"sources":["EmotionSelector.test.tsx"],"sourcesContent":["// __TESTS__/components/EmotionSelector.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport EmotionSelector from '../../src/components/EmotionSelector';\r\n\r\nconst mockEmotions = [\r\n  { id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n  { id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' },\r\n  { id: 3, name: '위로', icon: 'hand-peace', color: '#87CEEB' }\r\n];\r\n\r\ndescribe('EmotionSelector 컴포넌트', () => {\r\n  it('감정 목록이 올바르게 렌더링되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[]}\r\n        onSelect={jest.fn()}\r\n      />\r\n    );\r\n    \r\n    expect(getByText('행복')).toBeTruthy();\r\n    expect(getByText('감사')).toBeTruthy();\r\n    expect(getByText('위로')).toBeTruthy();\r\n  });\r\n\r\n  it('선택된 감정은 시각적으로 구분되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[1]}\r\n        onSelect={jest.fn()}\r\n      />\r\n    );\r\n    \r\n    const selectedEmotionName = getByText('행복');\r\n    expect(selectedEmotionName).toBeTruthy();\r\n    // 스타일 체크는 구현 세부 사항에 따라 적절히 조정 필요\r\n  });\r\n\r\n  it('감정을 클릭하면 onSelect 콜백이 호출되어야 합니다', () => {\r\n    const mockOnSelect = jest.fn();\r\n    const { getByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[]}\r\n        onSelect={mockOnSelect}\r\n      />\r\n    );\r\n    \r\n    fireEvent.press(getByText('행복'));\r\n    expect(mockOnSelect).toHaveBeenCalledWith(1);\r\n  });\r\n\r\n  it('multiple=false일 경우 한 번에 하나의 감정만 선택 가능해야 합니다', () => {\r\n    const mockOnSelect = jest.fn();\r\n    const { getByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[1]}\r\n        onSelect={mockOnSelect}\r\n        multiple={false}\r\n      />\r\n    );\r\n    \r\n    fireEvent.press(getByText('감사'));\r\n    expect(mockOnSelect).toHaveBeenCalledWith(2);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}