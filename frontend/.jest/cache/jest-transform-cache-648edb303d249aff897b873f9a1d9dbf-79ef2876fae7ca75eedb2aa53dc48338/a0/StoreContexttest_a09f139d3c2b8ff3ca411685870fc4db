1d77c0f459434f0adebe9f8f90fc05ef
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _StoreContext = require("../../src/store/StoreContext");
var _reducer = require("../../src/store/reducer");
var _types = require("../../src/store/types");
var _jsxRuntime = require("react/jsx-runtime");
var TestComponent = function TestComponent() {
  var _useStore = (0, _StoreContext.useStore)(),
    state = _useStore.state,
    dispatch = _useStore.dispatch;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "auth-status",
      children: state.isAuthenticated ? 'authenticated' : 'not-authenticated'
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      onPress: function onPress() {
        return dispatch({
          type: _types.ActionType.SET_AUTHENTICATED,
          payload: !state.isAuthenticated
        });
      },
      testID: "toggle-auth",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "Toggle Auth"
      })
    })]
  });
};
describe('StoreContext', function () {
  test('StoreProvider는 상태와 디스패치 함수를 제공한다', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StoreContext.StoreProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('auth-status').props.children).toBe('not-authenticated');
    _reactNative.fireEvent.press(getByTestId('toggle-auth'));
    expect(getByTestId('auth-status').props.children).toBe('authenticated');
  });
  test('초기 상태가 올바르게 설정된다', function () {
    var StateCheckComponent = function StateCheckComponent() {
      var _useStore2 = (0, _StoreContext.useStore)(),
        state = _useStore2.state;
      return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "is-authenticated",
          children: String(state.isAuthenticated)
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "user",
          children: state.user === null ? 'null' : 'user'
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "notifications-count",
          children: String(state.notifications.length)
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "theme",
          children: state.theme
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "loading",
          children: String(state.loading)
        }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "error",
          children: state.error === null ? 'null' : state.error
        })]
      });
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_StoreContext.StoreProvider, {
        children: (0, _jsxRuntime.jsx)(StateCheckComponent, {})
      })),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('is-authenticated').props.children).toBe(String(_reducer.initialState.isAuthenticated));
    expect(getByTestId('user').props.children).toBe('null');
    expect(getByTestId('notifications-count').props.children).toBe('0');
    expect(getByTestId('theme').props.children).toBe(_reducer.initialState.theme);
    expect(getByTestId('loading').props.children).toBe(String(_reducer.initialState.loading));
    expect(getByTestId('error').props.children).toBe('null');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,