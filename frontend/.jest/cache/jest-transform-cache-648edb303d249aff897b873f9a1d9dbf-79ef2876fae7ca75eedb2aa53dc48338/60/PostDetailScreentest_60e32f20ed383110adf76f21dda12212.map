{"version":3,"names":["_getJestObj","mock","useNavigation","navigate","jest","fn","goBack","useRoute","params","postId","getPostById","getComments","likePost","addComment","rn","requireActual","ScrollView","_ref","children","ref","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_PostDetailScreen","_postService","_reactNative2","_jsxRuntime","_require","mockPost","post_id","user_id","username","nickname","content","emotion_summary","image_url","emotions","emotion_id","name","color","is_anonymous","like_count","comment_count","is_liked","created_at","Date","toISOString","mockComments","comment_id","spyOn","Alert","mockImplementation","describe","beforeEach","clearAllMocks","it","default","postService","Promise","render","jsx","waitFor","expect","toHaveBeenCalledWith","timeout","mockResolvedValue","data","mockRejectedValue","Error"],"sources":["PostDetailScreen.test.tsx"],"sourcesContent":["// __tests__/screens/PostDetailScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport PostDetailScreen from '../../src/screens/PostDetailScreen';\r\nimport postService from '../../src/services/api/postService';\r\nimport { Alert } from 'react-native';\r\n\r\n// 모의 데이터\r\nconst mockPost = {\r\n  post_id: 1,\r\n  user_id: 101,\r\n  username: 'testuser',\r\n  nickname: '테스트유저',\r\n  content: '테스트 게시물 내용입니다.',\r\n  emotion_summary: '행복',\r\n  image_url: null,\r\n  emotions: [\r\n    { emotion_id: 1, name: '행복', color: '#FFD700' }\r\n  ],\r\n  is_anonymous: false,\r\n  like_count: 5,\r\n  comment_count: 2,\r\n  is_liked: false,\r\n  created_at: new Date().toISOString(),\r\n};\r\n\r\nconst mockComments = [\r\n  {\r\n    comment_id: 1,\r\n    user_id: 102,\r\n    username: 'commenter',\r\n    nickname: '댓글작성자',\r\n    content: '좋은 글이네요!',\r\n    is_anonymous: false,\r\n    created_at: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n  }),\r\n  useRoute: () => ({\r\n    params: { postId: 1 },\r\n  }),\r\n}));\r\n\r\n// postService 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getPostById: jest.fn(),\r\n  getComments: jest.fn(),\r\n  likePost: jest.fn(),\r\n  addComment: jest.fn()\r\n}));\r\n\r\n// 컴포넌트 모킹 - 문자열로 단순화\r\njest.mock('../../src/components/LoadingIndicator', () => 'LoadingIndicator');\r\njest.mock('../../src/components/ProfileAvatar', () => 'ProfileAvatar');\r\njest.mock('../../src/components/CommentItem', () => 'CommentItem');\r\njest.mock('../../src/components/Button', () => 'Button');\r\n\r\n// ScrollView 모킹\r\njest.mock('react-native', () => {\r\n  const rn = jest.requireActual('react-native');\r\n  rn.ScrollView = ({ children, ref }) => children;\r\n  return rn;\r\n});\r\n\r\n// Alert 모킹\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\ndescribe('PostDetailScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders loading state initially', async () => {\r\n    // 로딩 상태를 유지하기 위해 해결되지 않는 Promise 사용\r\n    (postService.getPostById as jest.Mock).mockImplementation(() => \r\n      new Promise(() => {}) // 영원히 해결되지 않는 Promise\r\n    );\r\n    \r\n    (postService.getComments as jest.Mock).mockImplementation(() => \r\n      new Promise(() => {})\r\n    );\r\n    \r\n    render(<PostDetailScreen />);\r\n    \r\n    // API가 호출되었는지 확인\r\n    await waitFor(() => {\r\n      expect(postService.getPostById).toHaveBeenCalledWith(1);\r\n    }, { timeout: 1000 });\r\n  });\r\n\r\n  it('renders post data successfully', async () => {\r\n    // 데이터 로딩 성공 모킹\r\n    (postService.getPostById as jest.Mock).mockResolvedValue({\r\n      data: { data: mockPost }\r\n    });\r\n    \r\n    (postService.getComments as jest.Mock).mockResolvedValue({\r\n      data: { data: mockComments }\r\n    });\r\n    \r\n    render(<PostDetailScreen />);\r\n    \r\n    // API 호출 확인 - waitFor 사용\r\n    await waitFor(() => {\r\n      expect(postService.getPostById).toHaveBeenCalledWith(1);\r\n    }, { timeout: 1000 });\r\n\r\n    await waitFor(() => {\r\n      expect(postService.getComments).toHaveBeenCalledWith(1);\r\n    }, { timeout: 1000 });\r\n  });\r\n\r\n  it('handles error state properly', async () => {\r\n    // 에러 상태 모킹\r\n    (postService.getPostById as jest.Mock).mockRejectedValue(new Error('API 오류'));\r\n    \r\n    render(<PostDetailScreen />);\r\n    \r\n    // API 호출 확인 - waitFor 사용\r\n    await waitFor(() => {\r\n      expect(postService.getPostById).toHaveBeenCalledWith(1);\r\n    }, { timeout: 1000 });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}