{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","useColorScheme","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ThemeContext","_asyncStorage","_reactNative2","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","mockReturnValue","it","default","AsyncStorage","mockResolvedValue","result","Promise","resolve","TestComponent","_useTheme","useTheme","theme","isDarkMode","React","useEffect","render","jsx","ThemeProvider","children","expect","toBe","_useTheme2"],"sources":["ThemeContext.test.tsx"],"sourcesContent":["// __tests__/contexts/ThemeContext.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { ThemeProvider, useTheme } from '../../src/contexts/ThemeContext';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useColorScheme } from 'react-native';\r\n\r\n// AsyncStorage 모킹\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n}));\r\n\r\n// useColorScheme 모킹\r\njest.mock('react-native', () => ({\r\n  useColorScheme: jest.fn(),\r\n}));\r\n\r\ndescribe('ThemeContext', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // 초기 시스템 테마를 light로 설정\r\n    (useColorScheme as jest.Mock).mockReturnValue('light');\r\n  });\r\n\r\n  it('이전에 저장된 테마를 불러온다', async () => {\r\n    // 테마가 'dark'로 저장됨\r\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue('dark');\r\n    \r\n    // 시스템 테마를 light로 유지\r\n    (useColorScheme as jest.Mock).mockReturnValue('light');\r\n    \r\n    const result = await new Promise<{ theme: string; isDarkMode: boolean }>((resolve) => {\r\n      const TestComponent = () => {\r\n        const { theme, isDarkMode } = useTheme();\r\n        \r\n        React.useEffect(() => {\r\n          // 테마가 system이 아니고 로딩이 완료되었을 때 resolve\r\n          if (theme !== 'system') {\r\n            resolve({ theme, isDarkMode });\r\n          }\r\n        }, [theme, isDarkMode]);\r\n        \r\n        return null;\r\n      };\r\n\r\n      render(\r\n        <ThemeProvider>\r\n          <TestComponent />\r\n        </ThemeProvider>\r\n      );\r\n    });\r\n\r\n    // 검증\r\n    expect(result.theme).toBe('dark');\r\n    expect(result.isDarkMode).toBe(true);\r\n  });\r\n\r\n  it('시스템 테마가 변경되면 \"system\" 모드일 때 isDarkMode가 업데이트된다', async () => {\r\n    // 저장된 테마를 system으로 설정\r\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue('system');\r\n    \r\n    // 초기 시스템 테마는 light\r\n    (useColorScheme as jest.Mock).mockReturnValue('light');\r\n    \r\n    const result = await new Promise<{ theme: string; isDarkMode: boolean }>((resolve) => {\r\n      const TestComponent = () => {\r\n        const { theme, isDarkMode } = useTheme();\r\n        \r\n        React.useEffect(() => {\r\n          // 테마가 system이고 로딩이 완료되었을 때 resolve\r\n          if (theme === 'system') {\r\n            resolve({ theme, isDarkMode });\r\n          }\r\n        }, [theme, isDarkMode]);\r\n        \r\n        return null;\r\n      };\r\n\r\n      render(\r\n        <ThemeProvider>\r\n          <TestComponent />\r\n        </ThemeProvider>\r\n      );\r\n    });\r\n\r\n    // 검증\r\n    expect(result.theme).toBe('system');\r\n    expect(result.isDarkMode).toBe(false);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}