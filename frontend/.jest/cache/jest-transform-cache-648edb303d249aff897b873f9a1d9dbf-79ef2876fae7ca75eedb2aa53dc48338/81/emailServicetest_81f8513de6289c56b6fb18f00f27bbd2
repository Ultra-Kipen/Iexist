9bd302bd21c049e188a2d5edc81f8ddc
_getJestObj().mock("../../../../src/services/api/client");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _emailService = _interopRequireDefault(require("../../../../src/services/api/emailService"));
var _client = _interopRequireDefault(require("../../../../src/services/api/client"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockedClient = _client.default;
describe('emailService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('requestPasswordReset', function () {
    it('비밀번호 재설정 요청에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var email = 'test@example.com';
      var mockResponse = {
        data: {
          message: '비밀번호 재설정 링크 발송'
        }
      };
      mockedClient.post.mockResolvedValue(mockResponse);
      var result = yield _emailService.default.requestPasswordReset(email);
      expect(mockedClient.post).toHaveBeenCalledWith('/auth/forgot-password', {
        email: email
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('resetPassword', function () {
    it('비밀번호 재설정에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var token = 'reset_token_123';
      var newPassword = 'newStrongPassword123!';
      var mockResponse = {
        data: {
          message: '비밀번호 재설정 완료'
        }
      };
      mockedClient.post.mockResolvedValue(mockResponse);
      var result = yield _emailService.default.resetPassword(token, newPassword);
      expect(mockedClient.post).toHaveBeenCalledWith('/auth/reset-password', {
        token: token,
        new_password: newPassword
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('requestVerificationCode', function () {
    it('이메일 확인 코드 요청에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var email = 'test@example.com';
      var mockResponse = {
        data: {
          message: '인증 코드 발송'
        }
      };
      mockedClient.post.mockResolvedValue(mockResponse);
      var result = yield _emailService.default.requestVerificationCode(email);
      expect(mockedClient.post).toHaveBeenCalledWith('/auth/request-verification', {
        email: email
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('verifyCode', function () {
    it('이메일 확인 코드 검증에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var email = 'test@example.com';
      var code = '123456';
      var mockResponse = {
        data: {
          message: '이메일 인증 성공'
        }
      };
      mockedClient.post.mockResolvedValue(mockResponse);
      var result = yield _emailService.default.verifyCode(email, code);
      expect(mockedClient.post).toHaveBeenCalledWith('/auth/verify-email', {
        email: email,
        code: code
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('sendContactRequest', function () {
    it('연락 요청 전송에 성공해야 함', (0, _asyncToGenerator2.default)(function* () {
      var name = '김테스트';
      var email = 'test@example.com';
      var subject = '문의사항';
      var message = '도움이 필요합니다.';
      var mockResponse = {
        data: {
          message: '문의 접수 완료'
        }
      };
      mockedClient.post.mockResolvedValue(mockResponse);
      var result = yield _emailService.default.sendContactRequest(name, email, subject, message);
      expect(mockedClient.post).toHaveBeenCalledWith('/contact', {
        name: name,
        email: email,
        subject: subject,
        message: message
      });
      expect(result).toEqual(mockResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,