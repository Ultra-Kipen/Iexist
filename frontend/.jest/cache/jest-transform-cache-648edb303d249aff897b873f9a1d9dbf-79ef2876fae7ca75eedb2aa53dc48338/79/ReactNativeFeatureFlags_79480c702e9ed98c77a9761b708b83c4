bd7e24de9807a801a1128f4abacc3350
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTurboModules = exports.useTurboModuleInterop = exports.useRuntimeShadowNodeReferenceUpdate = exports.useRefsForTextInputState = exports.useRawPropsJsiValue = exports.useOptimizedEventBatchingOnAndroid = exports.useOptimisedViewPreallocationOnAndroid = exports.useNativeViewConfigsInBridgelessMode = exports.useInsertionEffectsForAnimations = exports.useImmediateExecutorInAndroidBridgeless = exports.useFabricInterop = exports.useAlwaysAvailableJSErrorHandling = exports.traceTurboModulePromiseRejectionsOnAndroid = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.shouldSkipStateUpdatesForLoopingAnimations = exports.override = exports.loadVectorDrawablesOnImages = exports.lazyAnimationCallbacks = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.initEagerTurboModulesOnNativeModulesQueueAndroid = exports.fuseboxEnabledRelease = exports.fixVirtualizeListCollapseWindowSize = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixDifferentiatorEmittingUpdatesWithWrongParentTag = exports.excludeYogaFromRawProps = exports.enableViewRecycling = exports.enableUIConsistency = exports.enableSynchronousStateUpdates = exports.enableReportEventPaintTime = exports.enablePropsUpdateReconciliationAndroid = exports.enablePreciseSchedulingForPremountItemsOnAndroid = exports.enableNewBackgroundAndBorderDrawables = exports.enableLongTaskAPI = exports.enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnAndroid = exports.enableImagePrefetchingAndroid = exports.enableIOSViewClipToPaddingBox = exports.enableGranularShadowTreeStateReconciliation = exports.enableFixForViewCommandRace = exports.enableFabricRenderer = exports.enableFabricLogs = exports.enableEventEmitterRetentionDuringGesturesOnAndroid = exports.enableEagerRootViewAttachment = exports.enableDeletionOfUnmountedViews = exports.enableCppPropsIteratorSetter = exports.enableBridgelessArchitecture = exports.enableAnimatedPropsMemo = exports.enableAnimatedClearImmediateFix = exports.enableAnimatedAllowlist = exports.enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccessToHostTreeInFabric = exports.disableMountItemReorderingAndroid = exports.disableInteractionManagerInBatchinator = exports.disableInteractionManager = exports.disableEventLoopOnBridgeless = exports.completeReactInstanceCreationOnBgThreadOnAndroid = exports.commonTestFlagWithoutNativeImplementation = exports.commonTestFlag = exports.animatedShouldUseSingleOp = exports.animatedShouldDebounceQueueFlush = void 0;
var _ReactNativeFeatureFlagsBase = require("./ReactNativeFeatureFlagsBase");
var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var disableInteractionManager = exports.disableInteractionManager = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManager', false);
var disableInteractionManagerInBatchinator = exports.disableInteractionManagerInBatchinator = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('disableInteractionManagerInBatchinator', false);
var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var enableAnimatedAllowlist = exports.enableAnimatedAllowlist = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedAllowlist', true);
var enableAnimatedClearImmediateFix = exports.enableAnimatedClearImmediateFix = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedClearImmediateFix', true);
var enableAnimatedPropsMemo = exports.enableAnimatedPropsMemo = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAnimatedPropsMemo', true);
var fixVirtualizeListCollapseWindowSize = exports.fixVirtualizeListCollapseWindowSize = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('fixVirtualizeListCollapseWindowSize', false);
var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var shouldSkipStateUpdatesForLoopingAnimations = exports.shouldSkipStateUpdatesForLoopingAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldSkipStateUpdatesForLoopingAnimations', true);
var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var useInsertionEffectsForAnimations = exports.useInsertionEffectsForAnimations = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useInsertionEffectsForAnimations', true);
var useRefsForTextInputState = exports.useRefsForTextInputState = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('useRefsForTextInputState', false);
var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var commonTestFlagWithoutNativeImplementation = exports.commonTestFlagWithoutNativeImplementation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlagWithoutNativeImplementation', false);
var completeReactInstanceCreationOnBgThreadOnAndroid = exports.completeReactInstanceCreationOnBgThreadOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('completeReactInstanceCreationOnBgThreadOnAndroid', true);
var disableEventLoopOnBridgeless = exports.disableEventLoopOnBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableEventLoopOnBridgeless', false);
var disableMountItemReorderingAndroid = exports.disableMountItemReorderingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('disableMountItemReorderingAndroid', false);
var enableAccumulatedUpdatesInRawPropsAndroid = exports.enableAccumulatedUpdatesInRawPropsAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableAccumulatedUpdatesInRawPropsAndroid', false);
var enableBridgelessArchitecture = exports.enableBridgelessArchitecture = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBridgelessArchitecture', false);
var enableCppPropsIteratorSetter = exports.enableCppPropsIteratorSetter = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCppPropsIteratorSetter', false);
var enableDeletionOfUnmountedViews = exports.enableDeletionOfUnmountedViews = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableDeletionOfUnmountedViews', false);
var enableEagerRootViewAttachment = exports.enableEagerRootViewAttachment = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEagerRootViewAttachment', false);
var enableEventEmitterRetentionDuringGesturesOnAndroid = exports.enableEventEmitterRetentionDuringGesturesOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableEventEmitterRetentionDuringGesturesOnAndroid', false);
var enableFabricLogs = exports.enableFabricLogs = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricLogs', false);
var enableFabricRenderer = exports.enableFabricRenderer = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFabricRenderer', false);
var enableFixForViewCommandRace = exports.enableFixForViewCommandRace = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFixForViewCommandRace', false);
var enableGranularShadowTreeStateReconciliation = exports.enableGranularShadowTreeStateReconciliation = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableGranularShadowTreeStateReconciliation', false);
var enableIOSViewClipToPaddingBox = exports.enableIOSViewClipToPaddingBox = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableIOSViewClipToPaddingBox', false);
var enableImagePrefetchingAndroid = exports.enableImagePrefetchingAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableImagePrefetchingAndroid', false);
var enableLayoutAnimationsOnAndroid = exports.enableLayoutAnimationsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnAndroid', false);
var enableLayoutAnimationsOnIOS = exports.enableLayoutAnimationsOnIOS = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLayoutAnimationsOnIOS', true);
var enableLongTaskAPI = exports.enableLongTaskAPI = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableLongTaskAPI', false);
var enableNewBackgroundAndBorderDrawables = exports.enableNewBackgroundAndBorderDrawables = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableNewBackgroundAndBorderDrawables', false);
var enablePreciseSchedulingForPremountItemsOnAndroid = exports.enablePreciseSchedulingForPremountItemsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePreciseSchedulingForPremountItemsOnAndroid', false);
var enablePropsUpdateReconciliationAndroid = exports.enablePropsUpdateReconciliationAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enablePropsUpdateReconciliationAndroid', false);
var enableReportEventPaintTime = exports.enableReportEventPaintTime = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableReportEventPaintTime', false);
var enableSynchronousStateUpdates = exports.enableSynchronousStateUpdates = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSynchronousStateUpdates', false);
var enableUIConsistency = exports.enableUIConsistency = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableUIConsistency', false);
var enableViewRecycling = exports.enableViewRecycling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableViewRecycling', false);
var excludeYogaFromRawProps = exports.excludeYogaFromRawProps = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('excludeYogaFromRawProps', false);
var fixDifferentiatorEmittingUpdatesWithWrongParentTag = exports.fixDifferentiatorEmittingUpdatesWithWrongParentTag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);
var fixMappingOfEventPrioritiesBetweenFabricAndReact = exports.fixMappingOfEventPrioritiesBetweenFabricAndReact = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);
var fixMountingCoordinatorReportedPendingTransactionsOnAndroid = exports.fixMountingCoordinatorReportedPendingTransactionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);
var fuseboxEnabledRelease = exports.fuseboxEnabledRelease = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('fuseboxEnabledRelease', false);
var initEagerTurboModulesOnNativeModulesQueueAndroid = exports.initEagerTurboModulesOnNativeModulesQueueAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('initEagerTurboModulesOnNativeModulesQueueAndroid', true);
var lazyAnimationCallbacks = exports.lazyAnimationCallbacks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('lazyAnimationCallbacks', false);
var loadVectorDrawablesOnImages = exports.loadVectorDrawablesOnImages = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('loadVectorDrawablesOnImages', true);
var traceTurboModulePromiseRejectionsOnAndroid = exports.traceTurboModulePromiseRejectionsOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('traceTurboModulePromiseRejectionsOnAndroid', false);
var useAlwaysAvailableJSErrorHandling = exports.useAlwaysAvailableJSErrorHandling = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useAlwaysAvailableJSErrorHandling', false);
var useFabricInterop = exports.useFabricInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useFabricInterop', false);
var useImmediateExecutorInAndroidBridgeless = exports.useImmediateExecutorInAndroidBridgeless = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useImmediateExecutorInAndroidBridgeless', true);
var useNativeViewConfigsInBridgelessMode = exports.useNativeViewConfigsInBridgelessMode = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useNativeViewConfigsInBridgelessMode', false);
var useOptimisedViewPreallocationOnAndroid = exports.useOptimisedViewPreallocationOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimisedViewPreallocationOnAndroid', false);
var useOptimizedEventBatchingOnAndroid = exports.useOptimizedEventBatchingOnAndroid = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useOptimizedEventBatchingOnAndroid', false);
var useRawPropsJsiValue = exports.useRawPropsJsiValue = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRawPropsJsiValue', false);
var useRuntimeShadowNodeReferenceUpdate = exports.useRuntimeShadowNodeReferenceUpdate = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useRuntimeShadowNodeReferenceUpdate', true);
var useTurboModuleInterop = exports.useTurboModuleInterop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModuleInterop', false);
var useTurboModules = exports.useTurboModules = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useTurboModules', false);
var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,