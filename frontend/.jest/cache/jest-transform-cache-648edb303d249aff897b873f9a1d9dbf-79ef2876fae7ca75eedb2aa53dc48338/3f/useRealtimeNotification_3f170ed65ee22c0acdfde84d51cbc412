57ee2e70c9582054465f6a512a52b47f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRealtimeNotification = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _socketService = _interopRequireDefault(require("../services/socketService"));
var _NotificationContext = require("../contexts/NotificationContext");
var useRealtimeNotification = exports.useRealtimeNotification = function useRealtimeNotification() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref$autoConnect = _ref.autoConnect,
    autoConnect = _ref$autoConnect === void 0 ? true : _ref$autoConnect,
    onNewNotification = _ref.onNewNotification;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isConnected = _useState2[0],
    setIsConnected = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    error = _useState6[0],
    setError = _useState6[1];
  var notificationContext = (0, _NotificationContext.useNotification)();
  var fetchNotifications = notificationContext.fetchNotifications;
  var connect = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setIsLoading(true);
      setError(null);
      yield _socketService.default.init();
      setIsConnected(_socketService.default.isConnected());
      setIsLoading(false);
    } catch (err) {
      setError(err instanceof Error ? err.message : '연결 중 오류가 발생했습니다.');
      setIsLoading(false);
      console.error('Socket connection error:', err);
    }
  }), []);
  var disconnect = (0, _react.useCallback)(function () {
    _socketService.default.disconnect();
    setIsConnected(false);
  }, []);
  var handleNewNotification = (0, _react.useCallback)(function (notification) {
    fetchNotifications();
    if (onNewNotification) {
      onNewNotification(notification);
    }
  }, [fetchNotifications, onNewNotification]);
  var handleUnreadCountUpdate = (0, _react.useCallback)(function (data) {
    if (notificationContext && 'setUnreadCount' in notificationContext) {
      notificationContext.setUnreadCount(data.count);
    }
  }, [notificationContext]);
  var markAsRead = (0, _react.useCallback)(function (notificationId) {
    if (isConnected) {
      _socketService.default.emit('mark_notification_read', {
        notification_id: notificationId
      });
    }
  }, [isConnected]);
  var markAllAsRead = (0, _react.useCallback)(function () {
    if (isConnected) {
      _socketService.default.emit('mark_all_notifications_read');
    }
  }, [isConnected]);
  (0, _react.useEffect)(function () {
    _socketService.default.on('connect', function () {
      return setIsConnected(true);
    });
    _socketService.default.on('disconnect', function () {
      return setIsConnected(false);
    });
    _socketService.default.on('new_notification', handleNewNotification);
    _socketService.default.on('unread_notifications_count', handleUnreadCountUpdate);
    if (autoConnect && !_socketService.default.isConnected()) {
      connect();
    }
    return function () {
      _socketService.default.off('connect');
      _socketService.default.off('disconnect');
      _socketService.default.off('new_notification', handleNewNotification);
      _socketService.default.off('unread_notifications_count', handleUnreadCountUpdate);
    };
  }, [autoConnect, connect, handleNewNotification, handleUnreadCountUpdate]);
  return {
    isConnected: isConnected,
    isLoading: isLoading,
    error: error,
    connect: connect,
    disconnect: disconnect,
    markAsRead: markAsRead,
    markAllAsRead: markAllAsRead
  };
};
var _default = exports.default = useRealtimeNotification;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX3NvY2tldFNlcnZpY2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX05vdGlmaWNhdGlvbkNvbnRleHQiLCJ1c2VSZWFsdGltZU5vdGlmaWNhdGlvbiIsImV4cG9ydHMiLCJfcmVmIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX3JlZiRhdXRvQ29ubmVjdCIsImF1dG9Db25uZWN0Iiwib25OZXdOb3RpZmljYXRpb24iLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwiaXNDb25uZWN0ZWQiLCJzZXRJc0Nvbm5lY3RlZCIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJlcnJvciIsInNldEVycm9yIiwibm90aWZpY2F0aW9uQ29udGV4dCIsInVzZU5vdGlmaWNhdGlvbiIsImZldGNoTm90aWZpY2F0aW9ucyIsImNvbm5lY3QiLCJ1c2VDYWxsYmFjayIsIl9hc3luY1RvR2VuZXJhdG9yMiIsInNvY2tldFNlcnZpY2UiLCJpbml0IiwiZXJyIiwiRXJyb3IiLCJtZXNzYWdlIiwiY29uc29sZSIsImRpc2Nvbm5lY3QiLCJoYW5kbGVOZXdOb3RpZmljYXRpb24iLCJub3RpZmljYXRpb24iLCJoYW5kbGVVbnJlYWRDb3VudFVwZGF0ZSIsImRhdGEiLCJzZXRVbnJlYWRDb3VudCIsImNvdW50IiwibWFya0FzUmVhZCIsIm5vdGlmaWNhdGlvbklkIiwiZW1pdCIsIm5vdGlmaWNhdGlvbl9pZCIsIm1hcmtBbGxBc1JlYWQiLCJ1c2VFZmZlY3QiLCJvbiIsIm9mZiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsidXNlUmVhbHRpbWVOb3RpZmljYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaG9va3MvdXNlUmVhbHRpbWVOb3RpZmljYXRpb24udHNcclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBzb2NrZXRTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UnO1xyXG5pbXBvcnQgeyB1c2VOb3RpZmljYXRpb24gfSBmcm9tICcuLi9jb250ZXh0cy9Ob3RpZmljYXRpb25Db250ZXh0JztcclxuXHJcbmludGVyZmFjZSBOb3RpZmljYXRpb24ge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgY29udGVudDogc3RyaW5nO1xyXG4gIG5vdGlmaWNhdGlvbl90eXBlOiAnbGlrZScgfCAnY29tbWVudCcgfCAnY2hhbGxlbmdlJyB8ICdzeXN0ZW0nO1xyXG4gIHJlbGF0ZWRfaWQ/OiBudW1iZXI7XHJcbiAgaXNfcmVhZDogYm9vbGVhbjtcclxuICBjcmVhdGVkX2F0OiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBVc2VSZWFsdGltZU5vdGlmaWNhdGlvblByb3BzIHtcclxuICBhdXRvQ29ubmVjdD86IGJvb2xlYW47XHJcbiAgb25OZXdOb3RpZmljYXRpb24/OiAobm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb24pID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDsi6Tsi5zqsIQg7JWM66a87J2EIOq0gOumrO2VmOuKlCDtm4VcclxuICovXHJcbmV4cG9ydCBjb25zdCB1c2VSZWFsdGltZU5vdGlmaWNhdGlvbiA9ICh7XHJcbiAgYXV0b0Nvbm5lY3QgPSB0cnVlLFxyXG4gIG9uTmV3Tm90aWZpY2F0aW9uXHJcbn06IFVzZVJlYWx0aW1lTm90aWZpY2F0aW9uUHJvcHMgPSB7fSkgPT4ge1xyXG4gIGNvbnN0IFtpc0Nvbm5lY3RlZCwgc2V0SXNDb25uZWN0ZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xyXG4gIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XHJcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcclxuICBcclxuICAvLyBOb3RpZmljYXRpb25Db250ZXh07JeQ7IScIOq4sOyhtCDslYzrprwg6rSA66CoIO2VqOyImCDqsIDsoLjsmKTquLBcclxuICBjb25zdCBub3RpZmljYXRpb25Db250ZXh0ID0gdXNlTm90aWZpY2F0aW9uKCk7XHJcbiAgY29uc3QgeyBmZXRjaE5vdGlmaWNhdGlvbnMgfSA9IG5vdGlmaWNhdGlvbkNvbnRleHQ7XHJcbiAgXHJcbiAgLy8g7IaM7LyTIOyXsOqysFxyXG4gIGNvbnN0IGNvbm5lY3QgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XHJcbiAgICAgIHNldEVycm9yKG51bGwpO1xyXG4gICAgICBhd2FpdCBzb2NrZXRTZXJ2aWNlLmluaXQoKTtcclxuICAgICAgc2V0SXNDb25uZWN0ZWQoc29ja2V0U2VydmljZS5pc0Nvbm5lY3RlZCgpKTtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBzZXRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogJ+yXsOqysCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nKTtcclxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgY29uc29sZS5lcnJvcignU29ja2V0IGNvbm5lY3Rpb24gZXJyb3I6JywgZXJyKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIOyXsOqysCDtlbTsoJxcclxuICBjb25zdCBkaXNjb25uZWN0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgc29ja2V0U2VydmljZS5kaXNjb25uZWN0KCk7XHJcbiAgICBzZXRJc0Nvbm5lY3RlZChmYWxzZSk7XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyDsg4gg7JWM66a8IOydtOuypO2KuCDtlbjrk6Trn6xcclxuICBjb25zdCBoYW5kbGVOZXdOb3RpZmljYXRpb24gPSB1c2VDYWxsYmFjaygobm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb24pID0+IHtcclxuICAgIC8vIOyDiCDslYzrprwg7IiY7IugIOyLnCDsu6jthY3siqTtirgg7JeF642w7J207Yq4XHJcbiAgICBmZXRjaE5vdGlmaWNhdGlvbnMoKTtcclxuICAgIFxyXG4gICAgLy8g7Luk7Iqk7YWAIO2VuOuTpOufrOqwgCDsnojsnLzrqbQg7Zi47LacXHJcbiAgICBpZiAob25OZXdOb3RpZmljYXRpb24pIHtcclxuICAgICAgb25OZXdOb3RpZmljYXRpb24obm90aWZpY2F0aW9uKTtcclxuICAgIH1cclxuICB9LCBbZmV0Y2hOb3RpZmljYXRpb25zLCBvbk5ld05vdGlmaWNhdGlvbl0pO1xyXG5cclxuICAvLyDsnb3sp4Ag7JWK7J2AIOyVjOumvCDsiJgg7JeF642w7J207Yq4IO2VuOuTpOufrFxyXG4gIGNvbnN0IGhhbmRsZVVucmVhZENvdW50VXBkYXRlID0gdXNlQ2FsbGJhY2soKGRhdGE6IHsgY291bnQ6IG51bWJlciB9KSA9PiB7XHJcbiAgICBpZiAobm90aWZpY2F0aW9uQ29udGV4dCAmJiAnc2V0VW5yZWFkQ291bnQnIGluIG5vdGlmaWNhdGlvbkNvbnRleHQpIHtcclxuICAgICAgLy8gc2V0VW5yZWFkQ291bnTqsIAg7KG07J6s7ZWY64qUIOqyveyasOyXkOunjCDsgqzsmqlcclxuICAgICAgKG5vdGlmaWNhdGlvbkNvbnRleHQgYXMgYW55KS5zZXRVbnJlYWRDb3VudChkYXRhLmNvdW50KTtcclxuICAgIH1cclxuICB9LCBbbm90aWZpY2F0aW9uQ29udGV4dF0pO1xyXG5cclxuICAvLyDslYzrprwg7J297J2MIOyymOumrFxyXG4gIGNvbnN0IG1hcmtBc1JlYWQgPSB1c2VDYWxsYmFjaygobm90aWZpY2F0aW9uSWQ6IG51bWJlcikgPT4ge1xyXG4gICAgaWYgKGlzQ29ubmVjdGVkKSB7XHJcbiAgICAgIHNvY2tldFNlcnZpY2UuZW1pdCgnbWFya19ub3RpZmljYXRpb25fcmVhZCcsIHsgbm90aWZpY2F0aW9uX2lkOiBub3RpZmljYXRpb25JZCB9KTtcclxuICAgIH1cclxuICB9LCBbaXNDb25uZWN0ZWRdKTtcclxuXHJcbiAgLy8g66qo65OgIOyVjOumvCDsnb3snYwg7LKY66asXHJcbiAgY29uc3QgbWFya0FsbEFzUmVhZCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGlmIChpc0Nvbm5lY3RlZCkge1xyXG4gICAgICBzb2NrZXRTZXJ2aWNlLmVtaXQoJ21hcmtfYWxsX25vdGlmaWNhdGlvbnNfcmVhZCcpO1xyXG4gICAgfVxyXG4gIH0sIFtpc0Nvbm5lY3RlZF0pO1xyXG5cclxuICAvLyDsu7Ttj6zrhIztirgg66eI7Jq07Yq4L+yWuOuniOyatO2KuCDsi5wg7J2067Kk7Yq4IOumrOyKpOuEiCDshKTsoJVcclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgLy8g7IaM7LyTIOydtOuypO2KuCDrpqzsiqTrhIgg65Ox66GdXHJcbiAgICBzb2NrZXRTZXJ2aWNlLm9uKCdjb25uZWN0JywgKCkgPT4gc2V0SXNDb25uZWN0ZWQodHJ1ZSkpO1xyXG4gICAgc29ja2V0U2VydmljZS5vbignZGlzY29ubmVjdCcsICgpID0+IHNldElzQ29ubmVjdGVkKGZhbHNlKSk7XHJcbiAgICBzb2NrZXRTZXJ2aWNlLm9uKCduZXdfbm90aWZpY2F0aW9uJywgaGFuZGxlTmV3Tm90aWZpY2F0aW9uKTtcclxuICAgIHNvY2tldFNlcnZpY2Uub24oJ3VucmVhZF9ub3RpZmljYXRpb25zX2NvdW50JywgaGFuZGxlVW5yZWFkQ291bnRVcGRhdGUpO1xyXG4gICAgXHJcbiAgICAvLyDsnpDrj5kg7Jew6rKwIOyEpOygleydtCDsnojsnLzrqbQg7Jew6rKwXHJcbiAgICBpZiAoYXV0b0Nvbm5lY3QgJiYgIXNvY2tldFNlcnZpY2UuaXNDb25uZWN0ZWQoKSkge1xyXG4gICAgICBjb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOy7tO2PrOuEjO2KuCDslrjrp4jsmrTtirgg7IucIOydtOuypO2KuCDrpqzsiqTrhIgg7KCc6rGwXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBzb2NrZXRTZXJ2aWNlLm9mZignY29ubmVjdCcpO1xyXG4gICAgICBzb2NrZXRTZXJ2aWNlLm9mZignZGlzY29ubmVjdCcpO1xyXG4gICAgICBzb2NrZXRTZXJ2aWNlLm9mZignbmV3X25vdGlmaWNhdGlvbicsIGhhbmRsZU5ld05vdGlmaWNhdGlvbik7XHJcbiAgICAgIHNvY2tldFNlcnZpY2Uub2ZmKCd1bnJlYWRfbm90aWZpY2F0aW9uc19jb3VudCcsIGhhbmRsZVVucmVhZENvdW50VXBkYXRlKTtcclxuICAgIH07XHJcbiAgfSwgW2F1dG9Db25uZWN0LCBjb25uZWN0LCBoYW5kbGVOZXdOb3RpZmljYXRpb24sIGhhbmRsZVVucmVhZENvdW50VXBkYXRlXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpc0Nvbm5lY3RlZCxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIGVycm9yLFxyXG4gICAgY29ubmVjdCxcclxuICAgIGRpc2Nvbm5lY3QsXHJcbiAgICBtYXJrQXNSZWFkLFxyXG4gICAgbWFya0FsbEFzUmVhZFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB1c2VSZWFsdGltZU5vdGlmaWNhdGlvbjsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxjQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxvQkFBQSxHQUFBSCxPQUFBO0FBbUJPLElBQU1JLHVCQUF1QixHQUFBQyxPQUFBLENBQUFELHVCQUFBLEdBQUcsU0FBMUJBLHVCQUF1QkEsQ0FBQSxFQUdLO0VBQUEsSUFBQUUsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsUUFBQUQsU0FBQSxRQUFBRSxTQUFBLEdBQUFGLFNBQUEsTUFBUCxDQUFDLENB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LENBQUM5QixXQUFXLENBQUMsQ0FBQztFQUdqQixJQUFNaUMsYUFBYSxHQUFHLElBQUFuQixrQkFBVyxFQUFDLFlBQU07SUFDdEMsSUFBSWQsV0FBVyxFQUFFO01BQ2ZnQixzQkFBYSxDQUFDZSxJQUFJLENBQUMsNkJBQTZCLENBQUM7SUFDbkQ7RUFDRixDQUFDLEVBQUUsQ0FBQy9CLFdBQVcsQ0FBQyxDQUFDO0VBR2pCLElBQUFrQyxnQkFBUyxFQUFDLFlBQU07SUFFZGxCLHNCQUFhLENBQUNtQixFQUFFLENBQUMsU0FBUyxFQUFFO01BQUEsT0FBTWxDLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFBQSxFQUFDO0lBQ3ZEZSxzQkFBYSxDQUFDbUIsRUFBRSxDQUFDLFlBQVksRUFBRTtNQUFBLE9BQU1sQyxjQUFjLENBQUMsS0FBSyxDQUFDO0lBQUEsRUFBQztJQUMzRGUsc0JBQWEsQ0FBQ21CLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRVoscUJBQXFCLENBQUM7SUFDM0RQLHNCQUFhLENBQUNtQixFQUFFLENBQUMsNEJBQTRCLEVBQUVWLHVCQUF1QixDQUFDO0lBR3ZFLElBQUloQyxXQUFXLElBQUksQ0FBQ3VCLHNCQUFhLENBQUNoQixXQUFXLENBQUMsQ0FBQyxFQUFFO01BQy9DYSxPQUFPLENBQUMsQ0FBQztJQUNYO0lBR0EsT0FBTyxZQUFNO01BQ1hHLHNCQUFhLENBQUNvQixHQUFHLENBQUMsU0FBUyxDQUFDO01BQzVCcEIsc0JBQWEsQ0FBQ29CLEdBQUcsQ0FBQyxZQUFZLENBQUM7TUFDL0JwQixzQkFBYSxDQUFDb0IsR0FBRyxDQUFDLGtCQUFrQixFQUFFYixxQkFBcUIsQ0FBQztNQUM1RFAsc0JBQWEsQ0FBQ29CLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRVgsdUJBQXVCLENBQUM7SUFDMUUsQ0FBQztFQUNILENBQUMsRUFBRSxDQUFDaEMsV0FBVyxFQUFFb0IsT0FBTyxFQUFFVSxxQkFBcUIsRUFBRUUsdUJBQXVCLENBQUMsQ0FBQztFQUUxRSxPQUFPO0lBQ0x6QixXQUFXLEVBQVhBLFdBQVc7SUFDWEksU0FBUyxFQUFUQSxTQUFTO0lBQ1RJLEtBQUssRUFBTEEsS0FBSztJQUNMSyxPQUFPLEVBQVBBLE9BQU87SUFDUFMsVUFBVSxFQUFWQSxVQUFVO0lBQ1ZPLFVBQVUsRUFBVkEsVUFBVTtJQUNWSSxhQUFhLEVBQWJBO0VBQ0YsQ0FBQztBQUNILENBQUM7QUFBQyxJQUFBSSxRQUFBLEdBQUFsRCxPQUFBLENBQUFZLE9BQUEsR0FFYWIsdUJBQXVCIiwiaWdub3JlTGlzdCI6W119