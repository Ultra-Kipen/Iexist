4e11931a1d1f8e0b6f3aa9a4c7347c97
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _expoStatusBar = require("expo-status-bar");
var _useTheme2 = require("../hooks/useTheme");
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _jsxRuntime = require("react/jsx-runtime");
var AuthLayout = function AuthLayout(_ref) {
  var children = _ref.children,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    title = _ref.title,
    footer = _ref.footer,
    _ref$imageBackground = _ref.imageBackground,
    imageBackground = _ref$imageBackground === void 0 ? false : _ref$imageBackground,
    _ref$logoVisible = _ref.logoVisible,
    logoVisible = _ref$logoVisible === void 0 ? true : _ref$logoVisible;
  var _useTheme = (0, _useTheme2.useTheme)(),
    theme = _useTheme.theme;
  var renderContent = function renderContent() {
    return (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
      style: styles.keyboardView,
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
        onPress: _reactNative.Keyboard.dismiss,
        children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          contentContainerStyle: styles.scrollView,
          keyboardShouldPersistTaps: "handled",
          children: [logoVisible && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.logoContainer,
            children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: require("../assets/images/logo.png"),
              style: styles.logo,
              resizeMode: "contain"
            })
          }), title && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.titleContainer,
            children: title
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.contentContainer,
            children: loading ? (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {}) : children
          }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.footerContainer,
            children: footer
          })]
        })
      })
    });
  };
  if (imageBackground) {
    return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_expoStatusBar.StatusBar, {
        style: "light"
      }), (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
        source: require("../assets/images/auth-background.jpg"),
        style: styles.backgroundImage,
        resizeMode: "cover",
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.overlay,
          children: renderContent()
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: [styles.container, {
      backgroundColor: theme.colors.background
    }],
    children: [(0, _jsxRuntime.jsx)(_expoStatusBar.StatusBar, {
      style: theme.dark ? 'light' : 'dark'
    }), renderContent()]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  backgroundImage: {
    flex: 1,
    width: '100%',
    height: '100%'
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    paddingTop: _reactNative.Platform.OS === 'android' ? 30 : 0
  },
  keyboardView: {
    flex: 1
  },
  scrollView: {
    flexGrow: 1,
    paddingHorizontal: 20,
    paddingBottom: 20
  },
  logoContainer: {
    alignItems: 'center',
    marginTop: 50,
    marginBottom: 30
  },
  logo: {
    width: 150,
    height: 150
  },
  titleContainer: {
    marginBottom: 30
  },
  contentContainer: {
    flex: 1,
    width: '100%'
  },
  footerContainer: {
    width: '100%',
    marginTop: 20,
    alignItems: 'center'
  }
});
var _default = exports.default = AuthLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,