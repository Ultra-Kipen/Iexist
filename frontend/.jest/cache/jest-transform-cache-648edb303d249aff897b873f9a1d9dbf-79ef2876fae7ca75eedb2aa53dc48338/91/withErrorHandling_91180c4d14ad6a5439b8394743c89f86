76d6c71c2b1006d8b15f9192dd1be39d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withErrorHandling = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var withErrorHandling = exports.withErrorHandling = function withErrorHandling(WrappedComponent) {
  var WithErrorHandling = function (_Component) {
    function WithErrorHandling(props) {
      var _this;
      (0, _classCallCheck2.default)(this, WithErrorHandling);
      _this = _callSuper(this, WithErrorHandling, [props]);
      _this.resetError = function () {
        _this.setState({
          hasError: false,
          error: null,
          errorInfo: null
        });
      };
      _this.state = {
        hasError: false,
        error: null,
        errorInfo: null
      };
      return _this;
    }
    (0, _inherits2.default)(WithErrorHandling, _Component);
    return (0, _createClass2.default)(WithErrorHandling, [{
      key: "componentDidCatch",
      value: function componentDidCatch(error, errorInfo) {
        this.setState({
          errorInfo: errorInfo
        });
        console.error('컴포넌트 오류:', error, errorInfo);
      }
    }, {
      key: "render",
      value: function render() {
        if (this.state.hasError) {
          var _this$state$error;
          return (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.errorContainer,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.errorTitle,
              children: "\uBB38\uC81C\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.errorDescription,
              children: "\uCEF4\uD3EC\uB10C\uD2B8 \uB80C\uB354\uB9C1 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uB2E4\uC2DC \uC2DC\uB3C4\uD574 \uC8FC\uC138\uC694."
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.errorMessage,
              children: (_this$state$error = this.state.error) == null ? void 0 : _this$state$error.toString()
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              style: styles.button,
              onPress: this.resetError,
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.buttonText,
                children: "\uB2E4\uC2DC \uC2DC\uB3C4"
              })
            })]
          });
        }
        return (0, _jsxRuntime.jsx)(WrappedComponent, Object.assign({}, this.props));
      }
    }], [{
      key: "getDerivedStateFromError",
      value: function getDerivedStateFromError(error) {
        return {
          hasError: true,
          error: error
        };
      }
    }]);
  }(_react.Component);
  var styles = _reactNative.StyleSheet.create({
    errorContainer: {
      padding: 20,
      alignItems: 'center',
      justifyContent: 'center'
    },
    errorTitle: {
      fontSize: 18,
      fontWeight: 'bold',
      marginBottom: 10,
      color: 'red'
    },
    errorDescription: {
      fontSize: 14,
      marginBottom: 15,
      textAlign: 'center'
    },
    errorMessage: {
      fontSize: 12,
      marginBottom: 20,
      color: '#666',
      padding: 10,
      backgroundColor: '#f8f8f8',
      width: '100%'
    },
    button: {
      backgroundColor: '#2196F3',
      padding: 10,
      borderRadius: 5
    },
    buttonText: {
      color: 'white',
      fontWeight: 'bold'
    }
  });
  var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
  WithErrorHandling.displayName = `withErrorHandling(${wrappedComponentName})`;
  return WithErrorHandling;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,