89ba11e16ac333a8dbcf724474a6e843
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    Button: 'Button',
    Chip: 'Chip',
    TextInput: 'TextInput',
    Card: {
      Title: 'Card.Title',
      Content: 'Card.Content',
      Actions: 'Card.Actions'
    },
    Avatar: {
      Icon: 'Avatar.Icon'
    },
    IconButton: 'IconButton',
    FAB: 'FAB',
    Divider: 'Divider',
    Surface: 'Surface',
    ActivityIndicator: 'ActivityIndicator',
    Portal: 'Portal',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee',
          surface: '#ffffff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    ScrollView: 'ScrollView',
    StyleSheet: {
      create: function create(styles) {
        return styles;
      }
    },
    Image: 'Image'
  };
});
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  var actual = jest.requireActual("../../src/screens/HomeScreen");
  return {
    __esModule: true,
    default: function _default() {
      return null;
    },
    handlePostSubmission: actual.handlePostSubmission,
    renderEmotionIcon: actual.renderEmotionIcon,
    emotions: actual.emotions,
    initialPosts: actual.initialPosts,
    handleImageUploadAction: actual.handleImageUploadAction,
    handleLikeAction: actual.handleLikeAction,
    handleCommentAction: actual.handleCommentAction,
    renderEmotionSelector: actual.renderEmotionSelector,
    renderPostInput: actual.renderPostInput,
    renderPosts: actual.renderPosts
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _HomeScreen = require("../../src/screens/HomeScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
console.log = jest.fn();
console.error = jest.fn();
describe('HomeScreen Utility Functions', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('tests handlePostSubmission helper function with valid input', function () {
    var setIsLoading = jest.fn();
    var setIsDialogVisible = jest.fn();
    var validResult = (0, _HomeScreen.handlePostSubmission)('ÌÖåÏä§Ìä∏ ÎÇ¥Ïö©', _HomeScreen.emotions[0], 'test-image.jpg', setIsLoading, setIsDialogVisible);
    expect(validResult).toBe(true);
    expect(setIsLoading).toHaveBeenCalledWith(true);
    jest.advanceTimersByTime(1000);
    expect(setIsLoading).toHaveBeenCalledWith(false);
    expect(setIsDialogVisible).toHaveBeenCalledWith(true);
  });
  it('tests handlePostSubmission helper function with invalid input', function () {
    var setIsLoading = jest.fn();
    var setIsDialogVisible = jest.fn();
    var invalidContentResult = (0, _HomeScreen.handlePostSubmission)('', _HomeScreen.emotions[0], 'test-image.jpg', setIsLoading, setIsDialogVisible);
    expect(invalidContentResult).toBe(false);
    expect(setIsLoading).not.toHaveBeenCalled();
    var invalidEmotionResult = (0, _HomeScreen.handlePostSubmission)('ÌÖåÏä§Ìä∏ ÎÇ¥Ïö©', null, 'test-image.jpg', setIsLoading, setIsDialogVisible);
    expect(invalidEmotionResult).toBe(false);
  });
  it('tests renderEmotionIcon helper function', function () {
    var icon = (0, _HomeScreen.renderEmotionIcon)('emoticon-happy-outline', '#FFD700');
    expect(icon).toBeTruthy();
  });
  it('tests that renderEmotionIcon logs errors', function () {
    console.error = jest.fn();
    (0, _HomeScreen.renderEmotionIcon)('emoticon-happy-outline', '#FFD700');
    expect(console.error).not.toHaveBeenCalled();
    expect(_HomeScreen.renderEmotionIcon.toString()).toContain('try');
    expect(_HomeScreen.renderEmotionIcon.toString()).toContain('catch');
  });
  it('tests handleImageUploadAction function', function () {
    var setImageUrl = jest.fn();
    (0, _HomeScreen.handleImageUploadAction)(setImageUrl);
    expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    expect(console.log).toHaveBeenCalledWith('Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Í∏∞Îä•Ïù¥ Ìò∏Ï∂úÎêòÏóàÏäµÎãàÎã§.');
  });
  it('tests handleLikeAction function', function () {
    var _posts$find;
    var posts = (0, _toConsumableArray2.default)(_HomeScreen.initialPosts);
    var postId = 1;
    var setPosts = jest.fn();
    var initialLikes = ((_posts$find = posts.find(function (p) {
      return p.id === postId;
    })) == null ? void 0 : _posts$find.likes) || 0;
    (0, _HomeScreen.handleLikeAction)(posts, postId, setPosts);
    expect(setPosts).toHaveBeenCalled();
    var updatedPosts = setPosts.mock.calls[0][0];
    var updatedPost = updatedPosts.find(function (p) {
      return p.id === postId;
    });
    expect(updatedPost == null ? void 0 : updatedPost.likes).toBe(initialLikes + 1);
  });
  it('tests handleCommentAction function', function () {
    var _posts$find2;
    var posts = (0, _toConsumableArray2.default)(_HomeScreen.initialPosts);
    var postId = 1;
    var commentContent = 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä';
    var setPosts = jest.fn();
    var originalCommentCount = ((_posts$find2 = posts.find(function (p) {
      return p.id === postId;
    })) == null ? void 0 : _posts$find2.comments.length) || 0;
    var origDateNow = Date.now;
    Date.now = jest.fn(function () {
      return 1234567890;
    });
    (0, _HomeScreen.handleCommentAction)(posts, postId, commentContent, setPosts);
    expect(setPosts).toHaveBeenCalled();
    var updatedPosts = setPosts.mock.calls[0][0];
    var updatedPost = updatedPosts.find(function (p) {
      return p.id === postId;
    });
    expect(updatedPost == null ? void 0 : updatedPost.comments.length).toBe(originalCommentCount + 1);
    expect(updatedPost == null ? void 0 : updatedPost.comments[originalCommentCount].content).toBe(commentContent);
    expect(updatedPost == null ? void 0 : updatedPost.comments[originalCommentCount].id).toBe(1234567890);
    Date.now = origDateNow;
  });
});
describe('HomeScreen Rendering Functions', function () {
  it('tests renderEmotionSelector function', function () {
    var selectedEmotion = _HomeScreen.emotions[0];
    var setSelectedEmotion = jest.fn();
    var mockStyles = {
      emotionSelector: {},
      emotionChip: {},
      emotionLabel: {}
    };
    var selector = (0, _HomeScreen.renderEmotionSelector)(selectedEmotion, setSelectedEmotion, mockStyles);
    expect(selector).toBeTruthy();
  });
  it('tests renderPostInput function', function () {
    var postContent = 'ÌÖåÏä§Ìä∏ ÎÇ¥Ïö©';
    var setPostContent = jest.fn();
    var imageUrl = 'test-image.jpg';
    var handleImageUpload = jest.fn();
    var mockStyles = {
      postInput: {},
      imageButton: {},
      uploadedImage: {}
    };
    var input = (0, _HomeScreen.renderPostInput)(postContent, setPostContent, imageUrl, handleImageUpload, mockStyles);
    expect(input).toBeTruthy();
  });
  it('tests renderPosts function', function () {
    var posts = (0, _toConsumableArray2.default)(_HomeScreen.initialPosts);
    var handleLike = jest.fn();
    var handleComment = jest.fn();
    var mockTheme = {
      colors: {
        primary: '#000000'
      }
    };
    var mockStyles = {
      postCard: {},
      postContent: {},
      emotionContainer: {},
      emotionIcon: {},
      emotionChip: {},
      postImage: {},
      commentContainer: {},
      commentAuthor: {}
    };
    var renderedPosts = (0, _HomeScreen.renderPosts)(posts, handleLike, handleComment, mockTheme, mockStyles);
    expect(renderedPosts).toBeTruthy();
    expect(renderedPosts.length).toBe(posts.length);
  });
  it('simulates the full HomeScreen component interactions', function () {
    var mockSetSelectedEmotion = jest.fn();
    var mockSetPostContent = jest.fn();
    var mockSetImageUrl = jest.fn();
    var mockSetIsLoading = jest.fn();
    var mockSetIsDialogVisible = jest.fn();
    var mockSetPosts = jest.fn();
    var mockSelectedEmotion = _HomeScreen.emotions[0];
    var mockPostContent = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º ÎÇ¥Ïö©';
    var mockImageUrl = 'https://via.placeholder.com/150';
    var mockIsLoading = false;
    var mockIsDialogVisible = false;
    var mockPosts = (0, _toConsumableArray2.default)(_HomeScreen.initialPosts);
    var handlePost = function handlePost() {
      var success = (0, _HomeScreen.handlePostSubmission)(mockPostContent, mockSelectedEmotion, mockImageUrl, mockSetIsLoading, mockSetIsDialogVisible);
      if (success) {
        mockSetIsLoading(true);
        jest.advanceTimersByTime(1000);
        mockSetIsLoading(false);
        mockSetIsDialogVisible(true);
        var newPost = {
          id: Date.now(),
          anonymousId: 'ÏùµÎ™Ö',
          content: mockPostContent,
          emotion: mockSelectedEmotion.label,
          emotionIcon: 'üòä',
          image: mockImageUrl,
          likes: 0,
          comments: [],
          timestamp: 'Î∞©Í∏à Ï†Ñ'
        };
        mockPosts = [newPost].concat((0, _toConsumableArray2.default)(mockPosts));
        mockSetPosts(mockPosts);
        mockSetPostContent('');
        mockSetSelectedEmotion(null);
        mockSetImageUrl('');
      }
      return success;
    };
    var handleImageUpload = function handleImageUpload() {
      (0, _HomeScreen.handleImageUploadAction)(mockSetImageUrl);
    };
    var handleLike = function handleLike(postId) {
      (0, _HomeScreen.handleLikeAction)(mockPosts, postId, mockSetPosts);
    };
    var handleComment = function handleComment(postId, commentContent) {
      (0, _HomeScreen.handleCommentAction)(mockPosts, postId, commentContent, mockSetPosts);
    };
    handleImageUpload();
    expect(mockSetImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    var postResult = handlePost();
    expect(postResult).toBe(true);
    expect(mockSetIsLoading).toHaveBeenCalledWith(true);
    expect(mockSetIsLoading).toHaveBeenCalledWith(false);
    expect(mockSetIsDialogVisible).toHaveBeenCalledWith(true);
    expect(mockSetPosts).toHaveBeenCalled();
    expect(mockSetPostContent).toHaveBeenCalledWith('');
    expect(mockSetSelectedEmotion).toHaveBeenCalledWith(null);
    expect(mockSetImageUrl).toHaveBeenCalledWith('');
    handleLike(1);
    handleComment(1, 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä');
  });
});
describe('HomeScreen Data Structures', function () {
  it('validates emotions array structure', function () {
    expect(_HomeScreen.emotions).toBeDefined();
    expect(Array.isArray(_HomeScreen.emotions)).toBe(true);
    expect(_HomeScreen.emotions.length).toBeGreaterThan(0);
    _HomeScreen.emotions.forEach(function (emotion) {
      expect(emotion).toHaveProperty('label');
      expect(emotion).toHaveProperty('icon');
      expect(emotion).toHaveProperty('color');
      expect(typeof emotion.label).toBe('string');
      expect(typeof emotion.icon).toBe('string');
      expect(typeof emotion.color).toBe('string');
      expect(emotion.label.length).toBeGreaterThan(0);
      expect(emotion.icon.length).toBeGreaterThan(0);
      expect(emotion.color.length).toBeGreaterThan(0);
    });
  });
  it('checks for unique emotion labels', function () {
    var labels = _HomeScreen.emotions.map(function (e) {
      return e.label;
    });
    expect(new Set(labels).size).toBe(labels.length);
  });
  it('checks emotion colors are valid', function () {
    _HomeScreen.emotions.forEach(function (emotion) {
      expect(emotion.color).toMatch(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/);
    });
  });
  it('validates initialPosts structure', function () {
    expect(_HomeScreen.initialPosts).toBeDefined();
    expect(Array.isArray(_HomeScreen.initialPosts)).toBe(true);
    expect(_HomeScreen.initialPosts.length).toBeGreaterThan(0);
    _HomeScreen.initialPosts.forEach(function (post) {
      expect(post).toHaveProperty('id');
      expect(post).toHaveProperty('anonymousId');
      expect(post).toHaveProperty('content');
      expect(post).toHaveProperty('emotion');
      expect(post).toHaveProperty('emotionIcon');
      expect(post).toHaveProperty('image');
      expect(post).toHaveProperty('likes');
      expect(post).toHaveProperty('comments');
      expect(post).toHaveProperty('timestamp');
      expect(typeof post.id).toBe('number');
      expect(typeof post.anonymousId).toBe('string');
      expect(typeof post.content).toBe('string');
      expect(typeof post.emotion).toBe('string');
      expect(typeof post.emotionIcon).toBe('string');
      expect(typeof post.image).toBe('string');
      expect(typeof post.likes).toBe('number');
      expect(Array.isArray(post.comments)).toBe(true);
      expect(typeof post.timestamp).toBe('string');
      post.comments.forEach(function (comment) {
        expect(comment).toHaveProperty('id');
        expect(comment).toHaveProperty('author');
        expect(comment).toHaveProperty('content');
        expect(typeof comment.id).toBe('number');
        expect(typeof comment.author).toBe('string');
        expect(typeof comment.content).toBe('string');
      });
    });
  });
});
describe('HomeScreen Component Simulation', function () {
  it('simulates a complete user interaction flow', function () {
    var mockInitialState = {
      selectedEmotion: null,
      postContent: '',
      imageUrl: '',
      isLoading: false,
      isDialogVisible: false,
      posts: (0, _toConsumableArray2.default)(_HomeScreen.initialPosts)
    };
    var mockSetState = {
      setSelectedEmotion: jest.fn(function (emotion) {
        mockInitialState.selectedEmotion = emotion;
      }),
      setPostContent: jest.fn(function (content) {
        mockInitialState.postContent = content;
      }),
      setImageUrl: jest.fn(function (url) {
        mockInitialState.imageUrl = url;
      }),
      setIsLoading: jest.fn(function (loading) {
        mockInitialState.isLoading = loading;
      }),
      setIsDialogVisible: jest.fn(function (visible) {
        mockInitialState.isDialogVisible = visible;
      }),
      setPosts: jest.fn(function (posts) {
        mockInitialState.posts = posts;
      })
    };
    mockSetState.setSelectedEmotion(_HomeScreen.emotions[0]);
    expect(mockInitialState.selectedEmotion).toBe(_HomeScreen.emotions[0]);
    mockSetState.setPostContent('ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º ÎÇ¥Ïö©');
    expect(mockInitialState.postContent).toBe('ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º ÎÇ¥Ïö©');
    (0, _HomeScreen.handleImageUploadAction)(mockSetState.setImageUrl);
    expect(mockSetState.setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    var postResult = (0, _HomeScreen.handlePostSubmission)(mockInitialState.postContent, mockInitialState.selectedEmotion, mockInitialState.imageUrl, mockSetState.setIsLoading, mockSetState.setIsDialogVisible);
    expect(postResult).toBe(true);
    expect(mockSetState.setIsLoading).toHaveBeenCalledWith(true);
    jest.advanceTimersByTime(1000);
    expect(mockSetState.setIsLoading).toHaveBeenCalledWith(false);
    expect(mockSetState.setIsDialogVisible).toHaveBeenCalledWith(true);
    var emotion = mockInitialState.selectedEmotion ? mockInitialState.selectedEmotion.label : '';
    var newPost = {
      id: Date.now(),
      anonymousId: 'ÏùµÎ™Ö',
      content: mockInitialState.postContent,
      emotion: emotion,
      emotionIcon: 'üòä',
      image: mockInitialState.imageUrl,
      likes: 0,
      comments: [],
      timestamp: 'Î∞©Í∏à Ï†Ñ'
    };
    mockSetState.setPosts([newPost].concat((0, _toConsumableArray2.default)(mockInitialState.posts)));
    expect(mockInitialState.posts.length).toBe(_HomeScreen.initialPosts.length + 1);
    expect(mockInitialState.posts[0]).toBe(newPost);
    var postId = _HomeScreen.initialPosts[0].id;
    var origLikes = _HomeScreen.initialPosts[0].likes;
    (0, _HomeScreen.handleLikeAction)(mockInitialState.posts, postId, mockSetState.setPosts);
    expect(mockSetState.setPosts).toHaveBeenCalled();
    (0, _HomeScreen.handleCommentAction)(mockInitialState.posts, postId, 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä', mockSetState.setPosts);
    expect(mockSetState.setPosts).toHaveBeenCalled();
    mockSetState.setIsDialogVisible(false);
    expect(mockInitialState.isDialogVisible).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,