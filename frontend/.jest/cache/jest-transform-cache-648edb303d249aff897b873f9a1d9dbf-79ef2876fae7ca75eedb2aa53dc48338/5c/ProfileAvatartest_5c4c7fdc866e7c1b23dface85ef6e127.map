{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_ProfileAvatar","_jsxRuntime","describe","it","_render","render","jsx","default","name","getByText","expect","toBeTruthy","_render2","_render3","isAnonymous","_render4","showName","_render5","mockOnPress","jest","fn","_render6","onPress","fireEvent","press","toHaveBeenCalled"],"sources":["ProfileAvatar.test.tsx"],"sourcesContent":["// __TESTS__/components/ProfileAvatar.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport ProfileAvatar from '../../src/components/ProfileAvatar';\r\n\r\ndescribe('ProfileAvatar 컴포넌트', () => {\r\n  it('이미지가 없을 때 이니셜이 표시되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <ProfileAvatar name=\"홍길동\" />\r\n    );\r\n    \r\n    expect(getByText('홍')).toBeTruthy();\r\n  });\r\n\r\n  it('이름이 없을 때 기본 이니셜이 표시되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <ProfileAvatar />\r\n    );\r\n    \r\n    expect(getByText('?')).toBeTruthy();\r\n  });\r\n\r\n  it('isAnonymous가 true일 때 익명 이니셜이 표시되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <ProfileAvatar isAnonymous={true} name=\"홍길동\" />\r\n    );\r\n    \r\n    expect(getByText('익')).toBeTruthy();\r\n  });\r\n\r\n  it('showName이 true일 때 이름이 표시되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <ProfileAvatar name=\"홍길동\" showName={true} />\r\n    );\r\n    \r\n    expect(getByText('홍길동')).toBeTruthy();\r\n  });\r\n\r\n  it('isAnonymous가 true이고 showName이 true일 때 \"익명\"이 표시되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <ProfileAvatar isAnonymous={true} name=\"홍길동\" showName={true} />\r\n    );\r\n    \r\n    expect(getByText('익명')).toBeTruthy();\r\n  });\r\n\r\n  it('onPress 콜백이 제공되면 아바타를 클릭할 때 호출되어야 합니다', () => {\r\n    const mockOnPress = jest.fn();\r\n    const { getByText } = render(\r\n      <ProfileAvatar name=\"홍길동\" onPress={mockOnPress} />\r\n    );\r\n    \r\n    fireEvent.press(getByText('홍'));\r\n    expect(mockOnPress).toHaveBeenCalled();\r\n  });\r\n});"],"mappings":";AACA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,cAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA+D,IAAAG,WAAA,GAAAH,OAAA;AAE/DI,QAAQ,CAAC,oBAAoB,EAAE,YAAM;EACnCC,EAAE,CAAC,0BAA0B,EAAE,YAAM;IACnC,IAAAC,OAAA,GAAsB,IAAAC,mBAAM,EAC1B,IAAAJ,WAAA,CAAAK,GAAA,EAACN,cAAA,CAAAO,OAAa;QAACC,IAAI,EAAC;MAAK,CAAE,CAC7B,CAAC;MAFOC,SAAS,GAAAL,OAAA,CAATK,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,GAAG,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACrC,CAAC,CAAC;EAEFR,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACrC,IAAAS,QAAA,GAAsB,IAAAP,mBAAM,EAC1B,IAAAJ,WAAA,CAAAK,GAAA,EAACN,cAAA,CAAAO,OAAa,IAAE,CAClB,CAAC;MAFOE,SAAS,GAAAG,QAAA,CAATH,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,GAAG,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACrC,CAAC,CAAC;EAEFR,EAAE,CAAC,wCAAwC,EAAE,YAAM;IACjD,IAAAU,QAAA,GAAsB,IAAAR,mBAAM,EAC1B,IAAAJ,WAAA,CAAAK,GAAA,EAACN,cAAA,CAAAO,OAAa;QAACO,WAAW,EAAE,IAAK;QAACN,IAAI,EAAC;MAAK,CAAE,CAChD,CAAC;MAFOC,SAAS,GAAAI,QAAA,CAATJ,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,GAAG,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACrC,CAAC,CAAC;EAEFR,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC1C,IAAAY,QAAA,GAAsB,IAAAV,mBAAM,EAC1B,IAAAJ,WAAA,CAAAK,GAAA,EAACN,cAAA,CAAAO,OAAa;QAACC,IAAI,EAAC,oBAAK;QAACQ,QAAQ,EAAE;MAAK,CAAE,CAC7C,CAAC;MAFOP,SAAS,GAAAM,QAAA,CAATN,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,KAAK,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACvC,CAAC,CAAC;EAEFR,EAAE,CAAC,uDAAuD,EAAE,YAAM;IAChE,IAAAc,QAAA,GAAsB,IAAAZ,mBAAM,EAC1B,IAAAJ,WAAA,CAAAK,GAAA,EAACN,cAAA,CAAAO,OAAa;QAACO,WAAW,EAAE,IAAK;QAACN,IAAI,EAAC,oBAAK;QAACQ,QAAQ,EAAE;MAAK,CAAE,CAChE,CAAC;MAFOP,SAAS,GAAAQ,QAAA,CAATR,SAAS;IAIjBC,MAAM,CAACD,SAAS,CAAC,IAAI,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACtC,CAAC,CAAC;EAEFR,EAAE,CAAC,uCAAuC,EAAE,YAAM;IAChD,IAAMe,WAAW,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;IAC7B,IAAAC,QAAA,GAAsB,IAAAhB,mBAAM,EAC1B,IAAAJ,WAAA,CAAAK,GAAA,EAACN,cAAA,CAAAO,OAAa;QAACC,IAAI,EAAC,oBAAK;QAACc,OAAO,EAAEJ;MAAY,CAAE,CACnD,CAAC;MAFOT,SAAS,GAAAY,QAAA,CAATZ,SAAS;IAIjBc,sBAAS,CAACC,KAAK,CAACf,SAAS,CAAC,GAAG,CAAC,CAAC;IAC/BC,MAAM,CAACQ,WAAW,CAAC,CAACO,gBAAgB,CAAC,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}