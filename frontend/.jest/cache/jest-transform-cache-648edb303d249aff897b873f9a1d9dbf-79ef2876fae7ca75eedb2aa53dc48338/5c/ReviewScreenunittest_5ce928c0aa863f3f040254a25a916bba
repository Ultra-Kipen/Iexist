7af50584be77a32baee8a54c1203015e
_getJestObj().mock('react-native-paper', function () {
  var actual = jest.requireActual('react-native-paper');
  return Object.assign({}, actual, {
    useTheme: jest.fn(function () {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _reactNativePaper = require("react-native-paper");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 단위 테스트', function () {
  it('컴포넌트가 렌더링 되어야 함', function () {
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    }).not.toThrow();
  });
  it('useState 훅이 period 상태를 제대로 관리해야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getByProps = _render.UNSAFE_getByProps;
    var segmentedButtons = UNSAFE_getByProps({
      value: 'weekly'
    });
    expect(segmentedButtons).toBeTruthy();
  });
  it('SegmentedButtons 컴포넌트가 존재해야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render2.UNSAFE_getAllByType;
    var buttons = UNSAFE_getAllByType(_reactNativePaper.SegmentedButtons);
    expect(buttons.length).toBeGreaterThan(0);
  });
  it('period 상태가 변경되면 UI가 업데이트되어야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getByProps = _render3.UNSAFE_getByProps;
    var segmentedButtons = UNSAFE_getByProps({
      value: 'weekly'
    });
    expect(segmentedButtons).toBeTruthy();
    segmentedButtons.props.onValueChange('monthly');
    segmentedButtons = UNSAFE_getByProps({
      value: 'monthly'
    });
    expect(segmentedButtons).toBeTruthy();
  });
  it('이미지 그리드에 카드가 렌더링되어야 함', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render4.UNSAFE_getAllByType;
    var cards = UNSAFE_getAllByType(_reactNativePaper.Card);
    expect(cards.length).toBeGreaterThanOrEqual(6);
  });
  it('감정 변화 그래프 버튼이 존재하고 클릭 가능해야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render5.UNSAFE_getAllByType;
    var consoleSpy = jest.spyOn(console, 'log');
    var buttons = UNSAFE_getAllByType(_reactNativePaper.Button);
    var graphButton = buttons.find(function (button) {
      return button.props.children && typeof button.props.children === 'string' && button.props.children.includes('감정 변화 그래프');
    });
    expect(graphButton).toBeTruthy();
    graphButton == null || graphButton.props.onPress();
    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');
    consoleSpy.mockRestore();
  });
  it('통계 카드가 존재해야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render6.UNSAFE_getAllByType;
    var cards = UNSAFE_getAllByType(_reactNativePaper.Card);
    expect(cards.length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,