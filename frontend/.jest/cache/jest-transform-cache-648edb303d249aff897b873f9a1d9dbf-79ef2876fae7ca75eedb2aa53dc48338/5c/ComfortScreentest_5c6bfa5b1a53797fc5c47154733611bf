55bd665d1d15009fa06e05fb8dc13975
_getJestObj().mock('react-native-paper', function () {
  return {
    Card: {
      Content: 'CardContent'
    },
    TextInput: 'TextInput',
    Button: 'Button',
    List: {
      Section: 'ListSection',
      Item: 'ListItem',
      Icon: 'ListIcon'
    },
    Title: 'Title',
    Paragraph: 'Paragraph',
    FAB: 'FAB',
    ActivityIndicator: 'ActivityIndicator',
    Chip: 'Chip',
    Text: 'PaperText',
    Modal: 'Modal',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff',
          surface: '#fff',
          accent: '#f1c40f',
          error: '#f13a59',
          text: '#000'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    getBestPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    createPost: jest.fn(),
    sendMessage: jest.fn(),
    likePost: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _reactNative2 = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn();
jest.spyOn(_reactNative.Alert, 'alert').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('ComfortScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    console.error = originalConsoleError;
  });
  test('renders without crashing', function () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
  });
  test('calls API on mount', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
  }));
  test('shows alert on API error', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockRejectedValueOnce(new Error('API 오류'));
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
      expect(console.error).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
  }));
  test('calls createPost API with correct data', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockReset();
    _comfortWallService.default.createPost.mockResolvedValueOnce({
      data: {
        data: {
          post_id: 2,
          title: '새 게시물',
          content: '새로운 내용'
        }
      }
    });
    var testPostData = {
      title: '새 게시물',
      content: '새로운 내용',
      is_anonymous: true
    };
    yield _comfortWallService.default.createPost(testPostData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledWith(testPostData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledTimes(1);
  }));
  test('fetches posts correctly', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockReset();
    _comfortWallService.default.getPosts.mockResolvedValueOnce({
      data: {
        data: []
      }
    });
    _comfortWallService.default.getBestPosts.mockReset();
    _comfortWallService.default.getBestPosts.mockResolvedValueOnce({
      data: {
        data: []
      }
    });
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    }, {
      timeout: 10000
    });
  }), 15000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,