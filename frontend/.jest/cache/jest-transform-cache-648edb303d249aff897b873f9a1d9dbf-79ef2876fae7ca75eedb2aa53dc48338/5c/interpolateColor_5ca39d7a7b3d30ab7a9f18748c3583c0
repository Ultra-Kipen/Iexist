1296508fd2b85e067c6db977df1c1ba6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Extrapolate = exports.ColorSpace = void 0;
exports.interpolateColor = interpolateColor;
exports.useInterpolateConfig = useInterpolateConfig;
var _Colors = require("./Colors.js");
var _core = require("./core.js");
var _index = _interopRequireDefault(require("./culori/index.js"));
var _errors = require("./errors.js");
var _useSharedValue = require("./hook/useSharedValue.js");
var _interpolation = require("./interpolation.js");
var Extrapolate = exports.Extrapolate = _interpolation.Extrapolation;
var interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors, options) {
  'worklet';

  var h = 0;
  var _options$useCorrected = options.useCorrectedHSVInterpolation,
    useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;
  if (useCorrectedHSVInterpolation) {
    var correctedInputRange = [inputRange[0]];
    var originalH = colors.h;
    var correctedH = [originalH[0]];
    for (var i = 1; i < originalH.length; ++i) {
      var d = originalH[i] - originalH[i - 1];
      if (originalH[i] > originalH[i - 1] && d > 0.5) {
        correctedInputRange.push(inputRange[i]);
        correctedInputRange.push(inputRange[i] + 0.00001);
        correctedH.push(originalH[i] - 1);
        correctedH.push(originalH[i]);
      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {
        correctedInputRange.push(inputRange[i]);
        correctedInputRange.push(inputRange[i] + 0.00001);
        correctedH.push(originalH[i] + 1);
        correctedH.push(originalH[i]);
      } else {
        correctedInputRange.push(inputRange[i]);
        correctedH.push(originalH[i]);
      }
    }
    h = ((0, _interpolation.interpolate)(value, correctedInputRange, correctedH, _interpolation.Extrapolation.CLAMP) + 1) % 1;
  } else {
    h = (0, _interpolation.interpolate)(value, inputRange, colors.h, _interpolation.Extrapolation.CLAMP);
  }
  var s = (0, _interpolation.interpolate)(value, inputRange, colors.s, _interpolation.Extrapolation.CLAMP);
  var v = (0, _interpolation.interpolate)(value, inputRange, colors.v, _interpolation.Extrapolation.CLAMP);
  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _interpolation.Extrapolation.CLAMP);
  return (0, _Colors.hsvToColor)(h, s, v, a);
};
var toLinearSpace = function toLinearSpace(x, gamma) {
  'worklet';

  return x.map(function (v) {
    return Math.pow(v / 255, gamma);
  });
};
var toGammaSpace = function toGammaSpace(x, gamma) {
  'worklet';

  return Math.round(Math.pow(x, 1 / gamma) * 255);
};
var interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors, options) {
  'worklet';

  var _options$gamma = options.gamma,
    gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;
  var outputR = colors.r,
    outputG = colors.g,
    outputB = colors.b;
  if (gamma !== 1) {
    outputR = toLinearSpace(outputR, gamma);
    outputG = toLinearSpace(outputG, gamma);
    outputB = toLinearSpace(outputB, gamma);
  }
  var r = (0, _interpolation.interpolate)(value, inputRange, outputR, _interpolation.Extrapolation.CLAMP);
  var g = (0, _interpolation.interpolate)(value, inputRange, outputG, _interpolation.Extrapolation.CLAMP);
  var b = (0, _interpolation.interpolate)(value, inputRange, outputB, _interpolation.Extrapolation.CLAMP);
  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _interpolation.Extrapolation.CLAMP);
  if (gamma === 1) {
    return (0, _Colors.rgbaColor)(r, g, b, a);
  }
  return (0, _Colors.rgbaColor)(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);
};
var interpolateColorsLAB = function interpolateColorsLAB(value, inputRange, colors, _options) {
  'worklet';

  var l = (0, _interpolation.interpolate)(value, inputRange, colors.l, _interpolation.Extrapolation.CLAMP);
  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _interpolation.Extrapolation.CLAMP);
  var b = (0, _interpolation.interpolate)(value, inputRange, colors.b, _interpolation.Extrapolation.CLAMP);
  var alpha = (0, _interpolation.interpolate)(value, inputRange, colors.alpha, _interpolation.Extrapolation.CLAMP);
  var _culori$oklab$convert = _index.default.oklab.convert.toRgb({
      l: l,
      a: a,
      b: b,
      alpha: alpha
    }),
    _r = _culori$oklab$convert.r,
    _g = _culori$oklab$convert.g,
    _b = _culori$oklab$convert.b,
    _alpha = _culori$oklab$convert.alpha;
  return (0, _Colors.rgbaColor)(_r, _g, _b, _alpha);
};
var _splitColorsIntoChannels = function _splitColorsIntoChannels(colors, convFromRgb) {
  'worklet';

  var ch1 = [];
  var ch2 = [];
  var ch3 = [];
  var alpha = [];
  for (var i = 0; i < colors.length; i++) {
    var color = colors[i];
    var processedColor = (0, _Colors.processColor)(color);
    if (typeof processedColor === 'number') {
      var convertedColor = convFromRgb({
        r: (0, _Colors.red)(processedColor),
        g: (0, _Colors.green)(processedColor),
        b: (0, _Colors.blue)(processedColor)
      });
      ch1.push(convertedColor.ch1);
      ch2.push(convertedColor.ch2);
      ch3.push(convertedColor.ch3);
      alpha.push((0, _Colors.opacity)(processedColor));
    }
  }
  return {
    ch1: ch1,
    ch2: ch2,
    ch3: ch3,
    alpha: alpha
  };
};
var getInterpolateRGB = function getInterpolateRGB(colors) {
  'worklet';

  var _splitColorsIntoChann = _splitColorsIntoChannels(colors, function (color) {
      return {
        ch1: color.r,
        ch2: color.g,
        ch3: color.b
      };
    }),
    ch1 = _splitColorsIntoChann.ch1,
    ch2 = _splitColorsIntoChann.ch2,
    ch3 = _splitColorsIntoChann.ch3,
    alpha = _splitColorsIntoChann.alpha;
  return {
    r: ch1,
    g: ch2,
    b: ch3,
    a: alpha
  };
};
var getInterpolateHSV = function getInterpolateHSV(colors) {
  'worklet';

  var _splitColorsIntoChann2 = _splitColorsIntoChannels(colors, function (color) {
      var hsvColor = (0, _Colors.RGBtoHSV)(color.r, color.g, color.b);
      return {
        ch1: hsvColor.h,
        ch2: hsvColor.s,
        ch3: hsvColor.v
      };
    }),
    ch1 = _splitColorsIntoChann2.ch1,
    ch2 = _splitColorsIntoChann2.ch2,
    ch3 = _splitColorsIntoChann2.ch3,
    alpha = _splitColorsIntoChann2.alpha;
  return {
    h: ch1,
    s: ch2,
    v: ch3,
    a: alpha
  };
};
var getInterpolateLAB = function getInterpolateLAB(colors) {
  'worklet';

  var _splitColorsIntoChann3 = _splitColorsIntoChannels(colors, function (color) {
      var labColor = _index.default.oklab.convert.fromRgb(color);
      return {
        ch1: labColor.l,
        ch2: labColor.a,
        ch3: labColor.b
      };
    }),
    ch1 = _splitColorsIntoChann3.ch1,
    ch2 = _splitColorsIntoChann3.ch2,
    ch3 = _splitColorsIntoChann3.ch3,
    alpha = _splitColorsIntoChann3.alpha;
  return {
    l: ch1,
    a: ch2,
    b: ch3,
    alpha: alpha
  };
};
function interpolateColor(value, inputRange, outputRange) {
  'worklet';

  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  if (colorSpace === 'HSV') {
    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);
  } else if (colorSpace === 'RGB') {
    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);
  } else if (colorSpace === 'LAB') {
    return interpolateColorsLAB(value, inputRange, getInterpolateLAB(outputRange), options);
  }
  throw new _errors.ReanimatedError(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV', 'LAB'].`);
}
var ColorSpace = exports.ColorSpace = function (ColorSpace) {
  ColorSpace[ColorSpace["RGB"] = 0] = "RGB";
  ColorSpace[ColorSpace["HSV"] = 1] = "HSV";
  ColorSpace[ColorSpace["LAB"] = 2] = "LAB";
  return ColorSpace;
}({});
function useInterpolateConfig(inputRange, outputRange) {
  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return (0, _useSharedValue.useSharedValue)({
    inputRange: inputRange,
    outputRange: outputRange,
    colorSpace: colorSpace,
    cache: (0, _core.makeMutable)(null),
    options: options
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,