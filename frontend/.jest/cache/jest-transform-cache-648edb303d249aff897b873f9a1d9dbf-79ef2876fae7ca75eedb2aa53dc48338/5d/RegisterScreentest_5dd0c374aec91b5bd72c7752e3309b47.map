{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_RegisterScreen","_AuthContext","_reactNative2","_jsxRuntime","jest","spyOn","Alert","mockImplementation","mockNavigation","navigate","fn","describe","beforeEach","clearAllMocks","it","_render","render","jsx","AuthProvider","children","default","navigation","getAllByText","getByText","expect","toBeTruthy","_asyncToGenerator2","_render2","registerButtons","registerButton","length","fireEvent","press","waitFor","_render3","getByTestId","changeText","_render4","toHaveBeenCalledWith"],"sources":["RegisterScreen.test.tsx"],"sourcesContent":["// RegisterScreen.test.tsx 수정\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport RegisterScreen from '../../src/screens/RegisterScreen';\r\nimport { AuthProvider } from '../../src/contexts/AuthContext';\r\nimport { Alert } from 'react-native';\r\n\r\n// Mock the Alert module\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\n// Mock the navigation\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n};\r\n\r\ndescribe('RegisterScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders correctly', () => {\r\n    const { getAllByText, getByText } = render(\r\n      <AuthProvider>\r\n        <RegisterScreen navigation={mockNavigation} />\r\n      </AuthProvider>\r\n    );\r\n\r\n    // 여러개 있는 경우 getAllByText 사용하거나 더 명확한 선택자 활용\r\n    expect(getAllByText('회원가입')[0]).toBeTruthy();\r\n    expect(getByText('IExist와 함께 나의 존재를 기록해보세요')).toBeTruthy();\r\n    expect(getByText('이미 계정이 있으신가요?')).toBeTruthy();\r\n    expect(getByText('로그인')).toBeTruthy();\r\n  });\r\n\r\n  it('validates form inputs', async () => {\r\n    const { getAllByText, getByText } = render(\r\n      <AuthProvider>\r\n        <RegisterScreen navigation={mockNavigation} />\r\n      </AuthProvider>\r\n    );\r\n\r\n    // 여러개 있는 경우 getAllByText 및 인덱스 사용\r\n    const registerButtons = getAllByText('회원가입');\r\n    // 버튼으로 사용되는 회원가입 텍스트 (일반적으로 마지막 요소)\r\n    const registerButton = registerButtons[registerButtons.length - 1];\r\n    fireEvent.press(registerButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('사용자 이름을 입력해주세요')).toBeTruthy();\r\n      expect(getByText('이메일을 입력해주세요')).toBeTruthy();\r\n      expect(getByText('비밀번호를 입력해주세요')).toBeTruthy();\r\n      expect(getByText('비밀번호 확인을 입력해주세요')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('validates password confirmation', async () => {\r\n    const { getAllByText, getByText, getByTestId } = render(\r\n      <AuthProvider>\r\n        <RegisterScreen navigation={mockNavigation} />\r\n      </AuthProvider>\r\n    );\r\n\r\n    // Fill the form with mismatched passwords\r\n    fireEvent.changeText(getByTestId('input-사용자 이름'), 'testuser');\r\n    fireEvent.changeText(getByTestId('input-이메일'), 'test@example.com');\r\n    fireEvent.changeText(getByTestId('input-비밀번호'), 'password123');\r\n    fireEvent.changeText(getByTestId('input-비밀번호 확인'), 'different');\r\n    \r\n    // 여러개 있는 경우 getAllByText 및 인덱스 사용\r\n    const registerButtons = getAllByText('회원가입');\r\n    const registerButton = registerButtons[registerButtons.length - 1];\r\n    fireEvent.press(registerButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('비밀번호가 일치하지 않습니다')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('navigates to login screen', () => {\r\n    const { getByText } = render(\r\n      <AuthProvider>\r\n        <RegisterScreen navigation={mockNavigation} />\r\n      </AuthProvider>\r\n    );\r\n\r\n    fireEvent.press(getByText('로그인'));\r\n    expect(mockNavigation.navigate).toHaveBeenCalledWith('Login');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}