430fd2bdef69d8cd48160a28f139659d
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _NotificationContext = require("../contexts/NotificationContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var scaleAnim = (0, _reactNativeReanimated.useSharedValue)(0);
var NotificationBadge = function NotificationBadge(_ref) {
  var style = _ref.style,
    _ref$showZero = _ref.showZero,
    showZero = _ref$showZero === void 0 ? false : _ref$showZero,
    _ref$maxCount = _ref.maxCount,
    maxCount = _ref$maxCount === void 0 ? 99 : _ref$maxCount;
  var _useNotification = (0, _NotificationContext.useNotification)(),
    unreadCount = _useNotification.unreadCount;
  var scaleAnim = _react.default.useRef(new _reactNativeReanimated.default.Value(0)).current;
  (0, _react.useEffect)(function () {
    if (unreadCount > 0 || showZero) {
      scaleAnim.value = (0, _reactNativeReanimated.withTiming)(1.2, {
        duration: 200
      }, function () {
        scaleAnim.value = (0, _reactNativeReanimated.withTiming)(1, {
          duration: 100
        });
      });
    } else {
      scaleAnim.value = 0;
    }
  }, [unreadCount, showZero]);
  var animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        scale: scaleAnim.value
      }]
    };
  });
  return (0, _jsxRuntime.jsx)(_reactNativeReanimated.default.View, {
    style: [styles.badge, style, animatedStyle, unreadCount > 9 && styles.wideBadge, unreadCount > 99 && styles.extraWideBadge],
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.count,
      children: displayCount
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  badge: {
    minWidth: 18,
    height: 18,
    borderRadius: 9,
    backgroundColor: '#FF3B30',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 4
  },
  wideBadge: {
    minWidth: 22,
    borderRadius: 11
  },
  extraWideBadge: {
    minWidth: 28
  },
  count: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
    textAlign: 'center'
  }
});
var _default = exports.default = NotificationBadge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,