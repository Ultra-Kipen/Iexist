{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_reactNative2","_jsxRuntime","sanitizeHtml","html","replace","renderHtmlAsText","htmlContent","UserContentDisplay","_ref","content","sanitizedContent","htmlContentWithTags","plainTextContent","jsxs","View","children","jsx","Text","testID","describe","test","maliciousContent","_render","render","getByTestId","displayText","expect","props","toBe","maliciousUrl","_render2","not","toContain","_render3","sanitized","_render4","htmlText","toEqual","textOnly"],"sources":["XssProtection.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { Text, View } from 'react-native';\r\n\r\n// XSS 방어를 위한 텍스트 처리 유틸리티\r\nconst sanitizeHtml = (html: string): string => {\r\n  // 실제 앱에서는 더 강력한 라이브러리 사용 권장\r\n  return html\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#39;')\r\n    .replace(/javascript:/gi, '');\r\n};\r\n\r\n// HTML을 네이티브 텍스트로 렌더링하는 가상 함수\r\nconst renderHtmlAsText = (htmlContent: string): string => {\r\n  // 먼저 태그를 제거하고 싶은 경우, 이스케이프 처리 전의 원본 텍스트로 작업\r\n  // 이 예제에서는 이미 이스케이프된 HTML에서 원본 텍스트를 추출해야 함\r\n  return htmlContent\r\n    .replace(/<div>|<\\/div>/g, '') // 외부 div 태그 제거\r\n    .replace(/&lt;[^&]*&gt;/g, ''); // 이스케이프된 태그 제거\r\n};\r\n\r\n// 사용자 입력을 표시하는 컴포넌트\r\nconst UserContentDisplay = ({ content }: { content: string }) => {\r\n  const sanitizedContent = sanitizeHtml(content);\r\n  // 이스케이프된 HTML 콘텐츠를 포함한 문자열\r\n  const htmlContentWithTags = `<div>${sanitizedContent}</div>`;\r\n  // 이스케이프된 태그를 제거하고 텍스트만 추출\r\n  const plainTextContent = renderHtmlAsText(htmlContentWithTags);\r\n  \r\n  return (\r\n    <View>\r\n      <Text testID=\"display-text\">{sanitizedContent}</Text>\r\n      <Text testID=\"html-content\">HTML 콘텐츠: {htmlContentWithTags}</Text>\r\n      <Text testID=\"text-only\">순수 텍스트: {plainTextContent}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('XSS 방어 테스트', () => {\r\n  test('XSS 공격 시도가 포함된 콘텐츠를 안전하게 처리해야 함', () => {\r\n    const maliciousContent = '<script>alert(\"XSS\")</script>';\r\n    const { getByTestId } = render(<UserContentDisplay content={maliciousContent} />);\r\n    \r\n    const displayText = getByTestId('display-text');\r\n    expect(displayText.props.children).toBe('&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;');\r\n  });\r\n\r\n  test('JavaScript URL을 안전하게 처리해야 함', () => {\r\n    const maliciousUrl = 'javascript:alert(\"XSS\")';\r\n    const { getByTestId } = render(<UserContentDisplay content={maliciousUrl} />);\r\n    \r\n    const displayText = getByTestId('display-text');\r\n    expect(displayText.props.children).not.toContain('javascript:');\r\n  });\r\n\r\n  test('HTML 이스케이프 처리를 올바르게 수행해야 함', () => {\r\n    const htmlContent = '<div class=\"user-content\">User\\'s \"special\" content</div>';\r\n    const { getByTestId } = render(<UserContentDisplay content={htmlContent} />);\r\n    \r\n    const displayText = getByTestId('display-text');\r\n    const sanitized = '&lt;div class=&quot;user-content&quot;&gt;User&#39;s &quot;special&quot; content&lt;/div&gt;';\r\n    expect(displayText.props.children).toBe(sanitized);\r\n  });\r\n  \r\n  test('HTML 태그가 렌더링되지 않고 문자열로 표시되어야 함', () => {\r\n    const htmlContent = '<b>굵은 텍스트</b>';\r\n    const { getByTestId } = render(<UserContentDisplay content={htmlContent} />);\r\n    \r\n    const htmlText = getByTestId('html-content');\r\n    expect(htmlText.props.children).toEqual(['HTML 콘텐츠: ', `<div>&lt;b&gt;굵은 텍스트&lt;/b&gt;</div>`]);\r\n    \r\n    // 순수 텍스트 검증 - 이스케이프된 태그가 제거되고 원본 텍스트만 남아야 함\r\n    const textOnly = getByTestId('text-only');\r\n    expect(textOnly.props.children).toEqual(['순수 텍스트: ', '굵은 텍스트']);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}