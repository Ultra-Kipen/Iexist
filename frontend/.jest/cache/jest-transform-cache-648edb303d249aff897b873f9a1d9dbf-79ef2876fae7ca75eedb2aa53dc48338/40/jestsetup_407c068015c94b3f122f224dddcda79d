fdae00aee5a2c5a8e8a74d334138bbe6
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      })
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Image: 'Image',
    ScrollView: 'ScrollView',
    TurboModuleRegistry: {
      getEnforcing: jest.fn(function () {
        return {
          show: jest.fn(),
          debugRemotely: jest.fn()
        };
      })
    },
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.__DEV__ = true;
global.window = global.window || {};
var originalConsoleWarn = console.warn;
var originalConsoleError = console.error;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found'];
  if (!ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    originalConsoleWarn.apply(void 0, arguments);
  }
};
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['act(', 'inside a test was not wrapped in act', 'unmounted component', '감정 로드 오류', '챌린지 데이터 로딩 오류'];
  if (!ignoredErrors.some(function (error) {
    return typeof errorMessage === 'string' && errorMessage.includes(error);
  })) {
    originalConsoleError.apply(void 0, arguments);
  }
};
jest.useFakeTimers();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiamVzdCIsImZuIiwic3R5bGVzIiwiZmxhdHRlbiIsInN0eWxlIiwiUGxhdGZvcm0iLCJPUyIsInNlbGVjdCIsIm9iaiIsImFuZHJvaWQiLCJkZWZhdWx0IiwiRGltZW5zaW9ucyIsImdldCIsIndpZHRoIiwiaGVpZ2h0IiwiVmlldyIsIlRleHQiLCJUb3VjaGFibGVPcGFjaXR5IiwiSW1hZ2UiLCJTY3JvbGxWaWV3IiwiVHVyYm9Nb2R1bGVSZWdpc3RyeSIsImdldEVuZm9yY2luZyIsInNob3ciLCJkZWJ1Z1JlbW90ZWx5IiwiQWxlcnQiLCJhbGVydCIsIlNhZmVBcmVhUHJvdmlkZXIiLCJfcmVmIiwiY2hpbGRyZW4iLCJTYWZlQXJlYVZpZXciLCJfcmVmMiIsInVzZVNhZmVBcmVhSW5zZXRzIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwidXNlTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZ29CYWNrIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiZ2xvYmFsIiwiX19ERVZfXyIsIndpbmRvdyIsIm9yaWdpbmFsQ29uc29sZVdhcm4iLCJjb25zb2xlIiwid2FybiIsIm9yaWdpbmFsQ29uc29sZUVycm9yIiwiZXJyb3IiLCJ3YXJuaW5nTWVzc2FnZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImlnbm9yZWRXYXJuaW5ncyIsInNvbWUiLCJ3YXJuaW5nIiwiaW5jbHVkZXMiLCJhcHBseSIsImVycm9yTWVzc2FnZSIsImlnbm9yZWRFcnJvcnMiLCJ1c2VGYWtlVGltZXJzIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqZXN0LnNldHVwLnRzXHJcbi8vIEB0cy1ub2NoZWNrXHJcblxyXG4vLyDquIDroZzrsowg7ISk7KCVXHJcbmdsb2JhbC5fX0RFVl9fID0gdHJ1ZTtcclxuZ2xvYmFsLndpbmRvdyA9IGdsb2JhbC53aW5kb3cgfHwge307XHJcblxyXG4vLyDrqqjtgrkg7ISk7KCVXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4gKHtcclxuICBTdHlsZVNoZWV0OiB7XHJcbiAgICBjcmVhdGU6IGplc3QuZm4oc3R5bGVzID0+IHN0eWxlcyksXHJcbiAgICBmbGF0dGVuOiBqZXN0LmZuKHN0eWxlID0+IHN0eWxlKSxcclxuICB9LFxyXG4gIFBsYXRmb3JtOiB7XHJcbiAgICBPUzogJ2FuZHJvaWQnLFxyXG4gICAgc2VsZWN0OiBqZXN0LmZuKG9iaiA9PiBvYmouYW5kcm9pZCB8fCBvYmouZGVmYXVsdCksXHJcbiAgfSxcclxuICBEaW1lbnNpb25zOiB7XHJcbiAgICBnZXQ6IGplc3QuZm4oKCkgPT4gKHsgd2lkdGg6IDM3NSwgaGVpZ2h0OiA2NjcgfSkpLFxyXG4gIH0sXHJcbiAgVmlldzogJ1ZpZXcnLFxyXG4gIFRleHQ6ICdUZXh0JyxcclxuICBUb3VjaGFibGVPcGFjaXR5OiAnVG91Y2hhYmxlT3BhY2l0eScsXHJcbiAgSW1hZ2U6ICdJbWFnZScsXHJcbiAgU2Nyb2xsVmlldzogJ1Njcm9sbFZpZXcnLFxyXG4gIFR1cmJvTW9kdWxlUmVnaXN0cnk6IHtcclxuICAgIGdldEVuZm9yY2luZzogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICBzaG93OiBqZXN0LmZuKCksXHJcbiAgICAgIGRlYnVnUmVtb3RlbHk6IGplc3QuZm4oKSxcclxuICAgIH0pKSxcclxuICB9LFxyXG4gIEFsZXJ0OiB7XHJcbiAgICBhbGVydDogamVzdC5mbigpXHJcbiAgfSxcclxufSkpO1xyXG5cclxuLy8gVGVzdGluZy1saWJyYXJ5IOuqqO2CuSDsoJzqsbAgLSDsmKTrpZjsnZgg7JuQ7J247J20IOuQqFxyXG4vLyBqZXN0Lm1vY2soJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJywgLi4uKSDsgq3soJxcclxuXHJcbi8vIOqyveqzoCDtlYTthLDrp4FcclxuY29uc3Qgb3JpZ2luYWxDb25zb2xlV2FybiA9IGNvbnNvbGUud2FybjtcclxuY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yO1xyXG5cclxuY29uc29sZS53YXJuID0gKC4uLmFyZ3MpID0+IHtcclxuICBjb25zdCB3YXJuaW5nTWVzc2FnZSA9IGFyZ3NbMF0gfHwgJyc7XHJcbiAgXHJcbiAgY29uc3QgaWdub3JlZFdhcm5pbmdzID0gW1xyXG4gICAgJ1Byb2dyZXNzQmFyQW5kcm9pZCBoYXMgYmVlbiBleHRyYWN0ZWQnLFxyXG4gICAgJ0NsaXBib2FyZCBoYXMgYmVlbiBleHRyYWN0ZWQnLFxyXG4gICAgJ1R1cmJvTW9kdWxlUmVnaXN0cnkuZ2V0RW5mb3JjaW5nJyxcclxuICAgICdEZXZNZW51IGNvdWxkIG5vdCBiZSBmb3VuZCdcclxuICBdO1xyXG4gIFxyXG4gIGlmICghaWdub3JlZFdhcm5pbmdzLnNvbWUod2FybmluZyA9PiBcclxuICAgIHR5cGVvZiB3YXJuaW5nTWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgd2FybmluZ01lc3NhZ2UuaW5jbHVkZXMod2FybmluZylcclxuICApKSB7XHJcbiAgICBvcmlnaW5hbENvbnNvbGVXYXJuKC4uLmFyZ3MpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xyXG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9IGFyZ3NbMF0gfHwgJyc7XHJcbiAgXHJcbiAgY29uc3QgaWdub3JlZEVycm9ycyA9IFtcclxuICAgICdhY3QoJyxcclxuICAgICdpbnNpZGUgYSB0ZXN0IHdhcyBub3Qgd3JhcHBlZCBpbiBhY3QnLFxyXG4gICAgJ3VubW91bnRlZCBjb21wb25lbnQnLFxyXG4gICAgJ+qwkOyglSDroZzrk5wg7Jik66WYJyxcclxuICAgICfssYzrprDsp4Ag642w7J207YSwIOuhnOuUqSDsmKTrpZgnXHJcbiAgXTtcclxuICBcclxuICBpZiAoIWlnbm9yZWRFcnJvcnMuc29tZShlcnJvciA9PiBcclxuICAgIHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIGVycm9yTWVzc2FnZS5pbmNsdWRlcyhlcnJvcilcclxuICApKSB7XHJcbiAgICBvcmlnaW5hbENvbnNvbGVFcnJvciguLi5hcmdzKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyDri6Trpbgg66qo7YK565OkXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JywgKCkgPT4gKHtcclxuICBTYWZlQXJlYVByb3ZpZGVyOiAoeyBjaGlsZHJlbiB9KSA9PiBjaGlsZHJlbixcclxuICBTYWZlQXJlYVZpZXc6ICh7IGNoaWxkcmVuIH0pID0+IGNoaWxkcmVuLFxyXG4gIHVzZVNhZmVBcmVhSW5zZXRzOiAoKSA9PiAoeyB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAsIGxlZnQ6IDAgfSksXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcclxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xyXG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gIH0pLFxyXG59KSk7XHJcblxyXG4vLyDtg4DsnbTrqLgg66qo7YK5XHJcbmplc3QudXNlRmFrZVRpbWVycygpOyJdLCJtYXBwaW5ncyI6IkFBUUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRTtFQUFBLE9BQU87SUFDL0JDLFVBQVUsRUFBRTtNQUNWQyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFVBQUFDLE1BQU07UUFBQSxPQUFJQSxNQUFNO01BQUEsRUFBQztNQUNqQ0MsT0FBTyxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFBRyxLQUFLO1FBQUEsT0FBSUEsS0FBSztNQUFBO0lBQ2pDLENBQUM7SUFDREMsUUFBUSxFQUFFO01BQ1JDLEVBQUUsRUFBRSxTQUFTO01BQ2JDLE1BQU0sRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQU8sR0FBRztRQUFBLE9BQUlB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