ac12a1bf81b55f30799a3a6d16cccd4c
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    default: {
      interceptors: {
        request: {
          use: jest.fn()
        },
        response: {
          use: jest.fn()
        }
      },
      get: jest.fn(),
      post: jest.fn(),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
}, {
  virtual: true
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve('test_token');
    }),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser',
        nickname: 'Test User'
      },
      isAuthenticated: true,
      login: jest.fn(),
      logout: jest.fn()
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn(),
      logEmotion: jest.fn()
    })
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  var React = require('react');
  return function MockIcon(props) {
    return React.createElement('MockIcon', props, null);
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var createMockComponent = function createMockComponent(name) {
    var component = function component(props) {
      return React.createElement(name, props, props.children);
    };
    return component;
  };
  var Card = createMockComponent('Card');
  Card.Title = createMockComponent('Card.Title');
  Card.Content = createMockComponent('Card.Content');
  Card.Actions = createMockComponent('Card.Actions');
  var Avatar = createMockComponent('Avatar');
  Avatar.Icon = createMockComponent('Avatar.Icon');
  var Dialog = createMockComponent('Dialog');
  Dialog.Title = createMockComponent('Dialog.Title');
  Dialog.Content = createMockComponent('Dialog.Content');
  Dialog.Actions = createMockComponent('Dialog.Actions');
  var TextInput = createMockComponent('TextInput');
  TextInput.Icon = createMockComponent('TextInput.Icon');
  return {
    Text: createMockComponent('Text'),
    Button: createMockComponent('Button'),
    Chip: createMockComponent('Chip'),
    TextInput: TextInput,
    Card: Card,
    Avatar: Avatar,
    IconButton: createMockComponent('IconButton'),
    FAB: createMockComponent('FAB'),
    Divider: createMockComponent('Divider'),
    Surface: createMockComponent('Surface'),
    ActivityIndicator: createMockComponent('ActivityIndicator'),
    Portal: createMockComponent('Portal'),
    Dialog: Dialog,
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        onSurface: '#000000',
        disabled: 'rgba(0, 0, 0, 0.26)',
        placeholder: 'rgba(0, 0, 0, 0.54)',
        backdrop: 'rgba(0, 0, 0, 0.5)',
        notification: '#f50057'
      }
    })
  };
});
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  var React = require('react');
  var View = require('react-native').View;
  var Text = require('react-native').Text;
  return {
    default: function MockHomeScreen() {
      return React.createElement(View, {
        testID: 'mock-home-screen'
      }, React.createElement(Text, null, '모킹된 홈 스크린'));
    },
    handlePostSubmission: jest.fn().mockReturnValue(true),
    handleImageUploadAction: jest.fn(),
    handleLikeAction: jest.fn(),
    handleCommentAction: jest.fn(),
    renderEmotionIcon: jest.fn().mockReturnValue(null),
    renderEmotionSelector: jest.fn().mockReturnValue(null),
    renderPostInput: jest.fn().mockReturnValue(null),
    renderPosts: jest.fn().mockReturnValue([])
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen', function () {
  it('모킹된 컴포넌트가 렌더링되는지 확인', function () {
    var MockHomeScreen = require("../../src/screens/HomeScreen").default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockHomeScreen, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('mock-home-screen')).toBeTruthy();
    expect(getByText('모킹된 홈 스크린')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,