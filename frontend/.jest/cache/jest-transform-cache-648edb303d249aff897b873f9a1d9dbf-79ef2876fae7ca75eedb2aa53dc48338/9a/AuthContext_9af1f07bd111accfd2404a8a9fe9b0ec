a99b6e3b44bccb181441b2746116513c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAuth = exports.AuthProvider = exports.AuthContext = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _authService = _interopRequireDefault(require("../services/api/authService"));
var _jsxRuntime = require("react/jsx-runtime");
var createContext = _react.default.createContext,
  useState = _react.default.useState,
  useContext = _react.default.useContext,
  useEffect = _react.default.useEffect;
var defaultAuthContextValue = {
  user: null,
  isLoading: true,
  isAuthenticated: false,
  login: function login() {
    return Promise.resolve();
  },
  register: function register() {
    return Promise.resolve();
  },
  logout: function logout() {
    return Promise.resolve();
  },
  updateUser: function updateUser() {}
};
var AuthContext = exports.AuthContext = createContext(defaultAuthContextValue);
var useAuth = exports.useAuth = function useAuth() {
  return useContext(AuthContext);
};
var AuthProvider = exports.AuthProvider = function AuthProvider(_ref) {
  var children = _ref.children;
  var _useState = useState(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    user = _useState2[0],
    setUser = _useState2[1];
  var _useState3 = useState(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  useEffect(function () {
    var loadUser = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var userJson = yield _asyncStorage.default.getItem('user');
          if (userJson) {
            setUser(JSON.parse(userJson));
            setIsLoading(false);
          } else {
            setIsLoading(false);
          }
        } catch (error) {
          console.error('사용자 정보 로드 실패:', error);
          setIsLoading(false);
        }
      });
      return function loadUser() {
        return _ref2.apply(this, arguments);
      };
    }();
    loadUser();
  }, []);
  var login = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (credentials) {
      setIsLoading(true);
      try {
        var response = yield _authService.default.login(credentials);
        var _response$data$data = response.data.data,
          token = _response$data$data.token,
          _user = _response$data$data.user;
        yield _asyncStorage.default.setItem('auth_token', token);
        yield _asyncStorage.default.setItem('user', JSON.stringify(_user));
        setUser(_user);
        setIsLoading(false);
      } catch (error) {
        setIsLoading(false);
        throw error;
      }
    });
    return function login(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var register = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (data) {
      setIsLoading(true);
      try {
        var response = yield _authService.default.register(data);
        var _response$data$data2 = response.data.data,
          token = _response$data$data2.token,
          _user2 = _response$data$data2.user;
        yield _asyncStorage.default.setItem('auth_token', token);
        yield _asyncStorage.default.setItem('user', JSON.stringify(_user2));
        setUser(_user2);
        setIsLoading(false);
      } catch (error) {
        setIsLoading(false);
        throw error;
      }
    });
    return function register(_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  var logout = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      setIsLoading(true);
      try {
        yield _authService.default.logout();
      } catch (error) {
        console.error('로그아웃 API 오류:', error);
      } finally {
        yield _asyncStorage.default.removeItem('auth_token');
        yield _asyncStorage.default.removeItem('user');
        setUser(null);
        setIsLoading(false);
      }
    });
    return function logout() {
      return _ref5.apply(this, arguments);
    };
  }();
  var updateUser = function updateUser(updatedUser) {
    setUser(updatedUser);
    _asyncStorage.default.setItem('user', JSON.stringify(updatedUser));
  };
  return (0, _jsxRuntime.jsx)(AuthContext.Provider, {
    value: {
      user: user,
      isLoading: isLoading,
      isAuthenticated: !!user,
      login: login,
      register: register,
      logout: logout,
      updateUser: updateUser
    },
    children: children
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,