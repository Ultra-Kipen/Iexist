0d77970dc7bc0485f922d16e39be2d75
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStore = exports.StoreProvider = exports.StoreContext = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reducer = require("./reducer");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function cov_11ebdwjdsh() {
  var path = "C:\\app_build\\Iexist\\frontend\\src\\store\\StoreContext.ts";
  var hash = "af0c61330799d9b6613d2199c96aba0ef94ca03a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\app_build\\Iexist\\frontend\\src\\store\\StoreContext.ts",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 39
        },
        end: {
          line: 15,
          column: 1
        }
      },
      "1": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 22
        }
      },
      "2": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 18,
          column: 73
        }
      },
      "3": {
        start: {
          line: 26,
          column: 59
        },
        end: {
          line: 34,
          column: 1
        }
      },
      "4": {
        start: {
          line: 27,
          column: 28
        },
        end: {
          line: 27,
          column: 61
        }
      },
      "5": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 33,
          column: 4
        }
      },
      "6": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 54
        }
      },
      "7": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 37,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 12
          },
          end: {
            line: 14,
            column: 13
          }
        },
        loc: {
          start: {
            line: 14,
            column: 18
          },
          end: {
            line: 14,
            column: 22
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 59
          },
          end: {
            line: 26,
            column: 60
          }
        },
        loc: {
          start: {
            line: 26,
            column: 77
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 24
          },
          end: {
            line: 37,
            column: 25
          }
        },
        loc: {
          start: {
            line: 37,
            column: 30
          },
          end: {
            line: 37,
            column: 54
          }
        },
        line: 37
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "af0c61330799d9b6613d2199c96aba0ef94ca03a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_11ebdwjdsh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11ebdwjdsh();
var defaultValue = (cov_11ebdwjdsh().s[0]++, {
  state: _reducer.initialState,
  dispatch: function dispatch() {
    cov_11ebdwjdsh().f[0]++;
    cov_11ebdwjdsh().s[1]++;
    return null;
  }
});
var StoreContext = exports.StoreContext = (cov_11ebdwjdsh().s[2]++, (0, _react.createContext)(defaultValue));
cov_11ebdwjdsh().s[3]++;
var StoreProvider = exports.StoreProvider = function StoreProvider(_ref) {
  var children = _ref.children;
  cov_11ebdwjdsh().f[1]++;
  var _ref2 = (cov_11ebdwjdsh().s[4]++, (0, _react.useReducer)(_reducer.reducer, _reducer.initialState)),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    state = _ref3[0],
    dispatch = _ref3[1];
  cov_11ebdwjdsh().s[5]++;
  return _react.default.createElement(StoreContext.Provider, {
    value: {
      state: state,
      dispatch: dispatch
    }
  }, children);
};
cov_11ebdwjdsh().s[6]++;
var useStore = exports.useStore = function useStore() {
  cov_11ebdwjdsh().f[2]++;
  cov_11ebdwjdsh().s[7]++;
  return (0, _react.useContext)(StoreContext);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVkdWNlciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImNvdl8xMWViZHdqZHNoIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJzIiwiZiIsImIiLCJfY292ZXJhZ2VTY2hlbWEiLCJjb3ZlcmFnZSIsImFjdHVhbENvdmVyYWdlIiwiZGVmYXVsdFZhbHVlIiwic3RhdGUiLCJpbml0aWFsU3RhdGUiLCJkaXNwYXRjaCIsIlN0b3JlQ29udGV4dCIsImV4cG9ydHMiLCJjcmVhdGVDb250ZXh0IiwiU3RvcmVQcm92aWRlciIsIl9yZWYiLCJjaGlsZHJlbiIsIl9yZWYyIiwidXNlUmVkdWNlciIsInJlZHVjZXIiLCJfcmVmMyIsIl9zbGljZWRUb0FycmF5MiIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJ1c2VTdG9yZSIsInVzZUNvbnRleHQiXSwic291cmNlcyI6WyJTdG9yZUNvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVJlZHVjZXIsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVkdWNlciwgaW5pdGlhbFN0YXRlIH0gZnJvbSAnLi9yZWR1Y2VyJztcclxuaW1wb3J0IHsgQWN0aW9uLCBBcHBTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLy8gQ29udGV4dCDtg4DsnoUg7KCV7J2YXHJcbnR5cGUgU3RvcmVDb250ZXh0VHlwZSA9IHtcclxuICBzdGF0ZTogQXBwU3RhdGU7XHJcbiAgZGlzcGF0Y2g6IFJlYWN0LkRpc3BhdGNoPEFjdGlvbj47XHJcbn07XHJcblxyXG4vLyDquLDrs7jqsJIg7IOd7ISxXHJcbmNvbnN0IGRlZmF1bHRWYWx1ZTogU3RvcmVDb250ZXh0VHlwZSA9IHtcclxuICBzdGF0ZTogaW5pdGlhbFN0YXRlLFxyXG4gIGRpc3BhdGNoOiAoKSA9PiBudWxsLFxyXG59O1xyXG5cclxuLy8g7Luo7YWN7Iqk7Yq4IOyDneyEsVxyXG5leHBvcnQgY29uc3QgU3RvcmVDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxTdG9yZUNvbnRleHRUeXBlPihkZWZhdWx0VmFsdWUpO1xyXG5cclxuLy8gUHJvcHMg7YOA7J6FIOygleydmFxyXG50eXBlIFN0b3JlUHJvdmlkZXJQcm9wcyA9IHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG59O1xyXG5cclxuLy8gUHJvdmlkZXIg7Lu07Y+s64SM7Yq4XHJcbmV4cG9ydCBjb25zdCBTdG9yZVByb3ZpZGVyOiBSZWFjdC5GQzxTdG9yZVByb3ZpZGVyUHJvcHM+ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gdXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xyXG4gIFxyXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxyXG4gICAgU3RvcmVDb250ZXh0LlByb3ZpZGVyLFxyXG4gICAgeyB2YWx1ZTogeyBzdGF0ZSwgZGlzcGF0Y2ggfSB9LFxyXG4gICAgY2hpbGRyZW5cclxuICApO1xyXG59O1xyXG5cclxuLy8g7Luk7Iqk7YWAIO2bhVxyXG5leHBvcnQgY29uc3QgdXNlU3RvcmUgPSAoKSA9PiB1c2VDb250ZXh0KFN0b3JlQ29udGV4dCk7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxRQUFBLEdBQUFELE9BQUE7QUFBa0QsU0FBQUUseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFKLHdCQUFBSSxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsV0FBQUssT0FBQSxFQUFBTCxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBLFlBQUFOLENBQUEsQ0FBQUgsT0FBQSxHQUFBTCxDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFXLGVBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsSUFBQTtFQUFBLElBQUFDLE1BQUEsT0FBQUMsUUFBQTtFQUFBLElBQUFDLEdBQUE7RUFBQSxJQUFBQyxZQUFBO0lBQUFMLElBQUE7SUFBQU0sWUFBQTtNQUFBO1FBQUFDLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7SUFBQTtJQUFBRSxLQUFBO01BQUE7UUFBQUMsSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQUksSUFBQTtRQUFBQyxJQUFBO1VBQUFOLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFLLEdBQUE7VUFBQVAsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQU8sU0FBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLENBQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO0lBQUFDLGVBQUE7SUFBQWxCLElBQUE7RUFBQTtFQUFBLElBQUFtQixRQUFBLEdBQUFsQixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWdCLFFBQUEsQ0FBQXBCLElBQUEsS0FBQW9CLFFBQUEsQ0FBQXBCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFtQixRQUFBLENBQUFwQixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFnQixjQUFBLEdBQUFELFFBQUEsQ0FBQXBCLElBQUE7RUFBQTtJQUFBRCxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBc0IsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQXRCLGNBQUE7QUFVbEQsSUFBTXVCLFlBQThCLElBQUF2QixjQUFBLEdBQUFpQixDQUFBLE9BQUc7RUFDckNPLEtBQUssRUFBRUMscUJBQVk7RUFDbkJDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBLEVBQVE7SUFBQTFCLGNBQUEsR0FBQWtCLENBQUE7SUFBQWxCLGNBQUEsR0FBQWlCLENBQUE7SUFBQSxXQUFJO0VBQUQ7QUFDckIsQ0FBQztBQUdNLElBQU1VLFlBQVksR0FBQUMsT0FBQSxDQUFBRCxZQUFBLElBQUEzQixjQUFBLEdBQUFpQixDQUFBLE9BQUcsSUFBQVksb0JBQWEsRUFBbUJOLFlBQVksQ0FBQztBQUFDdkIsY0FBQSxHQUFBaUIsQ0FBQTtBQVFuRSxJQUFNYSxhQUEyQyxHQUFBRixPQUFBLENBQUFFLGFBQUEsR0FBRyxTQUE5Q0EsYUFBMkNBLENBQUFDLElBQUEsRUFBcUI7RUFBQSxJQUFmQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtFQUFBaEMsY0FBQSxHQUFBa0IsQ0FBQTtFQUNwRSxJQUFBZSxLQUFBLElBQUFqQyxjQUFBLEdBQUFpQixDQUFBLE9BQTBCLElBQUFpQixpQkFBVSxFQUFDQyxnQkFBTyxFQUFFVixxQkFBWSxDQUFDO0lBQUFXLEtBQUEsT0FBQUMsZUFBQSxDQUFBbkQsT0FBQSxFQUFBK0MsS0FBQTtJQUFwRFQsS0FBSyxHQUFBWSxLQUFBO0lBQUVWLFFBQVEsR0FBQVUsS0FBQTtFQUFzQ3BDLGNBQUEsR0FBQWlCLENBQUE7RUFFNUQsT0FBT3FCLGNBQUssQ0FBQ0MsYUFBYSxDQUN4QlosWUFBWSxDQUFDYSxRQUFRLEVBQ3JCO0lBQUVDLEtBQUssRUFBRTtNQUFFakIsS0FBSyxFQUFMQSxLQUFLO01BQUVFLFFBQVEsRUFBUkE7SUFBUztFQUFFLENBQUMsRUFDOUJNLFFBQ0YsQ0FBQztBQUNILENBQUM7QUFBQ2hDLGNBQUEsR0FBQWlCLENBQUE7QUFHSyxJQUFNeUIsUUFBUSxHQUFBZCxPQUFBLENBQUFjLFFBQUEsR0FBRyxTQUFYQSxRQUFRQSxDQUFBLEVBQVM7RUFBQTFDLGNBQUEsR0FBQWtCLENBQUE7RUFBQWxCLGNBQUEsR0FBQWlCLENBQUE7RUFBQSxXQUFBMEIsaUJBQVUsRUFBQ2hCLFlBQVksQ0FBQztBQUFELENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=