{"version":3,"names":["cache","Map","setCache","key","value","ttl","item","timestamp","Date","now","expiry","set","getCache","get","delete","removeCache","clearCache","clear","getCacheKeys","Array","from","keys","getCacheSize","size","isCacheExpired","MemoryCache","exports","options","arguments","length","undefined","_classCallCheck2","default","maxSize","_createClass2","oldestKey","getOldestKey","cleanup","_ref","entries","_ref2","_slicedToArray2","oldestTime","Infinity","_ref3","_ref4","globalCache"],"sources":["cache.ts"],"sourcesContent":["// utils/cache.ts\r\n// 간단한 인메모리 캐시 구현 (함수형 인터페이스)\r\n\r\ninterface CacheItem<T> {\r\n  value: T;\r\n  timestamp: number;\r\n  expiry: number | null;\r\n}\r\n\r\n// 캐시 저장소\r\nconst cache: Map<string, CacheItem<any>> = new Map();\r\n\r\n/**\r\n * 캐시에 데이터 저장\r\n * @param key 캐시 키\r\n * @param value 저장할 값\r\n * @param ttl 만료 시간(초), 지정하지 않으면 만료되지 않음\r\n */\r\nexport function setCache<T>(key: string, value: T, ttl?: number): void {\r\n  const item: CacheItem<T> = {\r\n    value,\r\n    timestamp: Date.now(),\r\n    expiry: ttl ? Date.now() + ttl * 1000 : null\r\n  };\r\n  \r\n  cache.set(key, item);\r\n}\r\n\r\n/**\r\n * 캐시에서 데이터 조회\r\n * @param key 캐시 키\r\n * @returns 캐시된 값 또는 만료된 경우 null\r\n */\r\nexport function getCache<T>(key: string): T | null {\r\n  const item = cache.get(key);\r\n  \r\n  if (!item) {\r\n    return null;\r\n  }\r\n  \r\n  // 만료 체크\r\n  if (item.expiry && Date.now() > item.expiry) {\r\n    cache.delete(key);\r\n    return null;\r\n  }\r\n  \r\n  return item.value as T;\r\n}\r\n\r\n/**\r\n * 캐시에서 특정 키의 데이터 제거\r\n * @param key 제거할 캐시 키\r\n */\r\nexport function removeCache(key: string): void {\r\n  cache.delete(key);\r\n}\r\n\r\n/**\r\n * 캐시 전체 비우기\r\n */\r\nexport function clearCache(): void {\r\n  cache.clear();\r\n}\r\n\r\n/**\r\n * 모든 캐시 키 목록 반환\r\n * @returns 캐시 키 배열\r\n */\r\nexport function getCacheKeys(): string[] {\r\n  return Array.from(cache.keys());\r\n}\r\n\r\n/**\r\n * 현재 캐시에 저장된 항목 수 반환\r\n * @returns 캐시 크기\r\n */\r\nexport function getCacheSize(): number {\r\n  return cache.size;\r\n}\r\n\r\n/**\r\n * 특정 캐시 키가 만료되었는지 확인\r\n * @param key 확인할 캐시 키\r\n * @returns 만료 여부 (만료되었거나 존재하지 않으면 true)\r\n */\r\nexport function isCacheExpired(key: string): boolean {\r\n  const item = cache.get(key);\r\n  \r\n  if (!item) {\r\n    return true;\r\n  }\r\n  \r\n  if (item.expiry === null) {\r\n    return false;\r\n  }\r\n  \r\n  return Date.now() > item.expiry;\r\n}\r\n\r\n// 클래스 기반 캐시 구현\r\nexport interface CacheOptions {\r\n  /** 캐시 유효 시간 (밀리초) */\r\n  ttl?: number;\r\n  /** 최대 캐시 항목 수 */\r\n  maxSize?: number;\r\n}\r\n\r\ninterface CacheClassItem<T> {\r\n  value: T;\r\n  timestamp: number;\r\n}\r\n\r\nexport class MemoryCache {\r\n  private cache: Map<string, CacheClassItem<any>> = new Map();\r\n  private ttl: number;\r\n  private maxSize: number;\r\n\r\n  constructor(options: CacheOptions = {}) {\r\n    this.ttl = options.ttl || 5 * 60 * 1000; // 기본 5분\r\n    this.maxSize = options.maxSize || 100; // 기본 100개 항목\r\n  }\r\n\r\n  /**\r\n   * 캐시에 항목 설정\r\n   * @param key 캐시 키\r\n   * @param value 캐시할 값\r\n   * @param ttl 특정 항목의 TTL (옵션)\r\n   */\r\n  set<T>(key: string, value: T, ttl?: number): void {\r\n    // 캐시 크기 제한 초과 시 가장 오래된 항목 제거\r\n    if (this.cache.size >= this.maxSize) {\r\n      const oldestKey = this.getOldestKey();\r\n      if (oldestKey) {\r\n        this.cache.delete(oldestKey);\r\n      }\r\n    }\r\n\r\n    this.cache.set(key, {\r\n      value,\r\n      timestamp: Date.now() + (ttl || this.ttl),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 캐시에서 항목 가져오기\r\n   * @param key 캐시 키\r\n   * @returns 캐시된 값 또는 undefined\r\n   */\r\n  get<T>(key: string): T | undefined {\r\n    const item = this.cache.get(key);\r\n    \r\n    // 항목이 없거나 만료된 경우\r\n    if (!item || Date.now() > item.timestamp) {\r\n      if (item) {\r\n        this.cache.delete(key); // 만료된 항목 제거\r\n      }\r\n      return undefined;\r\n    }\r\n    \r\n    return item.value as T;\r\n  }\r\n\r\n  /**\r\n   * 캐시에서 항목 삭제\r\n   * @param key 캐시 키\r\n   */\r\n  delete(key: string): boolean {\r\n    return this.cache.delete(key);\r\n  }\r\n\r\n  /**\r\n   * 모든 캐시 항목 삭제\r\n   */\r\n  clear(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  /**\r\n   * 만료된 모든 캐시 항목 삭제\r\n   */\r\n  cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [key, item] of this.cache.entries()) {\r\n      if (now > item.timestamp) {\r\n        this.cache.delete(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 가장 오래된 캐시 키 반환\r\n   */\r\n  private getOldestKey(): string | null {\r\n    let oldestKey: string | null = null;\r\n    let oldestTime = Infinity;\r\n\r\n    for (const [key, item] of this.cache.entries()) {\r\n      if (item.timestamp < oldestTime) {\r\n        oldestTime = item.timestamp;\r\n        oldestKey = key;\r\n      }\r\n    }\r\n\r\n    return oldestKey;\r\n  }\r\n\r\n  /**\r\n   * 현재 캐시 크기 반환\r\n   */\r\n  get size(): number {\r\n    return this.cache.size;\r\n  }\r\n}\r\n\r\n// 전역 캐시 인스턴스\r\nexport const globalCache = new MemoryCache();"],"mappings":"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","ignoreList":[]}