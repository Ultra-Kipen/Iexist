4d0204169fb9d7a663d4386624125f19
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'primary' : _ref$type,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    style = _ref.style,
    textStyle = _ref.textStyle,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon;
  var getButtonStyle = function getButtonStyle() {
    var buttonStyle = {};
    switch (type) {
      case 'primary':
        buttonStyle = styles.primaryButton;
        break;
      case 'secondary':
        buttonStyle = styles.secondaryButton;
        break;
      case 'outline':
        buttonStyle = styles.outlineButton;
        break;
      case 'text':
        buttonStyle = styles.textButton;
        break;
    }
    switch (size) {
      case 'small':
        buttonStyle = Object.assign({}, buttonStyle, styles.smallButton);
        break;
      case 'medium':
        buttonStyle = Object.assign({}, buttonStyle, styles.mediumButton);
        break;
      case 'large':
        buttonStyle = Object.assign({}, buttonStyle, styles.largeButton);
        break;
    }
    if (disabled) {
      buttonStyle = Object.assign({}, buttonStyle, styles.disabledButton);
    }
    return buttonStyle;
  };
  var getTextStyle = function getTextStyle() {
    var textStyleObj = {};
    switch (type) {
      case 'primary':
        textStyleObj = styles.primaryText;
        break;
      case 'secondary':
        textStyleObj = styles.secondaryText;
        break;
      case 'outline':
        textStyleObj = styles.outlineText;
        break;
      case 'text':
        textStyleObj = styles.textOnlyText;
        break;
    }
    switch (size) {
      case 'small':
        textStyleObj = Object.assign({}, textStyleObj, styles.smallText);
        break;
      case 'medium':
        textStyleObj = Object.assign({}, textStyleObj, styles.mediumText);
        break;
      case 'large':
        textStyleObj = Object.assign({}, textStyleObj, styles.largeText);
        break;
    }
    if (disabled) {
      textStyleObj = Object.assign({}, textStyleObj, styles.disabledText);
    }
    return textStyleObj;
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: [getButtonStyle(), style],
    onPress: onPress,
    disabled: disabled || loading,
    activeOpacity: 0.7,
    children: [leftIcon && !loading && leftIcon, loading ? (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      size: "small",
      color: type === 'primary' ? '#FFFFFF' : '#4A90E2'
    }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: [getTextStyle(), textStyle],
      children: title
    }), rightIcon && !loading && rightIcon]
  });
};
var styles = _reactNative.StyleSheet.create({
  primaryButton: {
    backgroundColor: '#4A90E2',
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row'
  },
  secondaryButton: {
    backgroundColor: '#E1EFF9',
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row'
  },
  outlineButton: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#4A90E2',
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row'
  },
  textButton: {
    backgroundColor: 'transparent',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'row',
    paddingHorizontal: 0
  },
  smallButton: {
    paddingVertical: 6,
    paddingHorizontal: 12,
    minWidth: 80
  },
  mediumButton: {
    paddingVertical: 10,
    paddingHorizontal: 16,
    minWidth: 100
  },
  largeButton: {
    paddingVertical: 14,
    paddingHorizontal: 20,
    minWidth: 120
  },
  disabledButton: {
    backgroundColor: '#E5E5E5',
    borderColor: '#E5E5E5'
  },
  primaryText: {
    color: '#FFFFFF',
    fontWeight: '600'
  },
  secondaryText: {
    color: '#4A90E2',
    fontWeight: '600'
  },
  outlineText: {
    color: '#4A90E2',
    fontWeight: '600'
  },
  textOnlyText: {
    color: '#4A90E2',
    fontWeight: '500'
  },
  smallText: {
    fontSize: 12
  },
  mediumText: {
    fontSize: 14
  },
  largeText: {
    fontSize: 16
  },
  disabledText: {
    color: '#9E9E9E'
  }
});
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,