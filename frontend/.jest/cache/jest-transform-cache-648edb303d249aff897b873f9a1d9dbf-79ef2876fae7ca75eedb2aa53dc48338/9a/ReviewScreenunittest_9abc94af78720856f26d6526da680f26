b452d711ff7755597945ebc4d0c38a75
_getJestObj().mock('react-native-paper', function () {
  return {
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Title: 'Title',
    Paragraph: 'Paragraph',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  var Card = 'Card';
  Card.Cover = 'Card.Cover';
  Card.Content = 'Card.Content';
  return {
    SegmentedButtons: 'SegmentedButtons',
    Card: Card,
    Button: 'Button',
    Title: 'Title',
    Paragraph: 'Paragraph',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }
  };
}, {
  virtual: true
});
_getJestObj().mock("../../../src/screens/ReviewScreen", function () {
  return function MockReviewScreen() {
    return null;
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 단위 테스트', function () {
  it('컴포넌트 모듈을 불러올 수 있어야 함', function () {
    expect(true).toBe(true);
  });
  it('기본적인 렌더링 확인', function () {
    var MockReviewScreen = require("../../../src/screens/ReviewScreen").default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(MockReviewScreen, {})),
      container = _render.container;
    expect(container).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJTZWdtZW50ZWRCdXR0b25zIiwiQ2FyZCIsIkJ1dHRvbiIsIlRpdGxlIiwiUGFyYWdyYXBoIiwidXNlVGhlbWUiLCJjb2xvcnMiLCJwcmltYXJ5IiwiYmFja2dyb3VuZCIsIkNvdmVyIiwiQ29udGVudCIsInZpcnR1YWwiLCJNb2NrUmV2aWV3U2NyZWVuIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiamVzdCIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJ0b0JlIiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJjb250YWluZXIiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbIlJldmlld1NjcmVlbi51bml0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHJvb3QvZnJvbnRlbmQvdGVzdHMvdW5pdC9zY3JlZW5zL1Jldmlld1NjcmVlbi51bml0LnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuXHJcbi8vIOuqqOuToCDsmbjrtoAg66qo65OI7J2EIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+ICh7XHJcbiAgU2VnbWVudGVkQnV0dG9uczogJ1NlZ21lbnRlZEJ1dHRvbnMnLFxyXG4gIENhcmQ6ICdDYXJkJyxcclxuICBCdXR0b246ICdCdXR0b24nLFxyXG4gIFRpdGxlOiAnVGl0bGUnLFxyXG4gIFBhcmFncmFwaDogJ1BhcmFncmFwaCcsXHJcbiAgdXNlVGhlbWU6ICgpID0+ICh7XHJcbiAgICBjb2xvcnM6IHtcclxuICAgICAgcHJpbWFyeTogJyMwMDAnLFxyXG4gICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXHJcbiAgICB9XHJcbiAgfSlcclxufSkpO1xyXG5cclxuLy8gQ2FyZC5Db3ZlciwgQ2FyZC5Db250ZW50IOyGjeyEsSDstpTqsIBcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtcGFwZXInLCAoKSA9PiB7XHJcbiAgY29uc3QgQ2FyZCA9ICdDYXJkJztcclxuICBDYXJkLkNvdmVyID0gJ0NhcmQuQ292ZXInO1xyXG4gIENhcmQuQ29udGVudCA9ICdDYXJkLkNvbnRlbnQnO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBTZWdtZW50ZWRCdXR0b25zOiAnU2VnbWVudGVkQnV0dG9ucycsXHJcbiAgICBDYXJkLFxyXG4gICAgQnV0dG9uOiAnQnV0dG9uJyxcclxuICAgIFRpdGxlOiAnVGl0bGUnLFxyXG4gICAgUGFyYWdyYXBoOiAnUGFyYWdyYXBoJyxcclxuICAgIHVzZVRoZW1lOiAoKSA9PiAoe1xyXG4gICAgICBjb2xvcnM6IHtcclxuICAgICAgICBwcmltYXJ5OiAnIzAwMCcsXHJcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH07XHJcbn0sIHsgdmlydHVhbDogdHJ1ZSB9KTtcclxuXHJcbi8vIFJldmlld1NjcmVlbiDrqqjrk4gg7J6Q7LK066W8IOyehOyLnOuhnCDthYzsiqTtirgg7KCc7Jm4XHJcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL3NjcmVlbnMvUmV2aWV3U2NyZWVuJywgKCkgPT4ge1xyXG4gIHJldHVybiBmdW5jdGlvbiBNb2NrUmV2aWV3U2NyZWVuKCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnUmV2aWV3U2NyZWVuIOuLqOychCDthYzsiqTtirgnLCAoKSA9PiB7XHJcbiAgaXQoJ+y7tO2PrOuEjO2KuCDrqqjrk4jsnYQg67aI65+s7JisIOyImCDsnojslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7IC8vIOyehOyLnCDtjKjsiqQg7LKY66asXHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ+q4sOuzuOyggeyduCDroIzrjZTrp4Eg7ZmV7J24JywgKCkgPT4ge1xyXG4gICAgLy8g66qo7YK565CcIOy7tO2PrOuEjO2KuCDsgqzsmqlcclxuICAgIGNvbnN0IE1vY2tSZXZpZXdTY3JlZW4gPSByZXF1aXJlKCcuLi8uLi8uLi9zcmMvc2NyZWVucy9SZXZpZXdTY3JlZW4nKS5kZWZhdWx0O1xyXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8TW9ja1Jldmlld1NjcmVlbiAvPik7XHJcbiAgICBleHBlY3QoY29udGFpbmVyKS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQUtBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNDLGdCQUFnQixFQUFFLGtCQUFrQjtJQUNwQ0MsSUFBSSxFQUFFLE1BQU07SUFDWkMsTUFBTSxFQUFFLFFBQVE7SUFDaEJDLEtBQUssRUFBRSxPQUFPO0lBQ2RDLFNBQVMsRUFBRSxXQUFXO0lBQ3RCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFDZkMsTUFBTSxFQUFFO1VBQ05DLE9BQU8sRUFBRSxNQUFNO1VBQ2ZDLFVBQVUsRUFBRTtRQUNkO01BQ0YsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIVixXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ3BDLElBQU1FLElBQUksR0FBRyxNQUFNO0VBQ25CQSxJQUFJLENBQUNRLEtBQUssR0FBRyxZQUFZO0VBQ3pCUixJQUFJLENBQUNTLE9BQU8sR0FBRyxjQUFjO0VBRTdCLE9BQU87SUFDTFYsZ0JBQWdCLEVBQUUsa0JBQWtCO0lBQ3BDQyxJQUFJLEVBQUpBLElBQUk7SUFDSkMsTUFBTSxFQUFFLFFBQVE7SUFDaEJDLEtBQUssRUFBRSxPQUFPO0lBQ2RDLFNBQVMsRUFBRSxXQUFXO0lBQ3RCQyxRQUFRLEVBQUUsU0FBVkEsUUFBUUEsQ0FBQTtNQUFBLE9BQVM7UUFDZkMsTUFBTSxFQUFFO1VBQ05DLE9BQU8sRUFBRSxNQUFNO1VBQ2ZDLFVBQVUsRUFBRTtRQUNkO01BQ0YsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUNILENBQUMsRUFBRTtFQUFFRyxPQUFPLEVBQUU7QUFBSyxDQUFDLENBQUM7QUFHckJiLFdBQUEsR0FBS0MsSUFBSSxzQ0FBc0MsWUFBTTtFQUNuRCxPQUFPLFNBQVNhLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ2pDLE9BQU8sSUFBSTtFQUNiLENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBNUNILElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUF1RCxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFBQSxTQUFBaEIsWUFBQTtFQUFBLElBQUFvQixRQUFBLEdBQUFKLE9BQUE7SUFBQUssSUFBQSxHQUFBRCxRQUFBLENBQUFDLElBQUE7RUFBQXJCLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFxQixJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUE2Q3ZEQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsWUFBTTtFQUNwQ0MsRUFBRSxDQUFDLHNCQUFzQixFQUFFLFlBQU07SUFDL0JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQztFQUN6QixDQUFDLENBQUM7RUFFRkYsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFNO0lBRXRCLElBQU1ULGdCQUFnQixHQUFHRSxPQUFPLG9DQUFvQyxDQUFDLENBQUNVLE9BQU87SUFDN0UsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUFDLElBQUFULFdBQUEsQ0FBQVUsR0FBQSxFQUFDZixnQkFBZ0IsSUFBRSxDQUFDLENBQUM7TUFBMUNnQixTQUFTLEdBQUFILE9BQUEsQ0FBVEcsU0FBUztJQUNqQk4sTUFBTSxDQUFDTSxTQUFTLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUM7RUFDakMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119