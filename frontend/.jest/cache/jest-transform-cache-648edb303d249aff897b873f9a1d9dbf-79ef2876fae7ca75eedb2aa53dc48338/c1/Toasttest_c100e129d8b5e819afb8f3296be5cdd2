a314d8997fc417663c7647fb26a3e9a1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
describe('Toast', function () {
  beforeEach(function () {
    jest.clearAllTimers();
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('renders correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        testID: "toast"
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('toast')).toBeTruthy();
    expect(getByText('테스트 메시지')).toBeTruthy();
  }, 60000);
  test('does not render when visible is false', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        testID: "toast"
      })),
      queryByTestId = _render2.queryByTestId;
    expect(queryByTestId('toast')).toBeNull();
  }, 60000);
  test('icon renders correctly', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
        testID: "toast"
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('test-icon')).toBeTruthy();
  }, 60000);
  test('onClose is called after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1300);
    });
    expect(onClose).toHaveBeenCalled();
  }, 60000);
  test('ToastController should handle show and hide', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    expect(mockToast.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockToast.hide).toHaveBeenCalled();
  }, 60000);
  test('ToastController handles missing instance', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  }, 60000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,