b6006bdb3ddc3ed04152987e5c776164
_getJestObj().mock('react-native', function () {
  return Object.assign({}, jest.requireActual('react-native'), {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (styles) {
        return styles;
      })
    },
    View: jest.requireActual('react-native').View,
    ScrollView: jest.requireActual('react-native').ScrollView,
    Alert: {
      alert: jest.fn()
    }
  });
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: jest.fn(function (props) {
      return props.children;
    }),
    Chip: jest.fn(function (props) {
      return props.children;
    }),
    Button: jest.fn(function (props) {
      return {
        type: 'Button',
        props: Object.assign({}, props, {
          accessibilityState: {
            disabled: props.disabled
          }
        }),
        children: props.children
      };
    }),
    TextInput: jest.fn(function (props) {
      return {
        type: 'TextInput',
        props: props,
        children: null
      };
    }),
    ActivityIndicator: jest.fn(function () {
      return null;
    })
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../../src/screens/EmotionLogScreen", function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View;
  var MockEmotionLogScreen = function MockEmotionLogScreen(props) {
    var _React$useState = React.useState(false),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      isLoaded = _React$useState2[0],
      setIsLoaded = _React$useState2[1];
    var _React$useState3 = React.useState([]),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      emotions = _React$useState4[0],
      setEmotions = _React$useState4[1];
    var _React$useState5 = React.useState(null),
      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
      error = _React$useState6[0],
      setError = _React$useState6[1];
    React.useEffect(function () {
      var loadData = function () {
        var _ref = (0, _asyncToGenerator2.default)(function* () {
          try {
            var response = yield require("../../../src/services/api/emotionService").getAllEmotions();
            setEmotions(response.data.data);
            setIsLoaded(true);
          } catch (err) {
            setError(err);
            require('react-native').Alert.alert('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
          }
        });
        return function loadData() {
          return _ref.apply(this, arguments);
        };
      }();
      loadData();
    }, []);
    if (!isLoaded && !error) {
      return React.createElement(View, {}, [React.createElement('ActivityIndicator', {
        key: 'loading'
      }), React.createElement('Text', {
        key: 'loading-text'
      }, '감정 데이터를 불러오는 중...')]);
    }
    var renderEmotions = function renderEmotions() {
      return emotions.map(function (emotion) {
        return React.createElement('Text', {
          key: emotion.emotion_id
        }, emotion.name);
      });
    };
    return React.createElement(View, {}, [React.createElement('Text', {
      key: 'title'
    }, '오늘의 감정'), React.createElement('Text', {
      key: 'subtitle'
    }, '현재 어떤 감정을 느끼고 계신가요?')].concat((0, _toConsumableArray2.default)(renderEmotions()), [React.createElement('TextInput', {
      key: 'note',
      testID: 'emotion-note-input',
      value: '',
      onChangeText: jest.fn()
    }), React.createElement('Button', {
      key: 'submit',
      testID: 'emotion-submit-button',
      disabled: true,
      onPress: function () {
        var _onPress = (0, _asyncToGenerator2.default)(function* () {
          try {
            yield require("../../../src/services/api/emotionService").recordEmotions({
              emotion_ids: [1],
              note: undefined
            });
            require('react-native').Alert.alert('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', [{
              text: '확인',
              onPress: function onPress() {
                return props.navigation.goBack();
              }
            }]);
          } catch (err) {
            var _err$response;
            var message = ((_err$response = err.response) == null || (_err$response = _err$response.data) == null ? void 0 : _err$response.message) || '감정 기록 중 오류가 발생했습니다.';
            require('react-native').Alert.alert('오류', message);
          }
        });
        function onPress() {
          return _onPress.apply(this, arguments);
        }
        return onPress;
      }()
    }, isLoaded ? '감정 기록하기' : '기록 중...')]));
  };
  return MockEmotionLogScreen;
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockEmotions = {
  status: 'success',
  data: [{
    emotion_id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '감사',
    icon: 'hand-heart',
    color: '#FF69B4'
  }, {
    emotion_id: 3,
    name: '위로',
    icon: 'hand-peace',
    color: '#87CEEB'
  }]
};
var mockAlert = jest.fn();
_reactNative2.Alert.alert = mockAlert;
var mockNavigation = {
  goBack: jest.fn()
};
describe('EmotionLogScreen 단위 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: mockEmotions
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  test('감정 서비스 함수 호출 확인', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.getAllEmotions).toHaveBeenCalledTimes(1);
    }, {
      timeout: 3000
    });
  }));
  test('감정 데이터 로드 실패 시 알림 표시', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockRejectedValue(new Error('네트워크 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert).toHaveBeenCalledWith('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
    }, {
      timeout: 3000
    });
  }));
  test('감정 로그 제출 성공 시 알림 및 네비게이션 호출', (0, _asyncToGenerator2.default)(function* () {
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    var submitButton = yield (0, _reactNative.waitFor)(function () {
      return screen.getByTestId('emotion-submit-button');
    });
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', [{
        text: '확인',
        onPress: expect.any(Function)
      }]);
    }, {
      timeout: 3000
    });
    mockAlert.mock.calls[0][2][0].onPress();
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }));
  test('감정 로그 제출 실패 시 에러 알림', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValue({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    var submitButton = yield (0, _reactNative.waitFor)(function () {
      return screen.getByTestId('emotion-submit-button');
    });
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    }, {
      timeout: 3000
    });
  }));
  test('getAllEmotions API 호출 확인', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.getAllEmotions).toHaveBeenCalled();
    }, {
      timeout: 3000
    });
  }));
  test('recordEmotions API 인자 검증', (0, _asyncToGenerator2.default)(function* () {
    var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    var submitButton = yield (0, _reactNative.waitFor)(function () {
      return screen.getByTestId('emotion-submit-button');
    });
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: undefined
      });
    }, {
      timeout: 3000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,