fb1bfda172b8025c22d54c9e6c1ccb36
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        surface: '#fff',
        background: '#fff'
      }
    })
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser'
      },
      isAuthenticated: true
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복'
      }],
      logEmotion: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function TextInput(props) {
  return (0, _jsxRuntime.jsx)(_reactNative2.View, Object.assign({}, props));
}
function MockHomeScreen() {
  var _React$useState = _react.default.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isDialogVisible = _React$useState2[0],
    setIsDialogVisible = _React$useState2[1];
  var showDialog = function showDialog() {
    return setIsDialogVisible(true);
  };
  var hideDialog = function hideDialog() {
    return setIsDialogVisible(false);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "home-screen-container",
    children: [(0, _jsxRuntime.jsx)(TextInput, {
      testID: "post-content-input",
      onChangeText: function onChangeText() {}
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "emotion-chip-\uD589\uBCF5",
      onPress: function onPress() {}
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "share-post-button",
      onPress: showDialog
    }), isDialogVisible && (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "success-dialog",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uAC8C\uC2DC \uC644\uB8CC"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uB2F9\uC2E0\uC758 \uD558\uB8E8\uAC00 \uC131\uACF5\uC801\uC73C\uB85C \uACF5\uC720\uB418\uC5C8\uC2B5\uB2C8\uB2E4."
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "dialog-confirm-button",
        onPress: hideDialog,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD655\uC778"
        })
      })]
    })]
  });
}
describe('HomeScreen Dialog Interaction', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    var HomeScreenModule = require("../../src/screens/HomeScreen");
    HomeScreenModule.default.mockImplementation(MockHomeScreen);
  });
  it('shows and dismisses success dialog', (0, _asyncToGenerator2.default)(function* () {
    var HomeScreen = require("../../src/screens/HomeScreen").default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText,
      queryByTestId = _render.queryByTestId;
    var contentInput = getByTestId('post-content-input');
    var emotionChip = getByTestId('emotion-chip-행복');
    var shareButton = getByTestId('share-post-button');
    _reactNative.fireEvent.changeText(contentInput, '오늘의 기분');
    _reactNative.fireEvent.press(emotionChip);
    _reactNative.fireEvent.press(shareButton);
    var dialog = getByTestId('success-dialog');
    expect(dialog).toBeTruthy();
    var confirmButton = getByTestId('dialog-confirm-button');
    _reactNative.fireEvent.press(confirmButton);
    expect(queryByTestId('success-dialog')).toBeNull();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,