0f51c836432915dd31f9957076820a34
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _emotionService = _interopRequireDefault(require("../services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var EmotionLogScreen = function EmotionLogScreen(_ref) {
  var navigation = _ref.navigation;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    emotions = _useState2[0],
    setEmotions = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    selectedEmotions = _useState4[0],
    setSelectedEmotions = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    note = _useState6[0],
    setNote = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isLoading = _useState8[0],
    setIsLoading = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isSubmitting = _useState10[0],
    setIsSubmitting = _useState10[1];
  (0, _react.useEffect)(function () {
    loadEmotions();
  }, []);
  var loadEmotions = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      setIsLoading(true);
      try {
        var response = yield _emotionService.default.getAllEmotions();
        var emotionResponse = response.data;
        setEmotions(emotionResponse.data);
      } catch (error) {
        _reactNative.Alert.alert('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
        if (process.env.NODE_ENV !== 'test') {
          console.error('감정 로드 오류:', error);
        }
      } finally {
        setIsLoading(false);
      }
    });
    return function loadEmotions() {
      return _ref2.apply(this, arguments);
    };
  }();
  var toggleEmotion = function toggleEmotion(emotionId) {
    if (selectedEmotions.includes(emotionId)) {
      setSelectedEmotions(selectedEmotions.filter(function (id) {
        return id !== emotionId;
      }));
    } else {
      setSelectedEmotions([].concat((0, _toConsumableArray2.default)(selectedEmotions), [emotionId]));
    }
  };
  var handleSubmit = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (selectedEmotions.length === 0) {
        _reactNative.Alert.alert('알림', '감정을 적어도 하나 이상 선택해주세요.');
        return;
      }
      setIsSubmitting(true);
      try {
        yield _emotionService.default.recordEmotions({
          emotion_ids: selectedEmotions,
          note: note.trim() || undefined
        });
        _reactNative.Alert.alert('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', [{
          text: '확인',
          onPress: function onPress() {
            return navigation.goBack();
          }
        }]);
      } catch (error) {
        var _error$response;
        _reactNative.Alert.alert('오류', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '감정 기록 중 오류가 발생했습니다.');
      } finally {
        setIsSubmitting(false);
      }
    });
    return function handleSubmit() {
      return _ref3.apply(this, arguments);
    };
  }();
  if (isLoading) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.loadingContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
        size: "large"
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: styles.loadingText,
        children: "\uAC10\uC815 \uB370\uC774\uD130\uB97C \uBD88\uB7EC\uC624\uB294 \uC911..."
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
      style: styles.title,
      children: "\uC624\uB298\uC758 \uAC10\uC815"
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
      style: styles.subtitle,
      children: "\uD604\uC7AC \uC5B4\uB5A4 \uAC10\uC815\uC744 \uB290\uB07C\uACE0 \uACC4\uC2E0\uAC00\uC694?"
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.emotionsContainer,
      children: emotions.map(function (emotion) {
        return ((0, _jsxRuntime.jsx)(_reactNativePaper.Chip, {
            selected: selectedEmotions.includes(emotion.emotion_id),
            onPress: function onPress() {
              return toggleEmotion(emotion.emotion_id);
            },
            style: [styles.emotionChip, selectedEmotions.includes(emotion.emotion_id) && {
              backgroundColor: emotion.color
            }],
            textStyle: {
              color: selectedEmotions.includes(emotion.emotion_id) ? '#FFFFFF' : emotion.color
            },
            icon: function icon() {
              return (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
                name: emotion.icon,
                size: 20,
                color: selectedEmotions.includes(emotion.emotion_id) ? '#FFFFFF' : emotion.color
              });
            },
            testID: "emotion-chip",
            children: emotion.name
          }, emotion.emotion_id)
        );
      })
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
      label: "\uAC10\uC815\uC5D0 \uB300\uD55C \uBA54\uBAA8 (\uC120\uD0DD\uC0AC\uD56D)",
      value: note,
      onChangeText: setNote,
      mode: "outlined",
      multiline: true,
      numberOfLines: 4,
      style: styles.noteInput,
      testID: "emotion-note-input"
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
      mode: "contained",
      onPress: handleSubmit,
      style: styles.submitButton,
      disabled: isSubmitting || selectedEmotions.length === 0,
      testID: "emotion-submit-button",
      children: isSubmitting ? (0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
        color: "#fff"
      }) : '감정 기록하기'
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#f5f5f5'
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#4a0e4e'
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginBottom: 24
  },
  emotionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 24
  },
  emotionChip: {
    margin: 4
  },
  noteInput: {
    marginBottom: 24
  },
  submitButton: {
    paddingVertical: 8
  }
});
var _default = exports.default = EmotionLogScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,