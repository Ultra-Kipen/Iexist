{"version":3,"names":["handleApiError","exports","error","response","data","message","isNetworkError","networkErrorMessages","some","msg","toLowerCase","includes","formatErrorMessage","customRules","arguments","length","undefined","test","ApiError","_Error","statusCode","_this","_classCallCheck2","default","_callSuper","name","Object","setPrototypeOf","prototype","_inherits2","_createClass2","_wrapNativeSuper2","Error","createErrorHandler","onError","defaultMessage"],"sources":["error.ts"],"sourcesContent":["import { AxiosError } from 'axios';\r\n\r\n/**\r\n * API 에러를 처리하고 사용자에게 표시할 메시지를 반환합니다.\r\n * @param error API 에러 객체\r\n * @returns 적절한 오류 메시지\r\n */\r\nexport const handleApiError = (error: any): string => {\r\n  // API 응답에서 메시지 추출\r\n  if (error.response) {\r\n    if (error.response.data && error.response.data.message) {\r\n      return error.response.data.message;\r\n    }\r\n    \r\n    if (error.response.data && error.response.data.error && error.response.data.error.message) {\r\n      return error.response.data.error.message;\r\n    }\r\n  }\r\n  \r\n  // 네트워크 오류 확인\r\n  if (isNetworkError(error)) {\r\n    return '네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.';\r\n  }\r\n  \r\n  // 기본 오류 메시지\r\n  return '오류가 발생했습니다. 다시 시도해주세요.';\r\n};\r\n\r\n/**\r\n * 네트워크 관련 오류인지 확인합니다.\r\n * @param error 오류 객체\r\n * @returns 네트워크 오류 여부\r\n */\r\nexport const isNetworkError = (error: any): boolean => {\r\n  if (!error || !error.message) {\r\n    return false;\r\n  }\r\n  \r\n  const networkErrorMessages = [\r\n    'Network Error',\r\n    'Failed to fetch',\r\n    'ECONNREFUSED',\r\n    'Connection refused',\r\n    'timeout'\r\n  ];\r\n  \r\n  return networkErrorMessages.some(msg => \r\n    error.message.toLowerCase().includes(msg.toLowerCase())\r\n  );\r\n};\r\n\r\n/**\r\n * 오류 메시지를 포맷팅합니다.\r\n * @param message 오류 메시지 또는 코드\r\n * @param customRules 커스텀 포맷팅 규칙\r\n * @returns 포맷팅된 오류 메시지\r\n */\r\nexport const formatErrorMessage = (message: string, customRules: Record<string, string> = {}): string => {\r\n  // 커스텀 규칙이 있다면 적용\r\n  if (message in customRules) {\r\n    return customRules[message];\r\n  }\r\n  \r\n  // 오류 코드 형식인지 확인 (ERR_로 시작하는 경우)\r\n  if (/^ERR_[A-Z0-9_]+$/.test(message)) {\r\n    if (message === 'ERR_AUTH_001') {\r\n      return '인증 오류가 발생했습니다. (ERR_AUTH_001)';\r\n    }\r\n    return `오류가 발생했습니다. (${message})`;\r\n  }\r\n  \r\n  return message;\r\n};\r\n\r\n/**\r\n * API 오류 클래스\r\n */\r\nexport class ApiError extends Error {\r\n  statusCode: number;\r\n  data?: any;\r\n  \r\n  constructor(message: string, statusCode: number, data?: any) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.statusCode = statusCode;\r\n    this.data = data;\r\n    \r\n    // Error 객체 프로토타입 체인 유지를 위한 설정\r\n    Object.setPrototypeOf(this, ApiError.prototype);\r\n  }\r\n}\r\n\r\n/**\r\n * 오류 처리 함수를 생성합니다.\r\n * @param onError 오류 처리 콜백 함수\r\n * @param defaultMessage 기본 오류 메시지\r\n * @returns 오류 처리 함수\r\n */\r\nexport const createErrorHandler = (onError: (message: string) => void, defaultMessage: string) => {\r\n  return (error: any) => {\r\n    if (error instanceof Error) {\r\n      onError(error.message);\r\n    } else if (error.response && error.response.data && error.response.data.message) {\r\n      onError(error.response.data.message);\r\n    } else {\r\n      onError(defaultMessage);\r\n    }\r\n  };\r\n};"],"mappings":"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","ignoreList":[]}