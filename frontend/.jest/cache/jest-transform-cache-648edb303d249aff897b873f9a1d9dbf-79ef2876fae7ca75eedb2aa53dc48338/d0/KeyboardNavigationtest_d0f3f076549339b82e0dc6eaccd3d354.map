{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_reactNative2","_jsxRuntime","KeyboardNavigableForm","_React$useState","React","useState","name","email","message","_React$useState2","_slicedToArray2","default","values","setValues","_React$useState3","_React$useState4","focusedField","setFocusedField","handleSubmit","console","log","jsxs","View","children","jsx","Text","TextInput","value","onChangeText","text","Object","assign","placeholder","returnKeyType","onFocus","onSubmitEditing","blurOnSubmit","accessibilityLabel","testID","Button","title","onPress","describe","test","_render","render","getByTestId","nameInput","fireEvent","expect","props","toEqual","emailInput","_render2","getByLabelText","toBeTruthy"],"sources":["KeyboardNavigation.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { View, TextInput, Button, Text } from 'react-native';\r\n\r\n// 키보드 내비게이션을 테스트하기 위한 샘플 폼 컴포넌트\r\nconst KeyboardNavigableForm = () => {\r\n  const [values, setValues] = React.useState({\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n  });\r\n  const [focusedField, setFocusedField] = React.useState<string | null>(null);\r\n\r\n  const handleSubmit = () => {\r\n    console.log('폼 제출됨:', values);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text>접근성 테스트 폼</Text>\r\n      <TextInput\r\n        value={values.name}\r\n        onChangeText={(text) => setValues({ ...values, name: text })}\r\n        placeholder=\"이름\"\r\n        returnKeyType=\"next\"\r\n        onFocus={() => setFocusedField('name')}\r\n        onSubmitEditing={() => setFocusedField('email')}\r\n        blurOnSubmit={false}\r\n        accessibilityLabel=\"이름 입력\"\r\n        testID=\"name-input\"\r\n      />\r\n\r\n      <TextInput\r\n        value={values.email}\r\n        onChangeText={(text) => setValues({ ...values, email: text })}\r\n        placeholder=\"이메일\"\r\n        returnKeyType=\"next\"\r\n        onFocus={() => setFocusedField('email')}\r\n        onSubmitEditing={() => setFocusedField('message')}\r\n        blurOnSubmit={false}\r\n        accessibilityLabel=\"이메일 입력\"\r\n        testID=\"email-input\"\r\n      />\r\n\r\n      <TextInput\r\n        value={values.message}\r\n        onChangeText={(text) => setValues({ ...values, message: text })}\r\n        placeholder=\"메시지\"\r\n        returnKeyType=\"done\"\r\n        onFocus={() => setFocusedField('message')}\r\n        onSubmitEditing={() => setFocusedField('submit')}\r\n        accessibilityLabel=\"메시지 입력\"\r\n        testID=\"message-input\"\r\n      />\r\n\r\n      <Button\r\n        title=\"제출\"\r\n        onPress={handleSubmit}\r\n        accessibilityLabel=\"폼 제출 버튼\"\r\n        testID=\"submit-button\"\r\n      />\r\n      \r\n      {/* 디버깅용: 현재 포커스된 필드 표시 */}\r\n      <Text testID=\"focused-field\">현재 포커스: {focusedField || '없음'}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('키보드 내비게이션 테스트', () => {\r\n  test('키보드 리턴 키를 사용하여 다음 필드로 이동할 수 있어야 함', () => {\r\n    const { getByTestId } = render(<KeyboardNavigableForm />);\r\n    \r\n    const nameInput = getByTestId('name-input');\r\n    \r\n    // 첫 번째 입력 필드에 포커스\r\n    fireEvent(nameInput, 'focus');\r\n    expect(getByTestId('focused-field').props.children).toEqual(['현재 포커스: ', 'name']);\r\n    \r\n    // 리턴 키를 눌러 다음 필드로 이동\r\n    fireEvent(nameInput, 'submitEditing');\r\n    expect(getByTestId('focused-field').props.children).toEqual(['현재 포커스: ', 'email']);\r\n    \r\n    // 이메일 필드에서 리턴 키를 눌러 메시지 필드로 이동\r\n    const emailInput = getByTestId('email-input');\r\n    fireEvent(emailInput, 'submitEditing');\r\n    expect(getByTestId('focused-field').props.children).toEqual(['현재 포커스: ', 'message']);\r\n  });\r\n\r\n  test('모든 상호작용 요소에 접근성 레이블이 있어야 함', () => {\r\n    const { getByLabelText } = render(<KeyboardNavigableForm />);\r\n    \r\n    expect(getByLabelText('이름 입력')).toBeTruthy();\r\n    expect(getByLabelText('이메일 입력')).toBeTruthy();\r\n    expect(getByLabelText('메시지 입력')).toBeTruthy();\r\n    expect(getByLabelText('폼 제출 버튼')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}