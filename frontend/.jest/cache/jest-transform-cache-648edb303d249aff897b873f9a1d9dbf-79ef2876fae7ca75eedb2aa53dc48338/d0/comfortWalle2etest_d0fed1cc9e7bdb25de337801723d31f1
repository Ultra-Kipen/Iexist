df00ea9727bea6b2d8219b1cdab0dcb8
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      setOptions: jest.fn(),
      addListener: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    }),
    useIsFocused: jest.fn().mockReturnValue(true)
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(),
    getBestPosts: jest.fn(),
    createPost: jest.fn(),
    sendMessage: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        accent: '#03dac4',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        disabled: '#000000',
        placeholder: '#000000',
        backdrop: '#000000',
        onSurface: '#000000'
      }
    }),
    Card: {
      Content: jest.fn().mockImplementation(function (_ref) {
        var children = _ref.children;
        return children;
      })
    },
    TextInput: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    Button: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    List: {
      Section: jest.fn().mockImplementation(function (_ref2) {
        var children = _ref2.children;
        return children;
      }),
      Item: jest.fn().mockImplementation(function (props) {
        return null;
      }),
      Icon: jest.fn().mockImplementation(function (props) {
        return null;
      })
    },
    Title: jest.fn().mockImplementation(function (_ref3) {
      var children = _ref3.children;
      return children;
    }),
    Paragraph: jest.fn().mockImplementation(function (_ref4) {
      var children = _ref4.children;
      return children;
    }),
    FAB: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    ActivityIndicator: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    Chip: jest.fn().mockImplementation(function (props) {
      return null;
    }),
    Text: jest.fn().mockImplementation(function (_ref5) {
      var children = _ref5.children;
      return children;
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _reactNative2 = require("react-native");
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn(function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (args[0] && typeof args[0] === 'string' && args[0].includes('게시물 로드 오류')) {
    return;
  }
  originalConsoleError.apply(void 0, args);
});
var mockPosts = [{
  post_id: 1,
  title: '오늘 너무 힘들어요',
  content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
  user_id: 1,
  is_anonymous: true,
  like_count: 5,
  comment_count: 3,
  created_at: '2025-04-08T12:00:00Z'
}, {
  post_id: 2,
  title: '대인관계가 어려워요',
  content: '새로운 사람들을 만나는 것이 두려워요...',
  user_id: 2,
  is_anonymous: true,
  like_count: 10,
  comment_count: 7,
  created_at: '2025-04-07T10:00:00Z'
}];
var mockBestPosts = [{
  post_id: 3,
  title: '우울증을 극복한 경험',
  content: '저는 작년에 심한 우울증을 겪었지만...',
  like_count: 50,
  comment_count: 20
}];
var renderComfortScreen = function renderComfortScreen() {
  return (0, _reactNative.render)(_react.default.createElement(_ComfortScreen.default));
};
describe('ComfortScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: mockBestPosts
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
  });
  test('should render loading state initially', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen = renderComfortScreen(),
      getByTestId = _renderComfortScreen.getByTestId,
      queryByTestId = _renderComfortScreen.queryByTestId;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    expect(queryByTestId('comfort-screen-scrollview')).toBeNull();
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(1);
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalledTimes(1);
    });
  }));
  test('should display posts and best posts when loaded', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen2 = renderComfortScreen(),
      getByTestId = _renderComfortScreen2.getByTestId,
      getByText = _renderComfortScreen2.getByText,
      queryByTestId = _renderComfortScreen2.queryByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('loading-indicator')).toBeNull();
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    expect(getByTestId('best-posts-title')).toBeTruthy();
    expect(getByText('우울증을 극복한 경험')).toBeTruthy();
    expect(getByTestId('posts-list')).toBeTruthy();
    expect(getByText('오늘 너무 힘들어요')).toBeTruthy();
    expect(getByText('대인관계가 어려워요')).toBeTruthy();
  }));
  test('should open new post modal when FAB button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen3 = renderComfortScreen(),
      getByTestId = _renderComfortScreen3.getByTestId,
      getByText = _renderComfortScreen3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    expect(getByTestId('post-title-input')).toBeTruthy();
    expect(getByTestId('post-content-input')).toBeTruthy();
    expect(getByTestId('anonymous-checkbox')).toBeTruthy();
  }));
  test('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen4 = renderComfortScreen(),
      getByTestId = _renderComfortScreen4.getByTestId,
      getByText = _renderComfortScreen4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
  }));
  test('should not submit post with empty fields', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen5 = renderComfortScreen(),
      getByTestId = _renderComfortScreen5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(_comfortWallService.default.createPost).not.toHaveBeenCalled();
  }));
  test('should open comment modal when clicking on a post', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen6 = renderComfortScreen(),
      getByTestId = _renderComfortScreen6.getByTestId,
      getByText = _renderComfortScreen6.getByText,
      getAllByText = _renderComfortScreen6.getAllByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    var titleElements = getAllByText('오늘 너무 힘들어요');
    expect(titleElements.length).toBeGreaterThan(0);
    expect(getByTestId('comment-input')).toBeTruthy();
  }));
  test('should send a comment successfully', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen7 = renderComfortScreen(),
      getByTestId = _renderComfortScreen7.getByTestId,
      getByText = _renderComfortScreen7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '힘내세요! 응원합니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '힘내세요! 응원합니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.', expect.anything());
  }));
  test('should not submit empty comment', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen8 = renderComfortScreen(),
      getByTestId = _renderComfortScreen8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');
    expect(_comfortWallService.default.sendMessage).not.toHaveBeenCalled();
  }));
  test('should handle API error when loading posts', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(console, 'error').mockImplementation(function () {});
    _comfortWallService.default.getPosts.mockRejectedValue(new Error('API Error'));
    renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    });
    console.error.mockRestore();
  }));
  test('should handle API error when creating post', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValue({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen9 = renderComfortScreen(),
      getByTestId = _renderComfortScreen9.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    });
  }));
  test('should toggle anonymous checkbox', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen10 = renderComfortScreen(),
      getByTestId = _renderComfortScreen10.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should handle modal open and close properly', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen11 = renderComfortScreen(),
      getByTestId = _renderComfortScreen11.getByTestId,
      getByText = _renderComfortScreen11.getByText,
      queryByText = _renderComfortScreen11.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      return expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    }, {
      timeout: 5000
    });
    expect(queryByText('고민 나누기')).toBeNull();
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    }, {
      timeout: 3000
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('고민 나누기')).toBeTruthy();
    });
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '테스트 제목');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '테스트 내용');
    expect(getByTestId('submit-post-button')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
    });
  }));
  test('should like a post', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen12 = renderComfortScreen(),
      getByTestId = _renderComfortScreen12.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
  }));
  test('should toggle like status for a post', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValueOnce({
      data: {
        message: 'liked'
      }
    }).mockResolvedValueOnce({
      data: {
        message: 'unliked'
      }
    });
    var _renderComfortScreen13 = renderComfortScreen(),
      getByTestId = _renderComfortScreen13.getByTestId,
      getAllByTestId = _renderComfortScreen13.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(3);
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen14 = renderComfortScreen(),
      getByTestId = _renderComfortScreen14.getByTestId,
      getAllByTestId = _renderComfortScreen14.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should handle multiple modals correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen15 = renderComfortScreen(),
      getByTestId = _renderComfortScreen15.getByTestId,
      getByText = _renderComfortScreen15.getByText,
      queryByText = _renderComfortScreen15.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-message-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('응원 메시지 보내기')).toBeNull();
    });
  }));
  test('should toggle like status when pressing like button multiple times', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValue({
      data: {
        message: 'success'
      }
    });
    var _renderComfortScreen16 = renderComfortScreen(),
      getByTestId = _renderComfortScreen16.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen17 = renderComfortScreen(),
      getByTestId = _renderComfortScreen17.getByTestId,
      getAllByTestId = _renderComfortScreen17.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen18 = renderComfortScreen(),
      getByTestId = _renderComfortScreen18.getByTestId,
      getByText = _renderComfortScreen18.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen19 = renderComfortScreen(),
      getByTestId = _renderComfortScreen19.getByTestId,
      getByText = _renderComfortScreen19.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,