8b509dd7a1068ae0944b0398e4f9ffbe
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._LogBoxNotificationContainer = _LogBoxNotificationContainer;
exports.default = void 0;
var _SafeAreaView_INTERNAL_DO_NOT_USE = _interopRequireDefault(require("../../src/private/components/SafeAreaView_INTERNAL_DO_NOT_USE"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var LogBoxData = _interopRequireWildcard(require("./Data/LogBoxData"));
var _LogBoxLog = _interopRequireDefault(require("./Data/LogBoxLog"));
var _LogBoxNotification = _interopRequireDefault(require("./UI/LogBoxNotification"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _LogBoxNotificationContainer(props) {
  var logs = props.logs;
  var onDismissWarns = function onDismissWarns() {
    LogBoxData.clearWarnings();
  };
  var onDismissErrors = function onDismissErrors() {
    LogBoxData.clearErrors();
  };
  var setSelectedLog = function setSelectedLog(index) {
    LogBoxData.setSelectedLog(index);
  };
  function openLog(log) {
    if (log.onNotificationPress) {
      log.onNotificationPress();
      return;
    }
    var index = logs.length - 1;
    while (index > 0 && logs[index] !== log) {
      index -= 1;
    }
    setSelectedLog(index);
  }
  if (logs.length === 0 || props.isDisabled === true) {
    return null;
  }
  var warnings = logs.filter(function (log) {
    return log.level === 'warn';
  });
  var errors = logs.filter(function (log) {
    return log.level === 'error' || log.level === 'fatal';
  });
  return (0, _jsxRuntime.jsxs)(_SafeAreaView_INTERNAL_DO_NOT_USE.default, {
    style: styles.list,
    children: [warnings.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: warnings[warnings.length - 1],
        level: "warn",
        totalLogCount: warnings.length,
        onPressOpen: function onPressOpen() {
          return openLog(warnings[warnings.length - 1]);
        },
        onPressDismiss: onDismissWarns
      })
    }), errors.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: errors[errors.length - 1],
        level: "error",
        totalLogCount: errors.length,
        onPressOpen: function onPressOpen() {
          return openLog(errors[errors.length - 1]);
        },
        onPressDismiss: onDismissErrors
      })
    })]
  });
}
var styles = _StyleSheet.default.create({
  list: {
    bottom: 20,
    left: 10,
    right: 10,
    position: 'absolute'
  },
  toast: {
    borderRadius: 8,
    marginBottom: 5,
    overflow: 'hidden'
  }
});
var _default = exports.default = LogBoxData.withSubscription(_LogBoxNotificationContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,