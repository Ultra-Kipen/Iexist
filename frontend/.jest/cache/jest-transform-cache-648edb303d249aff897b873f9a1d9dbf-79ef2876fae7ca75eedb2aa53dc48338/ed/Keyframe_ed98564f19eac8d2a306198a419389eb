c8f30daebe31f80a173f2ab8aeef34bd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyframe = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _index = require("../../animation/index.js");
var _util = require("../../animation/util.js");
var _commonTypes = require("../../commonTypes.js");
var _Easing = require("../../Easing.js");
var _errors = require("../../errors.js");
var InnerKeyframe = function () {
  function InnerKeyframe(definitions) {
    var _this = this;
    (0, _classCallCheck2.default)(this, InnerKeyframe);
    this.reduceMotionV = _commonTypes.ReduceMotion.System;
    this.build = function () {
      var delay = _this.delayV;
      var delayFunction = _this.getDelayFunction();
      var _this$parseDefinition = _this.parseDefinitions(),
        keyframes = _this$parseDefinition.keyframes,
        initialValues = _this$parseDefinition.initialValues;
      var callback = _this.callbackV;
      if (_this.parsedAnimation) {
        return _this.parsedAnimation;
      }
      _this.parsedAnimation = function () {
        'worklet';

        var animations = {};
        var addAnimation = function addAnimation(key) {
          var keyframePoints = keyframes[key];
          if (keyframePoints.length === 0) {
            return;
          }
          var animation = delayFunction(delay, keyframePoints.length === 1 ? (0, _index.withTiming)(keyframePoints[0].value, {
            duration: keyframePoints[0].duration,
            easing: keyframePoints[0].easing ? keyframePoints[0].easing : _Easing.Easing.linear
          }) : _index.withSequence.apply(void 0, (0, _toConsumableArray2.default)(keyframePoints.map(function (keyframePoint) {
            return (0, _index.withTiming)(keyframePoint.value, {
              duration: keyframePoint.duration,
              easing: keyframePoint.easing ? keyframePoint.easing : _Easing.Easing.linear
            });
          }))));
          if (key.includes('transform')) {
            if (!('transform' in animations)) {
              animations.transform = [];
            }
            animations.transform.push((0, _defineProperty2.default)({}, key.split(':')[1], animation));
          } else {
            animations[key] = animation;
          }
        };
        Object.keys(initialValues).forEach(function (key) {
          if (key.includes('transform')) {
            initialValues[key].forEach(function (transformProp, index) {
              Object.keys(transformProp).forEach(function (transformPropKey) {
                addAnimation(makeKeyframeKey(index, transformPropKey));
              });
            });
          } else {
            addAnimation(key);
          }
        });
        return {
          animations: animations,
          initialValues: initialValues,
          callback: callback
        };
      };
      return _this.parsedAnimation;
    };
    this.definitions = definitions;
  }
  return (0, _createClass2.default)(InnerKeyframe, [{
    key: "parseDefinitions",
    value: function parseDefinitions() {
      var _this2 = this;
      var parsedKeyframes = {};
      if (this.definitions.from) {
        if (this.definitions['0']) {
          throw new _errors.ReanimatedError("You cannot provide both keyframe 0 and 'from' as they both specified initial values.");
        }
        this.definitions['0'] = this.definitions.from;
        delete this.definitions.from;
      }
      if (this.definitions.to) {
        if (this.definitions['100']) {
          throw new _errors.ReanimatedError("You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.");
        }
        this.definitions['100'] = this.definitions.to;
        delete this.definitions.to;
      }
      if (!this.definitions['0']) {
        throw new _errors.ReanimatedError("Please provide 0 or 'from' keyframe with initial state of your object.");
      }
      var initialValues = this.definitions['0'];
      Object.keys(initialValues).forEach(function (styleProp) {
        if (styleProp === 'transform') {
          if (!Array.isArray(initialValues.transform)) {
            return;
          }
          initialValues.transform.forEach(function (transformStyle, index) {
            Object.keys(transformStyle).forEach(function (transformProp) {
              parsedKeyframes[makeKeyframeKey(index, transformProp)] = [];
            });
          });
        } else {
          parsedKeyframes[styleProp] = [];
        }
      });
      var duration = this.durationV ? this.durationV : 500;
      var animationKeyPoints = Array.from(Object.keys(this.definitions)).map(Number);
      var getAnimationDuration = function getAnimationDuration(key, currentKeyPoint) {
        var maxDuration = currentKeyPoint / 100 * duration;
        var currentDuration = parsedKeyframes[key].reduce(function (acc, value) {
          return acc + value.duration;
        }, 0);
        return maxDuration - currentDuration;
      };
      var addKeyPoint = function addKeyPoint(_ref) {
        var key = _ref.key,
          value = _ref.value,
          currentKeyPoint = _ref.currentKeyPoint,
          easing = _ref.easing;
        if (!(key in parsedKeyframes)) {
          throw new _errors.ReanimatedError("Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')");
        }
        if (true && easing) {
          (0, _util.assertEasingIsWorklet)(easing);
        }
        parsedKeyframes[key].push({
          duration: getAnimationDuration(key, currentKeyPoint),
          value: value,
          easing: easing
        });
      };
      animationKeyPoints.filter(function (value) {
        return value !== 0;
      }).sort(function (a, b) {
        return a - b;
      }).forEach(function (keyPoint) {
        if (keyPoint < 0 || keyPoint > 100) {
          throw new _errors.ReanimatedError('Keyframe should be in between range 0 - 100.');
        }
        var keyframe = _this2.definitions[keyPoint];
        var easing = keyframe.easing;
        delete keyframe.easing;
        var addKeyPointWith = function addKeyPointWith(key, value) {
          return addKeyPoint({
            key: key,
            value: value,
            currentKeyPoint: keyPoint,
            easing: easing
          });
        };
        Object.keys(keyframe).forEach(function (key) {
          if (key === 'transform') {
            if (!Array.isArray(keyframe.transform)) {
              return;
            }
            keyframe.transform.forEach(function (transformStyle, index) {
              Object.keys(transformStyle).forEach(function (transformProp) {
                addKeyPointWith(makeKeyframeKey(index, transformProp), transformStyle[transformProp]);
              });
            });
          } else {
            addKeyPointWith(key, keyframe[key]);
          }
        });
      });
      return {
        initialValues: initialValues,
        keyframes: parsedKeyframes
      };
    }
  }, {
    key: "duration",
    value: function duration(durationMs) {
      this.durationV = durationMs;
      return this;
    }
  }, {
    key: "delay",
    value: function delay(delayMs) {
      this.delayV = delayMs;
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback(callback) {
      this.callbackV = callback;
      return this;
    }
  }, {
    key: "reduceMotion",
    value: function reduceMotion(reduceMotionV) {
      this.reduceMotionV = reduceMotionV;
      return this;
    }
  }, {
    key: "getDelayFunction",
    value: function getDelayFunction() {
      var delay = this.delayV;
      var reduceMotion = this.reduceMotionV;
      return delay ? function (delay, animation) {
        'worklet';

        return (0, _index.withDelay)(delay, animation, reduceMotion);
      } : function (_, animation) {
        'worklet';

        animation.reduceMotion = (0, _util.getReduceMotionFromConfig)(reduceMotion);
        return animation;
      };
    }
  }]);
}();
function makeKeyframeKey(index, transformProp) {
  'worklet';

  return `${index}_transform:${transformProp}`;
}
var Keyframe = exports.Keyframe = InnerKeyframe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,