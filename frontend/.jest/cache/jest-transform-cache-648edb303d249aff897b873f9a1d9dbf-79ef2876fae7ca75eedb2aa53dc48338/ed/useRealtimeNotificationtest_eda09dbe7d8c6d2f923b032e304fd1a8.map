{"version":3,"names":["_getJestObj","mock","init","jest","fn","mockResolvedValue","undefined","isConnected","disconnect","on","off","emit","useNotification","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_useRealtimeNotification","_socketService","_NotificationContext","_require","describe","DEFAULT_TIMEOUT","beforeAll","setTimeout","afterAll","beforeEach","clearAllMocks","socketService","mockReturnValue","fetchNotifications","setUnreadCount","mockImplementation","Promise","resolve","it","_renderHook","renderHook","useRealtimeNotification","result","expect","current","toHaveProperty","_renderHook2","toBe","isLoading","error","toBeNull","default","_renderHook3","autoConnect","act","connect","toHaveBeenCalled","_renderHook4","connectPromise","mockImplementationOnce","_renderHook5","toHaveBeenCalledWith","any","Function","_renderHook6","markAsRead","not","markAllAsRead","testError","Error","mockRejectedValueOnce","originalConsoleError","console","_renderHook7","_renderHook8","unmount"],"sources":["useRealtimeNotification.test.ts"],"sourcesContent":["// __tests__/hooks/useRealtimeNotification.test.ts\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport { useRealtimeNotification } from '../../src/hooks/useRealtimeNotification';\r\nimport socketService from '../../src/services/socketService';\r\nimport { useNotification } from '../../src/contexts/NotificationContext';\r\n\r\n// 모킹\r\njest.mock('../../src/services/socketService', () => ({\r\n  init: jest.fn().mockResolvedValue(undefined),\r\n  isConnected: jest.fn(),\r\n  disconnect: jest.fn(),\r\n  on: jest.fn(),\r\n  off: jest.fn(),\r\n  emit: jest.fn(),\r\n}));\r\n\r\njest.mock('../../src/contexts/NotificationContext', () => ({\r\n  useNotification: jest.fn(),\r\n}));\r\n\r\ndescribe('useRealtimeNotification', () => {\r\n  // 타입 오류 수정: getProperty 대신 직접 설정\r\n  const DEFAULT_TIMEOUT = 5000; // 기본 타임아웃을 정의\r\n\r\n  beforeAll(() => {\r\n    // 테스트 타임아웃 증가\r\n    jest.setTimeout(30000);\r\n  });\r\n\r\n  afterAll(() => {\r\n    // 원래 타임아웃으로 복원\r\n    jest.setTimeout(DEFAULT_TIMEOUT);\r\n  });\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 기본 모킹 설정\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(false);\r\n    \r\n    // 컨텍스트 모킹\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      fetchNotifications: jest.fn().mockResolvedValue(undefined),\r\n      setUnreadCount: jest.fn(),\r\n    });\r\n  });\r\n\r\n  // socketService.init과 socketService.disconnect에 구체적인 동작 정의\r\n  beforeEach(() => {\r\n    (socketService.init as jest.Mock).mockImplementation(() => Promise.resolve());\r\n    (socketService.disconnect as jest.Mock).mockImplementation(() => {});\r\n  });\r\n\r\n\r\n  it('should have expected properties and methods', () => {\r\n    const { result } = renderHook(() => useRealtimeNotification());\r\n    \r\n    // 기본 API 확인\r\n    expect(result.current).toHaveProperty('isConnected');\r\n    expect(result.current).toHaveProperty('isLoading');\r\n    expect(result.current).toHaveProperty('error');\r\n    expect(result.current).toHaveProperty('connect');\r\n    expect(result.current).toHaveProperty('disconnect');\r\n    expect(result.current).toHaveProperty('markAsRead');\r\n    expect(result.current).toHaveProperty('markAllAsRead');\r\n  });\r\n\r\n  it('should initialize with default values', () => {\r\n    const { result } = renderHook(() => useRealtimeNotification());\r\n    \r\n    expect(result.current.isConnected).toBe(false);\r\n    // 실제 구현에서는 isLoading이 true로 초기화됨\r\n    expect(result.current.isLoading).toBe(true);\r\n    expect(result.current.error).toBeNull();\r\n  });\r\n\r\n  it('should call socketService.init in connect function', async () => {\r\n    const { result } = renderHook(() => useRealtimeNotification({ autoConnect: false }));\r\n    \r\n    await act(async () => {\r\n      await result.current.connect();\r\n    });\r\n    \r\n    expect(socketService.init).toHaveBeenCalled();\r\n  });\r\n  \r\n  it('should handle loading state during connection process', async () => {\r\n    // 실제 구현에서 isLoading이 어떻게 변하는지에 맞춰 테스트\r\n    const { result } = renderHook(() => useRealtimeNotification({ autoConnect: false }));\r\n    \r\n    let connectPromise: Promise<void>;\r\n    \r\n    await act(async () => {\r\n      // init 실행 시간 단축\r\n      (socketService.init as jest.Mock).mockImplementationOnce(() => Promise.resolve());\r\n      \r\n      connectPromise = result.current.connect();\r\n      \r\n      // 실제 구현에 맞춰 로딩 상태 확인\r\n      expect(result.current.isLoading).toBe(false);\r\n      \r\n      await connectPromise;\r\n    });\r\n    \r\n    // 연결 완료 후 로딩 상태 확인\r\n    expect(result.current.isLoading).toBe(false);\r\n  });\r\n  \r\n  it('should call socketService.disconnect in disconnect function', () => {\r\n    const { result } = renderHook(() => useRealtimeNotification());\r\n    \r\n    act(() => {\r\n      result.current.disconnect();\r\n    });\r\n    \r\n    expect(socketService.disconnect).toHaveBeenCalled();\r\n  });\r\n  \r\n  it('should register socket event listeners on mount', () => {\r\n    renderHook(() => useRealtimeNotification());\r\n    \r\n    // 이벤트 리스너 등록 확인\r\n    expect(socketService.on).toHaveBeenCalledWith('connect', expect.any(Function));\r\n    expect(socketService.on).toHaveBeenCalledWith('disconnect', expect.any(Function));\r\n    expect(socketService.on).toHaveBeenCalledWith('new_notification', expect.any(Function));\r\n    expect(socketService.on).toHaveBeenCalledWith('unread_notifications_count', expect.any(Function));\r\n  });\r\n  \r\n  it('should not call socketService.emit when not connected', () => {\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(false);\r\n    \r\n    const { result } = renderHook(() => useRealtimeNotification());\r\n    \r\n    // 연결되지 않은 상태에서 markAsRead 호출\r\n    act(() => {\r\n      result.current.markAsRead(5);\r\n    });\r\n    \r\n    // emit이 호출되지 않아야 함\r\n    expect(socketService.emit).not.toHaveBeenCalled();\r\n    \r\n    // markAllAsRead 호출\r\n    act(() => {\r\n      result.current.markAllAsRead();\r\n    });\r\n    \r\n    // 여전히 emit이 호출되지 않아야 함\r\n    expect(socketService.emit).not.toHaveBeenCalled();\r\n  });\r\n  \r\n  it('should handle connection error', async () => {\r\n    // init에서 에러 발생하도록 설정\r\n    const testError = new Error('Connection error');\r\n    (socketService.init as jest.Mock).mockRejectedValueOnce(testError);\r\n    \r\n    // console.error 모킹\r\n    const originalConsoleError = console.error;\r\n    console.error = jest.fn();\r\n    \r\n    const { result } = renderHook(() => useRealtimeNotification({ autoConnect: false }));\r\n    \r\n    await act(async () => {\r\n      try {\r\n        await result.current.connect();\r\n      } catch (error) {\r\n        // 에러는 무시 - 훅 내부에서 처리됨\r\n      }\r\n    });\r\n    \r\n    // 에러 상태 확인\r\n    expect(result.current.error).toBe('Connection error');\r\n    expect(result.current.isLoading).toBe(false);\r\n    expect(console.error).toHaveBeenCalled();\r\n    \r\n    // 모킹 복원\r\n    console.error = originalConsoleError;\r\n  });\r\n  \r\n  it('should clean up listeners on unmount', () => {\r\n    const { unmount } = renderHook(() => useRealtimeNotification());\r\n    \r\n    // 명시적으로 정리 작업 추가\r\n    act(() => {\r\n      unmount();\r\n    });\r\n    \r\n    expect(socketService.off).toHaveBeenCalled();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}