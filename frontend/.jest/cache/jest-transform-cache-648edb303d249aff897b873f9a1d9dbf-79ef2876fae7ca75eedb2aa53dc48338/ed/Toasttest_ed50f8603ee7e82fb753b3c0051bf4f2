a39596a40000645515768b375f067d26
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: jest.fn(function (props) {
      return {
        type: 'TouchableOpacity',
        props: props
      };
    }),
    Animated: {
      View: jest.fn(function (props) {
        return {
          type: 'Animated.View',
          props: props
        };
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            if (cb) cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          })
        };
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
_reactNative.fireEvent.press = jest.fn(function (element) {
  if (element && element.props && element.props.onPress) {
    element.props.onPress();
    return true;
  }
  return false;
});
describe('Toast', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  test('renders correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        testID: "toast"
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('toast')).toBeTruthy();
    expect(getByText('테스트 메시지')).toBeTruthy();
  }, 10000);
  test('does not render when visible is false', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        testID: "toast"
      })),
      queryByTestId = _render2.queryByTestId;
    expect(queryByTestId('toast')).toBeNull();
  }, 10000);
  test('renders with different types', function () {
    var types = ['success', 'error', 'info', 'warning'];
    types.forEach(function (type) {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
          visible: true,
          message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
          type: type,
          testID: "toast"
        })),
        getByTestId = _render3.getByTestId;
      expect(getByTestId('toast')).toBeTruthy();
    });
  }, 10000);
  test('renders with top position', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        position: "top",
        testID: "toast"
      })),
      getByTestId = _render4.getByTestId;
    expect(getByTestId('toast')).toBeTruthy();
  }, 10000);
  test('icon renders correctly', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
        testID: "toast"
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('test-icon')).toBeTruthy();
  }, 10000);
  test('closes when pressed', function () {
    var onClose = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose,
        testID: "toast-touchable"
      })),
      getByTestId = _render6.getByTestId;
    var touchable = getByTestId('toast-touchable');
    _reactNative.fireEvent.press(touchable);
    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('onClose is called after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    jest.advanceTimersByTime(1000);
    jest.runAllTimers();
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('ToastController should handle show and hide', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    expect(mockToast.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockToast.hide).toHaveBeenCalled();
  }, 10000);
  test('ToastController handles missing instance', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiamVzdCIsImZuIiwic3R5bGVzIiwiVmlldyIsIlRleHQiLCJUb3VjaGFibGVPcGFjaXR5IiwicHJvcHMiLCJ0eXBlIiwiQW5pbWF0ZWQiLCJ0aW1pbmciLCJzdGFydCIsImNiIiwiZmluaXNoZWQiLCJWYWx1ZSIsInNldFZhbHVlIiwiaW50ZXJwb2xhdGUiLCJQbGF0Zm9ybSIsIk9TIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfVG9hc3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9yZXF1aXJlIiwidXNlRmFrZVRpbWVycyIsIlRlc3RJY29uIiwianN4IiwidGVzdElEIiwiY2hpbGRyZW4iLCJmaXJlRXZlbnQiLCJwcmVzcyIsImVsZW1lbnQiLCJvblByZXNzIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImNsZWFyQWxsVGltZXJzIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJ2aXNpYmxlIiwibWVzc2FnZSIsImdldEJ5VGVzdElkIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwicXVlcnlCeVRlc3RJZCIsInRvQmVOdWxsIiwidHlwZXMiLCJmb3JFYWNoIiwiX3JlbmRlcjMiLCJfcmVuZGVyNCIsInBvc2l0aW9uIiwiX3JlbmRlcjUiLCJpY29uIiwib25DbG9zZSIsIl9yZW5kZXI2IiwidG91Y2hhYmxlIiwicnVuQWxsVGltZXJzIiwidG9IYXZlQmVlbkNhbGxlZCIsImR1cmF0aW9uIiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsIm1vY2tUb2FzdCIsInNob3ciLCJoaWRlIiwiVG9hc3RDb250cm9sbGVyIiwic2V0UmVmIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJub3QiLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiVG9hc3QudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2NvbXBvbmVudHMvVG9hc3QudGVzdC50c3hcclxuLy8g66qo7YK57J2EIOuovOyggCDshKTsoJVcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiAoe1xyXG4gIFN0eWxlU2hlZXQ6IHtcclxuICAgIGNyZWF0ZTogamVzdC5mbihzdHlsZXMgPT4gc3R5bGVzKSxcclxuICB9LFxyXG4gIFZpZXc6ICdWaWV3JyxcclxuICBUZXh0OiAnVGV4dCcsXHJcbiAgVG91Y2hhYmxlT3BhY2l0eTogamVzdC5mbihwcm9wcyA9PiAoe1xyXG4gICAgdHlwZTogJ1RvdWNoYWJsZU9wYWNpdHknLFxyXG4gICAgcHJvcHMsXHJcbiAgfSkpLFxyXG4gIEFuaW1hdGVkOiB7XHJcbiAgICBWaWV3OiBqZXN0LmZuKHByb3BzID0+ICh7XHJcbiAgICAgIHR5cGU6ICdBbmltYXRlZC5WaWV3JyxcclxuICAgICAgcHJvcHMsXHJcbiAgICB9KSksXHJcbiAgICB0aW1pbmc6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgc3RhcnQ6IGplc3QuZm4oY2IgPT4ge1xyXG4gICAgICAgIGlmIChjYikgY2IoeyBmaW5pc2hlZDogdHJ1ZSB9KTtcclxuICAgICAgfSksXHJcbiAgICB9KSksXHJcbiAgICBWYWx1ZTogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICBzZXRWYWx1ZTogamVzdC5mbigpLFxyXG4gICAgICBpbnRlcnBvbGF0ZTogamVzdC5mbigoKSA9PiAoe30pKSxcclxuICAgIH0pKSxcclxuICB9LFxyXG4gIFBsYXRmb3JtOiB7IE9TOiAnYW5kcm9pZCcgfSxcclxufSkpO1xyXG5cclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBUb2FzdCwgeyBUb2FzdENvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9Ub2FzdCc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuLy8g7YOA7J2066i4IOuqqO2CuVxyXG5qZXN0LnVzZUZha2VUaW1lcnMoKTtcclxuXHJcbi8vIOqwhOuLqO2VnCDslYTsnbTsvZgg7Lu07Y+s64SM7Yq4IOygleydmFxyXG5jb25zdCBUZXN0SWNvbiA9ICgpID0+IDxUZXh0IHRlc3RJRD1cInRlc3QtaWNvblwiPuyVhOydtOy9mDwvVGV4dD47XHJcblxyXG4vLyBmaXJlRXZlbnQucHJlc3Mg66qo7YK5XHJcbmZpcmVFdmVudC5wcmVzcyA9IGplc3QuZm4oKGVsZW1lbnQpID0+IHtcclxuICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnByb3BzICYmIGVsZW1lbnQucHJvcHMub25QcmVzcykge1xyXG4gICAgZWxlbWVudC5wcm9wcy5vblByZXNzKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdUb2FzdCcsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgamVzdC5jbGVhckFsbFRpbWVycygpO1xyXG4gIH0pO1xyXG5cclxuICAvLyDqsIEg7YWM7Iqk7Yq47JeQIO2DgOyehOyVhOybgyDshKTsoJUgLSAxMOy0iFxyXG4gIHRlc3QoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8VG9hc3QgdmlzaWJsZT17dHJ1ZX0gbWVzc2FnZT1cIu2FjOyKpO2KuCDrqZTsi5zsp4BcIiB0ZXN0SUQ9XCJ0b2FzdFwiIC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3RvYXN0JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2FjOyKpO2KuCDrqZTsi5zsp4AnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0sIDEwMDAwKTtcclxuXHJcbiAgdGVzdCgnZG9lcyBub3QgcmVuZGVyIHdoZW4gdmlzaWJsZSBpcyBmYWxzZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcXVlcnlCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8VG9hc3QgdmlzaWJsZT17ZmFsc2V9IG1lc3NhZ2U9XCLthYzsiqTtirgg66mU7Iuc7KeAXCIgdGVzdElEPVwidG9hc3RcIiAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ3RvYXN0JykpLnRvQmVOdWxsKCk7XHJcbiAgfSwgMTAwMDApO1xyXG5cclxuICB0ZXN0KCdyZW5kZXJzIHdpdGggZGlmZmVyZW50IHR5cGVzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgdHlwZXMgPSBbJ3N1Y2Nlc3MnLCAnZXJyb3InLCAnaW5mbycsICd3YXJuaW5nJ107XHJcbiAgICBcclxuICAgIHR5cGVzLmZvckVhY2godHlwZSA9PiB7XHJcbiAgICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgICA8VG9hc3QgdmlzaWJsZT17dHJ1ZX0gbWVzc2FnZT1cIu2FjOyKpO2KuCDrqZTsi5zsp4BcIiB0eXBlPXt0eXBlIGFzIGFueX0gdGVzdElEPVwidG9hc3RcIiAvPlxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3RvYXN0JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gIH0sIDEwMDAwKTtcclxuXHJcbiAgdGVzdCgncmVuZGVycyB3aXRoIHRvcCBwb3NpdGlvbicsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPFRvYXN0IHZpc2libGU9e3RydWV9IG1lc3NhZ2U9XCLthYzsiqTtirgg66mU7Iuc7KeAXCIgcG9zaXRpb249XCJ0b3BcIiB0ZXN0SUQ9XCJ0b2FzdFwiIC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3RvYXN0JykpLnRvQmVUcnV0aHkoKTtcclxuICB9LCAxMDAwMCk7XHJcblxyXG4gIHRlc3QoJ2ljb24gcmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxUb2FzdCBcclxuICAgICAgICB2aXNpYmxlPXt0cnVlfSBcclxuICAgICAgICBtZXNzYWdlPVwi7YWM7Iqk7Yq4IOuplOyLnOyngFwiIFxyXG4gICAgICAgIGljb249ezxUZXN0SWNvbiAvPn0gXHJcbiAgICAgICAgdGVzdElEPVwidG9hc3RcIlxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCd0ZXN0LWljb24nKSkudG9CZVRydXRoeSgpO1xyXG4gIH0sIDEwMDAwKTtcclxuXHJcbiAgdGVzdCgnY2xvc2VzIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IG9uQ2xvc2UgPSBqZXN0LmZuKCk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPFRvYXN0IFxyXG4gICAgICAgIHZpc2libGU9e3RydWV9IFxyXG4gICAgICAgIG1lc3NhZ2U9XCLthYzsiqTtirgg66mU7Iuc7KeAXCIgXHJcbiAgICAgICAgb25DbG9zZT17b25DbG9zZX0gXHJcbiAgICAgICAgdGVzdElEPVwidG9hc3QtdG91Y2hhYmxlXCJcclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOyngeygkSBvblByZXNzIO2YuOy2nFxyXG4gICAgY29uc3QgdG91Y2hhYmxlID0gZ2V0QnlUZXN0SWQoJ3RvYXN0LXRvdWNoYWJsZScpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHRvdWNoYWJsZSk7XHJcbiAgICBcclxuICAgIC8vIO2DgOydtOuouCDsi6TtlolcclxuICAgIGplc3QucnVuQWxsVGltZXJzKCk7XHJcbiAgICBcclxuICAgIC8vIG9uQ2xvc2XqsIAg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KG9uQ2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9LCAxMDAwMCk7XHJcblxyXG4gIHRlc3QoJ29uQ2xvc2UgaXMgY2FsbGVkIGFmdGVyIGR1cmF0aW9uJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgb25DbG9zZSA9IGplc3QuZm4oKTtcclxuICAgIFxyXG4gICAgcmVuZGVyKFxyXG4gICAgICA8VG9hc3QgXHJcbiAgICAgICAgdmlzaWJsZT17dHJ1ZX0gXHJcbiAgICAgICAgbWVzc2FnZT1cIu2FjOyKpO2KuCDrqZTsi5zsp4BcIiBcclxuICAgICAgICBkdXJhdGlvbj17MTAwMH0gXHJcbiAgICAgICAgb25DbG9zZT17b25DbG9zZX0gXHJcbiAgICAgICAgdGVzdElEPVwidG9hc3RcIlxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8g7YOA7J2066i4IOynhO2WiVxyXG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMDApO1xyXG4gICAgamVzdC5ydW5BbGxUaW1lcnMoKTtcclxuICAgIFxyXG4gICAgLy8gb25DbG9zZeqwgCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3Qob25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0sIDEwMDAwKTtcclxuXHJcbiAgdGVzdCgnVG9hc3RDb250cm9sbGVyIHNob3VsZCBoYW5kbGUgc2hvdyBhbmQgaGlkZScsICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tUb2FzdCA9IHtcclxuICAgICAgc2hvdzogamVzdC5mbigpLFxyXG4gICAgICBoaWRlOiBqZXN0LmZuKClcclxuICAgIH07XHJcbiAgICBcclxuICAgIFRvYXN0Q29udHJvbGxlci5zZXRSZWYobW9ja1RvYXN0KTtcclxuICAgIFxyXG4gICAgVG9hc3RDb250cm9sbGVyLnNob3coeyBtZXNzYWdlOiAn7YWM7Iqk7Yq4IOuplOyLnOyngCcgfSk7XHJcbiAgICBleHBlY3QobW9ja1RvYXN0LnNob3cpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgbWVzc2FnZTogJ+2FjOyKpO2KuCDrqZTsi5zsp4AnIH0pO1xyXG4gICAgXHJcbiAgICBUb2FzdENvbnRyb2xsZXIuaGlkZSgpO1xyXG4gICAgZXhwZWN0KG1vY2tUb2FzdC5oaWRlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSwgMTAwMDApO1xyXG5cclxuICB0ZXN0KCdUb2FzdENvbnRyb2xsZXIgaGFuZGxlcyBtaXNzaW5nIGluc3RhbmNlJywgKCkgPT4ge1xyXG4gICAgVG9hc3RDb250cm9sbGVyLnNldFJlZihudWxsKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KCgpID0+IHtcclxuICAgICAgVG9hc3RDb250cm9sbGVyLnNob3coeyBtZXNzYWdlOiAn7YWM7Iqk7Yq4IOuplOyLnOyngCcgfSk7XHJcbiAgICAgIFRvYXN0Q29udHJvbGxlci5oaWRlKCk7XHJcbiAgICB9KS5ub3QudG9UaHJvdygpO1xyXG4gIH0sIDEwMDAwKTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFFQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFO0VBQUEsT0FBTztJQUMvQkMsVUFBVSxFQUFFO01BQ1ZDLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQUMsTUFBTTtRQUFB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