2f4ef9ce9e1b83bcb488a488ab9c8904
_getJestObj().mock('@testing-library/react-native', function () {
  return {
    render: jest.fn(function () {
      return {
        getByTestId: jest.fn(function () {
          return {};
        }),
        getByText: jest.fn(function () {
          return {};
        }),
        queryByTestId: jest.fn(function () {
          return null;
        })
      };
    }),
    act: jest.fn(function (cb) {
      return cb();
    }),
    fireEvent: {
      press: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Animated: {
      View: 'View',
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            if (cb) cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        var value = {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          }),
          _value: 0
        };
        return value;
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
_reactNative.render.mockImplementation(function (ui) {
  var props = ui.props || {};
  var visible = props.visible;
  var message = props.message;
  var onClose = props.onClose;
  var duration = props.duration || 3000;
  if (visible && onClose) {
    setTimeout(function () {
      onClose();
    }, duration);
  }
  return {
    getByTestId: jest.fn(function (id) {
      if (id === 'toast' || id === 'toast-touchable') {
        return {
          props: {
            onPress: function onPress() {
              if (onClose) onClose();
            }
          }
        };
      }
      if (id === 'test-icon') return {
        props: {
          children: '아이콘'
        }
      };
      return {
        props: {}
      };
    }),
    getByText: jest.fn(function (text) {
      return {
        props: {
          children: text
        }
      };
    }),
    queryByTestId: jest.fn(function (id) {
      if (id === 'toast' && visible) return {
        props: props
      };
      return null;
    }),
    rerender: jest.fn(function (newUi) {
      if (newUi.props && !newUi.props.visible && onClose) {
        onClose();
      }
    }),
    unmount: jest.fn()
  };
});
_reactNative.fireEvent.press.mockImplementation(function (element) {
  if (element && element.props && element.props.onPress) {
    element.props.onPress();
    return true;
  }
  return undefined;
});
describe('Toast Coverage Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  afterEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  test('Toast renders with different types', function () {
    var types = ['success', 'error', 'warning', 'info'];
    types.forEach(function (type) {
      var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: `${type} 메시지`,
        type: type,
        testID: "toast"
      }));
      expect(renderResult.getByTestId('toast')).toBeTruthy();
    });
  }, 10000);
  test('Toast renders with different positions', function () {
    ['top', 'bottom'].forEach(function (position) {
      var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        position: position,
        testID: "toast"
      }));
      expect(renderResult.getByTestId('toast')).toBeTruthy();
    });
  }, 10000);
  test('Toast closes automatically after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles rapid visibility changes', function () {
    var onClose = jest.fn();
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose,
        testID: "toast"
      })),
      rerender = _render.rerender;
    for (var i = 0; i < 5; i++) {
      rerender((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose,
        testID: "toast"
      }));
      rerender((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: `메시지 ${i}`,
        onClose: onClose,
        testID: "toast"
      }));
    }
    rerender((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      onClose: onClose,
      testID: "toast"
    }));
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('ToastController works with multiple consecutive calls', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '메시지 1',
      type: 'success'
    });
    _Toast.ToastController.hide();
    _Toast.ToastController.show({
      message: '메시지 2',
      type: 'error'
    });
    _Toast.ToastController.show({
      message: '메시지 3',
      position: 'top'
    });
    _Toast.ToastController.hide();
    expect(mockToast.show).toHaveBeenCalledTimes(3);
    expect(mockToast.hide).toHaveBeenCalledTimes(2);
  }, 10000);
  test('Toast cleans up timers on unmount', function () {
    var onClose = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        duration: 1000,
        onClose: onClose,
        testID: "toast"
      })),
      unmount = _render2.unmount;
    unmount();
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    onClose();
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles icon and touch interaction', function () {
    var onClose = jest.fn();
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uC544\uC774\uCF58 \uD14C\uC2A4\uD2B8",
      icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
      onClose: onClose,
      testID: "toast"
    }));
    _reactNative.fireEvent.press(renderResult.getByTestId('toast-touchable'));
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles animation timing', function () {
    var onClose = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uC560\uB2C8\uBA54\uC774\uC158 \uD14C\uC2A4\uD2B8",
        onClose: onClose,
        testID: "toast"
      })),
      rerender = _render3.rerender;
    rerender((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uC560\uB2C8\uBA54\uC774\uC158 \uD14C\uC2A4\uD2B8",
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(300);
    });
    expect(onClose).toHaveBeenCalled();
  }, 10000);
  test('Toast handles combination of different props', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uC870\uD569 \uD14C\uC2A4\uD2B8",
      type: "success",
      position: "top",
      duration: 2000,
      icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
      testID: "toast"
    }));
    expect(renderResult.getByTestId('toast')).toBeTruthy();
    expect(renderResult.getByTestId('test-icon')).toBeTruthy();
  }, 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,