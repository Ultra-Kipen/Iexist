c06f857fdf757425f7f93f4c38323eaf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _SafeAreaView = _interopRequireDefault(require("../../Components/SafeAreaView/SafeAreaView"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useWindowDimensions2 = _interopRequireDefault(require("../../Utilities/useWindowDimensions"));
var _RCTInputAccessoryViewNativeComponent = _interopRequireDefault(require("./RCTInputAccessoryViewNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var InputAccessoryView = function InputAccessoryView(props) {
  var _useWindowDimensions = (0, _useWindowDimensions2.default)(),
    width = _useWindowDimensions.width;
  if (_Platform.default.OS === 'ios') {
    if (React.Children.count(props.children) === 0) {
      return null;
    }
    return (0, _jsxRuntime.jsx)(_RCTInputAccessoryViewNativeComponent.default, {
      style: [props.style, styles.container],
      nativeID: props.nativeID,
      backgroundColor: props.backgroundColor,
      children: (0, _jsxRuntime.jsx)(_SafeAreaView.default, {
        style: [styles.safeAreaView, {
          width: width
        }],
        children: props.children
      })
    });
  } else {
    console.warn('<InputAccessoryView> is only supported on iOS.');
    return null;
  }
};
var styles = _StyleSheet.default.create({
  container: {
    position: 'absolute'
  },
  safeAreaView: {
    flex: 1
  }
});
var _default = exports.default = InputAccessoryView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,