354d5b1261fa774ba0361b2daba38b6c
_getJestObj().mock('react-native', function () {
  return {
    Animated: {
      View: function View(_ref) {
        var style = _ref.style,
          children = _ref.children;
        return (0, _jsxRuntime.jsx)("div", {
          style: style,
          children: children
        });
      },
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              interpolate: jest.fn()
            };
          })
        };
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback();
          })
        };
      })
    },
    View: function View(_ref2) {
      var style = _ref2.style,
        children = _ref2.children;
      return (0, _jsxRuntime.jsx)("div", {
        style: style,
        children: children
      });
    },
    Text: function Text(_ref3) {
      var style = _ref3.style,
        children = _ref3.children;
      return (0, _jsxRuntime.jsx)("span", {
        style: style,
        children: children
      });
    },
    TouchableOpacity: function TouchableOpacity(_ref4) {
      var onPress = _ref4.onPress,
        style = _ref4.style,
        children = _ref4.children,
        testID = _ref4.testID;
      return (0, _jsxRuntime.jsx)("button", {
        onClick: onPress,
        style: style,
        "data-testid": testID,
        children: children
      });
    },
    StyleSheet: {
      create: function create(styles) {
        return styles;
      },
      flatten: jest.fn(function (style) {
        return style;
      })
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalSetTimeout = global.setTimeout;
var originalClearTimeout = global.clearTimeout;
describe('Toast', function () {
  beforeEach(function () {
    jest.useFakeTimers();
    global.setTimeout = jest.fn(function (callback, timeout) {
      return originalSetTimeout(callback, timeout);
    });
    global.clearTimeout = jest.fn(function (id) {
      return originalClearTimeout(id);
    });
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.clearAllMocks();
    global.setTimeout = originalSetTimeout;
    global.clearTimeout = originalClearTimeout;
  });
  it('renders correctly with default props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0"
      })),
      getByText = _render.getByText;
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('does not render when visible is false', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0"
      })),
      queryByText = _render2.queryByText;
    expect(queryByText('테스트 메시지')).toBeNull();
  });
  it('renders with different background colors based on type', function () {
    var types = ['success', 'error', 'warning', 'info'];
    types.forEach(function (type) {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
          visible: true,
          message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
          type: type
        })),
        getByText = _render3.getByText;
      expect(getByText('테스트 메시지')).toBeTruthy();
    });
  });
  it('renders at the top when position is set to top', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        position: "top"
      })),
      getByText = _render4.getByText;
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('renders at the bottom by default', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0"
      })),
      getByText = _render5.getByText;
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('calls onClose after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 3000,
      onClose: onClose
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(3300);
    });
    expect(onClose).toHaveBeenCalled();
  });
  it('hides when tapped', function () {
    var onClose = jest.fn();
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        onClose: onClose
      })),
      getByTestId = _render6.getByTestId;
    _reactNative.fireEvent.click(getByTestId('toast-touchable'));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(300);
    });
    expect(onClose).toHaveBeenCalled();
  });
  it('renders icon when provided', function () {
    var TestIcon = function TestIcon() {
      return (0, _jsxRuntime.jsx)("span", {
        children: "\uC544\uC774\uCF58"
      });
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
        icon: (0, _jsxRuntime.jsx)(TestIcon, {})
      })),
      getByText = _render7.getByText;
    expect(getByText('아이콘')).toBeTruthy();
    expect(getByText('테스트 메시지')).toBeTruthy();
  });
  it('ToastController manages instances correctly', function () {
    var mockInstance = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockInstance);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockInstance.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    expect(mockInstance.hide).toHaveBeenCalledTimes(1);
  });
  it('ToastController handles missing instance gracefully', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,