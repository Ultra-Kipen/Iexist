18b8976229c804661322ee9995490747
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNetworkError = exports.handleApiError = exports.formatErrorMessage = exports.createErrorHandler = exports.ApiError = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var handleApiError = exports.handleApiError = function handleApiError(error) {
  if (error.response) {
    if (error.response.data && error.response.data.message) {
      return error.response.data.message;
    }
    if (error.response.data && error.response.data.error && error.response.data.error.message) {
      return error.response.data.error.message;
    }
  }
  if (isNetworkError(error)) {
    return '네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.';
  }
  return '오류가 발생했습니다. 다시 시도해주세요.';
};
var isNetworkError = exports.isNetworkError = function isNetworkError(error) {
  if (!error || !error.message) {
    return false;
  }
  var networkErrorMessages = ['Network Error', 'Failed to fetch', 'ECONNREFUSED', 'Connection refused', 'timeout'];
  return networkErrorMessages.some(function (msg) {
    return error.message.toLowerCase().includes(msg.toLowerCase());
  });
};
var formatErrorMessage = exports.formatErrorMessage = function formatErrorMessage(message) {
  var customRules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (message in customRules) {
    return customRules[message];
  }
  if (/^ERR_[A-Z0-9_]+$/.test(message)) {
    if (message === 'ERR_AUTH_001') {
      return '인증 오류가 발생했습니다. (ERR_AUTH_001)';
    }
    return `오류가 발생했습니다. (${message})`;
  }
  return message;
};
var ApiError = exports.ApiError = function (_Error) {
  function ApiError(message, statusCode, data) {
    var _this;
    (0, _classCallCheck2.default)(this, ApiError);
    _this = _callSuper(this, ApiError, [message]);
    _this.name = 'ApiError';
    _this.statusCode = statusCode;
    _this.data = data;
    Object.setPrototypeOf(_this, ApiError.prototype);
    return _this;
  }
  (0, _inherits2.default)(ApiError, _Error);
  return (0, _createClass2.default)(ApiError);
}((0, _wrapNativeSuper2.default)(Error));
var createErrorHandler = exports.createErrorHandler = function createErrorHandler(onError, defaultMessage) {
  return function (error) {
    if (error instanceof Error) {
      onError(error.message);
    } else if (error.response && error.response.data && error.response.data.message) {
      onError(error.response.data.message);
    } else {
      onError(defaultMessage);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,