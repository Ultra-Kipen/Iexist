c41523c5b245cb575cb1fd76b6926bcb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tagService = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("./client"));
var tagService = exports.tagService = {
  client: _client.default,
  getAllTags: function () {
    var _getAllTags = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield tagService.client.get('/tags');
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 목록 조회에 실패했습니다');
      }
    });
    function getAllTags() {
      return _getAllTags.apply(this, arguments);
    }
    return getAllTags;
  }(),
  getPopularTags: function () {
    var _getPopularTags = (0, _asyncToGenerator2.default)(function* () {
      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      try {
        var response = yield tagService.client.get('/tags/popular', {
          params: {
            limit: limit
          }
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('인기 태그 조회에 실패했습니다');
      }
    });
    function getPopularTags() {
      return _getPopularTags.apply(this, arguments);
    }
    return getPopularTags;
  }(),
  createTag: function () {
    var _createTag = (0, _asyncToGenerator2.default)(function* (name) {
      try {
        var response = yield tagService.client.post('/tags', {
          name: name
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 생성에 실패했습니다');
      }
    });
    function createTag(_x) {
      return _createTag.apply(this, arguments);
    }
    return createTag;
  }(),
  getTagById: function () {
    var _getTagById = (0, _asyncToGenerator2.default)(function* (tagId) {
      try {
        var response = yield tagService.client.get(`/tags/${tagId}`);
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 정보 조회에 실패했습니다');
      }
    });
    function getTagById(_x2) {
      return _getTagById.apply(this, arguments);
    }
    return getTagById;
  }(),
  updateTag: function () {
    var _updateTag = (0, _asyncToGenerator2.default)(function* (tagId, name) {
      try {
        var response = yield tagService.client.put(`/tags/${tagId}`, {
          name: name
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 수정에 실패했습니다');
      }
    });
    function updateTag(_x3, _x4) {
      return _updateTag.apply(this, arguments);
    }
    return updateTag;
  }(),
  deleteTag: function () {
    var _deleteTag = (0, _asyncToGenerator2.default)(function* (tagId) {
      try {
        var response = yield tagService.client.delete(`/tags/${tagId}`);
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 삭제에 실패했습니다');
      }
    });
    function deleteTag(_x5) {
      return _deleteTag.apply(this, arguments);
    }
    return deleteTag;
  }(),
  getPostsByTag: function () {
    var _getPostsByTag = (0, _asyncToGenerator2.default)(function* (tagId, params) {
      try {
        var response = yield tagService.client.get(`/tags/${tagId}/posts`, {
          params: params
        });
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그별 게시물 조회에 실패했습니다');
      }
    });
    function getPostsByTag(_x6, _x7) {
      return _getPostsByTag.apply(this, arguments);
    }
    return getPostsByTag;
  }(),
  searchTags: function () {
    var _searchTags = (0, _asyncToGenerator2.default)(function* (query) {
      try {
        var response = yield tagService.client.get('/tags/search', {
          params: {
            query: query
          }
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 검색에 실패했습니다');
      }
    });
    function searchTags(_x8) {
      return _searchTags.apply(this, arguments);
    }
    return searchTags;
  }(),
  addTagToPost: function () {
    var _addTagToPost = (0, _asyncToGenerator2.default)(function* (postId, tagId, postType) {
      try {
        var response = yield tagService.client.post(`/posts/${postId}/tags`, {
          tag_id: tagId,
          post_type: postType
        });
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('게시물에 태그 추가에 실패했습니다');
      }
    });
    function addTagToPost(_x9, _x10, _x11) {
      return _addTagToPost.apply(this, arguments);
    }
    return addTagToPost;
  }(),
  removeTagFromPost: function () {
    var _removeTagFromPost = (0, _asyncToGenerator2.default)(function* (postId, tagId, postType) {
      try {
        var response = yield tagService.client.delete(`/posts/${postId}/tags/${tagId}?post_type=${postType}`);
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('게시물에서 태그 제거에 실패했습니다');
      }
    });
    function removeTagFromPost(_x12, _x13, _x14) {
      return _removeTagFromPost.apply(this, arguments);
    }
    return removeTagFromPost;
  }(),
  getPostTags: function () {
    var _getPostTags = (0, _asyncToGenerator2.default)(function* (postId, postType) {
      try {
        var response = yield tagService.client.get(`/posts/${postId}/tags?post_type=${postType}`);
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('게시물의 태그 목록 조회에 실패했습니다');
      }
    });
    function getPostTags(_x15, _x16) {
      return _getPostTags.apply(this, arguments);
    }
    return getPostTags;
  }()
};
var _default = exports.default = tagService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJ0YWdTZXJ2aWNlIiwiZXhwb3J0cyIsImNsaWVudCIsImdldEFsbFRhZ3MiLCJfZ2V0QWxsVGFncyIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJyZXNwb25zZSIsImdldCIsImRhdGEiLCJlcnJvciIsIkVycm9yIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRQb3B1bGFyVGFncyIsIl9nZXRQb3B1bGFyVGFncyIsImxpbWl0IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwicGFyYW1zIiwiY3JlYXRlVGFnIiwiX2NyZWF0ZVRhZyIsIm5hbWUiLCJwb3N0IiwiX3giLCJnZXRUYWdCeUlkIiwiX2dldFRhZ0J5SWQiLCJ0YWdJZCIsIl94MiIsInVwZGF0ZVRhZyIsIl91cGRhdGVUYWciLCJwdXQiLCJfeDMiLCJfeDQiLCJkZWxldGVUYWciLCJfZGVsZXRlVGFnIiwiZGVsZXRlIiwiX3g1IiwiZ2V0UG9zdHNCeVRhZyIsIl9nZXRQb3N0c0J5VGFnIiwiX3g2IiwiX3g3Iiwic2VhcmNoVGFncyIsIl9zZWFyY2hUYWdzIiwicXVlcnkiLCJfeDgiLCJhZGRUYWdUb1Bvc3QiLCJfYWRkVGFnVG9Qb3N0IiwicG9zdElkIiwicG9zdFR5cGUiLCJ0YWdfaWQiLCJwb3N0X3R5cGUiLCJfeDkiLCJfeDEwIiwiX3gxMSIsInJlbW92ZVRhZ0Zyb21Qb3N0IiwiX3JlbW92ZVRhZ0Zyb21Qb3N0IiwiX3gxMiIsIl94MTMiLCJfeDE0IiwiZ2V0UG9zdFRhZ3MiLCJfZ2V0UG9zdFRhZ3MiLCJfeDE1IiwiX3gxNiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsidGFnU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvc2VydmljZXMvYXBpL3RhZ1NlcnZpY2UudHNcclxuXHJcbmltcG9ydCBjbGllbnQgZnJvbSAnLi9jbGllbnQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYWcge1xyXG4gIHRhZ19pZDogbnVtYmVyO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xyXG4gIHVwZGF0ZWRfYXQ/OiBzdHJpbmc7XHJcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgdW5kZWZpbmVkOyAvLyDsnbjrjbHsiqQg7Iuc6re464uI7LKYIOy2lOqwgFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhZ1dpdGhDb3VudCBleHRlbmRzIFRhZyB7XHJcbiAgcG9zdF9jb3VudDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdGFnU2VydmljZSA9IHtcclxuICBjbGllbnQsIC8vIO2FjOyKpO2KuOulvCDsnITtlbQgY2xpZW50IOqwneyytCDrhbjstpxcclxuICBcclxuICAvLyDrqqjrk6Ag7YOc6re4IOqwgOyguOyYpOq4sFxyXG4gIGdldEFsbFRhZ3M6IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFnU2VydmljZS5jbGllbnQuZ2V0PHtcclxuICAgICAgICBzdGF0dXM6IHN0cmluZztcclxuICAgICAgICBkYXRhOiBUYWdbXTtcclxuICAgICAgfT4oJy90YWdzJyk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLmRhdGE7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICB9XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign7YOc6re4IOuqqeuhnSDsobDtmozsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBcclxuICAvLyDsnbjquLAg7YOc6re4IOqwgOyguOyYpOq4sCAo7IKs7JqpIO2an+yImCDquLDspIApXHJcbiAgZ2V0UG9wdWxhclRhZ3M6IGFzeW5jIChsaW1pdDogbnVtYmVyID0gMTApID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFnU2VydmljZS5jbGllbnQuZ2V0PHtcclxuICAgICAgICBzdGF0dXM6IHN0cmluZztcclxuICAgICAgICBkYXRhOiBUYWdXaXRoQ291bnRbXTtcclxuICAgICAgfT4oJy90YWdzL3BvcHVsYXInLCB7IHBhcmFtczogeyBsaW1pdCB9IH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+yduOq4sCDtg5zqt7gg7KGw7ZqM7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLy8g7YOc6re4IOyDneyEse2VmOq4sFxyXG4gIGNyZWF0ZVRhZzogYXN5bmMgKG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0YWdTZXJ2aWNlLmNsaWVudC5wb3N0PHtcclxuICAgICAgICBzdGF0dXM6IHN0cmluZztcclxuICAgICAgICBkYXRhOiBUYWc7XHJcbiAgICAgIH0+KCcvdGFncycsIHsgbmFtZSB9KTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuZGF0YTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCftg5zqt7gg7IOd7ISx7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLy8g7Yq57KCVIO2DnOq3uCDsoJXrs7Qg6rCA7KC47Jik6riwXHJcbiAgZ2V0VGFnQnlJZDogYXN5bmMgKHRhZ0lkOiBudW1iZXIpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFnU2VydmljZS5jbGllbnQuZ2V0PHtcclxuICAgICAgICBzdGF0dXM6IHN0cmluZztcclxuICAgICAgICBkYXRhOiBUYWc7XHJcbiAgICAgIH0+KGAvdGFncy8ke3RhZ0lkfWApO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+2DnOq3uCDsoJXrs7Qg7KGw7ZqM7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLy8g7YOc6re4IOyImOygle2VmOq4sFxyXG4gIHVwZGF0ZVRhZzogYXN5bmMgKHRhZ0lkOiBudW1iZXIsIG5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0YWdTZXJ2aWNlLmNsaWVudC5wdXQ8e1xyXG4gICAgICAgIHN0YXR1czogc3RyaW5nO1xyXG4gICAgICAgIGRhdGE6IFRhZztcclxuICAgICAgfT4oYC90YWdzLyR7dGFnSWR9YCwgeyBuYW1lIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+2DnOq3uCDsiJjsoJXsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBcclxuICAvLyDtg5zqt7gg7IKt7KCc7ZWY6riwXHJcbiAgZGVsZXRlVGFnOiBhc3luYyAodGFnSWQ6IG51bWJlcikgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0YWdTZXJ2aWNlLmNsaWVudC5kZWxldGU8e1xyXG4gICAgICAgIHN0YXR1czogc3RyaW5nO1xyXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZztcclxuICAgICAgfT4oYC90YWdzLyR7dGFnSWR9YCk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+2DnOq3uCDsgq3soJzsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBcclxuICAvLyDtg5zqt7jroZwg6rKM7Iuc66y8IOqygOyDie2VmOq4sFxyXG4gIGdldFBvc3RzQnlUYWc6IGFzeW5jICh0YWdJZDogbnVtYmVyLCBwYXJhbXM/OiB7XHJcbiAgICBwYWdlPzogbnVtYmVyO1xyXG4gICAgbGltaXQ/OiBudW1iZXI7XHJcbiAgICBwb3N0X3R5cGU/OiAnbXlfZGF5JyB8ICdzb21lb25lX2RheSc7XHJcbiAgfSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0YWdTZXJ2aWNlLmNsaWVudC5nZXQ8e1xyXG4gICAgICAgIHN0YXR1czogc3RyaW5nO1xyXG4gICAgICAgIGRhdGE6IGFueVtdOyAvLyDsi6TsoJwg67CY7ZmYIO2DgOyeheyXkCDrp57qsowg7KGw7KCVIO2VhOyalFxyXG4gICAgICAgIHBhZ2luYXRpb24/OiB7XHJcbiAgICAgICAgICB0b3RhbDogbnVtYmVyO1xyXG4gICAgICAgICAgcGFnZTogbnVtYmVyO1xyXG4gICAgICAgICAgbGltaXQ6IG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgIH0+KGAvdGFncy8ke3RhZ0lkfS9wb3N0c2AsIHsgcGFyYW1zIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCftg5zqt7jrs4Qg6rKM7Iuc66y8IOyhsO2ajOyXkCDsi6TtjKjtlojsirXri4jri6QnKTtcclxuICAgIH1cclxuICB9LFxyXG4gIFxyXG4gIC8vIO2DnOq3uCDqsoDsg4ntlZjquLAgKOydtOumhOycvOuhnClcclxuICBzZWFyY2hUYWdzOiBhc3luYyAocXVlcnk6IHN0cmluZykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0YWdTZXJ2aWNlLmNsaWVudC5nZXQ8e1xyXG4gICAgICAgIHN0YXR1czogc3RyaW5nO1xyXG4gICAgICAgIGRhdGE6IFRhZ1tdO1xyXG4gICAgICB9PignL3RhZ3Mvc2VhcmNoJywgeyBwYXJhbXM6IHsgcXVlcnkgfSB9KTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuZGF0YTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCftg5zqt7gg6rKA7IOJ7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLy8g7Yq57KCVIOqyjOyLnOusvOyXkCDtg5zqt7gg7LaU6rCA7ZWY6riwXHJcbiAgYWRkVGFnVG9Qb3N0OiBhc3luYyAocG9zdElkOiBudW1iZXIsIHRhZ0lkOiBudW1iZXIsIHBvc3RUeXBlOiAnbXlfZGF5JyB8ICdzb21lb25lX2RheScpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFnU2VydmljZS5jbGllbnQucG9zdDx7XHJcbiAgICAgICAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xyXG4gICAgICB9PihgL3Bvc3RzLyR7cG9zdElkfS90YWdzYCwgeyB0YWdfaWQ6IHRhZ0lkLCBwb3N0X3R5cGU6IHBvc3RUeXBlIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfqsozsi5zrrLzsl5Ag7YOc6re4IOy2lOqwgOyXkCDsi6TtjKjtlojsirXri4jri6QnKTtcclxuICAgIH1cclxuICB9LFxyXG4gIFxyXG4gIC8vIO2KueyglSDqsozsi5zrrLzsl5DshJwg7YOc6re4IOygnOqxsO2VmOq4sFxyXG4gIHJlbW92ZVRhZ0Zyb21Qb3N0OiBhc3luYyAocG9zdElkOiBudW1iZXIsIHRhZ0lkOiBudW1iZXIsIHBvc3RUeXBlOiAnbXlfZGF5JyB8ICdzb21lb25lX2RheScpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFnU2VydmljZS5jbGllbnQuZGVsZXRlPHtcclxuICAgICAgICBzdGF0dXM6IHN0cmluZztcclxuICAgICAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICAgIH0+KGAvcG9zdHMvJHtwb3N0SWR9L3RhZ3MvJHt0YWdJZH0/cG9zdF90eXBlPSR7cG9zdFR5cGV9YCk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+qyjOyLnOusvOyXkOyEnCDtg5zqt7gg7KCc6rGw7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLy8g7Yq57KCVIOqyjOyLnOusvOydmCDrqqjrk6Ag7YOc6re4IOqwgOyguOyYpOq4sFxyXG4gIGdldFBvc3RUYWdzOiBhc3luYyAocG9zdElkOiBudW1iZXIsIHBvc3RUeXBlOiAnbXlfZGF5JyB8ICdzb21lb25lX2RheScpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGFnU2VydmljZS5jbGllbnQuZ2V0PHtcclxuICAgICAgICBzdGF0dXM6IHN0cmluZztcclxuICAgICAgICBkYXRhOiBUYWdbXTtcclxuICAgICAgfT4oYC9wb3N0cy8ke3Bvc3RJZH0vdGFncz9wb3N0X3R5cGU9JHtwb3N0VHlwZX1gKTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGEuZGF0YTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfqsozsi5zrrLzsnZgg7YOc6re4IOuqqeuhnSDsobDtmozsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdGFnU2VydmljZTsiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQUFBLE9BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQWNPLElBQU1DLFVBQVUsR0FBQUMsT0FBQSxDQUFBRCxVQUFBLEdBQUc7RUFDeEJFLE1BQU0sRUFBTkEsZUFBTTtFQUdOQyxVQUFVO0lBQUEsSUFBQUMsV0FB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