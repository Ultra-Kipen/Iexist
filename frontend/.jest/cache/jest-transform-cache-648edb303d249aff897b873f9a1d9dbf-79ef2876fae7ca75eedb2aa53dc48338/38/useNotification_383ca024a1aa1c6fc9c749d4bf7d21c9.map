{"version":3,"names":["_react","require","_NotificationContext","_notificationService","_interopRequireDefault","useNotificationManager","exports","_useState","useState","_useState2","_slicedToArray2","default","loading","setLoading","_useState3","_useState4","error","setError","_useNotificationConte","useNotificationContext","notifications","unreadCount","contextFetchNotifications","fetchNotifications","useCallback","_ref","_asyncToGenerator2","page","limit","response","notificationService","getNotifications","data","err","errorMsg","Error","message","_x","_x2","apply","arguments","markAsRead","markAllAsRead","deleteNotification","_default"],"sources":["useNotification.ts"],"sourcesContent":["// hooks/useNotification.ts\r\n// 알림 관리를 위한 커스텀 훅\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport { useNotification as useNotificationContext } from '../contexts/NotificationContext';\r\nimport notificationService from '../services/api/notificationService';\r\n\r\n// 이 훅은 기존 useNotification과 구분하기 위해 다른 이름으로 export\r\nexport const useNotificationManager = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  // 컨텍스트에서 제공하는 기존 useNotification 훅을 사용\r\n  const {\r\n    notifications,\r\n    unreadCount,\r\n    fetchNotifications: contextFetchNotifications\r\n  } = useNotificationContext();\r\n  \r\n  // 페이지네이션이 필요한 경우의 확장된 fetchNotifications\r\n  const fetchNotifications = useCallback(async (page?: number, limit?: number) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // 옵셔널 파라미터로 변경하여 notificationService가 기본값을 처리하도록 함\r\n      const response = await notificationService.getNotifications({ page, limit });\r\n      await contextFetchNotifications(); // 컨텍스트의 알림 업데이트\r\n      \r\n      setLoading(false);\r\n      return response.data;\r\n    } catch (err) {\r\n      setLoading(false);\r\n      const errorMsg = err instanceof Error ? err.message : '알림을 불러오는 중 오류가 발생했습니다.';\r\n      setError(errorMsg);\r\n      throw err;\r\n    }\r\n  }, [contextFetchNotifications]);\r\n  \r\n  // 컨텍스트의 기능과 로컬 상태를 함께 반환\r\n  return {\r\n    notifications,\r\n    unreadCount,\r\n    loading,\r\n    error,\r\n    fetchNotifications,\r\n    // 컨텍스트에서 제공하는 기능들\r\n    markAsRead: useNotificationContext().markAsRead,\r\n    markAllAsRead: useNotificationContext().markAllAsRead,\r\n    deleteNotification: useNotificationContext().deleteNotification\r\n  };\r\n};\r\n\r\n// 기존 useNotification은 컨텍스트에서 export된 것을 그대로 재export\r\nexport { useNotification } from '../contexts/NotificationContext';\r\n\r\n// 기본 export는 확장된 버전\r\nexport default useNotificationManager;"],"mappings":";;;;;;;;;;;;;;AAGA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,oBAAA,GAAAD,OAAA;AACA,IAAAE,oBAAA,GAAAC,sBAAA,CAAAH,OAAA;AAGO,IAAMI,sBAAsB,GAAAC,OAAA,CAAAD,sBAAA,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;EAC1C,IAAAE,SAAA,GAA8B,IAAAC,eAAQ,EAAC,KAAK,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAAtCK,OAAO,GAAAH,UAAA;IAAEI,UAAU,GAAAJ,UAAA;EAC1B,IAAAK,UAAA,GAA0B,IAAAN,eAAQ,EAAgB,IAAI,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAAhDE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAGtB,IAAAG,qBAAA,GAII,IAAAC,oCAAsB,EAAC,CAAC;IAH1BC,aAAa,GAAAF,qBAAA,CAAbE,aAAa;IACbC,WAAW,GAAAH,qBAAA,CAAXG,WAAW;IACSC,yBAAyB,GAAAJ,qBAAA,CAA7CK,kBAAkB;EAIpB,IAAMA,kBAAkB,GAAG,IAAAC,kBAAW;IAAA,IAAAC,IAAA,OAAAC,kBAAA,CAAAf,OAAA,EAAC,WAAOgB,IAAa,EAAEC,KAAc,EAAK;MAC9Ef,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QAEF,IAAMY,QAAQ,SAASC,4BAAmB,CAACC,gBAAgB,CAAC;UAAEJ,IAAI,EAAJA,IAAI;UAAEC,KAAK,EAALA;QAAM,CAAC,CAAC;QAC5E,MAAMN,yBAAyB,CAAC,CAAC;QAEjCT,UAAU,CAAC,KAAK,CAAC;QACjB,OAAOgB,QAAQ,CAACG,IAAI;MACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZpB,UAAU,CAAC,KAAK,CAAC;QACjB,IAAMqB,QAAQ,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACG,OAAO,GAAG,wBAAwB;QAC9EnB,QAAQ,CAACiB,QAAQ,CAAC;QAClB,MAAMD,GAAG;MACX;IACF,CAAC;IAAA,iBAAAI,EAAA,EAAAC,GAAA;MAAA,OAAAb,IAAA,CAAAc,KAAA,OAAAC,SAAA;IAAA;EAAA,KAAE,CAAClB,yBAAyB,CAAC,CAAC;EAG/B,OAAO;IACLF,aAAa,EAAbA,aAAa;IACbC,WAAW,EAAXA,WAAW;IACXT,OAAO,EAAPA,OAAO;IACPI,KAAK,EAALA,KAAK;IACLO,kBAAkB,EAAlBA,kBAAkB;IAElBkB,UAAU,EAAE,IAAAtB,oCAAsB,EAAC,CAAC,CAACsB,UAAU;IAC/CC,aAAa,EAAE,IAAAvB,oCAAsB,EAAC,CAAC,CAACuB,aAAa;IACrDC,kBAAkB,EAAE,IAAAxB,oCAAsB,EAAC,CAAC,CAACwB;EAC/C,CAAC;AACH,CAAC;AAAC,IAAAC,QAAA,GAAAtC,OAAA,CAAAK,OAAA,GAMaN,sBAAsB","ignoreList":[]}