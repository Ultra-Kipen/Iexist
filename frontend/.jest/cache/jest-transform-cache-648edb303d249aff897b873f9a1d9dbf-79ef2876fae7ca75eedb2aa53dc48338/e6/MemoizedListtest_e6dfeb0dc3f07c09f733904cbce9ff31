8c8404e3086778a8993f73e847d6c3c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MemoizedList = require("../../../src/components/optimized/MemoizedList");
var _jsxRuntime = require("react/jsx-runtime");
describe('MemoizedCard Component', function () {
  var mockOnPress = jest.fn();
  var mockOnLike = jest.fn();
  var mockOnComment = jest.fn();
  var defaultProps = {
    title: 'Test Title',
    content: 'Test content for the card',
    onPress: mockOnPress,
    onLike: mockOnLike,
    onComment: mockOnComment
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders correctly with minimal props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, {
        title: defaultProps.title,
        content: defaultProps.content
      })),
      getByText = _render.getByText;
    expect(getByText('Test Title')).toBeTruthy();
    expect(getByText('Test content for the card')).toBeTruthy();
  });
  it('calls onPress when card is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps))),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Test Title'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('displays author information when provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps, {
        authorName: "John Doe",
        timestamp: "2 hours ago"
      }))),
      getByText = _render3.getByText;
    expect(getByText('John Doe')).toBeTruthy();
    expect(getByText('2 hours ago')).toBeTruthy();
  });
  it('displays correct stats count', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps, {
        likesCount: 10,
        commentsCount: 5
      }))),
      getByText = _render4.getByText;
    expect(getByText('좋아요 10')).toBeTruthy();
    expect(getByText('댓글 5')).toBeTruthy();
  });
  it('calls onLike when like button is pressed', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps))),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText('좋아요 0'));
    expect(mockOnLike).toHaveBeenCalledTimes(1);
  });
  it('calls onComment when comment button is pressed', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps))),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText('댓글 0'));
    expect(mockOnComment).toHaveBeenCalledTimes(1);
  });
  it('applies liked style when isLiked is true', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps, {
        isLiked: true
      }))),
      getByText = _render7.getByText;
    var likeText = getByText('좋아요 0');
    expect(likeText.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
      color: '#3b82f6',
      fontWeight: 'bold'
    })]));
  });
  it('does not trigger onLike when onLike prop is not provided', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, {
        title: defaultProps.title,
        content: defaultProps.content
      })),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('좋아요 0'));
    expect(mockOnLike).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,