{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_reactNative2","_StoreContext","_reducer","_types","_jsxRuntime","TestComponent","_useStore","useStore","state","dispatch","jsxs","View","children","jsx","Text","testID","isAuthenticated","TouchableOpacity","onPress","type","ActionType","SET_AUTHENTICATED","payload","describe","test","_render","render","StoreProvider","getByTestId","expect","props","toBe","fireEvent","press","StateCheckComponent","_useStore2","String","user","notifications","length","theme","loading","error","_render2","initialState"],"sources":["StoreContext.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { Text, View, TouchableOpacity } from 'react-native';\r\nimport { StoreProvider, useStore } from '../../src/store/StoreContext';\r\nimport { initialState } from '../../src/store/reducer';\r\nimport { ActionType } from '../../src/store/types';\r\n\r\n// 테스트용 컴포넌트 - React Native 컴포넌트 사용\r\nconst TestComponent = () => {\r\n  const { state, dispatch } = useStore();\r\n  \r\n  return (\r\n    <View>\r\n      <Text testID=\"auth-status\">{state.isAuthenticated ? 'authenticated' : 'not-authenticated'}</Text>\r\n      <TouchableOpacity \r\n        onPress={() => dispatch({ \r\n          type: ActionType.SET_AUTHENTICATED, \r\n          payload: !state.isAuthenticated \r\n        })}\r\n        testID=\"toggle-auth\"\r\n      >\r\n        <Text>Toggle Auth</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('StoreContext', () => {\r\n  test('StoreProvider는 상태와 디스패치 함수를 제공한다', () => {\r\n    const { getByTestId } = render(\r\n      <StoreProvider>\r\n        <TestComponent />\r\n      </StoreProvider>\r\n    );\r\n    \r\n    // 초기 상태 확인\r\n    expect(getByTestId('auth-status').props.children).toBe('not-authenticated');\r\n    \r\n    // 디스패치 함수가 작동하는지 확인\r\n    fireEvent.press(getByTestId('toggle-auth'));\r\n    expect(getByTestId('auth-status').props.children).toBe('authenticated');\r\n  });\r\n  \r\n  test('초기 상태가 올바르게 설정된다', () => {\r\n    // 테스트용 컴포넌트 - React Native 컴포넌트 사용\r\n    const StateCheckComponent = () => {\r\n      const { state } = useStore();\r\n      return (\r\n        <View>\r\n          <Text testID=\"is-authenticated\">{String(state.isAuthenticated)}</Text>\r\n          <Text testID=\"user\">{state.user === null ? 'null' : 'user'}</Text>\r\n          {/* 숫자를 문자열로 명시적 변환 */}\r\n          <Text testID=\"notifications-count\">{String(state.notifications.length)}</Text>\r\n          <Text testID=\"theme\">{state.theme}</Text>\r\n          <Text testID=\"loading\">{String(state.loading)}</Text>\r\n          <Text testID=\"error\">{state.error === null ? 'null' : state.error}</Text>\r\n        </View>\r\n      );\r\n    };\r\n    \r\n    const { getByTestId } = render(\r\n      <StoreProvider>\r\n        <StateCheckComponent />\r\n      </StoreProvider>\r\n    );\r\n    \r\n    // 초기 상태 확인 - React Native에서는 textContent 대신 props.children 사용\r\n    expect(getByTestId('is-authenticated').props.children).toBe(String(initialState.isAuthenticated));\r\n    expect(getByTestId('user').props.children).toBe('null');\r\n    expect(getByTestId('notifications-count').props.children).toBe('0');\r\n    expect(getByTestId('theme').props.children).toBe(initialState.theme);\r\n    expect(getByTestId('loading').props.children).toBe(String(initialState.loading));\r\n    expect(getByTestId('error').props.children).toBe('null');\r\n  });\r\n});"],"mappings":";AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,aAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AACA,IAAAI,QAAA,GAAAJ,OAAA;AACA,IAAAK,MAAA,GAAAL,OAAA;AAAmD,IAAAM,WAAA,GAAAN,OAAA;AAGnD,IAAMO,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAAC,SAAA,GAA4B,IAAAC,sBAAQ,EAAC,CAAC;IAA9BC,KAAK,GAAAF,SAAA,CAALE,KAAK;IAAEC,QAAQ,GAAAH,SAAA,CAARG,QAAQ;EAEvB,OACE,IAAAL,WAAA,CAAAM,IAAA,EAACV,aAAA,CAAAW,IAAI;IAAAC,QAAA,GACH,IAAAR,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;MAACC,MAAM,EAAC,aAAa;MAAAH,QAAA,EAAEJ,KAAK,CAACQ,eAAe,GAAG,eAAe,GAAG;IAAmB,CAAO,CAAC,EACjG,IAAAZ,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAiB,gBAAgB;MACfC,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQT,QAAQ,CAAC;UACtBU,IAAI,EAAEC,iBAAU,CAACC,iBAAiB;UAClCC,OAAO,EAAE,CAACd,KAAK,CAACQ;QAClB,CAAC,CAAC;MAAA,CAAC;MACHD,MAAM,EAAC,aAAa;MAAAH,QAAA,EAEpB,IAAAR,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;QAAAF,QAAA,EAAC;MAAW,CAAM;IAAC,CACR,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAEDW,QAAQ,CAAC,cAAc,EAAE,YAAM;EAC7BC,IAAI,CAAC,kCAAkC,EAAE,YAAM;IAC7C,IAAAC,OAAA,GAAwB,IAAAC,mBAAM,EAC5B,IAAAtB,WAAA,CAAAS,GAAA,EAACZ,aAAA,CAAA0B,aAAa;QAAAf,QAAA,EACZ,IAAAR,WAAA,CAAAS,GAAA,EAACR,aAAa,IAAE;MAAC,CACJ,CACjB,CAAC;MAJOuB,WAAW,GAAAH,OAAA,CAAXG,WAAW;IAOnBC,MAAM,CAACD,WAAW,CAAC,aAAa,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAAC,mBAAmB,CAAC;IAG3EC,sBAAS,CAACC,KAAK,CAACL,WAAW,CAAC,aAAa,CAAC,CAAC;IAC3CC,MAAM,CAACD,WAAW,CAAC,aAAa,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAAC,eAAe,CAAC;EACzE,CAAC,CAAC;EAEFP,IAAI,CAAC,kBAAkB,EAAE,YAAM;IAE7B,IAAMU,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;MAChC,IAAAC,UAAA,GAAkB,IAAA5B,sBAAQ,EAAC,CAAC;QAApBC,KAAK,GAAA2B,UAAA,CAAL3B,KAAK;MACb,OACE,IAAAJ,WAAA,CAAAM,IAAA,EAACV,aAAA,CAAAW,IAAI;QAAAC,QAAA,GACH,IAAAR,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;UAACC,MAAM,EAAC,kBAAkB;UAAAH,QAAA,EAAEwB,MAAM,CAAC5B,KAAK,CAACQ,eAAe;QAAC,CAAO,CAAC,EACtE,IAAAZ,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;UAACC,MAAM,EAAC,MAAM;UAAAH,QAAA,EAAEJ,KAAK,CAAC6B,IAAI,KAAK,IAAI,GAAG,MAAM,GAAG;QAAM,CAAO,CAAC,EAElE,IAAAjC,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;UAACC,MAAM,EAAC,qBAAqB;UAAAH,QAAA,EAAEwB,MAAM,CAAC5B,KAAK,CAAC8B,aAAa,CAACC,MAAM;QAAC,CAAO,CAAC,EAC9E,IAAAnC,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;UAACC,MAAM,EAAC,OAAO;UAAAH,QAAA,EAAEJ,KAAK,CAACgC;QAAK,CAAO,CAAC,EACzC,IAAApC,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;UAACC,MAAM,EAAC,SAAS;UAAAH,QAAA,EAAEwB,MAAM,CAAC5B,KAAK,CAACiC,OAAO;QAAC,CAAO,CAAC,EACrD,IAAArC,WAAA,CAAAS,GAAA,EAACb,aAAA,CAAAc,IAAI;UAACC,MAAM,EAAC,OAAO;UAAAH,QAAA,EAAEJ,KAAK,CAACkC,KAAK,KAAK,IAAI,GAAG,MAAM,GAAGlC,KAAK,CAACkC;QAAK,CAAO,CAAC;MAAA,CACrE,CAAC;IAEX,CAAC;IAED,IAAAC,QAAA,GAAwB,IAAAjB,mBAAM,EAC5B,IAAAtB,WAAA,CAAAS,GAAA,EAACZ,aAAA,CAAA0B,aAAa;QAAAf,QAAA,EACZ,IAAAR,WAAA,CAAAS,GAAA,EAACqB,mBAAmB,IAAE;MAAC,CACV,CACjB,CAAC;MAJON,WAAW,GAAAe,QAAA,CAAXf,WAAW;IAOnBC,MAAM,CAACD,WAAW,CAAC,kBAAkB,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAACK,MAAM,CAACQ,qBAAY,CAAC5B,eAAe,CAAC,CAAC;IACjGa,MAAM,CAACD,WAAW,CAAC,MAAM,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAAC,MAAM,CAAC;IACvDF,MAAM,CAACD,WAAW,CAAC,qBAAqB,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAAC,GAAG,CAAC;IACnEF,MAAM,CAACD,WAAW,CAAC,OAAO,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAACa,qBAAY,CAACJ,KAAK,CAAC;IACpEX,MAAM,CAACD,WAAW,CAAC,SAAS,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAACK,MAAM,CAACQ,qBAAY,CAACH,OAAO,CAAC,CAAC;IAChFZ,MAAM,CAACD,WAAW,CAAC,OAAO,CAAC,CAACE,KAAK,CAAClB,QAAQ,CAAC,CAACmB,IAAI,CAAC,MAAM,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}