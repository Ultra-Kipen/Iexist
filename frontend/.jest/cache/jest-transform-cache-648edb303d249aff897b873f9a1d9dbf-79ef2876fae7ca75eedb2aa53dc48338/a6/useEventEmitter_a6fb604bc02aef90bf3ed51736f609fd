3f67b03a05dcd573c7510a59085b60bf
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEventEmitter = useEventEmitter;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useEventEmitter(listen) {
  var listenRef = React.useRef(listen);
  React.useEffect(function () {
    listenRef.current = listen;
  });
  var listeners = React.useRef(Object.create(null));
  var create = React.useCallback(function (target) {
    var removeListener = function removeListener(type, callback) {
      var callbacks = listeners.current[type] ? listeners.current[type][target] : undefined;
      if (!callbacks) {
        return;
      }
      var index = callbacks.indexOf(callback);
      if (index > -1) {
        callbacks.splice(index, 1);
      }
    };
    var addListener = function addListener(type, callback) {
      listeners.current[type] = listeners.current[type] || {};
      listeners.current[type][target] = listeners.current[type][target] || [];
      listeners.current[type][target].push(callback);
      var removed = false;
      return function () {
        if (!removed) {
          removed = true;
          removeListener(type, callback);
        }
      };
    };
    return {
      addListener: addListener,
      removeListener: removeListener
    };
  }, []);
  var emit = React.useCallback(function (_ref) {
    var _items$target, _ref2;
    var type = _ref.type,
      data = _ref.data,
      target = _ref.target,
      canPreventDefault = _ref.canPreventDefault;
    var items = listeners.current[type] || {};
    var callbacks = target !== undefined ? (_items$target = items[target]) == null ? void 0 : _items$target.slice() : (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(Object.keys(items).map(function (t) {
      return items[t];
    }))).filter(function (cb, i, self) {
      return self.lastIndexOf(cb) === i;
    });
    var event = {
      get type() {
        return type;
      }
    };
    if (target !== undefined) {
      Object.defineProperty(event, 'target', {
        enumerable: true,
        get: function get() {
          return target;
        }
      });
    }
    if (data !== undefined) {
      Object.defineProperty(event, 'data', {
        enumerable: true,
        get: function get() {
          return data;
        }
      });
    }
    if (canPreventDefault) {
      var defaultPrevented = false;
      Object.defineProperties(event, {
        defaultPrevented: {
          enumerable: true,
          get: function get() {
            return defaultPrevented;
          }
        },
        preventDefault: {
          enumerable: true,
          value: function value() {
            defaultPrevented = true;
          }
        }
      });
    }
    listenRef.current == null || listenRef.current(event);
    callbacks == null || callbacks.forEach(function (cb) {
      return cb(event);
    });
    return event;
  }, []);
  return React.useMemo(function () {
    return {
      create: create,
      emit: emit
    };
  }, [create, emit]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsInVzZUV2ZW50RW1pdHRlciIsImxpc3RlbiIsImxpc3RlblJlZiIsInVzZVJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJsaXN0ZW5lcnMiLCJjcmVhdGUiLCJ1c2VDYWxsYmFjayIsInRhcmdldCIsInJlbW92ZUxpc3RlbmVyIiwidHlwZSIsImNhbGxiYWNrIiwiY2FsbGJhY2tzIiwidW5kZWZpbmVkIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiYWRkTGlzdGVuZXIiLCJwdXNoIiwicmVtb3ZlZCIsImVtaXQiLCJfcmVmIiwiX2l0ZW1zJHRhcmdldCIsIl9yZWYyIiwiZGF0YSIsImNhblByZXZlbnREZWZhdWx0IiwiaXRlbXMiLCJzbGljZSIsImNvbmNhdCIsImFwcGx5IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImtleXMiLCJtYXAiLCJmaWx0ZXIiLCJjYiIsInNlbGYiLCJsYXN0SW5kZXhPZiIsImV2ZW50IiwiZW51bWVyYWJsZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJldmVudERlZmF1bHQiLCJ2YWx1ZSIsImZvckVhY2giLCJ1c2VNZW1vIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZUV2ZW50RW1pdHRlci50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQThCLFNB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