{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_Toast","_interopRequireWildcard","_reactNative2","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","jest","useFakeTimers","TestIcon","jsx","Text","testID","children","describe","afterEach","clearAllMocks","test","_render","render","visible","message","getByTestId","getByText","expect","toBeTruthy","_render2","queryByTestId","toBeNull","_render3","icon","onClose","fn","duration","advanceTimersByTime","toHaveBeenCalled","mockToast","show","hide","ToastController","setRef","toHaveBeenCalledWith","not","toThrow"],"sources":["Toast.test.tsx"],"sourcesContent":["// __tests__/components/Toast.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport Toast, { ToastController } from '../../src/components/Toast';\r\nimport { Text } from 'react-native';\r\n\r\n// setTimeout/clearTimeout 등 타이머 관련 함수만 모킹\r\njest.useFakeTimers();\r\n\r\n// 간단한 아이콘 컴포넌트 정의\r\nconst TestIcon = () => <Text testID=\"test-icon\">아이콘</Text>;\r\n\r\ndescribe('Toast', () => {\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('renders correctly with default props', () => {\r\n    const { getByTestId, getByText } = render(\r\n      <Toast visible={true} message=\"테스트 메시지\" testID=\"toast\" />\r\n    );\r\n    \r\n    expect(getByTestId('toast')).toBeTruthy();\r\n    expect(getByText('테스트 메시지')).toBeTruthy();\r\n  });\r\n\r\n  test('does not render when visible is false', () => {\r\n    const { queryByTestId } = render(\r\n      <Toast visible={false} message=\"테스트 메시지\" testID=\"toast\" />\r\n    );\r\n    \r\n    expect(queryByTestId('toast')).toBeNull();\r\n  });\r\n\r\n  test('icon renders correctly', () => {\r\n    const { getByTestId } = render(\r\n      <Toast \r\n        visible={true} \r\n        message=\"테스트 메시지\" \r\n        icon={<TestIcon />} \r\n        testID=\"toast\"\r\n      />\r\n    );\r\n    \r\n    expect(getByTestId('test-icon')).toBeTruthy();\r\n  });\r\n\r\n  test('onClose is called after duration', () => {\r\n    const onClose = jest.fn();\r\n    \r\n    render(\r\n      <Toast \r\n        visible={true} \r\n        message=\"테스트 메시지\" \r\n        duration={1000} \r\n        onClose={onClose} \r\n        testID=\"toast\"\r\n      />\r\n    );\r\n    \r\n    // 타이머 진행\r\n    jest.advanceTimersByTime(1300); // duration + animation\r\n    \r\n    expect(onClose).toHaveBeenCalled();\r\n  });\r\n\r\n  test('ToastController should handle show and hide', () => {\r\n    const mockToast = {\r\n      show: jest.fn(),\r\n      hide: jest.fn()\r\n    };\r\n    \r\n    // Controller에 인스턴스 설정\r\n    ToastController.setRef(mockToast);\r\n    \r\n    // 메서드 호출\r\n    ToastController.show({ message: '테스트 메시지' });\r\n    expect(mockToast.show).toHaveBeenCalledWith({ message: '테스트 메시지' });\r\n    \r\n    ToastController.hide();\r\n    expect(mockToast.hide).toHaveBeenCalled();\r\n  });\r\n\r\n  test('ToastController handles missing instance', () => {\r\n    // 인스턴스를 null로 설정\r\n    ToastController.setRef(null);\r\n    \r\n    // 에러가 발생하지 않아야 함\r\n    expect(() => {\r\n      ToastController.show({ message: '테스트 메시지' });\r\n      ToastController.hide();\r\n    }).not.toThrow();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}