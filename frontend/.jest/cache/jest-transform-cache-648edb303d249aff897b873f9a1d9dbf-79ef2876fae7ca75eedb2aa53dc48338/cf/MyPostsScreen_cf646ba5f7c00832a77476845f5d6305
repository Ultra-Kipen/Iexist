2dc3ff440b70cf77eeb7899829671e97
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _postService = _interopRequireDefault(require("../services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MyPostsScreen = function MyPostsScreen(_ref) {
  var navigation = _ref.navigation;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    posts = _useState2[0],
    setPosts = _useState2[1];
  var _useState3 = (0, _react.useState)(true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    refreshing = _useState6[0],
    setRefreshing = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    deleteDialogVisible = _useState8[0],
    setDeleteDialogVisible = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    selectedPostId = _useState10[0],
    setSelectedPostId = _useState10[1];
  (0, _react.useEffect)(function () {
    fetchMyPosts();
    var unsubscribe = navigation.addListener('focus', function () {
      fetchMyPosts();
    });
    return unsubscribe;
  }, [navigation]);
  var fetchMyPosts = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setLoading(true);
        var response = yield _postService.default.getMyPosts({
          sort_by: 'latest'
        });
        setPosts(response.data.posts || []);
      } catch (error) {
        console.error('Error fetching my posts:', error);
        _reactNative.Alert.alert('오류', '게시물을 불러오는 중 오류가 발생했습니다');
      } finally {
        setLoading(false);
        setRefreshing(false);
      }
    });
    return function fetchMyPosts() {
      return _ref2.apply(this, arguments);
    };
  }();
  var onRefresh = function onRefresh() {
    setRefreshing(true);
    fetchMyPosts();
  };
  var showDeleteConfirm = function showDeleteConfirm(postId) {
    setSelectedPostId(postId);
    setDeleteDialogVisible(true);
  };
  var hideDeleteDialog = function hideDeleteDialog() {
    setDeleteDialogVisible(false);
    setSelectedPostId(null);
  };
  var handleDeletePost = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (selectedPostId === null) return;
      try {
        yield _postService.default.deletePost(selectedPostId);
        setPosts(posts.filter(function (post) {
          return post.post_id !== selectedPostId;
        }));
        _reactNative.Alert.alert('성공', '게시물이 성공적으로 삭제되었습니다');
      } catch (error) {
        console.error('Error deleting post:', error);
        _reactNative.Alert.alert('오류', '게시물을 삭제하는 중 오류가 발생했습니다');
      } finally {
        hideDeleteDialog();
      }
    });
    return function handleDeletePost() {
      return _ref3.apply(this, arguments);
    };
  }();
  var renderEmotionChip = function renderEmotionChip(emotion) {
    var iconName = 'emoticon-neutral-outline';
    var color = '#A9A9A9';
    switch (emotion) {
      case '행복':
        iconName = 'emoticon-happy-outline';
        color = '#FFD700';
        break;
      case '슬픔':
        iconName = 'emoticon-sad-outline';
        color = '#4682B4';
        break;
      case '감사':
        iconName = 'hand-heart';
        color = '#FF69B4';
        break;
    }
    return (0, _jsxRuntime.jsx)(_reactNativePaper.Chip, {
      icon: function icon() {
        return (0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
          name: iconName,
          size: 16,
          color: color
        });
      },
      style: [styles.emotionChip, {
        backgroundColor: color + '20'
      }],
      children: emotion
    });
  };
  var renderItem = function renderItem(item) {
    return (0, _jsxRuntime.jsxs)(_reactNativePaper.Card, {
      style: styles.postCard,
      testID: "post-item",
      children: [(0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.postHeader,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.postDate,
            children: new Date(item.created_at).toLocaleDateString()
          }), renderEmotionChip(item.emotion_summary)]
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.postContent,
          children: item.content
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.statsContainer,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
              name: "heart-outline",
              size: 18,
              color: "#FF6347"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.statText,
              children: item.like_count
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.statItem,
            children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
              name: "comment-outline",
              size: 18,
              color: "#4682B4"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.statText,
              children: item.comment_count
            })]
          })]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Actions, {
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          onPress: function onPress() {
            return navigation.navigate('Post', {
              postId: item.post_id
            });
          },
          children: "\uC790\uC138\uD788"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          testID: "delete-button",
          onPress: function onPress() {
            return showDeleteConfirm(item.post_id);
          },
          textColor: "#f44336",
          children: "\uC0AD\uC81C"
        })]
      })]
    }, item.post_id.toString());
  };
  return (0, _jsxRuntime.jsxs)(_reactNativeSafeAreaContext.SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "\uB0B4 \uAC8C\uC2DC\uBB3C"
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
        mode: "contained",
        onPress: function onPress() {
          return navigation.navigate('CreatePost');
        },
        testID: "new-post-button",
        children: "\uC0C8 \uAC8C\uC2DC\uBB3C"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      style: {
        flex: 1
      },
      contentContainerStyle: styles.listContent,
      refreshing: refreshing,
      onRefresh: onRefresh,
      children: posts.length > 0 ? posts.map(function (post) {
        return renderItem(post);
      }) : !loading ? (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.emptyContainer,
        testID: "empty-state",
        children: [(0, _jsxRuntime.jsx)(_MaterialCommunityIcons.default, {
          name: "post-outline",
          size: 48,
          color: "#ccc"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.emptyText,
          children: "\uAC8C\uC2DC\uBB3C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          mode: "outlined",
          onPress: function onPress() {
            return navigation.navigate('CreatePost');
          },
          style: {
            marginTop: 16
          },
          children: "\uCCAB \uAC8C\uC2DC\uBB3C \uC791\uC131\uD558\uAE30"
        })]
      }) : null
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.Portal, {
      children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Dialog, {
        visible: deleteDialogVisible,
        onDismiss: hideDeleteDialog,
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Dialog.Title, {
          children: "\uAC8C\uC2DC\uBB3C \uC0AD\uC81C"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Dialog.Content, {
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            children: "\uC815\uB9D0\uB85C \uC774 \uAC8C\uC2DC\uBB3C\uC744 \uC0AD\uC81C\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?"
          })
        }), (0, _jsxRuntime.jsxs)(_reactNativePaper.Dialog.Actions, {
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
            onPress: hideDeleteDialog,
            children: "\uCDE8\uC18C"
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
            onPress: handleDeletePost,
            textColor: "#f44336",
            children: "\uC0AD\uC81C"
          })]
        })]
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    elevation: 2
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold'
  },
  listContent: {
    padding: 16
  },
  postCard: {
    marginBottom: 16,
    elevation: 2
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8
  },
  postDate: {
    color: '#666',
    fontSize: 14
  },
  emotionChip: {
    height: 28
  },
  postContent: {
    fontSize: 16,
    lineHeight: 24,
    marginVertical: 8
  },
  statsContainer: {
    flexDirection: 'row',
    marginTop: 12
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16
  },
  statText: {
    marginLeft: 4,
    fontSize: 14,
    color: '#666'
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 32
  },
  emptyText: {
    fontSize: 16,
    color: '#666',
    marginTop: 8
  }
});
var _default = exports.default = MyPostsScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,