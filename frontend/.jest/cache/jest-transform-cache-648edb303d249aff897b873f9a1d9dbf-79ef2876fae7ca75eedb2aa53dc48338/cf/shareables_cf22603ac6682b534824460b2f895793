d9d5ffad4c1936ea5c499eb58c6b7b72
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeShareable = void 0;
exports.makeShareableCloneOnUIRecursive = makeShareableCloneOnUIRecursive;
exports.makeShareableCloneRecursive = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _commonTypes = require("./commonTypes.js");
var _errors = require("./errors.js");
var _index = require("./logger/index.js");
var _jsVersion = require("./platform-specific/jsVersion.js");
var _PlatformChecker = require("./PlatformChecker.js");
var _shareableMappingCache = require("./shareableMappingCache.js");
var _index2 = require("./worklets/index.js");
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
var MAGIC_KEY = 'REANIMATED_MAGIC_KEY';
function isHostObject(value) {
  'worklet';
  return MAGIC_KEY in value;
}
function isPlainJSObject(object) {
  return Object.getPrototypeOf(object) === Object.prototype;
}
function getFromCache(value) {
  var cached = _shareableMappingCache.shareableMappingCache.get(value);
  if (cached === _shareableMappingCache.shareableMappingFlag) {
    return value;
  }
  return cached;
}
var INACCESSIBLE_OBJECT = {
  __init: function __init() {
    'worklet';

    return new Proxy({}, {
      get: function get(_, prop) {
        if (prop === '_isReanimatedSharedValue' || prop === '__remoteFunction') {
          return false;
        }
        throw new _errors.ReanimatedError(`Trying to access property \`${String(prop)}\` of an object which cannot be sent to the UI runtime.`);
      },
      set: function set() {
        throw new _errors.ReanimatedError('Trying to write to an object which cannot be sent to the UI runtime.');
      }
    });
  }
};
var VALID_ARRAY_VIEWS_NAMES = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array', 'DataView'];
var DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;
var processedObjectAtThresholdDepth;
function makeShareableCloneRecursiveWeb(value) {
  return value;
}
function makeShareableCloneRecursiveNative(value) {
  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  detectCyclicObject(value, depth);
  var isObject = typeof value === 'object';
  var isFunction = typeof value === 'function';
  if (!isObject && !isFunction || value === null) {
    return clonePrimitive(value, shouldPersistRemote);
  }
  var cached = getFromCache(value);
  if (cached !== undefined) {
    return cached;
  }
  if (Array.isArray(value)) {
    return cloneArray(value, shouldPersistRemote, depth);
  }
  if (isFunction && !(0, _commonTypes.isWorkletFunction)(value)) {
    return cloneRemoteFunction(value, shouldPersistRemote);
  }
  if (isHostObject(value)) {
    return cloneHostObject(value, shouldPersistRemote);
  }
  if (isPlainJSObject(value) && value.__workletContextObjectFactory) {
    return cloneContextObject(value);
  }
  if ((isPlainJSObject(value) || isFunction) && (0, _commonTypes.isWorkletFunction)(value)) {
    return cloneWorklet(value, shouldPersistRemote, depth);
  }
  if (isPlainJSObject(value) || isFunction) {
    return clonePlainJSObject(value, shouldPersistRemote, depth);
  }
  if (value instanceof RegExp) {
    return cloneRegExp(value);
  }
  if (value instanceof Error) {
    return cloneError(value);
  }
  if (value instanceof ArrayBuffer) {
    return cloneArrayBuffer(value, shouldPersistRemote);
  }
  if (ArrayBuffer.isView(value)) {
    return cloneArrayBufferView(value);
  }
  return inaccessibleObject(value);
}
var makeShareableCloneRecursive = exports.makeShareableCloneRecursive = SHOULD_BE_USE_WEB ? makeShareableCloneRecursiveWeb : makeShareableCloneRecursiveNative;
function detectCyclicObject(value, depth) {
  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
      processedObjectAtThresholdDepth = value;
    } else if (value === processedObjectAtThresholdDepth) {
      throw new _errors.ReanimatedError('Trying to convert a cyclic object to a shareable. This is not supported.');
    }
  } else {
    processedObjectAtThresholdDepth = undefined;
  }
}
function clonePrimitive(value, shouldPersistRemote) {
  return _index2.WorkletsModule.makeShareableClone(value, shouldPersistRemote);
}
function cloneArray(value, shouldPersistRemote, depth) {
  var clonedElements = value.map(function (element) {
    return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
  });
  var clone = _index2.WorkletsModule.makeShareableClone(clonedElements, shouldPersistRemote, value);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  _shareableMappingCache.shareableMappingCache.set(clone);
  freezeObjectInDev(value);
  return clone;
}
function cloneRemoteFunction(value, shouldPersistRemote) {
  var clone = _index2.WorkletsModule.makeShareableClone(value, shouldPersistRemote, value);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  _shareableMappingCache.shareableMappingCache.set(clone);
  freezeObjectInDev(value);
  return clone;
}
function cloneHostObject(value, shouldPersistRemote) {
  var clone = _index2.WorkletsModule.makeShareableClone(value, shouldPersistRemote, value);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  _shareableMappingCache.shareableMappingCache.set(clone);
  return clone;
}
function cloneWorklet(value, shouldPersistRemote, depth) {
  if (true) {
    var babelVersion = value.__initData.version;
    if (babelVersion !== undefined && babelVersion !== _jsVersion.jsVersion) {
      throw new _errors.ReanimatedError(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${_jsVersion.jsVersion} vs. ${babelVersion}).        
See \`https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#mismatch-between-javascript-code-version-and-reanimated-babel-plugin-version\` for more details.
Offending code was: \`${getWorkletCode(value)}\``);
    }
    (0, _errors.registerWorkletStackDetails)(value.__workletHash, value.__stackDetails);
  }
  if (value.__stackDetails) {
    delete value.__stackDetails;
  }
  var clonedProps = {};
  clonedProps.__initData = makeShareableCloneRecursive(value.__initData, true, depth + 1);
  for (var _ref of Object.entries(value)) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
    var key = _ref2[0];
    var element = _ref2[1];
    if (key === '__initData' && clonedProps.__initData !== undefined) {
      continue;
    }
    clonedProps[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
  }
  var clone = _index2.WorkletsModule.makeShareableClone(clonedProps, true, value);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  _shareableMappingCache.shareableMappingCache.set(clone);
  freezeObjectInDev(value);
  return clone;
}
function cloneContextObject(value) {
  var workletContextObjectFactory = value.__workletContextObjectFactory;
  var handle = makeShareableCloneRecursive({
    __init: function __init() {
      'worklet';

      return workletContextObjectFactory();
    }
  });
  _shareableMappingCache.shareableMappingCache.set(value, handle);
  return handle;
}
function clonePlainJSObject(value, shouldPersistRemote, depth) {
  var clonedProps = {};
  for (var _ref3 of Object.entries(value)) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
    var key = _ref4[0];
    var element = _ref4[1];
    if (key === '__initData' && clonedProps.__initData !== undefined) {
      continue;
    }
    clonedProps[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
  }
  var clone = _index2.WorkletsModule.makeShareableClone(clonedProps, shouldPersistRemote, value);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  _shareableMappingCache.shareableMappingCache.set(clone);
  freezeObjectInDev(value);
  return clone;
}
function cloneRegExp(value) {
  var pattern = value.source;
  var flags = value.flags;
  var handle = makeShareableCloneRecursive({
    __init: function __init() {
      'worklet';

      return new RegExp(pattern, flags);
    }
  });
  _shareableMappingCache.shareableMappingCache.set(value, handle);
  return handle;
}
function cloneError(value) {
  var name = value.name,
    message = value.message,
    stack = value.stack;
  var handle = makeShareableCloneRecursive({
    __init: function __init() {
      'worklet';
      var error = new Error();
      error.name = name;
      error.message = message;
      error.stack = stack;
      return error;
    }
  });
  _shareableMappingCache.shareableMappingCache.set(value, handle);
  return handle;
}
function cloneArrayBuffer(value, shouldPersistRemote) {
  var clone = _index2.WorkletsModule.makeShareableClone(value, shouldPersistRemote, value);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  _shareableMappingCache.shareableMappingCache.set(clone);
  return clone;
}
function cloneArrayBufferView(value) {
  var buffer = value.buffer;
  var typeName = value.constructor.name;
  var handle = makeShareableCloneRecursive({
    __init: function __init() {
      'worklet';

      if (!VALID_ARRAY_VIEWS_NAMES.includes(typeName)) {
        throw new _errors.ReanimatedError(`[Reanimated] Invalid array view name \`${typeName}\`.`);
      }
      var constructor = global[typeName];
      if (constructor === undefined) {
        throw new _errors.ReanimatedError(`[Reanimated] Constructor for \`${typeName}\` not found.`);
      }
      return new constructor(buffer);
    }
  });
  _shareableMappingCache.shareableMappingCache.set(value, handle);
  return handle;
}
function inaccessibleObject(value) {
  var clone = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);
  _shareableMappingCache.shareableMappingCache.set(value, clone);
  return clone;
}
var WORKLET_CODE_THRESHOLD = 255;
function getWorkletCode(value) {
  var _value$__initData;
  var code = value == null || (_value$__initData = value.__initData) == null ? void 0 : _value$__initData.code;
  if (!code) {
    return 'unknown';
  }
  if (code.length > WORKLET_CODE_THRESHOLD) {
    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;
  }
  return code;
}
function isRemoteFunction(value) {
  'worklet';

  return !!value.__remoteFunction;
}
function freezeObjectInDev(value) {
  if (!true) {
    return;
  }
  Object.entries(value).forEach(function (_ref5) {
    var _ref6 = (0, _slicedToArray2.default)(_ref5, 2),
      key = _ref6[0],
      element = _ref6[1];
    var descriptor = Object.getOwnPropertyDescriptor(value, key);
    if (!descriptor.configurable) {
      return;
    }
    Object.defineProperty(value, key, {
      get: function get() {
        return element;
      },
      set: function set() {
        _index.logger.warn(`Tried to modify key \`${key}\` of an object which has been already passed to a worklet. See 
https://docs.swmansion.com/react-native-reanimated/docs/guides/troubleshooting#tried-to-modify-key-of-an-object-which-has-been-converted-to-a-shareable 
for more details.`);
      }
    });
  });
  Object.preventExtensions(value);
}
function makeShareableCloneOnUIRecursive(value) {
  'worklet';

  if (SHOULD_BE_USE_WEB) {
    return value;
  }
  function cloneRecursive(value) {
    if (typeof value === 'object' && value !== null || typeof value === 'function') {
      if (isHostObject(value)) {
        return global._makeShareableClone(value, undefined);
      }
      if (isRemoteFunction(value)) {
        return value.__remoteFunction;
      }
      if (Array.isArray(value)) {
        return global._makeShareableClone(value.map(cloneRecursive), undefined);
      }
      var toAdapt = {};
      for (var _ref7 of Object.entries(value)) {
        var _ref8 = (0, _slicedToArray2.default)(_ref7, 2);
        var key = _ref8[0];
        var element = _ref8[1];
        toAdapt[key] = cloneRecursive(element);
      }
      return global._makeShareableClone(toAdapt, value);
    }
    return global._makeShareableClone(value, undefined);
  }
  return cloneRecursive(value);
}
function makeShareableJS(value) {
  return value;
}
function makeShareableNative(value) {
  if (_shareableMappingCache.shareableMappingCache.get(value)) {
    return value;
  }
  var handle = makeShareableCloneRecursive({
    __init: function __init() {
      'worklet';

      return value;
    }
  });
  _shareableMappingCache.shareableMappingCache.set(value, handle);
  return value;
}
var makeShareable = exports.makeShareable = SHOULD_BE_USE_WEB ? makeShareableJS : makeShareableNative;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,