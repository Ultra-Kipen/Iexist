{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNative2","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","LargeDataComponent","_ref","_ref$itemCount","itemCount","_useState","useState","Array","from","length","_","id","value","largeData","fill","join","_useState2","_slicedToArray2","items","setItems","addMoreItems","newItems","concat","_toConsumableArray2","jsxs","View","children","jsx","Button","title","onPress","FlatList","data","keyExtractor","item","renderItem","_ref2","Text","MemoryLeakComponent","_useState3","_useState4","counter","setCounter","_useState5","_useState6","leakedData","setLeakedData","createLeak","newArray","OptimizedComponent","_ref3","_ref3$itemCount","_useState7","_useState8","React","useCallback","_ref4","initialNumToRender","maxToRenderPerBatch","windowSize","removeClippedSubviews","describe","test","_render","render","getByText","addButton","fireEvent","press","_render2","leakButton","expect","toBeTruthy","start","performance","now","end","console","log","_render3","unmount"],"sources":["MemoryUsage.test.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { Text, View, FlatList, Button } from 'react-native';\r\n\r\n// 메모리 누수 가능성이 있는 컴포넌트 (큰 데이터를 생성하고 유지함)\r\nconst LargeDataComponent = ({ itemCount = 1000 }) => {\r\n  const [items, setItems] = useState(() => \r\n    Array.from({ length: itemCount }, (_, i) => ({\r\n      id: i,\r\n      value: `Item ${i}`,\r\n      // 각 아이템에 큰 데이터 추가\r\n      largeData: new Array(1000).fill('데이터').join(''),\r\n    }))\r\n  );\r\n  \r\n  const addMoreItems = () => {\r\n    const newItems = Array.from({ length: 500 }, (_, i) => ({\r\n      id: items.length + i,\r\n      value: `Item ${items.length + i}`,\r\n      largeData: new Array(1000).fill('데이터').join(''),\r\n    }));\r\n    setItems([...items, ...newItems]);\r\n  };\r\n  \r\n  return (\r\n    <View>\r\n      <Button title=\"Add 500 More Items\" onPress={addMoreItems} />\r\n      <FlatList\r\n        data={items}\r\n        keyExtractor={(item) => `item-${item.id}`}\r\n        renderItem={({ item }) => <Text>{item.value}</Text>}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\n// 메모리 누수가 있는 컴포넌트 (클로저를 통해 이전 데이터 참조를 유지함)\r\nconst MemoryLeakComponent = () => {\r\n  const [counter, setCounter] = useState(0);\r\n  const [leakedData, setLeakedData] = useState<any[]>([]);\r\n  \r\n  const createLeak = () => {\r\n    // 의도적으로 큰 배열을 메모리에 유지시킴\r\n    const newArray = new Array(10000).fill('메모리 누수 데이터');\r\n    setLeakedData([...leakedData, newArray]);\r\n    setCounter(counter + 1);\r\n  };\r\n  \r\n  return (\r\n    <View>\r\n      <Text>Counter: {counter}</Text>\r\n      <Text>Leaked Data Size: {leakedData.length}</Text>\r\n      <Button title=\"Create Memory Leak\" onPress={createLeak} />\r\n    </View>\r\n  );\r\n};\r\n\r\n// 최적화된 컴포넌트 (이벤트핸들러를 useCallback으로 메모이제이션)\r\nconst OptimizedComponent = ({ itemCount = 1000 }) => {\r\n  const [items] = useState(() => \r\n    Array.from({ length: itemCount }, (_, i) => ({\r\n      id: i,\r\n      value: `Item ${i}`,\r\n    }))\r\n  );\r\n  \r\n  const renderItem = React.useCallback(({ item }: { item: any }) => (\r\n    <Text>{item.value}</Text>\r\n  ), []);\r\n  \r\n  return (\r\n    <FlatList\r\n      data={items}\r\n      keyExtractor={(item) => `item-${item.id}`}\r\n      renderItem={renderItem}\r\n      initialNumToRender={10}\r\n      maxToRenderPerBatch={10}\r\n      windowSize={5}\r\n      removeClippedSubviews={true}\r\n    />\r\n  );\r\n};\r\n\r\ndescribe('메모리 사용량 테스트', () => {\r\n  test('LargeDataComponent가 많은 데이터를 처리할 수 있어야 함', () => {\r\n    const { getByText } = render(<LargeDataComponent itemCount={100} />);\r\n    \r\n    // 더 많은 아이템 추가 버튼을 누름\r\n    const addButton = getByText('Add 500 More Items');\r\n    fireEvent.press(addButton);\r\n    \r\n    // 메모리 오류없이 실행되어야 함\r\n    // 실제 환경에서는 메모리 프로파일러로 측정 필요\r\n  });\r\n\r\n  test('MemoryLeakComponent가 버튼 클릭마다 메모리를 더 사용함', () => {\r\n    const { getByText } = render(<MemoryLeakComponent />);\r\n    \r\n    const leakButton = getByText('Create Memory Leak');\r\n    \r\n    // 여러번 누름\r\n    for (let i = 0; i < 5; i++) {\r\n      fireEvent.press(leakButton);\r\n    }\r\n    \r\n    // 카운터가 증가했는지 확인\r\n    expect(getByText('Counter: 5')).toBeTruthy();\r\n    expect(getByText('Leaked Data Size: 5')).toBeTruthy();\r\n    \r\n    // 실제 환경에서는 메모리 사용량을 측정해야 함\r\n  });\r\n\r\n  test('OptimizedComponent가 효율적으로 렌더링되어야 함', () => {\r\n    // 렌더링 시간 측정\r\n    const start = performance.now();\r\n    render(<OptimizedComponent itemCount={500} />);\r\n    const end = performance.now();\r\n    \r\n    console.log(`OptimizedComponent 렌더링 시간: ${end - start}ms`);\r\n    \r\n    // 테스트 환경에서는 정확한 메모리 사용량을 측정하기 어려움\r\n    // 실제 기기에서 React DevTools Profiler로 확인 필요\r\n  });\r\n\r\n  test('컴포넌트가 마운트 해제될 때 메모리가 적절히 해제되어야 함', () => {\r\n    const { unmount } = render(<LargeDataComponent itemCount={500} />);\r\n    \r\n    // 컴포넌트 마운트 해제\r\n    unmount();\r\n    \r\n    // 실제 환경에서는 GC 후 메모리 사용량 확인 필요\r\n    // 여기서는 오류 없이 마운트 해제됨을 확인\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}