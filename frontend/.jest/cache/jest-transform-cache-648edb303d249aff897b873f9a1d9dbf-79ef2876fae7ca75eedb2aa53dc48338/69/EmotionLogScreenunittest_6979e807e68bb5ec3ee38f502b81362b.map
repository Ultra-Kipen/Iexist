{"version":3,"names":["_getJestObj","mock","RN","jest","requireActual","Object","assign","DevSettings","addMenuItem","fn","DevMenu","NativeModules","show","Alert","alert","getAllEmotions","recordEmotions","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_EmotionLogScreen","_emotionService","_jsxRuntime","_require","describe","mockNavigation","goBack","mockEmotions","emotion_id","name","icon","color","beforeEach","clearAllMocks","emotionService","mockResolvedValue","data","status","it","default","_render","render","jsx","navigation","getByText","getByTestId","waitFor","expect","toBeTruthy","_render2","happyChip","fireEvent","press","submitButton","props","accessibilityState","disabled","toBeFalsy","_render3","_render4","noteInput","changeText","toHaveBeenCalledWith","emotion_ids","note","mockRejectedValue","response","message","_render5"],"sources":["EmotionLogScreen.unit.test.tsx"],"sourcesContent":["// tests/unit/screens/EmotionLogScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor, act } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\nimport EmotionLogScreen from '../../../src/screens/EmotionLogScreen';\r\nimport emotionService from '../../../src/services/api/emotionService';\r\n\r\n// 광범위한 모킹 설정\r\njest.mock('react-native', () => {\r\n  const RN = jest.requireActual('react-native');\r\n  return {\r\n    ...RN,\r\n    DevSettings: {\r\n      addMenuItem: jest.fn(),\r\n    },\r\n    DevMenu: {\r\n      addMenuItem: jest.fn(),\r\n    },\r\n    NativeModules: {\r\n      ...RN.NativeModules,\r\n      DevMenu: {\r\n        show: jest.fn(),\r\n      },\r\n      DevSettings: {\r\n        addMenuItem: jest.fn(),\r\n      },\r\n    },\r\n    Alert: {\r\n      alert: jest.fn(),\r\n    },\r\n  };\r\n});\r\n\r\n// emotionService 모킹\r\njest.mock('../../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn(),\r\n  recordEmotions: jest.fn(),\r\n}));\r\n\r\ndescribe('EmotionLogScreen', () => {\r\n  const mockNavigation = {\r\n    goBack: jest.fn(),\r\n  };\r\n\r\n  const mockEmotions = [\r\n    { \r\n      emotion_id: 1, \r\n      name: '행복', \r\n      icon: 'happy-icon', \r\n      color: '#FFD700' \r\n    },\r\n    { \r\n      emotion_id: 2, \r\n      name: '슬픔', \r\n      icon: 'sad-icon', \r\n      color: '#4682B4' \r\n    }\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 모든 테스트에 대한 기본 모킹 설정\r\n    (emotionService.getAllEmotions as jest.Mock).mockResolvedValue({\r\n      data: { \r\n        status: 'success', \r\n        data: mockEmotions \r\n      }\r\n    });\r\n  });\r\n\r\n  it('renders emotion chips correctly', async () => {\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    // 감정 데이터 로딩 대기\r\n    await waitFor(() => {\r\n      expect(getByText('행복')).toBeTruthy();\r\n      expect(getByText('슬픔')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('allows selecting and deselecting emotions', async () => {\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    // 감정 데이터 로딩 대기\r\n    await waitFor(() => {\r\n      const happyChip = getByText('행복');\r\n      \r\n      // 감정 선택\r\n      fireEvent.press(happyChip);\r\n      \r\n      // 제출 버튼 확인\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();\r\n    });\r\n  });\r\n\r\n  it('shows error when no emotion is selected', async () => {\r\n    const { getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      \r\n      // 제출 버튼 비활성화 확인\r\n      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('submits emotions successfully', async () => {\r\n    // recordEmotions 성공 모킹\r\n    (emotionService.recordEmotions as jest.Mock).mockResolvedValue({\r\n      data: { status: 'success' }\r\n    });\r\n\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // 감정 선택\r\n      const happyChip = getByText('행복');\r\n      fireEvent.press(happyChip);\r\n\r\n      // 메모 입력\r\n      const noteInput = getByTestId('emotion-note-input');\r\n      fireEvent.changeText(noteInput, '오늘은 매우 행복한 날');\r\n\r\n      // 제출 버튼 클릭\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      fireEvent.press(submitButton);\r\n    });\r\n\r\n    // 제출 후 검증\r\n    await waitFor(() => {\r\n      expect(emotionService.recordEmotions).toHaveBeenCalledWith({\r\n        emotion_ids: [1],\r\n        note: '오늘은 매우 행복한 날'\r\n      });\r\n    });\r\n  });\r\n\r\n  it('handles emotion submission error', async () => {\r\n    // recordEmotions 실패 모킹\r\n    (emotionService.recordEmotions as jest.Mock).mockRejectedValue({\r\n      response: {\r\n        data: {\r\n          message: '감정 기록 중 오류가 발생했습니다.'\r\n        }\r\n      }\r\n    });\r\n\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // 감정 선택\r\n      const happyChip = getByText('행복');\r\n      fireEvent.press(happyChip);\r\n\r\n      // 제출 버튼 클릭\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      fireEvent.press(submitButton);\r\n    });\r\n\r\n    // 오류 얼럿 호출 확인\r\n    await waitFor(() => {\r\n      expect(Alert.alert).toHaveBeenCalledWith(\r\n        '오류',\r\n        '감정 기록 중 오류가 발생했습니다.'\r\n      );\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}