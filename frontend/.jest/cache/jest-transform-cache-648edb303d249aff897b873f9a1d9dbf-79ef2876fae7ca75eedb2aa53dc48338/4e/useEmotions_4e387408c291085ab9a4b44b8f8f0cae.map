{"version":3,"names":["_react","require","_store","useEmotions","exports","_useStore","useStore","state","dispatch","_useState","useState","_useState2","_slicedToArray2","default","emotions","setEmotions","_useState3","_useState4","selectedEmotions","setSelectedEmotions","_useState5","_useState6","loading","setLoading","_useState7","_useState8","error","setError","fetchEmotions","useCallback","_asyncToGenerator2","response","fetch","ok","Error","data","json","useEffect","toggleEmotion","emotionId","prev","exists","includes","filter","id","concat","_toConsumableArray2","selectEmotion","deselectEmotion","clearEmotions"],"sources":["useEmotions.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { useStore } from '../store';\r\nimport { actions } from '../store/actions';\r\n\r\ninterface Emotion {\r\n  id: number;\r\n  name: string;\r\n  icon: string;\r\n  color: string;\r\n}\r\n\r\ninterface UseEmotionsReturn {\r\n  emotions: Emotion[];\r\n  selectedEmotions: number[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  toggleEmotion: (emotionId: number) => void;\r\n  selectEmotion: (emotionId: number) => void;\r\n  deselectEmotion: (emotionId: number) => void;\r\n  clearEmotions: () => void;\r\n  fetchEmotions: () => Promise<void>;\r\n}\r\n\r\nexport const useEmotions = (): UseEmotionsReturn => {\r\n  const { state, dispatch } = useStore();\r\n  const [emotions, setEmotions] = useState<Emotion[]>([]);\r\n  const [selectedEmotions, setSelectedEmotions] = useState<number[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true); // 초기 로딩 상태를 true로 변경\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchEmotions = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      // API 호출 코드\r\n      const response = await fetch('/api/emotions');\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('감정 목록을 불러오는데 실패했습니다.');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setEmotions(data);\r\n    } catch (error: any) {\r\n      // 명시적으로 한국어 에러 메시지 설정\r\n      setError('감정 목록을 불러오는데 실패했습니다.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchEmotions();\r\n  }, [fetchEmotions]);\r\n\r\n  const toggleEmotion = useCallback((emotionId: number) => {\r\n    setSelectedEmotions(prev => {\r\n      const exists = prev.includes(emotionId);\r\n      if (exists) {\r\n        return prev.filter(id => id !== emotionId);\r\n      } else {\r\n        return [...prev, emotionId];\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const selectEmotion = useCallback((emotionId: number) => {\r\n    setSelectedEmotions(prev => {\r\n      if (!prev.includes(emotionId)) {\r\n        return [...prev, emotionId];\r\n      }\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  const deselectEmotion = useCallback((emotionId: number) => {\r\n    setSelectedEmotions(prev => prev.filter(id => id !== emotionId));\r\n  }, []);\r\n\r\n  const clearEmotions = useCallback(() => {\r\n    setSelectedEmotions([]);\r\n  }, []);\r\n\r\n  return {\r\n    emotions,\r\n    selectedEmotions,\r\n    loading,\r\n    error,\r\n    toggleEmotion,\r\n    selectEmotion,\r\n    deselectEmotion,\r\n    clearEmotions,\r\n    fetchEmotions\r\n  };\r\n};"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAsBO,IAAME,WAAW,GAAAC,OAAA,CAAAD,WAAA,GAAG,SAAdA,WAAWA,CAAA,EAA4B;EAClD,IAAAE,SAAA,GAA4B,IAAAC,eAAQ,EAAC,CAAC;IAA9BC,KAAK,GAAAF,SAAA,CAALE,KAAK;IAAEC,QAAQ,GAAAH,SAAA,CAARG,QAAQ;EACvB,IAAAC,SAAA,GAAgC,IAAAC,eAAQ,EAAY,EAAE,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAAC,OAAA,EAAAJ,SAAA;IAAhDK,QAAQ,GAAAH,UAAA;IAAEI,WAAW,GAAAJ,UAAA;EAC5B,IAAAK,UAAA,GAAgD,IAAAN,eAAQ,EAAW,EAAE,CAAC;IAAAO,UAAA,OAAAL,eAAA,CAAAC,OAAA,EAAAG,UAAA;IAA/DE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAC5C,IAAAG,UAAA,GAA8B,IAAAV,eAAQ,EAAU,IAAI,CAAC;IAAAW,UAAA,OAAAT,eAAA,CAAAC,OAAA,EAAAO,UAAA;IAA9CE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAC1B,IAAAG,UAAA,GAA0B,IAAAd,eAAQ,EAAgB,IAAI,CAAC;IAAAe,UAAA,OAAAb,eAAA,CAAAC,OAAA,EAAAW,UAAA;IAAhDE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAMG,aAAa,GAAG,IAAAC,kBAAW,MAAAC,kBAAA,CAAAjB,OAAA,EAAC,aAAY;IAC5C,IAAI;MACFU,UAAU,CAAC,IAAI,CAAC;MAChBI,QAAQ,CAAC,IAAI,CAAC;MAGd,IAAMI,QAAQ,SAASC,KAAK,CAAC,eAAe,CAAC;MAE7C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MAEA,IAAMC,IAAI,SAASJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCrB,WAAW,CAACoB,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOT,KAAU,EAAE;MAEnBC,QAAQ,CAAC,sBAAsB,CAAC;IAClC,CAAC,SAAS;MACRJ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,GAAE,EAAE,CAAC;EACN,IAAAc,gBAAS,EAAC,YAAM;IACdT,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,IAAMU,aAAa,GAAG,IAAAT,kBAAW,EAAC,UAACU,SAAiB,EAAK;IACvDpB,mBAAmB,CAAC,UAAAqB,IAAI,EAAI;MAC1B,IAAMC,MAAM,GAAGD,IAAI,CAACE,QAAQ,CAACH,SAAS,CAAC;MACvC,IAAIE,MAAM,EAAE;QACV,OAAOD,IAAI,CAACG,MAAM,CAAC,UAAAC,EAAE;UAAA,OAAIA,EAAE,KAAKL,SAAS;QAAA,EAAC;MAC5C,CAAC,MAAM;QACL,UAAAM,MAAA,KAAAC,mBAAA,CAAAjC,OAAA,EAAW2B,IAAI,IAAED,SAAS;MAC5B;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMQ,aAAa,GAAG,IAAAlB,kBAAW,EAAC,UAACU,SAAiB,EAAK;IACvDpB,mBAAmB,CAAC,UAAAqB,IAAI,EAAI;MAC1B,IAAI,CAACA,IAAI,CAACE,QAAQ,CAACH,SAAS,CAAC,EAAE;QAC7B,UAAAM,MAAA,KAAAC,mBAAA,CAAAjC,OAAA,EAAW2B,IAAI,IAAED,SAAS;MAC5B;MACA,OAAOC,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMQ,eAAe,GAAG,IAAAnB,kBAAW,EAAC,UAACU,SAAiB,EAAK;IACzDpB,mBAAmB,CAAC,UAAAqB,IAAI;MAAA,OAAIA,IAAI,CAACG,MAAM,CAAC,UAAAC,EAAE;QAAA,OAAIA,EAAE,KAAKL,SAAS;MAAA,EAAC;IAAA,EAAC;EAClE,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMU,aAAa,GAAG,IAAApB,kBAAW,EAAC,YAAM;IACtCV,mBAAmB,CAAC,EAAE,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLL,QAAQ,EAARA,QAAQ;IACRI,gBAAgB,EAAhBA,gBAAgB;IAChBI,OAAO,EAAPA,OAAO;IACPI,KAAK,EAALA,KAAK;IACLY,aAAa,EAAbA,aAAa;IACbS,aAAa,EAAbA,aAAa;IACbC,eAAe,EAAfA,eAAe;IACfC,aAAa,EAAbA,aAAa;IACbrB,aAAa,EAAbA;EACF,CAAC;AACH,CAAC","ignoreList":[]}