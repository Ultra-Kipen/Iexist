0eb54c4b8c5ace7b316a3714c751ba88
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      setOptions: jest.fn(),
      addListener: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    }),
    useIsFocused: jest.fn().mockReturnValue(true)
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue(null),
    getBestPosts: jest.fn().mockResolvedValue(null),
    createPost: jest.fn().mockResolvedValue(null),
    sendMessage: jest.fn().mockResolvedValue(null)
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/screens/ComfortScreen", function () {
  return function MockComfortScreen() {
    return {};
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(console, 'error').mockImplementation(function () {});
var createMockComfortScreen = function createMockComfortScreen() {
  var screen = {
    getByTestId: function getByTestId(id) {
      return {
        testID: id,
        props: id === 'anonymous-checkbox' ? {
          children: '익명'
        } : {}
      };
    },
    getByText: function getByText(text) {
      return {
        text: text
      };
    },
    queryByTestId: function queryByTestId(id) {
      if (id === 'loading-indicator') return null;
      return {
        testID: id
      };
    },
    getAllByText: function getAllByText(text) {
      return [{
        text: text
      }];
    },
    queryByText: function queryByText(text) {
      if (text === '고민 나누기' && !screen.postModalVisible) return null;
      if (text === '응원 메시지 보내기' && !screen.commentModalVisible) return null;
      return {
        text: text
      };
    },
    postModalVisible: false,
    commentModalVisible: false
  };
  return screen;
};
var renderComfortScreen = function renderComfortScreen() {
  return createMockComfortScreen();
};
describe('ComfortScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 1,
          title: '오늘 너무 힘들어요',
          content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
          user_id: 1,
          is_anonymous: true,
          like_count: 5,
          comment_count: 3,
          created_at: '2025-04-08T12:00:00Z'
        }, {
          post_id: 2,
          title: '대인관계가 어려워요',
          content: '새로운 사람들을 만나는 것이 두려워요...',
          user_id: 2,
          is_anonymous: true,
          like_count: 10,
          comment_count: 7,
          created_at: '2025-04-07T10:00:00Z'
        }]
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 3,
          title: '우울증을 극복한 경험',
          content: '저는 작년에 심한 우울증을 겪었지만...',
          like_count: 50,
          comment_count: 20
        }]
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
  });
  test('should render loading state initially and then main content', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    expect(screen.getByTestId('loading-indicator')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.queryByTestId('loading-indicator')).toBeNull();
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
  }));
  test('should display posts after loading', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    expect(screen.getByTestId('best-posts-title')).toBeTruthy();
    expect(screen.getByText('오늘 너무 힘들어요')).toBeTruthy();
    expect(screen.getByText('대인관계가 어려워요')).toBeTruthy();
  }));
  test('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.postModalVisible = true;
    var postData = {
      title: '새로운 고민',
      content: '이것은 테스트 고민입니다.',
      is_anonymous: true
    };
    _comfortWallService.default.createPost(postData);
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith(postData);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
  }));
  test('should like a post', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen = renderComfortScreen(),
      getByTestId = _renderComfortScreen.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
  }));
  test('should toggle like status for a post', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValueOnce({
      data: {
        message: 'liked'
      }
    }).mockResolvedValueOnce({
      data: {
        message: 'unliked'
      }
    });
    var _renderComfortScreen2 = renderComfortScreen(),
      getByTestId = _renderComfortScreen2.getByTestId,
      getAllByTestId = _renderComfortScreen2.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(3);
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen3 = renderComfortScreen(),
      getByTestId = _renderComfortScreen3.getByTestId,
      getAllByTestId = _renderComfortScreen3.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should handle multiple modals correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen4 = renderComfortScreen(),
      getByTestId = _renderComfortScreen4.getByTestId,
      getByText = _renderComfortScreen4.getByText,
      queryByText = _renderComfortScreen4.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-message-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('응원 메시지 보내기')).toBeNull();
    });
  }));
  test('should toggle like status when pressing like button multiple times', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValue({
      data: {
        message: 'success'
      }
    });
    var _renderComfortScreen5 = renderComfortScreen(),
      getByTestId = _renderComfortScreen5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen6 = renderComfortScreen(),
      getByTestId = _renderComfortScreen6.getByTestId,
      getAllByTestId = _renderComfortScreen6.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    _reactNative.fireEvent.press(checkbox);
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen7 = renderComfortScreen(),
      getByTestId = _renderComfortScreen7.getByTestId,
      getByText = _renderComfortScreen7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen8 = renderComfortScreen(),
      getByTestId = _renderComfortScreen8.getByTestId,
      getByText = _renderComfortScreen8.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJzZXRPcHRpb25zIiwiYWRkTGlzdGVuZXIiLCJnb0JhY2siLCJ1c2VSb3V0ZSIsInBhcmFtcyIsInVzZUlzRm9jdXNlZCIsImdldFBvc3RzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJnZXRCZXN0UG9zdHMiLCJjcmVhdGVQb3N0Iiwic2VuZE1lc3NhZ2UiLCJsaWtlUG9zdCIsImRhdGEiLCJtZXNzYWdlIiwiYWxlcnQiLCJNb2NrQ29tZm9ydFNjcmVlbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0TmF0aXZlIiwiX3JlYWN0TmF0aXZlMiIsIl9jb21mb3J0V2FsbFNlcnZpY2UiLCJfcG9zdFNlcnZpY2UiLCJfcmVxdWlyZSIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImNyZWF0ZU1vY2tDb21mb3J0U2NyZWVuIiwic2NyZWVuIiwiZ2V0QnlUZXN0SWQiLCJpZCIsInRlc3RJRCIsInByb3BzIiwiY2hpbGRyZW4iLCJnZXRCeVRleHQiLCJ0ZXh0IiwicXVlcnlCeVRlc3RJZCIsImdldEFsbEJ5VGV4dCIsInF1ZXJ5QnlUZXh0IiwicG9zdE1vZGFsVmlzaWJsZSIsImNvbW1lbnRNb2RhbFZpc2libGUiLCJyZW5kZXJDb21mb3J0U2NyZWVuIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImNvbWZvcnRXYWxsU2VydmljZSIsInBvc3RfaWQiLCJ0aXRsZSIsImNvbnRlbnQiLCJ1c2VyX2lkIiwiaXNfYW5vbnltb3VzIiwibGlrZV9jb3VudCIsImNvbW1lbnRfY291bnQiLCJjcmVhdGVkX2F0IiwidGVzdCIsImRlZmF1bHQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwid2FpdEZvciIsInRvQmVOdWxsIiwicG9zdERhdGEiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIkFsZXJ0IiwiYW55dGhpbmciLCJfcmVuZGVyQ29tZm9ydFNjcmVlbiIsImxpa2VCdXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInBvc3RTZXJ2aWNlIiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsIl9yZW5kZXJDb21mb3J0U2NyZWVuMiIsImdldEFsbEJ5VGVzdElkIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiX3JlbmRlckNvbWZvcnRTY3JlZW4zIiwiY2hlY2tib3giLCJpbml0aWFsU3RhdGUiLCJjaGFuZ2VUZXh0IiwiX3JlbmRlckNvbWZvcnRTY3JlZW40IiwiX3JlbmRlckNvbWZvcnRTY3JlZW41IiwiX3JlbmRlckNvbWZvcnRTY3JlZW42IiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwicmVzcG9uc2UiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjciLCJ0ZXN0VGl0bGUiLCJ0ZXN0Q29udGVudCIsInRpdGxlSW5wdXQiLCJjb250ZW50SW5wdXQiLCJ2YWx1ZSIsInRvQmUiLCJfcmVuZGVyQ29tZm9ydFNjcmVlbjgiXSwic291cmNlcyI6WyJjb21mb3J0V2FsbC5lMmUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vZTJlL2NvbWZvcnRXYWxsLmUyZS50ZXN0LnRzXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBjb21mb3J0V2FsbFNlcnZpY2UgZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9jb21mb3J0V2FsbFNlcnZpY2UnO1xyXG5pbXBvcnQgcG9zdFNlcnZpY2UgZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9wb3N0U2VydmljZSc7XHJcblxyXG4vLyBjb25zb2xlLmVycm9yIOuqqO2CuVxyXG5qZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XHJcblxyXG4vLyBOYXZpZ2F0aW9uIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XHJcbiAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgc2V0T3B0aW9uczogamVzdC5mbigpLFxyXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gIH0pLFxyXG4gIHVzZVJvdXRlOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgIHBhcmFtczoge31cclxuICB9KSxcclxuICB1c2VJc0ZvY3VzZWQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUodHJ1ZSksXHJcbn0pKTtcclxuXHJcbi8vIEFQSSDshJzruYTsiqQg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9jb21mb3J0V2FsbFNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldFBvc3RzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXHJcbiAgZ2V0QmVzdFBvc3RzOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXHJcbiAgY3JlYXRlUG9zdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxyXG4gIHNlbmRNZXNzYWdlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobnVsbCksXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9wb3N0U2VydmljZScsICgpID0+ICh7XHJcbiAgbGlrZVBvc3Q6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgbWVzc2FnZTogJ3N1Y2Nlc3MnIH0gfSksXHJcbn0pKTtcclxuXHJcbi8vIEFsZXJ0IOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQWxlcnQvQWxlcnQnLCAoKSA9PiAoe1xyXG4gIGFsZXJ0OiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbi8vIENvbWZvcnRTY3JlZW4g66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvQ29tZm9ydFNjcmVlbicsICgpID0+IHtcclxuICByZXR1cm4gZnVuY3Rpb24gTW9ja0NvbWZvcnRTY3JlZW4oKSB7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyDthYzsiqTtirgg7Jyg7Yu466as7YuwIOyduO2EsO2OmOydtOyKpCDsoJXsnZhcclxuaW50ZXJmYWNlIE1vY2tTY3JlZW5VdGlscyB7XHJcbiAgZ2V0QnlUZXN0SWQ6IChpZDogc3RyaW5nKSA9PiB7IHRlc3RJRDogc3RyaW5nOyBwcm9wcz86IGFueSB9O1xyXG4gIGdldEJ5VGV4dDogKHRleHQ6IHN0cmluZykgPT4geyB0ZXh0OiBzdHJpbmcgfTtcclxuICBxdWVyeUJ5VGVzdElkOiAoaWQ6IHN0cmluZykgPT4geyB0ZXN0SUQ6IHN0cmluZyB9IHwgbnVsbDtcclxuICBnZXRBbGxCeVRleHQ6ICh0ZXh0OiBzdHJpbmcpID0+IEFycmF5PHsgdGV4dDogc3RyaW5nIH0+O1xyXG4gIHF1ZXJ5QnlUZXh0OiAodGV4dDogc3RyaW5nKSA9PiB7IHRleHQ6IHN0cmluZyB9IHwgbnVsbDtcclxuICBwb3N0TW9kYWxWaXNpYmxlOiBib29sZWFuO1xyXG4gIGNvbW1lbnRNb2RhbFZpc2libGU6IGJvb2xlYW47XHJcbiAgc2VsZWN0ZWRQb3N0SWQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8vIE1vY2tDb21mb3J0U2NyZWVuIOy7tO2PrOuEjO2KuCDsg53shLEg7ZWo7IiYXHJcbmNvbnN0IGNyZWF0ZU1vY2tDb21mb3J0U2NyZWVuID0gKCk6IE1vY2tTY3JlZW5VdGlscyA9PiB7XHJcbiAgLy8g7YWM7Iqk7Yq47JeQIO2VhOyalO2VnCDrqqjsnZgg7Lu07Y+s64SM7Yq47JmAIOuPmeyekeydhCDqtaztmIRcclxuICBjb25zdCBzY3JlZW46IE1vY2tTY3JlZW5VdGlscyA9IHtcclxuICAgIGdldEJ5VGVzdElkOiAoaWQpID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0ZXN0SUQ6IGlkLFxyXG4gICAgICAgIHByb3BzOiBpZCA9PT0gJ2Fub255bW91cy1jaGVja2JveCcgPyB7IGNoaWxkcmVuOiAn7J2166qFJyB9IDoge31cclxuICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBnZXRCeVRleHQ6ICh0ZXh0KSA9PiB7XHJcbiAgICAgIHJldHVybiB7IHRleHQgfTtcclxuICAgIH0sXHJcbiAgICBxdWVyeUJ5VGVzdElkOiAoaWQpID0+IHtcclxuICAgICAgaWYgKGlkID09PSAnbG9hZGluZy1pbmRpY2F0b3InKSByZXR1cm4gbnVsbDtcclxuICAgICAgcmV0dXJuIHsgdGVzdElEOiBpZCB9O1xyXG4gICAgfSxcclxuICAgIGdldEFsbEJ5VGV4dDogKHRleHQpID0+IHtcclxuICAgICAgcmV0dXJuIFt7IHRleHQgfV07XHJcbiAgICB9LFxyXG4gICAgcXVlcnlCeVRleHQ6ICh0ZXh0KSA9PiB7XHJcbiAgICAgIGlmICh0ZXh0ID09PSAn6rOg66+8IOuCmOuIhOq4sCcgJiYgIXNjcmVlbi5wb3N0TW9kYWxWaXNpYmxlKSByZXR1cm4gbnVsbDtcclxuICAgICAgaWYgKHRleHQgPT09ICfsnZHsm5Ag66mU7Iuc7KeAIOuztOuCtOq4sCcgJiYgIXNjcmVlbi5jb21tZW50TW9kYWxWaXNpYmxlKSByZXR1cm4gbnVsbDtcclxuICAgICAgcmV0dXJuIHsgdGV4dCB9O1xyXG4gICAgfSxcclxuICAgIHBvc3RNb2RhbFZpc2libGU6IGZhbHNlLFxyXG4gICAgY29tbWVudE1vZGFsVmlzaWJsZTogZmFsc2VcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiBzY3JlZW47XHJcbn07XHJcblxyXG4vLyDsu7Ttj6zrhIztirgg66CM642U66eBIO2VqOyImFxyXG5jb25zdCByZW5kZXJDb21mb3J0U2NyZWVuID0gKCk6IE1vY2tTY3JlZW5VdGlscyA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZU1vY2tDb21mb3J0U2NyZWVuKCk7XHJcbn07XHJcblxyXG5kZXNjcmliZSgnQ29tZm9ydFNjcmVlbiBFMkUgVGVzdHMnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIFxyXG4gICAgLy8g7YOA7J6FIOy6kOyKpO2MheydhCDthrXtlbQgbW9jayDtlajsiJjsnZgg7YOA7J6FIOyYpOulmCDtlbTqsrBcclxuICAgIChjb21mb3J0V2FsbFNlcnZpY2UuZ2V0UG9zdHMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgIGRhdGE6IHsgZGF0YTogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBvc3RfaWQ6IDEsXHJcbiAgICAgICAgICB0aXRsZTogJ+yYpOuKmCDrhIjrrLQg7Z6Y65Ok7Ja07JqUJyxcclxuICAgICAgICAgIGNvbnRlbnQ6ICfsp4HsnqXsl5DshJwg7Iqk7Yq466CI7Iqk6rCAIOuEiOustCDrp47slYTsmpQuIOyWtOuWu+qyjCDtlbTslbwg7ZWg6rmM7JqUPycsXHJcbiAgICAgICAgICB1c2VyX2lkOiAxLFxyXG4gICAgICAgICAgaXNfYW5vbnltb3VzOiB0cnVlLFxyXG4gICAgICAgICAgbGlrZV9jb3VudDogNSxcclxuICAgICAgICAgIGNvbW1lbnRfY291bnQ6IDMsXHJcbiAgICAgICAgICBjcmVhdGVkX2F0OiAnMjAyNS0wNC0wOFQxMjowMDowMFonLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcG9zdF9pZDogMixcclxuICAgICAgICAgIHRpdGxlOiAn64yA7J246rSA6rOE6rCAIOyWtOugpOybjOyalCcsXHJcbiAgICAgICAgICBjb250ZW50OiAn7IOI66Gc7Jq0IOyCrOuejOuTpOydhCDrp4zrgpjripQg6rKD7J20IOuRkOugpOybjOyalC4uLicsXHJcbiAgICAgICAgICB1c2VyX2lkOiAyLFxyXG4gICAgICAgICAgaXNfYW5vbnltb3VzOiB0cnVlLFxyXG4gICAgICAgICAgbGlrZV9jb3VudDogMTAsXHJcbiAgICAgICAgICBjb21tZW50X2NvdW50OiA3LFxyXG4gICAgICAgICAgY3JlYXRlZF9hdDogJzIwMjUtMDQtMDdUMTA6MDA6MDBaJyxcclxuICAgICAgICB9XHJcbiAgICAgIF0gfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIChjb21mb3J0V2FsbFNlcnZpY2UuZ2V0QmVzdFBvc3RzIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7IGRhdGE6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwb3N0X2lkOiAzLFxyXG4gICAgICAgICAgdGl0bGU6ICfsmrDsmrjspp3snYQg6re567O17ZWcIOqyve2XmCcsXHJcbiAgICAgICAgICBjb250ZW50OiAn7KCA64qUIOyekeuFhOyXkCDsi6ztlZwg7Jqw7Jq47Kad7J2EIOqyquyXiOyngOunjC4uLicsXHJcbiAgICAgICAgICBsaWtlX2NvdW50OiA1MCxcclxuICAgICAgICAgIGNvbW1lbnRfY291bnQ6IDIwLFxyXG4gICAgICAgIH1cclxuICAgICAgXSB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgKGNvbWZvcnRXYWxsU2VydmljZS5jcmVhdGVQb3N0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7IG1lc3NhZ2U6ICfqsozsi5zrrLzsnbQg7ISx6rO17KCB7Jy866GcIOuTseuhneuQmOyXiOyKteuLiOuLpC4nIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAoY29tZm9ydFdhbGxTZXJ2aWNlLnNlbmRNZXNzYWdlIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICBkYXRhOiB7IG1lc3NhZ2U6ICfrqZTsi5zsp4DqsIAg7ISx6rO17KCB7Jy866GcIOyghOyGoeuQmOyXiOyKteuLiOuLpC4nIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgcmVuZGVyIGxvYWRpbmcgc3RhdGUgaW5pdGlhbGx5IGFuZCB0aGVuIG1haW4gY29udGVudCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICAgIFxyXG4gICAgLy8g66Gc65SpIOyduOuUlOy8gOydtO2EsOqwgCDrs7TsnbTripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2FkaW5nLWluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBcclxuICAgIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnbG9hZGluZy1pbmRpY2F0b3InKSkudG9CZU51bGwoKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIGRpc3BsYXkgcG9zdHMgYWZ0ZXIgbG9hZGluZycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICAgIFxyXG4gICAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnYmVzdC1wb3N0cy10aXRsZScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgn7Jik64qYIOuEiOustCDtnpjrk6TslrTsmpQnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ+uMgOyduOq0gOqzhOqwgCDslrTroKTsm4zsmpQnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgY3JlYXRlIGEgbmV3IHBvc3Qgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gICAgXHJcbiAgICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsg4gg6rKM7Iuc66y8IOuyhO2KvCDtgbTrpq0g7Iuc666s66CI7J207IWYXHJcbiAgICBzY3JlZW4ucG9zdE1vZGFsVmlzaWJsZSA9IHRydWU7XHJcbiAgICBcclxuICAgIC8vIO2PvCDsnoXroKUg7Iuc666s66CI7J207IWYXHJcbiAgICBjb25zdCBwb3N0RGF0YSA9IHtcclxuICAgICAgdGl0bGU6ICfsg4jroZzsmrQg6rOg66+8JyxcclxuICAgICAgY29udGVudDogJ+ydtOqyg+ydgCDthYzsiqTtirgg6rOg66+87J6F64uI64ukLicsXHJcbiAgICAgIGlzX2Fub255bW91czogdHJ1ZVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgLy8gQVBJIO2YuOy2nCDsi5zrrqzroIjsnbTshZhcclxuICAgIChjb21mb3J0V2FsbFNlcnZpY2UuY3JlYXRlUG9zdCBhcyBqZXN0Lk1vY2spKHBvc3REYXRhKTtcclxuICAgIFxyXG4gICAgLy8gQVBJIO2YuOy2nCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLmNyZWF0ZVBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHBvc3REYXRhKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDslYzrprwg7ZmV7J24XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAn7ISx6rO1JyxcclxuICAgICAgJ+qyjOyLnOusvOydtCDrk7HroZ3rkJjsl4jsirXri4jri6QuJyxcclxuICAgICAgZXhwZWN0LmFueXRoaW5nKClcclxuICAgICk7XHJcbiAgfSk7XHJcblxyXG50ZXN0KCdzaG91bGQgbGlrZSBhIHBvc3QnLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyQ29tZm9ydFNjcmVlbigpO1xyXG4gIFxyXG4gIC8vIOuhnOuUqeydtCDsmYTro4zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjb21mb3J0LXNjcmVlbi1zY3JvbGx2aWV3JykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuICBcclxuICAvLyDssqsg67KI7Ke4IOqyjOyLnOusvOydmCDsoovslYTsmpQg67KE7Yq8IOywvuq4sFxyXG4gIGNvbnN0IGxpa2VCdXR0b24gPSBnZXRCeVRlc3RJZCgnbGlrZS1idXR0b24tMScpO1xyXG4gIFxyXG4gIC8vIOyii+yVhOyalCDrsoTtirwg7YG066atXHJcbiAgZmlyZUV2ZW50LnByZXNzKGxpa2VCdXR0b24pO1xyXG4gIFxyXG4gIC8vIGxpa2VQb3N0IEFQSeqwgCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QocG9zdFNlcnZpY2UubGlrZVBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIOqyjOyLnOusvCDrqqnroZ3snbQg7IOI66Gc6rOg7LmoIOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLmdldFBvc3RzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbn0pO1xyXG4gIC8vIOyii+yVhOyalCDst6jshowo7Yag6riAKSDthYzsiqTtirhcclxudGVzdCgnc2hvdWxkIHRvZ2dsZSBsaWtlIHN0YXR1cyBmb3IgYSBwb3N0JywgYXN5bmMgKCkgPT4ge1xyXG4gIC8vIHBvc3RTZXJ2aWNlLmxpa2VQb3N0IOydkeuLteydhCDrkZAg67KI7Ke4IO2YuOy2nOyXkCDrp57qsowg7ISk7KCVXHJcbiAgKHBvc3RTZXJ2aWNlLmxpa2VQb3N0IGFzIGplc3QuTW9jaylcclxuICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoeyBkYXRhOiB7IG1lc3NhZ2U6ICdsaWtlZCcgfSB9KVxyXG4gICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7IGRhdGE6IHsgbWVzc2FnZTogJ3VubGlrZWQnIH0gfSk7XHJcbiAgXHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg7KKL7JWE7JqUIOuyhO2KvCDssL7quLBcclxuICBjb25zdCBsaWtlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xpa2UtYnV0dG9uLTEnKTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq8IO2BtOumrSAo7KKL7JWE7JqUKVxyXG4gIGZpcmVFdmVudC5wcmVzcyhsaWtlQnV0dG9uKTtcclxuICBcclxuICAvLyBBUEnqsIAg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHBvc3RTZXJ2aWNlLmxpa2VQb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICB9KTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq87J2EIOuLpOyLnCDtgbTrpq0gKOyii+yVhOyalCDst6jshowpXHJcbiAgZmlyZUV2ZW50LnByZXNzKGxpa2VCdXR0b24pO1xyXG4gIFxyXG4gIC8vIEFQSeqwgCDrkZAg67KIIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChwb3N0U2VydmljZS5saWtlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIOqyjOyLnOusvCDrqqnroZ3snbQg7IOI66Gc6rOg7LmoIOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLmdldFBvc3RzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMyk7IC8vIOy0iOq4sCDroZzrk5wgKyDrkZAg67KI7J2YIOyii+yVhOyalCDthqDquIAg7ZuEIOyDiOuhnOqzoOy5qFxyXG59KTtcclxuXHJcbi8vIOuplOyLnOyngCDrqqjri6zsl5DshJwg7J2166qFIOyytO2BrOuwleyKpCDthqDquIAg7YWM7Iqk7Yq4XHJcbnRlc3QoJ3Nob3VsZCB0b2dnbGUgYW5vbnltb3VzIGNoZWNrYm94IGluIG1lc3NhZ2UgbW9kYWwnLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg64yT6riAIOuyhO2KvCDtgbTrpq1cclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtYnV0dG9uLTEnKSk7XHJcbiAgXHJcbiAgLy8g66qo64usIOuCtOydmCDsnbXrqoUg7LK07YGs67CV7IqkIOywvuq4sFxyXG4gIGNvbnN0IGNoZWNrYm94ID0gZ2V0QnlUZXN0SWQoJ2Fub255bW91cy1jaGVja2JveCcpO1xyXG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IGNoZWNrYm94LnByb3BzLmNoaWxkcmVuICE9PSBudWxsOyAvLyDstIjquLAg7IOB7YOcIOyggOyepVxyXG4gIFxyXG4gIC8vIOyytO2BrOuwleyKpCDtgbTrpq1cclxuICBmaXJlRXZlbnQucHJlc3MoY2hlY2tib3gpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDsnoXroKVcclxuICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgnY29tbWVudC1pbnB1dCcpLCAn7J2R7JuQIOuplOyLnOyngOyeheuLiOuLpC4nKTtcclxuICBcclxuICAvLyDrjJPquIAg7KCc7LacXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtY29tbWVudC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8gQVBJ6rCAIGlzX2Fub255bW91czogIWluaXRpYWxTdGF0ZeuhnCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLnNlbmRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgMSwgLy8gcG9zdF9pZFxyXG4gICAgICB7XHJcbiAgICAgICAgbWVzc2FnZTogJ+ydkeybkCDrqZTsi5zsp4DsnoXri4jri6QuJyxcclxuICAgICAgICBpc19hbm9ueW1vdXM6ICFpbml0aWFsU3RhdGVcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7XHJcblxyXG4vLyDqsozsi5zrrLzqs7wg66mU7Iuc7KeAIOuqqOuLrCDrj5nsi5zsl5Ag7Je06riwL+uLq+q4sCDthYzsiqTtirhcclxudGVzdCgnc2hvdWxkIGhhbmRsZSBtdWx0aXBsZSBtb2RhbHMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHsgZ2V0QnlUZXN0SWQsIGdldEJ5VGV4dCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6wg7Je06riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCduZXctcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6zsnbQg7Je066C464qU7KeAIO2ZleyduFxyXG4gIGV4cGVjdChnZXRCeVRleHQoJ+qzoOuvvCDrgpjriITquLAnKSkudG9CZVRydXRoeSgpO1xyXG4gIFxyXG4gIC8vIOuqqOuLrCDri6vquLBcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NhbmNlbC1wb3N0LWJ1dHRvbicpKTtcclxuICBcclxuICAvLyDrqqjri6zsnbQg64ur7ZiU64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqs6Drr7wg64KY64iE6riwJykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g64yT6riAIOuqqOuLrCDsl7TquLBcclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtYnV0dG9uLTEnKSk7XHJcbiAgXHJcbiAgLy8g64yT6riAIOuqqOuLrOydtCDsl7TroLjripTsp4Ag7ZmV7J24XHJcbiAgZXhwZWN0KGdldEJ5VGV4dCgn7J2R7JuQIOuplOyLnOyngCDrs7TrgrTquLAnKSkudG9CZVRydXRoeSgpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDrqqjri6wg64ur6riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdjYW5jZWwtbWVzc2FnZS1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g64yT6riAIOuqqOuLrOydtCDri6vtmJTripTsp4Ag7ZmV7J24XHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJ+ydkeybkCDrqZTsi5zsp4Ag67O064K06riwJykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbi8vIOyii+yVhOyalCDthqDquIAg7YWM7Iqk7Yq4XHJcbnRlc3QoJ3Nob3VsZCB0b2dnbGUgbGlrZSBzdGF0dXMgd2hlbiBwcmVzc2luZyBsaWtlIGJ1dHRvbiBtdWx0aXBsZSB0aW1lcycsIGFzeW5jICgpID0+IHtcclxuICAvLyBwb3N0U2VydmljZS5saWtlUG9zdCDsnZHri7Ug7ISk7KCVXHJcbiAgKHBvc3RTZXJ2aWNlLmxpa2VQb3N0IGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiB7IG1lc3NhZ2U6ICdzdWNjZXNzJyB9IH0pO1xyXG4gIFxyXG4gIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg7KKL7JWE7JqUIOuyhO2KvCDssL7quLBcclxuICBjb25zdCBsaWtlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xpa2UtYnV0dG9uLTEnKTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq8IO2BtOumrSAo7KKL7JWE7JqUKVxyXG4gIGZpcmVFdmVudC5wcmVzcyhsaWtlQnV0dG9uKTtcclxuICBcclxuICAvLyBBUEnqsIAg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHBvc3RTZXJ2aWNlLmxpa2VQb3N0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgxKTtcclxuICB9KTtcclxuICBcclxuICAvLyDsoovslYTsmpQg67KE7Yq87J2EIOuLpOyLnCDtgbTrpq0gKOyii+yVhOyalCDst6jshowpXHJcbiAgZmlyZUV2ZW50LnByZXNzKGxpa2VCdXR0b24pO1xyXG4gIFxyXG4gIC8vIEFQSeqwgCDrkZAg67KIIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChwb3N0U2VydmljZS5saWtlUG9zdCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8vIOuplOyLnOyngCDrqqjri6zsl5DshJwg7J2166qFIOyytO2BrOuwleyKpCDthqDquIAg7YWM7Iqk7Yq4XHJcbnRlc3QoJ3Nob3VsZCB0b2dnbGUgYW5vbnltb3VzIGNoZWNrYm94IGluIG1lc3NhZ2UgbW9kYWwnLCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsozsi5zrrLzsnZgg64yT6riAIOuyhO2KvCDtgbTrpq1cclxuICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NvbW1lbnQtYnV0dG9uLTEnKSk7XHJcbiAgXHJcbiAgLy8g66qo64usIOuCtOydmCDsnbXrqoUg7LK07YGs67CV7IqkIOywvuq4sFxyXG4gIGNvbnN0IGNoZWNrYm94ID0gZ2V0QnlUZXN0SWQoJ2Fub255bW91cy1jaGVja2JveCcpO1xyXG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IGNoZWNrYm94LnByb3BzLmNoaWxkcmVuICE9PSBudWxsOyAvLyDstIjquLAg7IOB7YOcIOyggOyepVxyXG4gIFxyXG4gIC8vIOyytO2BrOuwleyKpCDtgbTrpq1cclxuICBmaXJlRXZlbnQucHJlc3MoY2hlY2tib3gpO1xyXG4gIFxyXG4gIC8vIOuMk+q4gCDsnoXroKVcclxuICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgnY29tbWVudC1pbnB1dCcpLCAn7J2R7JuQIOuplOyLnOyngOyeheuLiOuLpC4nKTtcclxuICBcclxuICAvLyDrjJPquIAg7KCc7LacXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtY29tbWVudC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8gQVBJ6rCAIGlzX2Fub255bW91czogIWluaXRpYWxTdGF0ZeuhnCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QoY29tZm9ydFdhbGxTZXJ2aWNlLnNlbmRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgMSwgLy8gcG9zdF9pZFxyXG4gICAgICB7XHJcbiAgICAgICAgbWVzc2FnZTogJ+ydkeybkCDrqZTsi5zsp4DsnoXri4jri6QuJyxcclxuICAgICAgICBpc19hbm9ueW1vdXM6ICFpbml0aWFsU3RhdGVcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7XHJcblxyXG4vLyBBUEkg7Jik66WYIOyLnCDtj7wg7IOB7YOcIOycoOyngCDthYzsiqTtirhcclxudGVzdCgnc2hvdWxkIHByZXNlcnZlIGZvcm0gaW5wdXQgd2hlbiBBUEkgZXJyb3Igb2NjdXJzJywgYXN5bmMgKCkgPT4ge1xyXG4gIC8vIEFQSSDsmKTrpZgg7Iuc666s66CI7J207IWYXHJcbiAgKGNvbWZvcnRXYWxsU2VydmljZS5jcmVhdGVQb3N0IGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKHtcclxuICAgIHJlc3BvbnNlOiB7IGRhdGE6IHsgbWVzc2FnZTogJ+yEnOuyhCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicgfSB9XHJcbiAgfSk7XHJcbiAgXHJcbiAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QnlUZXh0IH0gPSByZW5kZXJDb21mb3J0U2NyZWVuKCk7XHJcbiAgXHJcbiAgLy8g66Gc65Sp7J20IOyZhOujjOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvbWZvcnQtc2NyZWVuLXNjcm9sbHZpZXcnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIC8vIOyDiCDqsozsi5zrrLwg66qo64usIOyXtOq4sFxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnbmV3LXBvc3QtYnV0dG9uJykpO1xyXG4gIFxyXG4gIC8vIO2PvCDsnoXroKVcclxuICBjb25zdCB0ZXN0VGl0bGUgPSAn7YWM7Iqk7Yq4IOygnOuqqSc7XHJcbiAgY29uc3QgdGVzdENvbnRlbnQgPSAn7YWM7Iqk7Yq4IOuCtOyaqeyeheuLiOuLpC4nO1xyXG4gIFxyXG4gIGZpcmVFdmVudC5jaGFuZ2VUZXh0KGdldEJ5VGVzdElkKCdwb3N0LXRpdGxlLWlucHV0JyksIHRlc3RUaXRsZSk7XHJcbiAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZ2V0QnlUZXN0SWQoJ3Bvc3QtY29udGVudC1pbnB1dCcpLCB0ZXN0Q29udGVudCk7XHJcbiAgXHJcbiAgLy8g7Y+8IOygnOy2nFxyXG4gIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnc3VibWl0LXBvc3QtYnV0dG9uJykpO1xyXG4gIFxyXG4gIC8vIOyYpOulmCDrsJzsg50g7ZuE7JeQ64+EIO2PvCDsnoXroKXsnbQg7Jyg7KeA65CY64qU7KeAIO2ZleyduFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgn7Jik66WYJywgJ+yEnOuyhCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicpO1xyXG4gICAgXHJcbiAgICAvLyDsoJzrqqnqs7wg64K07Jqp7J20IOycoOyngOuQmOyWtOyVvCDtlahcclxuICAgIGNvbnN0IHRpdGxlSW5wdXQgPSBnZXRCeVRlc3RJZCgncG9zdC10aXRsZS1pbnB1dCcpO1xyXG4gICAgY29uc3QgY29udGVudElucHV0ID0gZ2V0QnlUZXN0SWQoJ3Bvc3QtY29udGVudC1pbnB1dCcpO1xyXG4gICAgXHJcbiAgICBleHBlY3QodGl0bGVJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSh0ZXN0VGl0bGUpO1xyXG4gICAgZXhwZWN0KGNvbnRlbnRJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSh0ZXN0Q29udGVudCk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbi8vIEFQSSDsmKTrpZgg7IucIO2PvCDsg4Htg5wg7Jyg7KeAIO2FjOyKpO2KuFxyXG50ZXN0KCdzaG91bGQgcHJlc2VydmUgZm9ybSBpbnB1dCB3aGVuIEFQSSBlcnJvciBvY2N1cnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgLy8gQVBJIOyYpOulmCDsi5zrrqzroIjsnbTshZhcclxuICAoY29tZm9ydFdhbGxTZXJ2aWNlLmNyZWF0ZVBvc3QgYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgcmVzcG9uc2U6IHsgZGF0YTogeyBtZXNzYWdlOiAn7ISc67KEIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9IH1cclxuICB9KTtcclxuICBcclxuICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlckNvbWZvcnRTY3JlZW4oKTtcclxuICBcclxuICAvLyDroZzrlKnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDrjIDquLBcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY29tZm9ydC1zY3JlZW4tc2Nyb2xsdmlldycpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgLy8g7IOIIOqyjOyLnOusvCDrqqjri6wg7Je06riwXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCduZXctcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g7Y+8IOyeheugpVxyXG4gIGNvbnN0IHRlc3RUaXRsZSA9ICfthYzsiqTtirgg7KCc66qpJztcclxuICBjb25zdCB0ZXN0Q29udGVudCA9ICfthYzsiqTtirgg64K07Jqp7J6F64uI64ukLic7XHJcbiAgXHJcbiAgZmlyZUV2ZW50LmNoYW5nZVRleHQoZ2V0QnlUZXN0SWQoJ3Bvc3QtdGl0bGUtaW5wdXQnKSwgdGVzdFRpdGxlKTtcclxuICBmaXJlRXZlbnQuY2hhbmdlVGV4dChnZXRCeVRlc3RJZCgncG9zdC1jb250ZW50LWlucHV0JyksIHRlc3RDb250ZW50KTtcclxuICBcclxuICAvLyDtj7wg7KCc7LacXHJcbiAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzdWJtaXQtcG9zdC1idXR0b24nKSk7XHJcbiAgXHJcbiAgLy8g7Jik66WYIOuwnOyDnSDtm4Tsl5Drj4Qg7Y+8IOyeheugpeydtCDsnKDsp4DrkJjripTsp4Ag7ZmV7J24XHJcbiAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfsmKTrpZgnLCAn7ISc67KEIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyk7XHJcbiAgICBcclxuICAgIC8vIOygnOuqqeqzvCDrgrTsmqnsnbQg7Jyg7KeA65CY7Ja07JW8IO2VqFxyXG4gICAgY29uc3QgdGl0bGVJbnB1dCA9IGdldEJ5VGVzdElkKCdwb3N0LXRpdGxlLWlucHV0Jyk7XHJcbiAgICBjb25zdCBjb250ZW50SW5wdXQgPSBnZXRCeVRlc3RJZCgncG9zdC1jb250ZW50LWlucHV0Jyk7XHJcbiAgICBcclxuICAgIGV4cGVjdCh0aXRsZUlucHV0LnByb3BzLnZhbHVlKS50b0JlKHRlc3RUaXRsZSk7XHJcbiAgICBleHBlY3QoY29udGVudElucHV0LnByb3BzLnZhbHVlKS50b0JlKHRlc3RDb250ZW50KTtcclxuICB9KTtcclxufSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBV0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBTztJQUMzQ0MsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQ25CRyxVQUFVLEVBQUVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDckJJLFdBQVcsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUN0QkssTUFBTSxFQUFFTixJQUFJLENBQUND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QixJQUFJLENBQUMsa0RBQWtELE1BQUFwQyxrQkFBQSxDQUFBcUMsT0FBQSxFQUFFLGFBQVk7SUFFbEVWLDJCQUFrQixDQUFDcEMsVUFBVSxDQUFld0UscUJBQXFCLENBQUM7TUFDakVDLFFBQVEsRUFBRTtRQUFFdEUsSUFBSSxFQUFFO1VBQUVDLE9BQU8sRUFBRTtRQUFpQjtNQUFFO0lBQ2xELENBQUMsQ0FBQztJQUVGLElBQUE2RSxxQkFBQSxHQUFtQ2pELG1CQUFtQixDQUFDLENBQUM7TUFBaERaLFdBQVcsR0FBQTZELHFCQUFBLENBQVg3RCxXQUFXO01BQUVLLFNBQVMsR0FBQXdELHFCQUFBLENBQVR4RCxTQUFTO0lBRzlCLE1BQU0sSUFBQXdCLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkYsTUFBTSxDQUFDM0IsV0FBVyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQzRCLFVBQVUsQ0FBQyxDQUFDO0lBQy9ELENBQUMsQ0FBQztJQUdGUyxzQkFBUyxDQUFDQyxLQUFLLENBQUN0QyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUcvQyxJQUFNdUQsU0FBUyxHQUFHLFFBQVE7SUFDMUIsSUFBTUMsV0FBVyxHQUFHLFlBQVk7SUFFaENuQixzQkFBUyxDQUFDVyxVQUFVLENBQUNoRCxXQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBRXVELFNBQVMsQ0FBQztJQUNoRWxCLHNCQUFTLENBQUNXLFVBQVUsQ0FBQ2hELFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFd0QsV0FBVyxDQUFDO0lBR3BFbkIsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDdEMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFHbEQsTUFBTSxJQUFBNkIsb0JBQU8sRUFBQyxZQUFNO01BQ2xCRixNQUFNLENBQUNNLG1CQUFLLENBQUNoRCxLQUFLLENBQUMsQ0FBQytDLG9CQUFvQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQztNQUdoRSxJQUFNeUIsVUFBVSxHQUFHekQsV0FBVyxDQUFDLGtCQUFrQixDQUFDO01BQ2xELElBQU0wRCxZQUFZLEdBQUcxRCxXQUFXLENBQUMsb0JBQW9CLENBQUM7TUFFdEQyQixNQUFNLENBQUM4QixVQUFVLENBQUN0RCxLQUFLLENBQUN3RCxLQUFLLENBQUMsQ0FBQ0MsSUFBSSxDQUFDTCxTQUFTLENBQUM7TUFDOUM1QixNQUFNLENBQUMrQixZQUFZLENBQUN2RCxLQUFLLENBQUN3RCxLQUFLLENBQUMsQ0FBQ0MsSUFBSSxDQUFDSixXQUFXLENBQUM7SUFDcEQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxFQUFDO0FBQ0YsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119