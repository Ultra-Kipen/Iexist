{"version":3,"names":["_getJestObj","mock","View","ScrollView","StyleSheet","create","jest","fn","styles","Alert","alert","TouchableOpacity","Text","Platform","OS","select","obj","android","default","useTheme","colors","primary","Card","TextInput","Button","List","Section","Item","Icon","Title","Paragraph","FAB","ActivityIndicator","Chip","Modal","likePost","Promise","resolve","data","message","getPosts","status","post_id","title","content","user_id","is_anonymous","like_count","comment_count","created_at","getBestPosts","createPost","sendMessage","useNavigation","mockNavigation","useRoute","params","useIsFocused","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_ComfortScreen","_jsxRuntime","_require","spyOn","console","mockImplementation","navigate","goBack","setOptions","describe","comfortWallService","mockHandlePost","mockSendMessage","mockHandleLike","beforeEach","clearAllMocks","_ref","isAnonymous","error","_error$response","response","_x","_x2","_x3","apply","arguments","_ref2","postId","_error$response2","_x4","_x5","_x6","_ref3","_x7","test","_render","render","jsx","navigation","UNSAFE_getByType","expect","toBeTruthy","toBe","result","Array","isArray","length","toBeGreaterThan","post","toHaveProperty","postData","toHaveBeenCalledWith","messageData","not","toHaveBeenCalled","mockRejectedValueOnce","initialFormState","mockHandlePostWithState","_ref15","formState","Object","assign","_error$response3","_x8","_x9","_x10","_x11","resultState","toEqual"],"sources":["ComfortScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/__tests__/unit/screens/ComfortScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport ComfortScreen from '../../../src/screens/ComfortScreen';\r\n\r\n// 경고 억제\r\njest.spyOn(console, 'error').mockImplementation(() => {});\r\njest.spyOn(console, 'warn').mockImplementation(() => {});\r\n\r\n// React Native 모킹 - 단순화된 방식 사용\r\njest.mock('react-native', () => {\r\n  return {\r\n    View: 'View',\r\n    ScrollView: 'ScrollView',\r\n    StyleSheet: {\r\n      create: jest.fn(styles => styles),\r\n    },\r\n    Alert: {\r\n      alert: jest.fn(),\r\n    },\r\n    TouchableOpacity: 'TouchableOpacity',\r\n    Text: 'Text',\r\n    Platform: {\r\n      OS: 'android',\r\n      select: obj => obj.android || obj.default,\r\n    },\r\n  };\r\n});\r\n\r\n// React Native Paper 모킹 - 이름 기반 모킹\r\njest.mock('react-native-paper', () => {\r\n  return {\r\n    useTheme: () => ({\r\n      colors: {\r\n        primary: '#6200ee',\r\n      },\r\n    }),\r\n    Card: 'Card',\r\n    'Card.Content': 'Card.Content',\r\n    'Card.Actions': 'Card.Actions',\r\n    TextInput: 'TextInput',\r\n    Button: 'Button',\r\n    List: {\r\n      Section: 'List.Section',\r\n      Item: 'List.Item',\r\n      Icon: 'List.Icon',\r\n    },\r\n    Title: 'Title',\r\n    Paragraph: 'Paragraph',\r\n    FAB: 'FAB',\r\n    ActivityIndicator: 'ActivityIndicator',\r\n    Chip: 'Chip',\r\n    Modal: 'Modal',\r\n  };\r\n});\r\n\r\n// postService 모킹\r\njest.mock('../../../src/services/api/postService', () => {\r\n  return {\r\n    likePost: jest.fn(() => Promise.resolve({\r\n      data: { message: 'success' }\r\n    })),\r\n  };\r\n});\r\n\r\n// comfortWallService 모킹\r\njest.mock('../../../src/services/api/comfortWallService', () => {\r\n  return {\r\n    getPosts: jest.fn(() => Promise.resolve({\r\n      data: {\r\n        status: 'success',\r\n        data: [\r\n          {\r\n            post_id: 1,\r\n            title: '힘든 하루',\r\n            content: '오늘은 정말 힘든 하루였어요.',\r\n            user_id: 1,\r\n            is_anonymous: true,\r\n            like_count: 8,\r\n            comment_count: 5,\r\n            created_at: '2024-04-06T12:00:00.000Z',\r\n          }\r\n        ]\r\n      }\r\n    })),\r\n    getBestPosts: jest.fn(() => Promise.resolve({\r\n      data: {\r\n        status: 'success',\r\n        data: [\r\n          {\r\n            post_id: 3,\r\n            title: '여러분 덕분에 이겨냈어요',\r\n            content: '지난주에 올린 고민, 여러분의 댓글 덕분에 용기를 얻었어요.',\r\n            like_count: 25,\r\n            comment_count: 12,\r\n          }\r\n        ]\r\n      }\r\n    })),\r\n    createPost: jest.fn(() => Promise.resolve({ \r\n      data: { \r\n        status: 'success', \r\n        message: '게시물이 성공적으로 등록되었습니다.' \r\n      } \r\n    })),\r\n    sendMessage: jest.fn(() => Promise.resolve({ \r\n      data: { \r\n        status: 'success', \r\n        message: '메시지가 성공적으로 전송되었습니다.' \r\n      } \r\n    })),\r\n    likePost: jest.fn(() => Promise.resolve({\r\n      data: { message: 'success' }\r\n    })),\r\n  };\r\n});\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n  goBack: jest.fn(),\r\n  setOptions: jest.fn(),\r\n};\r\n\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => mockNavigation,\r\n  useRoute: () => ({ params: {} }),\r\n  useIsFocused: () => true,\r\n}));\r\n\r\ndescribe('ComfortScreen 단위 테스트', () => {\r\n  const comfortWallService = require('../../../src/services/api/comfortWallService');\r\n  let mockHandlePost;\r\n  let mockSendMessage;\r\n  let mockHandleLike;\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 핸들러 함수 모의 구현\r\n    mockHandlePost = async (title, content, isAnonymous) => {\r\n      if (!title || !content) {\r\n        require('react-native').Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        await comfortWallService.createPost({\r\n          title,\r\n          content,\r\n          is_anonymous: isAnonymous\r\n        });\r\n        \r\n        require('react-native').Alert.alert('성공', '게시물이 등록되었습니다.');\r\n        return true;\r\n      } catch (error) {\r\n        require('react-native').Alert.alert(\r\n          '오류',\r\n          error.response?.data?.message || '게시물 등록 중 오류가 발생했습니다.'\r\n        );\r\n        return false;\r\n      }\r\n    };\r\n    \r\n    mockSendMessage = async (postId, message, isAnonymous) => {\r\n      if (!message) {\r\n        require('react-native').Alert.alert('알림', '메시지 내용을 입력해주세요.');\r\n        return false;\r\n      }\r\n\r\n      try {\r\n        await comfortWallService.sendMessage(postId, {\r\n          message,\r\n          is_anonymous: isAnonymous\r\n        });\r\n        \r\n        require('react-native').Alert.alert('성공', '메시지가 전송되었습니다.');\r\n        return true;\r\n      } catch (error) {\r\n        require('react-native').Alert.alert(\r\n          '오류',\r\n          error.response?.data?.message || '메시지 전송 중 오류가 발생했습니다.'\r\n        );\r\n        return false;\r\n      }\r\n    };\r\n    \r\n    mockHandleLike = async (postId) => {\r\n      try {\r\n        await comfortWallService.likePost(postId);\r\n        await comfortWallService.getPosts(); // 게시물 새로고침\r\n        return true;\r\n      } catch (error) {\r\n        require('react-native').Alert.alert('오류', '좋아요 처리 중 오류가 발생했습니다.');\r\n        return false;\r\n      }\r\n    };\r\n  });\r\n\r\n  test('화면 렌더링 확인', () => {\r\n    const { UNSAFE_getByType } = render(<ComfortScreen navigation={mockNavigation} />);\r\n    expect(UNSAFE_getByType('ActivityIndicator')).toBeTruthy();\r\n  });\r\n\r\n  test('API 서비스 함수 호출 확인', () => {\r\n    // getPosts 함수 확인\r\n    expect(typeof comfortWallService.getPosts).toBe('function');\r\n    \r\n    // getBestPosts 함수 확인\r\n    expect(typeof comfortWallService.getBestPosts).toBe('function');\r\n    \r\n    // createPost 함수 확인\r\n    expect(typeof comfortWallService.createPost).toBe('function');\r\n    \r\n    // sendMessage 함수 확인\r\n    expect(typeof comfortWallService.sendMessage).toBe('function');\r\n  });\r\n\r\n  test('getPosts API가 올바른 데이터 구조 반환', async () => {\r\n    const result = await comfortWallService.getPosts();\r\n    expect(result.data.status).toBe('success');\r\n    expect(Array.isArray(result.data.data)).toBe(true);\r\n    expect(result.data.data.length).toBeGreaterThan(0);\r\n    \r\n    const post = result.data.data[0];\r\n    expect(post).toHaveProperty('post_id');\r\n    expect(post).toHaveProperty('title');\r\n    expect(post).toHaveProperty('content');\r\n  });\r\n\r\n  test('getBestPosts API가 올바른 데이터 구조 반환', async () => {\r\n    const result = await comfortWallService.getBestPosts();\r\n    expect(result.data.status).toBe('success');\r\n    expect(Array.isArray(result.data.data)).toBe(true);\r\n    \r\n    if (result.data.data.length > 0) {\r\n      const post = result.data.data[0];\r\n      expect(post).toHaveProperty('post_id');\r\n      expect(post).toHaveProperty('title');\r\n      expect(post).toHaveProperty('content');\r\n    }\r\n  });\r\n\r\n  test('createPost 함수 호출 테스트', async () => {\r\n    const postData = {\r\n      title: '테스트 제목',\r\n      content: '테스트 내용',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.createPost(postData);\r\n    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);\r\n  });\r\n\r\n  test('sendMessage 함수 호출 테스트', async () => {\r\n    const postId = 1;\r\n    const messageData = {\r\n      message: '응원 메시지',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.sendMessage(postId, messageData);\r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);\r\n  });\r\n\r\n  // 1. 게시물 작성 시 유효성 검사 테스트\r\n  test('handlePost 함수는 빈 필드를 검증해야 함', async () => {\r\n    // 빈 필드로 호출\r\n    await mockHandlePost('', '', true);\r\n    \r\n    // Alert가 올바른 메시지로 호출됐는지 확인\r\n    const Alert = require('react-native').Alert;\r\n    expect(Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');\r\n    \r\n    // API 호출이 발생하지 않았는지 확인\r\n    expect(comfortWallService.createPost).not.toHaveBeenCalled();\r\n  });\r\n\r\n  // 2. 유효한 데이터로 게시물 생성 테스트\r\n  test('handlePost 함수는 유효한 데이터로 API를 호출해야 함', async () => {\r\n    // 유효한 데이터로 호출\r\n    await mockHandlePost('테스트 제목', '테스트 내용', true);\r\n    \r\n    // API가 올바른 데이터로 호출됐는지 확인\r\n    expect(comfortWallService.createPost).toHaveBeenCalledWith({\r\n      title: '테스트 제목',\r\n      content: '테스트 내용',\r\n      is_anonymous: true\r\n    });\r\n    \r\n    // 성공 알림이 표시됐는지 확인\r\n    const Alert = require('react-native').Alert;\r\n    expect(Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.');\r\n  });\r\n\r\n  // 3. API 오류 처리 테스트\r\n  test('handlePost 함수는 API 오류를 처리해야 함', async () => {\r\n    // API 오류 시뮬레이션\r\n    (comfortWallService.createPost).mockRejectedValueOnce({\r\n      response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n    });\r\n    \r\n    // 함수 호출\r\n    await mockHandlePost('테스트 제목', '테스트 내용', true);\r\n    \r\n    // 오류 알림이 표시됐는지 확인\r\n    const Alert = require('react-native').Alert;\r\n    expect(Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');\r\n  });\r\n\r\n  // 4. 좋아요 기능 테스트\r\n  test('handleLike 함수는 API를 호출하고 게시물을 새로고침해야 함', async () => {\r\n    // 함수 호출\r\n    await mockHandleLike(1);\r\n    \r\n    // API가 올바른 데이터로 호출됐는지 확인\r\n    expect(comfortWallService.likePost).toHaveBeenCalledWith(1);\r\n    \r\n    // 게시물 목록이 새로고침됐는지 확인\r\n    expect(comfortWallService.getPosts).toHaveBeenCalled();\r\n  });\r\n\r\n  // 5. 메시지 전송 테스트\r\n  test('sendMessage 함수는 유효한 데이터로 API를 호출해야 함', async () => {\r\n    // 유효한 데이터로 호출\r\n    await mockSendMessage(1, '힘내세요! 응원합니다.', true);\r\n    \r\n    // API가 올바른 데이터로 호출됐는지 확인\r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(1, {\r\n      message: '힘내세요! 응원합니다.',\r\n      is_anonymous: true\r\n    });\r\n    \r\n    // 성공 알림이 표시됐는지 확인\r\n    const Alert = require('react-native').Alert;\r\n    expect(Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.');\r\n  });\r\n\r\n  // 6. 빈 메시지 검증 테스트\r\n  test('sendMessage 함수는 빈 메시지를 검증해야 함', async () => {\r\n    // 빈 메시지로 호출\r\n    await mockSendMessage(1, '', true);\r\n    \r\n    // Alert가 올바른 메시지로 호출됐는지 확인\r\n    const Alert = require('react-native').Alert;\r\n    expect(Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');\r\n    \r\n    // API 호출이 발생하지 않았는지 확인\r\n    expect(comfortWallService.sendMessage).not.toHaveBeenCalled();\r\n  });\r\n\r\n  // 7. 발생 가능한 API 오류 시 폼 입력 유지 테스트\r\n  test('API 오류 발생 시 폼 입력이 유지되어야 함', async () => {\r\n    // API 오류 시뮬레이션\r\n    (comfortWallService.createPost).mockRejectedValueOnce({\r\n      response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n    });\r\n    \r\n    // 테스트 폼 상태\r\n    const initialFormState = { title: '테스트 제목', content: '테스트 내용' };\r\n    \r\n    // 모의 handlePost 호출 - 상태 관리 기능 포함\r\n    const mockHandlePostWithState = async (title, content, isAnonymous, formState) => {\r\n      if (!title || !content) {\r\n        require('react-native').Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');\r\n        return { ...formState };\r\n      }\r\n\r\n      try {\r\n        await comfortWallService.createPost({\r\n          title,\r\n          content,\r\n          is_anonymous: isAnonymous\r\n        });\r\n        \r\n        require('react-native').Alert.alert('성공', '게시물이 등록되었습니다.');\r\n        // 성공 시 폼 초기화\r\n        return { title: '', content: '' };\r\n      } catch (error) {\r\n        require('react-native').Alert.alert(\r\n          '오류',\r\n          error.response?.data?.message || '게시물 등록 중 오류가 발생했습니다.'\r\n        );\r\n        // 오류 시 폼 상태 유지\r\n        return { ...formState };\r\n      }\r\n    };\r\n    \r\n    // 함수 호출\r\n    const resultState = await mockHandlePostWithState(\r\n      initialFormState.title,\r\n      initialFormState.content,\r\n      true,\r\n      initialFormState\r\n    );\r\n    \r\n    // 오류 발생 시 폼 상태가 유지되는지 확인\r\n    expect(resultState).toEqual(initialFormState);\r\n    \r\n    // 오류 알림이 표시됐는지 확인\r\n    const Alert = require('react-native').Alert;\r\n    expect(Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}