9f8b101d3bdc2ee0a91b639f51e94899
_getJestObj().mock("../../src/services/api/tagService", function () {
  return {
    getAllTags: jest.fn(),
    createTag: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _TagSearchInput = _interopRequireDefault(require("../../src/components/TagSearchInput"));
var _tagService = _interopRequireDefault(require("../../src/services/api/tagService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('TagSearchInput 컴포넌트', function () {
  var mockTags = [{
    tag_id: 1,
    name: '일상'
  }, {
    tag_id: 2,
    name: '감정'
  }, {
    tag_id: 3,
    name: '고민'
  }, {
    tag_id: 4,
    name: '행복'
  }, {
    tag_id: 5,
    name: '슬픔'
  }];
  var mockTagResponse = {
    data: {
      data: mockTags
    }
  };
  var mockTagSelect = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    _tagService.default.getAllTags.mockResolvedValue(mockTagResponse);
    _tagService.default.createTag.mockImplementation(function (name) {
      return Promise.resolve({
        data: {
          data: {
            tag_id: 100,
            name: name
          }
        }
      });
    });
  });
  it('컴포넌트가 마운트될 때 태그 목록을 불러와야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect
      })),
      unmount = _render.unmount;
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.getAllTags).toHaveBeenCalled();
    });
    unmount();
  }), 10000);
  it('검색어 입력 시 태그 목록이 필터링되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect,
        placeholder: "\uD0DC\uADF8 \uAC80\uC0C9"
      })),
      getByPlaceholderText = _render2.getByPlaceholderText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.getAllTags).toHaveBeenCalled();
    });
    var searchInput = getByPlaceholderText('태그 검색');
    _reactNative.fireEvent.changeText(searchInput, '행복');
  }), 10000);
  it('태그 최대 개수에 도달했을 때 메시지가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var maxTags = 3;
    var selectedTags = [{
      tag_id: 1,
      name: '태그1'
    }, {
      tag_id: 2,
      name: '태그2'
    }, {
      tag_id: 3,
      name: '태그3'
    }];
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect,
        selectedTags: selectedTags,
        maxTags: maxTags
      })),
      getByText = _render3.getByText;
    expect(getByText(`최대 ${maxTags}개의 태그까지 선택할 수 있습니다.`)).toBeTruthy();
  }));
  it('태그 클릭 시 onTagSelect가 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect,
        placeholder: "\uD0DC\uADF8 \uAC80\uC0C9"
      })),
      getByPlaceholderText = _render4.getByPlaceholderText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.getAllTags).toHaveBeenCalled();
    });
    var searchInput = getByPlaceholderText('태그 검색');
    _reactNative.fireEvent.changeText(searchInput, '행');
  }), 10000);
  it('검색 결과가 없을 때 새 태그 생성 옵션이 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _tagService.default.getAllTags.mockResolvedValue({
      data: {
        data: []
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect,
        placeholder: "\uD0DC\uADF8 \uAC80\uC0C9"
      })),
      getByPlaceholderText = _render5.getByPlaceholderText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.getAllTags).toHaveBeenCalled();
    });
    var searchInput = getByPlaceholderText('태그 검색');
    _reactNative.fireEvent.changeText(searchInput, '새태그');
  }), 10000);
  it('새 태그 생성 시 createTag API가 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockTagName = '새태그';
    _tagService.default.createTag.mockResolvedValue({
      data: {
        data: {
          tag_id: 100,
          name: mockTagName
        }
      }
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect,
        placeholder: "\uD0DC\uADF8 \uAC80\uC0C9"
      })),
      getByPlaceholderText = _render6.getByPlaceholderText,
      findByText = _render6.findByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.getAllTags).toHaveBeenCalled();
    });
    var searchInput = getByPlaceholderText('태그 검색');
    _reactNative.fireEvent.changeText(searchInput, mockTagName);
    var createTagButton = yield findByText(`"${mockTagName}" 태그 만들기`);
    _reactNative.fireEvent.press(createTagButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.createTag).toHaveBeenCalledWith(mockTagName);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockTagSelect).toHaveBeenCalledWith(expect.objectContaining({
        tag_id: 100,
        name: mockTagName
      }));
    });
  }));
  it('API 오류 발생 시 에러 메시지가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _tagService.default.getAllTags.mockRejectedValue(new Error('API 오류'));
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect
      })),
      findByText = _render7.findByText;
    var errorMessage = yield findByText('태그 목록을 불러오는데 실패했습니다.');
    expect(errorMessage).toBeTruthy();
  }), 10000);
  it('태그 선택 후 검색 입력란이 초기화되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_TagSearchInput.default, {
        onTagSelect: mockTagSelect,
        placeholder: "\uD0DC\uADF8 \uAC80\uC0C9"
      })),
      getByPlaceholderText = _render8.getByPlaceholderText;
    yield (0, _reactNative.waitFor)(function () {
      expect(_tagService.default.getAllTags).toHaveBeenCalled();
    });
    var searchInput = getByPlaceholderText('태그 검색');
    _reactNative.fireEvent.changeText(searchInput, '행복');
    mockTagSelect(mockTags[3]);
  }), 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,