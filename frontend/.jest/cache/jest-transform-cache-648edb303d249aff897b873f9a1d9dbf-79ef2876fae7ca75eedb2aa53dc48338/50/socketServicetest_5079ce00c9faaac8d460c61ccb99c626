c9aaa7fad3ddfb903eb7461ddd20e87e
_getJestObj().mock('socket.io-client', function () {
  var mockSocket = {
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn(),
    disconnect: jest.fn(),
    connected: false
  };
  return {
    io: jest.fn(function () {
      return mockSocket;
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _socketService = _interopRequireDefault(require("../../../../src/services/socketService"));
var _socket = require("socket.io-client");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var localStorageMock = function () {
  var store = {};
  return {
    getItem: jest.fn(function (key) {
      return store[key] || null;
    }),
    setItem: jest.fn(function (key, value) {
      store[key] = value;
    }),
    removeItem: jest.fn(function (key) {
      delete store[key];
    }),
    clear: jest.fn(function () {
      store = {};
    })
  };
}();
Object.defineProperty(global, 'localStorage', {
  value: localStorageMock
});
global.console.error = jest.fn();
global.console.log = jest.fn();
describe('SocketService', function () {
  var mockSocket;
  beforeEach(function () {
    jest.clearAllMocks();
    localStorageMock.clear();
    _socket.io.mockClear();
    mockSocket = (0, _socket.io)();
    mockSocket.connected = false;
  });
  describe('init()', function () {
    it.skip('토큰이 없으면 예외를 발생시킨다', (0, _asyncToGenerator2.default)(function* () {}));
    it('토큰이 있으면 소켓을 초기화한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      expect(_socket.io).toHaveBeenCalledWith(expect.any(String), expect.objectContaining({
        auth: {
          token: 'mock-token'
        }
      }));
      expect(mockSocket.on).toHaveBeenCalledWith('connect', expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith('connect_error', expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith('disconnect', expect.any(Function));
      expect(mockSocket.on).toHaveBeenCalledWith('error', expect.any(Function));
    }));
    it('이미 연결된 소켓이 있으면 새로 연결을 생성하지 않는다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      mockSocket.connected = true;
      _socket.io.mockClear();
      yield _socketService.default.init();
      expect(_socket.io).not.toHaveBeenCalled();
    }));
  });
  describe('disconnect()', function () {
    it('소켓 연결을 해제한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      _socketService.default.disconnect();
      expect(mockSocket.disconnect).toHaveBeenCalled();
    }));
  });
  describe('on()', function () {
    it('소켓이 없으면 에러를 기록한다', function () {
      var callback = jest.fn();
      _socketService.default.on('test-event', callback);
      expect(console.error).toHaveBeenCalledWith('소켓이 초기화되지 않았습니다');
    });
    it('소켓에 이벤트 리스너를 등록한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      var callback = jest.fn();
      _socketService.default.on('test-event', callback);
      expect(mockSocket.on).toHaveBeenCalledWith('test-event', callback);
    }));
  });
  describe('off()', function () {
    it('소켓이 없으면 아무 일도 일어나지 않는다', function () {
      _socketService.default['socket'] = null;
      mockSocket.off.mockClear();
      var callback = jest.fn();
      _socketService.default.off('test-event', callback);
      expect(mockSocket.off).not.toHaveBeenCalled();
    });
    it('콜백이 있으면 특정 리스너를 제거한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      var callback = jest.fn();
      _socketService.default.off('test-event', callback);
      expect(mockSocket.off).toHaveBeenCalledWith('test-event', callback);
    }));
    it('콜백이 없으면 이벤트의 모든 리스너를 제거한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      _socketService.default.off('test-event');
      expect(mockSocket.off).toHaveBeenCalledWith('test-event');
    }));
  });
  describe('emit()', function () {
    it('소켓이 연결되지 않았으면 에러를 기록한다', function () {
      _socketService.default.emit('test-event', {
        data: 'test'
      });
      expect(console.error).toHaveBeenCalledWith('소켓이 연결되지 않았습니다');
    });
    it('소켓이 연결되었으면 이벤트를 전송한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      mockSocket.connected = true;
      var data = {
        data: 'test'
      };
      _socketService.default.emit('test-event', data);
      expect(mockSocket.emit).toHaveBeenCalledWith('test-event', data);
    }));
  });
  describe('isConnected()', function () {
    it('소켓이 없으면 false를 반환한다', function () {
      expect(_socketService.default.isConnected()).toBe(false);
    });
    it('소켓이 있지만 연결되지 않았으면 false를 반환한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      mockSocket.connected = false;
      expect(_socketService.default.isConnected()).toBe(false);
    }));
    it('소켓이 연결되었으면 true를 반환한다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          callback();
        }
      });
      yield _socketService.default.init();
      mockSocket.connected = true;
      expect(_socketService.default.isConnected()).toBe(true);
    }));
  });
  describe('이벤트 핸들러', function () {
    it('connect 이벤트가 발생하면 Promise가 해결된다', (0, _asyncToGenerator2.default)(function* () {
      localStorageMock.setItem('token', 'mock-token');
      var connectHandler = null;
      mockSocket.on.mockImplementation(function (event, callback) {
        if (event === 'connect') {
          connectHandler = callback;
        }
      });
      var initPromise = _socketService.default.init();
      expect(mockSocket.on).toHaveBeenCalledWith('connect', expect.any(Function));
      expect(connectHandler).not.toBeNull();
      if (connectHandler) {
        connectHandler();
      }
      yield initPromise;
      expect(console.log).toHaveBeenCalledWith('소켓 연결됨');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,