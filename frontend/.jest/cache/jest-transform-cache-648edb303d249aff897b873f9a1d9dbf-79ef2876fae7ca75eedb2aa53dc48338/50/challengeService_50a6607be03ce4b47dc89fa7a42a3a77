726b0e4aed7376010aac3d96702d0686
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("./client"));
var challengeService = {
  createChallenge: function () {
    var _createChallenge = (0, _asyncToGenerator2.default)(function* (data) {
      return yield _client.default.post('/challenges', data);
    });
    function createChallenge(_x) {
      return _createChallenge.apply(this, arguments);
    }
    return createChallenge;
  }(),
  getChallenges: function () {
    var _getChallenges = (0, _asyncToGenerator2.default)(function* (params) {
      return yield _client.default.get('/challenges', {
        params: params
      });
    });
    function getChallenges(_x2) {
      return _getChallenges.apply(this, arguments);
    }
    return getChallenges;
  }(),
  getChallengeDetails: function () {
    var _getChallengeDetails = (0, _asyncToGenerator2.default)(function* (challengeId) {
      return yield _client.default.get(`/challenges/${challengeId}`);
    });
    function getChallengeDetails(_x3) {
      return _getChallengeDetails.apply(this, arguments);
    }
    return getChallengeDetails;
  }(),
  participateInChallenge: function () {
    var _participateInChallenge = (0, _asyncToGenerator2.default)(function* (challengeId) {
      return yield _client.default.post(`/challenges/${challengeId}/participate`);
    });
    function participateInChallenge(_x4) {
      return _participateInChallenge.apply(this, arguments);
    }
    return participateInChallenge;
  }(),
  leaveChallenge: function () {
    var _leaveChallenge = (0, _asyncToGenerator2.default)(function* (challengeId) {
      return yield _client.default.delete(`/challenges/${challengeId}/participate`);
    });
    function leaveChallenge(_x5) {
      return _leaveChallenge.apply(this, arguments);
    }
    return leaveChallenge;
  }(),
  updateChallengeProgress: function () {
    var _updateChallengeProgress = (0, _asyncToGenerator2.default)(function* (challengeId, data) {
      return yield _client.default.post(`/challenges/${challengeId}/progress`, data);
    });
    function updateChallengeProgress(_x6, _x7) {
      return _updateChallengeProgress.apply(this, arguments);
    }
    return updateChallengeProgress;
  }()
};
var _default = exports.default = challengeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJjaGFsbGVuZ2VTZXJ2aWNlIiwiY3JlYXRlQ2hhbGxlbmdlIiwiX2NyZWF0ZUNoYWxsZW5nZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJkYXRhIiwiYXBpQ2xpZW50IiwicG9zdCIsIl94IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRDaGFsbGVuZ2VzIiwiX2dldENoYWxsZW5nZXMiLCJwYXJhbXMiLCJnZXQiLCJfeDIiLCJnZXRDaGFsbGVuZ2VEZXRhaWxzIiwiX2dldENoYWxsZW5nZURldGFpbHMiLCJjaGFsbGVuZ2VJZCIsIl94MyIsInBhcnRpY2lwYXRlSW5DaGFsbGVuZ2UiLCJfcGFydGljaXBhdGVJbkNoYWxsZW5nZSIsIl94NCIsImxlYXZlQ2hhbGxlbmdlIiwiX2xlYXZlQ2hhbGxlbmdlIiwiZGVsZXRlIiwiX3g1IiwidXBkYXRlQ2hhbGxlbmdlUHJvZ3Jlc3MiLCJfdXBkYXRlQ2hhbGxlbmdlUHJvZ3Jlc3MiLCJfeDYiLCJfeDciLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJjaGFsbGVuZ2VTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9zZXJ2aWNlcy9hcGkvY2hhbGxlbmdlU2VydmljZS50c1xyXG5cclxuaW1wb3J0IGFwaUNsaWVudCBmcm9tICcuL2NsaWVudCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYWxsZW5nZUNyZWF0ZURhdGEge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgc3RhcnRfZGF0ZTogc3RyaW5nO1xyXG4gIGVuZF9kYXRlOiBzdHJpbmc7XHJcbiAgaXNfcHVibGljPzogYm9vbGVhbjtcclxuICBtYXhfcGFydGljaXBhbnRzPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYWxsZW5nZVByb2dyZXNzRGF0YSB7XHJcbiAgZW1vdGlvbl9pZDogbnVtYmVyO1xyXG4gIHByb2dyZXNzX25vdGU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IGNoYWxsZW5nZVNlcnZpY2UgPSB7XHJcbiAgY3JlYXRlQ2hhbGxlbmdlOiBhc3luYyAoZGF0YTogQ2hhbGxlbmdlQ3JlYXRlRGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGFwaUNsaWVudC5wb3N0KCcvY2hhbGxlbmdlcycsIGRhdGEpO1xyXG4gIH0sXHJcbiAgXHJcbiAgZ2V0Q2hhbGxlbmdlczogYXN5bmMgKHBhcmFtcz86IHsgXHJcbiAgICBwYWdlPzogbnVtYmVyOyBcclxuICAgIGxpbWl0PzogbnVtYmVyOyBcclxuICAgIHN0YXR1cz86ICdhY3RpdmUnIHwgJ2NvbXBsZXRlZCcgfCAndXBjb21pbmcnO1xyXG4gICAgc29ydF9ieT86ICdzdGFydF9kYXRlJyB8ICdwYXJ0aWNpcGFudF9jb3VudCcgfCAnY3JlYXRlZF9hdCc7XHJcbiAgICBvcmRlcj86ICdhc2MnIHwgJ2Rlc2MnO1xyXG4gIH0pID0+IHtcclxuICAgIHJldHVybiBhd2FpdCBhcGlDbGllbnQuZ2V0KCcvY2hhbGxlbmdlcycsIHsgcGFyYW1zIH0pO1xyXG4gIH0sXHJcbiAgXHJcbiAgZ2V0Q2hhbGxlbmdlRGV0YWlsczogYXN5bmMgKGNoYWxsZW5nZUlkOiBudW1iZXIpID0+IHtcclxuICAgIHJldHVybiBhd2FpdCBhcGlDbGllbnQuZ2V0KGAvY2hhbGxlbmdlcy8ke2NoYWxsZW5nZUlkfWApO1xyXG4gIH0sXHJcbiAgXHJcbiAgcGFydGljaXBhdGVJbkNoYWxsZW5nZTogYXN5bmMgKGNoYWxsZW5nZUlkOiBudW1iZXIpID0+IHtcclxuICAgIHJldHVybiBhd2FpdCBhcGlDbGllbnQucG9zdChgL2NoYWxsZW5nZXMvJHtjaGFsbGVuZ2VJZH0vcGFydGljaXBhdGVgKTtcclxuICB9LFxyXG4gIFxyXG4gIGxlYXZlQ2hhbGxlbmdlOiBhc3luYyAoY2hhbGxlbmdlSWQ6IG51bWJlcikgPT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGFwaUNsaWVudC5kZWxldGUoYC9jaGFsbGVuZ2VzLyR7Y2hhbGxlbmdlSWR9L3BhcnRpY2lwYXRlYCk7XHJcbiAgfSxcclxuICBcclxuICB1cGRhdGVDaGFsbGVuZ2VQcm9ncmVzczogYXN5bmMgKGNoYWxsZW5nZUlkOiBudW1iZXIsIGRhdGE6IENoYWxsZW5nZVByb2dyZXNzRGF0YSkgPT4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGFwaUNsaWVudC5wb3N0KGAvY2hhbGxlbmdlcy8ke2NoYWxsZW5nZUlkfS9wcm9ncmVzc2AsIGRhdGEpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNoYWxsZW5nZVNlcnZpY2U7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFnQkEsSUFBTUMsZ0JBQWdCLEdBQUc7RUFDdkJDLGVBQWU7SUFBQSxJQUFBQyxnQkFBQSxPQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsV0FBT0MsSUFBeUIsRUFBSztNQUNwRCxhQUFhQyxlQUFTLENBQUNDLElBQUksQ0FBQyxhQUFhLEVBQUVGLElBQUksQ0FBQztJQUNsRCxDQUFDO0lBQUEsU0FGREosZUFBZUEsQ0FBQU8sRUFBQTtNQUFBLE9BQUFOLGdCQUFBLENBQUFPLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0lBQUEsT0FBZlQsZUFBZTtFQUFBLEdBRWQ7RUFFRFUsYUFBYTtJQUFBLElBQUFDLGNBQUEsT0FBQVQsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLFdBQU9TLE1BTXJCLEVBQUs7TUFDSixhQUFhUCxlQUFTLENBQUNRLEdBQUcsQ0FBQyxhQUFhLEVBQUU7UUFBRUQsTUFBTSxFQUFOQTtNQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBQUEsU0FSREYsYUFBYUEsQ0FBQUksR0FBQTtNQUFBLE9BQUFILGNBQUEsQ0FBQUgsS0FBQSxPQUFBQyxTQUFBO0lBQUE7SUFBQSxPQUFiQyxhQUFhO0VBQUEsR0FRWjtFQUVESyxtQkFBbUI7SUFBQSxJQUFBQyxvQkFBQSxPQUFBZCxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsV0FBT2MsV0FBbUIsRUFBSztNQUNsRCxhQUFhWixlQUFTLENBQUNRLEdBQUcsQ0FBQyxlQUFlSSxXQUFXLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBQUEsU0FGREYsbUJBQW1CQSxDQUFBRyxHQUFBO01BQUEsT0FBQUYsb0JBQUEsQ0FBQVIsS0FBQSxPQUFBQyxTQUFBO0lBQUE7SUFBQSxPQUFuQk0sbUJBQW1CO0VBQUEsR0FFbEI7RUFFREksc0JBQXNCO0lBQUEsSUFBQUMsdUJBQUEsT0FBQWxCLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxXQUFPYyxXQUFtQixFQUFLO01BQ3JELGFBQWFaLGVBQVMsQ0FBQ0MsSUFBSSxDQUFDLGVBQWVXLFdBQVcsY0FBYyxDQUFDO0lBQ3ZFLENBQUM7SUFBQSxTQUZERSxzQkFBc0JBLENBQUFFLEdBQUE7TUFBQSxPQUFBRCx1QkFBQSxDQUFBWixLQUFBLE9BQUFDLFNBQUE7SUFBQTtJQUFBLE9BQXRCVSxzQkFBc0I7RUFBQSxHQUVyQjtFQUVERyxjQUFjO0lBQUEsSUFBQUMsZUFBQSxPQUFBckIsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLFdBQU9jLFdBQW1CLEVBQUs7TUFDN0MsYUFBYVosZUFBUyxDQUFDbUIsTUFBTSxDQUFDLGVBQWVQLFdBQVcsY0FBYyxDQUFDO0lBQ3pFLENBQUM7SUFBQSxTQUZESyxjQUFjQSxDQUFBRyxHQUFBO01BQUEsT0FBQUYsZUFBQSxDQUFBZixLQUFBLE9BQUFDLFNBQUE7SUFBQTtJQUFBLE9BQWRhLGNBQWM7RUFBQSxHQUViO0VBRURJLHVCQUF1QjtJQUFBLElBQUFDLHdCQUFBLE9BQUF6QixrQkFBQSxDQUFBQyxPQUFBLEVBQUUsV0FBT2MsV0FBbUIsRUFBRWIsSUFBMkIsRUFBSztNQUNuRixhQUFhQyxlQUFTLENBQUNDLElBQUksQ0FBQyxlQUFlVyxXQUFXLFdBQVcsRUFBRWIsSUFBSSxDQUFDO0lBQzFFLENBQUM7SUFBQSxTQUZEc0IsdUJBQXVCQSxDQUFBRSxHQUFBLEVBQUFDLEdBQUE7TUFBQSxPQUFBRix3QkFBQSxDQUFBbkIsS0FBQSxPQUFBQyxTQUFBO0lBQUE7SUFBQSxPQUF2QmlCLHVCQUF1QjtFQUFBO0FBR3pCLENBQUM7QUFBQyxJQUFBSSxRQUFBLEdBQUFDLE9BQUEsQ0FBQTVCLE9BQUEsR0FFYUosZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119