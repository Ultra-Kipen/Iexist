{"version":3,"names":["_getJestObj","mock","getMyPosts","jest","fn","Promise","resolve","data","posts","post_id","content","emotion_summary","like_count","comment_count","created_at","deletePost","success","MockButton","MockChip","MockPortal","MockCard","Content","Actions","MockDialog","Title","Button","Card","Chip","Dialog","Portal","SafeAreaView","useNavigation","navigate","mockNavigate","goBack","addListener","mockAddListener","_interopRequireDefault","require","_react","_reactNative","_MyPostsScreen","_jsxRuntime","_require","describe","it","expect","MyPostsScreen","toBeDefined","_render","render","jsx","default","navigation","route","getByTestId","button","fireEvent","press","toHaveBeenCalledWith"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport MyPostsScreen from '../../src/screens/MyPostsScreen';\r\n\r\n// 서비스 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn(() => Promise.resolve({\r\n    data: {\r\n      posts: [\r\n        {\r\n          post_id: 1,\r\n          content: '첫 번째 테스트 게시물입니다.',\r\n          emotion_summary: '행복',\r\n          like_count: 5,\r\n          comment_count: 2,\r\n          created_at: '2025-03-01T12:00:00Z',\r\n        }\r\n      ]\r\n    }\r\n  })),\r\n  deletePost: jest.fn(() => Promise.resolve({ data: { success: true } }))\r\n}));\r\n\r\n// 복합 컴포넌트 모킹\r\njest.mock('react-native-paper', () => {\r\n  // 각 컴포넌트를 문자열로 모킹\r\n  const MockButton = 'Button';\r\n  const MockChip = 'Chip';\r\n  const MockPortal = 'Portal';\r\n  \r\n  // Card 컴포넌트를 함수로 모킹\r\n  const MockCard = 'Card';\r\n  MockCard.Content = 'Card.Content';\r\n  MockCard.Actions = 'Card.Actions';\r\n  \r\n  // Dialog 컴포넌트를 함수로 모킹\r\n  const MockDialog = 'Dialog';\r\n  MockDialog.Title = 'Dialog.Title';\r\n  MockDialog.Content = 'Dialog.Content';\r\n  MockDialog.Actions = 'Dialog.Actions';\r\n  \r\n  return {\r\n    Button: MockButton,\r\n    Card: MockCard,\r\n    Chip: MockChip,\r\n    Dialog: MockDialog,\r\n    Portal: MockPortal\r\n  };\r\n});\r\n\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'Icon');\r\njest.mock('react-native-safe-area-context', () => ({ SafeAreaView: 'SafeAreaView' }));\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigate = jest.fn();\r\nconst mockAddListener = jest.fn(() => jest.fn());\r\n\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: mockNavigate,\r\n    goBack: jest.fn(),\r\n    addListener: mockAddListener,\r\n  }),\r\n}));\r\n\r\n// 간단한 테스트\r\ndescribe('MyPostsScreen', () => {\r\n  it('imports without crashing', () => {\r\n    expect(MyPostsScreen).toBeDefined();\r\n  });\r\n  it('navigates to create post screen when button is clicked', () => {\r\n    const { getByTestId } = render(\r\n      <MyPostsScreen \r\n        navigation={{ navigate: mockNavigate, addListener: mockAddListener }} \r\n        route={{}} \r\n      />\r\n    );\r\n    \r\n    const button = getByTestId('new-post-button');\r\n    fireEvent.press(button);\r\n    \r\n    expect(mockNavigate).toHaveBeenCalledWith('CreatePost');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}