f60f516fa56c550032b7de74ee99c506
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clear = clear;
var _errors = require("../helpers/errors");
var _hostComponentNames = require("../helpers/host-component-names");
var _pointerEvents = require("../helpers/pointer-events");
var _textInput = require("../helpers/text-input");
var _eventBuilder = require("./event-builder");
var _type = require("./type/type");
var _utils = require("./utils");
function clear(_x) {
  return _clear.apply(this, arguments);
}
function _clear() {
  _clear = (0, _asyncToGenerator2.default)(function* (element) {
    if (!(0, _hostComponentNames.isHostTextInput)(element)) {
      throw new _errors.ErrorWithStack(`clear() only supports host "TextInput" elements. Passed element has type: "${element.type}".`, clear);
    }
    if (!(0, _textInput.isEditableTextInput)(element) || !(0, _pointerEvents.isPointerEventEnabled)(element)) {
      return;
    }
    (0, _utils.dispatchEvent)(element, 'focus', _eventBuilder.EventBuilder.Common.focus());
    var textToClear = (0, _textInput.getTextInputValue)(element);
    var selectionRange = {
      start: 0,
      end: textToClear.length
    };
    (0, _utils.dispatchEvent)(element, 'selectionChange', _eventBuilder.EventBuilder.TextInput.selectionChange(selectionRange));
    var emptyText = '';
    yield (0, _type.emitTypingEvents)(element, {
      config: this.config,
      key: 'Backspace',
      text: emptyText
    });
    yield (0, _utils.wait)(this.config);
    (0, _utils.dispatchEvent)(element, 'endEditing', _eventBuilder.EventBuilder.TextInput.endEditing(emptyText));
    (0, _utils.dispatchEvent)(element, 'blur', _eventBuilder.EventBuilder.Common.blur());
  });
  return _clear.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXJyb3JzIiwicmVxdWlyZSIsIl9ob3N0Q29tcG9uZW50TmFtZXMiLCJfcG9pbnRlckV2ZW50cyIsIl90ZXh0SW5wdXQiLCJfZXZlbnRCdWlsZGVyIiwiX3R5cGUiLCJfdXRpbHMiLCJjbGVhciIsIl94IiwiX2NsZWFyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiZWxlbWVudCIsImlzSG9zdFRleHRJbnB1dCIsIkVycm9yV2l0aFN0YWNrIiwidHlwZSIsImlzRWRpdGFibGVUZXh0SW5wdXQiLCJpc1BvaW50ZXJFdmVudEVuYWJsZWQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnRCdWlsZGVyIiwiQ29tbW9uIiwiZm9jdXMiLCJ0ZXh0VG9DbGVhciIsImdldFRleHRJbnB1dFZhbHVlIiwic2VsZWN0aW9uUmFuZ2UiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsIlRleHRJbnB1dCIsInNlbGVjdGlvbkNoYW5nZSIsImVtcHR5VGV4dCIsImVtaXRUeXBpbmdFdmVudHMiLCJjb25maWciLCJrZXkiLCJ0ZXh0Iiwid2FpdCIsImVuZEVkaXRpbmciLCJibHVyIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZXItZXZlbnQvY2xlYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5pbXBvcnQgeyBFcnJvcldpdGhTdGFjayB9IGZyb20gJy4uL2hlbHBlcnMvZXJyb3JzJztcbmltcG9ydCB7IGlzSG9zdFRleHRJbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgaXNQb2ludGVyRXZlbnRFbmFibGVkIH0gZnJvbSAnLi4vaGVscGVycy9wb2ludGVyLWV2ZW50cyc7XG5pbXBvcnQgeyBnZXRUZXh0SW5wdXRWYWx1ZSwgaXNFZGl0YWJsZVRleHRJbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMvdGV4dC1pbnB1dCc7XG5pbXBvcnQgeyBFdmVudEJ1aWxkZXIgfSBmcm9tICcuL2V2ZW50LWJ1aWxkZXInO1xuaW1wb3J0IHR5cGUgeyBVc2VyRXZlbnRJbnN0YW5jZSB9IGZyb20gJy4vc2V0dXAnO1xuaW1wb3J0IHsgZW1pdFR5cGluZ0V2ZW50cyB9IGZyb20gJy4vdHlwZS90eXBlJztcbmltcG9ydCB7IGRpc3BhdGNoRXZlbnQsIHdhaXQgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsZWFyKHRoaXM6IFVzZXJFdmVudEluc3RhbmNlLCBlbGVtZW50OiBSZWFjdFRlc3RJbnN0YW5jZSk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoIWlzSG9zdFRleHRJbnB1dChlbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBFcnJvcldpdGhTdGFjayhcbiAgICAgIGBjbGVhcigpIG9ubHkgc3VwcG9ydHMgaG9zdCBcIlRleHRJbnB1dFwiIGVsZW1lbnRzLiBQYXNzZWQgZWxlbWVudCBoYXMgdHlwZTogXCIke2VsZW1lbnQudHlwZX1cIi5gLFxuICAgICAgY2xlYXIsXG4gICAgKTtcbiAgfVxuXG4gIGlmICghaXNFZGl0YWJsZVRleHRJbnB1dChlbGVtZW50KSB8fCAhaXNQb2ludGVyRXZlbnRFbmFibGVkKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gMS4gRW50ZXIgZWxlbWVudFxuICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdmb2N1cycsIEV2ZW50QnVpbGRlci5Db21tb24uZm9jdXMoKSk7XG5cbiAgLy8gMi4gU2VsZWN0IGFsbFxuICBjb25zdCB0ZXh0VG9DbGVhciA9IGdldFRleHRJbnB1dFZhbHVlKGVsZW1lbnQpO1xuICBjb25zdCBzZWxlY3Rpb25SYW5nZSA9IHtcbiAgICBzdGFydDogMCxcbiAgICBlbmQ6IHRleHRUb0NsZWFyLmxlbmd0aCxcbiAgfTtcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnc2VsZWN0aW9uQ2hhbmdlJywgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC5zZWxlY3Rpb25DaGFuZ2Uoc2VsZWN0aW9uUmFuZ2UpKTtcblxuICAvLyAzLiBQcmVzcyBiYWNrc3BhY2Ugd2l0aCBzZWxlY3RlZCB0ZXh0XG4gIGNvbnN0IGVtcHR5VGV4dCA9ICcnO1xuICBhd2FpdCBlbWl0VHlwaW5nRXZlbnRzKGVsZW1lbnQsIHtcbiAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgIGtleTogJ0JhY2tzcGFjZScsXG4gICAgdGV4dDogZW1wdHlUZXh0LFxuICB9KTtcblxuICAvLyA0LiBFeGl0IGVsZW1lbnRcbiAgYXdhaXQgd2FpdCh0aGlzLmNvbmZpZyk7XG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2VuZEVkaXRpbmcnLCBFdmVudEJ1aWxkZXIuVGV4dElucHV0LmVuZEVkaXRpbmcoZW1wdHlUZXh0KSk7XG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2JsdXInLCBFdmVudEJ1aWxkZXIuQ29tbW9uLmJsdXIoKSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGNBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLEtBQUEsR0FBQUwsT0FBQTtBQUNBLElBQUFNLE1BQUEsR0FBQU4sT0FBQTtBQUFBLFNBRXNCTyxLQUFLQSxDQUFBQyxFQUFBO0VBQUEsT0FBQUMsTUFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQTtBQUFBLFNBQUFGLE9BQUE7RUFBQUEsTUFBQSxPQUFBRyxrQkFBQSxDQUFBQyxPQUFBLEVBQXBCLFdBQThDQyxPQUEwQixFQUFpQjtJQUM5RixJQUFJLENBQUMsSUFBQWIsbUJBQUEsQ0FBQWMsZUFBZSxFQUFDRCxPQUFPLENBQUMsRUFBRTtNQUM3QixNQUFNLElBQUlmLE9BQUEsQ0FBQWlCLGNBQWMsQ0FDdEIsOEVBQThFRixPQUFPLENBQUNHLElBQUksSUFBSSxFQUM5RlYsS0FDRixDQUFDO0lBQ0g7SUFFQSxJQUFJLENBQUMsSUFBQUosVUFBQSxDQUFBZSxtQkFBbUIsRUFBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFBWixjQUFBLENBQUFpQixxQkFBcUIsRUFBQ0wsT0FBTyxDQUFDLEVBQUU7TUFDcEU7SUFDRjtJQUdBLElBQUFSLE1BQUEsQ0FBQWMsYUFBYSxFQUFDTixPQUFPLEVBQUUsT0FBTyxFQUFFVixhQUFBLENBQUFpQixZQUFZLENBQUNDLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUc1RCxJQUFNQyxXQUFXLEdBQUcsSUFBQXJCLFVBQUEsQ0FBQXNCLGlCQUFpQixFQUFDWCxPQUFPLENBQUM7SUFDOUMsSUFBTVksY0FBYyxHQUFHO01BQ3JCQyxLQUFLLEVBQUUsQ0FBQztNQUNSQyxHQUFHLEVBQUVKLFdBQVcsQ0FBQ0s7SUFDbkIsQ0FBQztJQUNELElBQUF2QixNQUFBLENBQUFjLGFBQWEsRUFBQ04sT0FBTyxFQUFFLGlCQUFpQixFQUFFVixhQUFBLENBQUFpQixZQUFZLENBQUNTLFNBQVMsQ0FBQ0MsZUFBZSxDQUFDTCxjQUFjLENBQUMsQ0FBQztJQUdqRyxJQUFNTSxTQUFTLEdBQUcsRUFBRTtJQUNwQixNQUFNLElBQUEzQixLQUFBLENBQUE0QixnQkFBZ0IsRUFBQ25CLE9BQU8sRUFBRTtNQUM5Qm9CLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU07TUFDbkJDLEdBQUcsRUFBRSxXQUFXO01BQ2hCQyxJQUFJLEVBQUVKO0lBQ1IsQ0FBQyxDQUFDO0lBR0YsTUFBTSxJQUFBMUIsTUFBQSxDQUFBK0IsSUFBSSxFQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDO0lBQ3ZCLElBQUE1QixNQUFBLENBQUFjLGFBQWEsRUFBQ04sT0FBTyxFQUFFLFlBQVksRUFBRVYsYUFBQSxDQUFBaUIsWUFBWSxDQUFDUyxTQUFTLENBQUNRLFVBQVUsQ0FBQ04sU0FBUyxDQUFDLENBQUM7SUFDbEYsSUFBQTFCLE1BQUEsQ0FBQWMsYUFBYSxFQUFDTixPQUFPLEVBQUUsTUFBTSxFQUFFVixhQUFBLENBQUFpQixZQUFZLENBQUNDLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDNUQ7RUFBQSxPQUFBOUIsTUFBQSxDQUFBQyxLQUFBLE9BQUFDLFNBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==