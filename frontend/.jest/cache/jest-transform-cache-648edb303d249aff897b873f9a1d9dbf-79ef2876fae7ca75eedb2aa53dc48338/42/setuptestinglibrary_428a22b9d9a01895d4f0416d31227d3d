d6d8ae972568cf230f762ef3e78537fd
_getJestObj().mock('react-native', function () {
  var DevMenuMock = {
    show: jest.fn(),
    debugRemotely: jest.fn()
  };
  var TurboModuleRegistryMock = {
    get: jest.fn(function () {
      return null;
    }),
    getEnforcing: jest.fn(function (name) {
      if (name === 'DevMenu') {
        return DevMenuMock;
      }
      return null;
    })
  };
  function ViewComponent(props) {
    return props.children;
  }
  function TextComponent(props) {
    return props.children;
  }
  function TouchableOpacityComponent(props) {
    return props.children;
  }
  function ImageComponent(props) {
    return null;
  }
  function ScrollViewComponent(props) {
    return props.children;
  }
  function TextInputComponent(props) {
    return null;
  }
  return {
    TurboModuleRegistry: TurboModuleRegistryMock,
    DevMenu: DevMenuMock,
    View: ViewComponent,
    Text: TextComponent,
    TouchableOpacity: TouchableOpacityComponent,
    Image: ImageComponent,
    ScrollView: ScrollViewComponent,
    TextInput: TextInputComponent,
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      }),
      hairlineWidth: 1
    },
    Animated: {
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              interpolate: jest.fn()
            };
          })
        };
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback({
              finished: true
            });
          })
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (callback) {
            return callback && callback({
              finished: true
            });
          })
        };
      }),
      View: ViewComponent,
      Text: TextComponent,
      Image: ImageComponent,
      createAnimatedComponent: jest.fn(function (comp) {
        return comp;
      })
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      }),
      Version: {
        SDK_INT: 28
      }
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Alert: {
      alert: jest.fn()
    },
    Keyboard: {
      dismiss: jest.fn(),
      addListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      })
    },
    NativeEventEmitter: jest.fn().mockImplementation(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    }),
    NativeModules: {
      DevMenu: DevMenuMock,
      NativeAnimatedHelper: {
        startAnimatingNode: jest.fn(),
        stopAnimation: jest.fn()
      },
      StatusBarManager: {
        HEIGHT: 42,
        setStyle: jest.fn(),
        setHidden: jest.fn()
      }
    },
    useWindowDimensions: jest.fn(function () {
      return {
        width: 375,
        height: 667
      };
    }),
    LayoutAnimation: {
      configureNext: jest.fn(),
      create: jest.fn(),
      Types: {},
      Properties: {}
    },
    UIManager: {
      measure: jest.fn(),
      measureInWindow: jest.fn()
    },
    PixelRatio: {
      get: jest.fn(function () {
        return 2;
      }),
      getFontScale: jest.fn(function () {
        return 1;
      }),
      getPixelSizeForLayoutSize: jest.fn(function (size) {
        return size * 2;
      }),
      roundToNearestPixel: jest.fn(function (size) {
        return size;
      })
    },
    BackHandler: {
      addEventListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      }),
      removeEventListener: jest.fn()
    },
    AppState: {
      addEventListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      }),
      removeEventListener: jest.fn(),
      currentState: 'active'
    }
  };
}, {
  virtual: true
});
require("@testing-library/jest-native/extend-expect");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
global.window = global.window || {};
global.window.PR_SHOULD_USE_CONTINUATION = true;
global.__DEV__ = true;
if (typeof global.ReactTestInstance !== 'undefined') {
  Object.defineProperty(global.ReactTestInstance.prototype, 'textContent', {
    get: function get() {
      return String(this.toString());
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,