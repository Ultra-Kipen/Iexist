67043a9aa6c92a02bb6377d2c35f6801
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _socket = require("socket.io-client");
var SocketService = (0, _createClass2.default)(function SocketService() {
  var _this = this;
  (0, _classCallCheck2.default)(this, SocketService);
  this.socket = null;
  this.connectPromise = null;
  this.resolveConnect = null;
  this.rejectConnect = null;
  this.reconnectTimer = null;
  this.reconnectAttempts = 0;
  this.maxReconnectAttempts = 5;
  this.reconnectDelay = 3000;
  this.init = (0, _asyncToGenerator2.default)(function* () {
    if (_this.socket && _this.socket.connected) {
      return Promise.resolve();
    }
    if (_this.reconnectTimer) {
      clearTimeout(_this.reconnectTimer);
      _this.reconnectTimer = null;
    }
    _this.connectPromise = new Promise(function (resolve, reject) {
      _this.resolveConnect = resolve;
      _this.rejectConnect = reject;
    });
    try {
      var token = localStorage.getItem('token');
      if (!token) {
        throw new Error('인증 토큰 없음');
      }
      var socketUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';
      _this.socket = (0, _socket.io)(socketUrl, {
        auth: {
          token: token
        },
        reconnection: true,
        reconnectionAttempts: 3,
        reconnectionDelay: 1000,
        timeout: 10000,
        transports: ['websocket', 'polling']
      });
      _this.socket.on('connect', _this.handleConnect);
      _this.socket.on('connect_error', _this.handleConnectError);
      _this.socket.on('disconnect', _this.handleDisconnect);
      _this.socket.on('error', _this.handleError);
      _this.reconnectAttempts = 0;
      return _this.connectPromise;
    } catch (error) {
      if (_this.rejectConnect) {
        _this.rejectConnect(error);
      }
      throw error;
    }
  });
  this.disconnect = function () {
    if (_this.socket) {
      _this.socket.disconnect();
      _this.socket = null;
    }
    if (_this.reconnectTimer) {
      clearTimeout(_this.reconnectTimer);
      _this.reconnectTimer = null;
    }
  };
  this.on = function (event, callback) {
    if (!_this.socket) {
      console.error('소켓이 초기화되지 않았습니다');
      return;
    }
    _this.socket.on(event, callback);
  };
  this.off = function (event, callback) {
    if (!_this.socket) return;
    if (callback) {
      _this.socket.off(event, callback);
    } else {
      _this.socket.off(event);
    }
  };
  this.emit = function (event, data) {
    if (!_this.socket || !_this.socket.connected) {
      console.error('소켓이 연결되지 않았습니다');
      return;
    }
    _this.socket.emit(event, data);
  };
  this.isConnected = function () {
    return !!_this.socket && _this.socket.connected;
  };
  this.handleConnect = function () {
    console.log('소켓 연결됨');
    if (_this.resolveConnect) {
      _this.resolveConnect();
    }
  };
  this.handleConnectError = function (error) {
    console.error('소켓 연결 오류:', error.message);
    _this.attemptReconnect();
  };
  this.handleDisconnect = function (reason) {
    console.log('소켓 연결 해제됨:', reason);
    _this.attemptReconnect();
  };
  this.handleError = function (error) {
    console.error('소켓 오류:', error.message);
    if (_this.rejectConnect) {
      _this.rejectConnect(error);
    }
  };
  this.attemptReconnect = function () {
    if (_this.reconnectAttempts >= _this.maxReconnectAttempts) {
      console.log('최대 재연결 시도 횟수 초과');
      return;
    }
    _this.reconnectAttempts++;
    console.log(`${_this.reconnectAttempts}번째 재연결 시도...`);
    _this.reconnectTimer = setTimeout(function () {
      _this.init().catch(function (error) {
        console.error('재연결 실패:', error);
      });
    }, _this.reconnectDelay);
  };
});
var socketService = new SocketService();
var _default = exports.default = socketService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,