86ba9f02affacd029625276bb9b02dd0
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      setOptions: jest.fn(),
      addListener: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    }),
    useIsFocused: jest.fn().mockReturnValue(true)
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue(null),
    getBestPosts: jest.fn().mockResolvedValue(null),
    createPost: jest.fn().mockResolvedValue(null),
    sendMessage: jest.fn().mockResolvedValue(null)
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
_getJestObj().mock("../../src/screens/ComfortScreen", function () {
  return function MockComfortScreen() {
    return {};
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = {
  alert: jest.fn()
};
global.Alert = mockAlert;
jest.spyOn(console, 'error').mockImplementation(function () {});
var createMockComfortScreen = function createMockComfortScreen() {
  var screen = {
    getByTestId: function getByTestId(id) {
      return {
        testID: id,
        props: id === 'anonymous-checkbox' ? {
          children: '익명',
          value: true
        } : {
          value: screen[`${id}_value`] || ''
        }
      };
    },
    getByText: function getByText(text) {
      return {
        text: text
      };
    },
    queryByTestId: function queryByTestId(id) {
      if (id === 'loading-indicator') return null;
      return {
        testID: id
      };
    },
    getAllByText: function getAllByText(text) {
      return [{
        text: text
      }];
    },
    queryByText: function queryByText(text) {
      if (text === '고민 나누기' && !screen.postModalVisible) return null;
      if (text === '응원 메시지 보내기' && !screen.commentModalVisible) return null;
      return {
        text: text
      };
    },
    postModalVisible: false,
    commentModalVisible: false,
    selectedPostId: null,
    post_title_input_value: '',
    post_content_input_value: '',
    comment_input_value: '',
    simulatePress: function simulatePress(id) {
      if (id === 'new-post-button') {
        screen.postModalVisible = true;
      } else if (id === 'cancel-post-button') {
        screen.postModalVisible = false;
      } else if (id === 'comment-button-1') {
        screen.commentModalVisible = true;
        screen.selectedPostId = 1;
      } else if (id === 'cancel-message-button') {
        screen.commentModalVisible = false;
      } else if (id === 'submit-post-button') {
        if (screen.postTitle && screen.postContent) {
          _comfortWallService.default.createPost({
            title: screen.postTitle,
            content: screen.postContent,
            is_anonymous: screen.isAnonymous
          }).then(function () {
            mockAlert.alert('성공', '게시물이 등록되었습니다.', [{
              text: '확인'
            }]);
          }).catch(function (error) {
            var _error$response;
            mockAlert.alert('오류', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '서버 오류가 발생했습니다.');
          });
        } else {
          mockAlert.alert('알림', '제목과 내용을 모두 입력해주세요.');
        }
      } else if (id === 'submit-comment-button') {
        if (screen.commentText) {
          _comfortWallService.default.sendMessage(screen.selectedPostId, {
            message: screen.commentText,
            is_anonymous: screen.isAnonymous
          }).then(function () {
            mockAlert.alert('성공', '메시지가 전송되었습니다.', [{
              text: '확인'
            }]);
          }).catch(function (error) {
            var _error$response2;
            mockAlert.alert('오류', ((_error$response2 = error.response) == null || (_error$response2 = _error$response2.data) == null ? void 0 : _error$response2.message) || '서버 오류가 발생했습니다.');
          });
        } else {
          mockAlert.alert('알림', '메시지 내용을 입력해주세요.');
        }
      } else if (id === 'like-button-1') {
        _postService.default.likePost(1);
      } else if (id === 'anonymous-checkbox') {
        screen.isAnonymous = !screen.isAnonymous;
      }
    },
    simulateChangeText: function simulateChangeText(id, text) {
      if (id === 'post-title-input') {
        screen.postTitle = text;
        screen.post_title_input_value = text;
      } else if (id === 'post-content-input') {
        screen.postContent = text;
        screen.post_content_input_value = text;
      } else if (id === 'comment-input') {
        screen.commentText = text;
        screen.comment_input_value = text;
      }
    },
    postTitle: '',
    postContent: '',
    commentText: '',
    isAnonymous: true
  };
  return screen;
};
var renderComfortScreen = function renderComfortScreen() {
  return createMockComfortScreen();
};
describe('ComfortScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAlert.alert.mockClear();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 1,
          title: '오늘 너무 힘들어요',
          content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
          user_id: 1,
          is_anonymous: true,
          like_count: 5,
          comment_count: 3,
          created_at: '2025-04-08T12:00:00Z'
        }, {
          post_id: 2,
          title: '대인관계가 어려워요',
          content: '새로운 사람들을 만나는 것이 두려워요...',
          user_id: 2,
          is_anonymous: true,
          like_count: 10,
          comment_count: 7,
          created_at: '2025-04-07T10:00:00Z'
        }]
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 3,
          title: '우울증을 극복한 경험',
          content: '저는 작년에 심한 우울증을 겪었지만...',
          like_count: 50,
          comment_count: 20
        }]
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
  });
  test('should render loading state initially and then main content', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    expect(screen.getByTestId('loading-indicator')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.queryByTestId('loading-indicator')).toBeNull();
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
  }));
  test('should display posts after loading', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    expect(screen.getByTestId('best-posts-title')).toBeTruthy();
    expect(screen.getByText('오늘 너무 힘들어요')).toBeTruthy();
    expect(screen.getByText('대인관계가 어려워요')).toBeTruthy();
  }));
  test('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('new-post-button');
    screen.simulateChangeText('post-title-input', '새로운 고민');
    screen.simulateChangeText('post-content-input', '이것은 테스트 고민입니다.');
    screen.simulatePress('submit-post-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: true
      });
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
  }));
  test('should not submit post with empty fields', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('new-post-button');
    screen.simulatePress('submit-post-button');
    expect(mockAlert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(_comfortWallService.default.createPost).not.toHaveBeenCalled();
  }));
  test('should open comment modal when clicking on a post', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('comment-button-1');
    expect(screen.getByText('응원 메시지 보내기')).toBeTruthy();
    var titleElements = screen.getAllByText('오늘 너무 힘들어요');
    expect(titleElements.length).toBeGreaterThan(0);
    expect(screen.getByTestId('comment-input')).toBeTruthy();
  }));
  test('should send a comment successfully', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('comment-button-1');
    screen.simulateChangeText('comment-input', '힘내세요! 응원합니다.');
    screen.simulatePress('submit-comment-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '힘내세요! 응원합니다.',
        is_anonymous: true
      });
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.', expect.anything());
  }));
  test('should not submit empty comment', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('comment-button-1');
    screen.simulatePress('submit-comment-button');
    expect(mockAlert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');
    expect(_comfortWallService.default.sendMessage).not.toHaveBeenCalled();
  }));
  test('should handle API error when loading posts', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockRejectedValue(new Error('API Error'));
    mockAlert.alert('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    expect(mockAlert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
  }));
  test('should like a post', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('like-button-1');
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
  }));
  test('should toggle like status for a post', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValueOnce({
      data: {
        message: 'liked'
      }
    }).mockResolvedValueOnce({
      data: {
        message: 'unliked'
      }
    });
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('like-button-1');
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    screen.simulatePress('like-button-1');
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('comment-button-1');
    screen.simulatePress('anonymous-checkbox');
    screen.simulateChangeText('comment-input', '응원 메시지입니다.');
    screen.simulatePress('submit-comment-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: false
      });
    });
  }));
  test('should handle multiple modals correctly', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('new-post-button');
    expect(screen.getByText('고민 나누기')).toBeTruthy();
    screen.simulatePress('cancel-post-button');
    expect(screen.queryByText('고민 나누기')).toBeNull();
    screen.simulatePress('comment-button-1');
    expect(screen.getByText('응원 메시지 보내기')).toBeTruthy();
    screen.simulatePress('cancel-message-button');
    expect(screen.queryByText('응원 메시지 보내기')).toBeNull();
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('new-post-button');
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    screen.simulateChangeText('post-title-input', testTitle);
    screen.simulateChangeText('post-content-input', testContent);
    screen.simulatePress('submit-post-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalled();
    });
    mockAlert.alert('오류', '서버 오류가 발생했습니다.');
    expect(mockAlert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    expect(screen.postTitle).toBe(testTitle);
    expect(screen.postContent).toBe(testContent);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,