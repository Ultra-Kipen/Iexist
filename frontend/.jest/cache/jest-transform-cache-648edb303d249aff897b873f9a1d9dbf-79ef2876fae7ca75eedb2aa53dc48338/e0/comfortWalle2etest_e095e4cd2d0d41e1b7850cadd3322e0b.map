{"version":3,"names":["_getJestObj","mock","useNavigation","jest","fn","mockReturnValue","navigate","setOptions","addListener","goBack","useRoute","params","useIsFocused","getPosts","getBestPosts","createPost","sendMessage","likePost","mockResolvedValue","data","message","alert","MockComfortScreen","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_reactNative2","_comfortWallService","_postService","_require","spyOn","console","mockImplementation","createMockComfortScreen","screen","getByTestId","id","testID","getByText","text","queryByTestId","getAllByText","queryByText","postModalVisible","commentModalVisible","renderComfortScreen","describe","beforeEach","clearAllMocks","comfortWallService","post_id","title","content","user_id","is_anonymous","like_count","comment_count","created_at","test","default","_renderComfortScreen","expect","toBeTruthy","waitFor","toBeNull","_renderComfortScreen2","postData","toHaveBeenCalledWith","Alert","anything","_renderComfortScreen3","fireEvent","press","not","toHaveBeenCalled","_renderComfortScreen4","titleElements","length","toBeGreaterThan","_renderComfortScreen5","changeText","_renderComfortScreen6","mockRejectedValue","Error","error","mockRestore","response","_renderComfortScreen7","_renderComfortScreen8","checkbox","initialState","props","children","_renderComfortScreen9","timeout","_renderComfortScreen10","likeButton","postService","mockResolvedValueOnce","_renderComfortScreen11","getAllByTestId","toHaveBeenCalledTimes","_renderComfortScreen12","_renderComfortScreen13","_renderComfortScreen14","_renderComfortScreen15","mockRejectedValueOnce","_renderComfortScreen16","testTitle","testContent","titleInput","contentInput","value","toBe","_renderComfortScreen17"],"sources":["comfortWall.e2e.test.ts"],"sourcesContent":["// __tests__/e2e/comfortWall.e2e.test.ts\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\nimport comfortWallService from '../../src/services/api/comfortWallService';\r\nimport postService from '../../src/services/api/postService';\r\n\r\n// console.error 모킹\r\njest.spyOn(console, 'error').mockImplementation(() => {});\r\n\r\n// Navigation 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: jest.fn().mockReturnValue({\r\n    navigate: jest.fn(),\r\n    setOptions: jest.fn(),\r\n    addListener: jest.fn(),\r\n    goBack: jest.fn(),\r\n  }),\r\n  useRoute: jest.fn().mockReturnValue({\r\n    params: {}\r\n  }),\r\n  useIsFocused: jest.fn().mockReturnValue(true),\r\n}));\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/comfortWallService', () => ({\r\n  getPosts: jest.fn(),\r\n  getBestPosts: jest.fn(),\r\n  createPost: jest.fn(),\r\n  sendMessage: jest.fn(),\r\n}));\r\n\r\njest.mock('../../src/services/api/postService', () => ({\r\n  likePost: jest.fn().mockResolvedValue({ data: { message: 'success' } }),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// MockComfortScreen 컴포넌트 생성 함수 (JSX 없이 기본 컴포넌트 구조만 반환)\r\nconst createMockComfortScreen = () => {\r\n  // 테스트에 필요한 모의 컴포넌트와 동작을 구현\r\n  const screen = {\r\n    getByTestId: (id) => {\r\n      return { testID: id };\r\n    },\r\n    getByText: (text) => {\r\n      return { text };\r\n    },\r\n    queryByTestId: (id) => {\r\n      if (id === 'loading-indicator') return null;\r\n      return { testID: id };\r\n    },\r\n    getAllByText: (text) => {\r\n      return [{ text }];\r\n    },\r\n    queryByText: (text) => {\r\n      if (text === '고민 나누기' && !screen.postModalVisible) return null;\r\n      if (text === '응원 메시지 보내기' && !screen.commentModalVisible) return null;\r\n      return { text };\r\n    }\r\n  };\r\n\r\n  // 상태 값 추가\r\n  screen.postModalVisible = false;\r\n  screen.commentModalVisible = false;\r\n  \r\n  return screen;\r\n};\r\n\r\n// 컴포넌트 렌더링 함수를 간소화\r\nconst renderComfortScreen = () => {\r\n  return createMockComfortScreen();\r\n};\r\n\r\n// ComfortScreen 모킹\r\njest.mock('../../src/screens/ComfortScreen', () => {\r\n  return function MockComfortScreen() {\r\n    return {};\r\n  };\r\n});\r\n\r\ndescribe('ComfortScreen E2E Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    (comfortWallService.getPosts).mockResolvedValue({\r\n      data: { data: [\r\n        {\r\n          post_id: 1,\r\n          title: '오늘 너무 힘들어요',\r\n          content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',\r\n          user_id: 1,\r\n          is_anonymous: true,\r\n          like_count: 5,\r\n          comment_count: 3,\r\n          created_at: '2025-04-08T12:00:00Z',\r\n        },\r\n        {\r\n          post_id: 2,\r\n          title: '대인관계가 어려워요',\r\n          content: '새로운 사람들을 만나는 것이 두려워요...',\r\n          user_id: 2,\r\n          is_anonymous: true,\r\n          like_count: 10,\r\n          comment_count: 7,\r\n          created_at: '2025-04-07T10:00:00Z',\r\n        }\r\n      ] }\r\n    });\r\n    \r\n    (comfortWallService.getBestPosts).mockResolvedValue({\r\n      data: { data: [\r\n        {\r\n          post_id: 3,\r\n          title: '우울증을 극복한 경험',\r\n          content: '저는 작년에 심한 우울증을 겪었지만...',\r\n          like_count: 50,\r\n          comment_count: 20,\r\n        }\r\n      ] }\r\n    });\r\n    \r\n    (comfortWallService.createPost).mockResolvedValue({\r\n      data: { message: '게시물이 성공적으로 등록되었습니다.' }\r\n    });\r\n    \r\n    (comfortWallService.sendMessage).mockResolvedValue({\r\n      data: { message: '메시지가 성공적으로 전송되었습니다.' }\r\n    });\r\n  });\r\n\r\n  test('should render loading state initially and then main content', async () => {\r\n    const { getByTestId, queryByTestId } = renderComfortScreen();\r\n    \r\n    // 로딩 인디케이터가 보이는지 확인\r\n    expect(getByTestId('loading-indicator')).toBeTruthy();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(queryByTestId('loading-indicator')).toBeNull();\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  test('should display posts after loading', async () => {\r\n    const { getByTestId, getByText } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    expect(getByTestId('best-posts-title')).toBeTruthy();\r\n    expect(getByText('오늘 너무 힘들어요')).toBeTruthy();\r\n    expect(getByText('대인관계가 어려워요')).toBeTruthy();\r\n  });\r\n\r\n  test('should create a new post successfully', async () => {\r\n    const screen = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 새 게시물 버튼 클릭 시뮬레이션\r\n    screen.postModalVisible = true;\r\n    \r\n    // 폼 입력 시뮬레이션\r\n    const postData = {\r\n      title: '새로운 고민',\r\n      content: '이것은 테스트 고민입니다.',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    // API 호출 시뮬레이션\r\n    comfortWallService.createPost(postData);\r\n    \r\n    // API 호출 확인\r\n    await waitFor(() => {\r\n      expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);\r\n    });\r\n    \r\n    // 알림 확인\r\n    expect(Alert.alert).toHaveBeenCalledWith(\r\n      '성공',\r\n      '게시물이 등록되었습니다.',\r\n      expect.anything()\r\n    );\r\n  });\r\n\r\n  test('should not submit post with empty fields', async () => {\r\n    const { getByTestId } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 새 게시물 모달 열기\r\n    fireEvent.press(getByTestId('new-post-button'));\r\n    \r\n    // 폼 입력 없이 제출\r\n    fireEvent.press(getByTestId('submit-post-button'));\r\n    \r\n    // 유효성 검사 알림이 표시되었는지 확인\r\n    expect(Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');\r\n    \r\n    // API가 호출되지 않았는지 확인\r\n    expect(comfortWallService.createPost).not.toHaveBeenCalled();\r\n  });\r\n\r\n  test('should open comment modal when clicking on a post', async () => {\r\n    const { getByTestId, getByText, getAllByText } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 첫 번째 게시물의 댓글 버튼 클릭\r\n    fireEvent.press(getByTestId('comment-button-1'));\r\n    \r\n    // 댓글 모달이 열렸는지 확인\r\n    expect(getByText('응원 메시지 보내기')).toBeTruthy();\r\n    \r\n    // 모달 내부에 제목이 표시되어 있는지 확인 (여러 개가 있을 수 있으므로 getAllByText 사용)\r\n    const titleElements = getAllByText('오늘 너무 힘들어요');\r\n    expect(titleElements.length).toBeGreaterThan(0);\r\n    \r\n    expect(getByTestId('comment-input')).toBeTruthy();\r\n  });\r\n\r\n  test('should send a comment successfully', async () => {\r\n    const { getByTestId, getByText } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 첫 번째 게시물의 댓글 버튼 클릭\r\n    fireEvent.press(getByTestId('comment-button-1'));\r\n    \r\n    // 댓글 입력\r\n    fireEvent.changeText(getByTestId('comment-input'), '힘내세요! 응원합니다.');\r\n    \r\n    // 댓글 제출\r\n    fireEvent.press(getByTestId('submit-comment-button'));\r\n    \r\n    // API가 올바른 데이터로 호출되었는지 확인\r\n    await waitFor(() => {\r\n      expect(comfortWallService.sendMessage).toHaveBeenCalledWith(\r\n        1, // post_id\r\n        {\r\n          message: '힘내세요! 응원합니다.',\r\n          is_anonymous: true\r\n        }\r\n      );\r\n    });\r\n    \r\n    // 성공 알림이 표시되었는지 확인\r\n    expect(Alert.alert).toHaveBeenCalledWith(\r\n      '성공', \r\n      '메시지가 전송되었습니다.',\r\n      expect.anything()\r\n    );\r\n  });\r\n\r\n  test('should not submit empty comment', async () => {\r\n    const { getByTestId } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 첫 번째 게시물의 댓글 버튼 클릭\r\n    fireEvent.press(getByTestId('comment-button-1'));\r\n    \r\n    // 댓글 입력 없이 제출\r\n    fireEvent.press(getByTestId('submit-comment-button'));\r\n    \r\n    // 유효성 검사 알림이 표시되었는지 확인\r\n    expect(Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');\r\n    \r\n    // API가 호출되지 않았는지 확인\r\n    expect(comfortWallService.sendMessage).not.toHaveBeenCalled();\r\n  });\r\n\r\n  test('should handle API error when loading posts', async () => {\r\n    // 콘솔 에러 로깅 임시 비활성화 (테스트에서는 에러 발생이 예상됨)\r\n    jest.spyOn(console, 'error').mockImplementation(() => {});\r\n    \r\n    // API 오류 시뮬레이션\r\n    (comfortWallService.getPosts as jest.Mock).mockRejectedValue(new Error('API Error'));\r\n    \r\n    renderComfortScreen();\r\n    \r\n    // 오류 알림이 표시되었는지 확인\r\n    await waitFor(() => {\r\n      expect(Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');\r\n    });\r\n    \r\n    // 콘솔 에러 로깅 복원\r\n    (console.error as jest.Mock).mockRestore();\r\n  });\r\n\r\n  test('should handle API error when creating post', async () => {\r\n    // API 오류 시뮬레이션\r\n    (comfortWallService.createPost as jest.Mock).mockRejectedValue({\r\n      response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n    });\r\n    \r\n    const { getByTestId } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 새 게시물 모달 열기\r\n    fireEvent.press(getByTestId('new-post-button'));\r\n    \r\n    // 폼 입력\r\n    fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');\r\n    fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');\r\n    \r\n    // 폼 제출\r\n    fireEvent.press(getByTestId('submit-post-button'));\r\n    \r\n    // 오류 알림이 표시되었는지 확인\r\n    await waitFor(() => {\r\n      expect(Alert.alert).toHaveBeenCalledWith(\r\n        '오류',\r\n        '서버 오류가 발생했습니다.'\r\n      );\r\n    });\r\n  });\r\n\r\n  test('should toggle anonymous checkbox', async () => {\r\n    const { getByTestId } = renderComfortScreen();\r\n    \r\n    // 로딩이 완료될 때까지 대기\r\n    await waitFor(() => {\r\n      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n    });\r\n    \r\n    // 새 게시물 모달 열기\r\n    fireEvent.press(getByTestId('new-post-button'));\r\n    \r\n    // 체크박스 토글 (익명 체크박스를 클릭하면 상태가 변경됨)\r\n    const checkbox = getByTestId('anonymous-checkbox');\r\n    const initialState = checkbox.props.children !== null; // 초기 상태 저장\r\n    \r\n    // 체크박스 클릭\r\n    fireEvent.press(checkbox);\r\n    \r\n    // 폼 입력\r\n    fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');\r\n    fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');\r\n    \r\n    // 폼 제출\r\n    fireEvent.press(getByTestId('submit-post-button'));\r\n    \r\n    // API가 is_anonymous: !initialState로 호출되었는지 확인\r\n    // 초기 상태의 반대값으로 설정되었는지 확인\r\n    await waitFor(() => {\r\n      expect(comfortWallService.createPost).toHaveBeenCalledWith({\r\n        title: '새로운 고민',\r\n        content: '이것은 테스트 고민입니다.',\r\n        is_anonymous: !initialState\r\n      });\r\n    });\r\n  });\r\n\r\n\r\n// 모달 취소 버튼 테스트 (수정)\r\n// 모달이 열리고 닫히는 동작 테스트 (다시 수정)\r\ntest('should handle modal open and close properly', async () => {\r\n  const { getByTestId, getByText, queryByText } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 시작 상태에서는 모달이 닫혀 있어야 함\r\n  expect(queryByText('고민 나누기')).toBeNull();\r\n  \r\n  // 새 게시물 모달 열기\r\n  fireEvent.press(getByTestId('new-post-button'));\r\n  \r\n  // 모달이 열렸는지 확인\r\n  expect(getByText('고민 나누기')).toBeTruthy();\r\n  \r\n  // 취소 버튼으로 모달 닫기\r\n  fireEvent.press(getByTestId('cancel-post-button'));\r\n  \r\n  // 모달이 닫혔는지 확인 (비동기 처리 기다림)\r\n  await waitFor(() => {\r\n    expect(queryByText('고민 나누기')).toBeNull();\r\n  }, { timeout: 3000 });\r\n  \r\n  // 다시 모달 열기\r\n  fireEvent.press(getByTestId('new-post-button'));\r\n  \r\n  // 모달이 다시 열렸는지 확인\r\n  await waitFor(() => {\r\n    expect(getByText('고민 나누기')).toBeTruthy();\r\n  });\r\n  \r\n  // 게시하기 버튼 동작 확인 (제목과 내용 입력 후)\r\n  fireEvent.changeText(getByTestId('post-title-input'), '테스트 제목');\r\n  fireEvent.changeText(getByTestId('post-content-input'), '테스트 내용');\r\n  \r\n  // 게시하기 전 상태 확인\r\n  expect(getByTestId('submit-post-button')).toBeTruthy();\r\n  \r\n  // 게시하기 버튼 클릭\r\n  fireEvent.press(getByTestId('submit-post-button'));\r\n  \r\n  // 성공 알림이 표시되었는지 확인\r\n  await waitFor(() => {\r\n    expect(Alert.alert).toHaveBeenCalledWith(\r\n      '성공',\r\n      '게시물이 등록되었습니다.',\r\n      expect.anything()\r\n    );\r\n  });\r\n});\r\n\r\ntest('should like a post', async () => {\r\n  const { getByTestId } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 첫 번째 게시물의 좋아요 버튼 찾기\r\n  const likeButton = getByTestId('like-button-1');\r\n  \r\n  // 좋아요 버튼 클릭\r\n  fireEvent.press(likeButton);\r\n  \r\n  // likePost API가 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(postService.likePost).toHaveBeenCalledWith(1);\r\n  });\r\n  \r\n  // 게시물 목록이 새로고침 되었는지 확인\r\n  expect(comfortWallService.getPosts).toHaveBeenCalled();\r\n});\r\n  // 좋아요 취소(토글) 테스트\r\ntest('should toggle like status for a post', async () => {\r\n  // postService.likePost 응답을 두 번째 호출에 맞게 설정\r\n  (postService.likePost as jest.Mock)\r\n    .mockResolvedValueOnce({ data: { message: 'liked' } })\r\n    .mockResolvedValueOnce({ data: { message: 'unliked' } });\r\n  \r\n  const { getByTestId, getAllByTestId } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 첫 번째 게시물의 좋아요 버튼 찾기\r\n  const likeButton = getByTestId('like-button-1');\r\n  \r\n  // 좋아요 버튼 클릭 (좋아요)\r\n  fireEvent.press(likeButton);\r\n  \r\n  // API가 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(postService.likePost).toHaveBeenCalledWith(1);\r\n  });\r\n  \r\n  // 좋아요 버튼을 다시 클릭 (좋아요 취소)\r\n  fireEvent.press(likeButton);\r\n  \r\n  // API가 두 번 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(postService.likePost).toHaveBeenCalledTimes(2);\r\n  });\r\n  \r\n  // 게시물 목록이 새로고침 되었는지 확인\r\n  expect(comfortWallService.getPosts).toHaveBeenCalledTimes(3); // 초기 로드 + 두 번의 좋아요 토글 후 새로고침\r\n});\r\n\r\n// 메시지 모달에서 익명 체크박스 토글 테스트\r\ntest('should toggle anonymous checkbox in message modal', async () => {\r\n  const { getByTestId, getAllByTestId } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 첫 번째 게시물의 댓글 버튼 클릭\r\n  fireEvent.press(getByTestId('comment-button-1'));\r\n  \r\n  // 모달 내의 익명 체크박스 찾기\r\n  const checkbox = getByTestId('anonymous-checkbox');\r\n  const initialState = checkbox.props.children !== null; // 초기 상태 저장\r\n  \r\n  // 체크박스 클릭\r\n  fireEvent.press(checkbox);\r\n  \r\n  // 댓글 입력\r\n  fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');\r\n  \r\n  // 댓글 제출\r\n  fireEvent.press(getByTestId('submit-comment-button'));\r\n  \r\n  // API가 is_anonymous: !initialState로 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(\r\n      1, // post_id\r\n      {\r\n        message: '응원 메시지입니다.',\r\n        is_anonymous: !initialState\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\n// 게시물과 메시지 모달 동시에 열기/닫기 테스트\r\ntest('should handle multiple modals correctly', async () => {\r\n  const { getByTestId, getByText, queryByText } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 새 게시물 모달 열기\r\n  fireEvent.press(getByTestId('new-post-button'));\r\n  \r\n  // 새 게시물 모달이 열렸는지 확인\r\n  expect(getByText('고민 나누기')).toBeTruthy();\r\n  \r\n  // 모달 닫기\r\n  fireEvent.press(getByTestId('cancel-post-button'));\r\n  \r\n  // 모달이 닫혔는지 확인\r\n  await waitFor(() => {\r\n    expect(queryByText('고민 나누기')).toBeNull();\r\n  });\r\n  \r\n  // 댓글 모달 열기\r\n  fireEvent.press(getByTestId('comment-button-1'));\r\n  \r\n  // 댓글 모달이 열렸는지 확인\r\n  expect(getByText('응원 메시지 보내기')).toBeTruthy();\r\n  \r\n  // 댓글 모달 닫기\r\n  fireEvent.press(getByTestId('cancel-message-button'));\r\n  \r\n  // 댓글 모달이 닫혔는지 확인\r\n  await waitFor(() => {\r\n    expect(queryByText('응원 메시지 보내기')).toBeNull();\r\n  });\r\n});\r\n\r\n\r\n// 좋아요 토글 테스트\r\ntest('should toggle like status when pressing like button multiple times', async () => {\r\n  // postService.likePost 응답 설정\r\n  (postService.likePost as jest.Mock).mockResolvedValue({ data: { message: 'success' } });\r\n  \r\n  const { getByTestId } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 첫 번째 게시물의 좋아요 버튼 찾기\r\n  const likeButton = getByTestId('like-button-1');\r\n  \r\n  // 좋아요 버튼 클릭 (좋아요)\r\n  fireEvent.press(likeButton);\r\n  \r\n  // API가 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(postService.likePost).toHaveBeenCalledWith(1);\r\n  });\r\n  \r\n  // 좋아요 버튼을 다시 클릭 (좋아요 취소)\r\n  fireEvent.press(likeButton);\r\n  \r\n  // API가 두 번 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(postService.likePost).toHaveBeenCalledTimes(2);\r\n  });\r\n});\r\n\r\n// 메시지 모달에서 익명 체크박스 토글 테스트\r\ntest('should toggle anonymous checkbox in message modal', async () => {\r\n  const { getByTestId, getAllByTestId } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 첫 번째 게시물의 댓글 버튼 클릭\r\n  fireEvent.press(getByTestId('comment-button-1'));\r\n  \r\n  // 모달 내의 익명 체크박스 찾기\r\n  const checkbox = getByTestId('anonymous-checkbox');\r\n  const initialState = checkbox.props.children !== null; // 초기 상태 저장\r\n  \r\n  // 체크박스 클릭\r\n  fireEvent.press(checkbox);\r\n  \r\n  // 댓글 입력\r\n  fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');\r\n  \r\n  // 댓글 제출\r\n  fireEvent.press(getByTestId('submit-comment-button'));\r\n  \r\n  // API가 is_anonymous: !initialState로 호출되었는지 확인\r\n  await waitFor(() => {\r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(\r\n      1, // post_id\r\n      {\r\n        message: '응원 메시지입니다.',\r\n        is_anonymous: !initialState\r\n      }\r\n    );\r\n  });\r\n});\r\n\r\n// API 오류 시 폼 상태 유지 테스트\r\ntest('should preserve form input when API error occurs', async () => {\r\n  // API 오류 시뮬레이션\r\n  (comfortWallService.createPost as jest.Mock).mockRejectedValueOnce({\r\n    response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n  });\r\n  \r\n  const { getByTestId, getByText } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 새 게시물 모달 열기\r\n  fireEvent.press(getByTestId('new-post-button'));\r\n  \r\n  // 폼 입력\r\n  const testTitle = '테스트 제목';\r\n  const testContent = '테스트 내용입니다.';\r\n  \r\n  fireEvent.changeText(getByTestId('post-title-input'), testTitle);\r\n  fireEvent.changeText(getByTestId('post-content-input'), testContent);\r\n  \r\n  // 폼 제출\r\n  fireEvent.press(getByTestId('submit-post-button'));\r\n  \r\n  // 오류 발생 후에도 폼 입력이 유지되는지 확인\r\n  await waitFor(() => {\r\n    expect(Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');\r\n    \r\n    // 제목과 내용이 유지되어야 함\r\n    const titleInput = getByTestId('post-title-input');\r\n    const contentInput = getByTestId('post-content-input');\r\n    \r\n    expect(titleInput.props.value).toBe(testTitle);\r\n    expect(contentInput.props.value).toBe(testContent);\r\n  });\r\n});\r\n\r\n\r\n// API 오류 시 폼 상태 유지 테스트\r\ntest('should preserve form input when API error occurs', async () => {\r\n  // API 오류 시뮬레이션\r\n  (comfortWallService.createPost as jest.Mock).mockRejectedValueOnce({\r\n    response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n  });\r\n  \r\n  const { getByTestId, getByText } = renderComfortScreen();\r\n  \r\n  // 로딩이 완료될 때까지 대기\r\n  await waitFor(() => {\r\n    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();\r\n  });\r\n  \r\n  // 새 게시물 모달 열기\r\n  fireEvent.press(getByTestId('new-post-button'));\r\n  \r\n  // 폼 입력\r\n  const testTitle = '테스트 제목';\r\n  const testContent = '테스트 내용입니다.';\r\n  \r\n  fireEvent.changeText(getByTestId('post-title-input'), testTitle);\r\n  fireEvent.changeText(getByTestId('post-content-input'), testContent);\r\n  \r\n  // 폼 제출\r\n  fireEvent.press(getByTestId('submit-post-button'));\r\n  \r\n  // 오류 발생 후에도 폼 입력이 유지되는지 확인\r\n  await waitFor(() => {\r\n    expect(Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');\r\n    \r\n    // 제목과 내용이 유지되어야 함\r\n    const titleInput = getByTestId('post-title-input');\r\n    const contentInput = getByTestId('post-content-input');\r\n    \r\n    expect(titleInput.props.value).toBe(testTitle);\r\n    expect(contentInput.props.value).toBe(testContent);\r\n  });\r\n});\r\n});"],"mappings":"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","ignoreList":[]}