aa497f89587219585141db8fc97a1d8f
var _date = require("../../../src/utils/date");
describe('Date utils', function () {
  describe('formatDate', function () {
    it('should format date correctly', function () {
      var date = new Date('2025-04-21T14:30:00');
      expect((0, _date.formatDate)(date)).toBe('2025.04.21');
    });
    it('should handle different format options', function () {
      var date = new Date('2025-04-21T14:30:00');
      expect((0, _date.formatDate)(date, 'yyyy-MM-dd')).toBe('2025-04-21');
      expect((0, _date.formatDate)(date, 'MM/dd/yyyy')).toBe('04/21/2025');
      expect((0, _date.formatDate)(date, 'dd.MM.yyyy')).toBe('21.04.2025');
    });
  });
  describe('formatDatetime', function () {
    it('should format datetime correctly', function () {
      var date = new Date('2025-04-21T14:30:00');
      expect((0, _date.formatDatetime)(date)).toBe('2025.04.21 14:30');
    });
    it('should handle different format options', function () {
      var date = new Date('2025-04-21T14:30:00');
      expect((0, _date.formatDatetime)(date, 'yyyy-MM-dd HH:mm')).toBe('2025-04-21 14:30');
      expect((0, _date.formatDatetime)(date, 'MM/dd/yyyy hh:mm a')).toBe('04/21/2025 02:30 PM');
    });
  });
  describe('getRelativeTime', function () {
    it('should return "방금 전" for times less than a minute ago', function () {
      var now = new Date();
      var fiveSecondsAgo = new Date(now.getTime() - 5000);
      expect((0, _date.getRelativeTime)(fiveSecondsAgo)).toBe('방금 전');
    });
    it('should return minutes for times less than an hour ago', function () {
      var now = new Date();
      var tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);
      expect((0, _date.getRelativeTime)(tenMinutesAgo)).toBe('10분 전');
    });
    it('should return hours for times less than a day ago', function () {
      var now = new Date();
      var threeHoursAgo = new Date(now.getTime() - 3 * 60 * 60 * 1000);
      expect((0, _date.getRelativeTime)(threeHoursAgo)).toBe('3시간 전');
    });
    it('should return days for times less than a week ago', function () {
      var now = new Date();
      var threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);
      expect((0, _date.getRelativeTime)(threeDaysAgo)).toBe('3일 전');
    });
    it('should return the date for older times', function () {
      var oldDate = new Date('2025-01-01T10:30:00');
      expect((0, _date.getRelativeTime)(oldDate)).toMatch(/\d{4}\.\d{2}\.\d{2}/);
    });
  });
  describe('isToday', function () {
    it('should return true for today', function () {
      var today = new Date();
      expect((0, _date.isToday)(today)).toBe(true);
    });
    it('should return false for yesterday', function () {
      var yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      expect((0, _date.isToday)(yesterday)).toBe(false);
    });
  });
  describe('isYesterday', function () {
    it('should return true for yesterday', function () {
      var yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      expect((0, _date.isYesterday)(yesterday)).toBe(true);
    });
    it('should return false for today', function () {
      var today = new Date();
      expect((0, _date.isYesterday)(today)).toBe(false);
    });
  });
  describe('parseDate', function () {
    it('should parse date string correctly', function () {
      var dateStr = '2025-04-21';
      var parsed = (0, _date.parseDate)(dateStr);
      expect(parsed.getFullYear()).toBe(2025);
      expect(parsed.getMonth()).toBe(3);
      expect(parsed.getDate()).toBe(21);
    });
    it('should handle different date formats', function () {
      var dateStr1 = '04/21/2025';
      var parsed1 = (0, _date.parseDate)(dateStr1, 'MM/dd/yyyy');
      expect(parsed1.getFullYear()).toBe(2025);
      expect(parsed1.getMonth()).toBe(3);
      expect(parsed1.getDate()).toBe(21);
      var dateStr2 = '21.04.2025';
      var parsed2 = (0, _date.parseDate)(dateStr2, 'dd.MM.yyyy');
      expect(parsed2.getFullYear()).toBe(2025);
      expect(parsed2.getMonth()).toBe(3);
      expect(parsed2.getDate()).toBe(21);
    });
  });
  describe('getDateRange', function () {
    it('should return a week date range correctly', function () {
      var today = new Date('2025-04-21');
      var _getDateRange = (0, _date.getDateRange)('week', today),
        start = _getDateRange.start,
        end = _getDateRange.end;
      expect((0, _date.formatDate)(start, 'yyyy-MM-dd')).toBe('2025-04-15');
      expect((0, _date.formatDate)(end, 'yyyy-MM-dd')).toBe('2025-04-21');
    });
    it('should return a month date range correctly', function () {
      var today = new Date('2025-04-21');
      var _getDateRange2 = (0, _date.getDateRange)('month', today),
        start = _getDateRange2.start,
        end = _getDateRange2.end;
      expect((0, _date.formatDate)(start, 'yyyy-MM-dd')).toBe('2025-04-01');
      expect((0, _date.formatDate)(end, 'yyyy-MM-dd')).toBe('2025-04-30');
    });
    it('should return a year date range correctly', function () {
      var today = new Date('2025-04-21');
      var _getDateRange3 = (0, _date.getDateRange)('year', today),
        start = _getDateRange3.start,
        end = _getDateRange3.end;
      expect((0, _date.formatDate)(start, 'yyyy-MM-dd')).toBe('2025-01-01');
      expect((0, _date.formatDate)(end, 'yyyy-MM-dd')).toBe('2025-12-31');
    });
  });
  describe('getDayOfWeek', function () {
    it('should return correct day of week in Korean', function () {
      var monday = new Date('2025-04-21');
      expect((0, _date.getDayOfWeek)(monday)).toBe('월요일');
      var sunday = new Date('2025-04-20');
      expect((0, _date.getDayOfWeek)(sunday)).toBe('일요일');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,