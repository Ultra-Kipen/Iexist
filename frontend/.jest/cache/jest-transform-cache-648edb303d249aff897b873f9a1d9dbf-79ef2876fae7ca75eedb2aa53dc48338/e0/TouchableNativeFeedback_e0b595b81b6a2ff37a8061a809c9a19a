74c43b8360799cb746aa338233f9210e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _Pressability = _interopRequireDefault(require("../../Pressability/Pressability"));
var _PressabilityDebug = require("../../Pressability/PressabilityDebug");
var _RendererProxy = require("../../ReactNative/RendererProxy");
var _processColor = _interopRequireDefault(require("../../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _ViewNativeComponent = require("../View/ViewNativeComponent");
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["onBlur", "onFocus"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var TouchableNativeFeedback = function (_React$Component) {
  function TouchableNativeFeedback() {
    var _this;
    (0, _classCallCheck2.default)(this, TouchableNativeFeedback);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, TouchableNativeFeedback, [].concat(args));
    _this.state = {
      pressability: new _Pressability.default(_this._createPressabilityConfig())
    };
    return _this;
  }
  (0, _inherits2.default)(TouchableNativeFeedback, _React$Component);
  return (0, _createClass2.default)(TouchableNativeFeedback, [{
    key: "_createPressabilityConfig",
    value: function _createPressabilityConfig() {
      var _this$props$ariaDisa,
        _this$props$accessibi,
        _this2 = this;
      var accessibilityStateDisabled = (_this$props$ariaDisa = this.props['aria-disabled']) != null ? _this$props$ariaDisa : (_this$props$accessibi = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi.disabled;
      return {
        cancelable: !this.props.rejectResponderTermination,
        disabled: this.props.disabled != null ? this.props.disabled : accessibilityStateDisabled,
        hitSlop: this.props.hitSlop,
        delayLongPress: this.props.delayLongPress,
        delayPressIn: this.props.delayPressIn,
        delayPressOut: this.props.delayPressOut,
        minPressDuration: 0,
        pressRectOffset: this.props.pressRetentionOffset,
        android_disableSound: this.props.touchSoundDisabled,
        onLongPress: this.props.onLongPress,
        onPress: this.props.onPress,
        onPressIn: function onPressIn(event) {
          if (_Platform.default.OS === 'android') {
            _this2._dispatchHotspotUpdate(event);
            _this2._dispatchPressedStateChange(true);
          }
          if (_this2.props.onPressIn != null) {
            _this2.props.onPressIn(event);
          }
        },
        onPressMove: function onPressMove(event) {
          if (_Platform.default.OS === 'android') {
            _this2._dispatchHotspotUpdate(event);
          }
        },
        onPressOut: function onPressOut(event) {
          if (_Platform.default.OS === 'android') {
            _this2._dispatchPressedStateChange(false);
          }
          if (_this2.props.onPressOut != null) {
            _this2.props.onPressOut(event);
          }
        }
      };
    }
  }, {
    key: "_dispatchPressedStateChange",
    value: function _dispatchPressedStateChange(pressed) {
      if (_Platform.default.OS === 'android') {
        var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
        if (hostComponentRef == null) {
          console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
        } else {
          _ViewNativeComponent.Commands.setPressed(hostComponentRef, pressed);
        }
      }
    }
  }, {
    key: "_dispatchHotspotUpdate",
    value: function _dispatchHotspotUpdate(event) {
      if (_Platform.default.OS === 'android') {
        var _event$nativeEvent = event.nativeEvent,
          locationX = _event$nativeEvent.locationX,
          locationY = _event$nativeEvent.locationY;
        var hostComponentRef = (0, _RendererProxy.findHostInstance_DEPRECATED)(this);
        if (hostComponentRef == null) {
          console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');
        } else {
          _ViewNativeComponent.Commands.hotspotUpdate(hostComponentRef, locationX != null ? locationX : 0, locationY != null ? locationY : 0);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$ariaBusy, _this$props$accessibi2, _this$props$ariaChec, _this$props$accessibi3, _this$props$ariaDisa2, _this$props$accessibi4, _this$props$ariaExpa, _this$props$accessibi5, _this$props$ariaSele, _this$props$accessibi6, _this$props$ariaValu, _this$props$accessibi7, _this$props$ariaValu2, _this$props$accessibi8, _this$props$ariaValu3, _this$props$accessibi9, _this$props$ariaValu4, _this$props$accessibi10, _this$props$ariaLive, _this$props$ariaLabe, _this$props$ariaModa, _this$props$ariaHidd, _this$props$id;
      var element = React.Children.only(this.props.children);
      var children = [element.props.children];
      if (true) {
        if (element.type === _View.default) {
          children.push((0, _jsxRuntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
            color: "brown",
            hitSlop: this.props.hitSlop
          }));
        }
      }
      var _this$state$pressabil = this.state.pressability.getEventHandlers(),
        onBlur = _this$state$pressabil.onBlur,
        onFocus = _this$state$pressabil.onFocus,
        eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);
      var _accessibilityState = {
        busy: (_this$props$ariaBusy = this.props['aria-busy']) != null ? _this$props$ariaBusy : (_this$props$accessibi2 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi2.busy,
        checked: (_this$props$ariaChec = this.props['aria-checked']) != null ? _this$props$ariaChec : (_this$props$accessibi3 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi3.checked,
        disabled: (_this$props$ariaDisa2 = this.props['aria-disabled']) != null ? _this$props$ariaDisa2 : (_this$props$accessibi4 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi4.disabled,
        expanded: (_this$props$ariaExpa = this.props['aria-expanded']) != null ? _this$props$ariaExpa : (_this$props$accessibi5 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi5.expanded,
        selected: (_this$props$ariaSele = this.props['aria-selected']) != null ? _this$props$ariaSele : (_this$props$accessibi6 = this.props.accessibilityState) == null ? void 0 : _this$props$accessibi6.selected
      };
      _accessibilityState = this.props.disabled != null ? Object.assign({}, _accessibilityState, {
        disabled: this.props.disabled
      }) : _accessibilityState;
      var accessibilityValue = {
        max: (_this$props$ariaValu = this.props['aria-valuemax']) != null ? _this$props$ariaValu : (_this$props$accessibi7 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi7.max,
        min: (_this$props$ariaValu2 = this.props['aria-valuemin']) != null ? _this$props$ariaValu2 : (_this$props$accessibi8 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi8.min,
        now: (_this$props$ariaValu3 = this.props['aria-valuenow']) != null ? _this$props$ariaValu3 : (_this$props$accessibi9 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi9.now,
        text: (_this$props$ariaValu4 = this.props['aria-valuetext']) != null ? _this$props$ariaValu4 : (_this$props$accessibi10 = this.props.accessibilityValue) == null ? void 0 : _this$props$accessibi10.text
      };
      var accessibilityLiveRegion = this.props['aria-live'] === 'off' ? 'none' : (_this$props$ariaLive = this.props['aria-live']) != null ? _this$props$ariaLive : this.props.accessibilityLiveRegion;
      var accessibilityLabel = (_this$props$ariaLabe = this.props['aria-label']) != null ? _this$props$ariaLabe : this.props.accessibilityLabel;
      return React.cloneElement.apply(React, [element, Object.assign({}, eventHandlersWithoutBlurAndFocus, getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true), {
        accessible: this.props.accessible !== false,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityLanguage: this.props.accessibilityLanguage,
        accessibilityLabel: accessibilityLabel,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityState: _accessibilityState,
        accessibilityActions: this.props.accessibilityActions,
        onAccessibilityAction: this.props.onAccessibilityAction,
        accessibilityValue: accessibilityValue,
        importantForAccessibility: this.props['aria-hidden'] === true ? 'no-hide-descendants' : this.props.importantForAccessibility,
        accessibilityViewIsModal: (_this$props$ariaModa = this.props['aria-modal']) != null ? _this$props$ariaModa : this.props.accessibilityViewIsModal,
        accessibilityLiveRegion: accessibilityLiveRegion,
        accessibilityElementsHidden: (_this$props$ariaHidd = this.props['aria-hidden']) != null ? _this$props$ariaHidd : this.props.accessibilityElementsHidden,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        hitSlop: this.props.hitSlop,
        focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,
        nativeID: (_this$props$id = this.props.id) != null ? _this$props$id : this.props.nativeID,
        nextFocusDown: this.props.nextFocusDown,
        nextFocusForward: this.props.nextFocusForward,
        nextFocusLeft: this.props.nextFocusLeft,
        nextFocusRight: this.props.nextFocusRight,
        nextFocusUp: this.props.nextFocusUp,
        onLayout: this.props.onLayout,
        testID: this.props.testID
      })].concat(children));
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      this.state.pressability.configure(this._createPressabilityConfig());
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.state.pressability.configure(this._createPressabilityConfig());
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.state.pressability.reset();
    }
  }]);
}(React.Component);
TouchableNativeFeedback.SelectableBackground = function (rippleRadius) {
  return {
    type: 'ThemeAttrAndroid',
    attribute: 'selectableItemBackground',
    rippleRadius: rippleRadius
  };
};
TouchableNativeFeedback.SelectableBackgroundBorderless = function (rippleRadius) {
  return {
    type: 'ThemeAttrAndroid',
    attribute: 'selectableItemBackgroundBorderless',
    rippleRadius: rippleRadius
  };
};
TouchableNativeFeedback.Ripple = function (color, borderless, rippleRadius) {
  var processedColor = (0, _processColor.default)(color);
  (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
  return {
    type: 'RippleAndroid',
    color: processedColor,
    borderless: borderless,
    rippleRadius: rippleRadius
  };
};
TouchableNativeFeedback.canUseNativeForeground = function () {
  return _Platform.default.OS === 'android';
};
var getBackgroundProp = _Platform.default.OS === 'android' ? function (background, useForeground) {
  return useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {
    nativeForegroundAndroid: background
  } : {
    nativeBackgroundAndroid: background
  };
} : function (background, useForeground) {
  return null;
};
TouchableNativeFeedback.displayName = 'TouchableNativeFeedback';
module.exports = TouchableNativeFeedback;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1ByZXNzYWJpbGl0eSIsIl9QcmVzc2FiaWxpdHlEZWJ1ZyIsIl9SZW5kZXJlclByb3h5IiwiX3Byb2Nlc3NDb2xvciIsIl9QbGF0Zm9ybSIsIl9WaWV3TmF0aXZlQ29tcG9uZW50IiwiX2ludmFyaWFudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9jYWxsU3VwZXIiLCJvIiwiX2dldFByb3RvdHlwZU9mMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2siLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJzdGF0ZSIsInByZXNzYWJpbGl0eSIsIlByZXNzYWJpbGl0eSIsIl9jcmVhdGVQcmVzc2FiaWxpdHlDb25maWciLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiX3RoaXMkcHJvcHMkYXJpYURpc2EiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmkiLCJfdGhpczIiLCJhY2Nlc3NpYmlsaXR5U3RhdGVEaXNhYmxlZCIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiZGlzYWJsZWQiLCJjYW5jZWxhYmxlIiwicmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24iLCJoaXRTbG9wIiwiZGVsYXlMb25nUHJlc3MiLCJkZWxheVByZXNzSW4iLCJkZWxheVByZXNzT3V0IiwibWluUHJlc3NEdXJhdGlvbiIsInByZXNzUmVjdE9mZnNldCIsInByZXNzUmV0ZW50aW9uT2Zmc2V0IiwiYW5kcm9pZF9kaXNhYmxlU291bmQiLCJ0b3VjaFNvdW5kRGlzYWJsZWQiLCJvbkxvbmdQcmVzcyIsIm9uUHJlc3MiLCJvblByZXNzSW4iLCJldmVudCIsIlBsYXRmb3JtIiwiT1MiLCJfZGlzcGF0Y2hIb3RzcG90VXBkYXRlIiwiX2Rpc3BhdGNoUHJlc3NlZFN0YXRlQ2hhbmdlIiwib25QcmVzc01vdmUiLCJvblByZXNzT3V0IiwicHJlc3NlZCIsImhvc3RDb21wb25lbnRSZWYiLCJmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQiLCJjb25zb2xlIiwid2FybiIsIkNvbW1hbmRzIiwic2V0UHJlc3NlZCIsIl9ldmVudCRuYXRpdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwibG9jYXRpb25YIiwibG9jYXRpb25ZIiwiaG90c3BvdFVwZGF0ZSIsInJlbmRlciIsIl90aGlzJHByb3BzJGFyaWFCdXN5IiwiX3RoaXMkcHJvcHMkYWNjZXNzaWJpMiIsIl90aGlzJHByb3BzJGFyaWFDaGVjIiwiX3RoaXMkcHJvcHMkYWNjZXNzaWJpMyIsIl90aGlzJHByb3BzJGFyaWFEaXNhMiIsIl90aGlzJHByb3BzJGFjY2Vzc2liaTQiLCJfdGhpcyRwcm9wcyRhcmlhRXhwYSIsIl90aGlzJHByb3BzJGFjY2Vzc2liaTUiLCJfdGhpcyRwcm9wcyRhcmlhU2VsZSIsIl90aGlzJHByb3BzJGFjY2Vzc2liaTYiLCJfdGhpcyRwcm9wcyRhcmlhVmFsdSIsIl90aGlzJHByb3BzJGFjY2Vzc2liaTciLCJfdGhpcyRwcm9wcyRhcmlhVmFsdTIiLCJfdGhpcyRwcm9wcyRhY2Nlc3NpYmk4IiwiX3RoaXMkcHJvcHMkYXJpYVZhbHUzIiwiX3RoaXMkcHJvcHMkYWNjZXNzaWJpOSIsIl90aGlzJHByb3BzJGFyaWFWYWx1NCIsIl90aGlzJHByb3BzJGFjY2Vzc2liaTEwIiwiX3RoaXMkcHJvcHMkYXJpYUxpdmUiLCJfdGhpcyRwcm9wcyRhcmlhTGFiZSIsIl90aGlzJHByb3BzJGFyaWFNb2RhIiwiX3RoaXMkcHJvcHMkYXJpYUhpZGQiLCJfdGhpcyRwcm9wcyRpZCIsImVsZW1lbnQiLCJDaGlsZHJlbiIsIm9ubHkiLCJjaGlsZHJlbiIsInR5cGUiLCJWaWV3IiwicHVzaCIsImpzeCIsIlByZXNzYWJpbGl0eURlYnVnVmlldyIsImNvbG9yIiwiX3RoaXMkc3RhdGUkcHJlc3NhYmlsIiwiZ2V0RXZlbnRIYW5kbGVycyIsIm9uQmx1ciIsIm9uRm9jdXMiLCJldmVudEhhbmRsZXJzV2l0aG91dEJsdXJBbmRGb2N1cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfYWNjZXNzaWJpbGl0eVN0YXRlIiwiYnVzeSIsImNoZWNrZWQiLCJleHBhbmRlZCIsInNlbGVjdGVkIiwiYXNzaWduIiwiYWNjZXNzaWJpbGl0eVZhbHVlIiwibWF4IiwibWluIiwibm93IiwidGV4dCIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiYWNjZXNzaWJpbGl0eUxhYmVsIiwiY2xvbmVFbGVtZW50IiwiZ2V0QmFja2dyb3VuZFByb3AiLCJiYWNrZ3JvdW5kIiwidW5kZWZpbmVkIiwiU2VsZWN0YWJsZUJhY2tncm91bmQiLCJ1c2VGb3JlZ3JvdW5kIiwiYWNjZXNzaWJsZSIsImFjY2Vzc2liaWxpdHlIaW50IiwiYWNjZXNzaWJpbGl0eUxhbmd1YWdlIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5QWN0aW9ucyIsIm9uQWNjZXNzaWJpbGl0eUFjdGlvbiIsImltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkiLCJhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWwiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJoYXNUVlByZWZlcnJlZEZvY3VzIiwiZm9jdXNhYmxlIiwibmF0aXZlSUQiLCJpZCIsIm5leHRGb2N1c0Rvd24iLCJuZXh0Rm9jdXNGb3J3YXJkIiwibmV4dEZvY3VzTGVmdCIsIm5leHRGb2N1c1JpZ2h0IiwibmV4dEZvY3VzVXAiLCJvbkxheW91dCIsInRlc3RJRCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsImNvbmZpZ3VyZSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZXNldCIsIkNvbXBvbmVudCIsInJpcHBsZVJhZGl1cyIsImF0dHJpYnV0ZSIsIlNlbGVjdGFibGVCYWNrZ3JvdW5kQm9yZGVybGVzcyIsIlJpcHBsZSIsImJvcmRlcmxlc3MiLCJwcm9jZXNzZWRDb2xvciIsInByb2Nlc3NDb2xvciIsImludmFyaWFudCIsImNhblVzZU5hdGl2ZUZvcmVncm91bmQiLCJuYXRpdmVGb3JlZ3JvdW5kQW5kcm9pZCIsIm5hdGl2ZUJhY2tncm91bmRBbmRyb2lkIiwiZGlzcGxheU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICcuLi8uLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQgdHlwZW9mIFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBmcm9tICcuL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayc7XG5cbmltcG9ydCBWaWV3IGZyb20gJy4uLy4uL0NvbXBvbmVudHMvVmlldy9WaWV3JztcbmltcG9ydCBQcmVzc2FiaWxpdHksIHtcbiAgdHlwZSBQcmVzc2FiaWxpdHlDb25maWcsXG59IGZyb20gJy4uLy4uL1ByZXNzYWJpbGl0eS9QcmVzc2FiaWxpdHknO1xuaW1wb3J0IHtQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXd9IGZyb20gJy4uLy4uL1ByZXNzYWJpbGl0eS9QcmVzc2FiaWxpdHlEZWJ1Zyc7XG5pbXBvcnQge2ZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRH0gZnJvbSAnLi4vLi4vUmVhY3ROYXRpdmUvUmVuZGVyZXJQcm94eSc7XG5pbXBvcnQgcHJvY2Vzc0NvbG9yIGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IHtDb21tYW5kc30gZnJvbSAnLi4vVmlldy9WaWV3TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5SZWFjdC5FbGVtZW50Q29uZmlnPFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaz4sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHR5cGUgb2YgYmFja2dyb3VuZCBkcmF3YWJsZSB0aGF0J3MgZ29pbmcgdG8gYmUgdXNlZCB0b1xuICAgKiBkaXNwbGF5IGZlZWRiYWNrLiBJdCB0YWtlcyBhbiBvYmplY3Qgd2l0aCBgdHlwZWAgcHJvcGVydHkgYW5kIGV4dHJhIGRhdGFcbiAgICogZGVwZW5kaW5nIG9uIHRoZSBgdHlwZWAuIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIG9uZSBvZiB0aGUgc3RhdGljXG4gICAqIG1ldGhvZHMgdG8gZ2VuZXJhdGUgdGhhdCBkaWN0aW9uYXJ5LlxuICAgKi9cbiAgYmFja2dyb3VuZD86ID8oXG4gICAgfCAkUmVhZE9ubHk8e3xcbiAgICAgICAgdHlwZTogJ1RoZW1lQXR0ckFuZHJvaWQnLFxuICAgICAgICBhdHRyaWJ1dGU6XG4gICAgICAgICAgfCAnc2VsZWN0YWJsZUl0ZW1CYWNrZ3JvdW5kJ1xuICAgICAgICAgIHwgJ3NlbGVjdGFibGVJdGVtQmFja2dyb3VuZEJvcmRlcmxlc3MnLFxuICAgICAgICByaXBwbGVSYWRpdXM6ID9udW1iZXIsXG4gICAgICB8fT5cbiAgICB8ICRSZWFkT25seTx7fFxuICAgICAgICB0eXBlOiAnUmlwcGxlQW5kcm9pZCcsXG4gICAgICAgIGNvbG9yOiA/bnVtYmVyLFxuICAgICAgICBib3JkZXJsZXNzOiBib29sZWFuLFxuICAgICAgICByaXBwbGVSYWRpdXM6ID9udW1iZXIsXG4gICAgICB8fT5cbiAgKSxcblxuICAvKipcbiAgICogVFYgcHJlZmVycmVkIGZvY3VzIChzZWUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFZpZXcgY29tcG9uZW50KS5cbiAgICovXG4gIGhhc1RWUHJlZmVycmVkRm9jdXM/OiA/Ym9vbGVhbixcblxuICAvKipcbiAgICogVFYgbmV4dCBmb2N1cyBkb3duIChzZWUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFZpZXcgY29tcG9uZW50KS5cbiAgICovXG4gIG5leHRGb2N1c0Rvd24/OiA/bnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUViBuZXh0IGZvY3VzIGZvcndhcmQgKHNlZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgVmlldyBjb21wb25lbnQpLlxuICAgKi9cbiAgbmV4dEZvY3VzRm9yd2FyZD86ID9udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRWIG5leHQgZm9jdXMgbGVmdCAoc2VlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBWaWV3IGNvbXBvbmVudCkuXG4gICAqL1xuICBuZXh0Rm9jdXNMZWZ0PzogP251bWJlcixcblxuICAvKipcbiAgICogVFYgbmV4dCBmb2N1cyByaWdodCAoc2VlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBWaWV3IGNvbXBvbmVudCkuXG4gICAqL1xuICBuZXh0Rm9jdXNSaWdodD86ID9udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRWIG5leHQgZm9jdXMgdXAgKHNlZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgVmlldyBjb21wb25lbnQpLlxuICAgKi9cbiAgbmV4dEZvY3VzVXA/OiA/bnVtYmVyLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byBhZGQgdGhlIHJpcHBsZSBlZmZlY3QgdG8gdGhlIGZvcmVncm91bmQgb2YgdGhlIHZpZXcsIGluc3RlYWRcbiAgICogb2YgdGhlIGJhY2tncm91bmQuIFRoaXMgaXMgdXNlZnVsIGlmIG9uZSBvZiB5b3VyIGNoaWxkIHZpZXdzIGhhcyBhXG4gICAqIGJhY2tncm91bmQgb2YgaXRzIG93biwgb3IgeW91J3JlIGUuZy4gZGlzcGxheWluZyBpbWFnZXMsIGFuZCB5b3UgZG9uJ3Qgd2FudFxuICAgKiB0aGUgcmlwcGxlIHRvIGJlIGNvdmVyZWQgYnkgdGhlbS5cbiAgICpcbiAgICogQ2hlY2sgVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2suY2FuVXNlTmF0aXZlRm9yZWdyb3VuZCgpIGZpcnN0LCBhcyB0aGlzIGlzXG4gICAqIG9ubHkgYXZhaWxhYmxlIG9uIEFuZHJvaWQgNi4wIGFuZCBhYm92ZS4gSWYgeW91IHRyeSB0byB1c2UgdGhpcyBvbiBvbGRlclxuICAgKiB2ZXJzaW9ucywgdGhpcyB3aWxsIGZhbGxiYWNrIHRvIGJhY2tncm91bmQuXG4gICAqL1xuICB1c2VGb3JlZ3JvdW5kPzogP2Jvb2xlYW4sXG58fT47XG5cbnR5cGUgU3RhdGUgPSAkUmVhZE9ubHk8e3xcbiAgcHJlc3NhYmlsaXR5OiBQcmVzc2FiaWxpdHksXG58fT47XG5cbmNsYXNzIFRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIHZhbHVlIGZvciB0aGUgYGJhY2tncm91bmRgIHByb3AgdGhhdCB1c2VzIHRoZSBBbmRyb2lkIHRoZW1lJ3NcbiAgICogZGVmYXVsdCBiYWNrZ3JvdW5kIGZvciBzZWxlY3RhYmxlIGVsZW1lbnRzLlxuICAgKi9cbiAgc3RhdGljIFNlbGVjdGFibGVCYWNrZ3JvdW5kOiAocmlwcGxlUmFkaXVzOiA/bnVtYmVyKSA9PiAkUmVhZE9ubHk8e3xcbiAgICBhdHRyaWJ1dGU6ICdzZWxlY3RhYmxlSXRlbUJhY2tncm91bmQnLFxuICAgIHR5cGU6ICdUaGVtZUF0dHJBbmRyb2lkJyxcbiAgICByaXBwbGVSYWRpdXM6ID9udW1iZXIsXG4gIHx9PiA9IChyaXBwbGVSYWRpdXM6ID9udW1iZXIpID0+ICh7XG4gICAgdHlwZTogJ1RoZW1lQXR0ckFuZHJvaWQnLFxuICAgIGF0dHJpYnV0ZTogJ3NlbGVjdGFibGVJdGVtQmFja2dyb3VuZCcsXG4gICAgcmlwcGxlUmFkaXVzLFxuICB9KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHZhbHVlIGZvciB0aGUgYGJhY2tncm91bmRgIHByb3AgdGhhdCB1c2VzIHRoZSBBbmRyb2lkIHRoZW1lJ3NcbiAgICogZGVmYXVsdCBiYWNrZ3JvdW5kIGZvciBib3JkZXJsZXNzIHNlbGVjdGFibGUgZWxlbWVudHMuIFJlcXVpcmVzIEFQSSAyMSsuXG4gICAqL1xuICBzdGF0aWMgU2VsZWN0YWJsZUJhY2tncm91bmRCb3JkZXJsZXNzOiAocmlwcGxlUmFkaXVzOiA/bnVtYmVyKSA9PiAkUmVhZE9ubHk8e3xcbiAgICBhdHRyaWJ1dGU6ICdzZWxlY3RhYmxlSXRlbUJhY2tncm91bmRCb3JkZXJsZXNzJyxcbiAgICB0eXBlOiAnVGhlbWVBdHRyQW5kcm9pZCcsXG4gICAgcmlwcGxlUmFkaXVzOiA/bnVtYmVyLFxuICB8fT4gPSAocmlwcGxlUmFkaXVzOiA/bnVtYmVyKSA9PiAoe1xuICAgIHR5cGU6ICdUaGVtZUF0dHJBbmRyb2lkJyxcbiAgICBhdHRyaWJ1dGU6ICdzZWxlY3RhYmxlSXRlbUJhY2tncm91bmRCb3JkZXJsZXNzJyxcbiAgICByaXBwbGVSYWRpdXMsXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdmFsdWUgZm9yIHRoZSBgYmFja2dyb3VuZGAgcHJvcCB0aGF0IHVzZXMgdGhlIEFuZHJvaWQgcmlwcGxlIHdpdGhcbiAgICogdGhlIHN1cHBsaWVkIGNvbG9yLiBJZiBgYm9yZGVybGVzc2AgaXMgdHJ1ZSwgdGhlIHJpcHBsZSB3aWxsIHJlbmRlciBvdXRzaWRlXG4gICAqIG9mIHRoZSB2aWV3IGJvdW5kcy4gUmVxdWlyZXMgQVBJIDIxKy5cbiAgICovXG4gIHN0YXRpYyBSaXBwbGU6IChcbiAgICBjb2xvcjogc3RyaW5nLFxuICAgIGJvcmRlcmxlc3M6IGJvb2xlYW4sXG4gICAgcmlwcGxlUmFkaXVzOiA/bnVtYmVyLFxuICApID0+ICRSZWFkT25seTx7fFxuICAgIGJvcmRlcmxlc3M6IGJvb2xlYW4sXG4gICAgY29sb3I6ID9udW1iZXIsXG4gICAgcmlwcGxlUmFkaXVzOiA/bnVtYmVyLFxuICAgIHR5cGU6ICdSaXBwbGVBbmRyb2lkJyxcbiAgfH0+ID0gKGNvbG9yOiBzdHJpbmcsIGJvcmRlcmxlc3M6IGJvb2xlYW4sIHJpcHBsZVJhZGl1czogP251bWJlcikgPT4ge1xuICAgIGNvbnN0IHByb2Nlc3NlZENvbG9yID0gcHJvY2Vzc0NvbG9yKGNvbG9yKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBwcm9jZXNzZWRDb2xvciA9PSBudWxsIHx8IHR5cGVvZiBwcm9jZXNzZWRDb2xvciA9PT0gJ251bWJlcicsXG4gICAgICAnVW5leHBlY3RlZCBjb2xvciBnaXZlbiBmb3IgUmlwcGxlIGNvbG9yJyxcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnUmlwcGxlQW5kcm9pZCcsXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICAgICAgY29sb3I6IHByb2Nlc3NlZENvbG9yLFxuICAgICAgYm9yZGVybGVzcyxcbiAgICAgIHJpcHBsZVJhZGl1cyxcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGB1c2VGb3JlZ3JvdW5kYCBpcyBzdXBwb3J0ZWQuXG4gICAqL1xuICBzdGF0aWMgY2FuVXNlTmF0aXZlRm9yZWdyb3VuZDogKCkgPT4gYm9vbGVhbiA9ICgpID0+XG4gICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJztcblxuICBzdGF0ZTogU3RhdGUgPSB7XG4gICAgcHJlc3NhYmlsaXR5OiBuZXcgUHJlc3NhYmlsaXR5KHRoaXMuX2NyZWF0ZVByZXNzYWJpbGl0eUNvbmZpZygpKSxcbiAgfTtcblxuICBfY3JlYXRlUHJlc3NhYmlsaXR5Q29uZmlnKCk6IFByZXNzYWJpbGl0eUNvbmZpZyB7XG4gICAgY29uc3QgYWNjZXNzaWJpbGl0eVN0YXRlRGlzYWJsZWQgPVxuICAgICAgdGhpcy5wcm9wc1snYXJpYS1kaXNhYmxlZCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlPy5kaXNhYmxlZDtcbiAgICByZXR1cm4ge1xuICAgICAgY2FuY2VsYWJsZTogIXRoaXMucHJvcHMucmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb24sXG4gICAgICBkaXNhYmxlZDpcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNhYmxlZCAhPSBudWxsXG4gICAgICAgICAgPyB0aGlzLnByb3BzLmRpc2FibGVkXG4gICAgICAgICAgOiBhY2Nlc3NpYmlsaXR5U3RhdGVEaXNhYmxlZCxcbiAgICAgIGhpdFNsb3A6IHRoaXMucHJvcHMuaGl0U2xvcCxcbiAgICAgIGRlbGF5TG9uZ1ByZXNzOiB0aGlzLnByb3BzLmRlbGF5TG9uZ1ByZXNzLFxuICAgICAgZGVsYXlQcmVzc0luOiB0aGlzLnByb3BzLmRlbGF5UHJlc3NJbixcbiAgICAgIGRlbGF5UHJlc3NPdXQ6IHRoaXMucHJvcHMuZGVsYXlQcmVzc091dCxcbiAgICAgIG1pblByZXNzRHVyYXRpb246IDAsXG4gICAgICBwcmVzc1JlY3RPZmZzZXQ6IHRoaXMucHJvcHMucHJlc3NSZXRlbnRpb25PZmZzZXQsXG4gICAgICBhbmRyb2lkX2Rpc2FibGVTb3VuZDogdGhpcy5wcm9wcy50b3VjaFNvdW5kRGlzYWJsZWQsXG4gICAgICBvbkxvbmdQcmVzczogdGhpcy5wcm9wcy5vbkxvbmdQcmVzcyxcbiAgICAgIG9uUHJlc3M6IHRoaXMucHJvcHMub25QcmVzcyxcbiAgICAgIG9uUHJlc3NJbjogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoSG90c3BvdFVwZGF0ZShldmVudCk7XG4gICAgICAgICAgdGhpcy5fZGlzcGF0Y2hQcmVzc2VkU3RhdGVDaGFuZ2UodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25QcmVzc0luICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uUHJlc3NJbihldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblByZXNzTW92ZTogZXZlbnQgPT4ge1xuICAgICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoSG90c3BvdFVwZGF0ZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblByZXNzT3V0OiBldmVudCA9PiB7XG4gICAgICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICAgICAgdGhpcy5fZGlzcGF0Y2hQcmVzc2VkU3RhdGVDaGFuZ2UoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uUHJlc3NPdXQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHJvcHMub25QcmVzc091dChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIF9kaXNwYXRjaFByZXNzZWRTdGF0ZUNoYW5nZShwcmVzc2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIGNvbnN0IGhvc3RDb21wb25lbnRSZWYgPSBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQodGhpcyk7XG4gICAgICBpZiAoaG9zdENvbXBvbmVudFJlZiA9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnVG91Y2hhYmxlOiBVbmFibGUgdG8gZmluZCBIb3N0Q29tcG9uZW50IGluc3RhbmNlLiAnICtcbiAgICAgICAgICAgICdIYXMgeW91ciBUb3VjaGFibGUgY29tcG9uZW50IGJlZW4gdW5tb3VudGVkPycsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDb21tYW5kcy5zZXRQcmVzc2VkKGhvc3RDb21wb25lbnRSZWYsIHByZXNzZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9kaXNwYXRjaEhvdHNwb3RVcGRhdGUoZXZlbnQ6IFByZXNzRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgY29uc3Qge2xvY2F0aW9uWCwgbG9jYXRpb25ZfSA9IGV2ZW50Lm5hdGl2ZUV2ZW50O1xuICAgICAgY29uc3QgaG9zdENvbXBvbmVudFJlZiA9IGZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRCh0aGlzKTtcbiAgICAgIGlmIChob3N0Q29tcG9uZW50UmVmID09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICdUb3VjaGFibGU6IFVuYWJsZSB0byBmaW5kIEhvc3RDb21wb25lbnQgaW5zdGFuY2UuICcgK1xuICAgICAgICAgICAgJ0hhcyB5b3VyIFRvdWNoYWJsZSBjb21wb25lbnQgYmVlbiB1bm1vdW50ZWQ/JyxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENvbW1hbmRzLmhvdHNwb3RVcGRhdGUoXG4gICAgICAgICAgaG9zdENvbXBvbmVudFJlZixcbiAgICAgICAgICBsb2NhdGlvblggPz8gMCxcbiAgICAgICAgICBsb2NhdGlvblkgPz8gMCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XG4gICAgY29uc3QgZWxlbWVudCA9IFJlYWN0LkNoaWxkcmVuLm9ubHk8JEZsb3dGaXhNZT4odGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgY29uc3QgY2hpbGRyZW46IEFycmF5PFJlYWN0Lk5vZGU+ID0gW2VsZW1lbnQucHJvcHMuY2hpbGRyZW5dO1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAoZWxlbWVudC50eXBlID09PSBWaWV3KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goXG4gICAgICAgICAgPFByZXNzYWJpbGl0eURlYnVnVmlldyBjb2xvcj1cImJyb3duXCIgaGl0U2xvcD17dGhpcy5wcm9wcy5oaXRTbG9wfSAvPixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCQUNLV0FSRC1DT01QQVRJQklMSVRZOiBGb2N1cyBhbmQgYmx1ciBldmVudHMgd2VyZSBuZXZlciBzdXBwb3J0ZWQgYmVmb3JlXG4gICAgLy8gYWRvcHRpbmcgYFByZXNzYWJpbGl0eWAsIHNvIHByZXNlcnZlIHRoYXQgYmVoYXZpb3IuXG4gICAgY29uc3Qge29uQmx1ciwgb25Gb2N1cywgLi4uZXZlbnRIYW5kbGVyc1dpdGhvdXRCbHVyQW5kRm9jdXN9ID1cbiAgICAgIHRoaXMuc3RhdGUucHJlc3NhYmlsaXR5LmdldEV2ZW50SGFuZGxlcnMoKTtcblxuICAgIGxldCBfYWNjZXNzaWJpbGl0eVN0YXRlID0ge1xuICAgICAgYnVzeTogdGhpcy5wcm9wc1snYXJpYS1idXN5J10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGU/LmJ1c3ksXG4gICAgICBjaGVja2VkOlxuICAgICAgICB0aGlzLnByb3BzWydhcmlhLWNoZWNrZWQnXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZT8uY2hlY2tlZCxcbiAgICAgIGRpc2FibGVkOlxuICAgICAgICB0aGlzLnByb3BzWydhcmlhLWRpc2FibGVkJ10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkLFxuICAgICAgZXhwYW5kZWQ6XG4gICAgICAgIHRoaXMucHJvcHNbJ2FyaWEtZXhwYW5kZWQnXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZT8uZXhwYW5kZWQsXG4gICAgICBzZWxlY3RlZDpcbiAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1zZWxlY3RlZCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlPy5zZWxlY3RlZCxcbiAgICB9O1xuXG4gICAgX2FjY2Vzc2liaWxpdHlTdGF0ZSA9XG4gICAgICB0aGlzLnByb3BzLmRpc2FibGVkICE9IG51bGxcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5fYWNjZXNzaWJpbGl0eVN0YXRlLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgfVxuICAgICAgICA6IF9hY2Nlc3NpYmlsaXR5U3RhdGU7XG5cbiAgICBjb25zdCBhY2Nlc3NpYmlsaXR5VmFsdWUgPSB7XG4gICAgICBtYXg6IHRoaXMucHJvcHNbJ2FyaWEtdmFsdWVtYXgnXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlWYWx1ZT8ubWF4LFxuICAgICAgbWluOiB0aGlzLnByb3BzWydhcmlhLXZhbHVlbWluJ10gPz8gdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5VmFsdWU/Lm1pbixcbiAgICAgIG5vdzogdGhpcy5wcm9wc1snYXJpYS12YWx1ZW5vdyddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVZhbHVlPy5ub3csXG4gICAgICB0ZXh0OiB0aGlzLnByb3BzWydhcmlhLXZhbHVldGV4dCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVZhbHVlPy50ZXh0LFxuICAgIH07XG5cbiAgICBjb25zdCBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbiA9XG4gICAgICB0aGlzLnByb3BzWydhcmlhLWxpdmUnXSA9PT0gJ29mZidcbiAgICAgICAgPyAnbm9uZSdcbiAgICAgICAgOiB0aGlzLnByb3BzWydhcmlhLWxpdmUnXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uO1xuXG4gICAgY29uc3QgYWNjZXNzaWJpbGl0eUxhYmVsID1cbiAgICAgIHRoaXMucHJvcHNbJ2FyaWEtbGFiZWwnXSA/PyB0aGlzLnByb3BzLmFjY2Vzc2liaWxpdHlMYWJlbDtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KFxuICAgICAgZWxlbWVudCxcbiAgICAgIHtcbiAgICAgICAgLi4uZXZlbnRIYW5kbGVyc1dpdGhvdXRCbHVyQW5kRm9jdXMsXG4gICAgICAgIC4uLmdldEJhY2tncm91bmRQcm9wKFxuICAgICAgICAgIHRoaXMucHJvcHMuYmFja2dyb3VuZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IFRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrLlNlbGVjdGFibGVCYWNrZ3JvdW5kKClcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5iYWNrZ3JvdW5kLFxuICAgICAgICAgIHRoaXMucHJvcHMudXNlRm9yZWdyb3VuZCA9PT0gdHJ1ZSxcbiAgICAgICAgKSxcbiAgICAgICAgYWNjZXNzaWJsZTogdGhpcy5wcm9wcy5hY2Nlc3NpYmxlICE9PSBmYWxzZSxcbiAgICAgICAgYWNjZXNzaWJpbGl0eUhpbnQ6IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUhpbnQsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYW5ndWFnZTogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5TGFuZ3VhZ2UsXG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbDogYWNjZXNzaWJpbGl0eUxhYmVsLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZTogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5Um9sZSxcbiAgICAgICAgYWNjZXNzaWJpbGl0eVN0YXRlOiBfYWNjZXNzaWJpbGl0eVN0YXRlLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5QWN0aW9uczogdGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5QWN0aW9ucyxcbiAgICAgICAgb25BY2Nlc3NpYmlsaXR5QWN0aW9uOiB0aGlzLnByb3BzLm9uQWNjZXNzaWJpbGl0eUFjdGlvbixcbiAgICAgICAgYWNjZXNzaWJpbGl0eVZhbHVlOiBhY2Nlc3NpYmlsaXR5VmFsdWUsXG4gICAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHk6XG4gICAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1oaWRkZW4nXSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyAnbm8taGlkZS1kZXNjZW5kYW50cydcbiAgICAgICAgICAgIDogdGhpcy5wcm9wcy5pbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5LFxuICAgICAgICBhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWw6XG4gICAgICAgICAgdGhpcy5wcm9wc1snYXJpYS1tb2RhbCddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVZpZXdJc01vZGFsLFxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbjogYWNjZXNzaWJpbGl0eUxpdmVSZWdpb24sXG4gICAgICAgIGFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbjpcbiAgICAgICAgICB0aGlzLnByb3BzWydhcmlhLWhpZGRlbiddID8/IHRoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuLFxuICAgICAgICBoYXNUVlByZWZlcnJlZEZvY3VzOiB0aGlzLnByb3BzLmhhc1RWUHJlZmVycmVkRm9jdXMsXG4gICAgICAgIGhpdFNsb3A6IHRoaXMucHJvcHMuaGl0U2xvcCxcbiAgICAgICAgZm9jdXNhYmxlOlxuICAgICAgICAgIHRoaXMucHJvcHMuZm9jdXNhYmxlICE9PSBmYWxzZSAmJlxuICAgICAgICAgIHRoaXMucHJvcHMub25QcmVzcyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgIXRoaXMucHJvcHMuZGlzYWJsZWQsXG4gICAgICAgIG5hdGl2ZUlEOiB0aGlzLnByb3BzLmlkID8/IHRoaXMucHJvcHMubmF0aXZlSUQsXG4gICAgICAgIG5leHRGb2N1c0Rvd246IHRoaXMucHJvcHMubmV4dEZvY3VzRG93bixcbiAgICAgICAgbmV4dEZvY3VzRm9yd2FyZDogdGhpcy5wcm9wcy5uZXh0Rm9jdXNGb3J3YXJkLFxuICAgICAgICBuZXh0Rm9jdXNMZWZ0OiB0aGlzLnByb3BzLm5leHRGb2N1c0xlZnQsXG4gICAgICAgIG5leHRGb2N1c1JpZ2h0OiB0aGlzLnByb3BzLm5leHRGb2N1c1JpZ2h0LFxuICAgICAgICBuZXh0Rm9jdXNVcDogdGhpcy5wcm9wcy5uZXh0Rm9jdXNVcCxcbiAgICAgICAgb25MYXlvdXQ6IHRoaXMucHJvcHMub25MYXlvdXQsXG4gICAgICAgIHRlc3RJRDogdGhpcy5wcm9wcy50ZXN0SUQsXG4gICAgICB9LFxuICAgICAgLi4uY2hpbGRyZW4sXG4gICAgKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZS5wcmVzc2FiaWxpdHkuY29uZmlndXJlKHRoaXMuX2NyZWF0ZVByZXNzYWJpbGl0eUNvbmZpZygpKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IG1peGVkIHtcbiAgICB0aGlzLnN0YXRlLnByZXNzYWJpbGl0eS5jb25maWd1cmUodGhpcy5fY3JlYXRlUHJlc3NhYmlsaXR5Q29uZmlnKCkpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZS5wcmVzc2FiaWxpdHkucmVzZXQoKTtcbiAgfVxufVxuXG5jb25zdCBnZXRCYWNrZ3JvdW5kUHJvcCA9XG4gIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCdcbiAgICA/IC8qICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF0gVGhlIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgICAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gICAgICAoYmFja2dyb3VuZCwgdXNlRm9yZWdyb3VuZDogYm9vbGVhbikgPT5cbiAgICAgICAgdXNlRm9yZWdyb3VuZCAmJiBUb3VjaGFibGVOYXRpdmVGZWVkYmFjay5jYW5Vc2VOYXRpdmVGb3JlZ3JvdW5kKClcbiAgICAgICAgICA/IHtuYXRpdmVGb3JlZ3JvdW5kQW5kcm9pZDogYmFja2dyb3VuZH1cbiAgICAgICAgICA6IHtuYXRpdmVCYWNrZ3JvdW5kQW5kcm9pZDogYmFja2dyb3VuZH1cbiAgICA6IC8qICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF0gVGhlIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieVxuICAgICAgICogRmxvdydzIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG4gICAgICAoYmFja2dyb3VuZCwgdXNlRm9yZWdyb3VuZDogYm9vbGVhbikgPT4gbnVsbDtcblxuVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2suZGlzcGxheU5hbWUgPSAnVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2snO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBYUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBR0EsSUFBQUUsa0JBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGNBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLGFBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFLLFNBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtB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