510667086c7f1e0147892cf3ff18195c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var ThemeContext = _react.default.createContext({
  theme: 'light',
  toggleTheme: function toggleTheme() {}
});
var ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children;
  var _React$useState = _react.default.useState('light'),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    theme = _React$useState2[0],
    setTheme = _React$useState2[1];
  var toggleTheme = function toggleTheme() {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };
  return (0, _jsxRuntime.jsx)(ThemeContext.Provider, {
    value: {
      theme: theme,
      toggleTheme: toggleTheme
    },
    children: children
  });
};
var ThemedComponent = function ThemedComponent() {
  var _React$useContext = _react.default.useContext(ThemeContext),
    theme = _React$useContext.theme,
    toggleTheme = _React$useContext.toggleTheme;
  var containerStyle = {
    backgroundColor: theme === 'light' ? '#ffffff' : '#121212',
    padding: 20
  };
  var textStyle = {
    color: theme === 'light' ? '#000000' : '#ffffff'
  };
  var buttonStyle = {
    backgroundColor: theme === 'light' ? '#007bff' : '#0056b3',
    padding: 10,
    borderRadius: 5,
    marginTop: 10
  };
  var buttonTextStyle = {
    color: '#ffffff'
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    style: containerStyle,
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      style: textStyle,
      testID: "theme-text",
      children: ["\uD604\uC7AC \uD14C\uB9C8: ", theme]
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      style: buttonStyle,
      onPress: toggleTheme,
      accessibilityLabel: "\uD14C\uB9C8 \uC804\uD658 \uBC84\uD2BC",
      testID: "theme-toggle-button",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        style: buttonTextStyle,
        children: "\uD14C\uB9C8 \uC804\uD658"
      })
    })]
  });
};
var AnimatedThemeTransition = function AnimatedThemeTransition() {
  var _React$useContext2 = _react.default.useContext(ThemeContext),
    theme = _React$useContext2.theme,
    toggleTheme = _React$useContext2.toggleTheme;
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    transitioning = _React$useState4[0],
    setTransitioning = _React$useState4[1];
  var handleThemeToggle = function handleThemeToggle() {
    setTransitioning(true);
    setTimeout(function () {
      toggleTheme();
      setTransitioning(false);
    }, 300);
  };
  var containerStyle = {
    backgroundColor: transitioning ? '#808080' : theme === 'light' ? '#ffffff' : '#121212',
    padding: 20,
    opacity: transitioning ? 0.7 : 1
  };
  var textStyle = {
    color: theme === 'light' ? '#000000' : '#ffffff'
  };
  var buttonStyle = {
    backgroundColor: theme === 'light' ? '#007bff' : '#0056b3',
    padding: 10,
    borderRadius: 5,
    marginTop: 10
  };
  var buttonTextStyle = {
    color: '#ffffff'
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    style: containerStyle,
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      style: textStyle,
      testID: "transition-text",
      children: ["\uD604\uC7AC \uD14C\uB9C8: ", theme, transitioning ? ' (전환 중...)' : '']
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      style: buttonStyle,
      onPress: handleThemeToggle,
      accessibilityLabel: "\uD14C\uB9C8 \uC804\uD658 \uBC84\uD2BC",
      testID: "theme-toggle-button",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        style: buttonTextStyle,
        children: "\uD14C\uB9C8 \uC804\uD658"
      })
    })]
  });
};
describe('다크 모드 전환 테스트', function () {
  test('테마 전환 버튼 클릭 시 테마가 변경되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(ThemedComponent, {})
      })),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByText('현재 테마: light')).toBeTruthy();
    var toggleButton = getByTestId('theme-toggle-button');
    _reactNative.fireEvent.press(toggleButton);
    expect(getByText('현재 테마: dark')).toBeTruthy();
    _reactNative.fireEvent.press(toggleButton);
    expect(getByText('현재 테마: light')).toBeTruthy();
  });
  test('애니메이션 전환 시 중간 상태가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    jest.useFakeTimers();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(AnimatedThemeTransition, {})
      })),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText,
      queryByText = _render2.queryByText;
    expect(getByText('현재 테마: light')).toBeTruthy();
    var toggleButton = getByTestId('theme-toggle-button');
    _reactNative.fireEvent.press(toggleButton);
    expect(getByText('현재 테마: light (전환 중...)')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      jest.advanceTimersByTime(300);
    }));
    expect(queryByText('현재 테마: light (전환 중...)')).toBeNull();
    expect(getByText('현재 테마: dark')).toBeTruthy();
    jest.useRealTimers();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,