496673364cd5c67acc885c0eb72fa7a3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var _require2 = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require2.dispatchCommand;
var nativeComponentName = 'RCTSwitch';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTSwitch',
  bubblingEventTypes: {
    topChange: {
      phasedRegistrationNames: {
        captured: 'onChangeCapture',
        bubbled: 'onChange'
      }
    }
  },
  validAttributes: Object.assign({
    disabled: true,
    value: true,
    tintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    onTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    thumbTintColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    thumbColor: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForFalse: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    },
    trackColorForTrue: {
      process: require('react-native/Libraries/StyleSheet/processColor').default
    }
  }, ConditionallyIgnoredEventHandlers({
    onChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  setValue: function setValue(ref, value) {
    dispatchCommand(ref, "setValue", [value]);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsIl9yZXF1aXJlIiwiQ29uZGl0aW9uYWxseUlnbm9yZWRFdmVudEhhbmRsZXJzIiwiX3JlcXVpcmUyIiwiZGlzcGF0Y2hDb21tYW5kIiwibmF0aXZlQ29tcG9uZW50TmFtZSIsIl9fSU5URVJOQUxfVklFV19DT05GSUciLCJleHBvcnRzIiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwidG9wQ2hhbmdlIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJjYXB0dXJlZCIsImJ1YmJsZWQiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJhc3NpZ24iLCJkaXNhYmxlZCIsInZhbHVlIiwidGludENvbG9yIiwicHJvY2VzcyIsIm9uVGludENvbG9yIiwidGh1bWJUaW50Q29sb3IiLCJ0aHVtYkNvbG9yIiwidHJhY2tDb2xvckZvckZhbHNlIiwidHJhY2tDb2xvckZvclRydWUiLCJvbkNoYW5nZSIsIl9kZWZhdWx0IiwiQ29tbWFuZHMiLCJzZXRWYWx1ZSIsInJlZiJdLCJzb3VyY2VzIjpbIlN3aXRjaE5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7XG4gIEJ1YmJsaW5nRXZlbnRIYW5kbGVyLFxuICBJbnQzMixcbiAgV2l0aERlZmF1bHQsXG59IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9UeXBlcy9Db2RlZ2VuVHlwZXMnO1xuXG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbW1hbmRzIGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbW1hbmRzJztcbmltcG9ydCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvY29kZWdlbk5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgU3dpdGNoQ2hhbmdlRXZlbnQgPSAkUmVhZE9ubHk8e3xcbiAgdmFsdWU6IGJvb2xlYW4sXG4gIHRhcmdldDogSW50MzIsXG58fT47XG5cbnR5cGUgTmF0aXZlUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgLi4uVmlld1Byb3BzLFxuXG4gIC8vIFByb3BzXG4gIGRpc2FibGVkPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuICB2YWx1ZT86IFdpdGhEZWZhdWx0PGJvb2xlYW4sIGZhbHNlPixcbiAgdGludENvbG9yPzogP0NvbG9yVmFsdWUsXG4gIG9uVGludENvbG9yPzogP0NvbG9yVmFsdWUsXG4gIHRodW1iVGludENvbG9yPzogP0NvbG9yVmFsdWUsXG5cbiAgLy8gRGVwcmVjYXRlZCBwcm9wc1xuICB0aHVtYkNvbG9yPzogP0NvbG9yVmFsdWUsXG4gIHRyYWNrQ29sb3JGb3JGYWxzZT86ID9Db2xvclZhbHVlLFxuICB0cmFja0NvbG9yRm9yVHJ1ZT86ID9Db2xvclZhbHVlLFxuXG4gIC8vIEV2ZW50c1xuICBvbkNoYW5nZT86ID9CdWJibGluZ0V2ZW50SGFuZGxlcjxTd2l0Y2hDaGFuZ2VFdmVudD4sXG58fT47XG5cbnR5cGUgQ29tcG9uZW50VHlwZSA9IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+O1xuXG5pbnRlcmZhY2UgTmF0aXZlQ29tbWFuZHMge1xuICArc2V0VmFsdWU6ICh2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPENvbXBvbmVudFR5cGU+LCB2YWx1ZTogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IENvbW1hbmRzOiBOYXRpdmVDb21tYW5kcyA9IGNvZGVnZW5OYXRpdmVDb21tYW5kczxOYXRpdmVDb21tYW5kcz4oe1xuICBzdXBwb3J0ZWRDb21tYW5kczogWydzZXRWYWx1ZSddLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IChjb2RlZ2VuTmF0aXZlQ29tcG9uZW50PE5hdGl2ZVByb3BzPignU3dpdGNoJywge1xuICBwYXBlckNvbXBvbmVudE5hbWU6ICdSQ1RTd2l0Y2gnLFxuICBleGNsdWRlZFBsYXRmb3JtczogWydhbmRyb2lkJ10sXG59KTogQ29tcG9uZW50VHlwZSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBbUJBLElBQUFBLHNC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