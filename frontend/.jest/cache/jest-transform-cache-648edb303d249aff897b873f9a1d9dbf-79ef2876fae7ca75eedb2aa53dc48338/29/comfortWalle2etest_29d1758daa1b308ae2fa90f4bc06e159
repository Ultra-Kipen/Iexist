adc8e9977638f015d9aec9d9eadc531d
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      setOptions: jest.fn(),
      addListener: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    }),
    useIsFocused: jest.fn().mockReturnValue(true)
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue(null),
    getBestPosts: jest.fn().mockResolvedValue(null),
    createPost: jest.fn().mockResolvedValue(null),
    sendMessage: jest.fn().mockResolvedValue(null)
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/screens/ComfortScreen", function () {
  return function MockComfortScreen() {
    return {};
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(console, 'error').mockImplementation(function () {});
var createMockComfortScreen = function createMockComfortScreen() {
  var screen = {
    getByTestId: function getByTestId(id) {
      return {
        testID: id,
        props: id === 'anonymous-checkbox' ? {
          children: '익명',
          value: true
        } : {
          value: ''
        }
      };
    },
    getByText: function getByText(text) {
      return {
        text: text
      };
    },
    queryByTestId: function queryByTestId(id) {
      if (id === 'loading-indicator') return null;
      return {
        testID: id
      };
    },
    getAllByText: function getAllByText(text) {
      return [{
        text: text
      }];
    },
    queryByText: function queryByText(text) {
      if (text === '고민 나누기' && !screen.postModalVisible) return null;
      if (text === '응원 메시지 보내기' && !screen.commentModalVisible) return null;
      return {
        text: text
      };
    },
    postModalVisible: false,
    commentModalVisible: false,
    selectedPostId: null,
    simulatePress: function simulatePress(id) {
      if (id === 'new-post-button') {
        screen.postModalVisible = true;
      } else if (id === 'cancel-post-button') {
        screen.postModalVisible = false;
      } else if (id === 'comment-button-1') {
        screen.commentModalVisible = true;
        screen.selectedPostId = 1;
      } else if (id === 'cancel-message-button') {
        screen.commentModalVisible = false;
      } else if (id === 'submit-post-button') {
        if (screen.postTitle && screen.postContent) {
          _comfortWallService.default.createPost({
            title: screen.postTitle,
            content: screen.postContent,
            is_anonymous: screen.isAnonymous
          });
        } else {
          _reactNative2.Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
        }
      } else if (id === 'submit-comment-button') {
        if (screen.commentText) {
          _comfortWallService.default.sendMessage(screen.selectedPostId, {
            message: screen.commentText,
            is_anonymous: screen.isAnonymous
          });
        } else {
          _reactNative2.Alert.alert('알림', '메시지 내용을 입력해주세요.');
        }
      } else if (id === 'like-button-1') {
        _postService.default.likePost(1);
      } else if (id === 'anonymous-checkbox') {
        screen.isAnonymous = !screen.isAnonymous;
      }
    },
    simulateChangeText: function simulateChangeText(id, text) {
      if (id === 'post-title-input') {
        screen.postTitle = text;
        screen.getByTestId(id).props.value = text;
      } else if (id === 'post-content-input') {
        screen.postContent = text;
        screen.getByTestId(id).props.value = text;
      } else if (id === 'comment-input') {
        screen.commentText = text;
        screen.getByTestId(id).props.value = text;
      }
    },
    postTitle: '',
    postContent: '',
    commentText: '',
    isAnonymous: true
  };
  return screen;
};
var renderComfortScreen = function renderComfortScreen() {
  return createMockComfortScreen();
};
describe('ComfortScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 1,
          title: '오늘 너무 힘들어요',
          content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
          user_id: 1,
          is_anonymous: true,
          like_count: 5,
          comment_count: 3,
          created_at: '2025-04-08T12:00:00Z'
        }, {
          post_id: 2,
          title: '대인관계가 어려워요',
          content: '새로운 사람들을 만나는 것이 두려워요...',
          user_id: 2,
          is_anonymous: true,
          like_count: 10,
          comment_count: 7,
          created_at: '2025-04-07T10:00:00Z'
        }]
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 3,
          title: '우울증을 극복한 경험',
          content: '저는 작년에 심한 우울증을 겪었지만...',
          like_count: 50,
          comment_count: 20
        }]
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
  });
  test('should render loading state initially and then main content', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    expect(screen.getByTestId('loading-indicator')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.queryByTestId('loading-indicator')).toBeNull();
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
  }));
  test('should display posts after loading', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    expect(screen.getByTestId('best-posts-title')).toBeTruthy();
    expect(screen.getByText('오늘 너무 힘들어요')).toBeTruthy();
    expect(screen.getByText('대인관계가 어려워요')).toBeTruthy();
  }));
  test('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('new-post-button');
    screen.simulateChangeText('post-title-input', '새로운 고민');
    screen.simulateChangeText('post-content-input', '이것은 테스트 고민입니다.');
    screen.simulatePress('submit-post-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
  }));
  test('should not submit post with empty fields', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('new-post-button');
    screen.simulatePress('submit-post-button');
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(_comfortWallService.default.createPost).not.toHaveBeenCalled();
  }));
  test('should send a comment successfully', (0, _asyncToGenerator2.default)(function* () {
    var screen = renderComfortScreen();
    yield (0, _reactNative.waitFor)(function () {
      expect(screen.getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    screen.simulatePress('comment-button-1');
    screen.simulateChangeText('comment-input', '힘내세요! 응원합니다.');
    screen.simulatePress('submit-comment-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '힘내세요! 응원합니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.', expect.anything());
  }));
  test('should like a post', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen = renderComfortScreen(),
      getByTestId = _renderComfortScreen.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
  }));
  test('should toggle like status for a post', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValueOnce({
      data: {
        message: 'liked'
      }
    }).mockResolvedValueOnce({
      data: {
        message: 'unliked'
      }
    });
    var _renderComfortScreen2 = renderComfortScreen(),
      getByTestId = _renderComfortScreen2.getByTestId,
      getAllByTestId = _renderComfortScreen2.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(3);
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen3 = renderComfortScreen(),
      getByTestId = _renderComfortScreen3.getByTestId,
      getAllByTestId = _renderComfortScreen3.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    fireEvent.press(checkbox);
    fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should handle multiple modals correctly', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen4 = renderComfortScreen(),
      getByTestId = _renderComfortScreen4.getByTestId,
      getByText = _renderComfortScreen4.getByText,
      queryByText = _renderComfortScreen4.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    });
    fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    fireEvent.press(getByTestId('cancel-message-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('응원 메시지 보내기')).toBeNull();
    });
  }));
  test('should toggle like status when pressing like button multiple times', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValue({
      data: {
        message: 'success'
      }
    });
    var _renderComfortScreen5 = renderComfortScreen(),
      getByTestId = _renderComfortScreen5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    var likeButton = getByTestId('like-button-1');
    fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    fireEvent.press(likeButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _renderComfortScreen6 = renderComfortScreen(),
      getByTestId = _renderComfortScreen6.getByTestId,
      getAllByTestId = _renderComfortScreen6.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    fireEvent.press(getByTestId('comment-button-1'));
    var checkbox = getByTestId('anonymous-checkbox');
    var initialState = checkbox.props.children !== null;
    fireEvent.press(checkbox);
    fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: !initialState
      });
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen7 = renderComfortScreen(),
      getByTestId = _renderComfortScreen7.getByTestId,
      getByText = _renderComfortScreen7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    fireEvent.changeText(getByTestId('post-content-input'), testContent);
    fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _renderComfortScreen8 = renderComfortScreen(),
      getByTestId = _renderComfortScreen8.getByTestId,
      getByText = _renderComfortScreen8.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    fireEvent.changeText(getByTestId('post-content-input'), testContent);
    fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
      var titleInput = getByTestId('post-title-input');
      var contentInput = getByTestId('post-content-input');
      expect(titleInput.props.value).toBe(testTitle);
      expect(contentInput.props.value).toBe(testContent);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,