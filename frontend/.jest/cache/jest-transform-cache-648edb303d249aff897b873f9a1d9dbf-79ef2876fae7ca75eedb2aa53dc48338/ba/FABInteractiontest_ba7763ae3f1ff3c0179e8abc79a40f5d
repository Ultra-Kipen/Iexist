8c5bd4b40332d2b09cb920dcd9ed37b5
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  return {
    __esModule: true,
    default: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        surface: '#fff',
        background: '#fff'
      }
    })
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser'
      },
      isAuthenticated: true
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
function MockHomeScreen() {
  var handleFABPress = function handleFABPress() {
    console.log('FAB Pressed');
  };
  return (0, _jsxRuntime.jsx)(_reactNative2.View, {
    testID: "home-screen-container",
    children: (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      testID: "fab-button",
      onPress: handleFABPress,
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "+"
      })
    })
  });
}
describe('HomeScreen FAB Interaction', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    var HomeScreenModule = require("../../src/screens/HomeScreen");
    HomeScreenModule.default.mockImplementation(MockHomeScreen);
  });
  it('renders FAB button', function () {
    var HomeScreen = require("../../src/screens/HomeScreen").default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render.getByTestId;
    var fabButton = getByTestId('fab-button');
    expect(fabButton).toBeTruthy();
  });
  it('logs console message on FAB press', function () {
    var consoleSpy = jest.spyOn(console, 'log').mockImplementation();
    var HomeScreen = require("../../src/screens/HomeScreen").default;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(HomeScreen, {})),
      getByTestId = _render2.getByTestId;
    var fabButton = getByTestId('fab-button');
    _reactNative.fireEvent.press(fabButton);
    expect(consoleSpy).toHaveBeenCalledWith('FAB Pressed');
    consoleSpy.mockRestore();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,