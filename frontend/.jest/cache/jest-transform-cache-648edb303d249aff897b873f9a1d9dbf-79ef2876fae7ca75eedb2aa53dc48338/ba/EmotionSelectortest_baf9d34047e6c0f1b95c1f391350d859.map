{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_EmotionSelector","_jsxRuntime","describe","mockEmotions","emotion_id","name","icon","color","mockOnSelectEmotion","jest","fn","beforeEach","clearAllMocks","it","_render","render","jsx","default","emotions","selectedEmotions","onSelect","getByText","expect","toBeDefined","_render2","fireEvent","press","toHaveBeenCalledWith","_render3","getAllByText","happyText"],"sources":["EmotionSelector.test.tsx"],"sourcesContent":["// __tests__/components/EmotionSelector.test.tsx\r\n\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport EmotionSelector from '../../src/components/EmotionSelector';\r\n\r\ndescribe('EmotionSelector 컴포넌트', () => {\r\n  const mockEmotions = [\r\n    { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n    { emotion_id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' },\r\n  ];\r\n  \r\n  const mockOnSelectEmotion = jest.fn();\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('감정 선택기가 올바르게 렌더링되어야 함', () => {\r\n    const { getByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[]}\r\n        onSelect={mockOnSelectEmotion}\r\n      />\r\n    );\r\n    \r\n    expect(getByText('행복')).toBeDefined();\r\n    expect(getByText('감사')).toBeDefined();\r\n  });\r\n\r\n  it('감정 아이템을 클릭하면 onSelectEmotion이 호출되어야 함', () => {\r\n    const { getByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[]}\r\n        onSelect={mockOnSelectEmotion}\r\n      />\r\n    );\r\n    \r\n    fireEvent.press(getByText('행복'));\r\n    \r\n    expect(mockOnSelectEmotion).toHaveBeenCalledWith(1); // emotion_id를 전달하는 것으로 수정\r\n  });\r\n\r\n  it('이미 선택된 감정이 강조되어야 함', () => {\r\n    const { getAllByText } = render(\r\n      <EmotionSelector\r\n        emotions={mockEmotions}\r\n        selectedEmotions={[1]} // emotion_id 배열로 변경\r\n        onSelect={mockOnSelectEmotion}\r\n      />\r\n    );\r\n    \r\n    // testID 대신 텍스트로 검색\r\n    const happyText = getAllByText('행복')[0];\r\n    expect(happyText).toBeDefined();\r\n  });\r\n});"],"mappings":";AAEA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAD,OAAA;AACA,IAAAE,gBAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAmE,IAAAG,WAAA,GAAAH,OAAA;AAEnEI,QAAQ,CAAC,sBAAsB,EAAE,YAAM;EACrC,IAAMC,YAAY,GAAG,CACnB;IAAEC,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE,wBAAwB;IAAEC,KAAK,EAAE;EAAU,CAAC,EAC/E;IAAEH,UAAU,EAAE,CAAC;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE,YAAY;IAAEC,KAAK,EAAE;EAAU,CAAC,CACpE;EAED,IAAMC,mBAAmB,GAAGC,IAAI,CAACC,EAAE,CAAC,CAAC;EAErCC,UAAU,CAAC,YAAM;IACfF,IAAI,CAACG,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,uBAAuB,EAAE,YAAM;IAChC,IAAAC,OAAA,GAAsB,IAAAC,mBAAM,EAC1B,IAAAd,WAAA,CAAAe,GAAA,EAAChB,gBAAA,CAAAiB,OAAe;QACdC,QAAQ,EAAEf,YAAa;QACvBgB,gBAAgB,EAAE,EAAG;QACrBC,QAAQ,EAAEZ;MAAoB,CAC/B,CACH,CAAC;MANOa,SAAS,GAAAP,OAAA,CAATO,SAAS;IAQjBC,MAAM,CAACD,SAAS,CAAC,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;IACrCD,MAAM,CAACD,SAAS,CAAC,IAAI,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC;EACvC,CAAC,CAAC;EAEFV,EAAE,CAAC,uCAAuC,EAAE,YAAM;IAChD,IAAAW,QAAA,GAAsB,IAAAT,mBAAM,EAC1B,IAAAd,WAAA,CAAAe,GAAA,EAAChB,gBAAA,CAAAiB,OAAe;QACdC,QAAQ,EAAEf,YAAa;QACvBgB,gBAAgB,EAAE,EAAG;QACrBC,QAAQ,EAAEZ;MAAoB,CAC/B,CACH,CAAC;MANOa,SAAS,GAAAG,QAAA,CAATH,SAAS;IAQjBI,sBAAS,CAACC,KAAK,CAACL,SAAS,CAAC,IAAI,CAAC,CAAC;IAEhCC,MAAM,CAACd,mBAAmB,CAAC,CAACmB,oBAAoB,CAAC,CAAC,CAAC;EACrD,CAAC,CAAC;EAEFd,EAAE,CAAC,oBAAoB,EAAE,YAAM;IAC7B,IAAAe,QAAA,GAAyB,IAAAb,mBAAM,EAC7B,IAAAd,WAAA,CAAAe,GAAA,EAAChB,gBAAA,CAAAiB,OAAe;QACdC,QAAQ,EAAEf,YAAa;QACvBgB,gBAAgB,EAAE,CAAC,CAAC,CAAE;QACtBC,QAAQ,EAAEZ;MAAoB,CAC/B,CACH,CAAC;MANOqB,YAAY,GAAAD,QAAA,CAAZC,YAAY;IASpB,IAAMC,SAAS,GAAGD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvCP,MAAM,CAACQ,SAAS,CAAC,CAACP,WAAW,CAAC,CAAC;EACjC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}