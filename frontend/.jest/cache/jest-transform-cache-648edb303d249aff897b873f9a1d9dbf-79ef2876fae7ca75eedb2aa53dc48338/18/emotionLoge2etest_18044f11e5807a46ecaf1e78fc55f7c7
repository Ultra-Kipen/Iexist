8b8fec2440723835eb4e15ca2a7e198c
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    _Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity,
    RNTextInput = _require.TextInput;
  return {
    Text: function Text(_ref) {
      var children = _ref.children,
        style = _ref.style;
      return (0, _jsxRuntime.jsx)(_Text, {
        style: style,
        children: children
      });
    },
    Chip: function Chip(_ref2) {
      var children = _ref2.children,
        onPress = _ref2.onPress,
        selected = _ref2.selected,
        style = _ref2.style,
        textStyle = _ref2.textStyle,
        testID = _ref2.testID;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        style: style,
        testID: testID,
        children: (0, _jsxRuntime.jsx)(_Text, {
          style: textStyle,
          children: children
        })
      });
    },
    Button: function Button(_ref3) {
      var children = _ref3.children,
        onPress = _ref3.onPress,
        mode = _ref3.mode,
        style = _ref3.style,
        disabled = _ref3.disabled,
        testID = _ref3.testID;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        style: style,
        disabled: disabled,
        testID: testID,
        children: (0, _jsxRuntime.jsx)(_Text, {
          children: children
        })
      });
    },
    TextInput: function TextInput(_ref4) {
      var label = _ref4.label,
        value = _ref4.value,
        onChangeText = _ref4.onChangeText,
        mode = _ref4.mode,
        multiline = _ref4.multiline,
        numberOfLines = _ref4.numberOfLines,
        style = _ref4.style,
        testID = _ref4.testID;
      return (0, _jsxRuntime.jsx)(RNTextInput, {
        placeholder: label,
        value: value,
        onChangeText: onChangeText,
        multiline: multiline,
        style: style,
        testID: testID
      });
    },
    ActivityIndicator: function ActivityIndicator(_ref5) {
      var size = _ref5.size;
      return (0, _jsxRuntime.jsx)(View, {
        children: (0, _jsxRuntime.jsx)(_Text, {
          children: "Loading..."
        })
      });
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/screens/EmotionLogScreen", function () {
  var React = require('react');
  var EmotionLogScreenComponent = require("../../src/screens/EmotionLogScreen").default;
  return function (props) {
    return (0, _jsxRuntime.jsx)(EmotionLogScreenComponent, Object.assign({}, props));
  };
}, {
  virtual: true
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var mockEmotions = {
  status: 'success',
  data: [{
    emotion_id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '슬픔',
    icon: 'emoticon-sad-outline',
    color: '#4682B4'
  }, {
    emotion_id: 3,
    name: '불안',
    icon: 'alert-outline',
    color: '#DDA0DD'
  }, {
    emotion_id: 4,
    name: '화남',
    icon: 'emoticon-angry-outline',
    color: '#FF4500'
  }]
};
var EmotionLogScreen = require("../../src/screens/EmotionLogScreen").default;
describe('EmotionLogScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: mockEmotions
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: {
          log_id: 123,
          created_at: '2025-04-09T10:00:00Z'
        }
      }
    });
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('should render loading state initially', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockImplementation(function () {
      return new Promise(function (resolve) {
        setTimeout(function () {
          resolve({
            data: mockEmotions
          });
        }, 100);
      });
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      queryByText = _render.queryByText;
    expect(_emotionService.default.getAllEmotions).toHaveBeenCalledTimes(1);
    expect(queryByText('감정 데이터를 불러오는 중...')).toBeTruthy();
  }));
  test('should display emotions when loaded', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getByText = _render2.getByText,
      getAllByTestId = _render2.getAllByTestId,
      queryByText = _render2.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    expect(emotionChips.length).toBe(4);
    expect(getByText('오늘의 감정')).toBeTruthy();
    expect(getByText('현재 어떤 감정을 느끼고 계신가요?')).toBeTruthy();
  }));
  test('should submit emotions successfully', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId,
      getAllByTestId = _render3.getAllByTestId,
      queryByText = _render3.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '오늘은 좋은 일이 많았어요.');
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: '오늘은 좋은 일이 많았어요.'
      });
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }));
  test('should not submit without selecting any emotion', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getByTestId = _render4.getByTestId,
      queryByText = _render4.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '오늘의 메모');
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '감정을 적어도 하나 이상 선택해주세요.');
    expect(_emotionService.default.recordEmotions).not.toHaveBeenCalled();
  }));
  test('should handle API error when loading emotions', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockRejectedValueOnce(new Error('API Error'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
    }, {
      timeout: 5000
    });
  }));
  test('should handle API error when recording emotions', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render5.getAllByTestId,
      getByTestId = _render5.getByTestId,
      queryByText = _render5.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    }, {
      timeout: 5000
    });
  }));
  test('should toggle emotion selection', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId,
      getByTestId = _render6.getByTestId,
      queryByText = _render6.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    _reactNative.fireEvent.press(emotionChips[0]);
    var submitButton = getByTestId('emotion-submit-button');
    expect(submitButton).toBeTruthy();
  }));
  test('should submit multiple emotions successfully', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render7.getAllByTestId,
      getByTestId = _render7.getByTestId,
      queryByText = _render7.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    _reactNative.fireEvent.press(emotionChips[2]);
    _reactNative.fireEvent.press(emotionChips[3]);
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '여러 감정이 동시에 느껴져요.');
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1, 3, 4],
        note: '여러 감정이 동시에 느껴져요.'
      });
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }));
  test('should handle long memo text input', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render8.getAllByTestId,
      getByTestId = _render8.getByTestId,
      queryByText = _render8.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var longText = '오늘은 정말 좋은 하루였습니다. '.repeat(10) + '많은 일이 있었지만 모두 잘 해결되었고 기분이 좋습니다.'.repeat(5);
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, longText);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
      var callArgs = _emotionService.default.recordEmotions.mock.calls[0][0];
      expect(callArgs).toHaveProperty('emotion_ids');
      expect(callArgs.emotion_ids).toEqual([1]);
      expect(callArgs).toHaveProperty('note');
      expect(typeof callArgs.note).toBe('string');
      expect(callArgs.note.length).toBeGreaterThan(200);
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
  }));
  test('should handle network timeout when submitting emotions', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      message: '네트워크 요청 시간이 초과되었습니다.',
      response: {
        data: {
          message: '네트워크 요청 시간이 초과되었습니다.'
        }
      }
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render9.getAllByTestId,
      getByTestId = _render9.getByTestId,
      queryByText = _render9.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '네트워크 요청 시간이 초과되었습니다.');
    }, {
      timeout: 5000
    });
    expect(mockNavigation.goBack).not.toHaveBeenCalled();
  }));
  test('should render all emotion data correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render10.getAllByTestId,
      queryByText = _render10.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    expect(emotionChips.length).toBe(4);
  }));
  test('should submit emotions without memo', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render11.getAllByTestId,
      getByTestId = _render11.getByTestId,
      queryByText = _render11.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[1]);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [2],
        note: undefined
      });
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRBbGxFbW90aW9ucyIsImplc3QiLCJmbiIsInJlY29yZEVtb3Rpb25zIiwiYWxlcnQiLCJSZWFjdCIsInJlcXVpcmUiLCJfcmVxdWlyZSIsIlZpZXciLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIlJOVGV4dElucHV0IiwiVGV4dElucHV0IiwiX3JlZiIsImNoaWxkcmVuIiwic3R5bGUiLCJfanN4UnVudGltZSIsImpzeCIsIl9UZXh0IiwiQ2hpcCIsIl9yZWYyIiwib25QcmVzcyIsInNlbGVjdGVkIiwidGV4dFN0eWxlIiwidGVzdElEIiwiQnV0dG9uIiwiX3JlZjMiLCJtb2RlIiwiZGlzYWJsZWQiLCJfcmVmNCIsImxhYmVsIiwidmFsdWUiLCJvbkNoYW5nZVRleHQiLCJtdWx0aWxpbmUiLCJudW1iZXJPZkxpbmVzIiwicGxhY2Vob2xkZXIiLCJBY3Rpdml0eUluZGljYXRvciIsIl9yZWY1Iiwic2l6ZSIsIkVtb3Rpb25Mb2dTY3JlZW5Db21wb25lbnQiLCJkZWZhdWx0IiwicHJvcHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ2aXJ0dWFsIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfZW1vdGlvblNlcnZpY2UiLCJfcmVxdWlyZTIiLCJtb2NrTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwiZ29CYWNrIiwibW9ja0Vtb3Rpb25zIiwic3RhdHVzIiwiZGF0YSIsImVtb3Rpb25faWQiLCJuYW1lIiwiaWNvbiIsImNvbG9yIiwiRW1vdGlvbkxvZ1NjcmVlbiIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJlbW90aW9uU2VydmljZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwibG9nX2lkIiwiY3JlYXRlZF9hdCIsImFmdGVyRWFjaCIsInRlc3QiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJfcmVuZGVyIiwicmVuZGVyIiwibmF2aWdhdGlvbiIsInF1ZXJ5QnlUZXh0IiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiZ2V0QnlUZXh0IiwiZ2V0QWxsQnlUZXN0SWQiLCJ3YWl0Rm9yIiwidG9CZU51bGwiLCJ0aW1lb3V0IiwiZW1vdGlvbkNoaXBzIiwibGVuZ3RoIiwidG9CZSIsIkFsZXJ0IiwidGl0bGUiLCJtZXNzYWdlIiwiYnV0dG9ucyIsIl9yZW5kZXIzIiwiZ2V0QnlUZXN0SWQiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIm5vdGVJbnB1dCIsImNoYW5nZVRleHQiLCJzdWJtaXRCdXR0b24iLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImVtb3Rpb25faWRzIiwibm90ZSIsImFueXRoaW5nIiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0Iiwibm90IiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJyZXNwb25zZSIsIl9yZW5kZXI1IiwiX3JlbmRlcjYiLCJfcmVuZGVyNyIsIl9yZW5kZXI4IiwibG9uZ1RleHQiLCJyZXBlYXQiLCJjYWxsQXJncyIsImNhbGxzIiwidG9IYXZlUHJvcGVydHkiLCJ0b0VxdWFsIiwidG9CZUdyZWF0ZXJUaGFuIiwiX3JlbmRlcjkiLCJfcmVuZGVyMTAiLCJfcmVuZGVyMTEiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyJlbW90aW9uTG9nLmUyZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vZTJlL2Vtb3Rpb25Mb2cuZTJlLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBlbW90aW9uU2VydmljZSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYXBpL2Vtb3Rpb25TZXJ2aWNlJztcclxuXHJcbi8vIGVtb3Rpb25TZXJ2aWNlIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvZW1vdGlvblNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldEFsbEVtb3Rpb25zOiBqZXN0LmZuKCksXHJcbiAgcmVjb3JkRW1vdGlvbnM6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8gQWxlcnQg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbGVydC9BbGVydCcsICgpID0+ICh7XHJcbiAgYWxlcnQ6IGplc3QuZm4oKSxcclxufSkpO1xyXG5cclxuLy8gUmVhY3QgTmF0aXZlIFBhcGVyIOy7tO2PrOuEjO2KuCDrqqjtgrlcclxuLy8gUmVhY3QgTmF0aXZlIFBhcGVyIOy7tO2PrOuEjO2KuCDrqqjtgrlcclxuLy8gUmVhY3QgTmF0aXZlIFBhcGVyIOy7tO2PrOuEjO2KuCDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtcGFwZXInLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4gIGNvbnN0IHsgVmlldywgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSwgVGV4dElucHV0OiBSTlRleHRJbnB1dCB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIFRleHQ6ICh7IGNoaWxkcmVuLCBzdHlsZSB9KSA9PiA8VGV4dCBzdHlsZT17c3R5bGV9PntjaGlsZHJlbn08L1RleHQ+LFxyXG4gICAgQ2hpcDogKHsgY2hpbGRyZW4sIG9uUHJlc3MsIHNlbGVjdGVkLCBzdHlsZSwgdGV4dFN0eWxlLCB0ZXN0SUQgfSkgPT4gKFxyXG4gICAgICA8VG91Y2hhYmxlT3BhY2l0eSBcclxuICAgICAgICBvblByZXNzPXtvblByZXNzfSBcclxuICAgICAgICBzdHlsZT17c3R5bGV9IFxyXG4gICAgICAgIHRlc3RJRD17dGVzdElEfVxyXG4gICAgICA+XHJcbiAgICAgICAgPFRleHQgc3R5bGU9e3RleHRTdHlsZX0+e2NoaWxkcmVufTwvVGV4dD5cclxuICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgKSxcclxuICAgIEJ1dHRvbjogKHsgY2hpbGRyZW4sIG9uUHJlc3MsIG1vZGUsIHN0eWxlLCBkaXNhYmxlZCwgdGVzdElEIH0pID0+IChcclxuICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgXHJcbiAgICAgICAgb25QcmVzcz17b25QcmVzc30gXHJcbiAgICAgICAgc3R5bGU9e3N0eWxlfSBcclxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9IFxyXG4gICAgICAgIHRlc3RJRD17dGVzdElEfVxyXG4gICAgICA+XHJcbiAgICAgICAgPFRleHQ+e2NoaWxkcmVufTwvVGV4dD5cclxuICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgKSxcclxuICAgIFRleHRJbnB1dDogKHsgbGFiZWwsIHZhbHVlLCBvbkNoYW5nZVRleHQsIG1vZGUsIG11bHRpbGluZSwgbnVtYmVyT2ZMaW5lcywgc3R5bGUsIHRlc3RJRCB9KSA9PiAoXHJcbiAgICAgIDxSTlRleHRJbnB1dCBcclxuICAgICAgICBwbGFjZWhvbGRlcj17bGFiZWx9XHJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxyXG4gICAgICAgIG9uQ2hhbmdlVGV4dD17b25DaGFuZ2VUZXh0fVxyXG4gICAgICAgIG11bHRpbGluZT17bXVsdGlsaW5lfVxyXG4gICAgICAgIHN0eWxlPXtzdHlsZX1cclxuICAgICAgICB0ZXN0SUQ9e3Rlc3RJRH1cclxuICAgICAgLz5cclxuICAgICksXHJcbiAgICBBY3Rpdml0eUluZGljYXRvcjogKHsgc2l6ZSB9KSA9PiA8Vmlldz48VGV4dD5Mb2FkaW5nLi4uPC9UZXh0PjwvVmlldz5cclxuICB9O1xyXG59KTtcclxuXHJcbi8vIE1hdGVyaWFsIEljb25zIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucycsICgpID0+ICdJY29uJyk7XHJcblxyXG4vLyBOYXZpZ2F0aW9uIOuqqO2CuVxyXG5jb25zdCBtb2NrTmF2aWdhdGlvbiA9IHtcclxuICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gIGdvQmFjazogamVzdC5mbigpLFxyXG59O1xyXG5cclxuLy8gRW1vdGlvbkxvZ1NjcmVlbiDsp4HsoJEg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvRW1vdGlvbkxvZ1NjcmVlbicsICgpID0+IHtcclxuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbiAgY29uc3QgRW1vdGlvbkxvZ1NjcmVlbkNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL3NyYy9zY3JlZW5zL0Vtb3Rpb25Mb2dTY3JlZW4nKS5kZWZhdWx0O1xyXG4gIHJldHVybiAocHJvcHMpID0+IDxFbW90aW9uTG9nU2NyZWVuQ29tcG9uZW50IHsuLi5wcm9wc30gLz47XHJcbn0sIHsgdmlydHVhbDogdHJ1ZSB9KTtcclxuXHJcbi8vIOuqqOydmCDqsJDsoJUg642w7J207YSwXHJcbmNvbnN0IG1vY2tFbW90aW9ucyA9IHtcclxuICBzdGF0dXM6ICdzdWNjZXNzJyxcclxuICBkYXRhOiBbXHJcbiAgICB7IGVtb3Rpb25faWQ6IDEsIG5hbWU6ICftlonrs7UnLCBpY29uOiAnZW1vdGljb24taGFwcHktb3V0bGluZScsIGNvbG9yOiAnI0ZGRDcwMCcgfSxcclxuICAgIHsgZW1vdGlvbl9pZDogMiwgbmFtZTogJ+yKrO2UlCcsIGljb246ICdlbW90aWNvbi1zYWQtb3V0bGluZScsIGNvbG9yOiAnIzQ2ODJCNCcgfSxcclxuICAgIHsgZW1vdGlvbl9pZDogMywgbmFtZTogJ+u2iOyViCcsIGljb246ICdhbGVydC1vdXRsaW5lJywgY29sb3I6ICcjRERBMEREJyB9LFxyXG4gICAgeyBlbW90aW9uX2lkOiA0LCBuYW1lOiAn7ZmU64KoJywgaWNvbjogJ2Vtb3RpY29uLWFuZ3J5LW91dGxpbmUnLCBjb2xvcjogJyNGRjQ1MDAnIH1cclxuICBdXHJcbn07XHJcblxyXG4vLyDsi6TsoJwg7YWM7Iqk7Yq4IOyghCBFbW90aW9uTG9nU2NyZWVuIOyehO2PrO2KuFxyXG5jb25zdCBFbW90aW9uTG9nU2NyZWVuID0gcmVxdWlyZSgnLi4vLi4vc3JjL3NjcmVlbnMvRW1vdGlvbkxvZ1NjcmVlbicpLmRlZmF1bHQ7XHJcblxyXG5kZXNjcmliZSgnRW1vdGlvbkxvZ1NjcmVlbiBFMkUgVGVzdHMnLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAvLyDrqqjrk6Ag66qo7YK5IOy0iOq4sO2ZlFxyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICBcclxuICAgIC8vIOq4sOuzuCDsnZHri7Ug7ISk7KCVXHJcbiAgICAoZW1vdGlvblNlcnZpY2UuZ2V0QWxsRW1vdGlvbnMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICAgIGRhdGE6IG1vY2tFbW90aW9uc1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIGxvZ19pZDogMTIzLFxyXG4gICAgICAgICAgY3JlYXRlZF9hdDogJzIwMjUtMDQtMDlUMTA6MDA6MDBaJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgcmVuZGVyIGxvYWRpbmcgc3RhdGUgaW5pdGlhbGx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgKGVtb3Rpb25TZXJ2aWNlLmdldEFsbEVtb3Rpb25zIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFxyXG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZSh7IGRhdGE6IG1vY2tFbW90aW9ucyB9KTtcclxuICAgICAgICB9LCAxMDApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgeyBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIEFQSeqwgCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QoZW1vdGlvblNlcnZpY2UuZ2V0QWxsRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICAgIFxyXG4gICAgLy8g66Gc65SpIOyDge2DnCDtmZXsnbggLSDthY3siqTtirgg64K07JqpIOqygOyDiVxyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqsJDsoJUg642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEuLi4nKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdzaG91bGQgZGlzcGxheSBlbW90aW9ucyB3aGVuIGxvYWRlZCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRBbGxCeVRlc3RJZCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg642w7J207YSw6rCAIOuhnOuTnOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqsJDsoJUg642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEuLi4nKSkudG9CZU51bGwoKTtcclxuICAgIH0sIHsgdGltZW91dDogNTAwMCB9KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCV7Lmp65Ok7J20IO2RnOyLnOuQmOuKlOyngCDtmZXsnbhcclxuICAgIGNvbnN0IGVtb3Rpb25DaGlwcyA9IGdldEFsbEJ5VGVzdElkKCdlbW90aW9uLWNoaXAnKTtcclxuICAgIGV4cGVjdChlbW90aW9uQ2hpcHMubGVuZ3RoKS50b0JlKDQpO1xyXG4gICAgXHJcbiAgICAvLyDtg4DsnbTti4Dqs7wg7ISc67iM7YOA7J207YuA7J20IOugjOuNlOungSDrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfsmKTripjsnZgg6rCQ7KCVJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2YhOyerCDslrTrlqQg6rCQ7KCV7J2EIOuKkOuBvOqzoCDqs4Tsi6DqsIDsmpQ/JykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIHN1Ym1pdCBlbW90aW9ucyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBBbGVydOyXkCDrjIDtlZwg66qo7YK57J2EIOyImOygle2VmOqzoCDsvZzrsLEg7ZWo7IiY66W8IOyngeygkSDsi6TtlolcclxuICAgIChBbGVydC5hbGVydCBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigodGl0bGUsIG1lc3NhZ2UsIGJ1dHRvbnMpID0+IHtcclxuICAgICAgaWYgKGJ1dHRvbnMgJiYgYnV0dG9ucy5sZW5ndGggPiAwICYmIGJ1dHRvbnNbMF0ub25QcmVzcykge1xyXG4gICAgICAgIGJ1dHRvbnNbMF0ub25QcmVzcygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCwgZ2V0QWxsQnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOuNsOydtO2EsOqwgCDroZzrk5zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgn6rCQ7KCVIOuNsOydtO2EsOulvCDrtojrn6zsmKTripQg7KSRLi4uJykpLnRvQmVOdWxsKCk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyyqyDrsojsp7gg6rCQ7KCVKO2WieuztSkg7ISg7YOdXHJcbiAgICBjb25zdCBlbW90aW9uQ2hpcHMgPSBnZXRBbGxCeVRlc3RJZCgnZW1vdGlvbi1jaGlwJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZW1vdGlvbkNoaXBzWzBdKTtcclxuICAgIFxyXG4gICAgLy8g66mU66qoIOyeheugpVxyXG4gICAgY29uc3Qgbm90ZUlucHV0ID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tbm90ZS1pbnB1dCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobm90ZUlucHV0LCAn7Jik64qY7J2AIOyii+ydgCDsnbzsnbQg66eO7JWY7Ja07JqULicpO1xyXG4gICAgXHJcbiAgICAvLyDsoJzstpwg67KE7Yq8IO2BtOumrVxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHN1Ym1pdEJ1dHRvbik7XHJcbiAgICBcclxuICAgIC8vIEFQSeqwgCDsmKzrsJTrpbgg642w7J207YSw66GcIO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZW1vdGlvblNlcnZpY2UucmVjb3JkRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcclxuICAgICAgICBlbW90aW9uX2lkczogWzFdLFxyXG4gICAgICAgIG5vdGU6ICfsmKTripjsnYAg7KKL7J2AIOydvOydtCDrp47slZjslrTsmpQuJ1xyXG4gICAgICB9KTtcclxuICAgIH0sIHsgdGltZW91dDogNTAwMCB9KTtcclxuICAgIFxyXG4gICAgLy8gQWxlcnQuYWxlcnTsnbQg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ+qwkOyglSDquLDroZ0g7JmE66OMJyxcclxuICAgICAgJ+yYpOuKmOydmCDqsJDsoJXsnbQg7ISx6rO17KCB7Jy866GcIOq4sOuhneuQmOyXiOyKteuLiOuLpC4nLFxyXG4gICAgICBleHBlY3QuYW55dGhpbmcoKVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8gbW9ja05hdmlnYXRpb24uZ29CYWNr7J20IO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbhcclxuICAgIGV4cGVjdChtb2NrTmF2aWdhdGlvbi5nb0JhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIG5vdCBzdWJtaXQgd2l0aG91dCBzZWxlY3RpbmcgYW55IGVtb3Rpb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDrjbDsnbTthLDqsIAg66Gc65Oc65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QocXVlcnlCeVRleHQoJ+qwkOyglSDrjbDsnbTthLDrpbwg67aI65+s7Jik64qUIOykkS4uLicpKS50b0JlTnVsbCgpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiA1MDAwIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrqZTrqqjrp4wg7J6F66Cl7ZWY6rOgIOqwkOyglSDshKDtg53snYAg7JWIIO2VqFxyXG4gICAgY29uc3Qgbm90ZUlucHV0ID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tbm90ZS1pbnB1dCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobm90ZUlucHV0LCAn7Jik64qY7J2YIOuplOuqqCcpO1xyXG4gICAgXHJcbiAgICAvLyDsoJzstpwg67KE7Yq8IO2BtOumrVxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHN1Ym1pdEJ1dHRvbik7XHJcbiAgICBcclxuICAgIC8vIEFsZXJ0LmFsZXJ07J20IO2YuOy2nOuQmOyXiOuKlOyngCDtmZXsnbggKOqyveqzoCDrqZTsi5zsp4ApXHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfslYzrprwnLCAn6rCQ7KCV7J2EIOyggeyWtOuPhCDtlZjrgpgg7J207IOBIOyEoO2Dne2VtOyjvOyEuOyalC4nKTtcclxuICAgIGV4cGVjdChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnc2hvdWxkIGhhbmRsZSBBUEkgZXJyb3Igd2hlbiBsb2FkaW5nIGVtb3Rpb25zJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQVBJIOyYpOulmCDsi5zrrqzroIjsnbTshZhcclxuICAgIChlbW90aW9uU2VydmljZS5nZXRBbGxFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ0FQSSBFcnJvcicpKTtcclxuICAgIFxyXG4gICAgcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOyYpOulmCDslYzrprzsnbQg7ZGc7Iuc65CY7JeI64qU7KeAIO2ZleyduCAo7YOA7J6E7JWE7JuDIOyEpOyglSlcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfsmKTrpZgnLCAn6rCQ7KCVIOuNsOydtO2EsOulvCDrtojrn6zsmKTripQg7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgQVBJIGVycm9yIHdoZW4gcmVjb3JkaW5nIGVtb3Rpb25zJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQVBJIOyYpOulmCDsi5zrrqzroIjsnbTshZhcclxuICAgIChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZSh7XHJcbiAgICAgIHJlc3BvbnNlOiB7IGRhdGE6IHsgbWVzc2FnZTogJ+yEnOuyhCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicgfSB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCwgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOuNsOydtO2EsOqwgCDroZzrk5zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgn6rCQ7KCVIOuNsOydtO2EsOulvCDrtojrn6zsmKTripQg7KSRLi4uJykpLnRvQmVOdWxsKCk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyyqyDrsojsp7gg6rCQ7KCVKO2WieuztSkg7ISg7YOdXHJcbiAgICBjb25zdCBlbW90aW9uQ2hpcHMgPSBnZXRBbGxCeVRlc3RJZCgnZW1vdGlvbi1jaGlwJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZW1vdGlvbkNoaXBzWzBdKTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvCDtgbTrpq1cclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhzdWJtaXRCdXR0b24pO1xyXG4gICAgXHJcbiAgICAvLyDsmKTrpZgg7JWM66a87J20IO2RnOyLnOuQmOyXiOuKlOyngCDtmZXsnbggKO2DgOyehOyVhOybgyDshKTsoJUpXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgn7Jik66WYJywgJ+yEnOuyhCDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiA1MDAwIH0pO1xyXG4gIH0pO1xyXG5cclxuIC8vIO2FjOyKpO2KuCDsvIDsnbTsiqQg7KCE7LK0IOyImOyglVxyXG50ZXN0KCdzaG91bGQgdG9nZ2xlIGVtb3Rpb24gc2VsZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQsIGdldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgXHJcbiAgLy8g6rCQ7KCVIOuNsOydtO2EsOqwgCDroZzrk5zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqsJDsoJUg642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEuLi4nKSkudG9CZU51bGwoKTtcclxuICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgXHJcbiAgLy8g7LKrIOuyiOynuCDqsJDsoJUo7ZaJ67O1KSDshKDtg51cclxuICBjb25zdCBlbW90aW9uQ2hpcHMgPSBnZXRBbGxCeVRlc3RJZCgnZW1vdGlvbi1jaGlwJyk7XHJcbiAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25DaGlwc1swXSk7XHJcbiAgXHJcbiAgLy8g7ZaJ67O1IOqwkOyglSDri6Tsi5wg7YG066at7ZWY7JesIOyEoO2DnSDtlbTsoJxcclxuICBmaXJlRXZlbnQucHJlc3MoZW1vdGlvbkNoaXBzWzBdKTtcclxuICBcclxuICAvLyDrsoTtirwg7KG07J6sIO2ZleyduOunjCDsiJjtlokgLSB0ZXN0SUTroZwg7KCR6re8XHJcbiAgY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gIGV4cGVjdChzdWJtaXRCdXR0b24pLnRvQmVUcnV0aHkoKTtcclxufSk7XHJcblxyXG4gIC8vIOy2lOqwgCDthYzsiqTtirgg7LyA7J207IqkIDE6IOyXrOufrCDqsJDsoJUg64+Z7IucIOyEoO2DnSDthYzsiqTtirhcclxuICB0ZXN0KCdzaG91bGQgc3VibWl0IG11bHRpcGxlIGVtb3Rpb25zIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIEFsZXJ0IOuqqO2CuSDshKTsoJVcclxuICAgIChBbGVydC5hbGVydCBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigodGl0bGUsIG1lc3NhZ2UsIGJ1dHRvbnMpID0+IHtcclxuICAgICAgaWYgKGJ1dHRvbnMgJiYgYnV0dG9ucy5sZW5ndGggPiAwICYmIGJ1dHRvbnNbMF0ub25QcmVzcykge1xyXG4gICAgICAgIGJ1dHRvbnNbMF0ub25QcmVzcygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCwgZ2V0QnlUZXN0SWQsIHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOuNsOydtO2EsOqwgCDroZzrk5zrkKAg65WM6rmM7KeAIOuMgOq4sFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgn6rCQ7KCVIOuNsOydtO2EsOulvCDrtojrn6zsmKTripQg7KSRLi4uJykpLnRvQmVOdWxsKCk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyXrOufrCDqsJDsoJUg7ISg7YOdICjtlonrs7UsIOu2iOyViCwg7ZmU64KoKVxyXG4gICAgY29uc3QgZW1vdGlvbkNoaXBzID0gZ2V0QWxsQnlUZXN0SWQoJ2Vtb3Rpb24tY2hpcCcpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25DaGlwc1swXSk7IC8vIO2WieuztVxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25DaGlwc1syXSk7IC8vIOu2iOyViFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25DaGlwc1szXSk7IC8vIO2ZlOuCqFxyXG4gICAgXHJcbiAgICAvLyDrqZTrqqgg7J6F66ClXHJcbiAgICBjb25zdCBub3RlSW5wdXQgPSBnZXRCeVRlc3RJZCgnZW1vdGlvbi1ub3RlLWlucHV0Jyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChub3RlSW5wdXQsICfsl6zrn6wg6rCQ7KCV7J20IOuPmeyLnOyXkCDripDqu7TsoLjsmpQuJyk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirwg7YG066atXHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIFxyXG4gICAgLy8gQVBJ6rCAIOyYrOuwlOuluCDrjbDsnbTthLDroZwg7Zi47Lac65CY7JeI64qU7KeAIO2ZleyduCAo7Jes65+sIOqwkOyglSBJROqwgCDtj6ztlajrkJjslrTslbwg7ZWoKVxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucykudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xyXG4gICAgICAgIGVtb3Rpb25faWRzOiBbMSwgMywgNF0sIC8vIO2WieuztSwg67aI7JWILCDtmZTrgqjsnZggSURcclxuICAgICAgICBub3RlOiAn7Jes65+sIOqwkOygleydtCDrj5nsi5zsl5Ag64qQ6ru07KC47JqULidcclxuICAgICAgfSk7XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyEseqztSDslYzrprwg7ZmV7J24XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAn6rCQ7KCVIOq4sOuhnSDsmYTro4wnLFxyXG4gICAgICAn7Jik64qY7J2YIOqwkOygleydtCDshLHqs7XsoIHsnLzroZwg6riw66Gd65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyDrkqTroZwg6rCA6riwIO2YuOy2nCDtmZXsnbhcclxuICAgIGV4cGVjdChtb2NrTmF2aWdhdGlvbi5nb0JhY2spLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgLy8g7LaU6rCAIO2FjOyKpO2KuCDsvIDsnbTsiqQgMjog6ri0IOuplOuqqCDthY3siqTtirgg7J6F66ClIOyymOumrCDthYzsiqTtirhcclxuICB0ZXN0KCdzaG91bGQgaGFuZGxlIGxvbmcgbWVtbyB0ZXh0IGlucHV0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQWxlcnQg66qo7YK5IOyEpOyglVxyXG4gICAgKEFsZXJ0LmFsZXJ0IGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCh0aXRsZSwgbWVzc2FnZSwgYnV0dG9ucykgPT4ge1xyXG4gICAgICBpZiAoYnV0dG9ucyAmJiBidXR0b25zLmxlbmd0aCA+IDAgJiYgYnV0dG9uc1swXS5vblByZXNzKSB7XHJcbiAgICAgICAgYnV0dG9uc1swXS5vblByZXNzKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkLCBnZXRCeVRlc3RJZCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg642w7J207YSw6rCAIOuhnOuTnOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqsJDsoJUg642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEuLi4nKSkudG9CZU51bGwoKTtcclxuICAgIH0sIHsgdGltZW91dDogNTAwMCB9KTtcclxuICAgIFxyXG4gICAgLy8g7LKrIOuyiOynuCDqsJDsoJUo7ZaJ67O1KSDshKDtg51cclxuICAgIGNvbnN0IGVtb3Rpb25DaGlwcyA9IGdldEFsbEJ5VGVzdElkKCdlbW90aW9uLWNoaXAnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhlbW90aW9uQ2hpcHNbMF0pO1xyXG4gICAgXHJcbiAgICAvLyDquLQg66mU66qoIO2FjeyKpO2KuCDsnoXroKUgKDIwMOyekCDsnbTsg4EpXHJcbiAgICBjb25zdCBsb25nVGV4dCA9ICfsmKTripjsnYAg7KCV66eQIOyii+ydgCDtlZjro6jsmIDsirXri4jri6QuICcucmVwZWF0KDEwKSArIFxyXG4gICAgICAgICAgICAgICAgICAgICAn66eO7J2AIOydvOydtCDsnojsl4jsp4Drp4wg66qo65GQIOyemCDtlbTqsrDrkJjsl4jqs6Ag6riw67aE7J20IOyii+yKteuLiOuLpC4nLnJlcGVhdCg1KTtcclxuICAgIFxyXG4gICAgY29uc3Qgbm90ZUlucHV0ID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tbm90ZS1pbnB1dCcpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQobm90ZUlucHV0LCBsb25nVGV4dCk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirwg7YG066atXHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIFxyXG4gICAgLy8gQVBJ6rCAIO2YuOy2nOuQmOyXiOuKlOyngOunjCDtmZXsnbjtlZjqs6Ag6rWs7LK07KCB7J24IO2FjeyKpO2KuCDrgrTsmqnsnYAg6rKA7Kad7ZWY7KeAIOyViuydjFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgICBcclxuICAgICAgLy8gQVBJIO2YuOy2nCDsnbjsnpAg7ZmV7J24ICjqsJDsoJUgSUTrp4wg6rKA7KadKVxyXG4gICAgICBjb25zdCBjYWxsQXJncyA9IChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHNbMF1bMF07XHJcbiAgICAgIGV4cGVjdChjYWxsQXJncykudG9IYXZlUHJvcGVydHkoJ2Vtb3Rpb25faWRzJyk7XHJcbiAgICAgIGV4cGVjdChjYWxsQXJncy5lbW90aW9uX2lkcykudG9FcXVhbChbMV0pO1xyXG4gICAgICBcclxuICAgICAgLy8gbm90ZSDsho3shLHsnbQg7KG07J6s7ZWY64qU7KeA66eMIO2ZleyduO2VmOqzoCDqtazssrTsoIHsnbgg64K07Jqp7J2AIOqygOymne2VmOyngCDslYrsnYxcclxuICAgICAgZXhwZWN0KGNhbGxBcmdzKS50b0hhdmVQcm9wZXJ0eSgnbm90ZScpO1xyXG4gICAgICBleHBlY3QodHlwZW9mIGNhbGxBcmdzLm5vdGUpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICBleHBlY3QoY2FsbEFyZ3Mubm90ZS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigyMDApOyAvLyDquLjsnbTrp4wg7ZmV7J24XHJcbiAgICB9LCB7IHRpbWVvdXQ6IDUwMDAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyEseqztSDslYzrprwg7ZmV7J24XHJcbiAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAn6rCQ7KCVIOq4sOuhnSDsmYTro4wnLFxyXG4gICAgICAn7Jik64qY7J2YIOqwkOygleydtCDshLHqs7XsoIHsnLzroZwg6riw66Gd65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gIH0pO1xyXG5cclxuICAvLyDstpTqsIAg7YWM7Iqk7Yq4IOy8gOydtOyKpCAzOiDrhKTtirjsm4ztgawg7YOA7J6E7JWE7JuDIOyLnOuurOugiOydtOyFmFxyXG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbmV0d29yayB0aW1lb3V0IHdoZW4gc3VibWl0dGluZyBlbW90aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIOuEpO2KuOybjO2BrCDtg4DsnoTslYTsm4Mg7Jik66WYIOyLnOuurOugiOydtOyFmFxyXG4gICAgKGVtb3Rpb25TZXJ2aWNlLnJlY29yZEVtb3Rpb25zIGFzIGplc3QuTW9jaykubW9ja1JlamVjdGVkVmFsdWVPbmNlKHtcclxuICAgICAgbWVzc2FnZTogJ+uEpO2KuOybjO2BrCDsmpTssq0g7Iuc6rCE7J20IOy0iOqzvOuQmOyXiOyKteuLiOuLpC4nLFxyXG4gICAgICByZXNwb25zZTogeyBcclxuICAgICAgICBkYXRhOiB7IFxyXG4gICAgICAgICAgbWVzc2FnZTogJ+uEpO2KuOybjO2BrCDsmpTssq0g7Iuc6rCE7J20IOy0iOqzvOuQmOyXiOyKteuLiOuLpC4nIFxyXG4gICAgICAgIH0gXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkLCBnZXRCeVRlc3RJZCwgcXVlcnlCeVRleHQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg642w7J207YSw6rCAIOuhnOuTnOuQoCDrlYzquYzsp4Ag64yA6riwXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHF1ZXJ5QnlUZXh0KCfqsJDsoJUg642w7J207YSw66W8IOu2iOufrOyYpOuKlCDspJEuLi4nKSkudG9CZU51bGwoKTtcclxuICAgIH0sIHsgdGltZW91dDogNTAwMCB9KTtcclxuICAgIFxyXG4gICAgLy8g7LKrIOuyiOynuCDqsJDsoJUo7ZaJ67O1KSDshKDtg51cclxuICAgIGNvbnN0IGVtb3Rpb25DaGlwcyA9IGdldEFsbEJ5VGVzdElkKCdlbW90aW9uLWNoaXAnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhlbW90aW9uQ2hpcHNbMF0pO1xyXG4gICAgXHJcbiAgICAvLyDsoJzstpwg67KE7Yq8IO2BtOumrVxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Vtb3Rpb24tc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKHN1Ym1pdEJ1dHRvbik7XHJcbiAgICBcclxuICAgIC8vIOyYpOulmCDslYzrprzsnbQg7ZGc7Iuc65CY7JeI64qU7KeAIO2ZleyduCAo7YOA7J6E7JWE7JuDIOuplOyLnOyngClcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCfsmKTrpZgnLCAn64Sk7Yq47JuM7YGsIOyalOyyrSDsi5zqsITsnbQg7LSI6rO865CY7JeI7Iq164uI64ukLicpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiA1MDAwIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrkqTroZzqsIDquLDqsIAg7Zi47Lac65CY7KeAIOyViuyVmOuKlOyngCDtmZXsnbggKOyYpOulmCDrsJzsg50g7IucKVxyXG4gICAgZXhwZWN0KG1vY2tOYXZpZ2F0aW9uLmdvQmFjaykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgLy8g7LaU6rCAIO2FjOyKpO2KuCDsvIDsnbTsiqQgNDog66qo65OgIOqwkOyglSDrjbDsnbTthLAg66CM642U66eBIO2ZleyduFxyXG4gIHRlc3QoJ3Nob3VsZCByZW5kZXIgYWxsIGVtb3Rpb24gZGF0YSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDrjbDsnbTthLDqsIAg66Gc65Oc65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QocXVlcnlCeVRleHQoJ+qwkOyglSDrjbDsnbTthLDrpbwg67aI65+s7Jik64qUIOykkS4uLicpKS50b0JlTnVsbCgpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiA1MDAwIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrqqjrk6Ag6rCQ7KCVIO2VreuqqeydtCDsmKzrsJTrpbTqsowg66CM642U66eB65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgY29uc3QgZW1vdGlvbkNoaXBzID0gZ2V0QWxsQnlUZXN0SWQoJ2Vtb3Rpb24tY2hpcCcpO1xyXG4gICAgZXhwZWN0KGVtb3Rpb25DaGlwcy5sZW5ndGgpLnRvQmUoNCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIOy2lOqwgCDthYzsiqTtirgg7LyA7J207IqkIDU6IOuplOuqqCDsl4bsnbQg6rCQ7KCV66eMIOygnOy2nO2VmOuKlCDsvIDsnbTsiqQg7YWM7Iqk7Yq4XHJcbiAgdGVzdCgnc2hvdWxkIHN1Ym1pdCBlbW90aW9ucyB3aXRob3V0IG1lbW8nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBBbGVydCDrqqjtgrkg7ISk7KCVXHJcbiAgICAoQWxlcnQuYWxlcnQgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKHRpdGxlLCBtZXNzYWdlLCBidXR0b25zKSA9PiB7XHJcbiAgICAgIGlmIChidXR0b25zICYmIGJ1dHRvbnMubGVuZ3RoID4gMCAmJiBidXR0b25zWzBdLm9uUHJlc3MpIHtcclxuICAgICAgICBidXR0b25zWzBdLm9uUHJlc3MoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQsIGdldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDrjbDsnbTthLDqsIAg66Gc65Oc65CgIOuVjOq5jOyngCDrjIDquLBcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QocXVlcnlCeVRleHQoJ+qwkOyglSDrjbDsnbTthLDrpbwg67aI65+s7Jik64qUIOykkS4uLicpKS50b0JlTnVsbCgpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiA1MDAwIH0pO1xyXG4gICAgXHJcbiAgICAvLyDrkZAg67KI7Ke4IOqwkOyglSjsiqztlJQpIOyEoO2DnVxyXG4gICAgY29uc3QgZW1vdGlvbkNoaXBzID0gZ2V0QWxsQnlUZXN0SWQoJ2Vtb3Rpb24tY2hpcCcpO1xyXG4gICAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25DaGlwc1sxXSk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirwg7YG066atXHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIFxyXG4gICAgLy8gQVBJ6rCAIOuplOuqqCDsl4bsnbQg6rCQ7KCV66eMIO2PrO2VqO2VmOyXrCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KGVtb3Rpb25TZXJ2aWNlLnJlY29yZEVtb3Rpb25zKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XHJcbiAgICAgICAgZW1vdGlvbl9pZHM6IFsyXSwgLy8g7Iqs7ZSU7J2YIElEXHJcbiAgICAgICAgbm90ZTogdW5kZWZpbmVkXHJcbiAgICAgIH0pO1xyXG4gICAgfSwgeyB0aW1lb3V0OiA1MDAwIH0pO1xyXG4gICAgXHJcbiAgICAvLyDshLHqs7Ug7JWM66a8IO2ZleyduFxyXG4gICAgZXhwZWN0KEFsZXJ0LmFsZXJ0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcclxuICAgICAgJ+qwkOyglSDquLDroZ0g7JmE66OMJyxcclxuICAgICAgJ+yYpOuKmOydmCDqsJDsoJXsnbQg7ISx6rO17KCB7Jy866GcIOq4sOuhneuQmOyXiOyKteuLiOuLpC4nLFxyXG4gICAgICBleHBlY3QuYW55dGhpbmcoKVxyXG4gICAgKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFPQUEsV0FBQSxHQUFLQyxJQUFJLDBDQUEwQztFQUFBLE9BQU87SUFDeERDLGNBQWMsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN6QkMsY0FBYyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUMxQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hKLFdBQUEsR0FBS0Ms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T0FBTyxFQUFLO01BQ3pFLElBQUlBLE9BQU8sSUFBSUEsT0FBTyxDQUFDTCxNQUFNLEdBQUcsQ0FBQyxJQUFJSyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMxRSxPQUFPLEVBQUU7UUFDdkQwRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMxRSxPQUFPLENBQUMsQ0FBQztNQUN0QjtJQUNGLENBQUMsQ0FBQztJQUVGLElBQUF5RyxTQUFBLEdBQXFELElBQUFqRCxtQkFBTSxFQUFDLElBQUE3RCxXQUFBLENBQUFDLEdBQUEsRUFBQzZDLGdCQUFnQjtRQUFDZ0IsVUFBVSxFQUFFMUI7TUFBZSxDQUFFLENBQUMsQ0FBQztNQUFyR2lDLGNBQWMsR0FBQXlDLFNBQUEsQ0FBZHpDLGNBQWM7TUFBRVksV0FBVyxHQUFBNkIsU0FBQSxDQUFYN0IsV0FBVztNQUFFbEIsV0FBVyxHQUFBK0MsU0FBQSxDQUFYL0MsV0FBVztJQUdoRCxNQUFNLElBQUFPLG9CQUFPLEVBQUMsWUFBTTtNQUNsQk4sTUFBTSxDQUFDRCxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDUSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDLEVBQUU7TUFBRUMsT0FBTyxFQUFFO0lBQUssQ0FBQyxDQUFDO0lBR3JCLElBQU1DLFlBQVksR0FBR0osY0FBYyxDQUFDLGNBQWMsQ0FBQztJQUNuRGEsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDVixZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFHaEMsSUFBTWEsWUFBWSxHQUFHTCxXQUFXLENBQUMsdUJBQXVCLENBQUM7SUFDekRDLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0csWUFBWSxDQUFDO0lBRzdCLE1BQU0sSUFBQWhCLG9CQUFPLEVBQUMsWUFBTTtNQUNsQk4sTUFBTSxDQUFDZCx1QkFBYyxDQUFDL0QsY0FBYyxDQUFDLENBQUNvRyxvQkFBb0IsQ0FBQztRQUN6REMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hCQyxJQUFJLEVBQUVzQjtNQUNSLENBQUMsQ0FBQztJQUNKLENBQUMsRUFBRTtNQUFFdkMsT0FBTyxFQUFFO0lBQUssQ0FBQyxDQUFDO0lBR3JCUixNQUFNLENBQUNZLG1CQUFLLENBQUN4RixLQUFLLENBQUMsQ0FBQ21HLG9CQUFvQixDQUN0QyxVQUFVLEVBQ1Ysd0JBQXdCLEVBQ3hCdkIsTUFBTSxDQUFDMEIsUUFBUSxDQUFDLENBQ2xCLENBQUM7RUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=