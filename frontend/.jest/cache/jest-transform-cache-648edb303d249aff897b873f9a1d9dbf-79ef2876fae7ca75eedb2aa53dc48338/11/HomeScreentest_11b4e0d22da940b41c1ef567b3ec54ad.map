{"version":3,"names":["_getJestObj","mock","_HomeScreen","require","_require","jest","describe","it","setIsLoading","fn","setIsDialogVisible","content","emotion","label","icon","color","imageUrl","result","handlePostSubmission","expect","toBe","toHaveBeenCalledWith","advanceTimersByTime","setImageUrl","handleImageUploadAction","posts","id","anonymousId","emotionIcon","image","likes","comments","timestamp","setPosts","handleLikeAction","toHaveBeenCalled","updatedPosts","calls","commentContent","handleCommentAction","length","beforeEach","useFakeTimers","afterEach","useRealTimers"],"sources":["HomeScreen.test.tsx"],"sourcesContent":["// __tests__/utils/HomeScreenUtils.test.tsx\r\nimport {\r\n  handlePostSubmission,\r\n  handleImageUploadAction,\r\n  handleLikeAction,\r\n  handleCommentAction,\r\n  renderEmotionIcon\r\n} from '../../src/screens/HomeScreen';\r\nimport { Post } from '../../src/screens/HomeScreen';\r\n\r\n// MaterialCommunityIcons 모킹\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'MaterialCommunityIcons');\r\n\r\ndescribe('HomeScreen 유틸리티 함수', () => {\r\n  // handlePostSubmission 테스트\r\n  describe('handlePostSubmission', () => {\r\n    it('내용과 감정이 있을 때 true를 반환해야 함', () => {\r\n      const setIsLoading = jest.fn();\r\n      const setIsDialogVisible = jest.fn();\r\n      const content = '테스트 게시물';\r\n      const emotion = { label: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' };\r\n      const imageUrl = 'https://example.com/image.jpg';\r\n\r\n      const result = handlePostSubmission(\r\n        content,\r\n        emotion,\r\n        imageUrl,\r\n        setIsLoading,\r\n        setIsDialogVisible\r\n      );\r\n\r\n      expect(result).toBe(true);\r\n      expect(setIsLoading).toHaveBeenCalledWith(true);\r\n      \r\n      // setTimeout이 호출되었으므로 타이머를 진행시킴\r\n      jest.advanceTimersByTime(1000);\r\n      \r\n      expect(setIsLoading).toHaveBeenCalledWith(false);\r\n      expect(setIsDialogVisible).toHaveBeenCalledWith(true);\r\n    });\r\n\r\n    it('내용 또는 감정이 없을 때 false를 반환해야 함', () => {\r\n      const setIsLoading = jest.fn();\r\n      const setIsDialogVisible = jest.fn();\r\n      const imageUrl = 'https://example.com/image.jpg';\r\n\r\n      // 내용 없음\r\n      let result = handlePostSubmission(\r\n        '',\r\n        { label: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n        imageUrl,\r\n        setIsLoading,\r\n        setIsDialogVisible\r\n      );\r\n      expect(result).toBe(false);\r\n\r\n      // 감정 없음\r\n      result = handlePostSubmission(\r\n        '테스트 게시물',\r\n        null,\r\n        imageUrl,\r\n        setIsLoading,\r\n        setIsDialogVisible\r\n      );\r\n      expect(result).toBe(false);\r\n    });\r\n  });\r\n\r\n  // handleImageUploadAction 테스트\r\n  describe('handleImageUploadAction', () => {\r\n    it('이미지 URL을 설정해야 함', () => {\r\n      const setImageUrl = jest.fn();\r\n      handleImageUploadAction(setImageUrl);\r\n      expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');\r\n    });\r\n  });\r\n\r\n  // handleLikeAction 테스트\r\n  describe('handleLikeAction', () => {\r\n    it('좋아요 수를 증가시켜야 함', () => {\r\n      const posts: Post[] = [\r\n        {\r\n          id: 1,\r\n          anonymousId: '익명1',\r\n          content: '테스트 게시물',\r\n          emotion: '행복',\r\n          emotionIcon: '😊',\r\n          image: '',\r\n          likes: 5,\r\n          comments: [],\r\n          timestamp: '1시간 전'\r\n        }\r\n      ];\r\n      const setPosts = jest.fn();\r\n      \r\n      handleLikeAction(posts, 1, setPosts);\r\n      \r\n      // setPosts를 호출할 때 posts 배열이 업데이트되었는지 확인\r\n      expect(setPosts).toHaveBeenCalled();\r\n      const updatedPosts = setPosts.mock.calls[0][0];\r\n      expect(updatedPosts[0].likes).toBe(6);\r\n    });\r\n  });\r\n\r\n  // handleCommentAction 테스트\r\n  describe('handleCommentAction', () => {\r\n    it('댓글을 추가해야 함', () => {\r\n      const posts: Post[] = [\r\n        {\r\n          id: 1,\r\n          anonymousId: '익명1',\r\n          content: '테스트 게시물',\r\n          emotion: '행복',\r\n          emotionIcon: '😊',\r\n          image: '',\r\n          likes: 5,\r\n          comments: [],\r\n          timestamp: '1시간 전'\r\n        }\r\n      ];\r\n      const setPosts = jest.fn();\r\n      const commentContent = '새 댓글';\r\n      \r\n      handleCommentAction(posts, 1, commentContent, setPosts);\r\n      \r\n      // setPosts를 호출할 때 posts 배열에 댓글이 추가되었는지 확인\r\n      expect(setPosts).toHaveBeenCalled();\r\n      const updatedPosts = setPosts.mock.calls[0][0];\r\n      expect(updatedPosts[0].comments.length).toBe(1);\r\n      expect(updatedPosts[0].comments[0].content).toBe('새 댓글');\r\n    });\r\n  });\r\n\r\n  // timers 설정\r\n  beforeEach(() => {\r\n    jest.useFakeTimers();\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.useRealTimers();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}