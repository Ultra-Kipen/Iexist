d037dfed9a44d1a2ba4c2bba30ee82dc
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getPostById: jest.fn().mockResolvedValue({
      data: {
        post: {}
      }
    }),
    getComments: jest.fn().mockResolvedValue({
      data: {
        comments: []
      }
    }),
    addComment: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Button: function Button(props) {
      return (0, _jsxRuntime.jsx)("button", {
        "data-testid": "button",
        onClick: props.onPress,
        disabled: props.disabled || props.loading,
        children: props.loading ? 'Loading...' : props.children
      });
    }
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: function SafeAreaView(props) {
      return (0, _jsxRuntime.jsx)("div", {
        children: props.children
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PostScreen = _interopRequireDefault(require("../../src/screens/PostScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPost = {
  post_id: 1,
  user_id: 101,
  content: '테스트 게시물 내용입니다.',
  emotion_summary: '행복',
  like_count: 5,
  comment_count: 2,
  created_at: new Date().toISOString()
};
var mockComments = [{
  comment_id: 1,
  user_id: 102,
  content: '좋은 글이네요!',
  is_anonymous: false,
  created_at: new Date().toISOString()
}];
describe('PostScreen', function () {
  var mockRoute = {
    params: {
      postId: 1
    }
  };
  var mockNavigation = {};
  beforeEach(function () {
    jest.clearAllMocks();
    _postService.default.getPostById.mockResolvedValue({
      data: {
        post: mockPost
      }
    });
    _postService.default.getComments.mockResolvedValue({
      data: {
        comments: mockComments
      }
    });
  });
  it('renders the component without crashing', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostScreen.default, {
      route: mockRoute,
      navigation: mockNavigation
    }));
    expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    expect(_postService.default.getComments).toHaveBeenCalledWith(1);
  });
  it('handles error state when API fails', function () {
    _postService.default.getPostById.mockRejectedValueOnce(new Error('API 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostScreen.default, {
      route: mockRoute,
      navigation: mockNavigation
    }));
    expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,