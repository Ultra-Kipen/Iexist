70b82d5df93878e35b66b564265eb1f5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _NativeAnimatedValidation = require("../../../src/private/animated/NativeAnimatedValidation");
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function flatAnimatedNodes(transforms) {
  var nodes = [];
  for (var ii = 0, length = transforms.length; ii < length; ii++) {
    var transform = transforms[ii];
    for (var key in transform) {
      var value = transform[key];
      if (value instanceof _AnimatedNode.default) {
        nodes.push(value);
      }
    }
  }
  return nodes;
}
var _nodes = (0, _classPrivateFieldLooseKey2.default)("nodes");
var AnimatedTransform = exports.default = function (_AnimatedWithChildren) {
  function AnimatedTransform(nodes, transforms, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedTransform);
    _this = _callSuper(this, AnimatedTransform, [config]);
    Object.defineProperty(_this, _nodes, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
    _this._transforms = transforms;
    return _this;
  }
  (0, _inherits2.default)(AnimatedTransform, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedTransform, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__makeNative(platformConfig);
      }
      _superPropGet(AnimatedTransform, "__makeNative", this, 3)([platformConfig]);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return mapTransforms(this._transforms, function (animatedNode) {
        return animatedNode.__getValue();
      });
    }
  }, {
    key: "__getValueWithStaticTransforms",
    value: function __getValueWithStaticTransforms(staticTransforms) {
      var values = [];
      mapTransforms(this._transforms, function (node) {
        values.push(node.__getValue());
      });
      return mapTransforms(staticTransforms, function () {
        return values.shift();
      });
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return mapTransforms(this._transforms, function (animatedNode) {
        return animatedNode.__getAnimatedValue();
      });
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__addChild(this);
      }
      _superPropGet(AnimatedTransform, "__attach", this, 3)([]);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__removeChild(this);
      }
      _superPropGet(AnimatedTransform, "__detach", this, 3)([]);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var transformsConfig = [];
      var transforms = this._transforms;
      for (var ii = 0, length = transforms.length; ii < length; ii++) {
        var transform = transforms[ii];
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof _AnimatedNode.default) {
            transformsConfig.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transformsConfig.push({
              type: 'static',
              property: key,
              value: _NativeAnimatedHelper.default.transformDataType(value)
            });
          }
        }
      }
      if (true) {
        (0, _NativeAnimatedValidation.validateTransform)(transformsConfig);
      }
      return {
        type: 'transform',
        transforms: transformsConfig,
        debugID: this.__getDebugID()
      };
    }
  }], [{
    key: "from",
    value: function from(transforms) {
      var nodes = flatAnimatedNodes(Array.isArray(transforms) ? transforms : []);
      if (nodes.length === 0) {
        return null;
      }
      return new AnimatedTransform(nodes, transforms);
    }
  }]);
}(_AnimatedWithChildren2.default);
function mapTransforms(transforms, mapFunction) {
  return transforms.map(function (transform) {
    var result = {};
    for (var key in transform) {
      var value = transform[key];
      if (value instanceof _AnimatedNode.default) {
        result[key] = mapFunction(value);
      } else if (Array.isArray(value)) {
        result[key] = value.map(function (element) {
          return element instanceof _AnimatedNode.default ? mapFunction(element) : element;
        });
      } else if (typeof value === 'object') {
        var object = {};
        for (var propertyName in value) {
          var propertyValue = value[propertyName];
          object[propertyName] = propertyValue instanceof _AnimatedNode.default ? mapFunction(propertyValue) : propertyValue;
        }
        result[key] = object;
      } else {
        result[key] = value;
      }
    }
    return result;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,