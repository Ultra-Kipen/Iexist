{"version":3,"names":["_client","_interopRequireDefault","require","tagService","exports","client","getAllTags","_getAllTags","_asyncToGenerator2","default","response","get","data","error","Error","apply","arguments","getPopularTags","_getPopularTags","limit","length","undefined","params","createTag","_createTag","name","post","_x","getTagById","_getTagById","tagId","_x2","updateTag","_updateTag","put","_x3","_x4","deleteTag","_deleteTag","delete","_x5","getPostsByTag","_getPostsByTag","_x6","_x7","searchTags","_searchTags","query","_x8","addTagToPost","_addTagToPost","postId","postType","tag_id","post_type","_x9","_x10","_x11","removeTagFromPost","_removeTagFromPost","_x12","_x13","_x14","getPostTags","_getPostTags","_x15","_x16","_default"],"sources":["tagService.ts"],"sourcesContent":["// src/services/api/tagService.ts\r\n\r\nimport client from './client';\r\n\r\nexport interface Tag {\r\n  tag_id: number;\r\n  name: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  [key: string]: string | number | undefined; // 인덱스 시그니처 추가\r\n}\r\n\r\nexport interface TagWithCount extends Tag {\r\n  post_count: number;\r\n}\r\n\r\nexport const tagService = {\r\n  client, // 테스트를 위해 client 객체 노출\r\n  \r\n  // 모든 태그 가져오기\r\n  getAllTags: async () => {\r\n    try {\r\n      const response = await tagService.client.get<{\r\n        status: string;\r\n        data: Tag[];\r\n      }>('/tags');\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그 목록 조회에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 인기 태그 가져오기 (사용 횟수 기준)\r\n  getPopularTags: async (limit: number = 10) => {\r\n    try {\r\n      const response = await tagService.client.get<{\r\n        status: string;\r\n        data: TagWithCount[];\r\n      }>('/tags/popular', { params: { limit } });\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('인기 태그 조회에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 태그 생성하기\r\n  createTag: async (name: string) => {\r\n    try {\r\n      const response = await tagService.client.post<{\r\n        status: string;\r\n        data: Tag;\r\n      }>('/tags', { name });\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그 생성에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 특정 태그 정보 가져오기\r\n  getTagById: async (tagId: number) => {\r\n    try {\r\n      const response = await tagService.client.get<{\r\n        status: string;\r\n        data: Tag;\r\n      }>(`/tags/${tagId}`);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그 정보 조회에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 태그 수정하기\r\n  updateTag: async (tagId: number, name: string) => {\r\n    try {\r\n      const response = await tagService.client.put<{\r\n        status: string;\r\n        data: Tag;\r\n      }>(`/tags/${tagId}`, { name });\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그 수정에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 태그 삭제하기\r\n  deleteTag: async (tagId: number) => {\r\n    try {\r\n      const response = await tagService.client.delete<{\r\n        status: string;\r\n        message: string;\r\n      }>(`/tags/${tagId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그 삭제에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 태그로 게시물 검색하기\r\n  getPostsByTag: async (tagId: number, params?: {\r\n    page?: number;\r\n    limit?: number;\r\n    post_type?: 'my_day' | 'someone_day';\r\n  }) => {\r\n    try {\r\n      const response = await tagService.client.get<{\r\n        status: string;\r\n        data: any[]; // 실제 반환 타입에 맞게 조정 필요\r\n        pagination?: {\r\n          total: number;\r\n          page: number;\r\n          limit: number;\r\n        }\r\n      }>(`/tags/${tagId}/posts`, { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그별 게시물 조회에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 태그 검색하기 (이름으로)\r\n  searchTags: async (query: string) => {\r\n    try {\r\n      const response = await tagService.client.get<{\r\n        status: string;\r\n        data: Tag[];\r\n      }>('/tags/search', { params: { query } });\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('태그 검색에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 특정 게시물에 태그 추가하기\r\n  addTagToPost: async (postId: number, tagId: number, postType: 'my_day' | 'someone_day') => {\r\n    try {\r\n      const response = await tagService.client.post<{\r\n        status: string;\r\n        message: string;\r\n      }>(`/posts/${postId}/tags`, { tag_id: tagId, post_type: postType });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('게시물에 태그 추가에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 특정 게시물에서 태그 제거하기\r\n  removeTagFromPost: async (postId: number, tagId: number, postType: 'my_day' | 'someone_day') => {\r\n    try {\r\n      const response = await tagService.client.delete<{\r\n        status: string;\r\n        message: string;\r\n      }>(`/posts/${postId}/tags/${tagId}?post_type=${postType}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('게시물에서 태그 제거에 실패했습니다');\r\n    }\r\n  },\r\n  \r\n  // 특정 게시물의 모든 태그 가져오기\r\n  getPostTags: async (postId: number, postType: 'my_day' | 'someone_day') => {\r\n    try {\r\n      const response = await tagService.client.get<{\r\n        status: string;\r\n        data: Tag[];\r\n      }>(`/posts/${postId}/tags?post_type=${postType}`);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error('게시물의 태그 목록 조회에 실패했습니다');\r\n    }\r\n  }\r\n};\r\n\r\nexport default tagService;"],"mappings":"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","ignoreList":[]}