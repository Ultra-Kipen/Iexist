e2d489ee6c90bf869b123310d6751c63
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = require("react-test-renderer");
var _Modal = _interopRequireDefault(require("../../src/components/Modal"));
var _jsxRuntime = require("react/jsx-runtime");
var TestContent = function TestContent() {
  return (0, _jsxRuntime.jsx)("div", {
    children: "Test Content"
  });
};
describe('Modal Component', function () {
  var mockOnClose = jest.fn();
  beforeEach(function () {
    mockOnClose.mockClear();
  });
  it('renders nothing when not visible', function () {
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: false,
      onClose: mockOnClose,
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    expect(tree.toJSON()).toBeNull();
  });
  it('renders content when visible', function () {
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: true,
      onClose: mockOnClose,
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    expect(tree.toJSON()).not.toBeNull();
    expect(tree.root.findByType(TestContent)).toBeTruthy();
  });
  it('displays title when provided', function () {
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: true,
      onClose: mockOnClose,
      title: "Test Modal",
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    var titleElement = tree.root.findByProps({
      'data-testid': 'modal-header'
    });
    expect(titleElement).toBeTruthy();
    expect(titleElement.findByType('h3').props.children).toBe('Test Modal');
  });
  it('calls onClose when backdrop is pressed', function () {
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: true,
      onClose: mockOnClose,
      closeOnBackdropPress: true,
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    var backdrop = tree.root.findByProps({
      'data-testid': 'modal-backdrop'
    });
    (0, _reactTestRenderer.act)(function () {
      backdrop.props.onClick();
    });
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('does not call onClose when backdrop is pressed and closeOnBackdropPress is false', function () {
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: true,
      onClose: mockOnClose,
      closeOnBackdropPress: false,
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    var backdrop = tree.root.findByProps({
      'data-testid': 'modal-backdrop'
    });
    (0, _reactTestRenderer.act)(function () {
      backdrop.props.onClick();
    });
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('calls onClose when close button is pressed', function () {
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: true,
      onClose: mockOnClose,
      title: "Test Modal",
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    var closeButton = tree.root.findByProps({
      'data-testid': 'modal-close-button'
    });
    (0, _reactTestRenderer.act)(function () {
      closeButton.props.onClick();
    });
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('renders footer when provided', function () {
    var Footer = function Footer() {
      return (0, _jsxRuntime.jsx)("div", {
        children: "Footer Content"
      });
    };
    var tree = (0, _reactTestRenderer.create)((0, _jsxRuntime.jsx)(_Modal.default, {
      isVisible: true,
      onClose: mockOnClose,
      footer: (0, _jsxRuntime.jsx)(Footer, {}),
      children: (0, _jsxRuntime.jsx)(TestContent, {})
    }));
    var footerContainer = tree.root.findByProps({
      'data-testid': 'modal-footer'
    });
    expect(footerContainer).toBeTruthy();
    expect(footerContainer.findByType(Footer)).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,