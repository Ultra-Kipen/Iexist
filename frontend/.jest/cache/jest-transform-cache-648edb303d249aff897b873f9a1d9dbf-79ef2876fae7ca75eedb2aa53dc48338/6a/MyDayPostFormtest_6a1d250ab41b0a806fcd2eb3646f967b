9b23e2ce055a933a819b2b80f3aa4b48
_getJestObj().mock("../../src/components/MyDayPostForm", function () {
  var originalModule = jest.requireActual("../../src/components/MyDayPostForm");
  return Object.assign({
    __esModule: true
  }, originalModule, {
    selectImage: jest.fn().mockResolvedValue({
      uri: 'file:///mock/image/path.jpg',
      name: 'image.jpg',
      type: 'image/jpeg'
    })
  });
});
_getJestObj().mock("../../src/components/EmotionSelector", function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return function MockEmotionSelector(props) {
    var emotions = props.emotions,
      selectedEmotions = props.selectedEmotions,
      onSelect = props.onSelect;
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "emotion-selector",
      children: [(0, _jsxRuntime.jsx)(Text, {
        children: "\uC624\uB298\uC758 \uAC10\uC815"
      }), (0, _jsxRuntime.jsx)(View, {
        style: {
          flexDirection: 'row',
          flexWrap: 'wrap'
        },
        children: emotions.map(function (emotion) {
          return (0, _jsxRuntime.jsx)(TouchableOpacity, {
            testID: `emotion-${emotion.id}`,
            onPress: function onPress() {
              return onSelect(emotion.id);
            },
            style: {
              margin: 4,
              padding: 8,
              backgroundColor: selectedEmotions.includes(emotion.id) ? emotion.color : '#f0f0f0',
              borderRadius: 4
            },
            children: (0, _jsxRuntime.jsx)(Text, {
              children: emotion.name
            })
          }, emotion.id);
        })
      })]
    });
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View;
  return function MockLoadingIndicator(props) {
    var size = props.size,
      color = props.color;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "loading-indicator",
      style: {
        width: size === 'small' ? 20 : 36,
        height: size === 'small' ? 20 : 36,
        backgroundColor: color
      }
    });
  };
});
_getJestObj().mock("../../src/services/api/uploadService", function () {
  return {
    uploadImage: jest.fn().mockResolvedValue({
      data: {
        image_url: 'https://example.com/uploads/test.jpg'
      }
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyDayPostForm = _interopRequireDefault(require("../../src/components/MyDayPostForm"));
var _reactNative2 = require("react-native");
var _uploadService = _interopRequireDefault(require("../../src/services/api/uploadService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.setTimeout(15000);
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('MyDayPostForm 컴포넌트', function () {
  var mockSubmit = jest.fn().mockResolvedValue(undefined);
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('컴포넌트가 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByText = _render.getByText,
      getByPlaceholderText = _render.getByPlaceholderText,
      getByTestId = _render.getByTestId;
    expect(getByText('오늘 하루는 어땠나요?')).toBeTruthy();
    expect(getByTestId('emotion-selector')).toBeTruthy();
    expect(getByPlaceholderText('오늘 하루를 기록해보세요 (10-1000자)')).toBeTruthy();
    expect(getByText('사진 추가')).toBeTruthy();
    expect(getByText('익명으로 게시하기')).toBeTruthy();
    expect(getByText('게시하기')).toBeTruthy();
  });
  it('내용 입력 시 상태가 업데이트되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render2.getByPlaceholderText;
    var contentInput = getByPlaceholderText('오늘 하루를 기록해보세요 (10-1000자)');
    _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다');
    expect(contentInput.props.value).toBe('테스트 내용입니다');
  });
  it('감정 선택 시 상태가 업데이트되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getAllByTestId = _render3.getAllByTestId;
    var emotionButtons = getAllByTestId(/^emotion-\d+$/);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(emotionButtons[0]);
    }));
  }));
  it('익명 체크박스 토글이 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByText = _render4.getByText;
    var anonymousText = getByText('익명으로 게시하기');
    var anonymousContainer = anonymousText.parent;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      if (anonymousContainer) {
        _reactNative.fireEvent.press(anonymousContainer);
      }
    }));
  }));
  it('이미지 선택 및 제거가 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByText = _render5.getByText,
      queryByTestId = _render5.queryByTestId;
    var addImageButton = getByText('사진 추가');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(addImageButton);
    }));
  }));
  it('제출 버튼 비활성화 조건이 올바르게 작동해야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByText = _render6.getByText;
    var submitButton = getByText('게시하기').parent;
    expect(submitButton).toBeTruthy();
  });
  it('초기값으로 폼이 올바르게 렌더링되어야 함', function () {
    var initialContent = '초기 내용';
    var initialEmotionIds = [1, 2];
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit,
        initialContent: initialContent,
        initialEmotionIds: initialEmotionIds
      })),
      getByPlaceholderText = _render7.getByPlaceholderText;
    var contentInput = getByPlaceholderText('오늘 하루를 기록해보세요 (10-1000자)');
    expect(contentInput.props.value).toBe(initialContent);
  });
  it('폼 제출 시 API가 올바르게 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render8.getByPlaceholderText,
      getByText = _render8.getByText,
      getAllByTestId = _render8.getAllByTestId;
    var contentInput = getByPlaceholderText('오늘 하루를 기록해보세요 (10-1000자)');
    _reactNative.fireEvent.changeText(contentInput, '충분히 긴 내용입니다. 테스트를 위한 텍스트입니다.');
    var emotionButtons = getAllByTestId(/^emotion-\d+$/);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(emotionButtons[0]);
    }));
    var submitButton = getByText('게시하기');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalled();
    expect(mockSubmit).toHaveBeenCalledWith(expect.objectContaining({
      content: '충분히 긴 내용입니다. 테스트를 위한 텍스트입니다.',
      emotion_ids: expect.arrayContaining([1]),
      is_anonymous: false
    }));
  }));
  it('이미지 업로드 실패 시 적절한 오류 메시지가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(_uploadService.default, 'uploadImage').mockRejectedValueOnce(new Error('업로드 실패'));
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyDayPostForm.default, {
        onSubmit: mockSubmit
      })),
      getByText = _render9.getByText,
      getByPlaceholderText = _render9.getByPlaceholderText,
      getAllByTestId = _render9.getAllByTestId;
    var contentInput = getByPlaceholderText('오늘 하루를 기록해보세요 (10-1000자)');
    _reactNative.fireEvent.changeText(contentInput, '충분히 긴 내용입니다. 테스트를 위한 텍스트입니다.');
    var emotionButtons = getAllByTestId(/^emotion-\d+$/);
    _reactNative.fireEvent.press(emotionButtons[0]);
    var addImageButton = getByText('사진 추가');
    _reactNative.fireEvent.press(addImageButton);
    yield new Promise(function (resolve) {
      return setTimeout(resolve, 600);
    });
    var submitButton = getByText('게시하기');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('업로드 경고', '이미지 업로드에 실패했습니다. 이미지 없이 게시물을 등록하시겠습니까?', expect.anything());
    }, {
      timeout: 2000
    });
  }));
});
function getByTestId(arg0) {
  throw new Error('Function not implemented.');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJvcmlnaW5hbE1vZHVsZSIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiX19lc01vZHVsZSIsInNlbGVjdEltYWdlIiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsInVyaSIsIm5hbWUiLCJ0eXBlIiwiUmVhY3QiLCJyZXF1aXJlIiwiX3JlcXVpcmUiLCJWaWV3IiwiVGV4dCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJNb2NrRW1vdGlvblNlbGVjdG9yIiwicHJvcHMiLCJlbW90aW9ucyIsInNlbGVjdGVkRW1vdGlvbnMiLCJvblNlbGVjdCIsIl9qc3hSdW50aW1lIiwianN4cyIsInRlc3RJRCIsImNoaWxkcmVuIiwianN4Iiwic3R5bGUiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJtYXAiLCJlbW90aW9uIiwiaWQiLCJvblByZXNzIiwibWFyZ2luIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImluY2x1ZGVzIiwiY29sb3IiLCJib3JkZXJSYWRpdXMiLCJfcmVxdWlyZTIiLCJNb2NrTG9hZGluZ0luZGljYXRvciIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsInVwbG9hZEltYWdlIiwiZGF0YSIsImltYWdlX3VybCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfTXlEYXlQb3N0Rm9ybSIsIl9yZWFjdE5hdGl2ZTIiLCJfdXBsb2FkU2VydmljZSIsIl9yZXF1aXJlMyIsInNldFRpbWVvdXQiLCJzcHlPbiIsIkFsZXJ0IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiZGVzY3JpYmUiLCJtb2NrU3VibWl0IiwidW5kZWZpbmVkIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJkZWZhdWx0Iiwib25TdWJtaXQiLCJnZXRCeVRleHQiLCJnZXRCeVBsYWNlaG9sZGVyVGV4dCIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwiY29udGVudElucHV0IiwiZmlyZUV2ZW50IiwiY2hhbmdlVGV4dCIsInZhbHVlIiwidG9CZSIsIl9yZW5kZXIzIiwiZ2V0QWxsQnlUZXN0SWQiLCJlbW90aW9uQnV0dG9ucyIsImFjdCIsInByZXNzIiwiX3JlbmRlcjQiLCJhbm9ueW1vdXNUZXh0IiwiYW5vbnltb3VzQ29udGFpbmVyIiwicGFyZW50IiwiX3JlbmRlcjUiLCJxdWVyeUJ5VGVzdElkIiwiYWRkSW1hZ2VCdXR0b24iLCJfcmVuZGVyNiIsInN1Ym1pdEJ1dHRvbiIsImluaXRpYWxDb250ZW50IiwiaW5pdGlhbEVtb3Rpb25JZHMiLCJfcmVuZGVyNyIsIl9yZW5kZXI4IiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsImNvbnRlbnQiLCJlbW90aW9uX2lkcyIsImFycmF5Q29udGFpbmluZyIsImlzX2Fub255bW91cyIsInVwbG9hZFNlcnZpY2UiLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJFcnJvciIsIl9yZW5kZXI5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ3YWl0Rm9yIiwiYWxlcnQiLCJhbnl0aGluZyIsInRpbWVvdXQiLCJhcmcwIl0sInNvdXJjZXMiOlsiTXlEYXlQb3N0Rm9ybS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vY29tcG9uZW50cy9NeURheVBvc3RGb3JtLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCB3YWl0Rm9yLCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBNeURheVBvc3RGb3JtIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL015RGF5UG9zdEZvcm0nO1xyXG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB1cGxvYWRTZXJ2aWNlIGZyb20gJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvdXBsb2FkU2VydmljZSc7XHJcblxyXG4vLyDsi5zqsIQg7LSI6rO8IOusuOygnCDtlbTqsrDsnYQg7JyE7ZW0IOyghOyXrSDtg4DsnoTslYTsm4Mg7ISk7KCVXHJcbmplc3Quc2V0VGltZW91dCgxNTAwMCk7XHJcblxyXG4vLyBBbGVydC5hbGVydCDrqqjtgrlcclxuamVzdC5zcHlPbihBbGVydCwgJ2FsZXJ0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcclxuXHJcbi8vIHNlbGVjdEltYWdlIO2VqOyImCDrqqjtgrnsnYQg7JyE7ZWcIOuqqOuTiCDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29tcG9uZW50cy9NeURheVBvc3RGb3JtJywgKCkgPT4ge1xyXG4gIGNvbnN0IG9yaWdpbmFsTW9kdWxlID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuLi8uLi9zcmMvY29tcG9uZW50cy9NeURheVBvc3RGb3JtJyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgICAuLi5vcmlnaW5hbE1vZHVsZSxcclxuICAgIC8vIHNlbGVjdEltYWdlIO2VqOyImOunjCDsnqzsoJXsnZhcclxuICAgIHNlbGVjdEltYWdlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xyXG4gICAgICB1cmk6ICdmaWxlOi8vL21vY2svaW1hZ2UvcGF0aC5qcGcnLFxyXG4gICAgICBuYW1lOiAnaW1hZ2UuanBnJyxcclxuICAgICAgdHlwZTogJ2ltYWdlL2pwZWcnXHJcbiAgICB9KVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gRW1vdGlvblNlbGVjdG9yIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9jb21wb25lbnRzL0Vtb3Rpb25TZWxlY3RvcicsICgpID0+IHtcclxuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbiAgY29uc3QgeyBWaWV3LCBUZXh0LCBUb3VjaGFibGVPcGFjaXR5IH0gPSByZXF1aXJlKCdyZWFjdC1uYXRpdmUnKTtcclxuICBcclxuICByZXR1cm4gZnVuY3Rpb24gTW9ja0Vtb3Rpb25TZWxlY3Rvcihwcm9wczogeyBlbW90aW9uczogYW55OyBzZWxlY3RlZEVtb3Rpb25zOiBhbnk7IG9uU2VsZWN0OiBhbnk7IH0pIHtcclxuICAgIGNvbnN0IHsgZW1vdGlvbnMsIHNlbGVjdGVkRW1vdGlvbnMsIG9uU2VsZWN0IH0gPSBwcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxWaWV3IHRlc3RJRD1cImVtb3Rpb24tc2VsZWN0b3JcIj5cclxuICAgICAgICA8VGV4dD7smKTripjsnZgg6rCQ7KCVPC9UZXh0PlxyXG4gICAgICAgIDxWaWV3IHN0eWxlPXt7IGZsZXhEaXJlY3Rpb246ICdyb3cnLCBmbGV4V3JhcDogJ3dyYXAnIH19PlxyXG4gICAgICAgICAge2Vtb3Rpb25zLm1hcCgoZW1vdGlvbjogeyBpZDogUmVhY3QuS2V5IHwgbnVsbCB8IHVuZGVmaW5lZDsgY29sb3I6IGFueTsgbmFtZTogYW55OyB9KSA9PiAoXHJcbiAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5IFxyXG4gICAgICAgICAgICAgIGtleT17ZW1vdGlvbi5pZH1cclxuICAgICAgICAgICAgICB0ZXN0SUQ9e2BlbW90aW9uLSR7ZW1vdGlvbi5pZH1gfVxyXG4gICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+IG9uU2VsZWN0KGVtb3Rpb24uaWQpfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDQsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA4LFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBzZWxlY3RlZEVtb3Rpb25zLmluY2x1ZGVzKGVtb3Rpb24uaWQpID8gZW1vdGlvbi5jb2xvciA6ICcjZjBmMGYwJyxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8VGV4dD57ZW1vdGlvbi5uYW1lfTwvVGV4dD5cclxuICAgICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICAgICAgKSl9XHJcbiAgICAgICAgPC9WaWV3PlxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICApO1xyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gTG9hZGluZ0luZGljYXRvciDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29tcG9uZW50cy9Mb2FkaW5nSW5kaWNhdG9yJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuICBjb25zdCB7IFZpZXcgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIFxyXG4gIHJldHVybiBmdW5jdGlvbiBNb2NrTG9hZGluZ0luZGljYXRvcihwcm9wczogeyBzaXplOiBhbnk7IGNvbG9yOiBhbnk7IH0pIHtcclxuICAgIGNvbnN0IHsgc2l6ZSwgY29sb3IgfSA9IHByb3BzO1xyXG4gICAgcmV0dXJuIDxWaWV3IHRlc3RJRD1cImxvYWRpbmctaW5kaWNhdG9yXCIgc3R5bGU9e3sgd2lkdGg6IHNpemUgPT09ICdzbWFsbCcgPyAyMCA6IDM2LCBoZWlnaHQ6IHNpemUgPT09ICdzbWFsbCcgPyAyMCA6IDM2LCBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yIH19IC8+O1xyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8g7J2066+47KeAIOyXheuhnOuTnCDshJzruYTsiqQg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS91cGxvYWRTZXJ2aWNlJywgKCkgPT4gKHtcclxuICB1cGxvYWRJbWFnZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgaW1hZ2VfdXJsOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS91cGxvYWRzL3Rlc3QuanBnJ1xyXG4gICAgfVxyXG4gIH0pXHJcbn0pKTtcclxuXHJcbmRlc2NyaWJlKCdNeURheVBvc3RGb3JtIOy7tO2PrOuEjO2KuCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrU3VibWl0ID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfsu7Ttj6zrhIztirjqsIAg7Jis67CU66W06rKMIOugjOuNlOungeuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlQbGFjZWhvbGRlclRleHQsIGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxNeURheVBvc3RGb3JtIG9uU3VibWl0PXttb2NrU3VibWl0fSAvPlxyXG4gICAgKTtcclxuXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfsmKTripgg7ZWY66Oo64qUIOyWtOuVoOuCmOyalD8nKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdlbW90aW9uLXNlbGVjdG9yJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVBsYWNlaG9sZGVyVGV4dCgn7Jik64qYIO2VmOujqOulvCDquLDroZ3tlbTrs7TshLjsmpQgKDEwLTEwMDDsnpApJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+yCrOynhCDstpTqsIAnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7J2166qF7Jy866GcIOqyjOyLnO2VmOq4sCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfqsozsi5ztlZjquLAnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn64K07JqpIOyeheugpSDsi5wg7IOB7YOc6rCAIOyXheuNsOydtO2KuOuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5UGxhY2Vob2xkZXJUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxNeURheVBvc3RGb3JtIG9uU3VibWl0PXttb2NrU3VibWl0fSAvPlxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50SW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgn7Jik64qYIO2VmOujqOulvCDquLDroZ3tlbTrs7TshLjsmpQgKDEwLTEwMDDsnpApJyk7XHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChjb250ZW50SW5wdXQsICfthYzsiqTtirgg64K07Jqp7J6F64uI64ukJyk7XHJcblxyXG4gICAgZXhwZWN0KGNvbnRlbnRJbnB1dC5wcm9wcy52YWx1ZSkudG9CZSgn7YWM7Iqk7Yq4IOuCtOyaqeyeheuLiOuLpCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn6rCQ7KCVIOyEoO2DnSDsi5wg7IOB7YOc6rCAIOyXheuNsOydtO2KuOuQmOyWtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxNeURheVBvc3RGb3JtIG9uU3VibWl0PXttb2NrU3VibWl0fSAvPlxyXG4gICAgKTtcclxuXHJcbiAgICAvLyDrqqjrk6Ag6rCQ7KCVIOuyhO2KvCDssL7quLBcclxuICAgIGNvbnN0IGVtb3Rpb25CdXR0b25zID0gZ2V0QWxsQnlUZXN0SWQoL15lbW90aW9uLVxcZCskLyk7XHJcbiAgICBcclxuICAgIC8vIOyyqyDrsojsp7gg6rCQ7KCVIOuyhO2KvCDtgbTrpq0gKO2WieuztSlcclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhlbW90aW9uQnV0dG9uc1swXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDthYzsiqTtirgg7ZmV7J24ICjsg4Htg5wg67OA6rK9IO2ZleyduOydgCDrs7XsnqHtlaAg7IiYIOyeiOycvOuvgOuhnCDrsoTtirwg7Iqk7YOA7J287J2064KYIOyEoO2DneuQnCDsg4Htg5wg7ZGc7Iuc66GcIO2ZleyduCDqsIDriqUpXHJcbiAgICAvLyDsnbQg7YWM7Iqk7Yq47JeQ7ISc64qUIOqwkOyglSDshKDtg50g7J2067Kk7Yq46rCAIOyYpOulmCDsl4bsnbQg7J6R64+Z7ZWY64qU7KeAIO2ZleyduFxyXG4gIH0pO1xyXG5cclxuICBpdCgn7J2166qFIOyytO2BrOuwleyKpCDthqDquIDsnbQg7J6R64+Z7ZW07JW8IO2VqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxNeURheVBvc3RGb3JtIG9uU3VibWl0PXttb2NrU3VibWl0fSAvPlxyXG4gICAgKTtcclxuXHJcbiAgICAvLyDsnbXrqoUg7ISk7KCVIOyytO2BrOuwleyKpCDssL7quLBcclxuICAgIGNvbnN0IGFub255bW91c1RleHQgPSBnZXRCeVRleHQoJ+ydteuqheycvOuhnCDqsozsi5ztlZjquLAnKTtcclxuICAgIGNvbnN0IGFub255bW91c0NvbnRhaW5lciA9IGFub255bW91c1RleHQucGFyZW50O1xyXG5cclxuICAgIC8vIOyytO2BrOuwleyKpCDtgbTrpq1cclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmIChhbm9ueW1vdXNDb250YWluZXIpIHtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MoYW5vbnltb3VzQ29udGFpbmVyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g7IOB7YOcIOuzgOqyveydgCDrs7XsnqHtlaAg7IiYIOyeiOycvOuvgOuhnCDsl6zquLDshJzripQg7J2067Kk7Yq4IO2VuOuTpOufrOqwgCDsmKTrpZgg7JeG7J20IOyLpO2WieuQmOuKlOyngCDtmZXsnbhcclxuICB9KTtcclxuXHJcbiAgaXQoJ+ydtOuvuOyngCDshKDtg50g67CPIOygnOqxsOqwgCDsnpHrj5ntlbTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPE15RGF5UG9zdEZvcm0gb25TdWJtaXQ9e21vY2tTdWJtaXR9IC8+XHJcbiAgICApO1xyXG5cclxuICAgIC8vIOydtOuvuOyngCDstpTqsIAg67KE7Yq8IO2BtOumrVxyXG4gICAgY29uc3QgYWRkSW1hZ2VCdXR0b24gPSBnZXRCeVRleHQoJ+yCrOynhCDstpTqsIAnKTtcclxuICAgIFxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGFkZEltYWdlQnV0dG9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOygnOqxsCDrsoTtirzsnbQg64KY7YOA64KY7JW8IO2VqCAo7J2066+47KeA6rCAIOyEoO2DneuQmOyXiOydjOydhCDsnZjrr7gpXHJcbiAgICAvLyDssLjqs6A6IOyLpOygnCDtmZjqsr3sl5DshJzripQg7J2066+47KeA7JmAIOygnOqxsCDrsoTtirzsnbQg66CM642U66eB65CY7KeA66eMLCDrqqjtgrnrkJwg7ZmY6rK97JeQ7ISc64qUIO2FjOyKpO2KuO2VmOq4sCDslrTroKTsmrgg7IiYIOyeiOydjFxyXG4gIH0pO1xyXG5cclxuICBpdCgn7KCc7LacIOuyhO2KvCDruYTtmZzshLHtmZQg7KGw6rG07J20IOyYrOuwlOultOqyjCDsnpHrj5ntlbTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPE15RGF5UG9zdEZvcm0gb25TdWJtaXQ9e21vY2tTdWJtaXR9IC8+XHJcbiAgICApO1xyXG5cclxuICAgIC8vIOqyjOyLnO2VmOq4sCDrsoTtirwg7LC+6riwXHJcbiAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBnZXRCeVRleHQoJ+qyjOyLnO2VmOq4sCcpLnBhcmVudDtcclxuICAgIFxyXG4gICAgLy8g7Lu07Y+s64SM7Yq47J2YIOyKpO2DgOydvOydhCDqsoDsgqztlZjsl6wg67mE7Zmc7ISx7ZmUIOyXrOu2gCDtmZXsnbhcclxuICAgIC8vIOyLpOygnCDqtaztmITsl5Ag65Sw6528IOydtCDrtoDrtoTsnYAg64uk66W8IOyImCDsnojsnYxcclxuICAgIGV4cGVjdChzdWJtaXRCdXR0b24pLnRvQmVUcnV0aHkoKTtcclxuICAgIC8vIOyKpO2DgOydvCDsho3shLHsnYQg6rKA7IKs7ZWY64qUIOuMgOyLoCDri6jsiJztnogg67KE7Yq8IOyhtOyerCDsl6zrtoDrp4wg7ZmV7J24XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfstIjquLDqsJLsnLzroZwg7Y+87J20IOyYrOuwlOultOqyjCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgaW5pdGlhbENvbnRlbnQgPSAn7LSI6riwIOuCtOyaqSc7XHJcbiAgICBjb25zdCBpbml0aWFsRW1vdGlvbklkcyA9IFsxLCAyXTtcclxuXHJcbiAgICBjb25zdCB7IGdldEJ5UGxhY2Vob2xkZXJUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxNeURheVBvc3RGb3JtIFxyXG4gICAgICAgIG9uU3VibWl0PXttb2NrU3VibWl0fVxyXG4gICAgICAgIGluaXRpYWxDb250ZW50PXtpbml0aWFsQ29udGVudH1cclxuICAgICAgICBpbml0aWFsRW1vdGlvbklkcz17aW5pdGlhbEVtb3Rpb25JZHN9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG5cclxuICAgIC8vIOy0iOq4sCDrgrTsmqkg7ZmV7J24XHJcbiAgICBjb25zdCBjb250ZW50SW5wdXQgPSBnZXRCeVBsYWNlaG9sZGVyVGV4dCgn7Jik64qYIO2VmOujqOulvCDquLDroZ3tlbTrs7TshLjsmpQgKDEwLTEwMDDsnpApJyk7XHJcbiAgICBleHBlY3QoY29udGVudElucHV0LnByb3BzLnZhbHVlKS50b0JlKGluaXRpYWxDb250ZW50KTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOyEoO2DnSDsg4Htg5zripQg67O17J6h7ZWgIOyImCDsnojsnLzrr4DroZwg7Jes6riw7ISc64qUIOyDneuetVxyXG4gIH0pO1xyXG5cclxuICBpdCgn7Y+8IOygnOy2nCDsi5wgQVBJ6rCAIOyYrOuwlOultOqyjCDtmLjstpzrkJjslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QnlUZXh0LCBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8TXlEYXlQb3N0Rm9ybSBvblN1Ym1pdD17bW9ja1N1Ym1pdH0gLz5cclxuICAgICk7XHJcblxyXG4gICAgLy8g64K07JqpIOyeheugpVxyXG4gICAgY29uc3QgY29udGVudElucHV0ID0gZ2V0QnlQbGFjZWhvbGRlclRleHQoJ+yYpOuKmCDtlZjro6jrpbwg6riw66Gd7ZW067O07IS47JqUICgxMC0xMDAw7J6QKScpO1xyXG4gICAgZmlyZUV2ZW50LmNoYW5nZVRleHQoY29udGVudElucHV0LCAn7Lap67aE7Z6IIOq4tCDrgrTsmqnsnoXri4jri6QuIO2FjOyKpO2KuOulvCDsnITtlZwg7YWN7Iqk7Yq47J6F64uI64ukLicpO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICBjb25zdCBlbW90aW9uQnV0dG9ucyA9IGdldEFsbEJ5VGVzdElkKC9eZW1vdGlvbi1cXGQrJC8pO1xyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25CdXR0b25zWzBdKTsgLy8g7LKrIOuyiOynuCDqsJDsoJUg7ISg7YOdXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvCDtgbTrpq1cclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGdldEJ5VGV4dCgn6rKM7Iuc7ZWY6riwJyk7XHJcbiAgICBcclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhzdWJtaXRCdXR0b24pO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIG9uU3VibWl0IO2VqOyImOqwgCDtmLjstpzrkJjsl4jripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QobW9ja1N1Ym1pdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgZXhwZWN0KG1vY2tTdWJtaXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcclxuICAgICAgY29udGVudDogJ+y2qeu2hO2eiCDquLQg64K07Jqp7J6F64uI64ukLiDthYzsiqTtirjrpbwg7JyE7ZWcIO2FjeyKpO2KuOyeheuLiOuLpC4nLFxyXG4gICAgICBlbW90aW9uX2lkczogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbMV0pLCAvLyDssqsg67KI7Ke4IOqwkOyglSBJRFxyXG4gICAgICBpc19hbm9ueW1vdXM6IGZhbHNlXHJcbiAgICB9KSk7XHJcbiAgfSk7XHJcblxyXG4vLyDsiJjsoJXrkJwg7L2U65OcXHJcblxyXG4vLyBfX3Rlc3RzX18vY29tcG9uZW50cy9NeURheVBvc3RGb3JtLnRlc3QudHN4XHJcblxyXG4vLyDquLDsobQg7YWM7Iqk7Yq4IO2MjOydvOyXkOyEnCDsnbQg67aA67aE66eMIOyImOyglVxyXG5pdCgn7J2066+47KeAIOyXheuhnOuTnCDsi6TtjKgg7IucIOyggeygiO2VnCDsmKTrpZgg66mU7Iuc7KeA6rCAIO2RnOyLnOuQmOyWtOyVvCDtlagnLCBhc3luYyAoKSA9PiB7XHJcbiAgLy8gdXBsb2FkU2VydmljZS51cGxvYWRJbWFnZeulvCDrqqjtgrntlZjsl6wg7Iuk7YyoIOyLnOuCmOumrOyYpCDsg53shLFcclxuICBqZXN0LnNweU9uKHVwbG9hZFNlcnZpY2UsICd1cGxvYWRJbWFnZScpLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ+yXheuhnOuTnCDsi6TtjKgnKSk7XHJcblxyXG4gIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZ2V0QWxsQnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgIDxNeURheVBvc3RGb3JtIG9uU3VibWl0PXttb2NrU3VibWl0fSAvPlxyXG4gICk7XHJcbiAgXHJcbiAgLy8g64K07JqpIOyeheugpVxyXG4gIGNvbnN0IGNvbnRlbnRJbnB1dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0KCfsmKTripgg7ZWY66Oo66W8IOq4sOuhne2VtOuztOyEuOyalCAoMTAtMTAwMOyekCknKTtcclxuICBmaXJlRXZlbnQuY2hhbmdlVGV4dChjb250ZW50SW5wdXQsICfstqnrtoTtnogg6ri0IOuCtOyaqeyeheuLiOuLpC4g7YWM7Iqk7Yq466W8IOychO2VnCDthY3siqTtirjsnoXri4jri6QuJyk7XHJcbiAgXHJcbiAgLy8g6rCQ7KCVIOyEoO2DnVxyXG4gIGNvbnN0IGVtb3Rpb25CdXR0b25zID0gZ2V0QWxsQnlUZXN0SWQoL15lbW90aW9uLVxcZCskLyk7XHJcbiAgZmlyZUV2ZW50LnByZXNzKGVtb3Rpb25CdXR0b25zWzBdKTsgLy8g7LKrIOuyiOynuCDqsJDsoJUg7ISg7YOdXHJcbiAgXHJcbiAgLy8g7J2066+47KeAIOy2lOqwgCDrsoTtirwg7YG066atXHJcbiAgY29uc3QgYWRkSW1hZ2VCdXR0b24gPSBnZXRCeVRleHQoJ+yCrOynhCDstpTqsIAnKTtcclxuICBmaXJlRXZlbnQucHJlc3MoYWRkSW1hZ2VCdXR0b24pO1xyXG4gIFxyXG4gIC8vIOyVveqwhOydmCDsi5zqsIQg7Jes7Jyg66W8IOuRkOyWtCDsnbTrr7jsp4Ag7ISg7YOdIOyymOumrOqwgCDsmYTro4zrkJjrj4TroZ0g7ZWoXHJcbiAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDYwMCkpO1xyXG4gIFxyXG4gIC8vIOygnOy2nCDrsoTtirwg7YG066atXHJcbiAgY29uc3Qgc3VibWl0QnV0dG9uID0gZ2V0QnlUZXh0KCfqsozsi5ztlZjquLAnKTtcclxuICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICBcclxuICAvLyDruYTrj5nquLAg7J6R7JeFKOydtOuvuOyngCDsl4XroZzrk5wg67CPIEFsZXJ0IO2RnOyLnCnsnbQg7JmE66OM65CgIOuVjOq5jOyngCDquLDri6TrprxcclxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgIGV4cGVjdChBbGVydC5hbGVydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXHJcbiAgICAgICfsl4XroZzrk5wg6rK96rOgJyxcclxuICAgICAgJ+ydtOuvuOyngCDsl4XroZzrk5zsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukLiDsnbTrr7jsp4Ag7JeG7J20IOqyjOyLnOusvOydhCDrk7HroZ3tlZjsi5zqsqDsirXri4jquYw/JyxcclxuICAgICAgZXhwZWN0LmFueXRoaW5nKClcclxuICAgICk7XHJcbiAgfSwgeyB0aW1lb3V0OiAyMDAwIH0pO1xyXG59KTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBnZXRCeVRlc3RJZChhcmcwOiBzdHJpbmcpOiBpbXBvcnQoXCJyZWFjdC10ZXN0LXJlbmRlcmVyXCIpLlJlYWN0VGVzdEluc3RhbmNlIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiJBQWNBQSxXQUFBLEdBQUtDLElBQUksdUNBQXVDLFlBQU07RUFDcEQsSUFBTUMsY0FBYyxHQUFHQyxJQUFJLENBQUNDLGFBQWEscUNBQXFDLENBQUM7RUFDL0UsT0FBQUMsTUFBQSxDQUFBQyxNQUFBO0lBQ0VDLFVBQVUsRUFBRTtFQUFJLEdBQ2JMLGNBQWM7SUFFakJNLFdBQVcsRUFBRUwsSUFBSSxDQUFDTSxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztNQUN2Q0MsR0FBRyxFQUFFLDZCQUE2QjtNQUNsQ0MsSUFBSSxFQUFFLFdBQVc7TUFDakJDLElBQUksRUFBRTtJQUNSLENBQUM7RUFBQztBQUVOLENBQUMsQ0FBQztBQUdGYixXQUFBLEdBQUtDLElBQUkseUNBQXlDLFlBQU07RUFDdEQsSUFBTWEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0VBQzlCLElBQUFDLFFBQUEsR0FBeUNELE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBeERFLElBQUksR0FBQUQsUUFBQSxDQUFKQyxJQUFJO0lBQUVDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0lBQUVDLGdCQUFnQixHQUFBSCxRQUFBLENBQWhCRyxnQkFBZ0I7RUFFcEMsT0FBTyxTQUFTQyxtQkFBbUJBLENBQUNDLEtBQStELEVBQUU7SUFDbkcsSUFBUUMsUUFBUSxHQUFpQ0QsS0FBSyxDQUE5Q0MsUUFBUTtNQUFFQyxnQkFBZ0IsR0FBZUYsS0FBSyxDQUFwQ0UsZ0JBQWdCO01BQUVDLFFBQVEsR0FBS0gsS0FBSyxDQUFsQkcsUUFBUTtJQUM1QyxPQUNFLElBQUFDLFdBQUEsQ0FBQUMsSUFBQSxFQUFDVCxJQUFJO01BQUNVLE1BQU0sRUFBQyxrQkFBa0I7TUFBQUMsUUFBQSxHQUM3QixJQUFBSCxXQUFBLENBQUFJLEdBQUEsRUFBQ1gsSUFBSTtRQUFBVSxRQUFBLEVBQUM7TUFBTSxDQUFNLENBQUMsRUFDbkIsSUFBQUgsV0FBQSxDQUFBSSxHQUFBLEVBQUNaLElBQUk7UUFBQ2EsS0FBSyxFQUFFO1VBQUVDLGFBQWEsRUFBRSxLQUFLO1VBQUVDLFFBQVEsRUFBRTtRQUFPLENBQUU7UUFBQUosUUFBQSxFQUNyRE4sUUFBUSxDQUFDVyxHQUFHLENBQUMsVUFBQ0MsT0FBcUU7VUFBQSxPQUNsRixJQUFBVCxXQUFBLENBQUFJLEdBQUEsRUFBQ1YsZ0JBQWdCO1lBRWZRLE1BQU0sRUFBRSxXQUFXTyxPQUFPLENBQUNDLEVBQUUsRUFBRztZQUNoQ0MsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUE7Y0FBQSxPQUFRWixRQUFRLENBQUNVLE9BQU8sQ0FBQ0MsRUFBRSxDQUFDO1lBQUEsQ0FBQztZQUNwQ0wsS0FBSyxFQUFFO2NBQ0xPLE1BQU0sRUFBRSxDQUFDO2NBQ1RDLE9BQU8sRUFBRSxDQUFDO2NBQ1ZDLGVBQWUsRUFBRWhCLGdCQUFnQixDQUFDaUIsUUFBUSxDQUFDTixPQUFPLENBQUNDLEVBQUUsQ0FBQyxHQUFHRCxPQUFPLENBQUNPLEtBQUssR0FBRyxTQUFTO2NBQ2xGQyxZQUFZLEVBQUU7WUFDaEIsQ0FBRTtZQUFBZCxRQUFBLEVBRUYsSUFBQUgsV0FBQSxDQUFBSSxHQUFBLEVBQUNYLElBQUk7Y0FBQVUsUUFBQSxFQUFFTSxPQUFPLENBQUN0QjtZQUFJLENBQU87VUFBQyxHQVZ0QnNCLE9BQU8sQ0FBQ0MsRUFXRyxDQUFDO1FBQUEsQ0FDcEI7TUFBQyxDQUNFLENBQUM7SUFBQSxDQUNILENBQUM7RUFFWCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBR0ZuQyxXQUFBLEdBQUtDLElBQUksMENBQTBDLFlBQU07RUFDdkQsSUFBTWEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0VBQzlCLElBQUE0QixTQUFBLEdBQWlCNUIsT0FBTyxDQUFDLGNBQWMsQ0FBQztJQUFoQ0UsSUFBSSxHQUFBMEIsU0FBQSxDQUFKMUIsSUFBSTtFQUVaLE9BQU8sU0FBUzJCLG9CQUFvQkEsQ0FBQ3ZCLEtBQWlDLEVBQUU7SUFDdEUsSUFBUXdCLElBQUksR0FBWXhCLEtBQUssQ0FBckJ3QixJQUFJO01BQUVKLEtBQUssR0FBS3BCLEtBQUssQ0FBZm9CLEtBQUs7SUFDbkIsT0FBTyxJQUFBaEIsV0FBQSxDQUFBSSxHQUFBLEVBQUNaLElBQUk7TUFBQ1UsTUFBTSxFQUFDLG1CQUFtQjtNQUFDRyxLQUFLLEVBQUU7UUFBRWdCLEtBQUssRUFBRUQsSUFBSSxLQUFLLE9BQU8sR0FBRyxFQUFFLEdBQUcsRUFBRTtRQUFFRSxNQUFNLEVBQUVGLElBQUksS0FBSyxPQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUU7UUFBRU4sZUFBZSxFQUFFRTtNQUFNO0lBQUUsQ0FBRSxDQUFDO0VBQ3RKLENBQUM7QUFDSCxDQUFDLENBQUM7QUFHRnpDLFdBQUEsR0FBS0MsSUFBSSx5Q0FBeUM7RUFBQSxPQUFPO0lBQ3ZEK0MsV0FBVyxFQUFFN0MsSUFBSSxDQUFDTSxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztNQUN2Q3VDLElBQUksRUFBRTtRQUNKQyxTQUFTLEVBQUU7TUFDYjtJQUNGLENBQUM7RUFDSCxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsc0JBQUEsR0FBQXBDLE9BQUE7QUFBQSxJQUFBcUMsa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQXBDLE9BQUE7QUE3RUosSUFBQXNDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQXBDLE9BQUE7QUFDQSxJQUFBdUMsWUFBQSxHQUFBdkMsT0FBQTtBQUNBLElBQUF3QyxjQUFBLEdBQUFKLHNCQUFBLENBQUFwQyxPQUFBO0FBQ0EsSUFBQXlDLGFBQUEsR0FBQXpDLE9BQUE7QUFDQSxJQUFBMEMsY0FBQSxHQUFBTixzQkFBQSxDQUFBcEMsT0FBQTtBQUFpRSxJQUFBVSxXQUFBLEdBQUFWLE9BQUE7QUFBQSxTQUFBZixZQUFBO0VBQUEsSUFBQTBELFNBQUEsR0FBQTNDLE9BQUE7SUFBQVosSUFBQSxHQUFBdUQsU0FBQSxDQUFBdkQsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFHakVBLElBQUksQ0FBQ3dELFVBQVUsQ0FBQyxLQUFLLENBQUM7QUFHdEJ4RCxJQUFJLENBQUN5RCxLQUFLLENBQUNDLG1CQUFLLEVBQUUsT0FBTyxDQUFDLENBQUNDLGtCQUFrQixDQUFDLFlBQU0sQ0FBQyxDQUFDLENBQUM7QUFxRXZEQyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtFQUNuQyxJQUFNQyxVQUFVLEdBQUc3RCxJQUFJLENBQUNNLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDdUQsU0FBUyxDQUFDO0VBRXpEQyxVQUFVLENBQUMsWUFBTTtJQUNmL0QsSUFBSSxDQUFDZ0UsYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxZQUFNO0lBQzlCLElBQUFDLE9BQUEsR0FBeUQsSUFBQUMsbUJBQU0sRUFDN0QsSUFBQTdDLFdBQUEsQ0FBQUksR0FBQSxFQUFDMEIsY0FBQSxDQUFBZ0IsT0FBYTtRQUFDQyxRQUFRLEVBQUVSO01BQVcsQ0FBRSxDQUN4QyxDQUFDO01BRk9TLFNBQVMsR0FBQUosT0FBQSxDQUFUSSxTQUFTO01BQUVDLG9CQUFvQixHQUFBTCxPQUFBLENBQXBCSyxvQkFBb0I7TUFBRUMsV0FBVyxHQUFBTixPQUFBLENBQVhNLFdBQVc7SUFJcERDLE1BQU0sQ0FBQ0gsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0lBQzlDRCxNQUFNLENBQUNELFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BERCxNQUFNLENBQUNGLG9CQUFvQixDQUFDLDBCQUEwQixDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDckVELE1BQU0sQ0FBQ0gsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZDRCxNQUFNLENBQUNILFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDSSxVQUFVLENBQUMsQ0FBQztJQUMzQ0QsTUFBTSxDQUFDSCxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQ0ksVUFBVSxDQUFDLENBQUM7RUFDeEMsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0lBQ2hDLElBQUFVLFFBQUEsR0FBaUMsSUFBQVIsbUJBQU0sRUFDckMsSUFBQTdDLFdBQUEsQ0FBQUksR0FBQSxFQUFDMEIsY0FBQSxDQUFBZ0IsT0FBYTtRQUFDQyxRQUFRLEVBQUVSO01BQVcsQ0FBRSxDQUN4QyxDQUFDO01BRk9VLG9CQUFvQixHQUFBSSxRQUFBLENBQXBCSixvQkFBb0I7SUFJNUIsSUFBTUssWUFBWSxHQUFHTCxvQkFBb0IsQ0FBQywwQkFBMEIsQ0FBQztJQUNyRU0sc0JBQVMsQ0FBQ0MsVUFBVSxDQUFDRixZQUFZLEVBQUUsV0FBVyxDQUFDO0lBRS9DSCxNQUFNLENBQUNHLFlBQVksQ0FBQzFELEtBQUssQ0FBQzZELEtBQUssQ0FBQyxDQUFDQyxJQUFJLENBQUMsV0FBVyxDQUFDO0VBQ3BELENBQUMsQ0FBQztFQUVGZixFQUFFLENBQUMsdUJBQXVCLE1BQUFoQixrQkFBQSxDQUFBbUIsT0FBQSxFQUFFLGFBQVk7SUFDdEMsSUFBQWEsUUFBQSxHQUEyQixJQUFBZCxtQkFBTSxFQUMvQixJQUFBN0MsV0FBQSxDQUFBSSxHQUFBLEVBQUMwQixjQUFBLENBQUFnQixPQUFhO1FBQUNDLFFBQVEsRUFBRVI7TUFBVyxDQUFFLENBQ3hDLENBQUM7TUFGT3FCLGNBQWMsR0FBQUQsUUFBQSxDQUFkQyxjQUFjO0lBS3RCLElBQU1DLGNBQWMsR0FBR0QsY0FBYyxDQUFDLGVBQWUsQ0FBQztJQUd0RCxNQUFNLElBQUFFLGdCQUFHLE1BQUFuQyxrQkFBQSxDQUFBbUIsT0FBQSxFQUFDLGFBQVk7TUFDcEJTLHNCQUFTLENBQUNRLEtBQUssQ0FBQ0YsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsRUFBQztFQUlKLENBQUMsRUFBQztFQUVGbEIsRUFBRSxDQUFDLG9CQUFvQixNQUFBaEIsa0JBQUEsQ0FBQW1CLE9BQUEsRUFBRSxhQUFZO0lBQ25DLElBQUFrQixRQUFBLEdBQXNCLElBQUFuQixtQkFBTSxFQUMxQixJQUFBN0MsV0FBQSxDQUFBSSxHQUFBLEVBQUMwQixjQUFBLENBQUFnQixPQUFhO1FBQUNDLFFBQVEsRUFBRVI7TUFBVyxDQUFFLENBQ3hDLENBQUM7TUFGT1MsU0FBUyxHQUFBZ0IsUUFBQSxDQUFUaEIsU0FBUztJQUtqQixJQUFNaUIsYUFBYSxHQUFHakIsU0FBUyxDQUFDLFdBQVcsQ0FBQztJQUM1QyxJQUFNa0Isa0JBQWtCLEdBQUdELGFBQWEsQ0FBQ0UsTUFBTTtJQUcvQyxNQUFNLElBQUFMLGdCQUFHLE1BQUFuQyxrQkFBQSxDQUFBbUIsT0FBQSxFQUFDLGFBQVk7TUFDcEIsSUFBSW9CLGtCQUFrQixFQUFFO1FBQ3RCWCxzQkFBUyxDQUFDUSxLQUFLLENBQUNHLGtCQUFrQixDQUFDO01BQ3JDO0lBQ0YsQ0FBQyxFQUFDO0VBR0osQ0FBQyxFQUFDO0VBRUZ2QixFQUFFLENBQUMscUJBQXFCLE1BQUFoQixrQkFBQSxDQUFBbUIsT0FBQSxFQUFFLGFBQVk7SUFDcEMsSUFBQXNCLFFBQUEsR0FBcUMsSUFBQXZCLG1CQUFNLEVBQ3pDLElBQUE3QyxXQUFBLENBQUFJLEdBQUEsRUFBQzBCLGNBQUEsQ0FBQWdCLE9BQWE7UUFBQ0MsUUFBUSxFQUFFUjtNQUFXLENBQUUsQ0FDeEMsQ0FBQztNQUZPUyxTQUFTLEdBQUFvQixRQUFBLENBQVRwQixTQUFTO01BQUVxQixhQUFhLEdBQUFELFFBQUEsQ0FBYkMsYUFBYTtJQUtoQyxJQUFNQyxjQUFjLEdBQUd0QixTQUFTLENBQUMsT0FBTyxDQUFDO0lBRXpDLE1BQU0sSUFBQWMsZ0JBQUcsTUFBQW5DLGtCQUFBLENBQUFtQixPQUFBLEVBQUMsYUFBWTtNQUNwQlMsc0JBQVMsQ0FBQ1EsS0FBSyxDQUFDTyxjQUFjLENBQUM7SUFDakMsQ0FBQyxFQUFDO0VBSUosQ0FBQyxFQUFDO0VBRUYzQixFQUFFLENBQUMsNEJBQTRCLEVBQUUsWUFBTTtJQUNyQyxJQUFBNEIsUUFBQSxHQUFzQixJQUFBMUIsbUJBQU0sRUFDMUIsSUFBQTdDLFdBQUEsQ0FBQUksR0FBQSxFQUFDMEIsY0FBQSxDQUFBZ0IsT0FBYTtRQUFDQyxRQUFRLEVBQUVSO01BQVcsQ0FBRSxDQUN4QyxDQUFDO01BRk9TLFNBQVMsR0FBQXVCLFFBQUEsQ0FBVHZCLFNBQVM7SUFLakIsSUFBTXdCLFlBQVksR0FBR3hCLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQ21CLE1BQU07SUFJN0NoQixNQUFNLENBQUNxQixZQUFZLENBQUMsQ0FBQ3BCLFVBQVUsQ0FBQyxDQUFDO0VBRW5DLENBQUMsQ0FBQztFQUVGVCxFQUFFLENBQUMsd0JBQXdCLEVBQUUsWUFBTTtJQUNqQyxJQUFNOEIsY0FBYyxHQUFHLE9BQU87SUFDOUIsSUFBTUMsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWhDLElBQUFDLFFBQUEsR0FBaUMsSUFBQTlCLG1CQUFNLEVBQ3JDLElBQUE3QyxXQUFBLENBQUFJLEdBQUEsRUFBQzBCLGNBQUEsQ0FBQWdCLE9BQWE7UUFDWkMsUUFBUSxFQUFFUixVQUFXO1FBQ3JCa0MsY0FBYyxFQUFFQSxjQUFlO1FBQy9CQyxpQkFBaUIsRUFBRUE7TUFBa0IsQ0FDdEMsQ0FDSCxDQUFDO01BTk96QixvQkFBb0IsR0FBQTBCLFFBQUEsQ0FBcEIxQixvQkFBb0I7SUFTNUIsSUFBTUssWUFBWSxHQUFHTCxvQkFBb0IsQ0FBQywwQkFBMEIsQ0FBQztJQUNyRUUsTUFBTSxDQUFDRyxZQUFZLENBQUMxRCxLQUFLLENBQUM2RCxLQUFLLENBQUMsQ0FBQ0MsSUFBSSxDQUFDZSxjQUFjLENBQUM7RUFHdkQsQ0FBQyxDQUFDO0VBRUY5QixFQUFFLENBQUMsMEJBQTBCLE1BQUFoQixrQkFBQSxDQUFBbUIsT0FBQSxFQUFFLGFBQVk7SUFDekMsSUFBQThCLFFBQUEsR0FBNEQsSUFBQS9CLG1CQUFNLEVBQ2hFLElBQUE3QyxXQUFBLENBQUFJLEdBQUEsRUFBQzBCLGNBQUEsQ0FBQWdCLE9BQWE7UUFBQ0MsUUFBUSxFQUFFUjtNQUFXLENBQUUsQ0FDeEMsQ0FBQztNQUZPVSxvQkFBb0IsR0FBQTJCLFFBQUEsQ0FBcEIzQixvQkFBb0I7TUFBRUQsU0FBUyxHQUFBNEIsUUFBQSxDQUFUNUIsU0FBUztNQUFFWSxjQUFjLEdBQUFnQixRQUFBLENBQWRoQixjQUFjO0lBS3ZELElBQU1OLFlBQVksR0FBR0wsb0JBQW9CLENBQUMsMEJBQTBCLENBQUM7SUFDckVNLHNCQUFTLENBQUNDLFVBQVUsQ0FBQ0YsWUFBWSxFQUFFLDhCQUE4QixDQUFDO0lBR2xFLElBQU1PLGNBQWMsR0FBR0QsY0FBYyxDQUFDLGVBQWUsQ0FBQztJQUN0RCxNQUFNLElBQUFFLGdCQUFHLE1BQUFuQyxrQkFBQSxDQUFBbUIsT0FBQSxFQUFDLGFBQVk7TUFDcEJTLHNCQUFTLENBQUNRLEtBQUssQ0FBQ0YsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsRUFBQztJQUdGLElBQU1XLFlBQVksR0FBR3hCLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFFdEMsTUFBTSxJQUFBYyxnQkFBRyxNQUFBbkMsa0JBQUEsQ0FBQW1CLE9BQUEsRUFBQyxhQUFZO01BQ3BCUyxzQkFBUyxDQUFDUSxLQUFLLENBQUNTLFlBQVksQ0FBQztJQUMvQixDQUFDLEVBQUM7SUFHRnJCLE1BQU0sQ0FBQ1osVUFBVSxDQUFDLENBQUNzQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3JDMUIsTUFBTSxDQUFDWixVQUFVLENBQUMsQ0FBQ3VDLG9CQUFvQixDQUFDM0IsTUFBTSxDQUFDNEIsZ0JBQWdCLENBQUM7TUFDOURDLE9BQU8sRUFBRSw4QkFBOEI7TUFDdkNDLFdBQVcsRUFBRTlCLE1BQU0sQ0FBQytCLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3hDQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxDQUFDLENBQUM7RUFDTCxDQUFDLEVBQUM7RUFPSnhDLEVBQUUsQ0FBQyxrQ0FBa0MsTUFBQWhCLGtCQUFBLENBQUFtQixPQUFBLEVBQUUsYUFBWTtJQUVqRHBFLElBQUksQ0FBQ3lELEtBQUssQ0FBQ2lELHNCQUFhLEVBQUUsYUFBYSxDQUFDLENBQUNDLHFCQUFxQixDQUFDLElBQUlDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVuRixJQUFBQyxRQUFBLEdBQTRELElBQUExQyxtQkFBTSxFQUNoRSxJQUFBN0MsV0FBQSxDQUFBSSxHQUFBLEVBQUMwQixjQUFBLENBQUFnQixPQUFhO1FBQUNDLFFBQVEsRUFBRVI7TUFBVyxDQUFFLENBQ3hDLENBQUM7TUFGT1MsU0FBUyxHQUFBdUMsUUFBQSxDQUFUdkMsU0FBUztNQUFFQyxvQkFBb0IsR0FBQXNDLFFBQUEsQ0FBcEJ0QyxvQkFBb0I7TUFBRVcsY0FBYyxHQUFBMkIsUUFBQSxDQUFkM0IsY0FBYztJQUt2RCxJQUFNTixZQUFZLEdBQUdMLG9CQUFvQixDQUFDLDBCQUEwQixDQUFDO0lBQ3JFTSxzQkFBUyxDQUFDQyxVQUFVLENBQUNGLFlBQVksRUFBRSw4QkFBOEIsQ0FBQztJQUdsRSxJQUFNTyxjQUFjLEdBQUdELGNBQWMsQ0FBQyxlQUFlLENBQUM7SUFDdERMLHNCQUFTLENBQUNRLEtBQUssQ0FBQ0YsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBR2xDLElBQU1TLGNBQWMsR0FBR3RCLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekNPLHNCQUFTLENBQUNRLEtBQUssQ0FBQ08sY0FBYyxDQUFDO0lBRy9CLE1BQU0sSUFBSWtCLE9BQU8sQ0FBQyxVQUFBQyxPQUFPO01BQUEsT0FBSXZELFVBQVUsQ0FBQ3VELE9BQU8sRUFBRSxHQUFHLENBQUM7SUFBQSxFQUFDO0lBR3RELElBQU1qQixZQUFZLEdBQUd4QixTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ3RDTyxzQkFBUyxDQUFDUSxLQUFLLENBQUNTLFlBQVksQ0FBQztJQUc3QixNQUFNLElBQUFrQixvQkFBTyxFQUFDLFlBQU07TUFDbEJ2QyxNQUFNLENBQUNmLG1CQUFLLENBQUN1RCxLQUFLLENBQUMsQ0FBQ2Isb0JBQW9CLENBQ3RDLFFBQVEsRUFDUix3Q0FBd0MsRUFDeEMzQixNQUFNLENBQUN5QyxRQUFRLENBQUMsQ0FDbEIsQ0FBQztJQUNILENBQUMsRUFBRTtNQUFFQyxPQUFPLEVBQUU7SUFBSyxDQUFDLENBQUM7RUFDdkIsQ0FBQyxFQUFDO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsU0FBUzNDLFdBQVdBLENBQUM0QyxJQUFZLEVBQW1EO0VBQ2xGLE1BQU0sSUFBSVIsS0FBSyxDQUFDLDJCQUEyQixDQUFDO0FBQzlDIiwiaWdub3JlTGlzdCI6W119