{"version":3,"names":["PressabilityDebug","_interopRequireWildcard","require","_usePressability","_interopRequireDefault","_flattenStyle","_processColor","_Platform","_TextAncestor","_TextNativeComponent","_react","React","_jsxRuntime","_excluded","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","Text","forwardRef","_ref","forwardedRef","_accessibilityState2","accessible","accessibilityLabel","accessibilityState","allowFontScaling","ariaBusy","ariaChecked","ariaDisabled","ariaExpanded","ariaLabel","ariaSelected","children","ellipsizeMode","disabled","id","nativeID","numberOfLines","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","selectable","selectionColor","suppressHighlighting","style","restProps","_objectWithoutProperties2","_accessibilityLabel","_accessibilityState","busy","checked","expanded","selected","_accessibilityStateDisabled","_disabled","isPressable","_selectionColor","processColor","undefined","_style","isEnabled","color","_numberOfLines","console","error","_selectable","processedStyle","flattenStyle","overrides","fontWeight","toString","userSelect","userSelectToSelectableMap","verticalAlign","textAlignVertical","verticalAlignToTextAlignVerticalMap","_nativeID","hasTextAncestor","useContext","TextAncestor","jsx","NativePressableVirtualText","ref","textProps","assign","textPressabilityProps","NativeVirtualText","_accessible","Platform","select","ios","android","nativeText","NativePressableText","NativeText","Array","isArray","length","hasNonTextChild","child","Provider","value","displayName","useTextPressability","_ref2","_useState","useState","_useState2","_slicedToArray2","isHighlighted","setHighlighted","config","useMemo","_onPressIn","_onPressOut","OS","event","pressRectOffset","eventHandlers","usePressability","eventHandlersForText","onClick","_ref3","_useTextPressability","_useTextPressability2","_ref4","_useTextPressability3","_useTextPressability4","auto","text","none","contain","all","top","bottom","middle","module","exports"],"sources":["Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {TextStyleProp} from '../StyleSheet/StyleSheet';\nimport type {____TextStyle_Internal as TextStyleInternal} from '../StyleSheet/StyleSheetTypes';\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {NativeTextProps} from './TextNativeComponent';\nimport type {PressRetentionOffset, TextProps} from './TextProps';\n\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport flattenStyle from '../StyleSheet/flattenStyle';\nimport processColor from '../StyleSheet/processColor';\nimport Platform from '../Utilities/Platform';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\ntype TextForwardRef = React.ElementRef<\n  typeof NativeText | typeof NativeVirtualText,\n>;\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: component(\n  ref: React.RefSetter<TextForwardRef>,\n  ...props: TextProps\n) = React.forwardRef(\n  (\n    {\n      accessible,\n      accessibilityLabel,\n      accessibilityState,\n      allowFontScaling,\n      'aria-busy': ariaBusy,\n      'aria-checked': ariaChecked,\n      'aria-disabled': ariaDisabled,\n      'aria-expanded': ariaExpanded,\n      'aria-label': ariaLabel,\n      'aria-selected': ariaSelected,\n      children,\n      ellipsizeMode,\n      disabled,\n      id,\n      nativeID,\n      numberOfLines,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      pressRetentionOffset,\n      selectable,\n      selectionColor,\n      suppressHighlighting,\n      style,\n      ...restProps\n    }: TextProps,\n    forwardedRef,\n  ) => {\n    const _accessibilityLabel = ariaLabel ?? accessibilityLabel;\n\n    let _accessibilityState: ?TextProps['accessibilityState'] =\n      accessibilityState;\n    if (\n      ariaBusy != null ||\n      ariaChecked != null ||\n      ariaDisabled != null ||\n      ariaExpanded != null ||\n      ariaSelected != null\n    ) {\n      if (_accessibilityState != null) {\n        _accessibilityState = {\n          busy: ariaBusy ?? _accessibilityState.busy,\n          checked: ariaChecked ?? _accessibilityState.checked,\n          disabled: ariaDisabled ?? _accessibilityState.disabled,\n          expanded: ariaExpanded ?? _accessibilityState.expanded,\n          selected: ariaSelected ?? _accessibilityState.selected,\n        };\n      } else {\n        _accessibilityState = {\n          busy: ariaBusy,\n          checked: ariaChecked,\n          disabled: ariaDisabled,\n          expanded: ariaExpanded,\n          selected: ariaSelected,\n        };\n      }\n    }\n\n    const _accessibilityStateDisabled = _accessibilityState?.disabled;\n    const _disabled = disabled ?? _accessibilityStateDisabled;\n\n    const isPressable =\n      (onPress != null ||\n        onLongPress != null ||\n        onStartShouldSetResponder != null) &&\n      _disabled !== true;\n\n    // TODO: Move this processing to the view configuration.\n    const _selectionColor =\n      selectionColor != null ? processColor(selectionColor) : undefined;\n\n    let _style = style;\n    if (__DEV__) {\n      if (PressabilityDebug.isEnabled() && onPress != null) {\n        _style = [style, {color: 'magenta'}];\n      }\n    }\n\n    let _numberOfLines = numberOfLines;\n    if (_numberOfLines != null && !(_numberOfLines >= 0)) {\n      if (__DEV__) {\n        console.error(\n          `'numberOfLines' in <Text> must be a non-negative number, received: ${_numberOfLines}. The value will be set to 0.`,\n        );\n      }\n      _numberOfLines = 0;\n    }\n\n    let _selectable = selectable;\n\n    let processedStyle = flattenStyle<TextStyleProp>(_style);\n    if (processedStyle != null) {\n      let overrides: ?{...TextStyleInternal} = null;\n      if (typeof processedStyle.fontWeight === 'number') {\n        overrides = overrides || ({}: {...TextStyleInternal});\n        overrides.fontWeight =\n          // $FlowFixMe[incompatible-cast]\n          (processedStyle.fontWeight.toString(): TextStyleInternal['fontWeight']);\n      }\n\n      if (processedStyle.userSelect != null) {\n        _selectable = userSelectToSelectableMap[processedStyle.userSelect];\n        overrides = overrides || ({}: {...TextStyleInternal});\n        overrides.userSelect = undefined;\n      }\n\n      if (processedStyle.verticalAlign != null) {\n        overrides = overrides || ({}: {...TextStyleInternal});\n        overrides.textAlignVertical =\n          verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];\n        overrides.verticalAlign = undefined;\n      }\n\n      if (overrides != null) {\n        // $FlowFixMe[incompatible-type]\n        _style = [_style, overrides];\n      }\n    }\n\n    const _nativeID = id ?? nativeID;\n\n    const hasTextAncestor = useContext(TextAncestor);\n    if (hasTextAncestor) {\n      if (isPressable) {\n        return (\n          <NativePressableVirtualText\n            ref={forwardedRef}\n            textProps={{\n              ...restProps,\n              accessibilityLabel: _accessibilityLabel,\n              accessibilityState: _accessibilityState,\n              nativeID: _nativeID,\n              numberOfLines: _numberOfLines,\n              selectable: _selectable,\n              selectionColor: _selectionColor,\n              style: _style,\n              disabled: disabled,\n              children,\n            }}\n            textPressabilityProps={{\n              onLongPress,\n              onPress,\n              onPressIn,\n              onPressOut,\n              onResponderGrant,\n              onResponderMove,\n              onResponderRelease,\n              onResponderTerminate,\n              onResponderTerminationRequest,\n              onStartShouldSetResponder,\n              pressRetentionOffset,\n              suppressHighlighting,\n            }}\n          />\n        );\n      }\n\n      return (\n        <NativeVirtualText\n          {...restProps}\n          accessibilityLabel={_accessibilityLabel}\n          accessibilityState={_accessibilityState}\n          nativeID={_nativeID}\n          numberOfLines={_numberOfLines}\n          ref={forwardedRef}\n          selectable={_selectable}\n          selectionColor={_selectionColor}\n          style={_style}\n          disabled={disabled}>\n          {children}\n        </NativeVirtualText>\n      );\n    }\n\n    // If the disabled prop and accessibilityState.disabled are out of sync but not both in\n    // falsy states we need to update the accessibilityState object to use the disabled prop.\n    if (\n      _disabled !== _accessibilityStateDisabled &&\n      ((_disabled != null && _disabled !== false) ||\n        (_accessibilityStateDisabled != null &&\n          _accessibilityStateDisabled !== false))\n    ) {\n      _accessibilityState = {..._accessibilityState, disabled: _disabled};\n    }\n\n    const _accessible = Platform.select({\n      ios: accessible !== false,\n      android:\n        accessible == null\n          ? onPress != null || onLongPress != null\n          : accessible,\n      default: accessible,\n    });\n\n    let nativeText = null;\n    if (isPressable) {\n      nativeText = (\n        <NativePressableText\n          ref={forwardedRef}\n          textProps={{\n            ...restProps,\n            accessibilityLabel: _accessibilityLabel,\n            accessibilityState: _accessibilityState,\n            accessible: _accessible,\n            allowFontScaling: allowFontScaling !== false,\n            disabled: _disabled,\n            ellipsizeMode: ellipsizeMode ?? 'tail',\n            nativeID: _nativeID,\n            numberOfLines: _numberOfLines,\n            selectable: _selectable,\n            selectionColor: _selectionColor,\n            style: _style,\n            children,\n          }}\n          textPressabilityProps={{\n            onLongPress,\n            onPress,\n            onPressIn,\n            onPressOut,\n            onResponderGrant,\n            onResponderMove,\n            onResponderRelease,\n            onResponderTerminate,\n            onResponderTerminationRequest,\n            onStartShouldSetResponder,\n            pressRetentionOffset,\n            suppressHighlighting,\n          }}\n        />\n      );\n    } else {\n      nativeText = (\n        <NativeText\n          {...restProps}\n          accessibilityLabel={_accessibilityLabel}\n          accessibilityState={_accessibilityState}\n          accessible={_accessible}\n          allowFontScaling={allowFontScaling !== false}\n          disabled={_disabled}\n          ellipsizeMode={ellipsizeMode ?? 'tail'}\n          nativeID={_nativeID}\n          numberOfLines={_numberOfLines}\n          ref={forwardedRef}\n          selectable={_selectable}\n          selectionColor={_selectionColor}\n          style={_style}>\n          {children}\n        </NativeText>\n      );\n    }\n\n    if (children == null) {\n      return nativeText;\n    }\n\n    // If the children do not contain a JSX element it would not be possible to have a\n    // nested `Text` component so we can skip adding the `TextAncestor` context wrapper\n    // which has a performance overhead. Since we do this for performance reasons we need\n    // to keep the check simple to avoid regressing overall perf. For this reason the\n    // `children.length` constant is set to `3`, this should be a reasonable tradeoff\n    // to capture the majority of `Text` uses but also not make this check too expensive.\n    if (Array.isArray(children) && children.length <= 3) {\n      let hasNonTextChild = false;\n      for (let child of children) {\n        if (child != null && typeof child === 'object') {\n          hasNonTextChild = true;\n          break;\n        }\n      }\n      if (!hasNonTextChild) {\n        return nativeText;\n      }\n    } else if (typeof children !== 'object') {\n      return nativeText;\n    }\n\n    return (\n      <TextAncestor.Provider value={true}>{nativeText}</TextAncestor.Provider>\n    );\n  },\n);\n\nText.displayName = 'Text';\n\ntype TextPressabilityProps = $ReadOnly<{\n  onLongPress?: ?(event: PressEvent) => mixed,\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  onResponderGrant?: ?(event: PressEvent) => void,\n  onResponderMove?: ?(event: PressEvent) => void,\n  onResponderRelease?: ?(event: PressEvent) => void,\n  onResponderTerminate?: ?(event: PressEvent) => void,\n  onResponderTerminationRequest?: ?() => boolean,\n  onStartShouldSetResponder?: ?() => boolean,\n  pressRetentionOffset?: ?PressRetentionOffset,\n  suppressHighlighting?: ?boolean,\n}>;\n\n/**\n * Hook that handles setting up Pressability of Text components.\n *\n * NOTE: This hook is relatively expensive so it should only be used absolutely necessary.\n */\nfunction useTextPressability({\n  onLongPress,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onResponderGrant,\n  onResponderMove,\n  onResponderRelease,\n  onResponderTerminate,\n  onResponderTerminationRequest,\n  onStartShouldSetResponder,\n  pressRetentionOffset,\n  suppressHighlighting,\n}: TextPressabilityProps) {\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  // Setup pressability config and wrap callbacks needs to track the highlight state.\n  const config = useMemo(() => {\n    let _onPressIn = onPressIn;\n    let _onPressOut = onPressOut;\n\n    // Updating isHighlighted causes unnecessary re-renders for platforms that don't use it\n    // in the best case, and cause issues with text selection in the worst case. Forcing\n    // the isHighlighted prop to false on all platforms except iOS.\n    if (Platform.OS === 'ios') {\n      _onPressIn = (event: PressEvent) => {\n        setHighlighted(suppressHighlighting == null || !suppressHighlighting);\n        onPressIn?.(event);\n      };\n\n      _onPressOut = (event: PressEvent) => {\n        setHighlighted(false);\n        onPressOut?.(event);\n      };\n    }\n\n    return {\n      disabled: false,\n      pressRectOffset: pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn: _onPressIn,\n      onPressOut: _onPressOut,\n    };\n  }, [\n    pressRetentionOffset,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    suppressHighlighting,\n  ]);\n\n  // Init the pressability class\n  const eventHandlers = usePressability(config);\n\n  // Create NativeText event handlers which proxy events to pressability\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              onResponderTerminationRequest != null\n                ? onResponderTerminationRequest\n                : eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder:\n              onStartShouldSetResponder != null\n                ? onStartShouldSetResponder\n                : eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n    ],\n  );\n\n  // Return the highlight state and NativeText event handlers\n  return useMemo(\n    () => [isHighlighted, eventHandlersForText],\n    [isHighlighted, eventHandlersForText],\n  );\n}\n\ntype NativePressableTextProps = $ReadOnly<{\n  textProps: NativeTextProps,\n  textPressabilityProps: TextPressabilityProps,\n}>;\n\n/**\n * Wrap the NativeVirtualText component and initialize pressability.\n *\n * This logic is split out from the main Text component to enable the more\n * expensive pressability logic to be only initialized when needed.\n */\nconst NativePressableVirtualText: component(\n  ref: React.RefSetter<TextForwardRef>,\n  ...props: NativePressableTextProps\n) = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {\n  const [isHighlighted, eventHandlersForText] = useTextPressability(\n    textPressabilityProps,\n  );\n\n  return (\n    <NativeVirtualText\n      {...textProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={true}\n      ref={forwardedRef}\n    />\n  );\n});\n\n/**\n * Wrap the NativeText component and initialize pressability.\n *\n * This logic is split out from the main Text component to enable the more\n * expensive pressability logic to be only initialized when needed.\n */\nconst NativePressableText: component(\n  ref: React.RefSetter<TextForwardRef>,\n  ...props: NativePressableTextProps\n) = React.forwardRef(({textProps, textPressabilityProps}, forwardedRef) => {\n  const [isHighlighted, eventHandlersForText] = useTextPressability(\n    textPressabilityProps,\n  );\n\n  return (\n    <NativeText\n      {...textProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={true}\n      ref={forwardedRef}\n    />\n  );\n});\n\nconst userSelectToSelectableMap = {\n  auto: true,\n  text: true,\n  none: false,\n  contain: true,\n  all: true,\n};\n\nconst verticalAlignToTextAlignVerticalMap = {\n  auto: 'auto',\n  top: 'top',\n  bottom: 'bottom',\n  middle: 'center',\n};\n\nmodule.exports = Text;\n"],"mappings":"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","ignoreList":[]}