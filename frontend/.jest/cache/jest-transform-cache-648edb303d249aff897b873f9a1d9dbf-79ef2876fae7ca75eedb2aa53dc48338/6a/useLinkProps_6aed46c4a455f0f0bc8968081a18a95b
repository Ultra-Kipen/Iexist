1e428ee1ce1bfcfe7596f963a092808c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLinkProps = useLinkProps;
var _core = require("@react-navigation/core");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _LinkingContext = require("./LinkingContext.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _getStateFromParams = function getStateFromParams(params) {
  if (params != null && params.state) {
    return params.state;
  }
  if (params != null && params.screen) {
    return {
      routes: [{
        name: params.screen,
        params: params.params,
        state: params.screen ? _getStateFromParams(params.params) : undefined
      }]
    };
  }
  return undefined;
};
function useLinkProps(_ref) {
  var _options$getPathFromS;
  var screen = _ref.screen,
    params = _ref.params,
    href = _ref.href,
    action = _ref.action;
  var root = React.useContext(_core.NavigationContainerRefContext);
  var navigation = React.useContext(_core.NavigationHelpersContext);
  var _React$useContext = React.useContext(_LinkingContext.LinkingContext),
    options = _React$useContext.options;
  var onPress = function onPress(e) {
    var shouldHandle = false;
    if (_reactNative.Platform.OS !== 'web' || !e) {
      e == null || e.preventDefault == null || e.preventDefault();
      shouldHandle = true;
    } else {
      var hasModifierKey = 'metaKey' in e && e.metaKey || 'altKey' in e && e.altKey || 'ctrlKey' in e && e.ctrlKey || 'shiftKey' in e && e.shiftKey;
      var isLeftClick = 'button' in e ? e.button == null || e.button === 0 : true;
      var isSelfTarget = e.currentTarget && 'target' in e.currentTarget ? [undefined, null, '', 'self'].includes(e.currentTarget.target) : true;
      if (!hasModifierKey && isLeftClick && isSelfTarget) {
        e.preventDefault == null || e.preventDefault();
        shouldHandle = true;
      }
    }
    if (shouldHandle) {
      if (action) {
        if (navigation) {
          navigation.dispatch(action);
        } else if (root) {
          root.dispatch(action);
        } else {
          throw new Error("Couldn't find a navigation object. Is your component inside NavigationContainer?");
        }
      } else {
        navigation == null || navigation.navigate(screen, params);
      }
    }
  };
  var getPathFromStateHelper = (_options$getPathFromS = options == null ? void 0 : options.getPathFromState) != null ? _options$getPathFromS : _core.getPathFromState;
  return {
    href: href != null ? href : _reactNative.Platform.OS === 'web' && screen != null ? getPathFromStateHelper({
      routes: [{
        name: screen,
        params: params,
        state: _getStateFromParams(params)
      }]
    }, options == null ? void 0 : options.config) : undefined,
    accessibilityRole: 'link',
    onPress: onPress
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29yZSIsInJlcXVpcmUiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlIiwiX0xpbmtpbmdDb250ZXh0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiZ2V0U3RhdGVGcm9tUGFyYW1zIiwicGFyYW1zIiwic3RhdGUiLCJzY3JlZW4iLCJyb3V0ZXMiLCJuYW1lIiwidW5kZWZpbmVkIiwidXNlTGlua1Byb3BzIiwiX3JlZiIsIl9vcHRpb25zJGdldFBhdGhGcm9tUyIsImhyZWYiLCJhY3Rpb24iLCJyb290IiwidXNlQ29udGV4dCIsIk5hdmlnYXRpb25Db250YWluZXJSZWZDb250ZXh0IiwibmF2aWdhdGlvbiIsIk5hdmlnYXRpb25IZWxwZXJzQ29udGV4dCIsIl9SZWFjdCR1c2VDb250ZXh0IiwiTGlua2luZ0NvbnRleHQiLCJvcHRpb25zIiwib25QcmVzcyIsInNob3VsZEhhbmRsZSIsIlBsYXRmb3JtIiwiT1MiLCJwcmV2ZW50RGVmYXVsdCIsImhhc01vZGlmaWVyS2V5IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImlzTGVmdENsaWNrIiwiYnV0dG9uIiwiaXNTZWxmVGFyZ2V0IiwiY3VycmVudFRhcmdldCIsImluY2x1ZGVzIiwidGFyZ2V0IiwiZGlzcGF0Y2giLCJFcnJvciIsIm5hdmlnYXRlIiwiZ2V0UGF0aEZyb21TdGF0ZUhlbHBlciIsImdldFBhdGhGcm9tU3RhdGUiLCJjb25maWciLCJhY2Nlc3NpYmlsaXR5Um9sZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VMaW5r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