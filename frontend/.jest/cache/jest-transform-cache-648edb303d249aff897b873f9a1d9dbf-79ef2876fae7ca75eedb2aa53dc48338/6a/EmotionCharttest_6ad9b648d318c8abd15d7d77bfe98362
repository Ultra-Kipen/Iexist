070c7dda349f74364437f9f6cc7b5c85
_getJestObj().mock('react-native-chart-kit', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text;
  return {
    LineChart: jest.fn(function (props) {
      return React.createElement(View, {
        testID: 'line-chart'
      }, React.createElement(Text, null, 'LineChart Mocked'));
    }),
    PieChart: jest.fn(function (props) {
      return React.createElement(View, {
        testID: 'pie-chart'
      }, React.createElement(Text, null, 'PieChart Mocked'));
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionChart = _interopRequireDefault(require("../../src/components/EmotionChart"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('EmotionChart', function () {
  var mockEmotionData = [{
    count: 5,
    date: '2025-04-01',
    emotionId: 1,
    emotionName: '행복',
    color: '#FFD700'
  }, {
    count: 3,
    date: '2025-04-02',
    emotionId: 2,
    emotionName: '슬픔',
    color: '#4682B4'
  }, {
    count: 2,
    date: '2025-04-03',
    emotionId: 1,
    emotionName: '행복',
    color: '#FFD700'
  }, {
    count: 4,
    date: '2025-04-04',
    emotionId: 3,
    emotionName: '화남',
    color: '#FF4500'
  }];
  it('renders empty state when no data is provided', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionChart.default, {
        data: [],
        timeRange: "daily"
      })),
      getByText = _render.getByText;
    expect(getByText('감정 기록이 없습니다.')).toBeTruthy();
  });
  it('renders LineChart by default', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionChart.default, {
        data: mockEmotionData,
        timeRange: "daily"
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    expect(getByText('일간 감정 변화')).toBeTruthy();
    expect(getByTestId('line-chart')).toBeTruthy();
  });
  it('renders PieChart when type is pie', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionChart.default, {
        data: mockEmotionData,
        timeRange: "weekly",
        type: "pie"
      })),
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    expect(getByText('주간 감정 분포')).toBeTruthy();
    expect(getByTestId('pie-chart')).toBeTruthy();
  });
  it('shows correct title based on timeRange', function () {
    var timeRanges = [{
      range: 'daily',
      expected: '일간'
    }, {
      range: 'weekly',
      expected: '주간'
    }, {
      range: 'monthly',
      expected: '월간'
    }, {
      range: 'yearly',
      expected: '연간'
    }];
    timeRanges.forEach(function (_ref) {
      var range = _ref.range,
        expected = _ref.expected;
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionChart.default, {
          data: mockEmotionData,
          timeRange: range
        })),
        getByText = _render4.getByText;
      expect(getByText(`${expected} 감정 변화`)).toBeTruthy();
    });
  });
  it('applies custom height when provided', function () {
    var customHeight = 300;
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionChart.default, {
        data: mockEmotionData,
        timeRange: "monthly",
        height: customHeight
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('line-chart')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,