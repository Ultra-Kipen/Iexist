{"version":3,"names":["_getJestObj","mock","_jest$requireActual","jest","requireActual","Text","View","StyleSheet","Platform","OS","select","fn","Object","assign","create","styles","flatten","Dimensions","get","mockReturnValue","width","height","useNotification","_interopRequireDefault","require","_react","_reactNative","_NotificationBadge","_NotificationContext","_jsxRuntime","_require","describe","beforeEach","unreadCount","it","_render","render","jsx","default","showZero","queryByText","expect","toBeNull","_render2","getByText","toBeTruthy","_render3","_render4","maxCount"],"sources":["NotificationBadge.test.tsx"],"sourcesContent":["// __TESTS__/components/NotificationBadge.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport NotificationBadge from '../../src/components/NotificationBadge';\r\nimport { useNotification } from '../../src/contexts/NotificationContext';\r\n\r\n// react-native 모킹\r\njest.mock('react-native', () => {\r\n  const { Text, View, StyleSheet } = jest.requireActual('react-native-web');\r\n  \r\n  return {\r\n    Platform: {\r\n      OS: 'ios',\r\n      select: jest.fn(),\r\n    },\r\n    StyleSheet: {\r\n      ...StyleSheet,\r\n      create: jest.fn((styles) => styles),\r\n      flatten: jest.fn((styles) => styles),\r\n    },\r\n    View,\r\n    Text,\r\n    Dimensions: {\r\n      get: jest.fn().mockReturnValue({ width: 375, height: 667 }),\r\n    },\r\n  };\r\n});\r\n// NotificationContext 모의(Mock)\r\njest.mock('../../src/contexts/NotificationContext', () => ({\r\n  useNotification: jest.fn()\r\n}));\r\n\r\ndescribe('NotificationBadge 컴포넌트', () => {\r\n  beforeEach(() => {\r\n    // 기본 모의 설정\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 0\r\n    });\r\n  });\r\n\r\n  it('unreadCount가 0이고 showZero가 false이면 배지가 표시되지 않아야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 0\r\n    });\r\n    \r\n    const { queryByText } = render(\r\n      <NotificationBadge showZero={false} />\r\n    );\r\n    \r\n    expect(queryByText('0')).toBeNull();\r\n  });\r\n\r\n  it('unreadCount가 0이지만 showZero가 true이면 배지가 표시되어야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 0\r\n    });\r\n    \r\n    const { getByText } = render(\r\n      <NotificationBadge showZero={true} />\r\n    );\r\n    \r\n    expect(getByText('0')).toBeTruthy();\r\n  });\r\n\r\n  it('unreadCount가 있으면 배지에 카운트가 표시되어야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 5\r\n    });\r\n    \r\n    const { getByText } = render(\r\n      <NotificationBadge />\r\n    );\r\n    \r\n    expect(getByText('5')).toBeTruthy();\r\n  });\r\n\r\n  it('maxCount보다 큰 unreadCount는 maxCount+로 표시되어야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 120\r\n    });\r\n    \r\n    const { getByText } = render(\r\n      <NotificationBadge maxCount={99} />\r\n    );\r\n    \r\n    expect(getByText('99+')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}