9f510f9660bca308b2b4fcda7b0b7d36
_getJestObj().mock('react-native-paper', function () {
  var mockPaper = {
    Button: function Button(_ref) {
      var onPress = _ref.onPress,
        children = _ref.children;
      return (0, _jsxRuntime.jsx)("button", {
        onClick: onPress,
        children: children
      });
    },
    Card: {
      Content: function Content(_ref2) {
        var children = _ref2.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      },
      Actions: function Actions(_ref3) {
        var children = _ref3.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      }
    },
    Chip: function Chip(_ref4) {
      var children = _ref4.children;
      return (0, _jsxRuntime.jsx)("span", {
        children: children
      });
    },
    Dialog: {
      Title: function Title(_ref5) {
        var children = _ref5.children;
        return (0, _jsxRuntime.jsx)("h2", {
          children: children
        });
      },
      Content: function Content(_ref6) {
        var children = _ref6.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      },
      Actions: function Actions(_ref7) {
        var children = _ref7.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      }
    },
    Portal: function Portal(_ref8) {
      var children = _ref8.children;
      return (0, _jsxRuntime.jsx)("div", {
        children: children
      });
    }
  };
  mockPaper.Card.Content = mockPaper.Card.Content;
  mockPaper.Card.Actions = mockPaper.Card.Actions;
  mockPaper.Dialog.Title = mockPaper.Dialog.Title;
  mockPaper.Dialog.Content = mockPaper.Dialog.Content;
  mockPaper.Dialog.Actions = mockPaper.Dialog.Actions;
  mockPaper.Card = Object.assign(function (_ref9) {
    var children = _ref9.children;
    return (0, _jsxRuntime.jsx)("div", {
      children: children
    });
  }, mockPaper.Card);
  mockPaper.Dialog = Object.assign(function (_ref10) {
    var children = _ref10.children,
      visible = _ref10.visible;
    return visible ? (0, _jsxRuntime.jsx)("div", {
      children: children
    }) : null;
  }, mockPaper.Dialog);
  return mockPaper;
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          posts: [{
            post_id: 1,
            content: '첫 번째 테스트 게시물입니다.',
            emotion_summary: '행복',
            like_count: 5,
            comment_count: 2,
            created_at: '2025-03-01T12:00:00Z'
          }]
        }
      });
    }),
    deletePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          success: true
        }
      });
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyPostsScreen = _interopRequireDefault(require("../../src/screens/MyPostsScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('fetches posts on mount', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: mockNavigation,
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getMyPosts).toHaveBeenCalled();
    }, {
      timeout: 1000
    });
  }));
  it('navigates to create post screen', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      getByText = _render.getByText;
    var newPostButton = yield (0, _reactNative.waitFor)(function () {
      return getByText('새 게시물');
    }, {
      timeout: 1000
    });
    _reactNative.fireEvent.press(newPostButton);
    expect(mockNavigation.navigate).toHaveBeenCalledWith('CreatePost');
  }));
  it('shows delete confirmation dialog', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      getByText = _render2.getByText,
      queryByText = _render2.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByText('삭제');
      _reactNative.fireEvent.press(deleteButton);
    }, {
      timeout: 1000
    });
    expect(queryByText('게시물 삭제')).not.toBeNull();
    expect(queryByText('정말로 이 게시물을 삭제하시겠습니까?')).not.toBeNull();
  }));
  it('closes dialog when cancel is pressed', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      getByText = _render3.getByText,
      queryByText = _render3.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByText('삭제');
      _reactNative.fireEvent.press(deleteButton);
    }, {
      timeout: 1000
    });
    expect(queryByText('게시물 삭제')).not.toBeNull();
    var cancelButton = getByText('취소');
    _reactNative.fireEvent.press(cancelButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('게시물 삭제')).toBeNull();
    }, {
      timeout: 1000
    });
  }));
  it('deletes post when confirmation is given', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      getByText = _render4.getByText;
    yield (0, _reactNative.waitFor)(function () {
      var deleteButton = getByText('삭제');
      _reactNative.fireEvent.press(deleteButton);
    }, {
      timeout: 1000
    });
    var confirmDeleteButton = getByText('삭제', {
      selector: 'Dialog.Actions button'
    });
    _reactNative.fireEvent.press(confirmDeleteButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.deletePost).toHaveBeenCalledWith(1);
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 성공적으로 삭제되었습니다');
    }, {
      timeout: 1000
    });
  }));
  it('refreshes posts when pull-to-refresh is triggered', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      UNSAFE_getByType = _render5.UNSAFE_getByType;
    expect(_postService.default.getMyPosts).toHaveBeenCalledTimes(1);
    var refreshControl = UNSAFE_getByType('RefreshControl');
    (0, _reactNative.fireEvent)(refreshControl, 'refresh');
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getMyPosts).toHaveBeenCalledTimes(2);
    }, {
      timeout: 1000
    });
  }));
  it('navigates to post detail when detail button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      getByText = _render6.getByText;
    yield (0, _reactNative.waitFor)(function () {
      var detailButton = getByText('자세히');
      _reactNative.fireEvent.press(detailButton);
    }, {
      timeout: 1000
    });
    expect(mockNavigation.navigate).toHaveBeenCalledWith('Post', {
      postId: 1
    });
  }));
  it('shows empty state when no posts are available', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getMyPosts.mockImplementationOnce(function () {
      return Promise.resolve({
        data: {
          posts: []
        }
      });
    });
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: mockNavigation,
        route: {}
      })),
      getByText = _render7.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('게시물이 없습니다')).toBeTruthy();
      expect(getByText('첫 게시물 작성하기')).toBeTruthy();
    }, {
      timeout: 1000
    });
  }));
  it('handles error during data loading', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getMyPosts.mockImplementationOnce(function () {
      return Promise.reject(new Error('네트워크 오류'));
    });
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: mockNavigation,
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다');
    }, {
      timeout: 1000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,