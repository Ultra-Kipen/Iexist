4a032641e1682265e12ebac6e3f594b4
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = waitFor;
var _config = require("./config");
var _flushMicroTasks = require("./flush-micro-tasks");
var _errors = require("./helpers/errors");
var _timers = require("./helpers/timers");
var _wrapAsync = require("./helpers/wrap-async");
var DEFAULT_INTERVAL = 50;
function waitForInternal(expectation, _ref) {
  var _ref$timeout = _ref.timeout,
    timeout = _ref$timeout === void 0 ? (0, _config.getConfig)().asyncUtilTimeout : _ref$timeout,
    _ref$interval = _ref.interval,
    interval = _ref$interval === void 0 ? DEFAULT_INTERVAL : _ref$interval,
    stackTraceError = _ref.stackTraceError,
    onTimeout = _ref.onTimeout;
  if (typeof expectation !== 'function') {
    throw new TypeError('Received `expectation` arg must be a function');
  }
  return new Promise(function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (resolve, reject) {
      var lastError, intervalId;
      var finished = false;
      var promiseStatus = 'idle';
      var overallTimeoutTimer = null;
      var usingFakeTimers = (0, _timers.jestFakeTimersAreEnabled)();
      if (usingFakeTimers) {
        checkExpectation();
        var fakeTimeRemaining = timeout;
        while (!finished) {
          if (!(0, _timers.jestFakeTimersAreEnabled)()) {
            var error = new Error(`Changed from using fake timers to real timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to real timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830`);
            if (stackTraceError) {
              (0, _errors.copyStackTrace)(error, stackTraceError);
            }
            reject(error);
            return;
          }
          if (fakeTimeRemaining <= 0) {
            handleTimeout();
            return;
          } else {
            fakeTimeRemaining -= interval;
          }
          jest.advanceTimersByTime(interval);
          checkExpectation();
          yield (0, _flushMicroTasks.flushMicroTasks)();
        }
      } else {
        overallTimeoutTimer = (0, _timers.setTimeout)(handleTimeout, timeout);
        intervalId = setInterval(checkRealTimersCallback, interval);
        checkExpectation();
      }
      function onDone(done) {
        finished = true;
        if (overallTimeoutTimer) {
          (0, _timers.clearTimeout)(overallTimeoutTimer);
        }
        if (!usingFakeTimers) {
          clearInterval(intervalId);
        }
        if (done.type === 'error') {
          reject(done.error);
        } else {
          resolve(done.result);
        }
      }
      function checkRealTimersCallback() {
        if ((0, _timers.jestFakeTimersAreEnabled)()) {
          var _error = new Error(`Changed from using real timers to fake timers while using waitFor. This is not allowed and will result in very strange behavior. Please ensure you're awaiting all async things your test is doing before changing to fake timers. For more info, please go to https://github.com/testing-library/dom-testing-library/issues/830`);
          if (stackTraceError) {
            (0, _errors.copyStackTrace)(_error, stackTraceError);
          }
          return reject(_error);
        } else {
          return checkExpectation();
        }
      }
      function checkExpectation() {
        if (promiseStatus === 'pending') return;
        try {
          var result = expectation();
          if (typeof (result == null ? void 0 : result.then) === 'function') {
            var promiseResult = result;
            promiseStatus = 'pending';
            promiseResult.then(function (resolvedValue) {
              promiseStatus = 'resolved';
              onDone({
                type: 'result',
                result: resolvedValue
              });
              return;
            }, function (rejectedValue) {
              promiseStatus = 'rejected';
              lastError = rejectedValue;
              return;
            });
          } else {
            onDone({
              type: 'result',
              result: result
            });
          }
        } catch (error) {
          lastError = error;
        }
      }
      function handleTimeout() {
        var error;
        if (lastError) {
          if (lastError instanceof Error) {
            error = lastError;
          } else {
            error = new Error(String(lastError));
          }
          if (stackTraceError) {
            (0, _errors.copyStackTrace)(error, stackTraceError);
          }
        } else {
          error = new Error('Timed out in waitFor.');
          if (stackTraceError) {
            (0, _errors.copyStackTrace)(error, stackTraceError);
          }
        }
        if (typeof onTimeout === 'function') {
          var result = onTimeout(error);
          if (result) {
            error = result;
          }
        }
        onDone({
          type: 'error',
          error: error
        });
      }
    });
    return function (_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }());
}
function waitFor(expectation, options) {
  var stackTraceError = new _errors.ErrorWithStack('STACK_TRACE_ERROR', waitFor);
  var optionsWithStackTrace = Object.assign({
    stackTraceError: stackTraceError
  }, options);
  return (0, _wrapAsync.wrapAsync)(function () {
    return waitForInternal(expectation, optionsWithStackTrace);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,