6fc86a88929565a3262b402e5bb1c124
_getJestObj().mock('react-native', function () {
  var _jest$requireActual = jest.requireActual('react-native-web'),
    Text = _jest$requireActual.Text,
    View = _jest$requireActual.View,
    StyleSheet = _jest$requireActual.StyleSheet;
  return {
    Platform: {
      OS: 'ios',
      select: jest.fn()
    },
    StyleSheet: Object.assign({}, StyleSheet, {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (styles) {
        return styles;
      })
    }),
    View: View,
    Text: Text,
    Dimensions: {
      get: jest.fn().mockReturnValue({
        width: 375,
        height: 667
      })
    }
  };
});
_getJestObj().mock("../../src/contexts/NotificationContext", function () {
  return {
    useNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationBadge = _interopRequireDefault(require("../../src/components/NotificationBadge"));
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('NotificationBadge 컴포넌트', function () {
  beforeEach(function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 0
    });
  });
  it('unreadCount가 0이고 showZero가 false이면 배지가 표시되지 않아야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 0
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {
        showZero: false
      })),
      queryByText = _render.queryByText;
    expect(queryByText('0')).toBeNull();
  });
  it('unreadCount가 0이지만 showZero가 true이면 배지가 표시되어야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 0
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {
        showZero: true
      })),
      getByText = _render2.getByText;
    expect(getByText('0')).toBeTruthy();
  });
  it('unreadCount가 있으면 배지에 카운트가 표시되어야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 5
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {})),
      getByText = _render3.getByText;
    expect(getByText('5')).toBeTruthy();
  });
  it('maxCount보다 큰 unreadCount는 maxCount+로 표시되어야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 120
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {
        maxCount: 99
      })),
      getByText = _render4.getByText;
    expect(getByText('99+')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfamVzdCRyZXF1aXJlQWN0dWFsIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJUZXh0IiwiVmlldyIsIlN0eWxlU2hlZXQiLCJQbGF0Zm9ybSIsIk9TIiwic2VsZWN0IiwiZm4iLCJPYmplY3QiLCJhc3NpZ24iLCJjcmVhdGUiLCJzdHlsZXMiLCJmbGF0dGVuIiwiRGltZW5zaW9ucyIsImdldCIsIm1vY2tSZXR1cm5WYWx1ZSIsIndpZHRoIiwiaGVpZ2h0IiwidXNlTm90aWZpY2F0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfTm90aWZpY2F0aW9uQmFkZ2UiLCJfTm90aWZpY2F0aW9uQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJ1bnJlYWRDb3VudCIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzaG93WmVybyIsInF1ZXJ5QnlUZXh0IiwiZXhwZWN0IiwidG9CZU51bGwiLCJfcmVuZGVyMiIsImdldEJ5VGV4dCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMyIsIl9yZW5kZXI0IiwibWF4Q291bnQiXSwic291cmNlcyI6WyJOb3RpZmljYXRpb25CYWRnZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX1RFU1RTX18vY29tcG9uZW50cy9Ob3RpZmljYXRpb25CYWRnZS50ZXN0LnRzeFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBOb3RpZmljYXRpb25CYWRnZSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9Ob3RpZmljYXRpb25CYWRnZSc7XHJcbmltcG9ydCB7IHVzZU5vdGlmaWNhdGlvbiB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9Ob3RpZmljYXRpb25Db250ZXh0JztcclxuXHJcbi8vIHJlYWN0LW5hdGl2ZSDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgeyBUZXh0LCBWaWV3LCBTdHlsZVNoZWV0IH0gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZS13ZWInKTtcclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgUGxhdGZvcm06IHtcclxuICAgICAgT1M6ICdpb3MnLFxyXG4gICAgICBzZWxlY3Q6IGplc3QuZm4oKSxcclxuICAgIH0sXHJcbiAgICBTdHlsZVNoZWV0OiB7XHJcbiAgICAgIC4uLlN0eWxlU2hlZXQsXHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbigoc3R5bGVzKSA9PiBzdHlsZXMpLFxyXG4gICAgICBmbGF0dGVuOiBqZXN0LmZuKChzdHlsZXMpID0+IHN0eWxlcyksXHJcbiAgICB9LFxyXG4gICAgVmlldyxcclxuICAgIFRleHQsXHJcbiAgICBEaW1lbnNpb25zOiB7XHJcbiAgICAgIGdldDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7IHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0pLFxyXG4gICAgfSxcclxuICB9O1xyXG59KTtcclxuLy8gTm90aWZpY2F0aW9uQ29udGV4dCDrqqjsnZgoTW9jaylcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29udGV4dHMvTm90aWZpY2F0aW9uQ29udGV4dCcsICgpID0+ICh7XHJcbiAgdXNlTm90aWZpY2F0aW9uOiBqZXN0LmZuKClcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ05vdGlmaWNhdGlvbkJhZGdlIOy7tO2PrOuEjO2KuCcsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIOq4sOuzuCDrqqjsnZgg7ISk7KCVXHJcbiAgICAodXNlTm90aWZpY2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdW5yZWFkQ291bnQ6IDBcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgndW5yZWFkQ291bnTqsIAgMOydtOqzoCBzaG93WmVyb+qwgCBmYWxzZeydtOuptCDrsLDsp4DqsIAg7ZGc7Iuc65CY7KeAIOyViuyVhOyVvCDtlanri4jri6QnLCAoKSA9PiB7XHJcbiAgICAodXNlTm90aWZpY2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdW5yZWFkQ291bnQ6IDBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSBzaG93WmVybz17ZmFsc2V9IC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJzAnKSkudG9CZU51bGwoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3VucmVhZENvdW506rCAIDDsnbTsp4Drp4wgc2hvd1plcm/qsIAgdHJ1ZeydtOuptCDrsLDsp4DqsIAg7ZGc7Iuc65CY7Ja07JW8IO2VqeuLiOuLpCcsICgpID0+IHtcclxuICAgICh1c2VOb3RpZmljYXRpb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICB1bnJlYWRDb3VudDogMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSBzaG93WmVybz17dHJ1ZX0gLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJzAnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgndW5yZWFkQ291bnTqsIAg7J6I7Jy866m0IOuwsOyngOyXkCDsubTsmrTtirjqsIAg7ZGc7Iuc65CY7Ja07JW8IO2VqeuLiOuLpCcsICgpID0+IHtcclxuICAgICh1c2VOb3RpZmljYXRpb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICB1bnJlYWRDb3VudDogNVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnNScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdtYXhDb3VudOuztOuLpCDtgbAgdW5yZWFkQ291bnTripQgbWF4Q291bnQr66GcIO2RnOyLnOuQmOyWtOyVvCDtlanri4jri6QnLCAoKSA9PiB7XHJcbiAgICAodXNlTm90aWZpY2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdW5yZWFkQ291bnQ6IDEyMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSBtYXhDb3VudD17OTl9IC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc5OSsnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFBQyxtQkFBQSxHQUFtQ0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsa0JBQWtCLENBQUM7SUFBakVDLElBQUksR0FBQUgsbUJBQUEsQ0FBSkcsSUFBSTtJQUFFQyxJQUFJLEdBQUFKLG1CQUFBLENBQUpJLElBQUk7SUFBRUMsVUFBVSxHQUFBTCxtQkFBQSxDQUFWSyxVQUFVO0VBRTlCLE9BQU87SUFDTEMsUUFBUSxFQUFFO01BQ1JDLEVBQUUsRUFBRSxLQUFLO01BQ1RDLE1BQU0sRUFBRVAsSUFBSSxDQUFDUSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUNESixVQUFVLEVBQUFLLE1BQUEsQ0FBQUMsTUFBQSxL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