ff0ead473a339d4aa6a1e0a6940a81fb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
function codegenNativeComponent(componentName, options) {
  if (global.RN$Bridgeless === true && true) {
    console.warn(`Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`);
  }
  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
  if (options != null && options.paperComponentNameDeprecated != null) {
    if (_UIManager.default.hasViewManagerConfig(componentName)) {
      componentNameInUse = componentName;
    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
      componentNameInUse = options.paperComponentNameDeprecated;
    } else {
      var _options$paperCompone;
      throw new Error(`Failed to find native component for either ${componentName} or ${(_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'}`);
    }
  }
  return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = exports.default = codegenNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsImNvZGVnZW5OYXRpdmVDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwib3B0aW9ucyIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJjb25zb2xlIiwid2FybiIsImNvbXBvbmVudE5hbWVJblVzZSIsInBhcGVyQ29tcG9uZW50TmFtZSIsInBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQiLCJVSU1hbmFnZXIiLCJoYXNWaWV3TWFuYWdlckNvbmZpZyIsIl9vcHRpb25zJHBhcGVyQ29tcG9uZSIsIkVycm9yIiwicmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJjb2RlZ2VuTmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4vLyBUT0RPOiBtb3ZlIHRoaXMgZmlsZSB0byBzaGltcy9SZWFjdE5hdGl2ZSAocmVxdWlyZXMgUmVhY3QgdXBkYXRlIGFuZCBzeW5jKVxuXG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuXG5pbXBvcnQgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgVUlNYW5hZ2VyIGZyb20gJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5cbi8vIFRPRE86IGltcG9ydCBmcm9tIENvZGVnZW5TY2hlbWEgb25jZSB3b3Jrc3BhY2VzIGFyZSBlbmFibGVkXG50eXBlIE9wdGlvbnMgPSAkUmVhZE9ubHk8e3xcbiAgaW50ZXJmYWNlT25seT86IGJvb2xlYW4sXG4gIHBhcGVyQ29tcG9uZW50TmFtZT86IHN0cmluZyxcbiAgcGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZD86IHN0cmluZyxcbiAgZXhjbHVkZWRQbGF0Zm9ybXM/OiAkUmVhZE9ubHlBcnJheTwnaU9TJyB8ICdhbmRyb2lkJz4sXG58fT47XG5cbmV4cG9ydCB0eXBlIE5hdGl2ZUNvbXBvbmVudFR5cGU8VD4gPSBIb3N0Q29tcG9uZW50PFQ+O1xuXG4vLyBJZiB0aGlzIGZ1bmN0aW9uIHJ1bnMgdGhlbiB0aGF0IG1lYW5zIHRoZSB2aWV3IGNvbmZpZ3Mgd2VyZSBub3Rcbi8vIGdlbmVyYXRlZCBhdCBidWlsZCB0aW1lIHVzaW5nIGBHZW5lcmF0ZVZpZXdDb25maWdKcy5qc2AuIFRodXNcbi8vIHdlIG5lZWQgdG8gYHJlcXVpcmVOYXRpdmVDb21wb25lbnRgIHRvIGdldCB0aGUgdmlldyBjb25maWdzIGZyb20gdmlldyBtYW5hZ2Vycy5cbi8vIGByZXF1aXJlTmF0aXZlQ29tcG9uZW50YCBpcyBub3QgYXZhaWxhYmxlIGluIEJyaWRnZWxlc3MgbW9kZS5cbi8vIGUuZy4gVGhpcyBmdW5jdGlvbiBydW5zIGF0IHJ1bnRpbWUgaWYgYGNvZGVnZW5OYXRpdmVDb21wb25lbnRgIHdhcyBub3QgY2FsbGVkXG4vLyBmcm9tIGEgZmlsZSBzdWZmaXhlZCB3aXRoIE5hdGl2ZUNvbXBvbmVudC5qcy5cbmZ1bmN0aW9uIGNvZGVnZW5OYXRpdmVDb21wb25lbnQ8UHJvcHM6IHsuLi59PihcbiAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICBvcHRpb25zPzogT3B0aW9ucyxcbik6IE5hdGl2ZUNvbXBvbmVudFR5cGU8UHJvcHM+IHtcbiAgaWYgKGdsb2JhbC5STiRCcmlkZ2VsZXNzID09PSB0cnVlICYmIF9fREVWX18pIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgQ29kZWdlbiBkaWRuJ3QgcnVuIGZvciAke2NvbXBvbmVudE5hbWV9LiBUaGlzIHdpbGwgYmUgYW4gZXJyb3IgaW4gdGhlIGZ1dHVyZS4gTWFrZSBzdXJlIHlvdSBhcmUgdXNpbmcgQHJlYWN0LW5hdGl2ZS9iYWJlbC1wcmVzZXQgd2hlbiBidWlsZGluZyB5b3VyIEphdmFTY3JpcHQgY29kZS5gLFxuICAgICk7XG4gIH1cblxuICBsZXQgY29tcG9uZW50TmFtZUluVXNlID1cbiAgICBvcHRpb25zICYmIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lICE9IG51bGxcbiAgICAgID8gb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVcbiAgICAgIDogY29tcG9uZW50TmFtZTtcblxuICBpZiAob3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZCAhPSBudWxsKSB7XG4gICAgaWYgKFVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZyhjb21wb25lbnROYW1lKSkge1xuICAgICAgY29tcG9uZW50TmFtZUluVXNlID0gY29tcG9uZW50TmFtZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkICE9IG51bGwgJiZcbiAgICAgIFVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZyhvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQpXG4gICAgKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuICAgICAgY29tcG9uZW50TmFtZUluVXNlID0gb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gZmluZCBuYXRpdmUgY29tcG9uZW50IGZvciBlaXRoZXIgJHtjb21wb25lbnROYW1lfSBvciAke1xuICAgICAgICAgIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZCA/PyAnKHVua25vd24pJ1xuICAgICAgICB9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChyZXF1aXJlTmF0aXZlQ29tcG9uZW50PFByb3BzPihcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgIGNvbXBvbmVudE5hbWVJblVzZSxcbiAgKTogSG9zdENvbXBvbmVudDxQcm9wcz4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWNBLElBQUFBLHVCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFrQkEsU0FBU0Usc0JBQXNCQSxDQUM3QkMsYUFBcUIsRUFDckJDLE9BQWlCLEVBQ1c7RUFDNUIsSUFBSUMsTUFBTSxDQUFDQyxhQUFhLEtBQUssSUFBSSxRQUFXLEVBQUU7SUFDNUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLDBCQUEwQkwsYUFBYSwrSEFDekMsQ0FBQztFQUNIO0VBRUEsSUFBSU0sa0JBQWtCLEdBQ3BCTCxPQUFPLElBQUlBLE9BQU8sQ0FBQ00sa0JBQWtCLElBQUksSUFBSSxHQUN6Q04sT0FBTyxDQUFDTSxrQkFBa0IsR0FDMUJQLGFBQWE7RUFFbkIsSUFBSUMsT0FBTyxJQUFJLElBQUksSUFBSUEsT0FBTyxDQUFDTyw0QkFBNEIsSUFBSSxJQUFJLEVBQUU7SUFDbkUsSUFBSUMsa0JBQVMsQ0FBQ0Msb0JBQW9CLENBQUNWLGFBQWEsQ0FBQyxFQUFFO01BQ2pETSxrQkFBa0IsR0FBR04sYUFBYTtJQUNwQyxDQUFDLE1BQU0sSUFDTEMsT0FBTyxDQUFDTyw0QkFBNEIsSUFBSSxJQUFJLElBQzVDQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQ1QsT0FBTyxDQUFDTyw0QkFBNEIsQ0FBQyxFQUNwRTtNQUVBRixrQkFBa0IsR0FBR0wsT0FBTyxDQUFDTyw0QkFBNEI7SUFDM0QsQ0FBQyxNQUFNO01BQUEsSUFBQUcscUJBQUE7TUFDTCxNQUFNLElBQUlDLEtBQUssQ0FDYiw4Q0FBOENaLGFBQWEsUUFBQVcscUJBQUEsR0FDekRWLE9BQU8sQ0FBQ08sNEJBQTRCLFlBQUFHLHFCQUFBLEdBQUksV0FBVyxFQUV2RCxDQUFDO0lBQ0g7RUFDRjtFQUVBLE9BQVEsSUFBQUUsK0JBQXNCLEVBRTVCUCxrQkFDRixDQUFDO0FBQ0g7QUFBQyxJQUFBUSxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVjakIsc0JBQXNCIiwiaWdub3JlTGlzdCI6W119