db9ac448b3ad3bf8866042ea7e3a90db
_getJestObj().mock("../../src/services/api/challengeService", function () {
  return _challengeService.default;
});
_getJestObj().mock('@react-native-community/datetimepicker', function () {
  var MockDateTimePicker = function MockDateTimePicker() {
    return null;
  };
  return MockDateTimePicker;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _challengeData = require("../../__mocks__/data/challengeData.mock");
var _challengeService = _interopRequireDefault(require("../../__mocks__/services/challengeService.mock"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('Challenge Flow', function () {
  it('mocks challenge service getChallengeById correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var result = yield _challengeService.default.getChallengeById(challengeId);
    expect(result.data).toBeDefined();
    expect(result.data.challenge_id).toBe(challengeId);
    expect(_challengeService.default.getChallengeById).toHaveBeenCalledWith(challengeId);
  }));
  it('mocks challenge service createChallenge correctly', (0, _asyncToGenerator2.default)(function* () {
    var newChallenge = {
      title: '새로운 테스트 챌린지',
      description: '테스트용 챌린지입니다.',
      start_date: '2025-05-01',
      end_date: '2025-05-15',
      is_public: true
    };
    var result = yield _challengeService.default.createChallenge(newChallenge);
    expect(result.data).toBeDefined();
    expect(result.data.title).toBe(newChallenge.title);
    expect(result.data.description).toBe(newChallenge.description);
    expect(_challengeService.default.createChallenge).toHaveBeenCalledWith(newChallenge);
  }));
  it('mocks challenge service joinChallenge correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 2;
    var result = yield _challengeService.default.joinChallenge(challengeId);
    expect(result.data).toBeDefined();
    expect(result.data.success).toBe(true);
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
  }));
  it('mocks challenge service getChallengeEmotions correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var userId = 1;
    var result = yield _challengeService.default.getChallengeEmotions(challengeId, userId);
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(result.data.length).toBeGreaterThan(0);
    expect(result.data[0].challenge_id).toBe(challengeId);
    expect(result.data[0].user_id).toBe(userId);
    expect(_challengeService.default.getChallengeEmotions).toHaveBeenCalledWith(challengeId, userId);
  }));
  it('mocks challenge service logChallengeEmotion correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var userId = 1;
    var emotionData = {
      emotion_id: 3,
      log_date: '2025-04-15',
      note: '테스트 감정 기록'
    };
    var result = yield _challengeService.default.logChallengeEmotion(challengeId, userId, emotionData);
    expect(result.data).toBeDefined();
    expect(result.data.challenge_id).toBe(challengeId);
    expect(result.data.user_id).toBe(userId);
    expect(result.data.emotion_id).toBe(emotionData.emotion_id);
    expect(result.data.note).toBe(emotionData.note);
    expect(_challengeService.default.logChallengeEmotion).toHaveBeenCalledWith(challengeId, userId, emotionData);
  }));
  it('handles error when fetching challenges fails', (0, _asyncToGenerator2.default)(function* () {
    var errorMessage = '서버 연결 오류';
    _challengeService.default.getAllChallenges.mockRejectedValueOnce(new Error(errorMessage));
    yield expect(_challengeService.default.getAllChallenges()).rejects.toThrow(errorMessage);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalled();
  }));
  it('toggles challenge participation correctly', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    _challengeService.default.joinChallenge.mockResolvedValueOnce({
      data: {
        success: true
      }
    });
    var result = yield _challengeService.default.joinChallenge(challengeId);
    expect(result.data.success).toBe(true);
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
    _challengeService.default.leaveChallenge.mockResolvedValueOnce({
      data: {
        success: true
      }
    });
    result = yield _challengeService.default.leaveChallenge(challengeId);
    expect(result.data.success).toBe(true);
    expect(_challengeService.default.leaveChallenge).toHaveBeenCalledWith(challengeId);
  }));
  it('submits emotion log for a challenge', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var userId = 1;
    var emotionData = {
      emotion_id: 2,
      note: '오늘은 정말 감사한 하루였습니다.'
    };
    var result = yield _challengeService.default.logChallengeEmotion(challengeId, userId, emotionData);
    expect(result.data).toBeDefined();
    expect(result.data.challenge_id).toBe(challengeId);
    expect(result.data.user_id).toBe(userId);
    expect(result.data.emotion_id).toBe(emotionData.emotion_id);
    expect(result.data.note).toBe(emotionData.note);
    expect(_challengeService.default.logChallengeEmotion).toHaveBeenCalledWith(challengeId, userId, emotionData);
  }));
  it('shows challenge list and navigates to details', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn()
    };
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges
    });
    var result = yield _challengeService.default.getAllChallenges();
    expect(result.data).toEqual(_challengeData.mockChallenges);
    var challengeId = _challengeData.mockChallenges[0].challenge_id;
    mockNavigation.navigate('ChallengeDetail', {
      challengeId: challengeId
    });
    expect(mockNavigation.navigate).toHaveBeenCalledWith('ChallengeDetail', {
      challengeId: challengeId
    });
  }));
  it('creates a new challenge', (0, _asyncToGenerator2.default)(function* () {
    var newChallengeData = {
      title: '매일 감사한 일 기록하기',
      description: '하루에 한 가지 이상 감사한 일을 기록하는 챌린지입니다.',
      start_date: '2025-05-01',
      end_date: '2025-05-31',
      is_public: true,
      max_participants: 20
    };
    var result = yield _challengeService.default.createChallenge(newChallengeData);
    expect(result.data).toBeDefined();
    expect(result.data.title).toBe(newChallengeData.title);
    expect(result.data.description).toBe(newChallengeData.description);
    expect(result.data.start_date).toBe(newChallengeData.start_date);
    expect(result.data.end_date).toBe(newChallengeData.end_date);
    expect(result.data.is_public).toBe(newChallengeData.is_public);
    expect(result.data.max_participants).toBe(newChallengeData.max_participants);
    expect(result.data.challenge_id).toBeDefined();
    expect(typeof result.data.challenge_id).toBe('number');
    expect(_challengeService.default.createChallenge).toHaveBeenCalledWith(newChallengeData);
  }));
  it('joins a challenge from detail screen', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 2;
    _challengeService.default.getChallengeById.mockResolvedValueOnce({
      data: Object.assign({}, _challengeData.mockChallenges.find(function (c) {
        return c.challenge_id === challengeId;
      }), {
        is_participating: false
      })
    });
    var beforeJoin = yield _challengeService.default.getChallengeById(challengeId);
    expect(beforeJoin.data.is_participating).toBe(false);
    var joinResult = yield _challengeService.default.joinChallenge(challengeId);
    expect(joinResult.data.success).toBe(true);
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
    _challengeService.default.getChallengeById.mockResolvedValueOnce({
      data: Object.assign({}, _challengeData.mockChallenges.find(function (c) {
        return c.challenge_id === challengeId;
      }), {
        is_participating: true
      })
    });
    var afterJoin = yield _challengeService.default.getChallengeById(challengeId);
    expect(afterJoin.data.is_participating).toBe(true);
    var leaveResult = yield _challengeService.default.leaveChallenge(challengeId);
    expect(leaveResult.data.success).toBe(true);
    expect(_challengeService.default.leaveChallenge).toHaveBeenCalledWith(challengeId);
    _challengeService.default.getChallengeById.mockResolvedValueOnce({
      data: Object.assign({}, _challengeData.mockChallenges.find(function (c) {
        return c.challenge_id === challengeId;
      }), {
        is_participating: false
      })
    });
    var afterLeave = yield _challengeService.default.getChallengeById(challengeId);
    expect(afterLeave.data.is_participating).toBe(false);
  }));
  it('handles pagination when fetching challenges', (0, _asyncToGenerator2.default)(function* () {
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.slice(0, 1),
      pagination: {
        total: _challengeData.mockChallenges.length,
        current_page: 1,
        per_page: 1,
        total_pages: 2
      }
    });
    var firstPage = yield _challengeService.default.getAllChallenges({
      page: 1,
      limit: 1
    });
    expect(firstPage.data).toHaveLength(1);
    expect(firstPage.pagination.current_page).toBe(1);
    expect(firstPage.pagination.total_pages).toBe(2);
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.slice(1, 2),
      pagination: {
        total: _challengeData.mockChallenges.length,
        current_page: 2,
        per_page: 1,
        total_pages: 2
      }
    });
    var secondPage = yield _challengeService.default.getAllChallenges({
      page: 2,
      limit: 1
    });
    expect(secondPage.data).toHaveLength(1);
    expect(secondPage.pagination.current_page).toBe(2);
    expect(secondPage.data[0].challenge_id).toBe(_challengeData.mockChallenges[1].challenge_id);
  }));
  it('filters challenges by status', (0, _asyncToGenerator2.default)(function* () {
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.filter(function (c) {
        var today = new Date();
        var endDate = new Date(c.end_date);
        return endDate >= today;
      })
    });
    var activeResult = yield _challengeService.default.getAllChallenges({
      status: 'active'
    });
    expect(activeResult.data).toBeDefined();
    expect(Array.isArray(activeResult.data)).toBe(true);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalledWith({
      status: 'active'
    });
  }));
  it('searches challenges by keyword', (0, _asyncToGenerator2.default)(function* () {
    var keyword = '감사';
    _challengeService.default.getAllChallenges.mockResolvedValueOnce({
      data: _challengeData.mockChallenges.filter(function (c) {
        return c.title.includes(keyword) || c.description && c.description.includes(keyword);
      })
    });
    var searchResult = yield _challengeService.default.getAllChallenges({
      keyword: keyword
    });
    expect(searchResult.data).toBeDefined();
    expect(Array.isArray(searchResult.data)).toBe(true);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalledWith({
      keyword: keyword
    });
    searchResult.data.forEach(function (challenge) {
      expect(challenge.title.includes(keyword) || challenge.description && challenge.description.includes(keyword)).toBe(true);
    });
  }));
  it('handles errors when joining a challenge fails', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 999;
    _challengeService.default.joinChallenge.mockRejectedValueOnce(new Error('챌린지를 찾을 수 없습니다.'));
    yield expect(_challengeService.default.joinChallenge(challengeId)).rejects.toThrow('챌린지를 찾을 수 없습니다.');
    expect(_challengeService.default.joinChallenge).toHaveBeenCalledWith(challengeId);
  }));
  it('includes participants list in challenge details', (0, _asyncToGenerator2.default)(function* () {
    var challengeId = 1;
    var result = yield _challengeService.default.getChallengeParticipants(challengeId);
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(_challengeService.default.getChallengeParticipants).toHaveBeenCalledWith(challengeId);
    if (result.data.length > 0) {
      var participant = result.data[0];
      expect(participant.user_id).toBeDefined();
      expect(participant.nickname).toBeDefined();
    }
  }));
  it('challenge service mocks are properly set up', function () {
    expect(_challengeService.default.getAllChallenges).toBeDefined();
    expect(_challengeService.default.getChallengeById).toBeDefined();
    expect(_challengeService.default.createChallenge).toBeDefined();
    _challengeService.default.getAllChallenges();
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalled();
    var testId = 1;
    _challengeService.default.getChallengeById(testId);
    expect(_challengeService.default.getChallengeById).toHaveBeenCalledWith(testId);
  });
  it('challenge mock data exists', function () {
    expect(_challengeData.mockChallenges).toBeDefined();
    expect(_challengeData.mockChallenges.length).toBeGreaterThan(0);
    expect(_challengeData.mockChallenges[0].challenge_id).toBeDefined();
    expect(_challengeData.mockChallenges[0].title).toBeDefined();
  });
  it('mocks challenge service correctly for UI rendering', (0, _asyncToGenerator2.default)(function* () {
    var result = yield _challengeService.default.getAllChallenges();
    expect(result.data).toBeDefined();
    expect(Array.isArray(result.data)).toBe(true);
    expect(result.data).toEqual(_challengeData.mockChallenges);
    expect(_challengeService.default.getAllChallenges).toHaveBeenCalled();
    var firstChallenge = result.data[0];
    expect(firstChallenge.title).toBe(_challengeData.mockChallenges[0].title);
    expect(firstChallenge.challenge_id).toBe(_challengeData.mockChallenges[0].challenge_id);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,