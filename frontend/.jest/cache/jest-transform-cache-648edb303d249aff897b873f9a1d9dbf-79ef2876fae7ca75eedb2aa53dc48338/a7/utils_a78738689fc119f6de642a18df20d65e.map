{"version":3,"names":["_react","_interopRequireDefault","require","toArray","object","Array","isArray","withPrevAndCurrent","array","mapFn","previousArr","currentArr","_toConsumableArray2","default","transformedArr","forEach","current","i","previous","transformed","push","hasProperty","key","Object","prototype","hasOwnProperty","call","isTestEnv","global","process","env","NODE_ENV","tagMessage","msg","isFabric","_global","nativeFabricUIManager","isReact19","version","startsWith","isRemoteDebuggingEnabled","localGlobal","nativeCallSyncHook","__REMOTEDEV__","RN$Bridgeless","deepEqual","obj1","obj2","keys1","keys","keys2","length","includes","INT32_MAX"],"sources":["utils.ts"],"sourcesContent":["import React from 'react';\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    // This type cast is fine and solves problem mentioned in https://github.com/software-mansion/react-native-gesture-handler/pull/2867 (namely that `previous` can be undefined).\n    // Unfortunately, linter on our CI does not allow this type of casting as it is unnecessary. To bypass that we use eslint-disable.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    const previous = previousArr[i] as Transformed | null;\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isTestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && process.env.NODE_ENV === 'test';\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// Helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function isReact19() {\n  return React.version.startsWith('19.');\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  const localGlobal = global as any;\n  return (\n    (!localGlobal.nativeCallSyncHook || !!localGlobal.__REMOTEDEV__) &&\n    !localGlobal.RN$Bridgeless\n  );\n}\n\n/**\n * Recursively compares two objects for deep equality.\n *\n * **Note:** This function does not support cyclic references.\n *\n * @param obj1 - The first object to compare.\n * @param obj2 - The second object to compare.\n * @returns `true` if the objects are deeply equal, `false` otherwise.\n */\nexport function deepEqual(obj1: any, obj2: any) {\n  if (obj1 === obj2) {\n    return true;\n  }\n\n  if (\n    typeof obj1 !== 'object' ||\n    typeof obj2 !== 'object' ||\n    obj1 === null ||\n    obj2 === null\n  ) {\n    return false;\n  }\n\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport const INT32_MAX = 2 ** 31 - 1;\n"],"mappings":"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","ignoreList":[]}