{"version":3,"names":["_getJestObj","mock","Object","assign","jest","requireActual","useAuth","fn","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactTestRenderer","_LoginScreen","_reactNative2","AuthContext","_interopRequireWildcard","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_require","spyOn","Alert","mockImplementation","mockNavigation","navigate","describe","mockLogin","beforeEach","clearAllMocks","login","it","_render","render","jsx","navigation","getByText","getByLabelText","expect","toBeTruthy","_render2","act","fireEvent","press","waitFor","_render3","getByPlaceholderText","emailInput","changeText","_render4","passwordInput","mockResolvedValueOnce","_render5","queryByTestId","toHaveBeenCalledWith","email","password","errorMessage","mockRejectedValueOnce","response","data","message","_render6","alert","_render7","_render8"],"sources":["LoginScreen.test.tsx"],"sourcesContent":["// LoginScreen.test.tsx 수정\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { act } from 'react-test-renderer';\r\nimport LoginScreen from '../../src/screens/LoginScreen';\r\nimport { AuthProvider } from '../../src/contexts/AuthContext';\r\nimport { Alert } from 'react-native';\r\nimport * as AuthContext from '../../src/contexts/AuthContext';\r\n\r\n// Mock the Alert module\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\n// Mock the navigation\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n};\r\n\r\n// Mock the useAuth hook\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  ...jest.requireActual('../../src/contexts/AuthContext'),\r\n  useAuth: jest.fn(),\r\n}));\r\n\r\ndescribe('LoginScreen', () => {\r\n  const mockLogin = jest.fn();\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (AuthContext.useAuth as jest.Mock).mockImplementation(() => ({\r\n      login: mockLogin,\r\n    }));\r\n  });\r\n\r\n  it('renders correctly', () => {\r\n    const { getByText, getByLabelText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n    \r\n    expect(getByText('IExist')).toBeTruthy();\r\n    expect(getByText('나는 존재한다.')).toBeTruthy();\r\n    expect(getByText('로그인')).toBeTruthy();\r\n    expect(getByText('비밀번호를 잊으셨나요?')).toBeTruthy();\r\n    expect(getByText('회원가입')).toBeTruthy();\r\n  });\r\n\r\n  it('validates empty form inputs', async () => {\r\n    const { getByText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n  \r\n    await act(async () => {\r\n      fireEvent.press(getByText('로그인'));\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('이메일을 입력해주세요')).toBeTruthy();\r\n      expect(getByText('비밀번호를 입력해주세요')).toBeTruthy();\r\n    });\r\n  });\r\n  \r\n  it('validates invalid email format', async () => {\r\n    const { getByText, getByPlaceholderText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n    \r\n    const emailInput = getByPlaceholderText('이메일');\r\n    fireEvent.changeText(emailInput, 'invalid-email');\r\n    \r\n    await act(async () => {\r\n      fireEvent.press(getByText('로그인'));\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('유효한 이메일 주소를 입력해주세요')).toBeTruthy();\r\n    });\r\n  });\r\n  \r\n  it('validates short password', async () => {\r\n    const { getByText, getByPlaceholderText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n    \r\n    const emailInput = getByPlaceholderText('이메일');\r\n    fireEvent.changeText(emailInput, 'valid@email.com');\r\n    \r\n    const passwordInput = getByPlaceholderText('비밀번호');\r\n    fireEvent.changeText(passwordInput, '12345');\r\n    \r\n    await act(async () => {\r\n      fireEvent.press(getByText('로그인'));\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('비밀번호는 최소 6자 이상이어야 합니다')).toBeTruthy();\r\n    });\r\n  });\r\n  \r\n  it('submits valid form and calls login', async () => {\r\n    mockLogin.mockResolvedValueOnce({});\r\n    \r\n    const { getByText, getByPlaceholderText, queryByTestId } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n    \r\n    const emailInput = getByPlaceholderText('이메일');\r\n    fireEvent.changeText(emailInput, 'valid@email.com');\r\n    \r\n    const passwordInput = getByPlaceholderText('비밀번호');\r\n    fireEvent.changeText(passwordInput, 'password123');\r\n    \r\n    await act(async () => {\r\n      fireEvent.press(getByText('로그인'));\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(mockLogin).toHaveBeenCalledWith({ \r\n        email: 'valid@email.com', \r\n        password: 'password123' \r\n      });\r\n    });\r\n  });\r\n  \r\n  it('shows error alert when login fails', async () => {\r\n    const errorMessage = '인증에 실패했습니다';\r\n    mockLogin.mockRejectedValueOnce({ \r\n      response: { data: { message: errorMessage } } \r\n    });\r\n    \r\n    const { getByText, getByPlaceholderText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n    \r\n    const emailInput = getByPlaceholderText('이메일');\r\n    fireEvent.changeText(emailInput, 'valid@email.com');\r\n    \r\n    const passwordInput = getByPlaceholderText('비밀번호');\r\n    fireEvent.changeText(passwordInput, 'password123');\r\n    \r\n    await act(async () => {\r\n      fireEvent.press(getByText('로그인'));\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(Alert.alert).toHaveBeenCalledWith(\r\n        '로그인 실패',\r\n        errorMessage\r\n      );\r\n    });\r\n  });\r\n  \r\n  it('navigates to registration screen', () => {\r\n    const { getByText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n  \r\n    fireEvent.press(getByText('회원가입'));\r\n    \r\n    expect(mockNavigation.navigate).toHaveBeenCalledWith('Register');\r\n  });\r\n  \r\n  it('navigates to forgot password screen', () => {\r\n    const { getByText } = render(\r\n      <LoginScreen navigation={mockNavigation} />\r\n    );\r\n  \r\n    fireEvent.press(getByText('비밀번호를 잊으셨나요?'));\r\n    \r\n    expect(mockNavigation.navigate).toHaveBeenCalledWith('ForgotPassword');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}