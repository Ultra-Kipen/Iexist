b9766dbd7ceae2fc80e7c4d219669312
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;
exports.withPrevAndCurrent = withPrevAndCurrent;
exports.hasProperty = hasProperty;
exports.isTestEnv = isTestEnv;
exports.tagMessage = tagMessage;
exports.isFabric = isFabric;
exports.isReact19 = isReact19;
exports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;
exports.deepEqual = deepEqual;
exports.INT32_MAX = void 0;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function toArray(object) {
  if (!Array.isArray(object)) {
    return [object];
  }
  return object;
}
function withPrevAndCurrent(array, mapFn) {
  var previousArr = [null];
  var currentArr = (0, _toConsumableArray2.default)(array);
  var transformedArr = [];
  currentArr.forEach(function (current, i) {
    var previous = previousArr[i];
    var transformed = mapFn(previous, current);
    previousArr.push(transformed);
    transformedArr.push(transformed);
  });
  return transformedArr;
}
function hasProperty(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}
function isTestEnv() {
  return hasProperty(global, 'process') && process.env.NODE_ENV === 'test';
}
function tagMessage(msg) {
  return `[react-native-gesture-handler] ${msg}`;
}
function isFabric() {
  var _global;
  return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);
}
function isReact19() {
  return _react.default.version.startsWith('19.');
}
function isRemoteDebuggingEnabled() {
  var localGlobal = global;
  return (!localGlobal.nativeCallSyncHook || !!localGlobal.__REMOTEDEV__) && !localGlobal.RN$Bridgeless;
}
function deepEqual(obj1, obj2) {
  if (obj1 === obj2) {
    return true;
  }
  if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || obj1 === null || obj2 === null) {
    return false;
  }
  var keys1 = Object.keys(obj1);
  var keys2 = Object.keys(obj2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (var key of keys1) {
    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {
      return false;
    }
  }
  return true;
}
var INT32_MAX = 2 ** 31 - 1;
exports.INT32_MAX = INT32_MAX;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsInRvQXJyYXkiLCJvYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ3aXRoUHJldkFuZEN1cnJlbnQiLCJhcnJheSIsIm1hcEZuIiwicHJldmlvdXNBcnIiLCJjdXJyZW50QXJyIiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImRlZmF1bHQiLCJ0cmFuc2Zvcm1lZEFyciIsImZvckVhY2giLCJjdXJyZW50IiwiaSIsInByZXZpb3VzIiwidHJhbnNmb3JtZWQiLCJwdXNoIiwiaGFzUHJvcGVydHkiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc1Rlc3RFbnYiLCJnbG9iYWwiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJ0YWdNZXNzYWdlIiwibXNnIiwiaXNGYWJyaWMiLCJfZ2xvYmFsIiwibmF0aXZlRmFicmljVUlNYW5hZ2VyIiwiaXNSZWFjdDE5IiwidmVyc2lvbiIsInN0YXJ0c1dpdGgiLCJpc1JlbW90ZURlYnVnZ2luZ0VuYWJsZWQiLCJsb2NhbEdsb2JhbCIsIm5hdGl2ZUNhbGxTeW5jSG9vayIsIl9fUkVNT1RFREVWX18iLCJSTiRCcmlkZ2VsZXNzIiwiZGVlcEVxdWFsIiwib2JqMSIsIm9iajIiLCJrZXlzMSIsImtleXMiLCJrZXlzMiIsImxlbmd0aCIsImluY2x1ZGVzIiwiSU5UMzJfTUFYIl0sInNvdXJjZXMiOlsidXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXk8VD4ob2JqZWN0OiBUIHwgVFtdKTogVFtdIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICByZXR1cm4gW29iamVjdF07XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgdHlwZSB3aXRoUHJldkFuZEN1cnJlbnRNYXBGbjxULCBUcmFuc2Zvcm1lZD4gPSAoXG4gIHByZXZpb3VzOiBUcmFuc2Zvcm1lZCB8IG51bGwsXG4gIGN1cnJlbnQ6IFRcbikgPT4gVHJhbnNmb3JtZWQ7XG5leHBvcnQgZnVuY3Rpb24gd2l0aFByZXZBbmRDdXJyZW50PFQsIFRyYW5zZm9ybWVkPihcbiAgYXJyYXk6IFRbXSxcbiAgbWFwRm46IHdpdGhQcmV2QW5kQ3VycmVudE1hcEZuPFQsIFRyYW5zZm9ybWVkPlxuKTogVHJhbnNmb3JtZWRbXSB7XG4gIGNvbnN0IHByZXZpb3VzQXJyOiAobnVsbCB8IFRyYW5zZm9ybWVkKVtdID0gW251bGxdO1xuICBjb25zdCBjdXJyZW50QXJyID0gWy4uLmFycmF5XTtcbiAgY29uc3QgdHJhbnNmb3JtZWRBcnI6IFRyYW5zZm9ybWVkW10gPSBbXTtcbiAgY3VycmVudEFyci5mb3JFYWNoKChjdXJyZW50LCBpKSA9PiB7XG4gICAgLy8gVGhpcyB0eXBlIGNhc3QgaXMgZmluZSBhbmQgc29sdmVzIHByb2JsZW0gbWVudGlvbmVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2Z0d2FyZS1tYW5zaW9uL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvcHVsbC8yODY3IChuYW1lbHkgdGhhdCBgcHJldmlvdXNgIGNhbiBiZSB1bmRlZmluZWQpLlxuICAgIC8vIFVuZm9ydHVuYXRlbHksIGxpbnRlciBvbiBvdXIgQ0kgZG9lcyBub3QgYWxsb3cgdGhpcyB0eXBlIG9mIGNhc3RpbmcgYXMgaXQgaXMgdW5uZWNlc3NhcnkuIFRvIGJ5cGFzcyB0aGF0IHdlIHVzZSBlc2xpbnQtZGlzYWJsZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LXR5cGUtYXNzZXJ0aW9uXG4gICAgY29uc3QgcHJldmlvdXMgPSBwcmV2aW91c0FycltpXSBhcyBUcmFuc2Zvcm1lZCB8IG51bGw7XG4gICAgY29uc3QgdHJhbnNmb3JtZWQgPSBtYXBGbihwcmV2aW91cywgY3VycmVudCk7XG4gICAgcHJldmlvdXNBcnIucHVzaCh0cmFuc2Zvcm1lZCk7XG4gICAgdHJhbnNmb3JtZWRBcnIucHVzaCh0cmFuc2Zvcm1lZCk7XG4gIH0pO1xuICByZXR1cm4gdHJhbnNmb3JtZWRBcnI7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJvcGVydHkob2JqZWN0OiBvYmplY3QsIGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZXN0RW52KCk6IGJvb2xlYW4ge1xuICAvLyBAdHMtaWdub3JlIERvIG5vdCB1c2UgYEB0eXBlcy9ub2RlYCBiZWNhdXNlIGl0IHdpbGwgcHJpb3JpdGlzZSBOb2RlIHR5cGVzIG92ZXIgUk4gdHlwZXMgd2hpY2ggYnJlYWtzIHRoZSB0eXBlcyAoZXguIHNldFRpbWVvdXQpIGluIFJlYWN0IE5hdGl2ZSBwcm9qZWN0cy5cbiAgcmV0dXJuIGhhc1Byb3BlcnR5KGdsb2JhbCwgJ3Byb2Nlc3MnKSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFnTWVzc2FnZShtc2c6IHN0cmluZykge1xuICByZXR1cm4gYFtyZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyXSAke21zZ31gO1xufVxuXG4vLyBIZWxwZXIgbWV0aG9kIHRvIGNoZWNrIHdoZXRoZXIgRmFicmljIGlzIGVuYWJsZWQsIGhvd2V2ZXIgZ2xvYmFsLm5hdGl2ZUZhYnJpY1VJTWFuYWdlclxuLy8gbWF5IG5vdCBiZSBpbml0aWFsaXplZCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlclxuZXhwb3J0IGZ1bmN0aW9uIGlzRmFicmljKCk6IGJvb2xlYW4ge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5hdGl2ZUZhYnJpY1VJTWFuYWdlciBpcyBub3QgeWV0IGluY2x1ZGVkIGluIHRoZSBSTiB0eXBlc1xuICByZXR1cm4gISFnbG9iYWw/Lm5hdGl2ZUZhYnJpY1VJTWFuYWdlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhY3QxOSgpIHtcbiAgcmV0dXJuIFJlYWN0LnZlcnNpb24uc3RhcnRzV2l0aCgnMTkuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlbW90ZURlYnVnZ2luZ0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gIC8vIHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkIGNoZWNrcyBpZiBpbiByZW1vdGUgZGVidWdnaW5nIGluIHRoZSBzYW1lIHdheVxuICAvLyBAdHMtaWdub3JlIGdsb2JhbCBpcyBhdmFpbGFibGUgYnV0IG5vZGUgdHlwZXMgYXJlIG5vdCBpbmNsdWRlZFxuICBjb25zdCBsb2NhbEdsb2JhbCA9IGdsb2JhbCBhcyBhbnk7XG4gIHJldHVybiAoXG4gICAgKCFsb2NhbEdsb2JhbC5uYXRpdmVDYWxsU3luY0hvb2sgfHwgISFsb2NhbEdsb2JhbC5fX1JFTU9URURFVl9fKSAmJlxuICAgICFsb2NhbEdsb2JhbC5STiRCcmlkZ2VsZXNzXG4gICk7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgY29tcGFyZXMgdHdvIG9iamVjdHMgZm9yIGRlZXAgZXF1YWxpdHkuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCBjeWNsaWMgcmVmZXJlbmNlcy5cbiAqXG4gKiBAcGFyYW0gb2JqMSAtIFRoZSBmaXJzdCBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSBvYmoyIC0gVGhlIHNlY29uZCBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZGVlcGx5IGVxdWFsLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChvYmoxOiBhbnksIG9iajI6IGFueSkge1xuICBpZiAob2JqMSA9PT0gb2JqMikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBvYmoxICE9PSAnb2JqZWN0JyB8fFxuICAgIHR5cGVvZiBvYmoyICE9PSAnb2JqZWN0JyB8fFxuICAgIG9iajEgPT09IG51bGwgfHxcbiAgICBvYmoyID09PSBudWxsXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob2JqMSk7XG4gIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMob2JqMik7XG5cbiAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5czEpIHtcbiAgICBpZiAoIWtleXMyLmluY2x1ZGVzKGtleSkgfHwgIWRlZXBFcXVhbChvYmoxW2tleV0sIG9iajJba2V5XSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IElOVDMyX01BWCA9IDIgKiogMzEgLSAxO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTs7Ozs7O0FBRU8sU0FBU0MsT0FBVEEsQ0FBb0JDLE1BQXBCLEVBQTBDO0VBQy9DLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFOLENBQWNGLE1BQWQsQ0FBTCxFQUE0QjtJQUMxQixPQUFPLENBQUNBLE1BQUQsQ0FBUDtFQUNEO0VBRUQsT0FBT0EsTUFBUDtBQUNEO0FBTU0sU0FBU0csa0JBQVRBLENBQ0xDLEtBREssRUFFTEMsS0FGSyxFQUdVO0VBQ2YsSUFBTUMsV0FBbUMsR0FBRyxDQUFDLElBQUQsQ0FBNUM7RUFDQSxJQUFNQyxVQUFVLE9BQUFDLG1CQUFBLENBQUFDLE9BQUEsRUFBT0wsS0FBSixDQUFuQjtFQUNBLElB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