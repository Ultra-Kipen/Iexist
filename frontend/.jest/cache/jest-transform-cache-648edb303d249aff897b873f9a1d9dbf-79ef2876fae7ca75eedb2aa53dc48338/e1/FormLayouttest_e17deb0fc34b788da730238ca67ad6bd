cab05debe27fa5dadc90082b474b38a7
_getJestObj().mock('react-native', function () {
  var reactNativeMock = {
    StyleSheet: {
      create: function create(styles) {
        return styles;
      },
      flatten: function flatten(style) {
        if (Array.isArray(style)) {
          return Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(style.map(function (s) {
            return typeof s === 'object' ? s : {};
          }))));
        }
        return style || {};
      }
    },
    Platform: {
      OS: 'ios',
      select: function select(obj) {
        return obj.ios;
      }
    },
    Keyboard: {
      dismiss: jest.fn()
    },
    View: function View(_ref) {
      var style = _ref.style,
        testID = _ref.testID,
        children = _ref.children;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": testID || 'view',
        style: style,
        children: children
      });
    },
    Text: function Text(_ref2) {
      var style = _ref2.style,
        testID = _ref2.testID,
        children = _ref2.children;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": testID || 'text',
        style: style,
        children: children
      });
    },
    TextInput: function TextInput(_ref3) {
      var style = _ref3.style,
        testID = _ref3.testID,
        value = _ref3.value,
        onChangeText = _ref3.onChangeText,
        placeholder = _ref3.placeholder;
      return (0, _jsxRuntime.jsx)("input", {
        "data-testid": testID || 'input',
        style: style,
        value: value,
        onChange: function onChange(e) {
          return onChangeText && onChangeText(e.target.value);
        },
        placeholder: placeholder
      });
    },
    TouchableOpacity: function TouchableOpacity(_ref4) {
      var style = _ref4.style,
        testID = _ref4.testID,
        onPress = _ref4.onPress,
        children = _ref4.children;
      return (0, _jsxRuntime.jsx)("button", {
        "data-testid": testID || 'button',
        style: style,
        onClick: onPress,
        children: children
      });
    },
    TouchableWithoutFeedback: function TouchableWithoutFeedback(_ref5) {
      var onPress = _ref5.onPress,
        children = _ref5.children;
      return (0, _jsxRuntime.jsx)("div", {
        onClick: onPress,
        children: children
      });
    },
    ScrollView: function ScrollView(_ref6) {
      var contentContainerStyle = _ref6.contentContainerStyle,
        children = _ref6.children,
        keyboardShouldPersistTaps = _ref6.keyboardShouldPersistTaps,
        showsVerticalScrollIndicator = _ref6.showsVerticalScrollIndicator;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": "scroll-view",
        "data-keyboard-persist": keyboardShouldPersistTaps,
        "data-shows-indicator": String(showsVerticalScrollIndicator),
        style: contentContainerStyle,
        children: children
      });
    },
    KeyboardAvoidingView: function KeyboardAvoidingView(_ref7) {
      var style = _ref7.style,
        behavior = _ref7.behavior,
        keyboardVerticalOffset = _ref7.keyboardVerticalOffset,
        children = _ref7.children;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": "keyboard-avoiding-view",
        "data-behavior": behavior,
        "data-offset": keyboardVerticalOffset,
        style: style,
        children: children
      });
    }
  };
  return reactNativeMock;
});
_getJestObj().mock("../../src/hooks/useTheme", function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#f5f5f5',
            primary: '#007bff',
            text: '#333333',
            surface: '#ffffff'
          },
          dark: false,
          roundness: 4,
          fonts: {
            regular: {
              fontFamily: 'System',
              fontWeight: '400'
            }
          }
        }
      };
    }
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return function MockLoadingIndicator() {
    return (0, _jsxRuntime.jsx)("div", {
      "data-testid": "loading-indicator",
      children: (0, _jsxRuntime.jsx)("span", {
        children: "\uB85C\uB529 \uC911..."
      })
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _FormLayout = _interopRequireDefault(require("../../src/layouts/FormLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestFormInput = function TestFormInput(_ref8) {
  var label = _ref8.label,
    value = _ref8.value,
    onChangeText = _ref8.onChangeText,
    testID = _ref8.testID;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "form-field-container",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: label
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: testID,
      value: value,
      onChangeText: onChangeText
    })]
  });
};
var TestSubmitButton = function TestSubmitButton(_ref9) {
  var onPress = _ref9.onPress,
    title = _ref9.title;
  return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
    testID: "submit-button",
    onPress: onPress,
    children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: title
    })
  });
};
describe('FormLayout - 실제 환경 검증', function () {
  it('기본 컴포넌트 렌더링 검증', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uAE30\uBCF8 \uCF58\uD150\uCE20"
        })
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('keyboard-avoiding-view')).toBeTruthy();
  });
  it('loading이 true일 때 로딩 인디케이터가 표시되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uCF58\uD150\uCE20"
        })
      })),
      getByTestId = _render2.getByTestId;
    expect(getByTestId('loading-indicator')).toBeTruthy();
  });
  it('footer의 제출 버튼이 클릭되면 onSubmit이 호출되어야 함', function () {
    var onSubmitMock = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        onSubmit: onSubmitMock,
        footer: (0, _jsxRuntime.jsx)(TestSubmitButton, {
          onPress: onSubmitMock,
          title: "\uC81C\uCD9C"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD3FC \uB0B4\uC6A9"
        })
      })),
      getByTestId = _render3.getByTestId;
    var submitButton = getByTestId('submit-button');
    _reactNative.fireEvent.click(submitButton);
    expect(onSubmitMock).toHaveBeenCalledTimes(1);
  });
  it('avoidKeyboard가 false일 때 View를 사용해야 함', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        avoidKeyboard: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD14C\uC2A4\uD2B8"
        })
      })),
      queryByTestId = _render4.queryByTestId;
    expect(queryByTestId('keyboard-avoiding-view')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,