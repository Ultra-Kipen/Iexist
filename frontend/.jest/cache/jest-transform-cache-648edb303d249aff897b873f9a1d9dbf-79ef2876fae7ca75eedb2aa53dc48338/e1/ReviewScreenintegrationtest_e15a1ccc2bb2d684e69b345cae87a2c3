b42bc686551ebe058fadd581e7a68c06
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn(function () {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }),
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Text: 'Text'
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 통합 테스트', function () {
  it('컴포넌트가 네비게이션 환경에서 렌더링 되어야 함', function () {
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    }).not.toThrow();
  });
  it('모든 주요 UI 요소가 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render.UNSAFE_getAllByType;
    var scrollViews = UNSAFE_getAllByType(_reactNative2.ScrollView);
    expect(scrollViews.length).toBeGreaterThan(0);
    var segmentedButtons = UNSAFE_getAllByType('SegmentedButtons');
    expect(segmentedButtons.length).toBe(1);
    var cards = UNSAFE_getAllByType('Card');
    expect(cards.length).toBeGreaterThan(0);
    var buttons = UNSAFE_getAllByType('Button');
    expect(buttons.length).toBeGreaterThan(0);
  });
  it('기간 선택 버튼이 존재하고 상태를 관리해야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render2.UNSAFE_getAllByType;
    var segmentedButtons = UNSAFE_getAllByType('SegmentedButtons')[0];
    expect(segmentedButtons.props.value).toBe('weekly');
    expect(typeof segmentedButtons.props.onValueChange).toBe('function');
  });
  it('이미지 그리드가 View 컴포넌트 내에 존재해야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render3.UNSAFE_getAllByType;
    var views = UNSAFE_getAllByType(_reactNative2.View);
    var imageGridView = views.find(function (view) {
      return view.props.style && view.props.style.flexDirection === 'row' && view.props.style.flexWrap === 'wrap';
    });
    expect(imageGridView).toBeTruthy();
    var cards = UNSAFE_getAllByType('Card');
    expect(cards.length).toBeGreaterThanOrEqual(6);
  });
  it('감정 변화 그래프 버튼이 클릭되면 콘솔 로그가 출력되어야 함', function () {
    var consoleSpy = jest.spyOn(console, 'log');
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render4.UNSAFE_getAllByType;
    var buttons = UNSAFE_getAllByType('Button');
    var graphButton = buttons.find(function (button) {
      return button.props.children && typeof button.props.children === 'string' && button.props.children.includes('감정 변화 그래프');
    });
    expect(graphButton).toBeTruthy();
    graphButton == null || graphButton.props.onPress();
    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');
    consoleSpy.mockRestore();
  });
  it('스타일이 올바르게 적용되어야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render5.UNSAFE_getAllByType;
    var scrollView = UNSAFE_getAllByType(_reactNative2.ScrollView)[0];
    expect(scrollView.props.style).toEqual(expect.objectContaining({
      flex: 1,
      padding: 16
    }));
    var views = UNSAFE_getAllByType(_reactNative2.View);
    var imageGridView = views.find(function (view) {
      return view.props.style && view.props.style.flexDirection === 'row' && view.props.style.flexWrap === 'wrap';
    });
    expect(imageGridView == null ? void 0 : imageGridView.props.style).toEqual(expect.objectContaining({
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    }));
    var cards = UNSAFE_getAllByType('Card');
    if (cards.length > 0) {
      expect(cards[0].props.style).toEqual(expect.objectContaining({
        width: '48%',
        marginBottom: 16
      }));
    }
  });
  it('SegmentedButtons의 두 옵션이 주간과 월간으로 표시되어야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      UNSAFE_getAllByType = _render6.UNSAFE_getAllByType;
    var segmentedButtons = UNSAFE_getAllByType('SegmentedButtons')[0];
    expect(segmentedButtons.props.buttons).toEqual([{
      value: 'weekly',
      label: '주간'
    }, {
      value: 'monthly',
      label: '월간'
    }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,