c9712f5dff70f7703cf2dbc9faea821e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MouseButton = exports.baseGestureHandlerWithDetectorProps = exports.baseGestureHandlerProps = void 0;
var commonProps = ['id', 'enabled', 'shouldCancelWhenOutside', 'hitSlop', 'cancelsTouchesInView', 'userSelect', 'activeCursor', 'mouseButton', 'enableContextMenu', 'touchAction'];
var componentInteractionProps = ['waitFor', 'simultaneousHandlers', 'blocksHandlers'];
var baseGestureHandlerProps = [].concat(commonProps, componentInteractionProps, ['onBegan', 'onFailed', 'onCancelled', 'onActivated', 'onEnded', 'onGestureEvent', 'onHandlerStateChange']);
exports.baseGestureHandlerProps = baseGestureHandlerProps;
var baseGestureHandlerWithDetectorProps = [].concat(commonProps, ['needsPointerData', 'manualActivation']);
exports.baseGestureHandlerWithDetectorProps = baseGestureHandlerWithDetectorProps;
var MouseButton;
exports.MouseButton = MouseButton;
(function (MouseButton) {
  MouseButton[MouseButton["LEFT"] = 1] = "LEFT";
  MouseButton[MouseButton["RIGHT"] = 2] = "RIGHT";
  MouseButton[MouseButton["MIDDLE"] = 4] = "MIDDLE";
  MouseButton[MouseButton["BUTTON_4"] = 8] = "BUTTON_4";
  MouseButton[MouseButton["BUTTON_5"] = 16] = "BUTTON_5";
  MouseButton[MouseButton["ALL"] = 31] = "ALL";
})(MouseButton || (exports.MouseButton = MouseButton = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,