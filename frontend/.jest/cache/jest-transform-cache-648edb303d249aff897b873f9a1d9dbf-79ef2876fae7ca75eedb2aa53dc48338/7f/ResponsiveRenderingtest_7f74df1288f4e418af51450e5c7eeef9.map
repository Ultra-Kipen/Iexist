{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","mockResolvedValue","setItem","undefined","removeItem","login","register","logout","getAllEmotions","data","getDailyEmotionCheck","recordEmotions","Text","useTheme","colors","primary","surface","_reactNative","require","_require","describe","originalDimensionsGet","beforeEach","Dimensions","get","afterEach","test","dim","width","height","scale","fontScale","dimensions","expect","toBe","toHaveBeenCalledWith","mockReturnValue"],"sources":["ResponsiveRendering.test.tsx"],"sourcesContent":["// __tests__/responsive/ResponsiveRendering.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { Dimensions } from 'react-native';\r\nimport HomeScreen from '../../src/screens/HomeScreen';\r\nimport { AuthProvider } from '../../src/contexts/AuthContext';\r\nimport { EmotionProvider } from '../../src/contexts/EmotionContext';\r\n\r\n// AsyncStorage 모킹\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  getItem: jest.fn().mockResolvedValue(null),\r\n  setItem: jest.fn().mockResolvedValue(undefined),\r\n  removeItem: jest.fn().mockResolvedValue(undefined),\r\n}));\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/authService', () => ({\r\n  login: jest.fn(),\r\n  register: jest.fn(),\r\n  logout: jest.fn(),\r\n}));\r\n\r\njest.mock('../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn().mockResolvedValue({ data: [] }),\r\n  getDailyEmotionCheck: jest.fn().mockResolvedValue({ data: [] }),\r\n  recordEmotions: jest.fn().mockResolvedValue(undefined),\r\n}));\r\n\r\n// HomeScreen 컴포넌트 간단히 모킹\r\njest.mock('../../src/screens/HomeScreen', () => 'MockedHomeScreen');\r\n\r\n// react-native-paper 모킹\r\njest.mock('react-native-paper', () => ({\r\n  Text: 'MockedText',\r\n  useTheme: jest.fn(() => ({\r\n    colors: { primary: 'mockPrimary', surface: 'mockSurface' }\r\n  }))\r\n}));\r\n\r\ndescribe('Dimensions API Tests', () => {\r\n  let originalDimensionsGet;\r\n  \r\n  beforeEach(() => {\r\n    // 원래 Dimensions.get 함수 저장\r\n    originalDimensionsGet = Dimensions.get;\r\n  });\r\n  \r\n  afterEach(() => {\r\n    // 각 테스트 후 원래 함수 복원\r\n    Dimensions.get = originalDimensionsGet;\r\n  });\r\n  \r\n  test('화면 크기를 모킹할 수 있어야 함', () => {\r\n    // Dimensions.get 함수를 스파이로 감싸서 모킹\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 320, height: 568, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    const dimensions = Dimensions.get('window');\r\n    expect(dimensions.width).toBe(320);\r\n    expect(dimensions.height).toBe(568);\r\n    expect(Dimensions.get).toHaveBeenCalledWith('window');\r\n  });\r\n  \r\n  test('서로 다른 화면 크기를 시뮬레이션할 수 있어야 함', () => {\r\n    // 스마트폰 크기 (세로 모드)\r\n    Dimensions.get = jest.fn().mockReturnValue({ width: 375, height: 812, scale: 1, fontScale: 1 });\r\n    let dimensions = Dimensions.get('window');\r\n    expect(dimensions.width).toBe(375);\r\n    expect(dimensions.height).toBe(812);\r\n    \r\n    // 태블릿 크기 (세로 모드)\r\n    Dimensions.get = jest.fn().mockReturnValue({ width: 768, height: 1024, scale: 1, fontScale: 1 });\r\n    dimensions = Dimensions.get('window');\r\n    expect(dimensions.width).toBe(768);\r\n    expect(dimensions.height).toBe(1024);\r\n    \r\n    // 스마트폰 가로 모드\r\n    Dimensions.get = jest.fn().mockReturnValue({ width: 812, height: 375, scale: 1, fontScale: 1 });\r\n    dimensions = Dimensions.get('window');\r\n    expect(dimensions.width).toBe(812);\r\n    expect(dimensions.height).toBe(375);\r\n  });\r\n});\r\n\r\n// 오래된 스냅샷 정리를 위한 더미 테스트\r\ndescribe('Dummy Tests', () => {\r\n  test('dummy test to replace old snapshots', () => {\r\n    // 이 테스트는 오래된 스냅샷을 새로운 빈 스냅샷으로 대체하기 위한 것입니다\r\n    expect(true).toBe(true);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}