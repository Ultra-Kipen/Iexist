633fda0cde43557338e6fcb8376befa7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
jest.useRealTimers();
var simulateAppStateChange = function simulateAppStateChange(nextAppState) {
  _reactNative2.AppState.currentState = nextAppState;
  if (_reactNative2.AppState.addEventListener && _reactNative2.AppState.addEventListener.mock) {
    var listeners = _reactNative2.AppState.addEventListener.mock.calls.filter(function (call) {
      return call[0] === 'change';
    }).map(function (call) {
      return call[1];
    });
    listeners.forEach(function (listener) {
      return listener(nextAppState);
    });
  }
};
var TestApp = function TestApp(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    style: {
      flex: 1
    },
    children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
      style: {
        flex: 1
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uC571 \uCF58\uD150\uCE20"
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "show-toast-button",
        onPress: function onPress() {
          _Toast.ToastController.show({
            message: '토스트 메시지입니다',
            duration: 1000
          });
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD1A0\uC2A4\uD2B8 \uD45C\uC2DC"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
        testID: "hide-toast-button",
        onPress: function onPress() {
          _Toast.ToastController.hide();
        },
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD1A0\uC2A4\uD2B8 \uC228\uAE30\uAE30"
        })
      })]
    }), children]
  });
};
var ToastWrapper = function (_React$Component) {
  function ToastWrapper(_props) {
    var _this;
    (0, _classCallCheck2.default)(this, ToastWrapper);
    _this = _callSuper(this, ToastWrapper, [_props]);
    _this.show = function (props) {
      _this.setState(Object.assign({
        visible: true
      }, props));
    };
    _this.hide = function () {
      _this.setState({
        visible: false
      });
    };
    _this.state = {
      visible: false,
      message: '',
      type: 'info',
      position: 'bottom',
      duration: 3000,
      icon: null
    };
    _Toast.ToastController.setRef({
      show: _this.show,
      hide: _this.hide
    });
    return _this;
  }
  (0, _inherits2.default)(ToastWrapper, _React$Component);
  return (0, _createClass2.default)(ToastWrapper, [{
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsx)(_Toast.default, {
        testID: "toast",
        visible: this.state.visible,
        message: this.state.message,
        type: this.state.type,
        position: this.state.position,
        duration: this.state.duration,
        icon: this.state.icon,
        onClose: this.hide
      });
    }
  }]);
}(_react.default.Component);
describe('Toast Integration Tests', function () {
  beforeEach(function () {
    jest.spyOn(_reactNative2.AppState, 'addEventListener').mockImplementation(function (event, handler) {
      return {
        remove: jest.fn()
      };
    });
    jest.spyOn(_reactNative2.Platform, 'select').mockImplementation(function (obj) {
      return obj[_reactNative2.Platform.OS] || obj.default;
    });
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('Toast appears and disappears correctly in app context', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    expect(queryByTestId('toast')).toBeNull();
    _reactNative.fireEvent.press(getByTestId('show-toast-button'));
    expect(queryByTestId('toast')).not.toBeNull();
    _reactNative.fireEvent.press(getByTestId('hide-toast-button'));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 400);
      });
    }));
    expect(queryByTestId('toast')).toBeNull();
  }), 10000);
  test('Toast handles device orientation changes', (0, _asyncToGenerator2.default)(function* () {
    jest.spyOn(Dimensions, 'get').mockImplementation(function () {
      return {
        width: 812,
        height: 375,
        scale: 3,
        fontScale: 1
      };
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('show-toast-button'));
    (0, _reactNative.act)(function () {
      jest.spyOn(Dimensions, 'get').mockImplementation(function () {
        return {
          width: 375,
          height: 812,
          scale: 3,
          fontScale: 1
        };
      });
      if (Dimensions.addEventListener && Dimensions.addEventListener.mock) {
        var listeners = Dimensions.addEventListener.mock.calls.filter(function (call) {
          return call[0] === 'change';
        }).map(function (call) {
          return call[1];
        });
        listeners.forEach(function (listener) {
          return listener({
            window: Dimensions.get('window')
          });
        });
      }
    });
    expect(getByTestId('toast')).toBeTruthy();
  }), 10000);
  test('Toast handles app state changes gracefully', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render3.getByTestId;
    _reactNative.fireEvent.press(getByTestId('show-toast-button'));
    (0, _reactNative.act)(function () {
      simulateAppStateChange('background');
    });
    (0, _reactNative.act)(function () {
      simulateAppStateChange('active');
    });
    expect(getByTestId('toast')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('hide-toast-button'));
  }), 10000);
  test('Toast handles multiple rapid show/hide requests', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render4.getByTestId;
    for (var i = 0; i < 5; i++) {
      _reactNative.fireEvent.press(getByTestId('show-toast-button'));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 50);
        });
      }));
      _reactNative.fireEvent.press(getByTestId('hide-toast-button'));
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 50);
        });
      }));
    }
    _reactNative.fireEvent.press(getByTestId('show-toast-button'));
    expect(getByTestId('toast')).toBeTruthy();
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 1500);
      });
    }));
    expect(queryByTestId('toast')).toBeNull();
  }), 20000);
  test('Toast shows all different toast types correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render5.getByTestId;
    var types = ['success', 'error', 'warning', 'info'];
    var _loop = function* _loop(type) {
      (0, _reactNative.act)(function () {
        _Toast.ToastController.show({
          message: `${type} 메시지`,
          type: type,
          duration: 500
        });
      });
      expect(getByTestId('toast')).toBeTruthy();
      yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
        yield new Promise(function (resolve) {
          return setTimeout(resolve, 700);
        });
      }));
    };
    for (var type of types) {
      yield* _loop(type);
    }
  }), 10000);
  test('Toast handles touch interaction correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render6.getByTestId,
      queryByTestId = _render6.queryByTestId;
    _reactNative.fireEvent.press(getByTestId('show-toast-button'));
    var toast = getByTestId('toast-touchable');
    _reactNative.fireEvent.press(toast);
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 400);
      });
    }));
    expect(queryByTestId('toast')).toBeNull();
  }), 10000);
  test('Toast handles low memory conditions', (0, _asyncToGenerator2.default)(function* () {
    var triggerLowMemoryWarning = function triggerLowMemoryWarning() {
      if (_reactNative2.Platform.OS === 'ios' && DeviceEventEmitter && DeviceEventEmitter.emit) {
        DeviceEventEmitter.emit('memoryWarning');
      } else if (_reactNative2.Platform.OS === 'android' && DeviceEventEmitter && DeviceEventEmitter.emit) {
        DeviceEventEmitter.emit('lowMemory');
      }
    };
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {
        children: (0, _jsxRuntime.jsx)(ToastWrapper, {})
      })),
      getByTestId = _render7.getByTestId;
    _reactNative.fireEvent.press(getByTestId('show-toast-button'));
    (0, _reactNative.act)(function () {
      triggerLowMemoryWarning();
    });
    expect(getByTestId('toast')).toBeTruthy();
  }), 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,