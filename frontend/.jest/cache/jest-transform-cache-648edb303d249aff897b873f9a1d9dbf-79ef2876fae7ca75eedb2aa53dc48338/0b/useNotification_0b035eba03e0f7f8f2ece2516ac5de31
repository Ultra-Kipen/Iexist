0bdacc2886297a2b18e25d5bf56fb50a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "useNotification", {
  enumerable: true,
  get: function get() {
    return _NotificationContext.useNotification;
  }
});
exports.useNotificationManager = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _NotificationContext = require("../contexts/NotificationContext");
var _notificationService = _interopRequireDefault(require("../services/api/notificationService"));
var useNotificationManager = exports.useNotificationManager = function useNotificationManager() {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var _useNotificationConte = (0, _NotificationContext.useNotification)(),
    notifications = _useNotificationConte.notifications,
    unreadCount = _useNotificationConte.unreadCount,
    contextFetchNotifications = _useNotificationConte.fetchNotifications;
  var fetchNotifications = (0, _react.useCallback)(function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (page, limit) {
      setLoading(true);
      setError(null);
      try {
        var response = yield _notificationService.default.getNotifications({
          page: page,
          limit: limit
        });
        yield contextFetchNotifications();
        setLoading(false);
        return response.data;
      } catch (err) {
        setLoading(false);
        var errorMsg = err instanceof Error ? err.message : '알림을 불러오는 중 오류가 발생했습니다.';
        setError(errorMsg);
        throw err;
      }
    });
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), [contextFetchNotifications]);
  return {
    notifications: notifications,
    unreadCount: unreadCount,
    loading: loading,
    error: error,
    fetchNotifications: fetchNotifications,
    markAsRead: (0, _NotificationContext.useNotification)().markAsRead,
    markAllAsRead: (0, _NotificationContext.useNotification)().markAllAsRead,
    deleteNotification: (0, _NotificationContext.useNotification)().deleteNotification
  };
};
var _default = exports.default = useNotificationManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX05vdGlmaWNhdGlvbkNvbnRleHQiLCJfbm90aWZpY2F0aW9uU2VydmljZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJ1c2VOb3RpZmljYXRpb25NYW5hZ2VyIiwiZXhwb3J0cyIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsIl91c2VTdGF0ZTMiLCJfdXNlU3RhdGU0IiwiZXJyb3IiLCJzZXRFcnJvciIsIl91c2VOb3RpZmljYXRpb25Db250ZSIsInVzZU5vdGlmaWNhdGlvbkNvbnRleHQiLCJub3RpZmljYXRpb25zIiwidW5yZWFkQ291bnQiLCJjb250ZXh0RmV0Y2hOb3RpZmljYXRpb25zIiwiZmV0Y2hOb3RpZmljYXRpb25zIiwidXNlQ2FsbGJhY2siLCJfcmVmIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwicGFnZSIsImxpbWl0IiwicmVzcG9uc2UiLCJub3RpZmljYXRpb25TZXJ2aWNlIiwiZ2V0Tm90aWZpY2F0aW9ucyIsImRhdGEiLCJlcnIiLCJlcnJvck1zZyIsIkVycm9yIiwibWVzc2FnZSIsIl94IiwiX3gyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtYXJrQXNSZWFkIiwibWFya0FsbEFzUmVhZCIsImRlbGV0ZU5vdGlmaWNhdGlvbiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsidXNlTm90aWZpY2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGhvb2tzL3VzZU5vdGlmaWNhdGlvbi50c1xyXG4vLyDslYzrprwg6rSA66as66W8IOychO2VnCDsu6TsiqTthYAg7ZuFXHJcblxyXG5pbXBvcnQgeyB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZU5vdGlmaWNhdGlvbiBhcyB1c2VOb3RpZmljYXRpb25Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dHMvTm90aWZpY2F0aW9uQ29udGV4dCc7XHJcbmltcG9ydCBub3RpZmljYXRpb25TZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL2FwaS9ub3RpZmljYXRpb25TZXJ2aWNlJztcclxuXHJcbi8vIOydtCDtm4XsnYAg6riw7KG0IHVzZU5vdGlmaWNhdGlvbuqzvCDqtazrtoTtlZjquLAg7JyE7ZW0IOuLpOuluCDsnbTrpoTsnLzroZwgZXhwb3J0XHJcbmV4cG9ydCBjb25zdCB1c2VOb3RpZmljYXRpb25NYW5hZ2VyID0gKCkgPT4ge1xyXG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xyXG4gIFxyXG4gIC8vIOy7qO2FjeyKpO2KuOyXkOyEnCDsoJzqs7XtlZjripQg6riw7KG0IHVzZU5vdGlmaWNhdGlvbiDtm4XsnYQg7IKs7JqpXHJcbiAgY29uc3Qge1xyXG4gICAgbm90aWZpY2F0aW9ucyxcclxuICAgIHVucmVhZENvdW50LFxyXG4gICAgZmV0Y2hOb3RpZmljYXRpb25zOiBjb250ZXh0RmV0Y2hOb3RpZmljYXRpb25zXHJcbiAgfSA9IHVzZU5vdGlmaWNhdGlvbkNvbnRleHQoKTtcclxuICBcclxuICAvLyDtjpjsnbTsp4DrhKTsnbTshZjsnbQg7ZWE7JqU7ZWcIOqyveyasOydmCDtmZXsnqXrkJwgZmV0Y2hOb3RpZmljYXRpb25zXHJcbiAgY29uc3QgZmV0Y2hOb3RpZmljYXRpb25zID0gdXNlQ2FsbGJhY2soYXN5bmMgKHBhZ2U/OiBudW1iZXIsIGxpbWl0PzogbnVtYmVyKSA9PiB7XHJcbiAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgc2V0RXJyb3IobnVsbCk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOyYteyFlOuEkCDtjIzrnbzrr7jthLDroZwg67OA6rK97ZWY7JesIG5vdGlmaWNhdGlvblNlcnZpY2XqsIAg6riw67O46rCS7J2EIOyymOumrO2VmOuPhOuhnSDtlahcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBub3RpZmljYXRpb25TZXJ2aWNlLmdldE5vdGlmaWNhdGlvbnMoeyBwYWdlLCBsaW1pdCB9KTtcclxuICAgICAgYXdhaXQgY29udGV4dEZldGNoTm90aWZpY2F0aW9ucygpOyAvLyDsu6jthY3siqTtirjsnZgg7JWM66a8IOyXheuNsOydtO2KuFxyXG4gICAgICBcclxuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgICBjb25zdCBlcnJvck1zZyA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiAn7JWM66a87J2EIOu2iOufrOyYpOuKlCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nO1xyXG4gICAgICBzZXRFcnJvcihlcnJvck1zZyk7XHJcbiAgICAgIHRocm93IGVycjtcclxuICAgIH1cclxuICB9LCBbY29udGV4dEZldGNoTm90aWZpY2F0aW9uc10pO1xyXG4gIFxyXG4gIC8vIOy7qO2FjeyKpO2KuOydmCDquLDriqXqs7wg66Gc7LusIOyDge2DnOulvCDtlajqu5gg67CY7ZmYXHJcbiAgcmV0dXJuIHtcclxuICAgIG5vdGlmaWNhdGlvbnMsXHJcbiAgICB1bnJlYWRDb3VudCxcclxuICAgIGxvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuICAgIGZldGNoTm90aWZpY2F0aW9ucyxcclxuICAgIC8vIOy7qO2FjeyKpO2KuOyXkOyEnCDsoJzqs7XtlZjripQg6riw64ql65OkXHJcbiAgICBtYXJrQXNSZWFkOiB1c2VOb3RpZmljYXRpb25Db250ZXh0KCkubWFya0FzUmVhZCxcclxuICAgIG1hcmtBbGxBc1JlYWQ6IHVzZU5vdGlmaWNhdGlvbkNvbnRleHQoKS5tYXJrQWxsQXNSZWFkLFxyXG4gICAgZGVsZXRlTm90aWZpY2F0aW9uOiB1c2VOb3RpZmljYXRpb25Db250ZXh0KCkuZGVsZXRlTm90aWZpY2F0aW9uXHJcbiAgfTtcclxufTtcclxuXHJcbi8vIOq4sOyhtCB1c2VOb3RpZmljYXRpb27snYAg7Luo7YWN7Iqk7Yq47JeQ7IScIGV4cG9ydOuQnCDqsoPsnYQg6re464yA66GcIOyerGV4cG9ydFxyXG5leHBvcnQgeyB1c2VOb3RpZmljYXRpb24gfSBmcm9tICcuLi9jb250ZXh0cy9Ob3RpZmljYXRpb25Db250ZXh0JztcclxuXHJcbi8vIOq4sOuzuCBleHBvcnTripQg7ZmV7J6l65CcIOuyhOyghFxyXG5leHBvcnQgZGVmYXVsdCB1c2VOb3RpZmljYXRpb25NYW5hZ2VyOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFHQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxvQkFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsb0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUdPLElBQU1JLHNCQUFzQixHQUFBQyxPQUFBLENBQUFELHNCQUFBLEdBQUcsU0FBekJBLHNCQUFzQkEsQ0FBQSxFQUFTO0VBQzFDLElBQUFFLFNBQUEsR0FBOEIsSUFBQUMsZUFBUSxFQUFDLEtBQUssQ0FBQztJQUFBQyxVQUFBLE9BQUFDLGVBQUEsQ0FBQUMsT0FBQSxFQUFBSixTQUFBO0lBQXRDSyxPQUFPLEdBQUFILFVBQUE7SUFBRUksVUFBVSxHQUFBSixVQUFBO0VBQzFCLElBQUFLLFVBQUEsR0FBMEIsSUFBQU4sZUFBUSxFQUFnQixJQUFJLENBQUM7SUFBQU8sVUFBQSxPQUFBTCxlQUFBLENBQUFDLE9BQUEsRUFBQUcsVUFBQTtJQUFoREUsS0FBSyxHQUFBRCxVQUFBO0lBQUVFLFFBQVEsR0FBQUYsVUFBQTtFQUd0QixJQUFBRyxxQkFBQSxHQUlJLElBQUFDLG9DQUFzQixFQUFDLENBQUM7SUFIMUJDLGFBQWEsR0FBQUYscUJBQUEsQ0FBYkUsYUFBYTtJQUNiQyxXQUFXLEdBQUFILHFCQUFBLENBQVhHLFdBQVc7SUFDU0MseUJBQXlCLEdBQUFKLHFCQUFBLENBQTdDSyxrQkFBa0I7RUFJcEIsSUFBTUEsa0JBQWtCLEdBQUcsSUFBQUMsa0JBQVc7SUFBQSxJQUFBQyxJQUFBLE9BQUFDLGtCQUFBLENBQUFmLE9BQUEsRUFBQyxXQUFPZ0IsSUFBYSxFQUFFQyxLQUFjLEVBQUs7TUFDOUVmLFVBQVUsQ0FBQyxJQUFJLENBQUM7TUFDaEJJLFFBQVEsQ0FBQyxJQUFJLENBQUM7TUFFZCxJQUFJO1FBRUYsSUFBTVksUUFBUSxTQUFTQyw0QkFBbUIsQ0FBQ0MsZ0JBQWdCLENBQUM7VUFBRUosSUFBSSxFQUFKQSxJQUFJO1VBQUVDLEtBQUssRUFBTEE7UUFBTSxDQUFDLENBQUM7UUFDNUUsTUFBTU4seUJBQXlCLENBQUMsQ0FBQztRQUVqQ1QsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUNqQixPQUFPZ0IsUUFBUSxDQUFDRyxJQUFJO01BQ3RCLENBQUMsQ0FBQyxPQUFPQyxHQUFHLEVBQUU7UUFDWnBCLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDakIsSUFBTXFCLFFBQVEsR0FBR0QsR0FBRyxZQUFZRSxLQUFLLEdBQUdGLEdBQUcsQ0FBQ0csT0FBTyxHQUFHLHdCQUF3QjtRQUM5RW5CLFFBQVEsQ0FBQ2lCLFFBQVEsQ0FBQztRQUNsQixNQUFNRCxHQUFHO01BQ1g7SUFDRixDQUFDO0lBQUEsaUJBQUFJLEVBQUEsRUFBQUMsR0FBQTtNQUFBLE9BQUFiLElBQUEsQ0FBQWMsS0FBQSxPQUFBQyxTQUFBO0lBQUE7RUFBQSxLQUFFLENBQUNsQix5QkFBeUIsQ0FBQyxDQUFDO0VBRy9CLE9BQU87SUFDTEYsYUFBYSxFQUFiQSxhQUFhO0lBQ2JDLFdBQVcsRUFBWEEsV0FBVztJQUNYVCxPQUFPLEVBQVBBLE9BQU87SUFDUEksS0FBSyxFQUFMQSxLQUFLO0lBQ0xPLGtCQUFrQixFQUFsQkEsa0JBQWtCO0lBRWxCa0IsVUFBVSxFQUFFLElBQUF0QixvQ0FBc0IsRUFBQyxDQUFDLENBQUNzQixVQUFVO0lBQy9DQyxhQUFhLEVBQUUsSUFBQXZCLG9DQUFzQixFQUFDLENBQUMsQ0FBQ3VCLGFBQWE7SUFDckRDLGtCQUFrQixFQUFFLElBQUF4QixvQ0FBc0IsRUFBQyxDQUFDLENBQUN3QjtFQUMvQyxDQUFDO0FBQ0gsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FBQXRDLE9BQUEsQ0FBQUssT0FBQSxHQU1hTixzQkFBc0IiLCJpZ25vcmVMaXN0IjpbXX0=