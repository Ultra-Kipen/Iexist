b49d7a2c5af9489067739796e9b72ec0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _useTheme2 = require("../hooks/useTheme");
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _jsxRuntime = require("react/jsx-runtime");
var ContentLayout = function ContentLayout(_ref) {
  var children = _ref.children,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$refreshing = _ref.refreshing,
    refreshing = _ref$refreshing === void 0 ? false : _ref$refreshing,
    onRefresh = _ref.onRefresh,
    _ref$padded = _ref.padded,
    padded = _ref$padded === void 0 ? true : _ref$padded,
    style = _ref.style,
    contentContainerStyle = _ref.contentContainerStyle,
    _ref$scrollEnabled = _ref.scrollEnabled,
    scrollEnabled = _ref$scrollEnabled === void 0 ? true : _ref$scrollEnabled,
    header = _ref.header,
    footer = _ref.footer;
  var _useTheme = (0, _useTheme2.useTheme)(),
    theme = _useTheme.theme;
  if (loading) {
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.loadingContainer, {
        backgroundColor: theme.colors.background
      }],
      children: (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {})
    });
  }
  var renderContent = function renderContent() {
    return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [header && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.headerContainer,
        children: header
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: [styles.contentInner, padded && styles.paddedContent, contentContainerStyle],
        children: children
      }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.footerContainer,
        children: footer
      })]
    });
  };
  if (scrollEnabled) {
    return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      style: [styles.container, {
        backgroundColor: theme.colors.background
      }, style],
      contentContainerStyle: styles.scrollViewContent,
      showsVerticalScrollIndicator: false,
      refreshControl: onRefresh ? (0, _jsxRuntime.jsx)(_reactNative.RefreshControl, {
        refreshing: refreshing,
        onRefresh: onRefresh,
        colors: [theme.colors.primary],
        tintColor: theme.colors.primary
      }) : undefined,
      children: renderContent()
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: theme.colors.background
    }, style],
    children: renderContent()
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  scrollViewContent: {
    flexGrow: 1
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  headerContainer: {
    width: '100%'
  },
  contentInner: {
    flex: 1
  },
  paddedContent: {
    padding: 16
  },
  footerContainer: {
    width: '100%'
  }
});
var _default = exports.default = ContentLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,