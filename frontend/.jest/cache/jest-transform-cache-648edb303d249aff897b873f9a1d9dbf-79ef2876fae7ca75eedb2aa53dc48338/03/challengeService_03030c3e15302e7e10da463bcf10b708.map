{"version":3,"names":["_client","_interopRequireDefault","require","cov_21g7bt6yg8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","_coverageSchema","coverage","actualCoverage","challengeService","createChallenge","_createChallenge","_asyncToGenerator2","default","data","apiClient","post","_x","apply","arguments","getChallenges","_getChallenges","params","get","_x2","getChallengeDetails","_getChallengeDetails","challengeId","_x3","participateInChallenge","_participateInChallenge","_x4","leaveChallenge","_leaveChallenge","delete","_x5","updateChallengeProgress","_updateChallengeProgress","_x6","_x7","_default","exports"],"sources":["challengeService.ts"],"sourcesContent":["// src/services/api/challengeService.ts\r\n\r\nimport apiClient from './client';\r\n\r\nexport interface ChallengeCreateData {\r\n  title: string;\r\n  description?: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  is_public?: boolean;\r\n  max_participants?: number;\r\n}\r\n\r\nexport interface ChallengeProgressData {\r\n  emotion_id: number;\r\n  progress_note?: string;\r\n}\r\n\r\nconst challengeService = {\r\n  createChallenge: async (data: ChallengeCreateData) => {\r\n    return await apiClient.post('/challenges', data);\r\n  },\r\n  \r\n  getChallenges: async (params?: { \r\n    page?: number; \r\n    limit?: number; \r\n    status?: 'active' | 'completed' | 'upcoming';\r\n    sort_by?: 'start_date' | 'participant_count' | 'created_at';\r\n    order?: 'asc' | 'desc';\r\n  }) => {\r\n    return await apiClient.get('/challenges', { params });\r\n  },\r\n  \r\n  getChallengeDetails: async (challengeId: number) => {\r\n    return await apiClient.get(`/challenges/${challengeId}`);\r\n  },\r\n  \r\n  participateInChallenge: async (challengeId: number) => {\r\n    return await apiClient.post(`/challenges/${challengeId}/participate`);\r\n  },\r\n  \r\n  leaveChallenge: async (challengeId: number) => {\r\n    return await apiClient.delete(`/challenges/${challengeId}/participate`);\r\n  },\r\n  \r\n  updateChallengeProgress: async (challengeId: number, data: ChallengeProgressData) => {\r\n    return await apiClient.post(`/challenges/${challengeId}/progress`, data);\r\n  }\r\n};\r\n\r\nexport default challengeService;"],"mappings":"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","ignoreList":[]}