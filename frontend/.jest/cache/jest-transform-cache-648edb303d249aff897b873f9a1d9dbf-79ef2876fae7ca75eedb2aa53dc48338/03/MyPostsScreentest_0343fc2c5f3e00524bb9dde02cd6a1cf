b5a0180e53f5f854179bd27729e10faf
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn().mockResolvedValue({
      data: {
        posts: []
      }
    }),
    deletePost: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Button: 'Button',
    Card: {
      Content: 'Card.Content',
      Actions: 'Card.Actions'
    },
    Chip: 'Chip',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    Portal: 'Portal'
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: 'SafeAreaView'
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      };
    }
  };
});
_getJestObj().mock("../../src/screens/MyPostsScreen", function () {
  return 'MyPostsScreen';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('MyPostsScreen', function () {
  it('service methods are defined', function () {
    expect(_postService.default.getMyPosts).toBeDefined();
    expect(_postService.default.deletePost).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRNeVBvc3RzIiwiamVzdCIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJkYXRhIiwicG9zdHMiLCJkZWxldGVQb3N0Iiwic3VjY2VzcyIsIkJ1dHRvbiIsIkNhcmQiLCJDb250ZW50IiwiQWN0aW9ucyIsIkNoaXAiLCJEaWFsb2ciLCJUaXRsZSIsIlBvcnRhbCIsIlNhZmVBcmVhVmlldyIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImdvQmFjayIsImFkZExpc3RlbmVyIiwibW9ja1JldHVyblZhbHVlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcG9zdFNlcnZpY2UiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJwb3N0U2VydmljZSIsInRvQmVEZWZpbmVkIl0sInNvdXJjZXMiOlsiTXlQb3N0c1NjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX1RFU1RTX18vc2NyZWVucy9NeVBvc3RzU2NyZWVuLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHBvc3RTZXJ2aWNlIGZyb20gJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvcG9zdFNlcnZpY2UnO1xyXG5cclxuLy8g7ISc67mE7IqkIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvcG9zdFNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldE15UG9zdHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICBkYXRhOiB7IHBvc3RzOiBbXSB9XHJcbiAgfSksXHJcbiAgZGVsZXRlUG9zdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgIGRhdGE6IHsgc3VjY2VzczogdHJ1ZSB9XHJcbiAgfSlcclxufSkpO1xyXG5cclxuLy8g7J2Y7KG07ISxIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+ICh7XHJcbiAgQnV0dG9uOiAnQnV0dG9uJyxcclxuICBDYXJkOiB7XHJcbiAgICBDb250ZW50OiAnQ2FyZC5Db250ZW50JyxcclxuICAgIEFjdGlvbnM6ICdDYXJkLkFjdGlvbnMnLFxyXG4gIH0sXHJcbiAgQ2hpcDogJ0NoaXAnLFxyXG4gIERpYWxvZzoge1xyXG4gICAgVGl0bGU6ICdEaWFsb2cuVGl0bGUnLFxyXG4gICAgQ29udGVudDogJ0RpYWxvZy5Db250ZW50JyxcclxuICAgIEFjdGlvbnM6ICdEaWFsb2cuQWN0aW9ucycsXHJcbiAgfSxcclxuICBQb3J0YWw6ICdQb3J0YWwnLFxyXG59KSk7XHJcblxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucycsICgpID0+ICdJY29uJyk7XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JywgKCkgPT4gKHsgU2FmZUFyZWFWaWV3OiAnU2FmZUFyZWFWaWV3JyB9KSk7XHJcblxyXG4vLyDrhKTruYTqsozsnbTshZgg66qo7YK5XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcclxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xyXG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIGdvQmFjazogamVzdC5mbigpLCBcclxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKGplc3QuZm4oKSksXHJcbiAgfSksXHJcbn0pKTtcclxuXHJcbi8vIOy7tO2PrOuEjO2KuCDsnpDssrTrpbwg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvTXlQb3N0c1NjcmVlbicsICgpID0+ICdNeVBvc3RzU2NyZWVuJyk7XHJcblxyXG5kZXNjcmliZSgnTXlQb3N0c1NjcmVlbicsICgpID0+IHtcclxuICBpdCgnc2VydmljZSBtZXRob2RzIGFyZSBkZWZpbmVkJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHBvc3RTZXJ2aWNlLmdldE15UG9zdHMpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBleHBlY3QocG9zdFNlcnZpY2UuZGVsZXRlUG9zdCkudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLHVDQUF1QztFQUFBLE9BQU87SUFDckRDLFVBQVUsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztNQUN0Q0MsSUFBSSxFQUFFO1FBQUVDLEtBQUssRUFBRTtNQUFHO0lBQ3BCLENBQUMsQ0FBQztJQUNGQyxVQUFVLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7TUFDdENDLElBQUksRUFBRTtRQUFFRyxPQUFPLEVBQUU7TUFBSztJQUN4QixDQUFDO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIVCxXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNTLE1BQU0sRUFBRSxRQUFRO0lBQ2hCQyxJQUFJLEVBQUU7TUFDSkMsT0FBTyxFQUFFLGNBQWM7TUFDdkJDLE9BQU8sRUFBRTtJQUNYLENBQUM7SUFDREMsSUFBSSxFQUFFLE1BQU07SUFDWkMsTUFBTSxFQUFFO01BQ05DLEtBQUssRUFBRSxjQUFjO01BQ3JCSixPQUFPLEVBQUUsZ0JBQWdCO01BQ3pCQyxPQUFPLEVBQUU7SUFDWCxDQUFDO0lBQ0RJLE1BQU0sRUFBRTtFQUNWLENBQUM7QUFBQSxDQUFDLENBQUM7QUFFSGpCLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGtEQUFrRCxFQUFFO0VBQUEsT0FBTSxNQUFNO0FBQUEsRUFBQztBQUMzRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsZ0NBQWdDLEVBQUU7RUFBQSxPQUFPO0lBQUVpQixZQUFZLEVBQUU7RUFBZSxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR3JGbEIsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7RUFBQSxPQUFPO0lBQzNDa0IsYUFBYSxFQUFFLFNBQWZBLGFBQWFBLENBQUE7TUFBQSxPQUFTO1FBQ3BCQyxRQUFRLEVBQUVqQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ25CaUIsTUFBTSxFQUFFbEIsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztRQUNqQmtCLFdBQVcsRUFBRW5CLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ21CLGVBQWUsQ0FBQ3BCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbEQsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISixXQUFBLEdBQUtDLElBQUksb0NBQW9DO0VBQUEsT0FBTSxlQUFlO0FBQUEsRUFBQztBQUFDLElBQUF1QixzQkFBQSxHQUFBQyxPQUFBO0FBekNwRSxJQUFBQyxZQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBNkQsU0FBQXpCLFlBQUE7RUFBQSxJQUFBMkIsUUFBQSxHQUFBRixPQUFBO0lBQUF0QixJQUFBLEdBQUF3QixRQUFBLENBQUF4QixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQTJDN0R5QixRQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07RUFDOUJDLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxZQUFNO0lBQ3RDQyxNQUFNLENBQUNDLG9CQUFXLENBQUM3QixVQUFVLENBQUMsQ0FBQzhCLFdBQVcsQ0FBQyxDQUFDO0lBQzVDRixNQUFNLENBQUNDLG9CQUFXLENBQUN2QixVQUFVLENBQUMsQ0FBQ3dCLFdBQVcsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==