fdd5f5d50510ee50ba7cb1d396799b18
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = dispatchCommand;
exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
exports.findNodeHandle = findNodeHandle;
exports.getNodeFromInternalInstanceHandle = getNodeFromInternalInstanceHandle;
exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;
exports.isChildPublicInstance = isChildPublicInstance;
exports.isProfilingRenderer = isProfilingRenderer;
exports.renderElement = renderElement;
exports.sendAccessibilityEvent = sendAccessibilityEvent;
exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
exports.unstable_batchedUpdates = unstable_batchedUpdates;
var _ErrorHandlers = require("../../src/private/renderer/errorhandling/ErrorHandlers");
function renderElement(_ref) {
  var element = _ref.element,
    rootTag = _ref.rootTag,
    useFabric = _ref.useFabric,
    useConcurrentRoot = _ref.useConcurrentRoot;
  if (useFabric) {
    require("../Renderer/shims/ReactFabric").default.render(element, rootTag, null, useConcurrentRoot, {
      onCaughtError: _ErrorHandlers.onCaughtError,
      onUncaughtError: _ErrorHandlers.onUncaughtError,
      onRecoverableError: _ErrorHandlers.onRecoverableError
    });
  } else {
    require("../Renderer/shims/ReactNative").default.render(element, rootTag, undefined, {
      onCaughtError: _ErrorHandlers.onCaughtError,
      onUncaughtError: _ErrorHandlers.onUncaughtError,
      onRecoverableError: _ErrorHandlers.onRecoverableError
    });
  }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
  return require("../Renderer/shims/ReactNative").default.findHostInstance_DEPRECATED(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
  return require("../Renderer/shims/ReactNative").default.findNodeHandle(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
  if (global.RN$Bridgeless === true) {
    return require("../Renderer/shims/ReactFabric").default.dispatchCommand(handle, command, args);
  } else {
    return require("../Renderer/shims/ReactNative").default.dispatchCommand(handle, command, args);
  }
}
function sendAccessibilityEvent(handle, eventType) {
  return require("../Renderer/shims/ReactNative").default.sendAccessibilityEvent(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
  var rootTagAsNumber = rootTag;
  require("../Renderer/shims/ReactNative").default.unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
  return require("../Renderer/shims/ReactNative").default.unstable_batchedUpdates(fn, bookkeeping);
}
function isProfilingRenderer() {
  return Boolean(true);
}
function isChildPublicInstance(parentInstance, childInstance) {
  return require("../Renderer/shims/ReactNative").default.isChildPublicInstance(parentInstance, childInstance);
}
function getNodeFromInternalInstanceHandle(internalInstanceHandle) {
  return require("../Renderer/shims/ReactFabric").default.getNodeFromInternalInstanceHandle(internalInstanceHandle);
}
function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) {
  return require("../Renderer/shims/ReactFabric").default.getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRXJyb3JIYW5kbGVycyIsInJlcXVpcmUiLCJyZW5kZXJFbGVtZW50IiwiX3JlZiIsImVsZW1lbnQiLCJyb290VGFnIiwidXNlRmFicmljIiwidXNlQ29uY3VycmVudFJvb3QiLCJkZWZhdWx0IiwicmVuZGVyIiwib25DYXVnaHRFcnJvciIsIm9uVW5jYXVnaHRFcnJvciIsIm9uUmVjb3ZlcmFibGVFcnJvciIsInVuZGVmaW5lZCIsImZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRCIsImNvbXBvbmVudE9ySGFuZGxlIiwiZmluZE5vZGVIYW5kbGUiLCJkaXNwYXRjaENvbW1hbmQiLCJoYW5kbGUiLCJjb21tYW5kIiwiYXJncyIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJzZW5kQWNjZXNzaWJpbGl0eUV2ZW50IiwiZXZlbnRUeXBlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZUFuZFJlbW92ZUNvbnRhaW5lciIsInJvb3RUYWdBc051bWJlciIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiZm4iLCJib29ra2VlcGluZyIsImlzUHJvZmlsaW5nUmVuZGVyZXIiLCJCb29sZWFuIiwiaXNDaGlsZFB1YmxpY0luc3RhbmNlIiwicGFyZW50SW5zdGFuY2UiLCJjaGlsZEluc3RhbmNlIiwiZ2V0Tm9kZUZyb21JbnRlcm5hbEluc3RhbmNlSGFuZGxlIiwiaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSIsImdldFB1YmxpY0luc3RhbmNlRnJvbUludGVybmFsSW5zdGFuY2VIYW5kbGUiXSwic291cmNlcyI6WyJSZW5kZXJlckltcGxlbWVudGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7XG4gIEhvc3RDb21wb25lbnQsXG4gIEhvc3RJbnN0YW5jZSxcbiAgSW50ZXJuYWxJbnN0YW5jZUhhbmRsZSxcbiAgTm9kZSxcbn0gZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSBSZWFjdEZhYnJpY0hvc3RDb21wb25lbnQgZnJvbSAnLi9SZWFjdEZhYnJpY1B1YmxpY0luc3RhbmNlL1JlYWN0RmFicmljSG9zdENvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7RWxlbWVudFJlZiwgRWxlbWVudFR5cGV9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgb25DYXVnaHRFcnJvcixcbiAgb25SZWNvdmVyYWJsZUVycm9yLFxuICBvblVuY2F1Z2h0RXJyb3IsXG59IGZyb20gJy4uLy4uL3NyYy9wcml2YXRlL3JlbmRlcmVyL2Vycm9yaGFuZGxpbmcvRXJyb3JIYW5kbGVycyc7XG5pbXBvcnQge3R5cGUgUm9vdFRhZ30gZnJvbSAnLi9Sb290VGFnJztcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJFbGVtZW50KHtcbiAgZWxlbWVudCxcbiAgcm9vdFRhZyxcbiAgdXNlRmFicmljLFxuICB1c2VDb25jdXJyZW50Um9vdCxcbn06IHtcbiAgZWxlbWVudDogUmVhY3QuTWl4ZWRFbGVtZW50LFxuICByb290VGFnOiBudW1iZXIsXG4gIHVzZUZhYnJpYzogYm9vbGVhbixcbiAgdXNlQ29uY3VycmVudFJvb3Q6IGJvb2xlYW4sXG59KTogdm9pZCB7XG4gIGlmICh1c2VGYWJyaWMpIHtcbiAgICByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdEZhYnJpYycpLmRlZmF1bHQucmVuZGVyKFxuICAgICAgZWxlbWVudCxcbiAgICAgIHJvb3RUYWcsXG4gICAgICBudWxsLFxuICAgICAgdXNlQ29uY3VycmVudFJvb3QsXG4gICAgICB7XG4gICAgICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICAgICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgICAgfSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykuZGVmYXVsdC5yZW5kZXIoXG4gICAgICBlbGVtZW50LFxuICAgICAgcm9vdFRhZyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHtcbiAgICAgICAgb25DYXVnaHRFcnJvcixcbiAgICAgICAgb25VbmNhdWdodEVycm9yLFxuICAgICAgICBvblJlY292ZXJhYmxlRXJyb3IsXG4gICAgICB9LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRDxURWxlbWVudFR5cGU6IEVsZW1lbnRUeXBlPihcbiAgY29tcG9uZW50T3JIYW5kbGU6ID8oRWxlbWVudFJlZjxURWxlbWVudFR5cGU+IHwgbnVtYmVyKSxcbik6ID9Ib3N0SW5zdGFuY2Uge1xuICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKS5kZWZhdWx0LmZpbmRIb3N0SW5zdGFuY2VfREVQUkVDQVRFRChcbiAgICBjb21wb25lbnRPckhhbmRsZSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmROb2RlSGFuZGxlPFRFbGVtZW50VHlwZTogRWxlbWVudFR5cGU+KFxuICBjb21wb25lbnRPckhhbmRsZTogPyhFbGVtZW50UmVmPFRFbGVtZW50VHlwZT4gfCBudW1iZXIpLFxuKTogP251bWJlciB7XG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmRlZmF1bHQuZmluZE5vZGVIYW5kbGUoXG4gICAgY29tcG9uZW50T3JIYW5kbGUsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwYXRjaENvbW1hbmQoXG4gIGhhbmRsZTogSG9zdEluc3RhbmNlLFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGFyZ3M6IEFycmF5PG1peGVkPixcbik6IHZvaWQge1xuICBpZiAoZ2xvYmFsLlJOJEJyaWRnZWxlc3MgPT09IHRydWUpIHtcbiAgICAvLyBOb3RlOiB0aGlzIGZ1bmN0aW9uIGhhcyB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbiBpbiB0aGUgbGVnYWN5IGFuZCBuZXcgcmVuZGVyZXIuXG4gICAgLy8gSG93ZXZlciwgZXZhbHVhdGluZyB0aGUgb2xkIHJlbmRlcmVyIGNvbWVzIHdpdGggc29tZSBzaWRlIGVmZmVjdHMuXG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0RmFicmljJykuZGVmYXVsdC5kaXNwYXRjaENvbW1hbmQoXG4gICAgICBoYW5kbGUsXG4gICAgICBjb21tYW5kLFxuICAgICAgYXJncyxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmRlZmF1bHQuZGlzcGF0Y2hDb21tYW5kKFxuICAgICAgaGFuZGxlLFxuICAgICAgY29tbWFuZCxcbiAgICAgIGFyZ3MsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VuZEFjY2Vzc2liaWxpdHlFdmVudChcbiAgaGFuZGxlOiBIb3N0SW5zdGFuY2UsXG4gIGV2ZW50VHlwZTogc3RyaW5nLFxuKTogdm9pZCB7XG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmRlZmF1bHQuc2VuZEFjY2Vzc2liaWxpdHlFdmVudChcbiAgICBoYW5kbGUsXG4gICAgZXZlbnRUeXBlLFxuICApO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgYnkgQXBwUmVnaXN0cnkgdG8gdW5tb3VudCBhIHJvb3Qgd2hlbiB1c2luZyB0aGUgb2xkXG4gKiBSZWFjdCBOYXRpdmUgcmVuZGVyZXIgKFBhcGVyKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubW91bnRDb21wb25lbnRBdE5vZGVBbmRSZW1vdmVDb250YWluZXIocm9vdFRhZzogUm9vdFRhZykge1xuICAvLyAkRmxvd0V4cGVjdGVkRXJyb3JbaW5jb21wYXRpYmxlLXR5cGVdIHJvb3RUYWcgaXMgYW4gb3BhcXVlIHR5cGUgc28gd2UgY2FuJ3QgcmVhbGx5IGNhc3QgaXQgYXMgaXMuXG4gIGNvbnN0IHJvb3RUYWdBc051bWJlcjogbnVtYmVyID0gcm9vdFRhZztcbiAgcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKS5kZWZhdWx0LnVubW91bnRDb21wb25lbnRBdE5vZGVBbmRSZW1vdmVDb250YWluZXIoXG4gICAgcm9vdFRhZ0FzTnVtYmVyLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM8VD4oXG4gIGZuOiBUID0+IHZvaWQsXG4gIGJvb2trZWVwaW5nOiBULFxuKTogdm9pZCB7XG4gIC8vIFRoaXMgZG9lc24ndCBhY3R1YWxseSBkbyBhbnl0aGluZyB3aGVuIGJhdGNoaW5nIHVwZGF0ZXMgZm9yIGEgRmFicmljIHJvb3QuXG4gIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLmRlZmF1bHQudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMoXG4gICAgZm4sXG4gICAgYm9va2tlZXBpbmcsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb2ZpbGluZ1JlbmRlcmVyKCk6IGJvb2xlYW4ge1xuICByZXR1cm4gQm9vbGVhbihfX0RFVl9fKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hpbGRQdWJsaWNJbnN0YW5jZShcbiAgcGFyZW50SW5zdGFuY2U6IFJlYWN0RmFicmljSG9zdENvbXBvbmVudCB8IEhvc3RDb21wb25lbnQ8ZW1wdHk+LFxuICBjaGlsZEluc3RhbmNlOiBSZWFjdEZhYnJpY0hvc3RDb21wb25lbnQgfCBIb3N0Q29tcG9uZW50PGVtcHR5Pixcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnKS5kZWZhdWx0LmlzQ2hpbGRQdWJsaWNJbnN0YW5jZShcbiAgICBwYXJlbnRJbnN0YW5jZSxcbiAgICBjaGlsZEluc3RhbmNlLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm9kZUZyb21JbnRlcm5hbEluc3RhbmNlSGFuZGxlKFxuICBpbnRlcm5hbEluc3RhbmNlSGFuZGxlOiBJbnRlcm5hbEluc3RhbmNlSGFuZGxlLFxuKTogP05vZGUge1xuICAvLyBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIGluIEZhYnJpY1xuICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3RGYWJyaWMnKS5kZWZhdWx0LmdldE5vZGVGcm9tSW50ZXJuYWxJbnN0YW5jZUhhbmRsZShcbiAgICBpbnRlcm5hbEluc3RhbmNlSGFuZGxlLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHVibGljSW5zdGFuY2VGcm9tSW50ZXJuYWxJbnN0YW5jZUhhbmRsZShcbiAgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZTogSW50ZXJuYWxJbnN0YW5jZUhhbmRsZSxcbik6IG1peGVkIC8qUHVibGljSW5zdGFuY2UgfCBQdWJsaWNUZXh0SW5zdGFuY2UgfCBudWxsKi8ge1xuICAvLyBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIGluIEZhYnJpY1xuICByZXR1cm4gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3RGYWJyaWMnKS5kZWZhdWx0LmdldFB1YmxpY0luc3RhbmNlRnJvbUludGVybmFsSW5zdGFuY2VIYW5kbGUoXG4gICAgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSxcbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFtQkEsSUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBTU8sU0FBU0MsYUFBYUEsQ0FBQUMs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