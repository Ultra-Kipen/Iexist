b7467c4a0ab5cc566cb7df9bca1a19b6
_getJestObj().mock('react-native-safe-area-context', function () {
  var React = require('react');
  return {
    SafeAreaView: function SafeAreaView(_ref) {
      var children = _ref.children,
        style = _ref.style;
      return React.createElement('SafeAreaView', {
        style: style
      }, children);
    }
  };
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  rn.Keyboard = {
    dismiss: jest.fn()
  };
  return rn;
});
_getJestObj().mock("../../src/hooks/useTheme", function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#ffffff'
          },
          dark: false
        }
      };
    }
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  var React = require('react');
  var ReactNative = require('react-native');
  return {
    __esModule: true,
    default: function _default() {
      return React.createElement(ReactNative.View, {
        testID: 'loading-indicator'
      });
    }
  };
});
_getJestObj().mock('react-native/Libraries/Image/Image', function () {
  var React = require('react');
  return function (props) {
    return React.createElement('Image', Object.assign({}, props, {
      testID: props.testID || 'image'
    }));
  };
});
_getJestObj().mock('react-native/Libraries/Image/ImageBackground', function () {
  var React = require('react');
  return function (props) {
    return React.createElement('ImageBackground', Object.assign({}, props, {
      testID: props.testID || 'image-background'
    }), props.children);
  };
});
_getJestObj().mock("../../assets/images/logo.png", function () {
  return 'logo-path';
}, {
  virtual: true
});
_getJestObj().mock("../../assets/images/auth-background.jpg", function () {
  return 'background-path';
}, {
  virtual: true
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _AuthLayout = _interopRequireDefault(require("../../src/layouts/AuthLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthLayout', function () {
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('shows loading indicator when loading is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByTestId = _render2.getByTestId,
      queryByText = _render2.queryByText;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    expect(queryByText('인증 내용')).toBeNull();
  });
  it('renders title and footer when provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        title: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uC81C\uBAA9"
        }),
        footer: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uD478\uD130"
        }),
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render3.getByText;
    expect(getByText('인증 제목')).toBeTruthy();
    expect(getByText('인증 푸터')).toBeTruthy();
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('renders with background image when imageBackground is true', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        imageBackground: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByTestId = _render4.getByTestId,
      getByText = _render4.getByText;
    expect(getByTestId('image-background')).toBeTruthy();
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('does not render logo when logoVisible is false', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        logoVisible: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      queryByTestId = _render5.queryByTestId,
      getByText = _render5.getByText;
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('renders with default background when imageBackground is false', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        imageBackground: false,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      queryByTestId = _render6.queryByTestId,
      getByText = _render6.getByText;
    expect(getByText('인증 내용')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJTYWZlQXJlYVZpZXciLCJfcmVmIiwiY2hpbGRyZW4iLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJybiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiS2V5Ym9hcmQiLCJkaXNtaXNzIiwiZm4iLCJ1c2VUaGVtZSIsInRoZW1lIiwiY29sb3JzIiwiYmFja2dyb3VuZCIsImRhcmsiLCJSZWFjdE5hdGl2ZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiVmlldyIsInRlc3RJRCIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwidmlydHVhbCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfcmVhY3ROYXRpdmUyIiwiX0F1dGhMYXlvdXQiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJqc3giLCJUZXh0IiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwibG9hZGluZyIsImdldEJ5VGVzdElkIiwicXVlcnlCeVRleHQiLCJ0b0JlTnVsbCIsIl9yZW5kZXIzIiwidGl0bGUiLCJmb290ZXIiLCJfcmVuZGVyNCIsImltYWdlQmFja2dyb3VuZCIsIl9yZW5kZXI1IiwibG9nb1Zpc2libGUiLCJxdWVyeUJ5VGVzdElkIiwiX3JlbmRlcjYiXSwic291cmNlcyI6WyJBdXRoTGF5b3V0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL2xheW91dHMvQXV0aExheW91dC50ZXN0LnRzeFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgQXV0aExheW91dCBmcm9tICcuLi8uLi9zcmMvbGF5b3V0cy9BdXRoTGF5b3V0JztcclxuXHJcbi8vIOuqqOuToCDtlYTsmpTtlZwg7Lu07Y+s64SM7Yq4IG1vY2sg7ISk7KCVXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXNhZmUtYXJlYS1jb250ZXh0JywgKCkgPT4ge1xyXG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuICByZXR1cm4ge1xyXG4gICAgU2FmZUFyZWFWaWV3OiAoeyBjaGlsZHJlbiwgc3R5bGUgfSkgPT4gXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ1NhZmVBcmVhVmlldycsIHsgc3R5bGUgfSwgY2hpbGRyZW4pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8g7LaU6rCAIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICBjb25zdCBybiA9IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJyk7XHJcbiAgcm4uS2V5Ym9hcmQgPSB7XHJcbiAgICBkaXNtaXNzOiBqZXN0LmZuKCksXHJcbiAgfTtcclxuICByZXR1cm4gcm47XHJcbn0pO1xyXG5cclxuLy8gdXNlVGhlbWUg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL2hvb2tzL3VzZVRoZW1lJywgKCkgPT4gKHtcclxuICB1c2VUaGVtZTogKCkgPT4gKHtcclxuICAgIHRoZW1lOiB7XHJcbiAgICAgIGNvbG9yczoge1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmZmZmJyxcclxuICAgICAgfSxcclxuICAgICAgZGFyazogZmFsc2UsXHJcbiAgICB9LFxyXG4gIH0pLFxyXG59KSk7XHJcblxyXG4vLyBMb2FkaW5nSW5kaWNhdG9yIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9jb21wb25lbnRzL0xvYWRpbmdJbmRpY2F0b3InLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4gIGNvbnN0IFJlYWN0TmF0aXZlID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XHJcbiAgcmV0dXJuIHtcclxuICAgIF9fZXNNb2R1bGU6IHRydWUsXHJcbiAgICBkZWZhdWx0OiAoKSA9PiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0TmF0aXZlLlZpZXcsIHsgdGVzdElEOiAnbG9hZGluZy1pbmRpY2F0b3InIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gSW1hZ2VCYWNrZ3JvdW5k7JmAIEltYWdlIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2UnLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4gIHJldHVybiAocHJvcHM6IHsgdGVzdElEOiBhbnk7IH0pID0+IHtcclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdJbWFnZScsIHtcclxuICAgICAgLi4ucHJvcHMsXHJcbiAgICAgIHRlc3RJRDogcHJvcHMudGVzdElEIHx8ICdpbWFnZScsXHJcbiAgICB9KTtcclxuICB9O1xyXG59KTtcclxuXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9JbWFnZS9JbWFnZUJhY2tncm91bmQnLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4gIHJldHVybiAocHJvcHM6IHsgdGVzdElEOiBhbnk7IGNoaWxkcmVuOiBhbnk7IH0pID0+IHtcclxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdJbWFnZUJhY2tncm91bmQnLCB7XHJcbiAgICAgIC4uLnByb3BzLFxyXG4gICAgICB0ZXN0SUQ6IHByb3BzLnRlc3RJRCB8fCAnaW1hZ2UtYmFja2dyb3VuZCcsXHJcbiAgICB9LCBwcm9wcy5jaGlsZHJlbik7XHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyBhc3NldHMvaW1hZ2VzIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL2Fzc2V0cy9pbWFnZXMvbG9nby5wbmcnLCAoKSA9PiAnbG9nby1wYXRoJywgeyB2aXJ0dWFsOiB0cnVlIH0pO1xyXG5qZXN0Lm1vY2soJy4uLy4uL2Fzc2V0cy9pbWFnZXMvYXV0aC1iYWNrZ3JvdW5kLmpwZycsICgpID0+ICdiYWNrZ3JvdW5kLXBhdGgnLCB7IHZpcnR1YWw6IHRydWUgfSk7XHJcblxyXG5kZXNjcmliZSgnQXV0aExheW91dCcsICgpID0+IHtcclxuICBpdCgncmVuZGVycyBjaGlsZHJlbiBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QXV0aExheW91dD5cclxuICAgICAgICA8VGV4dD7snbjspp0g64K07JqpPC9UZXh0PlxyXG4gICAgICA8L0F1dGhMYXlvdXQ+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfsnbjspp0g64K07JqpJykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuICBcclxuICBpdCgnc2hvd3MgbG9hZGluZyBpbmRpY2F0b3Igd2hlbiBsb2FkaW5nIGlzIHRydWUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QXV0aExheW91dCBsb2FkaW5nPXt0cnVlfT5cclxuICAgICAgICA8VGV4dD7snbjspp0g64K07JqpPC9UZXh0PlxyXG4gICAgICA8L0F1dGhMYXlvdXQ+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2xvYWRpbmctaW5kaWNhdG9yJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgn7J247KadIOuCtOyaqScpKS50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdyZW5kZXJzIHRpdGxlIGFuZCBmb290ZXIgd2hlbiBwcm92aWRlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxBdXRoTGF5b3V0XHJcbiAgICAgICAgdGl0bGU9ezxUZXh0PuyduOymnSDsoJzrqqk8L1RleHQ+fVxyXG4gICAgICAgIGZvb3Rlcj17PFRleHQ+7J247KadIO2RuO2EsDwvVGV4dD59XHJcbiAgICAgID5cclxuICAgICAgICA8VGV4dD7snbjspp0g64K07JqpPC9UZXh0PlxyXG4gICAgICA8L0F1dGhMYXlvdXQ+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfsnbjspp0g7KCc66qpJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+yduOymnSDtkbjthLAnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7J247KadIOuCtOyaqScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3JlbmRlcnMgd2l0aCBiYWNrZ3JvdW5kIGltYWdlIHdoZW4gaW1hZ2VCYWNrZ3JvdW5kIGlzIHRydWUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEF1dGhMYXlvdXQgaW1hZ2VCYWNrZ3JvdW5kPXt0cnVlfT5cclxuICAgICAgICA8VGV4dD7snbjspp0g64K07JqpPC9UZXh0PlxyXG4gICAgICA8L0F1dGhMYXlvdXQ+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2ltYWdlLWJhY2tncm91bmQnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7J247KadIOuCtOyaqScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2RvZXMgbm90IHJlbmRlciBsb2dvIHdoZW4gbG9nb1Zpc2libGUgaXMgZmFsc2UnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQsIGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QXV0aExheW91dCBsb2dvVmlzaWJsZT17ZmFsc2V9PlxyXG4gICAgICAgIDxUZXh0PuyduOymnSDrgrTsmqk8L1RleHQ+XHJcbiAgICAgIDwvQXV0aExheW91dD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOuhnOqzoCDsnbTrr7jsp4DqsIAg66CM642U66eB65CY7KeAIOyViuyVmOuKlOyngCDtmZXsnbhcclxuICAgIC8vIOyXrOq4sOyEnOuKlCDqsITri6jtnogg64K07Jqp7J20IOugjOuNlOungeuQmOuKlOyngOunjCDtmZXsnbhcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+yduOymnSDrgrTsmqknKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdyZW5kZXJzIHdpdGggZGVmYXVsdCBiYWNrZ3JvdW5kIHdoZW4gaW1hZ2VCYWNrZ3JvdW5kIGlzIGZhbHNlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkLCBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEF1dGhMYXlvdXQgaW1hZ2VCYWNrZ3JvdW5kPXtmYWxzZX0+XHJcbiAgICAgICAgPFRleHQ+7J247KadIOuCtOyaqTwvVGV4dD5cclxuICAgICAgPC9BdXRoTGF5b3V0PlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7J247KadIOuCtOyaqScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07RUFDaEQsSUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0VBQzlCLE9BQU87SUFDTEMsWUFBWSxFQUFFLFNBQWRBLFlBQVlBLENBQUFDLElBQUE7TUFBQSxJQUFLQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtRQUFFQyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUsS0FBSztNQUFBLE9BQzlCTCxLQUFLLENBQUNNLGFBQWEs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QUFDO1FBQUssQ0FBTTtNQUFDLENBQ1IsQ0FDZCxDQUFDO01BSk95QyxXQUFXLEdBQUFNLFFBQUEsQ0FBWE4sV0FBVztNQUFFTCxTQUFTLEdBQUFXLFFBQUEsQ0FBVFgsU0FBUztJQU05QkMsTUFBTSxDQUFDSSxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDSCxVQUFVLENBQUMsQ0FBQztJQUNwREQsTUFBTSxDQUFDRCxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxZQUFNO0lBQ3pELElBQUFrQixRQUFBLEdBQXFDLElBQUFoQixtQkFBTSxFQUN6QyxJQUFBTCxXQUFBLENBQUFNLEdBQUEsRUFBQ1AsV0FBQSxDQUFBWCxPQUFVO1FBQUNrQyxXQUFXLEVBQUUsS0FBTTtRQUFBbEQsUUFBQSxFQUM3QixJQUFBNEIsV0FBQSxDQUFBTSxHQUFBLEVBQUNSLGFBQUEsQ0FBQVMsSUFBSTtVQUFBbkMsUUFBQSxFQUFDO1FBQUssQ0FBTTtNQUFDLENBQ1IsQ0FDZCxDQUFDO01BSk9tRCxhQUFhLEdBQUFGLFFBQUEsQ0FBYkUsYUFBYTtNQUFFZixTQUFTLEdBQUFhLFFBQUEsQ0FBVGIsU0FBUztJQVFoQ0MsTUFBTSxDQUFDRCxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQywrREFBK0QsRUFBRSxZQUFNO0lBQ3hFLElBQUFxQixRQUFBLEdBQXFDLElBQUFuQixtQkFBTSxFQUN6QyxJQUFBTCxXQUFBLENBQUFNLEdBQUEsRUFBQ1AsV0FBQSxDQUFBWCxPQUFVO1FBQUNnQyxlQUFlLEVBQUUsS0FBTTtRQUFBaEQsUUFBQSxFQUNqQyxJQUFBNEIsV0FBQSxDQUFBTSxHQUFBLEVBQUNSLGFBQUEsQ0FBQVMsSUFBSTtVQUFBbkMsUUFBQSxFQUFDO1FBQUssQ0FBTTtNQUFDLENBQ1IsQ0FDZCxDQUFDO01BSk9tRCxhQUFhLEdBQUFDLFFBQUEsQ0FBYkQsYUFBYTtNQUFFZixTQUFTLEdBQUFnQixRQUFBLENBQVRoQixTQUFTO0lBTWhDQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztFQUN6QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=