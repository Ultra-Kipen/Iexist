{"version":3,"names":["_getJestObj","mock","get","jest","fn","post","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_globals","_ApiTestScreen","_AuthContext","_client","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","it","mockUser","user_id","username","email","authContextValue","user","isAuthenticated","isLoading","login","register","logout","updateUser","_render","render","jsx","AuthContext","Provider","value","children","default","getByText","expect","toBeTruthy","_render2","queryByText","toBeNull","mockApiResponse","data","message","apiClient","mockResolvedValueOnce","_render3","UNSAFE_getAllByType","findByText","buttons","Button","fireEvent","press","waitFor","toHaveBeenCalledWith","timeout","resultText"],"sources":["ApiTestScreen.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { Button } from 'react-native';\r\nimport { expect, describe, it, beforeEach, jest } from '@jest/globals';\r\nimport ApiTestScreen from '../../src/screens/ApiTestScreen';\r\nimport { AuthContext, AuthContextType } from '../../src/contexts/AuthContext';\r\nimport apiClient from '../../src/services/api/client';\r\nimport { User } from '../../src/services/api/types';\r\n\r\n// API 클라이언트 모킹\r\njest.mock('../../src/services/api/client', () => ({\r\n  get: jest.fn(),\r\n  post: jest.fn(),\r\n}));\r\n\r\ndescribe('ApiTestScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders correctly when user is authenticated', () => {\r\n    const mockUser: User = { \r\n      user_id: 1,\r\n      username: 'testuser', \r\n      email: 'test@example.com' \r\n    };\r\n    \r\n    const authContextValue: AuthContextType = {\r\n      user: mockUser,\r\n      isAuthenticated: true,\r\n      isLoading: false,\r\n      login: jest.fn() as any,\r\n      register: jest.fn() as any,\r\n      logout: jest.fn() as any,\r\n      updateUser: jest.fn() as any\r\n    };\r\n\r\n    const { getByText } = render(\r\n      <AuthContext.Provider value={authContextValue}>\r\n        <ApiTestScreen />\r\n      </AuthContext.Provider>\r\n    );\r\n\r\n    expect(getByText('API Test Screen')).toBeTruthy();\r\n    expect(getByText('인증 상태: 로그인됨')).toBeTruthy();\r\n    expect(getByText('사용자: testuser')).toBeTruthy();\r\n  });\r\n\r\n  it('renders correctly when user is not authenticated', () => {\r\n    const authContextValue: AuthContextType = {\r\n      user: null,\r\n      isAuthenticated: false,\r\n      isLoading: false,\r\n      login: jest.fn() as any,\r\n      register: jest.fn() as any,\r\n      logout: jest.fn() as any,\r\n      updateUser: jest.fn() as any\r\n    };\r\n\r\n    const { getByText, queryByText } = render(\r\n      <AuthContext.Provider value={authContextValue}>\r\n        <ApiTestScreen />\r\n      </AuthContext.Provider>\r\n    );\r\n\r\n    expect(getByText('API Test Screen')).toBeTruthy();\r\n    expect(getByText('인증 상태: 로그아웃')).toBeTruthy();\r\n    expect(queryByText(/사용자:/)).toBeNull();\r\n  });\r\n\r\n  it('calls API and displays results when a test button is pressed', async () => {\r\n    const mockUser: User = { \r\n      user_id: 1,\r\n      username: 'testuser', \r\n      email: 'test@example.com' \r\n    };\r\n    \r\n    const authContextValue: AuthContextType = {\r\n      user: mockUser,\r\n      isAuthenticated: true,\r\n      isLoading: false,\r\n      login: jest.fn() as any,\r\n      register: jest.fn() as any,\r\n      logout: jest.fn() as any,\r\n      updateUser: jest.fn() as any\r\n    };\r\n    \r\n    const mockApiResponse: any = { \r\n      data: { \r\n        message: 'Success!' \r\n      } \r\n    };\r\n      \r\n    (apiClient.get as jest.MockedFunction<typeof apiClient.get>).mockResolvedValueOnce(mockApiResponse);\r\n\r\n    // React Native의 Button 컴포넌트에 직접 접근하는 방식 수정\r\n    const { UNSAFE_getAllByType, findByText } = render(\r\n      <AuthContext.Provider value={authContextValue}>\r\n        <ApiTestScreen />\r\n      </AuthContext.Provider>\r\n    );\r\n    // React Native의 Button 컴포넌트를 직접 가져오기\r\n    const buttons = UNSAFE_getAllByType(Button);\r\n    fireEvent.press(buttons[0]);\r\n    fireEvent.press(buttons[0]);\r\n\r\n    // 결과가 표시되는지 확인\r\n    await waitFor(() => {\r\n      expect(apiClient.get).toHaveBeenCalledWith('/api/users/profile');\r\n    }, { timeout: 10000 });\r\n    \r\n    const resultText = await findByText(/\"message\": \"Success!\"/, {}, { timeout: 10000 });\r\n    expect(resultText).toBeTruthy();\r\n  }, 15000);\r\n});"],"mappings":"AAUAA,WAAA,GAAKC,IAAI,kCAAkC;EAAA,OAAO;IAChDC,GAAG,EAAEC,aAAI,CAACC,EAAE,CAAC,CAAC;IACdC,IAAI,EAAEF,aAAI,CAACC,EAAE,CAAC;EAChB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAE,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAbJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,aAAA,GAAAJ,OAAA;AACA,IAAAK,QAAA,GAAAL,OAAA;AACA,IAAAM,cAAA,GAAAP,sBAAA,CAAAC,OAAA;AACA,IAAAO,YAAA,GAAAP,OAAA;AACA,IAAAQ,OAAA,GAAAT,sBAAA,CAAAC,OAAA;AAAsD,IAAAS,WAAA,GAAAT,OAAA;AAAA,SAAAP,YAAA;EAAA,IAAAiB,QAAA,GAAAV,OAAA;IAAAJ,IAAA,GAAAc,QAAA,CAAAd,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAStD,IAAAe,iBAAQ,EAAC,eAAe,EAAE,YAAM;EAC9B,IAAAC,mBAAU,EAAC,YAAM;IACfhB,aAAI,CAACiB,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEF,IAAAC,WAAE,EAAC,8CAA8C,EAAE,YAAM;IACvD,IAAMC,QAAc,GAAG;MACrBC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,UAAU;MACpBC,KAAK,EAAE;IACT,CAAC;IAED,IAAMC,gBAAiC,GAAG;MACxCC,IAAI,EAAEL,QAAQ;MACdM,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE3B,aAAI,CAACC,EAAE,CAAC,CAAQ;MACvB2B,QAAQ,EAAE5B,aAAI,CAACC,EAAE,CAAC,CAAQ;MAC1B4B,MAAM,EAAE7B,aAAI,CAACC,EAAE,CAAC,CAAQ;MACxB6B,UAAU,EAAE9B,aAAI,CAACC,EAAE,CAAC;IACtB,CAAC;IAED,IAAA8B,OAAA,GAAsB,IAAAC,mBAAM,EAC1B,IAAAnB,WAAA,CAAAoB,GAAA,EAACtB,YAAA,CAAAuB,WAAW,CAACC,QAAQ;QAACC,KAAK,EAAEb,gBAAiB;QAAAc,QAAA,EAC5C,IAAAxB,WAAA,CAAAoB,GAAA,EAACvB,cAAA,CAAA4B,OAAa,IAAE;MAAC,CACG,CACxB,CAAC;MAJOC,SAAS,GAAAR,OAAA,CAATQ,SAAS;IAMjB,IAAAC,eAAM,EAACD,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IACjD,IAAAD,eAAM,EAACD,SAAS,CAAC,aAAa,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IAC7C,IAAAD,eAAM,EAACD,SAAS,CAAC,eAAe,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;EACjD,CAAC,CAAC;EAEF,IAAAvB,WAAE,EAAC,kDAAkD,EAAE,YAAM;IAC3D,IAAMK,gBAAiC,GAAG;MACxCC,IAAI,EAAE,IAAI;MACVC,eAAe,EAAE,KAAK;MACtBC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE3B,aAAI,CAACC,EAAE,CAAC,CAAQ;MACvB2B,QAAQ,EAAE5B,aAAI,CAACC,EAAE,CAAC,CAAQ;MAC1B4B,MAAM,EAAE7B,aAAI,CAACC,EAAE,CAAC,CAAQ;MACxB6B,UAAU,EAAE9B,aAAI,CAACC,EAAE,CAAC;IACtB,CAAC;IAED,IAAAyC,QAAA,GAAmC,IAAAV,mBAAM,EACvC,IAAAnB,WAAA,CAAAoB,GAAA,EAACtB,YAAA,CAAAuB,WAAW,CAACC,QAAQ;QAACC,KAAK,EAAEb,gBAAiB;QAAAc,QAAA,EAC5C,IAAAxB,WAAA,CAAAoB,GAAA,EAACvB,cAAA,CAAA4B,OAAa,IAAE;MAAC,CACG,CACxB,CAAC;MAJOC,SAAS,GAAAG,QAAA,CAATH,SAAS;MAAEI,WAAW,GAAAD,QAAA,CAAXC,WAAW;IAM9B,IAAAH,eAAM,EAACD,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IACjD,IAAAD,eAAM,EAACD,SAAS,CAAC,aAAa,CAAC,CAAC,CAACE,UAAU,CAAC,CAAC;IAC7C,IAAAD,eAAM,EAACG,WAAW,CAAC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACxC,CAAC,CAAC;EAEF,IAAA1B,WAAE,EAAC,8DAA8D,MAAAb,kBAAA,CAAAiC,OAAA,EAAE,aAAY;IAC7E,IAAMnB,QAAc,GAAG;MACrBC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE,UAAU;MACpBC,KAAK,EAAE;IACT,CAAC;IAED,IAAMC,gBAAiC,GAAG;MACxCC,IAAI,EAAEL,QAAQ;MACdM,eAAe,EAAE,IAAI;MACrBC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE3B,aAAI,CAACC,EAAE,CAAC,CAAQ;MACvB2B,QAAQ,EAAE5B,aAAI,CAACC,EAAE,CAAC,CAAQ;MAC1B4B,MAAM,EAAE7B,aAAI,CAACC,EAAE,CAAC,CAAQ;MACxB6B,UAAU,EAAE9B,aAAI,CAACC,EAAE,CAAC;IACtB,CAAC;IAED,IAAM4C,eAAoB,GAAG;MAC3BC,IAAI,EAAE;QACJC,OAAO,EAAE;MACX;IACF,CAAC;IAEAC,eAAS,CAACjD,GAAG,CAA+CkD,qBAAqB,CAACJ,eAAe,CAAC;IAGnG,IAAAK,QAAA,GAA4C,IAAAlB,mBAAM,EAChD,IAAAnB,WAAA,CAAAoB,GAAA,EAACtB,YAAA,CAAAuB,WAAW,CAACC,QAAQ;QAACC,KAAK,EAAEb,gBAAiB;QAAAc,QAAA,EAC5C,IAAAxB,WAAA,CAAAoB,GAAA,EAACvB,cAAA,CAAA4B,OAAa,IAAE;MAAC,CACG,CACxB,CAAC;MAJOa,mBAAmB,GAAAD,QAAA,CAAnBC,mBAAmB;MAAEC,UAAU,GAAAF,QAAA,CAAVE,UAAU;IAMvC,IAAMC,OAAO,GAAGF,mBAAmB,CAACG,oBAAM,CAAC;IAC3CC,sBAAS,CAACC,KAAK,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3BE,sBAAS,CAACC,KAAK,CAACH,OAAO,CAAC,CAAC,CAAC,CAAC;IAG3B,MAAM,IAAAI,oBAAO,EAAC,YAAM;MAClB,IAAAjB,eAAM,EAACQ,eAAS,CAACjD,GAAG,CAAC,CAAC2D,oBAAoB,CAAC,oBAAoB,CAAC;IAClE,CAAC,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;IAEtB,IAAMC,UAAU,SAASR,UAAU,CAAC,uBAAuB,EAAE,CAAC,CAAC,EAAE;MAAEO,OAAO,EAAE;IAAM,CAAC,CAAC;IACpF,IAAAnB,eAAM,EAACoB,UAAU,CAAC,CAACnB,UAAU,CAAC,CAAC;EACjC,CAAC,GAAE,KAAK,CAAC;AACX,CAAC,CAAC","ignoreList":[]}