999c11e2c77209d4937d895790cadd51
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/notificationService", function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationScreen = _interopRequireDefault(require("../../src/screens/NotificationScreen"));
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNotifications = [{
  id: 1,
  content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',
  notification_type: 'like',
  related_id: 101,
  is_read: false,
  created_at: new Date().toISOString()
}, {
  id: 2,
  content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',
  notification_type: 'comment',
  related_id: 102,
  is_read: true,
  created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
}, {
  id: 3,
  content: '행복 챌린지가 시작되었습니다.',
  notification_type: 'challenge',
  related_id: 5,
  is_read: false,
  created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
}];
describe('NotificationScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _notificationService.default.getNotifications.mockResolvedValue({
      data: {
        data: mockNotifications,
        pagination: {
          page: 1,
          limit: 20,
          total: 3
        }
      }
    });
  });
  it('renders loading state initially', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    expect(_reactNative.screen.getByText('알림 로딩 중...')).toBeTruthy();
  });
  it('renders notifications list correctly', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('알림')).toBeTruthy();
      expect(_reactNative.screen.getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.')).toBeTruthy();
      expect(_reactNative.screen.getByText('김철수님이 회원님의 게시물에 댓글을 남겼습니다.')).toBeTruthy();
      expect(_reactNative.screen.getByText('행복 챌린지가 시작되었습니다.')).toBeTruthy();
    });
  }));
  it('shows empty state when no notifications', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications.mockResolvedValue({
      data: {
        data: [],
        pagination: {
          page: 1,
          limit: 20,
          total: 0
        }
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('알림이 없습니다.')).toBeTruthy();
    });
  }));
  it('marks notification as read when clicked', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      var notification = _reactNative.screen.getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.');
      _reactNative.fireEvent.press(notification);
    });
    expect(_notificationService.default.markAsRead).toHaveBeenCalledWith(1);
  }));
  it('marks all notifications as read', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      var markAllButton = _reactNative.screen.getByText('모두 읽음');
      _reactNative.fireEvent.press(markAllButton);
    });
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');
  }));
  it('handles error during loading', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications.mockRejectedValue(new Error('네트워크 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('알림을 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
      expect(_reactNative.screen.getByText('다시 시도')).toBeTruthy();
    });
  }));
  it('handles refresh functionality', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('알림')).toBeTruthy();
    });
    var markAllReadButton = _reactNative.screen.getByText('모두 읽음');
    _reactNative.fireEvent.press(markAllReadButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,