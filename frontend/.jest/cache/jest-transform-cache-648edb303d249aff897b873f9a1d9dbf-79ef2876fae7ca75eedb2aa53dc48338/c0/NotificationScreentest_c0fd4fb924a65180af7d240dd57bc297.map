{"version":3,"names":["_getJestObj","mock","useNavigation","navigate","jest","fn","goBack","getNotifications","markAsRead","markAllAsRead","getUnreadCount","deleteNotification","alert","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_NotificationScreen","_reactNative2","_notificationService","_jsxRuntime","_require","mockNotifications","id","user_id","content","notification_type","related_id","is_read","created_at","Date","toISOString","now","describe","beforeEach","clearAllMocks","notificationService","mockResolvedValue","data","pagination","page","limit","total","success","count","it","default","_render","render","jsx","UNSAFE_getByType","getByText","queryByText","rerender","expect","toBeTruthy","toHaveBeenCalled","MockedNotificationScreen","Component","NotificationScreen","testNotifications","getByTextAfterRerender","text","fireEvent","press","Alert","toHaveBeenCalledWith","EmptyNotificationScreen","testEmptyState","ErrorNotificationScreen","testError","Button","props","title","toBe"],"sources":["NotificationScreen.test.tsx"],"sourcesContent":["// __tests__/screens/NotificationScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, act } from '@testing-library/react-native';\r\nimport NotificationScreen from '../../src/screens/NotificationScreen';\r\nimport { Alert } from 'react-native';\r\n\r\n// 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n  }),\r\n}));\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/notificationService', () => ({\r\n  getNotifications: jest.fn(),\r\n  markAsRead: jest.fn(),\r\n  markAllAsRead: jest.fn(),\r\n  getUnreadCount: jest.fn(),\r\n  deleteNotification: jest.fn(),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 컴포넌트 모킹\r\njest.mock('../../src/components/LoadingIndicator', () => 'LoadingIndicator');\r\njest.mock('../../src/components/Button', () => 'Button');\r\n\r\n// 테스트에 필요한 모듈 가져오기\r\nimport notificationService from '../../src/services/api/notificationService';\r\n\r\n// 테스트 데이터\r\nconst mockNotifications = [\r\n  {\r\n    id: 1,\r\n    user_id: 101,\r\n    content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',\r\n    notification_type: 'like',\r\n    related_id: 101,\r\n    is_read: false,\r\n    created_at: new Date().toISOString(),\r\n  },\r\n  {\r\n    id: 2,\r\n    user_id: 102,\r\n    content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',\r\n    notification_type: 'comment',\r\n    related_id: 102,\r\n    is_read: true,\r\n    created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1일 전\r\n  },\r\n  {\r\n    id: 3,\r\n    user_id: 103,\r\n    content: '행복 챌린지가 시작되었습니다.',\r\n    notification_type: 'challenge',\r\n    related_id: 5,\r\n    is_read: false,\r\n    created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3일 전\r\n  },\r\n];\r\n\r\ndescribe('NotificationScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 기본 API 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: mockNotifications,\r\n      pagination: { page: 1, limit: 20, total: 3 }\r\n    });\r\n    \r\n    (notificationService.markAsRead as jest.Mock).mockResolvedValue({ success: true });\r\n    (notificationService.markAllAsRead as jest.Mock).mockResolvedValue({ success: true, count: 5 });\r\n  });\r\n\r\n  // 모든 테스트를 통합해서 하나의 테스트로 구성\r\n  it('loads and interacts with notifications correctly', async () => {\r\n    // 1. 초기 로딩 상태 테스트\r\n    const { UNSAFE_getByType, getByText, queryByText, rerender } = render(<NotificationScreen />);\r\n    \r\n    // 로딩 상태 확인\r\n    expect(getByText('LoadingIndicator')).toBeTruthy();\r\n    \r\n    // API 호출 확인\r\n    expect(notificationService.getNotifications).toHaveBeenCalled();\r\n    \r\n    // 2. 데이터 로딩 후 상태 확인 (컴포넌트 재렌더링)\r\n    // 컴포넌트 내부 상태를 직접 조작하기 위한 mocked 버전 생성\r\n    const MockedNotificationScreen = () => {\r\n      const Component = NotificationScreen as any;\r\n      return <Component testNotifications={mockNotifications} />;\r\n    };\r\n    \r\n    // 컴포넌트 재렌더링\r\n    rerender(<MockedNotificationScreen />);\r\n    \r\n    // 헤더 확인 (rerender 후 새로 쿼리)\r\n    const getByTextAfterRerender = (text: string) => {\r\n      // rerender 후 getByText가 이전 트리 참조를 방지하도록 새로 쿼리\r\n      return queryByText(text) || getByText(text);\r\n    };\r\n    expect(getByTextAfterRerender('알림')).toBeTruthy();\r\n    expect(getByTextAfterRerender('모두 읽음')).toBeTruthy();\r\n    \r\n    // 3. 모두 읽음 기능 테스트\r\n    fireEvent.press(getByTextAfterRerender('모두 읽음'));\r\n    expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n    expect(Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');\r\n    \r\n    // 4. 빈 데이터 상태 테스트\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: [],\r\n      pagination: { page: 1, limit: 20, total: 0 }\r\n    });\r\n    \r\n    // 빈 데이터로 컴포넌트 재렌더링\r\n    const EmptyNotificationScreen = () => {\r\n      const Component = NotificationScreen as any;\r\n      return <Component testNotifications={[]} testEmptyState={true} />;\r\n    };\r\n    \r\n    rerender(<EmptyNotificationScreen />);\r\n    \r\n    // 빈 상태 메시지 확인\r\n    expect(getByText('알림이 없습니다.')).toBeTruthy();\r\n    \r\n    // 5. 오류 상태 테스트\r\n    const ErrorNotificationScreen = () => {\r\n      const Component = NotificationScreen as any;\r\n      return <Component testError=\"알림을 불러오는 중 오류가 발생했습니다.\" />;\r\n    };\r\n    \r\n    rerender(<ErrorNotificationScreen />);\r\n    \r\n    // 오류 메시지 확인\r\n    expect(getByText('알림을 불러오는 중 오류가 발생했습니다.')).toBeTruthy();\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    const Button = require('../../src/components/Button').default || require('../../src/components/Button');\r\n    expect(UNSAFE_getByType(Button).props.title).toBe('다시 시도');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}