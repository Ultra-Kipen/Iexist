{"version":3,"names":["_axios","_interopRequireDefault","require","_asyncStorage","BASE_URL","apiClient","axios","create","baseURL","headers","timeout","refreshAuthToken","_ref","_asyncToGenerator2","default","refreshToken","AsyncStorage","getItem","response","post","data","token","setItem","error","console","apply","arguments","interceptors","request","use","_ref2","config","_x","Promise","reject","_ref3","originalRequest","status","_retry","newToken","removeItem","refreshError","_retryCount","delayMs","Math","pow","resolve","setTimeout","then","catch","_x2","_default","exports"],"sources":["client.ts"],"sourcesContent":["// src/services/api/client.ts\r\n\r\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\r\nimport { Platform } from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// API 서버의 기본 URL 설정\r\nconst BASE_URL = 'http://10.0.2.2:3000/api'; // 안드로이드 에뮬레이터용\r\n\r\n// Axios 인스턴스 생성\r\nconst apiClient = axios.create({\r\n  baseURL: BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  timeout: 10000, // 10초 타임아웃 설정\r\n});\r\n\r\n// 토큰 갱신 함수 - 정확한 오류 메시지를 위해 분리 유지\r\nconst refreshAuthToken = async (): Promise<string | null> => {\r\n  try {\r\n    const refreshToken = await AsyncStorage.getItem('refresh_token');\r\n    \r\n    if (!refreshToken) {\r\n      return null;\r\n    }\r\n    \r\n    const response = await axios.post(`${BASE_URL}/auth/refresh`, {\r\n      refreshToken,\r\n    });\r\n    \r\n    if (response.data && response.data.token) {\r\n      await AsyncStorage.setItem('auth_token', response.data.token);\r\n      return response.data.token;\r\n    }\r\n    \r\n    return null;\r\n  } catch (error) {\r\n    // 메시지를 테스트와 정확히 일치시킴\r\n    console.error('토큰 갱신 오류:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// 요청 인터셉터 설정 (인증 토큰 추가)\r\napiClient.interceptors.request.use(\r\n  async (config) => {\r\n    try {\r\n      const token = await AsyncStorage.getItem('auth_token');\r\n      if (token) {\r\n        config.headers = config.headers || {};\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n    } catch (error) {\r\n      // 테스트와 일치하는 메시지 사용\r\n      console.error('토큰 가져오기 오류:', error);\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // 테스트와 일치하는 메시지 사용\r\n    console.error('API 요청 오류:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 설정 (토큰 만료 처리 등)\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error: AxiosError) => {\r\n    const originalRequest = error.config as AxiosRequestConfig & { \r\n      _retry?: boolean;\r\n      _retryCount?: number;\r\n    };\r\n    \r\n    // 401 에러(인증 실패) 및 재시도 안된 요청\r\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      \r\n      try {\r\n        // 토큰 갱신 시도\r\n        const newToken = await refreshAuthToken();\r\n        \r\n        if (newToken) {\r\n          // 새 토큰으로 요청 헤더 업데이트\r\n          originalRequest.headers = originalRequest.headers || {};\r\n          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;\r\n          \r\n          // 원래 요청 재시도\r\n          return axios(originalRequest);\r\n        } else {\r\n          // 토큰 갱신 실패 - 로그아웃 처리\r\n          await AsyncStorage.removeItem('auth_token');\r\n          await AsyncStorage.removeItem('refresh_token');\r\n          await AsyncStorage.removeItem('user');\r\n          \r\n          return Promise.reject(error);\r\n        }\r\n      } catch (refreshError) {\r\n        // 테스트와 일치하는 메시지 사용\r\n        console.error('토큰 갱신 오류:', refreshError);\r\n        await AsyncStorage.removeItem('auth_token');\r\n        await AsyncStorage.removeItem('refresh_token');\r\n        await AsyncStorage.removeItem('user');\r\n        return Promise.reject(error); // 원본 오류 반환\r\n      }\r\n    }\r\n    \r\n    // 네트워크 오류 처리 (타임아웃, 연결 거부 등)\r\n    if (!error.response) {\r\n      // 자동 재시도 로직 (최대 3번)\r\n      if (!originalRequest._retryCount || originalRequest._retryCount < 3) {\r\n        originalRequest._retryCount = (originalRequest._retryCount || 0) + 1;\r\n        \r\n        // 지수 백오프 적용 (1초, 2초, 4초)\r\n        const delayMs = 1000 * Math.pow(2, (originalRequest._retryCount - 1));\r\n        \r\n        return new Promise((resolve, reject) => {\r\n          setTimeout(() => {\r\n            apiClient(originalRequest)\r\n              .then(resolve)\r\n              .catch(reject);\r\n          }, delayMs);\r\n        });\r\n      }\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]}