94e8a2aa89117a0befe86ef8d24c5e87
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    Chip: 'Chip',
    Button: 'Button',
    TextInput: 'TextInput',
    ActivityIndicator: 'ActivityIndicator'
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var alertMock = jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  var mockEmotions = [{
    emotion_id: 1,
    name: '행복',
    icon: 'happy-icon',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '슬픔',
    icon: 'sad-icon',
    color: '#4682B4'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
  });
  afterEach(function () {
    alertMock.mockClear();
  });
  it('renders the screen correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('emotion-submit-button')).toBeTruthy();
    });
  }));
  it('calls recordEmotions when submit button is pressed', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockResolvedValue({
      data: {
        status: 'success'
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('emotion-submit-button')).toBeTruthy();
    });
    expect(_emotionService.default.getAllEmotions).toHaveBeenCalled();
  }));
  it('handles API error', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockRejectedValue(new Error('API 에러'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(alertMock).toHaveBeenCalledWith('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
    }, {
      timeout: 5000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,