fd34acb9ae5b48779490b04481575c81
_getJestObj().mock("../../src/screens/ComfortScreen", function () {
  return 'MockedComfortScreen';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Card: {
      Content: 'CardContent'
    },
    TextInput: 'TextInput',
    Button: 'Button',
    List: {
      Section: 'ListSection',
      Item: 'ListItem',
      Icon: 'ListIcon'
    },
    Title: 'Title',
    Paragraph: 'Paragraph',
    FAB: 'FAB',
    ActivityIndicator: 'ActivityIndicator',
    Chip: 'Chip',
    Text: 'PaperText',
    Modal: 'Modal',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff',
          surface: '#fff',
          accent: '#f1c40f',
          error: '#f13a59',
          text: '#000'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    getBestPosts: jest.fn().mockResolvedValue({
      data: {
        data: []
      }
    }),
    createPost: jest.fn().mockResolvedValue({
      data: {
        data: {}
      }
    }),
    sendMessage: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    }),
    likePost: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("react-native");
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn();
jest.spyOn(_reactNative.Alert, 'alert').mockImplementation(function () {});
describe('ComfortWallService API 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    console.error = originalConsoleError;
  });
  test('getPosts API가 올바르게 호출됨', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      data: {
        data: [{
          post_id: 1,
          title: '테스트 게시물',
          content: '테스트 내용',
          user_id: 1,
          is_anonymous: true,
          like_count: 5,
          comment_count: 2,
          created_at: '2025-05-01T12:00:00Z'
        }]
      }
    };
    _comfortWallService.default.getPosts.mockResolvedValueOnce(mockResponse);
    var result = yield _comfortWallService.default.getPosts();
    expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    expect(result).toEqual(mockResponse);
  }));
  test('getBestPosts API가 올바르게 호출됨', (0, _asyncToGenerator2.default)(function* () {
    var mockResponse = {
      data: {
        data: [{
          post_id: 2,
          title: '베스트 게시물',
          content: '베스트 내용',
          like_count: 50,
          comment_count: 10
        }]
      }
    };
    _comfortWallService.default.getBestPosts.mockResolvedValueOnce(mockResponse);
    var result = yield _comfortWallService.default.getBestPosts();
    expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    expect(result).toEqual(mockResponse);
  }));
  test('createPost API가 올바른 파라미터와 함께 호출됨', (0, _asyncToGenerator2.default)(function* () {
    var postData = {
      title: '새 게시물',
      content: '새 내용',
      is_anonymous: true
    };
    var mockResponse = {
      data: {
        data: Object.assign({
          post_id: 3
        }, postData, {
          user_id: 1,
          like_count: 0,
          comment_count: 0,
          created_at: '2025-05-01T14:00:00Z'
        })
      }
    };
    _comfortWallService.default.createPost.mockResolvedValueOnce(mockResponse);
    var result = yield _comfortWallService.default.createPost(postData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledWith(postData);
    expect(result).toEqual(mockResponse);
  }));
  test('sendMessage API가 올바른 파라미터와 함께 호출됨', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var messageData = {
      message: '응원 메시지',
      is_anonymous: true
    };
    var mockResponse = {
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    };
    _comfortWallService.default.sendMessage.mockResolvedValueOnce(mockResponse);
    var result = yield _comfortWallService.default.sendMessage(postId, messageData);
    expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(postId, messageData);
    expect(result).toEqual(mockResponse);
  }));
  test('likePost API가 올바른 게시물 ID와 함께 호출됨', (0, _asyncToGenerator2.default)(function* () {
    var postId = 2;
    var mockResponse = {
      data: {
        success: true,
        like_count: 6
      }
    };
    _comfortWallService.default.likePost.mockResolvedValueOnce(mockResponse);
    var result = yield _comfortWallService.default.likePost(postId);
    expect(_comfortWallService.default.likePost).toHaveBeenCalledWith(postId);
    expect(result).toEqual(mockResponse);
  }));
  test('API 오류가 올바르게 처리됨', (0, _asyncToGenerator2.default)(function* () {
    var errorMessage = '서버 오류가 발생했습니다.';
    _comfortWallService.default.getPosts.mockRejectedValueOnce(new Error(errorMessage));
    try {
      yield _comfortWallService.default.getPosts();
      expect(true).toBe(false);
    } catch (error) {
      expect(error).toBeInstanceOf(Error);
      expect(error.message).toBe(errorMessage);
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,