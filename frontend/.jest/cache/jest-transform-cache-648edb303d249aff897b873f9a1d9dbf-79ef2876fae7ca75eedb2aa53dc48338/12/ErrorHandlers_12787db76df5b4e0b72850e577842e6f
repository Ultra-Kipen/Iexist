9a06beedfb0b270ac035c261500dc94c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onCaughtError = onCaughtError;
exports.onRecoverableError = onRecoverableError;
exports.onUncaughtError = onUncaughtError;
var _ExceptionsManager = require("../../../../Libraries/Core/ExceptionsManager");
function getExtendedError(errorValue, errorInfo) {
  var error;
  if (errorValue instanceof Error) {
    error = errorValue;
  } else if (typeof errorValue === 'string') {
    error = new _ExceptionsManager.SyntheticError(errorValue);
  } else {
    error = new _ExceptionsManager.SyntheticError('Unspecified error');
  }
  try {
    error.componentStack = errorInfo.componentStack;
    error.isComponentError = true;
  } catch (_unused) {}
  return error;
}
function onUncaughtError(errorValue, errorInfo) {
  var error = getExtendedError(errorValue, errorInfo);
  (0, _ExceptionsManager.handleException)(error, true);
}
function onCaughtError(errorValue, errorInfo) {
  var error = getExtendedError(errorValue, errorInfo);
  (0, _ExceptionsManager.handleException)(error, false);
}
function onRecoverableError(errorValue, errorInfo) {
  var error = getExtendedError(errorValue, errorInfo);
  console.warn(error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRXhjZXB0aW9uc01hbmFnZXIiLCJyZXF1aXJlIiwiZ2V0RXh0ZW5kZWRFcnJvciIsImVycm9yVmFsdWUiLCJlcnJvckluZm8iLCJlcnJvciIsIkVycm9yIiwiU3ludGhldGljRXJyb3IiLCJjb21wb25lbnRTdGFjayIsImlzQ29tcG9uZW50RXJyb3IiLCJfdW51c2VkIiwib25VbmNhdWdodEVycm9yIiwiaGFuZGxlRXhjZXB0aW9uIiwib25DYXVnaHRFcnJvciIsIm9uUmVjb3ZlcmFibGVFcnJvciIsImNvbnNvbGUiLCJ3YXJuIl0sInNvdXJjZXMiOlsiRXJyb3JIYW5kbGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuaW1wb3J0IHR5cGUge0V4dGVuZGVkRXJyb3J9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db3JlL0V4dGVuZGVkRXJyb3InO1xuXG5pbXBvcnQge1xuICBTeW50aGV0aWNFcnJvcixcbiAgaGFuZGxlRXhjZXB0aW9uLFxufSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvQ29yZS9FeGNlcHRpb25zTWFuYWdlcic7XG5cbnR5cGUgRXJyb3JJbmZvID0ge1xuICArY29tcG9uZW50U3RhY2s/OiA/c3RyaW5nLFxuICAvLyAkRmxvd0ZpeE1lW3VuY2xlYXItdHlwZV0gdW5rbm93biBwcm9wcyBhbmQgc3RhdGUuXG4gICtlcnJvckJvdW5kYXJ5PzogP1JlYWN0JENvbXBvbmVudDxhbnksIGFueT4sXG59O1xuXG5mdW5jdGlvbiBnZXRFeHRlbmRlZEVycm9yKFxuICBlcnJvclZhbHVlOiBtaXhlZCxcbiAgZXJyb3JJbmZvOiBFcnJvckluZm8sXG4pOiBFeHRlbmRlZEVycm9yIHtcbiAgbGV0IGVycm9yO1xuXG4gIC8vIFR5cGljYWxseSwgYGVycm9yVmFsdWVgIHNob3VsZCBiZSBhbiBlcnJvci4gSG93ZXZlciwgb3RoZXIgdmFsdWVzIHN1Y2ggYXNcbiAgLy8gc3RyaW5ncyAob3IgZXZlbiBudWxsKSBhcmUgc29tZXRpbWVzIHRocm93bi5cbiAgaWYgKGVycm9yVmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvclxuICAgICAqIHRoaXMgcGFyYW1ldGVycyAqL1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdXG4gICAgZXJyb3IgPSAoZXJyb3JWYWx1ZTogRXh0ZW5kZWRFcnJvcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yXG4gICAgICogdGhpcyBwYXJhbWV0ZXJzICovXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF1cbiAgICBlcnJvciA9IChuZXcgU3ludGhldGljRXJyb3IoZXJyb3JWYWx1ZSk6IEV4dGVuZGVkRXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIC8qICRGbG93Rml4TWVbY2xhc3Mtb2JqZWN0LXN1YnR5cGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvclxuICAgICAqIHRoaXMgcGFyYW1ldGVycyAqL1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdXG4gICAgZXJyb3IgPSAobmV3IFN5bnRoZXRpY0Vycm9yKCdVbnNwZWNpZmllZCBlcnJvcicpOiBFeHRlbmRlZEVycm9yKTtcbiAgfVxuICB0cnkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV0gdGhpcyBpcyBpbiB0cnkvY2F0Y2guXG4gICAgZXJyb3IuY29tcG9uZW50U3RhY2sgPSBlcnJvckluZm8uY29tcG9uZW50U3RhY2s7XG4gICAgZXJyb3IuaXNDb21wb25lbnRFcnJvciA9IHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIC8vIElnbm9yZWQuXG4gIH1cblxuICByZXR1cm4gZXJyb3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblVuY2F1Z2h0RXJyb3IoZXJyb3JWYWx1ZTogbWl4ZWQsIGVycm9ySW5mbzogRXJyb3JJbmZvKTogdm9pZCB7XG4gIGNvbnN0IGVycm9yID0gZ2V0RXh0ZW5kZWRFcnJvcihlcnJvclZhbHVlLCBlcnJvckluZm8pO1xuXG4gIC8vIFVuY2F1Z2h0IGVycm9ycyBhcmUgZmF0YWwuXG4gIGhhbmRsZUV4Y2VwdGlvbihlcnJvciwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkNhdWdodEVycm9yKGVycm9yVmFsdWU6IG1peGVkLCBlcnJvckluZm86IEVycm9ySW5mbyk6IHZvaWQge1xuICBjb25zdCBlcnJvciA9IGdldEV4dGVuZGVkRXJyb3IoZXJyb3JWYWx1ZSwgZXJyb3JJbmZvKTtcblxuICAvLyBDYXVnaHQgZXJyb3JzIGFyZSBub3QgZmF0YWwuXG4gIGhhbmRsZUV4Y2VwdGlvbihlcnJvciwgZmFsc2UpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25SZWNvdmVyYWJsZUVycm9yKFxuICBlcnJvclZhbHVlOiBtaXhlZCxcbiAgZXJyb3JJbmZvOiBFcnJvckluZm8sXG4pOiB2b2lkIHtcbiAgY29uc3QgZXJyb3IgPSBnZXRFeHRlbmRlZEVycm9yKGVycm9yVmFsdWUsIGVycm9ySW5mbyk7XG5cbiAgLy8gUmVjb3ZlcmFibGUgZXJyb3JzIHNob3VsZCBvbmx5IGJlIHdhcm5pbmdzLlxuICAvLyBUaGlzIHdpbGwgbWFrZSBpdCBhIHNvZnQgZXJyb3IgaW4gTG9nQm94LlxuICAvLyBUT0RPOiBpbXByb3ZlIHRoZSBsb2dnaW5nIGZvciByZWNvdmVyYWJsZSBlcnJvcnMgaW4gcHJvZC5cbiAgY29uc29sZS53YXJuKGVycm9yKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBWUEsSUFBQUEsa0JBQUEsR0FBQUMsT0FBQTtBQVdBLFNBQVNDLGdCQUFnQkEsQ0FDdkJDLFVBQWlCLEVBQ2pCQyxTQUFvQixFQUNMO0VBQ2YsSUFBSUMsS0FBSztFQUlULElBQUlGLFVBQVUsWUFBWUcsS0FBSyxFQUFFO0lBSS9CRCxLQUFLLEdBQUlGLFVBQTBCO0VBQ3JDLENBQUMsTUFBTSxJQUFJLE9BQU9BLFVBQVUsS0FBSyxRQUFRLEVBQUU7SUFJekNFLEtBQUssR0FBSSxJQUFJRSxpQ0FBYyxDQUFDSixVQUFVLENBQWlCO0VBQ3pELENBQUMsTUFBTTtJQUlMRSxLQUFLLEdBQUksSUFBSUUsaUNBQWMsQ0FBQyxtQkFBbUIsQ0FBaUI7RUFDbEU7RUFDQSxJQUFJO0lBRUZGLEtBQUssQ0FBQ0csY0FBYyxHQUFHSixTQUFTLENBQUNJLGNBQWM7SUFDL0NILEtBQUssQ0FBQ0ksZ0JBQWdCLEdBQUcsSUFBSTtFQUMvQixDQUFDLENBQUMsT0FBQUMsT0FBQSxFQUFNLENBRVI7RUFFQSxPQUFPTCxLQUFLO0FBQ2Q7QUFFTyxTQUFTTSxlQUFlQSxDQUFDUixVQUFpQixFQUFFQyxTQUFvQixFQUFRO0VBQzdFLElBQU1DLEtBQUssR0FBR0gsZ0JBQWdCLENBQUNDLFVBQVUsRUFBRUMsU0FBUyxDQUFDO0VBR3JELElBQUFRLGtDQUFlLEVBQUNQLEtBQUssRUFBRSxJQUFJLENBQUM7QUFDOUI7QUFFTyxTQUFTUSxhQUFhQSxDQUFDVixVQUFpQixFQUFFQyxTQUFvQixFQUFRO0VBQzNFLElBQU1DLEtBQUssR0FBR0gsZ0JBQWdCLENBQUNDLFVBQVUsRUFBRUMsU0FBUyxDQUFDO0VBR3JELElBQUFRLGtDQUFlLEVBQUNQLEtBQUssRUFBRSxLQUFLLENBQUM7QUFDL0I7QUFFTyxTQUFTUyxrQkFBa0JBLENBQ2hDWCxVQUFpQixFQUNqQkMsU0FBb0IsRUFDZDtFQUNOLElBQU1DLEtBQUssR0FBR0gsZ0JBQWdCLENBQUNDLFVBQVUsRUFBRUMsU0FBUyxDQUFDO0VBS3JEVyxPQUFPLENBQUNDLElBQUksQ0FBQ1gsS0FBSyxDQUFDO0FBQ3JCIiwiaWdub3JlTGlzdCI6W119