{"version":3,"names":["_getJestObj","mock","Card","Content","TextInput","Button","List","Section","Item","Icon","Title","Paragraph","FAB","ActivityIndicator","Chip","Text","Modal","useTheme","colors","primary","background","surface","accent","error","text","getPosts","jest","fn","mockResolvedValue","data","getBestPosts","createPost","sendMessage","message","likePost","success","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_comfortWallService","_require","originalConsoleError","console","spyOn","Alert","mockImplementation","describe","beforeEach","clearAllMocks","afterAll","test","default","mockResponse","post_id","title","content","user_id","is_anonymous","like_count","comment_count","created_at","comfortWallService","mockResolvedValueOnce","result","expect","toHaveBeenCalled","toEqual","postData","Object","assign","toHaveBeenCalledWith","postId","messageData","errorMessage","mockRejectedValueOnce","Error","toBe","toBeInstanceOf"],"sources":["ComfortScreen.test.tsx"],"sourcesContent":["// __tests__/screens/ComfortScreen.test.tsx\r\nimport React from 'react';\r\nimport { Alert } from 'react-native';\r\nimport comfortWallService from '../../src/services/api/comfortWallService';\r\n\r\n// ComfortScreen 컴포넌트 자체를 모킹\r\njest.mock('../../src/screens/ComfortScreen', () => 'MockedComfortScreen');\r\n\r\n// console.error 모킹\r\nconst originalConsoleError = console.error;\r\nconsole.error = jest.fn();\r\n\r\n// react-native-paper 모킹\r\njest.mock('react-native-paper', () => ({\r\n  Card: { Content: 'CardContent' },\r\n  TextInput: 'TextInput',\r\n  Button: 'Button',\r\n  List: { \r\n    Section: 'ListSection', \r\n    Item: 'ListItem', \r\n    Icon: 'ListIcon' \r\n  },\r\n  Title: 'Title',\r\n  Paragraph: 'Paragraph',\r\n  FAB: 'FAB',\r\n  ActivityIndicator: 'ActivityIndicator',\r\n  Chip: 'Chip',\r\n  Text: 'PaperText',\r\n  Modal: 'Modal',\r\n  useTheme: () => ({\r\n    colors: {\r\n      primary: '#000',\r\n      background: '#fff',\r\n      surface: '#fff',\r\n      accent: '#f1c40f',\r\n      error: '#f13a59',\r\n      text: '#000',\r\n    }\r\n  }),\r\n}));\r\n\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'Icon');\r\n\r\n// comfortWallService 모킹\r\njest.mock('../../src/services/api/comfortWallService', () => ({\r\n  getPosts: jest.fn().mockResolvedValue({ data: { data: [] } }),\r\n  getBestPosts: jest.fn().mockResolvedValue({ data: { data: [] } }),\r\n  createPost: jest.fn().mockResolvedValue({ data: { data: {} } }),\r\n  sendMessage: jest.fn().mockResolvedValue({ data: { message: 'success' } }),\r\n  likePost: jest.fn().mockResolvedValue({ data: { success: true } }),\r\n}));\r\n\r\n// Alert 모킹\r\njest.spyOn(Alert, 'alert').mockImplementation(() => {});\r\n\r\ndescribe('ComfortWallService API 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n  \r\n  afterAll(() => {\r\n    console.error = originalConsoleError;\r\n  });\r\n\r\n  // API 호출 테스트 - getPosts\r\n  test('getPosts API가 올바르게 호출됨', async () => {\r\n    // 테스트 데이터 설정\r\n    const mockResponse = { \r\n      data: { \r\n        data: [\r\n          {\r\n            post_id: 1,\r\n            title: '테스트 게시물',\r\n            content: '테스트 내용',\r\n            user_id: 1,\r\n            is_anonymous: true,\r\n            like_count: 5,\r\n            comment_count: 2,\r\n            created_at: '2025-05-01T12:00:00Z'\r\n          }\r\n        ] \r\n      } \r\n    };\r\n    \r\n    (comfortWallService.getPosts as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    // API 호출\r\n    const result = await comfortWallService.getPosts();\r\n    \r\n    // 결과 검증\r\n    expect(comfortWallService.getPosts).toHaveBeenCalled();\r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  // API 호출 테스트 - getBestPosts\r\n  test('getBestPosts API가 올바르게 호출됨', async () => {\r\n    // 테스트 데이터 설정\r\n    const mockResponse = { \r\n      data: { \r\n        data: [\r\n          {\r\n            post_id: 2,\r\n            title: '베스트 게시물',\r\n            content: '베스트 내용',\r\n            like_count: 50,\r\n            comment_count: 10\r\n          }\r\n        ] \r\n      } \r\n    };\r\n    \r\n    (comfortWallService.getBestPosts as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    // API 호출\r\n    const result = await comfortWallService.getBestPosts();\r\n    \r\n    // 결과 검증\r\n    expect(comfortWallService.getBestPosts).toHaveBeenCalled();\r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  // API 호출 테스트 - createPost\r\n  test('createPost API가 올바른 파라미터와 함께 호출됨', async () => {\r\n    // 테스트 데이터 설정\r\n    const postData = {\r\n      title: '새 게시물',\r\n      content: '새 내용',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    const mockResponse = { \r\n      data: { \r\n        data: {\r\n          post_id: 3,\r\n          ...postData,\r\n          user_id: 1,\r\n          like_count: 0,\r\n          comment_count: 0,\r\n          created_at: '2025-05-01T14:00:00Z'\r\n        } \r\n      } \r\n    };\r\n    \r\n    (comfortWallService.createPost as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    // API 호출\r\n    const result = await comfortWallService.createPost(postData);\r\n    \r\n    // 결과 검증\r\n    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);\r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  // API 호출 테스트 - sendMessage\r\n  test('sendMessage API가 올바른 파라미터와 함께 호출됨', async () => {\r\n    // 테스트 데이터 설정\r\n    const postId = 1;\r\n    const messageData = {\r\n      message: '응원 메시지',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    const mockResponse = { \r\n      data: { \r\n        message: '메시지가 성공적으로 전송되었습니다.'\r\n      } \r\n    };\r\n    \r\n    (comfortWallService.sendMessage as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    // API 호출\r\n    const result = await comfortWallService.sendMessage(postId, messageData);\r\n    \r\n    // 결과 검증\r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);\r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  // API 호출 테스트 - likePost\r\n  test('likePost API가 올바른 게시물 ID와 함께 호출됨', async () => {\r\n    // 테스트 데이터 설정\r\n    const postId = 2;\r\n    \r\n    const mockResponse = { \r\n      data: { \r\n        success: true,\r\n        like_count: 6\r\n      } \r\n    };\r\n    \r\n    (comfortWallService.likePost as jest.Mock).mockResolvedValueOnce(mockResponse);\r\n    \r\n    // API 호출\r\n    const result = await comfortWallService.likePost(postId);\r\n    \r\n    // 결과 검증\r\n    expect(comfortWallService.likePost).toHaveBeenCalledWith(postId);\r\n    expect(result).toEqual(mockResponse);\r\n  });\r\n\r\n  // API 오류 처리 테스트\r\n  test('API 오류가 올바르게 처리됨', async () => {\r\n    // 오류 상황 모킹\r\n    const errorMessage = '서버 오류가 발생했습니다.';\r\n    (comfortWallService.getPosts as jest.Mock).mockRejectedValueOnce(new Error(errorMessage));\r\n    \r\n    // API 호출 및 오류 처리\r\n    try {\r\n      await comfortWallService.getPosts();\r\n      // 이 라인이 실행되면 테스트 실패\r\n      expect(true).toBe(false); \r\n    } catch (error) {\r\n      // 오류 검증\r\n      expect(error).toBeInstanceOf(Error);\r\n      expect((error as Error).message).toBe(errorMessage);\r\n    }\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}