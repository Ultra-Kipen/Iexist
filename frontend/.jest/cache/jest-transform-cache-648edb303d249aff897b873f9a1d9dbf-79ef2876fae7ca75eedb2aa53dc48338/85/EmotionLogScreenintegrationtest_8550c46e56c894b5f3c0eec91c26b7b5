9339040d559c52f882ce64dd36213401
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = {
  alert: jest.fn()
};
global.Alert = mockAlert;
var mockNavigation = {
  goBack: jest.fn()
};
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}, {
  emotion_id: 3,
  name: '위로',
  icon: 'hand-peace',
  color: '#87CEEB'
}, {
  emotion_id: 4,
  name: '감동',
  icon: 'heart-outline',
  color: '#FF6347'
}, {
  emotion_id: 5,
  name: '슬픔',
  icon: 'emoticon-sad-outline',
  color: '#4682B4'
}, {
  emotion_id: 6,
  name: '불안',
  icon: 'alert-outline',
  color: '#DDA0DD'
}, {
  emotion_id: 7,
  name: '화남',
  icon: 'emoticon-angry-outline',
  color: '#FF4500'
}, {
  emotion_id: 8,
  name: '지침',
  icon: 'emoticon-neutral-outline',
  color: '#A9A9A9'
}, {
  emotion_id: 9,
  name: '우울',
  icon: 'weather-cloudy',
  color: '#708090'
}, {
  emotion_id: 10,
  name: '고독',
  icon: 'account-outline',
  color: '#8B4513'
}, {
  emotion_id: 11,
  name: '충격',
  icon: 'lightning-bolt',
  color: '#9932CC'
}, {
  emotion_id: 12,
  name: '편함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
describe('EmotionLogScreen 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAlert.alert.mockClear();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    yield findByText('오늘의 감정');
    yield findByText('현재 어떤 감정을 느끼고 계신가요?');
  }), 30000);
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render2.findByText;
    for (var emotion of mockEmotions) {
      var emotionChip = yield findByText(emotion.name);
      expect(emotionChip).toBeTruthy();
    }
  }), 30000);
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render3.findByText,
      findByTestId = _render3.findByTestId;
    var happyChip = yield findByText('행복');
    expect(happyChip).toBeTruthy();
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render4.findByText,
      findByTestId = _render4.findByTestId;
    var happyChip = yield findByText('행복');
    var gratefulChip = yield findByText('감사');
    var comfortChip = yield findByText('위로');
    _reactNative.fireEvent.press(happyChip);
    _reactNative.fireEvent.press(gratefulChip);
    _reactNative.fireEvent.press(comfortChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render5.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }), 30000);
  it('감정 선택 후 제출 버튼이 활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render6.findByText,
      findByTestId = _render6.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render7.findByText,
      findByTestId = _render7.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    var alertCall = mockAlert.alert.mock.calls[0];
    var confirmButton = alertCall[2][0];
    confirmButton.onPress();
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }), 30000);
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render8.findByText,
      findByTestId = _render8.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
    });
  }), 30000);
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByText = _render9.findByText,
      findByTestId = _render9.findByTestId;
    var happyChip = yield findByText('행복');
    _reactNative.fireEvent.press(happyChip);
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
    _reactNative.fireEvent.press(happyChip);
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
    });
  }), 30000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,