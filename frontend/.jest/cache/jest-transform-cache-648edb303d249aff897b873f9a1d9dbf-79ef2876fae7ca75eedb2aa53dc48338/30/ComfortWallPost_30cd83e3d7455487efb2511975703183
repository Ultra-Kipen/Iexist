e6de5bb301514334dec1322c2c2e0837
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var formatDate = function formatDate(dateString) {
  var date = new Date(dateString);
  var year = date.getFullYear();
  var month = String(date.getMonth() + 1).padStart(2, '0');
  var day = String(date.getDate()).padStart(2, '0');
  var hours = String(date.getHours()).padStart(2, '0');
  var minutes = String(date.getMinutes()).padStart(2, '0');
  return `${year}년 ${month}월 ${day}일 ${hours}:${minutes}`;
};
var ComfortWallPost = function ComfortWallPost(_ref) {
  var post = _ref.post,
    onLikePress = _ref.onLikePress,
    onCommentPress = _ref.onCommentPress,
    onPostPress = _ref.onPostPress,
    _ref$isLiked = _ref.isLiked,
    isLiked = _ref$isLiked === void 0 ? false : _ref$isLiked;
  var _useState = (0, _react.useState)(isLiked),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    liked = _useState2[0],
    setLiked = _useState2[1];
  var _useState3 = (0, _react.useState)(post.like_count),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    likeCount = _useState4[0],
    setLikeCount = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    showFullContent = _useState6[0],
    setShowFullContent = _useState6[1];
  var MAX_CONTENT_LENGTH = 150;
  var isLongContent = post.content.length > MAX_CONTENT_LENGTH;
  var displayContent = showFullContent ? post.content : isLongContent ? `${post.content.substring(0, MAX_CONTENT_LENGTH)}...` : post.content;
  var formattedDate = formatDate(post.created_at);
  var handleLikePress = function handleLikePress() {
    var newLiked = !liked;
    setLiked(newLiked);
    setLikeCount(function (prevCount) {
      return prevCount + (newLiked ? 1 : -1);
    });
    onLikePress(post.post_id);
  };
  var handleCommentPress = function handleCommentPress() {
    onCommentPress(post.post_id);
  };
  var handlePostPress = function handlePostPress() {
    onPostPress(post.post_id);
  };
  var toggleShowFullContent = function toggleShowFullContent() {
    setShowFullContent(!showFullContent);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: handlePostPress,
      style: styles.header,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.userInfo,
        children: [!post.is_anonymous && post.user && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
            source: post.user.profile_image_url ? {
              uri: post.user.profile_image_url
            } : require("../assets/images/default_avatar.png"),
            style: styles.avatar
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.username,
            children: post.user.nickname
          })]
        }), post.is_anonymous && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
            source: require("../assets/images/anonymous_avatar.png"),
            style: styles.avatar
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.username,
            children: "\uC775\uBA85"
          })]
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.date,
        children: formattedDate
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: handlePostPress,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: post.title
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: handlePostPress,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.content,
        children: displayContent
      }), isLongContent && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: toggleShowFullContent,
        style: styles.showMoreButton,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.showMoreText,
          children: showFullContent ? '접기' : '더 보기'
        })
      })]
    }), "// ComfortWallPost.tsx \uC758 \uC774\uBBF8\uC9C0 \uBD80\uBD84 \uC218\uC815", post.image_url && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      onPress: handlePostPress,
      style: styles.imageContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
        source: {
          uri: post.image_url
        },
        style: styles.image,
        testID: "post-image"
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.actionsContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleLikePress,
        style: [styles.actionButton, liked && styles.likedButton],
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: [styles.actionText, liked && styles.likedText],
          children: ["\u2665 \uC88B\uC544\uC694 ", likeCount > 0 ? likeCount : '']
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleCommentPress,
        style: styles.actionButton,
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.actionText,
          children: ["\uD83D\uDCAC \uB313\uAE00 ", post.comment_count > 0 ? post.comment_count : '']
        })
      })]
    }), post.comments && post.comments.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.commentsPreview,
      children: [post.comments.slice(0, 2).map(function (comment) {
        var _comment$user;
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.commentItem,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
            style: styles.commentUser,
            children: [comment.is_anonymous ? '익명' : ((_comment$user = comment.user) == null ? void 0 : _comment$user.nickname) || '사용자', ":"]
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.commentContent,
            children: comment.content.length > 50 ? `${comment.content.substring(0, 50)}...` : comment.content
          })]
        }, comment.comment_id);
      }), post.comments.length > 2 && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleCommentPress,
        style: styles.showMoreCommentsButton,
        children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.showMoreCommentsText,
          children: ["\uB313\uAE00 ", post.comments.length - 2, "\uAC1C \uB354 \uBCF4\uAE30"]
        })
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  avatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    marginRight: 8
  },
  username: {
    fontSize: 16,
    fontWeight: '600',
    color: '#14171A'
  },
  date: {
    fontSize: 12,
    color: '#657786'
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#14171A',
    marginBottom: 8
  },
  content: {
    fontSize: 16,
    color: '#14171A',
    lineHeight: 22,
    marginBottom: 12
  },
  showMoreButton: {
    marginTop: -4,
    marginBottom: 8
  },
  showMoreText: {
    fontSize: 14,
    color: '#4A6572',
    fontWeight: '600'
  },
  imageContainer: {
    marginBottom: 12,
    borderRadius: 8,
    overflow: 'hidden'
  },
  image: {
    width: '100%',
    height: 200,
    resizeMode: 'cover'
  },
  actionsContainer: {
    flexDirection: 'row',
    marginBottom: 12,
    borderTopWidth: 1,
    borderTopColor: '#E1E8ED',
    paddingTop: 12
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 16
  },
  actionText: {
    fontSize: 14,
    color: '#657786'
  },
  likedButton: {
    backgroundColor: 'rgba(224, 36, 94, 0.1)'
  },
  likedText: {
    color: '#E0245E',
    fontWeight: '600'
  },
  commentsPreview: {
    borderTopWidth: 1,
    borderTopColor: '#E1E8ED',
    paddingTop: 12
  },
  commentItem: {
    flexDirection: 'row',
    marginBottom: 8
  },
  commentUser: {
    fontSize: 14,
    fontWeight: '600',
    color: '#14171A',
    marginRight: 6
  },
  commentContent: {
    fontSize: 14,
    color: '#14171A',
    flex: 1
  },
  showMoreCommentsButton: {
    padding: 4
  },
  showMoreCommentsText: {
    fontSize: 14,
    color: '#4A6572',
    textAlign: 'center'
  }
});
var _default = exports.default = ComfortWallPost;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,