{"version":3,"names":["_error","require","describe","it","error","response","data","message","result","handleApiError","expect","toBe","isNetworkError","code","formatErrorMessage","customRules","ERR_AUTH_001","ERR_NET_001","apiError","ApiError","statusCode","Error","fields","toEqual","onError","jest","fn","defaultMessage","errorHandler","createErrorHandler","toHaveBeenCalledWith","mockClear"],"sources":["error.test.ts"],"sourcesContent":["import { \r\n    handleApiError, \r\n    isNetworkError, \r\n    formatErrorMessage,\r\n    ApiError,\r\n    createErrorHandler\r\n  } from '../../../src/utils/error';\r\n  \r\n  describe('Error utils', () => {\r\n    describe('handleApiError', () => {\r\n      it('should extract error message from API response', () => {\r\n        const error = {\r\n          response: {\r\n            data: {\r\n              message: '사용자 인증에 실패했습니다.'\r\n            }\r\n          }\r\n        };\r\n        \r\n        const result = handleApiError(error);\r\n        expect(result).toBe('사용자 인증에 실패했습니다.');\r\n      });\r\n  \r\n      it('should extract error message from nested error object', () => {\r\n        const error = {\r\n          response: {\r\n            data: {\r\n              error: {\r\n                message: '요청한 리소스를 찾을 수 없습니다.'\r\n              }\r\n            }\r\n          }\r\n        };\r\n        \r\n        const result = handleApiError(error);\r\n        expect(result).toBe('요청한 리소스를 찾을 수 없습니다.');\r\n      });\r\n  \r\n      it('should handle network errors', () => {\r\n        const error = {\r\n          message: 'Network Error'\r\n        };\r\n        \r\n        const result = handleApiError(error);\r\n        expect(result).toBe('네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.');\r\n      });\r\n  \r\n      it('should return default message for unknown errors', () => {\r\n        const error = {};\r\n        \r\n        const result = handleApiError(error);\r\n        expect(result).toBe('오류가 발생했습니다. 다시 시도해주세요.');\r\n      });\r\n    });\r\n  \r\n    describe('isNetworkError', () => {\r\n      it('should identify network errors correctly', () => {\r\n        expect(isNetworkError({ message: 'Network Error' })).toBe(true);\r\n        expect(isNetworkError({ message: 'Failed to fetch' })).toBe(true);\r\n        expect(isNetworkError({ message: 'ECONNREFUSED' })).toBe(true);\r\n      });\r\n  \r\n      it('should reject non-network errors', () => {\r\n        expect(isNetworkError({ message: 'Invalid credentials' })).toBe(false);\r\n        expect(isNetworkError({ code: 404 })).toBe(false);\r\n        expect(isNetworkError({})).toBe(false);\r\n      });\r\n    });\r\n  \r\n    describe('formatErrorMessage', () => {\r\n      it('should format standard error messages', () => {\r\n        expect(formatErrorMessage('Invalid email')).toBe('Invalid email');\r\n      });\r\n  \r\n      it('should format error codes with messages', () => {\r\n        expect(formatErrorMessage('ERR_AUTH_001')).toBe('인증 오류가 발생했습니다. (ERR_AUTH_001)');\r\n      });\r\n  \r\n      it('should handle custom error format rules', () => {\r\n        const customRules = {\r\n          ERR_AUTH_001: '로그인에 실패했습니다. 아이디와 비밀번호를 확인해주세요.',\r\n          ERR_NET_001: '서버 연결에 실패했습니다. 나중에 다시 시도해주세요.'\r\n        };\r\n        \r\n        expect(formatErrorMessage('ERR_AUTH_001', customRules)).toBe('로그인에 실패했습니다. 아이디와 비밀번호를 확인해주세요.');\r\n        expect(formatErrorMessage('ERR_NET_001', customRules)).toBe('서버 연결에 실패했습니다. 나중에 다시 시도해주세요.');\r\n        expect(formatErrorMessage('ERR_UNKNOWN', customRules)).toBe('오류가 발생했습니다. (ERR_UNKNOWN)');\r\n      });\r\n    });\r\n  \r\n    describe('ApiError', () => {\r\n      it('should create correct error instance', () => {\r\n        const apiError = new ApiError('Not found', 404);\r\n        \r\n        expect(apiError.message).toBe('Not found');\r\n        expect(apiError.statusCode).toBe(404);\r\n        expect(apiError instanceof Error).toBe(true);\r\n      });\r\n  \r\n      it('should include additional data if provided', () => {\r\n        const apiError = new ApiError('Validation error', 400, {\r\n          fields: ['email', 'password']\r\n        });\r\n        \r\n        expect(apiError.message).toBe('Validation error');\r\n        expect(apiError.statusCode).toBe(400);\r\n        expect(apiError.data).toEqual({ fields: ['email', 'password'] });\r\n      });\r\n    });\r\n  \r\n    describe('createErrorHandler', () => {\r\n      it('should create a function that handles errors correctly', () => {\r\n        const onError = jest.fn();\r\n        const defaultMessage = '기본 오류 메시지';\r\n        \r\n        const errorHandler = createErrorHandler(onError, defaultMessage);\r\n        \r\n        // 에러 객체로 호출\r\n        const error = new Error('테스트 오류');\r\n        errorHandler(error);\r\n        \r\n        expect(onError).toHaveBeenCalledWith('테스트 오류');\r\n        \r\n        // API 오류 객체로 호출\r\n        onError.mockClear();\r\n        const apiError = {\r\n          response: {\r\n            data: {\r\n              message: 'API 오류 메시지'\r\n            }\r\n          }\r\n        };\r\n        errorHandler(apiError);\r\n        \r\n        expect(onError).toHaveBeenCalledWith('API 오류 메시지');\r\n        \r\n        // 알 수 없는 오류로 호출\r\n        onError.mockClear();\r\n        errorHandler({});\r\n        \r\n        expect(onError).toHaveBeenCalledWith(defaultMessage);\r\n      });\r\n    });\r\n  });"],"mappings":"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","ignoreList":[]}