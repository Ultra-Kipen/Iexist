827dce81d9e5e557576bbc8521d5db1e
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn()
  };
});
_getJestObj().mock('react-native', function () {
  return {
    useColorScheme: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ThemeContext = require("../../src/contexts/ThemeContext");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ThemeContext', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _reactNative2.useColorScheme.mockReturnValue('light');
  });
  it('이전에 저장된 테마를 불러온다', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue('dark');
    _reactNative2.useColorScheme.mockReturnValue('light');
    var result = yield new Promise(function (resolve) {
      var TestComponent = function TestComponent() {
        var _useTheme = (0, _ThemeContext.useTheme)(),
          theme = _useTheme.theme,
          isDarkMode = _useTheme.isDarkMode;
        _react.default.useEffect(function () {
          if (theme !== 'system') {
            resolve({
              theme: theme,
              isDarkMode: isDarkMode
            });
          }
        }, [theme, isDarkMode]);
        return null;
      };
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
    });
    expect(result.theme).toBe('dark');
    expect(result.isDarkMode).toBe(true);
  }));
  it('시스템 테마가 변경되면 "system" 모드일 때 isDarkMode가 업데이트된다', (0, _asyncToGenerator2.default)(function* () {
    _asyncStorage.default.getItem.mockResolvedValue('system');
    _reactNative2.useColorScheme.mockReturnValue('light');
    var result = yield new Promise(function (resolve) {
      var TestComponent = function TestComponent() {
        var _useTheme2 = (0, _ThemeContext.useTheme)(),
          theme = _useTheme2.theme,
          isDarkMode = _useTheme2.isDarkMode;
        _react.default.useEffect(function () {
          if (theme === 'system') {
            resolve({
              theme: theme,
              isDarkMode: isDarkMode
            });
          }
        }, [theme, isDarkMode]);
        return null;
      };
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ThemeContext.ThemeProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      }));
    });
    expect(result.theme).toBe('system');
    expect(result.isDarkMode).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,