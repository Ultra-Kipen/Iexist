beaf88a259a125af7145509e2a9402c1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _notificationService = _interopRequireDefault(require("../services/api/notificationService"));
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _Button = _interopRequireDefault(require("../components/Button"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var NotificationScreen = function NotificationScreen() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)(props.testNotifications || []),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    notifications = _useState2[0],
    setNotifications = _useState2[1];
  var _useState3 = (0, _react.useState)(props.testLoading !== undefined ? props.testLoading : true),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    refreshing = _useState6[0],
    setRefreshing = _useState6[1];
  var _useState7 = (0, _react.useState)(props.testError || null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    error = _useState8[0],
    setError = _useState8[1];
  var _useState9 = (0, _react.useState)(1),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    page = _useState10[0],
    setPage = _useState10[1];
  var _useState11 = (0, _react.useState)(true),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    hasMore = _useState12[0],
    setHasMore = _useState12[1];
  (0, _react.useEffect)(function () {
    if (!props.testNotifications && !props.testError) {
      fetchNotifications();
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (props.testNotifications !== undefined) {
      setNotifications(props.testNotifications);
    }
    if (props.testLoading !== undefined) {
      setLoading(props.testLoading);
    }
    if (props.testError !== undefined) {
      setError(props.testError);
    }
  }, [props.testNotifications, props.testLoading, props.testError]);
  (0, _react.useEffect)(function () {
    if (props.testNotifications) {
      setNotifications(props.testNotifications);
      setLoading(false);
    }
    if (props.testError) {
      setError(props.testError);
      setLoading(false);
    }
    if (props.testEmptyState) {
      setNotifications([]);
      setLoading(false);
    }
  }, [props.testNotifications, props.testError, props.testEmptyState]);
  var fetchNotifications = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      var refresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      try {
        if (refresh) {
          setPage(1);
          setHasMore(true);
        }
        if (!hasMore && !refresh) return;
        setLoading(true);
        setError(null);
        var response = yield _notificationService.default.getNotifications({
          page: refresh ? 1 : page,
          limit: 20
        });
        var data = response.data || response;
        var pagination = response.pagination;
        if (refresh) {
          setNotifications(data);
        } else {
          setNotifications(function (prev) {
            return [].concat((0, _toConsumableArray2.default)(prev), (0, _toConsumableArray2.default)(data));
          });
        }
        setHasMore(!!pagination && pagination.page * pagination.limit < pagination.total);
        setPage(function (prev) {
          return refresh ? 2 : prev + 1;
        });
      } catch (err) {
        console.error('알림 데이터 로딩 오류:', err);
        setError('알림을 불러오는 중 오류가 발생했습니다.');
      } finally {
        setLoading(false);
        setRefreshing(false);
      }
    });
    return function fetchNotifications() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleRefresh = function handleRefresh() {
    setRefreshing(true);
    fetchNotifications(true);
  };
  var handleLoadMore = function handleLoadMore() {
    if (!loading && hasMore) {
      fetchNotifications();
    }
  };
  var handleNotificationPress = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (notification) {
      try {
        if (!notification.is_read) {
          yield _notificationService.default.markAsRead(notification.id);
          setNotifications(function (prev) {
            return prev.map(function (n) {
              return n.id === notification.id ? Object.assign({}, n, {
                is_read: true
              }) : n;
            });
          });
        }
        navigateByNotificationType(notification);
      } catch (err) {
        console.error('알림 처리 오류:', err);
      }
    });
    return function handleNotificationPress(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  var navigateByNotificationType = function navigateByNotificationType(notification) {
    var notification_type = notification.notification_type,
      related_id = notification.related_id;
    if (!related_id) return;
    var nav = navigation;
    switch (notification_type) {
      case 'like':
      case 'comment':
        nav.navigate('PostDetail', {
          postId: related_id
        });
        break;
      case 'challenge':
        nav.navigate('ChallengeDetail', {
          challengeId: related_id
        });
        break;
      default:
        break;
    }
  };
  var handleMarkAllAsRead = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        yield _notificationService.default.markAllAsRead();
        setNotifications(function (prev) {
          return prev.map(function (n) {
            return Object.assign({}, n, {
              is_read: true
            });
          });
        });
        _reactNative.Alert.alert('성공', '모든 알림이 읽음 처리되었습니다.');
      } catch (err) {
        console.error('모두 읽음 처리 오류:', err);
        _reactNative.Alert.alert('오류', '알림 읽음 처리 중 문제가 발생했습니다.');
      }
    });
    return function handleMarkAllAsRead() {
      return _ref3.apply(this, arguments);
    };
  }();
  var getNotificationIcon = function getNotificationIcon(type) {
    switch (type) {
      case 'like':
        return '♥';
      case 'comment':
        return '💬';
      case 'challenge':
        return '🏆';
      case 'system':
        return '🔔';
      default:
        return '📌';
    }
  };
  var getNotificationTime = function getNotificationTime(createdAt) {
    var now = new Date();
    var notificationDate = new Date(createdAt);
    var diffInMilliseconds = now.getTime() - notificationDate.getTime();
    var diffInMinutes = Math.floor(diffInMilliseconds / (1000 * 60));
    var diffInHours = Math.floor(diffInMilliseconds / (1000 * 60 * 60));
    var diffInDays = Math.floor(diffInMilliseconds / (1000 * 60 * 60 * 24));
    if (diffInMinutes < 60) {
      return `${diffInMinutes}분 전`;
    } else if (diffInHours < 24) {
      return `${diffInHours}시간 전`;
    } else if (diffInDays < 7) {
      return `${diffInDays}일 전`;
    } else {
      return notificationDate.toLocaleDateString('ko-KR');
    }
  };
  var renderNotificationItem = function renderNotificationItem(_ref4) {
    var item = _ref4.item;
    return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      style: [styles.notificationItem, item.is_read ? styles.readNotification : {}],
      onPress: function onPress() {
        return handleNotificationPress(item);
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.iconContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.icon,
          children: getNotificationIcon(item.notification_type)
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.notificationContent,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.notificationText,
          children: item.content
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.timeText,
          children: getNotificationTime(item.created_at)
        })]
      }), !item.is_read && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.unreadIndicator
      })]
    });
  };
  if (loading && !refreshing && notifications.length === 0) {
    return (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {
      text: "\uC54C\uB9BC \uB85C\uB529 \uC911..."
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.title,
        children: "\uC54C\uB9BC"
      }), notifications.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        onPress: handleMarkAllAsRead,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.markAllText,
          children: "\uBAA8\uB450 \uC77D\uC74C"
        })
      })]
    }), error && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: error
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uB2E4\uC2DC \uC2DC\uB3C4",
        onPress: function onPress() {
          return fetchNotifications(true);
        },
        type: "primary"
      })]
    }), !error && notifications.length === 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.emptyContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emptyText,
        children: "\uC54C\uB9BC\uC774 \uC5C6\uC2B5\uB2C8\uB2E4."
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: notifications,
      keyExtractor: function keyExtractor(item) {
        return item.id.toString();
      },
      renderItem: renderNotificationItem,
      onRefresh: handleRefresh,
      refreshing: refreshing,
      onEndReached: handleLoadMore,
      onEndReachedThreshold: 0.5,
      ListFooterComponent: loading && notifications.length > 0 ? (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {
        size: "small",
        text: ""
      }) : null
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF'
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333333'
  },
  markAllText: {
    fontSize: 14,
    color: '#4A90E2'
  },
  notificationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
    backgroundColor: '#FFFFFF'
  },
  readNotification: {
    backgroundColor: '#F9F9F9'
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#E1EFF9',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12
  },
  icon: {
    fontSize: 18
  },
  notificationContent: {
    flex: 1
  },
  notificationText: {
    fontSize: 14,
    color: '#333333',
    marginBottom: 4
  },
  timeText: {
    fontSize: 12,
    color: '#999999'
  },
  unreadIndicator: {
    width: 10,
    height: 10,
    borderRadius: 5,
    backgroundColor: '#4A90E2',
    marginLeft: 8
  },
  errorContainer: {
    padding: 20,
    alignItems: 'center'
  },
  errorText: {
    color: '#FF6B6B',
    fontSize: 16,
    marginBottom: 16,
    textAlign: 'center'
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  emptyText: {
    fontSize: 16,
    color: '#999999'
  }
});
var _default = exports.default = NotificationScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,