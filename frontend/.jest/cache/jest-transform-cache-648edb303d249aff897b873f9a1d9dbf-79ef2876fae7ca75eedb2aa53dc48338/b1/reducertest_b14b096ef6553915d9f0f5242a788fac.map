{"version":3,"names":["_reducer","require","_types","describe","test","expect","initialState","toEqual","isAuthenticated","user","notifications","theme","loading","error","action","type","ActionType","SET_AUTHENTICATED","payload","newState","reducer","toBe","not","id","username","email","SET_USER","notification","content","notificationType","isRead","createdAt","ADD_NOTIFICATION","toHaveLength","notification1","notification2","stateWithNotifications","Object","assign","REMOVE_NOTIFICATION","CLEAR_NOTIFICATIONS","SET_THEME","SET_LOADING","SET_ERROR","stateWithError","CLEAR_ERROR","toBeNull","modifiedState","RESET_STATE"],"sources":["reducer.test.tsx"],"sourcesContent":["import { reducer, initialState } from '../../src/store/reducer';\r\nimport { ActionType, Notification } from '../../src/store/types';\r\n\r\ndescribe('리듀서', () => {\r\n  test('초기 상태가 올바르게 설정되어 있다', () => {\r\n    expect(initialState).toEqual({\r\n      isAuthenticated: false,\r\n      user: null,\r\n      notifications: [],\r\n      theme: 'system',\r\n      loading: false,\r\n      error: null,\r\n    });\r\n  });\r\n  \r\n  test('SET_AUTHENTICATED 액션이 인증 상태를 업데이트한다', () => {\r\n    const action = { type: ActionType.SET_AUTHENTICATED, payload: true };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState.isAuthenticated).toBe(true);\r\n    expect(newState).not.toBe(initialState); // 새로운 객체가 반환되었는지 확인\r\n  });\r\n  \r\n  test('SET_USER 액션이 사용자 정보를 업데이트한다', () => {\r\n    const user = { id: 1, username: 'test', email: 'test@example.com' };\r\n    const action = { type: ActionType.SET_USER, payload: user };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState.user).toEqual(user);\r\n    expect(newState).not.toBe(initialState);\r\n  });\r\n  \r\n  test('ADD_NOTIFICATION 액션이 알림을 추가한다', () => {\r\n    const notification: Notification = {\r\n      id: '1',\r\n      content: 'Test notification',\r\n      notificationType: 'system',\r\n      isRead: false,\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    };\r\n    const action = { type: ActionType.ADD_NOTIFICATION, payload: notification };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState.notifications).toHaveLength(1);\r\n    expect(newState.notifications[0]).toEqual(notification);\r\n    expect(newState).not.toBe(initialState);\r\n  });\r\n  \r\n  test('REMOVE_NOTIFICATION 액션이 알림을 제거한다', () => {\r\n    const notification1: Notification = {\r\n      id: '1',\r\n      content: 'Test notification 1',\r\n      notificationType: 'system',\r\n      isRead: false,\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    };\r\n    const notification2: Notification = {\r\n      id: '2',\r\n      content: 'Test notification 2',\r\n      notificationType: 'like',\r\n      isRead: false,\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    };\r\n    \r\n    const stateWithNotifications = {\r\n      ...initialState,\r\n      notifications: [notification1, notification2]\r\n    };\r\n    \r\n    const action = { type: ActionType.REMOVE_NOTIFICATION, payload: '1' };\r\n    const newState = reducer(stateWithNotifications, action);\r\n    \r\n    expect(newState.notifications).toHaveLength(1);\r\n    expect(newState.notifications[0]).toEqual(notification2);\r\n    expect(newState).not.toBe(stateWithNotifications);\r\n  });\r\n  \r\n  test('CLEAR_NOTIFICATIONS 액션이 모든 알림을 제거한다', () => {\r\n    const notification: Notification = {\r\n      id: '1',\r\n      content: 'Test notification',\r\n      notificationType: 'system',\r\n      isRead: false,\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    };\r\n    \r\n    const stateWithNotifications = {\r\n      ...initialState,\r\n      notifications: [notification]\r\n    };\r\n    \r\n    const action = { type: ActionType.CLEAR_NOTIFICATIONS };\r\n    const newState = reducer(stateWithNotifications, action);\r\n    \r\n    expect(newState.notifications).toHaveLength(0);\r\n    expect(newState).not.toBe(stateWithNotifications);\r\n  });\r\n  \r\n  test('SET_THEME 액션이 테마를 업데이트한다', () => {\r\n    const action = { type: ActionType.SET_THEME, payload: 'dark' as const };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState.theme).toBe('dark');\r\n    expect(newState).not.toBe(initialState);\r\n  });\r\n  \r\n  test('SET_LOADING 액션이 로딩 상태를 업데이트한다', () => {\r\n    const action = { type: ActionType.SET_LOADING, payload: true };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState.loading).toBe(true);\r\n    expect(newState).not.toBe(initialState);\r\n  });\r\n  \r\n  test('SET_ERROR 액션이 오류 메시지를 업데이트한다', () => {\r\n    const action = { type: ActionType.SET_ERROR, payload: '오류 메시지' };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState.error).toBe('오류 메시지');\r\n    expect(newState).not.toBe(initialState);\r\n  });\r\n  \r\n  test('CLEAR_ERROR 액션이 오류 메시지를 제거한다', () => {\r\n    const stateWithError = {\r\n      ...initialState,\r\n      error: '오류 메시지'\r\n    };\r\n    \r\n    const action = { type: ActionType.CLEAR_ERROR };\r\n    const newState = reducer(stateWithError, action);\r\n    \r\n    expect(newState.error).toBeNull();\r\n    expect(newState).not.toBe(stateWithError);\r\n  });\r\n  \r\n  test('RESET_STATE 액션이 상태를 초기화한다', () => {\r\n    const modifiedState = {\r\n      isAuthenticated: true,\r\n      user: { id: 1, username: 'test', email: 'test@example.com' },\r\n      notifications: [\r\n        {\r\n          id: '1',\r\n          content: 'Test notification',\r\n          notificationType: 'system' as const,\r\n          isRead: false,\r\n          createdAt: '2024-01-01T00:00:00Z'\r\n        }\r\n      ],\r\n      theme: 'dark' as const,\r\n      loading: true,\r\n      error: '오류 메시지',\r\n    };\r\n    \r\n    const action = { type: ActionType.RESET_STATE };\r\n    const newState = reducer(modifiedState, action);\r\n    \r\n    expect(newState).toEqual(initialState);\r\n    expect(newState).not.toBe(modifiedState);\r\n  });\r\n  \r\n  test('알 수 없는 액션 타입이 원래 상태를 반환한다', () => {\r\n    const action = { type: 'UNKNOWN_ACTION' as any };\r\n    const newState = reducer(initialState, action);\r\n    \r\n    expect(newState).toBe(initialState);\r\n  });\r\n});"],"mappings":"AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AAEAE,QAAQ,CAAC,KAAK,EAAE,YAAM;EACpBC,IAAI,CAAC,qBAAqB,EAAE,YAAM;IAChCC,MAAM,CAACC,qBAAY,CAAC,CAACC,OAAO,CAAC;MAC3BC,eAAe,EAAE,KAAK;MACtBC,IAAI,EAAE,IAAI;MACVC,aAAa,EAAE,EAAE;MACjBC,KAAK,EAAE,QAAQ;MACfC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFT,IAAI,CAAC,qCAAqC,EAAE,YAAM;IAChD,IAAMU,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACC,iBAAiB;MAAEC,OAAO,EAAE;IAAK,CAAC;IACpE,IAAMC,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAACX,eAAe,CAAC,CAACa,IAAI,CAAC,IAAI,CAAC;IAC3ChB,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACf,qBAAY,CAAC;EACzC,CAAC,CAAC;EAEFF,IAAI,CAAC,6BAA6B,EAAE,YAAM;IACxC,IAAMK,IAAI,GAAG;MAAEc,EAAE,EAAE,CAAC;MAAEC,QAAQ,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAmB,CAAC;IACnE,IAAMX,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACU,QAAQ;MAAER,OAAO,EAAET;IAAK,CAAC;IAC3D,IAAMU,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAACV,IAAI,CAAC,CAACF,OAAO,CAACE,IAAI,CAAC;IACnCJ,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACf,qBAAY,CAAC;EACzC,CAAC,CAAC;EAEFF,IAAI,CAAC,+BAA+B,EAAE,YAAM;IAC1C,IAAMuB,YAA0B,GAAG;MACjCJ,EAAE,EAAE,GAAG;MACPK,OAAO,EAAE,mBAAmB;MAC5BC,gBAAgB,EAAE,QAAQ;MAC1BC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE;IACb,CAAC;IACD,IAAMjB,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACgB,gBAAgB;MAAEd,OAAO,EAAES;IAAa,CAAC;IAC3E,IAAMR,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAACT,aAAa,CAAC,CAACuB,YAAY,CAAC,CAAC,CAAC;IAC9C5B,MAAM,CAACc,QAAQ,CAACT,aAAa,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAACoB,YAAY,CAAC;IACvDtB,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACf,qBAAY,CAAC;EACzC,CAAC,CAAC;EAEFF,IAAI,CAAC,kCAAkC,EAAE,YAAM;IAC7C,IAAM8B,aAA2B,GAAG;MAClCX,EAAE,EAAE,GAAG;MACPK,OAAO,EAAE,qBAAqB;MAC9BC,gBAAgB,EAAE,QAAQ;MAC1BC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE;IACb,CAAC;IACD,IAAMI,aAA2B,GAAG;MAClCZ,EAAE,EAAE,GAAG;MACPK,OAAO,EAAE,qBAAqB;MAC9BC,gBAAgB,EAAE,MAAM;MACxBC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE;IACb,CAAC;IAED,IAAMK,sBAAsB,GAAAC,MAAA,CAAAC,MAAA,KACvBhC,qBAAY;MACfI,aAAa,EAAE,CAACwB,aAAa,EAAEC,aAAa;IAAC,EAC9C;IAED,IAAMrB,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACuB,mBAAmB;MAAErB,OAAO,EAAE;IAAI,CAAC;IACrE,IAAMC,QAAQ,GAAG,IAAAC,gBAAO,EAACgB,sBAAsB,EAAEtB,MAAM,CAAC;IAExDT,MAAM,CAACc,QAAQ,CAACT,aAAa,CAAC,CAACuB,YAAY,CAAC,CAAC,CAAC;IAC9C5B,MAAM,CAACc,QAAQ,CAACT,aAAa,CAAC,CAAC,CAAC,CAAC,CAACH,OAAO,CAAC4B,aAAa,CAAC;IACxD9B,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACe,sBAAsB,CAAC;EACnD,CAAC,CAAC;EAEFhC,IAAI,CAAC,qCAAqC,EAAE,YAAM;IAChD,IAAMuB,YAA0B,GAAG;MACjCJ,EAAE,EAAE,GAAG;MACPK,OAAO,EAAE,mBAAmB;MAC5BC,gBAAgB,EAAE,QAAQ;MAC1BC,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE;IACb,CAAC;IAED,IAAMK,sBAAsB,GAAAC,MAAA,CAAAC,MAAA,KACvBhC,qBAAY;MACfI,aAAa,EAAE,CAACiB,YAAY;IAAC,EAC9B;IAED,IAAMb,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACwB;IAAoB,CAAC;IACvD,IAAMrB,QAAQ,GAAG,IAAAC,gBAAO,EAACgB,sBAAsB,EAAEtB,MAAM,CAAC;IAExDT,MAAM,CAACc,QAAQ,CAACT,aAAa,CAAC,CAACuB,YAAY,CAAC,CAAC,CAAC;IAC9C5B,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACe,sBAAsB,CAAC;EACnD,CAAC,CAAC;EAEFhC,IAAI,CAAC,0BAA0B,EAAE,YAAM;IACrC,IAAMU,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACyB,SAAS;MAAEvB,OAAO,EAAE;IAAgB,CAAC;IACvE,IAAMC,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAACR,KAAK,CAAC,CAACU,IAAI,CAAC,MAAM,CAAC;IACnChB,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACf,qBAAY,CAAC;EACzC,CAAC,CAAC;EAEFF,IAAI,CAAC,+BAA+B,EAAE,YAAM;IAC1C,IAAMU,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAAC0B,WAAW;MAAExB,OAAO,EAAE;IAAK,CAAC;IAC9D,IAAMC,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAACP,OAAO,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC;IACnChB,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACf,qBAAY,CAAC;EACzC,CAAC,CAAC;EAEFF,IAAI,CAAC,8BAA8B,EAAE,YAAM;IACzC,IAAMU,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAAC2B,SAAS;MAAEzB,OAAO,EAAE;IAAS,CAAC;IAChE,IAAMC,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAACN,KAAK,CAAC,CAACQ,IAAI,CAAC,QAAQ,CAAC;IACrChB,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACf,qBAAY,CAAC;EACzC,CAAC,CAAC;EAEFF,IAAI,CAAC,8BAA8B,EAAE,YAAM;IACzC,IAAMwC,cAAc,GAAAP,MAAA,CAAAC,MAAA,KACfhC,qBAAY;MACfO,KAAK,EAAE;IAAQ,EAChB;IAED,IAAMC,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAAC6B;IAAY,CAAC;IAC/C,IAAM1B,QAAQ,GAAG,IAAAC,gBAAO,EAACwB,cAAc,EAAE9B,MAAM,CAAC;IAEhDT,MAAM,CAACc,QAAQ,CAACN,KAAK,CAAC,CAACiC,QAAQ,CAAC,CAAC;IACjCzC,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAACuB,cAAc,CAAC;EAC3C,CAAC,CAAC;EAEFxC,IAAI,CAAC,2BAA2B,EAAE,YAAM;IACtC,IAAM2C,aAAa,GAAG;MACpBvC,eAAe,EAAE,IAAI;MACrBC,IAAI,EAAE;QAAEc,EAAE,EAAE,CAAC;QAAEC,QAAQ,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAmB,CAAC;MAC5Df,aAAa,EAAE,CACb;QACEa,EAAE,EAAE,GAAG;QACPK,OAAO,EAAE,mBAAmB;QAC5BC,gBAAgB,EAAE,QAAiB;QACnCC,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE;MACb,CAAC,CACF;MACDpB,KAAK,EAAE,MAAe;MACtBC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE;IACT,CAAC;IAED,IAAMC,MAAM,GAAG;MAAEC,IAAI,EAAEC,iBAAU,CAACgC;IAAY,CAAC;IAC/C,IAAM7B,QAAQ,GAAG,IAAAC,gBAAO,EAAC2B,aAAa,EAAEjC,MAAM,CAAC;IAE/CT,MAAM,CAACc,QAAQ,CAAC,CAACZ,OAAO,CAACD,qBAAY,CAAC;IACtCD,MAAM,CAACc,QAAQ,CAAC,CAACG,GAAG,CAACD,IAAI,CAAC0B,aAAa,CAAC;EAC1C,CAAC,CAAC;EAEF3C,IAAI,CAAC,2BAA2B,EAAE,YAAM;IACtC,IAAMU,MAAM,GAAG;MAAEC,IAAI,EAAE;IAAwB,CAAC;IAChD,IAAMI,QAAQ,GAAG,IAAAC,gBAAO,EAACd,qBAAY,EAAEQ,MAAM,CAAC;IAE9CT,MAAM,CAACc,QAAQ,CAAC,CAACE,IAAI,CAACf,qBAAY,CAAC;EACrC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}