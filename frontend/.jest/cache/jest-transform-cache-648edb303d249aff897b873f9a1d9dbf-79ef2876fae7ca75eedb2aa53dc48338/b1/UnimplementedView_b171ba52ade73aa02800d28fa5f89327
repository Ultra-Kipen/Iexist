b48952e9ac65270bf9504ef7f947a27e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var UnimplementedView = function (_React$Component) {
  function UnimplementedView() {
    (0, _classCallCheck2.default)(this, UnimplementedView);
    return _callSuper(this, UnimplementedView, arguments);
  }
  (0, _inherits2.default)(UnimplementedView, _React$Component);
  return (0, _createClass2.default)(UnimplementedView, [{
    key: "render",
    value: function render() {
      var View = require("../View/View");
      return (0, _jsxRuntime.jsx)(View, {
        style: [styles.unimplementedView, this.props.style],
        children: this.props.children
      });
    }
  }]);
}(React.Component);
var styles = _StyleSheet.default.create({
  unimplementedView: true ? {
    alignSelf: 'flex-start',
    borderColor: 'red',
    borderWidth: 1
  } : {}
});
module.exports = UnimplementedView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfU3R5bGVTaGVldCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9jYWxsU3VwZXIiLCJvIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJVbmltcGxlbWVudGVkVmlldyIsIl9SZWFjdCRDb21wb25lbnQiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsIlZpZXciLCJqc3giLCJzdHlsZSIsInN0eWxlcyIsInVuaW1wbGVtZW50ZWRWaWV3IiwicHJvcHMiLCJjaGlsZHJlbiIsIkNvbXBvbmVudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJhbGlnblNlbGYiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlVuaW1wbGVtZW50ZWRWaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENvbW1vbiBpbXBsZW1lbnRhdGlvbiBmb3IgYSBzaW1wbGUgc3R1YmJlZCB2aWV3LiBTaW1wbHkgYXBwbGllcyB0aGUgdmlldydzIHN0eWxlcyB0byB0aGUgaW5uZXJcbiAqIFZpZXcgY29tcG9uZW50IGFuZCByZW5kZXJzIGl0cyBjaGlsZHJlbi5cbiAqL1xuY2xhc3MgVW5pbXBsZW1lbnRlZFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8JEZsb3dGaXhNZVByb3BzPiB7XG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICAvLyBXb3JrYXJvdW5kIHJlcXVpcmUgY3ljbGUgZnJvbSByZXF1aXJlTmF0aXZlQ29tcG9uZW50XG4gICAgY29uc3QgVmlldyA9IHJlcXVpcmUoJy4uL1ZpZXcvVmlldycpO1xuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy51bmltcGxlbWVudGVkVmlldywgdGhpcy5wcm9wcy5zdHlsZV19PlxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgdW5pbXBsZW1lbnRlZFZpZXc6IF9fREVWX19cbiAgICA/IHtcbiAgICAgICAgYWxpZ25TZWxmOiAnZmxleC1zdGFydCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiAncmVkJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICB9XG4gICAgOiB7fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVuaW1wbGVtZW50ZWRWaWV3O1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsMkJBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLGdCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSyxVQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDYixJQUFBTSxXQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxLQUFBLEdBQUFDLHVCQUFBLENBQUFSLE9BQUE7QUFBK0IsSUFBQVMsV0FBQSxHQUFBVCxPQUFBO0FBQUEsU0FBQVUseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFILHdCQUFBRyxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsV0FBQUssT0FBQSxFQUFBTCxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBYixDQUFBLEVBQUFjLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUFWLEdBQUEsSUFBQVUsQ0FBQSxDQUFBQyxHQUFBLElBQUFQLE1BQUEsQ0FBQUMsY0FBQSxDQUFBSixDQUFBLEVBQUFNLENBQUEsRUFBQUcsQ0FBQSxJQUFBVCxDQUFBLENBQUFNLENBQUEsSUFBQWQsQ0FBQSxDQUFBYyxDQUFBLFlBQUFOLENBQUEsQ0FBQUgsT0FBQSxHQUFBTCxDQUFBLEVBQUFHLENBQUEsSUFBQUEsQ0FBQSxDQUFBZSxHQUFBLENBQUFsQixDQUFBLEVBQUFRLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFNBQUFXLFdBQUFoQixDQUFBLEVBQUFpQixDQUFBLEVBQUFwQixDQUFBLFdBQUFvQixDQUFBLE9BQUEzQixnQkFBQSxDQUFBWSxPQUFBLEVBQUFlLENBQUEsT0FBQTVCLDJCQUFBLENBQUFhLE9BQUEsRUFBQUYsQ0FBQSxFQUFBa0IseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFILENBQUEsRUFBQXBCLENBQUEsWUFBQVAsZ0JBQUEsQ0FBQVksT0FBQSxFQUFBRixDQUFBLEVBQUFxQixXQUFBLElBQUFKLENBQUEsQ0FBQUssS0FBQSxDQUFBdEIsQ0FBQSxFQUFBSCxDQUFBO0FBQUEsU0FBQXFCLDBCQUFBLGNBQUFsQixDQUFBLElBQUF1QixPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBWixJQUFBLENBQUFNLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBLGlDQUFBdkIsQ0FBQSxhQUFBa0IseUJBQUEsWUFBQUEsMEJBQUEsYUFBQWxCLENBQUE7QUFBQSxJQU16QjBCLGlCQUFpQixhQUFBQyxnQkFBQTtFQUFBLFNBQUFELGtCQUFBO0lBQUEsSUFBQXZDLGdCQUFBLENBQUFlLE9BQUEsUUFBQXdCLGlCQUFBO0lBQUEsT0FBQVYsVUFBQSxPQUFBVSxpQkFBQSxFQUFBRSxTQUFBO0VBQUE7RUFBQSxJQUFBckMsVUFBQSxDQUFBVyxPQUFBLEVBQUF3QixpQkFBQSxFQUFBQyxnQkFBQTtFQUFBLFdBQUF2QyxhQUFBLENBQUFjLE9BQUEsRUFBQXdCLGlCQUFBO0lBQUFHLEdBQUE7SUFBQUMsS0FBQSxFQUNyQixTQUFBQyxNQUFNQSxDQUFBLEVBQWU7TUFFbkIsSUFBTUMsSUFBSSxHQUFHOUMsT0FBTyxlQUFlLENBQUM7TUFDcEMsT0FDRSxJQUFBUyxXQUFBLENBQUFzQyxHQUFBLEVBQUNELElBQUk7UUFBQ0UsS0FBSyxFQUFFLENBQUNDLE1BQU0sQ0FBQ0MsaUJBQWlCLEVBQUUsSUFBSSxDQUFDQyxLQUFLLENBQUNILEtBQUssQ0FBRTtRQUFBSSxRQUFBLEVBQ3ZELElBQUksQ0FBQ0QsS0FBSyxDQUFDQztNQUFRLENBQ2hCLENBQUM7SUFFWDtFQUFDO0FBQUEsRUFUNkI3QyxLQUFLLENBQUM4QyxTQUFTO0FBWS9DLElBQU1KLE1BQU0sR0FBR0ssbUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBQy9CTCxpQkFBaUIsRUFBRSxPQUNmO0lBQ0VNLFNBQVMsRUFBRSxZQUFZO0lBQ3ZCQyxXQUFXLEVBQUUsS0FBSztJQUNsQkMsV0FBVyxFQUFFO0VBQ2YsQ0FBQyxHQUNELENBQUM7QUFDUCxDQUFDLENBQUM7QUFFRkMsTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=