{"version":3,"names":["_getJestObj","mock","getMyPosts","jest","fn","Promise","resolve","data","posts","post_id","content","emotion_summary","like_count","comment_count","created_at","deletePost","success","alert","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_MyPostsScreen","_postService","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","it","default","mockNavigation","navigate","addListener","render","jsx","navigation","route","waitFor","expect","postService","toHaveBeenCalled","timeout"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport MyPostsScreen from '../../src/screens/MyPostsScreen';\r\nimport postService from '../../src/services/api/postService';\r\nimport { Alert } from 'react-native';\r\n\r\n// 서비스 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn(() => Promise.resolve({\r\n    data: {\r\n      posts: [\r\n        {\r\n          post_id: 1,\r\n          content: '첫 번째 테스트 게시물입니다.',\r\n          emotion_summary: '행복',\r\n          like_count: 5,\r\n          comment_count: 2,\r\n          created_at: '2025-03-01T12:00:00Z',\r\n        }\r\n      ]\r\n    }\r\n  })),\r\n  deletePost: jest.fn(() => Promise.resolve({ data: { success: true } })),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 단순 테스트로 시작\r\ndescribe('MyPostsScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('fetches posts on mount', async () => {\r\n    const mockNavigation = {\r\n      navigate: jest.fn(),\r\n      addListener: jest.fn(() => jest.fn()),\r\n    };\r\n    \r\n    render(<MyPostsScreen navigation={mockNavigation} route={{}} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(postService.getMyPosts).toHaveBeenCalled();\r\n    }, { timeout: 1000 });\r\n  });\r\n});"],"mappings":"AAQAA,WAAA,GAAKC,IAAI,uCAAuC;EAAA,OAAO;IACrDC,UAAU,EAAEC,IAAI,CAACC,EAAE,CAAC;MAAA,OAAMC,OAAO,CAACC,OAAO,CAAC;QACxCC,IAAI,EAAE;UACJC,KAAK,EAAE,CACL;YACEC,OAAO,EAAE,CAAC;YACVC,OAAO,EAAE,kBAAkB;YAC3BC,eAAe,EAAE,IAAI;YACrBC,UAAU,EAAE,CAAC;YACbC,aAAa,EAAE,CAAC;YAChBC,UAAU,EAAE;UACd,CAAC;QAEL;MACF,CAAC,CAAC;IAAA,EAAC;IACHC,UAAU,EAAEZ,IAAI,CAACC,EAAE,CAAC;MAAA,OAAMC,OAAO,CAACC,OAAO,CAAC;QAAEC,IAAI,EAAE;UAAES,OAAO,EAAE;QAAK;MAAE,CAAC,CAAC;IAAA;EACxE,CAAC;AAAA,CAAC,CAAC;AAGHhB,WAAA,GAAKC,IAAI,CAAC,oCAAoC,EAAE;EAAA,OAAO;IACrDgB,KAAK,EAAEd,IAAI,CAACC,EAAE,CAAC;EACjB,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAc,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AA5BJ,IAAAE,MAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,YAAA,GAAAH,OAAA;AACA,IAAAI,cAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,YAAA,GAAAN,sBAAA,CAAAC,OAAA;AAA6D,IAAAM,WAAA,GAAAN,OAAA;AAAA,SAAAnB,YAAA;EAAA,IAAA0B,QAAA,GAAAP,OAAA;IAAAhB,IAAA,GAAAuB,QAAA,CAAAvB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AA4B7DwB,QAAQ,CAAC,eAAe,EAAE,YAAM;EAC9BC,UAAU,CAAC,YAAM;IACfzB,IAAI,CAAC0B,aAAa,CAAC,CAAC;EACtB,CAAC,CAAC;EAEFC,EAAE,CAAC,wBAAwB,MAAAV,kBAAA,CAAAW,OAAA,EAAE,aAAY;IACvC,IAAMC,cAAc,GAAG;MACrBC,QAAQ,EAAE9B,IAAI,CAACC,EAAE,CAAC,CAAC;MACnB8B,WAAW,EAAE/B,IAAI,CAACC,EAAE,CAAC;QAAA,OAAMD,IAAI,CAACC,EAAE,CAAC,CAAC;MAAA;IACtC,CAAC;IAED,IAAA+B,mBAAM,EAAC,IAAAV,WAAA,CAAAW,GAAA,EAACb,cAAA,CAAAQ,OAAa;MAACM,UAAU,EAAEL,cAAe;MAACM,KAAK,EAAE,CAAC;IAAE,CAAE,CAAC,CAAC;IAEhE,MAAM,IAAAC,oBAAO,EAAC,YAAM;MAClBC,MAAM,CAACC,oBAAW,CAACvC,UAAU,CAAC,CAACwC,gBAAgB,CAAC,CAAC;IACnD,CAAC,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;EACvB,CAAC,EAAC;AACJ,CAAC,CAAC","ignoreList":[]}