{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNative2","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","SimpleComponent","jsx","Text","children","ComplexComponent","_ref","items","FlatList","data","keyExtractor","item","index","renderItem","_ref2","NestedComponent","_ref3","_ref3$depth","depth","jsxs","View","_NestedComponent","onRenderCallback","jest","fn","id","phase","actualDuration","baseDuration","startTime","commitTime","describe","beforeEach","clearAllMocks","test","render","Profiler","onRender","expect","toHaveBeenCalledTimes","result","mock","results","value","toBe","console","log","toBeLessThan","Array","from","length","_","_render","rerender","mountResult","updateResult"],"sources":["RenderPerformance.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { Text, View, FlatList } from 'react-native';\r\nimport { Profiler } from 'react';\r\n\r\n// 성능 측정을 위한 간단한 컴포넌트\r\nconst SimpleComponent = () => <Text>Simple Component</Text>;\r\n\r\n// 복잡한 컴포넌트 (많은 아이템을 렌더링)\r\nconst ComplexComponent = ({ items }: { items: string[] }) => (\r\n  <FlatList\r\n    data={items}\r\n    keyExtractor={(item, index) => `item-${index}`}\r\n    renderItem={({ item }) => <Text>{item}</Text>}\r\n  />\r\n);\r\n\r\n// 중첩 컴포넌트 (깊은 트리 구조)\r\nconst NestedComponent = ({ depth = 3 }: { depth?: number }) => {\r\n  if (depth <= 0) {\r\n    return <Text>Leaf Node</Text>;\r\n  }\r\n  return (\r\n    <View>\r\n      <NestedComponent depth={depth - 1} />\r\n      <NestedComponent depth={depth - 1} />\r\n    </View>\r\n  );\r\n};\r\n\r\n// 프로파일러 콜백 함수\r\nconst onRenderCallback = jest.fn(\r\n  (\r\n    id, // 방금 커밋된 Profiler 트리의 \"id\"\r\n    phase, // \"mount\" (트리가 방금 마운트가 된 경우) 혹은 \"update\"(트리가 리렌더링된 경우)\r\n    actualDuration, // 커밋된 업데이트를 렌더링하는데 걸린 시간\r\n    baseDuration, // 메모이제이션 없이 하위 트리 전체를 렌더링하는데 걸리는 예상시간\r\n    startTime, // React가 언제 해당 업데이트를 렌더링하기 시작했는지\r\n    commitTime // React가 해당 업데이트를 언제 커밋했는지\r\n  ) => {\r\n    return {\r\n      id,\r\n      phase,\r\n      actualDuration,\r\n      baseDuration,\r\n      startTime,\r\n      commitTime,\r\n    };\r\n  }\r\n);\r\n\r\ndescribe('렌더링 성능 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test('SimpleComponent 렌더링 성능', () => {\r\n    render(\r\n      <Profiler id=\"SimpleComponent\" onRender={onRenderCallback}>\r\n        <SimpleComponent />\r\n      </Profiler>\r\n    );\r\n    \r\n    expect(onRenderCallback).toHaveBeenCalledTimes(1);\r\n    const result = onRenderCallback.mock.results[0].value;\r\n    \r\n    expect(result.id).toBe('SimpleComponent');\r\n    expect(result.phase).toBe('mount');\r\n    \r\n    // 테스트 환경에 따라 렌더링 시간이 달라질 수 있으므로 단정문 대신 로깅만 수행\r\n    console.log(`SimpleComponent actualDuration: ${result.actualDuration}ms`);\r\n    // 조건을 완화하여 더 큰 값으로 설정\r\n    expect(result.actualDuration).toBeLessThan(200);\r\n  });\r\n\r\n  test('ComplexComponent 렌더링 성능', () => {\r\n    // 500개 아이템으로 테스트\r\n    const items = Array.from({ length: 500 }, (_, i) => `Item ${i}`);\r\n    \r\n    render(\r\n      <Profiler id=\"ComplexComponent\" onRender={onRenderCallback}>\r\n        <ComplexComponent items={items} />\r\n      </Profiler>\r\n    );\r\n    \r\n    expect(onRenderCallback).toHaveBeenCalledTimes(1);\r\n    const result = onRenderCallback.mock.results[0].value;\r\n    \r\n    expect(result.id).toBe('ComplexComponent');\r\n    \r\n    // 복잡한 리스트는 더 오래 걸릴 수 있음\r\n    // 실제 환경에서는 특정 임계값을 설정할 수 있습니다\r\n    console.log(`ComplexComponent actualDuration: ${result.actualDuration}ms`);\r\n  });\r\n\r\n  test('NestedComponent 렌더링 성능', () => {\r\n    render(\r\n      <Profiler id=\"NestedComponent\" onRender={onRenderCallback}>\r\n        <NestedComponent depth={4} />\r\n      </Profiler>\r\n    );\r\n    \r\n    expect(onRenderCallback).toHaveBeenCalledTimes(1);\r\n    const result = onRenderCallback.mock.results[0].value;\r\n    \r\n    expect(result.id).toBe('NestedComponent');\r\n    \r\n    // 중첩 컴포넌트는 깊이에 따라 렌더링 시간이 달라짐\r\n    console.log(`NestedComponent actualDuration: ${result.actualDuration}ms`);\r\n  });\r\n\r\n  test('업데이트 시 리렌더링 성능', () => {\r\n    const { rerender } = render(\r\n      <Profiler id=\"UpdateTest\" onRender={onRenderCallback}>\r\n        <ComplexComponent items={['Item 1', 'Item 2']} />\r\n      </Profiler>\r\n    );\r\n    \r\n    // 첫 렌더링의 콜백 결과\r\n    const mountResult = onRenderCallback.mock.results[0].value;\r\n    \r\n    // 다른 데이터로 리렌더링\r\n    rerender(\r\n      <Profiler id=\"UpdateTest\" onRender={onRenderCallback}>\r\n        <ComplexComponent items={['Item 1', 'Item 2', 'Item 3']} />\r\n      </Profiler>\r\n    );\r\n    \r\n    // 두 번째 렌더링의 콜백 결과\r\n    const updateResult = onRenderCallback.mock.results[1].value;\r\n    \r\n    expect(mountResult.phase).toBe('mount');\r\n    expect(updateResult.phase).toBe('update');\r\n    \r\n    // 업데이트 렌더링이 초기 마운트보다 빠른지 검증\r\n    // (메모이제이션 효과가 있다면 더 빠를 수 있음)\r\n    console.log(`Mount Duration: ${mountResult.actualDuration}ms`);\r\n    console.log(`Update Duration: ${updateResult.actualDuration}ms`);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}