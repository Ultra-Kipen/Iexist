c14cb46013a24fe4c3a918fb887342d5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _comfortWallService = _interopRequireDefault(require("../services/api/comfortWallService"));
var _postService = _interopRequireDefault(require("../services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ComfortScreen = function ComfortScreen(_ref) {
  var navigation = _ref.navigation;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    posts = _useState2[0],
    setPosts = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    bestPosts = _useState4[0],
    setBestPosts = _useState4[1];
  var _useState5 = (0, _react.useState)(true),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    newPostTitle = _useState8[0],
    setNewPostTitle = _useState8[1];
  var _useState9 = (0, _react.useState)(''),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    newPostContent = _useState10[0],
    setNewPostContent = _useState10[1];
  var _useState11 = (0, _react.useState)(true),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    isAnonymous = _useState12[0],
    setIsAnonymous = _useState12[1];
  var _useState13 = (0, _react.useState)(false),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    showNewPostModal = _useState14[0],
    setShowNewPostModal = _useState14[1];
  var _useState15 = (0, _react.useState)(null),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    selectedPost = _useState16[0],
    setSelectedPost = _useState16[1];
  var _useState17 = (0, _react.useState)(''),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    message = _useState18[0],
    setMessage = _useState18[1];
  var _useState19 = (0, _react.useState)(false),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    showMessageModal = _useState20[0],
    setShowMessageModal = _useState20[1];
  var _useState21 = (0, _react.useState)(false),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    isSubmitting = _useState22[0],
    setIsSubmitting = _useState22[1];
  var _useState23 = (0, _react.useState)([]),
    _useState24 = (0, _slicedToArray2.default)(_useState23, 2),
    likedPosts = _useState24[0],
    setLikedPosts = _useState24[1];
  var theme = (0, _reactNativePaper.useTheme)();
  (0, _react.useEffect)(function () {
    loadData();
  }, []);
  var loadData = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      setIsLoading(true);
      try {
        var response = yield _comfortWallService.default.getPosts();
        setPosts(response.data.data || []);
        var bestResponse = yield _comfortWallService.default.getBestPosts();
        setBestPosts(bestResponse.data.data || []);
      } catch (error) {
        _reactNative.Alert.alert('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
        console.error('게시물 로드 오류:', error);
      } finally {
        setIsLoading(false);
      }
    });
    return function loadData() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handlePost = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (!newPostTitle.trim() || !newPostContent.trim()) {
        _reactNative.Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
        return;
      }
      setIsSubmitting(true);
      try {
        yield _comfortWallService.default.createPost({
          title: newPostTitle.trim(),
          content: newPostContent.trim(),
          is_anonymous: isAnonymous
        });
        _reactNative.Alert.alert('성공', '게시물이 등록되었습니다.', [{
          text: '확인',
          onPress: function onPress() {
            setShowNewPostModal(false);
            setNewPostTitle('');
            setNewPostContent('');
            loadData();
          }
        }]);
      } catch (error) {
        var _error$response;
        _reactNative.Alert.alert('오류', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '게시물 등록 중 오류가 발생했습니다.');
      } finally {
        setIsSubmitting(false);
      }
    });
    return function handlePost() {
      return _ref3.apply(this, arguments);
    };
  }();
  var handleLike = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (postId) {
      setIsSubmitting(true);
      try {
        yield _postService.default.likePost(postId);
        if (likedPosts.includes(postId)) {
          setLikedPosts(likedPosts.filter(function (id) {
            return id !== postId;
          }));
        } else {
          setLikedPosts([].concat((0, _toConsumableArray2.default)(likedPosts), [postId]));
        }
        loadData();
      } catch (error) {
        var _error$response2;
        _reactNative.Alert.alert('오류', ((_error$response2 = error.response) == null || (_error$response2 = _error$response2.data) == null ? void 0 : _error$response2.message) || '좋아요 처리 중 오류가 발생했습니다.');
      } finally {
        setIsSubmitting(false);
      }
    });
    return function handleLike(_x) {
      return _ref4.apply(this, arguments);
    };
  }();
  var openMessageModal = function openMessageModal(post) {
    setSelectedPost(post);
    setShowMessageModal(true);
  };
  var sendMessage = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      if (!selectedPost || !message.trim()) {
        _reactNative.Alert.alert('알림', '메시지 내용을 입력해주세요.');
        return;
      }
      setIsSubmitting(true);
      try {
        yield _comfortWallService.default.sendMessage(selectedPost.post_id, {
          message: message.trim(),
          is_anonymous: isAnonymous
        });
        _reactNative.Alert.alert('성공', '메시지가 전송되었습니다.', [{
          text: '확인',
          onPress: function onPress() {
            setShowMessageModal(false);
            setMessage('');
            loadData();
          }
        }]);
      } catch (error) {
        var _error$response3;
        _reactNative.Alert.alert('오류', ((_error$response3 = error.response) == null || (_error$response3 = _error$response3.data) == null ? void 0 : _error$response3.message) || '메시지 전송 중 오류가 발생했습니다.');
      } finally {
        setIsSubmitting(false);
      }
    });
    return function sendMessage() {
      return _ref5.apply(this, arguments);
    };
  }();
  if (isLoading) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.loadingContainer,
      testID: "loading-indicator",
      children: [(0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
        size: "large"
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
        style: styles.loadingText,
        children: "\uAC8C\uC2DC\uBB3C\uC744 \uBD88\uB7EC\uC624\uB294 \uC911..."
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      style: styles.scrollView,
      testID: "comfort-screen-scrollview",
      children: [bestPosts.length > 0 && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.bestPostsSection,
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Title, {
          style: styles.sectionTitle,
          testID: "best-posts-title",
          children: "\uC774\uBC88 \uC8FC \uBCA0\uC2A4\uD2B8 \uAC8C\uC2DC\uBB3C"
        }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
          horizontal: true,
          showsHorizontalScrollIndicator: false,
          children: bestPosts.map(function (post) {
            return (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
              style: styles.bestPostCard,
              children: (0, _jsxRuntime.jsxs)(_reactNativePaper.Card.Content, {
                children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Title, {
                  numberOfLines: 1,
                  children: post.title
                }), (0, _jsxRuntime.jsx)(_reactNativePaper.Paragraph, {
                  numberOfLines: 2,
                  children: post.content
                }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
                  style: styles.postStats,
                  children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Chip, {
                    icon: likedPosts.includes(post.post_id) ? "thumb-up" : "thumb-up-outline",
                    onPress: function onPress() {
                      return handleLike(post.post_id);
                    },
                    testID: `like-button-${post.post_id}`,
                    children: post.like_count
                  }), (0, _jsxRuntime.jsx)(_reactNativePaper.Chip, {
                    icon: "comment",
                    style: styles.commentChip,
                    children: post.comment_count
                  })]
                })]
              })
            }, post.post_id);
          })
        })]
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.Title, {
        style: styles.title,
        children: "\uB2E4\uB978 \uC0AC\uC6A9\uC790\uB4E4\uC758 \uACE0\uBBFC"
      }), (0, _jsxRuntime.jsx)(_reactNativePaper.List.Section, {
        testID: "posts-list",
        children: posts.length > 0 ? posts.map(function (post) {
          return (0, _jsxRuntime.jsx)(_reactNativePaper.List.Item, {
            title: post.title,
            description: `${post.content.substring(0, 50)}${post.content.length > 50 ? '...' : ''}`,
            left: function left(props) {
              return (0, _jsxRuntime.jsx)(_reactNativePaper.List.Icon, Object.assign({}, props, {
                icon: "comment-outline"
              }));
            },
            right: function right(props) {
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                style: {
                  flexDirection: 'row'
                },
                children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
                  mode: "text",
                  onPress: function onPress() {
                    return handleLike(post.post_id);
                  },
                  testID: `like-button-${post.post_id}`,
                  icon: likedPosts.includes(post.post_id) ? "thumb-up" : "thumb-up-outline",
                  children: post.like_count
                }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
                  mode: "text",
                  onPress: function onPress() {
                    return openMessageModal(post);
                  },
                  testID: `comment-button-${post.post_id}`,
                  children: "\uC751\uC6D0\uD558\uAE30"
                })]
              });
            },
            onPress: function onPress() {
              return openMessageModal(post);
            },
            style: styles.listItem
          }, post.post_id);
        }) : (0, _jsxRuntime.jsx)(_reactNativePaper.Paragraph, {
          style: styles.emptyText,
          children: "\uACE0\uBBFC \uAC8C\uC2DC\uBB3C\uC774 \uC5C6\uC2B5\uB2C8\uB2E4. \uC0C8\uB85C\uC6B4 \uACE0\uBBFC\uC744 \uACF5\uC720\uD574\uBCF4\uC138\uC694!"
        })
      })]
    }), (0, _jsxRuntime.jsx)(_reactNativePaper.FAB, {
      style: [styles.fab, {
        backgroundColor: theme.colors.primary
      }],
      icon: "plus",
      onPress: function onPress() {
        return setShowNewPostModal(true);
      },
      testID: "new-post-button"
    }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      transparent: true,
      visible: showNewPostModal,
      onRequestClose: function onRequestClose() {
        return setShowNewPostModal(false);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.modalContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.modalContent,
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Title, {
            style: styles.modalTitle,
            children: "\uACE0\uBBFC \uB098\uB204\uAE30"
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
            mode: "outlined",
            label: "\uC81C\uBAA9",
            value: newPostTitle,
            onChangeText: setNewPostTitle,
            style: styles.input,
            testID: "post-title-input"
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
            mode: "outlined",
            label: "\uACE0\uBBFC \uB0B4\uC6A9",
            value: newPostContent,
            onChangeText: setNewPostContent,
            multiline: true,
            numberOfLines: 4,
            style: styles.input,
            testID: "post-content-input"
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.anonymousOption,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Paragraph, {
              children: "\uC775\uBA85\uC73C\uB85C \uAC8C\uC2DC\uD558\uAE30"
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                return setIsAnonymous(!isAnonymous);
              },
              style: styles.checkbox,
              testID: "anonymous-checkbox",
              children: isAnonymous && (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.checkboxInner
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.modalButtons,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
              mode: "outlined",
              onPress: function onPress() {
                return setShowNewPostModal(false);
              },
              style: styles.modalButton,
              testID: "cancel-post-button",
              children: "\uCDE8\uC18C"
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
              mode: "contained",
              onPress: handlePost,
              style: styles.modalButton,
              loading: isSubmitting,
              disabled: isSubmitting,
              testID: "submit-post-button",
              children: "\uAC8C\uC2DC\uD558\uAE30"
            })]
          })]
        })
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Modal, {
      animationType: "slide",
      transparent: true,
      visible: showMessageModal,
      onRequestClose: function onRequestClose() {
        return setShowMessageModal(false);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.modalContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.modalContent,
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Title, {
            style: styles.modalTitle,
            children: "\uC751\uC6D0 \uBA54\uC2DC\uC9C0 \uBCF4\uB0B4\uAE30"
          }), selectedPost && (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.selectedPostInfo,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Title, {
              numberOfLines: 1,
              children: selectedPost.title
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Paragraph, {
              numberOfLines: 3,
              children: selectedPost.content
            })]
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
            mode: "outlined",
            label: "\uC751\uC6D0 \uBA54\uC2DC\uC9C0",
            value: message,
            onChangeText: setMessage,
            multiline: true,
            numberOfLines: 4,
            style: styles.input,
            testID: "comment-input"
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.anonymousOption,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Paragraph, {
              children: "\uC775\uBA85\uC73C\uB85C \uC804\uC1A1\uD558\uAE30"
            }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
              onPress: function onPress() {
                return setIsAnonymous(!isAnonymous);
              },
              style: styles.checkbox,
              testID: "anonymous-checkbox",
              children: isAnonymous && (0, _jsxRuntime.jsx)(_reactNative.View, {
                style: styles.checkboxInner
              })
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.modalButtons,
            children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
              mode: "outlined",
              onPress: function onPress() {
                return setShowMessageModal(false);
              },
              style: styles.modalButton,
              testID: "cancel-message-button",
              children: "\uCDE8\uC18C"
            }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
              mode: "contained",
              onPress: sendMessage,
              style: styles.modalButton,
              loading: isSubmitting,
              disabled: isSubmitting,
              testID: "submit-comment-button",
              children: "\uC804\uC1A1\uD558\uAE30"
            })]
          })]
        })
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  scrollView: {
    flex: 1
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16
  },
  bestPostsSection: {
    marginTop: 16,
    marginBottom: 24
  },
  sectionTitle: {
    marginLeft: 16,
    marginBottom: 8,
    fontSize: 18,
    fontWeight: 'bold'
  },
  bestPostCard: {
    width: 280,
    marginLeft: 16,
    marginRight: 8
  },
  postStats: {
    flexDirection: 'row',
    marginTop: 8
  },
  commentChip: {
    marginLeft: 8
  },
  title: {
    marginLeft: 16,
    marginTop: 24,
    marginBottom: 8
  },
  listItem: {
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginVertical: 4,
    borderRadius: 8
  },
  emptyText: {
    textAlign: 'center',
    marginTop: 24,
    color: '#888'
  },
  fab: {
    position: 'absolute',
    margin: 16,
    right: 0,
    bottom: 0
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    padding: 20
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5
  },
  modalTitle: {
    marginBottom: 16,
    textAlign: 'center'
  },
  input: {
    marginBottom: 16
  },
  anonymousOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 16
  },
  checkbox: {
    width: 24,
    height: 24,
    borderWidth: 2,
    borderColor: '#000',
    borderRadius: 4,
    justifyContent: 'center',
    alignItems: 'center'
  },
  checkboxInner: {
    width: 16,
    height: 16,
    backgroundColor: '#000',
    borderRadius: 2
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  modalButton: {
    flex: 1,
    marginHorizontal: 8
  },
  selectedPostInfo: {
    backgroundColor: '#f5f5f5',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16
  }
});
var _default = exports.default = ComfortScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,