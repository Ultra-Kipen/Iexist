7991fd4c9719246823bed1d9387107d5
'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (true) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return object;
    }
    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key])
        });
        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key)
        });
      }
    }
    Object.freeze(object);
    Object.seal(object);
    for (var _i = 0; _i < keys.length; _i++) {
      var _key = keys[_i];
      if (_hasOwnProperty.call(object, _key)) {
        deepFreezeAndThrowOnMutationInDev(object[_key]);
      }
    }
  }
  return object;
}
function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}
function identity(value) {
  return value;
}
module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJPYmplY3QiLCJpc0Zyb3plbiIsImlzU2VhbGVkIiwia2V5cyIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiaSIsImxlbmd0aCIsImtleSIsImNhbGwiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImlkZW50aXR5IiwiYmluZCIsInNldCIsInRocm93T25JbW11dGFibGVNdXRhdGlvbiIsImZyZWV6ZSIsInNlYWwiLCJ2YWx1ZSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJZiB5b3VyIGFwcGxpY2F0aW9uIGlzIGFjY2VwdGluZyBkaWZmZXJlbnQgdmFsdWVzIGZvciB0aGUgc2FtZSBmaWVsZCBvdmVyXG4gKiB0aW1lIGFuZCBpcyBkb2luZyBhIGRpZmYgb24gdGhlbSwgeW91IGNhbiBlaXRoZXIgKDEpIGNyZWF0ZSBhIGNvcHkgb3JcbiAqICgyKSBlbnN1cmUgdGhhdCB0aG9zZSB2YWx1ZXMgYXJlIG5vdCBtdXRhdGVkIGJlaGluZCB0d28gcGFzc2VzLlxuICogVGhpcyBmdW5jdGlvbiBoZWxwcyB5b3Ugd2l0aCAoMikgYnkgZnJlZXppbmcgdGhlIG9iamVjdCBhbmQgdGhyb3dpbmcgaWZcbiAqIHRoZSB1c2VyIHN1YnNlcXVlbnRseSBtb2RpZmllcyB0aGUgdmFsdWUuXG4gKlxuICogVGhlcmUgYXJlIHR3byBjYXZlYXRzIHdpdGggdGhpcyBmdW5jdGlvbjpcbiAqICAgLSBJZiB0aGUgY2FsbCBzaXRlIGlzIG5vdCBpbiBzdHJpY3QgbW9kZSwgaXQgd2lsbCBvbmx5IHRocm93IHdoZW5cbiAqICAgICBtdXRhdGluZyBleGlzdGluZyBmaWVsZHMsIGFkZGluZyBhIG5ldyBvbmVcbiAqICAgICB3aWxsIHVuZm9ydHVuYXRlbHkgZmFpbCBzaWxlbnRseSA6KFxuICogICAtIElmIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBmcm96ZW4gb3Igc2VhbGVkLCBpdCB3aWxsIG5vdCBjb250aW51ZSB0aGVcbiAqICAgICBkZWVwIHRyYXZlcnNhbCBhbmQgd2lsbCBsZWF2ZSBsZWFmIG5vZGVzIHVuZnJvemVuLlxuICpcbiAqIEZyZWV6aW5nIHRoZSBvYmplY3QgYW5kIGFkZGluZyB0aGUgdGhyb3cgbWVjaGFuaXNtIGlzIGV4cGVuc2l2ZSBhbmQgd2lsbFxuICogb25seSBiZSB1c2VkIGluIERFVi5cbiAqL1xuZnVuY3Rpb24gZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2PFQ6IHsuLi59IHwgQXJyYXk8bWl4ZWQ+PihcbiAgb2JqZWN0OiBULFxuKTogVCB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgfHxcbiAgICAgIG9iamVjdCA9PT0gbnVsbCB8fFxuICAgICAgT2JqZWN0LmlzRnJvemVuKG9iamVjdCkgfHxcbiAgICAgIE9iamVjdC5pc1NlYWxlZChvYmplY3QpXG4gICAgKSB7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8vICRGbG93Rml4TWVbbm90LWFuLW9iamVjdF0gYG9iamVjdGAgY2FuIGJlIGFuIGFycmF5LCBidXQgT2JqZWN0LmtleXMgd29ya3Mgd2l0aCBhcnJheXMgdG9vXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKChvYmplY3Q6IHsuLi59IHwgQXJyYXk8bWl4ZWQ+KSk7XG4gICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXMgcGFyYW1ldGVyc1xuICAgIGNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICBnZXQ6IGlkZW50aXR5LmJpbmQobnVsbCwgb2JqZWN0W2tleV0pLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgc2V0OiB0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24uYmluZChudWxsLCBrZXkpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZnJlZXplKG9iamVjdCk7XG4gICAgT2JqZWN0LnNlYWwob2JqZWN0KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYob2JqZWN0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKiAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdIFRoZSB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnkgRmxvdydzXG4gKiBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuZnVuY3Rpb24gdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uKGtleTogZW1wdHksIHZhbHVlKSB7XG4gIHRocm93IEVycm9yKFxuICAgICdZb3UgYXR0ZW1wdGVkIHRvIHNldCB0aGUga2V5IGAnICtcbiAgICAgIGtleSArXG4gICAgICAnYCB3aXRoIHRoZSB2YWx1ZSBgJyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgK1xuICAgICAgJ2Agb24gYW4gb2JqZWN0IHRoYXQgaXMgbWVhbnQgdG8gYmUgaW1tdXRhYmxlICcgK1xuICAgICAgJ2FuZCBoYXMgYmVlbiBmcm96ZW4uJyxcbiAgKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWU6IG1peGVkKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXY7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBbUJaLFNBQVNBLGlDQUFpQ0EsQ0FDeENDLE1BQVMsRUFDTjtFQUNILFVBQWE7SUFDWCxJQUNFLE9BQU9BLE1BQU0sS0FBSyxRQUFRLElBQzFCQSxNQUFNLEtBQUssSUFBSSxJQUNmQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0YsTUFBTSxDQUFDLElBQ3ZCQyxNQUFNLENBQUNFLFFBQVEsQ0FBQ0gsTUFBTSxDQUFDLEVBQ3ZCO01BQ0EsT0FBT0EsTUFBTTtJQUNmO0lBR0EsSUFBTUksSUFBSSxHQUFHSCxNQUFNLENBQUNHLElBQUksQ0FBRUosTUFBNkIsQ0FBQztJQUV4RCxJQUFNSyxlQUFjLEdBQUdKLE1BQU0sQ0FBQ0ssU0FBUyxDQUFDRCxjQUFjO0lBRXRELEtBQUssSUFBSUUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7TUFDcEMsSUFBTUUsR0FBRyxHQUFHTCxJQUFJLENBQUNHLENBQUMsQ0FBQztNQUNuQixJQUFJRixlQUFjLENBQUNLLElBQUksQ0FBQ1YsTUFBTSxFQUFFUyxHQUFHLENBQUMsRUFBRTtRQUNwQ1IsTUFBTSxDQUFDVSxjQUFjLENBQUNYLE1BQU0sRUFBRVMsR0FBRyxFQUFFO1VBQ2pDRyxHQUFHLEVBQUVDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRWQsTUFBTSxDQUFDUyxHQUFHLENBQUM7UUFDdEMsQ0FBQyxDQUFDO1FBQ0ZSLE1BQU0sQ0FBQ1UsY0FBYyxDQUFDWCxNQUFNLEVBQUVTLEdBQUcsRUFBRTtVQUNqQ00sR0FBRyxFQUFFQyx3QkFBd0IsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUwsR0FBRztRQUM5QyxDQUFDLENBQUM7TUFDSjtJQUNGO0lBRUFSLE1BQU0sQ0FBQ2dCLE1BQU0sQ0FBQ2pCLE1BQU0sQ0FBQztJQUNyQkMsTUFBTSxDQUFDaUIsSUFBSSxDQUFDbEIsTUFBTSxDQUFDO0lBRW5CLEtBQUssSUFBSU8sRUFBQyxHQUFHLENBQUMsRUFBRUEsRUFBQyxHQUFHSCxJQUFJLENBQUNJLE1BQU0sRUFBRUQsRUFBQyxFQUFFLEVBQUU7TUFDcEMsSUFBTUUsSUFBRyxHQUFHTCxJQUFJLENBQUNHLEVBQUMsQ0FBQztNQUNuQixJQUFJRixlQUFjLENBQUNLLElBQUksQ0FBQ1YsTUFBTSxFQUFFUyxJQUFHLENBQUMsRUFBRTtRQUNwQ1YsaUNBQWlDLENBQUNDLE1BQU0sQ0FBQ1MsSUFBRyxDQUFDLENBQUM7TUFDaEQ7SUFDRjtFQUNGO0VBQ0EsT0FBT1QsTUFBTTtBQUNmO0FBSUEsU0FBU2dCLHdCQUF3QkEsQ0FBQ1AsR0FBVSxFQUFFVSxLQUFLLEVBQUU7RUFDbkQsTUFBTUMsS0FBSyxDQUNULGdDQUFnQyxHQUM5QlgsR0FBRyxHQUNILG9CQUFvQixHQUNwQlksSUFBSSxDQUFDQyxTQUFTLENBQUNILEtBQUssQ0FBQyxHQUNyQiwrQ0FBK0MsR0FDL0Msc0JBQ0osQ0FBQztBQUNIO0FBRUEsU0FBU04sUUFBUUEsQ0FBQ00sS0FBWSxFQUFFO0VBQzlCLE9BQU9BLEtBQUs7QUFDZDtBQUVBSSxNQUFNLENBQUNDLE9BQU8sR0FBR3pCLGlDQUFpQyIsImlnbm9yZUxpc3QiOltdfQ==