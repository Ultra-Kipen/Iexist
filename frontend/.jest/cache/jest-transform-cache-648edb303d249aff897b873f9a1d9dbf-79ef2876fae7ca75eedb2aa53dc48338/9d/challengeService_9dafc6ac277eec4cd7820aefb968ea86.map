{"version":3,"names":["_client","_interopRequireDefault","require","challengeService","createChallenge","_createChallenge","_asyncToGenerator2","default","data","apiClient","post","_x","apply","arguments","getChallenges","_getChallenges","params","get","_x2","getChallengeDetails","_getChallengeDetails","challengeId","_x3","participateInChallenge","_participateInChallenge","_x4","leaveChallenge","_leaveChallenge","delete","_x5","updateChallengeProgress","_updateChallengeProgress","_x6","_x7","_default","exports"],"sources":["challengeService.ts"],"sourcesContent":["// src/services/api/challengeService.ts\r\n\r\nimport apiClient from './client';\r\n\r\nexport interface ChallengeCreateData {\r\n  title: string;\r\n  description?: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  is_public?: boolean;\r\n  max_participants?: number;\r\n}\r\n\r\nexport interface ChallengeProgressData {\r\n  emotion_id: number;\r\n  progress_note?: string;\r\n}\r\n\r\nconst challengeService = {\r\n  createChallenge: async (data: ChallengeCreateData) => {\r\n    return await apiClient.post('/challenges', data);\r\n  },\r\n  \r\n  getChallenges: async (params?: { \r\n    page?: number; \r\n    limit?: number; \r\n    status?: 'active' | 'completed' | 'upcoming';\r\n    sort_by?: 'start_date' | 'participant_count' | 'created_at';\r\n    order?: 'asc' | 'desc';\r\n  }) => {\r\n    return await apiClient.get('/challenges', { params });\r\n  },\r\n  \r\n  getChallengeDetails: async (challengeId: number) => {\r\n    return await apiClient.get(`/challenges/${challengeId}`);\r\n  },\r\n  \r\n  participateInChallenge: async (challengeId: number) => {\r\n    return await apiClient.post(`/challenges/${challengeId}/participate`);\r\n  },\r\n  \r\n  leaveChallenge: async (challengeId: number) => {\r\n    return await apiClient.delete(`/challenges/${challengeId}/participate`);\r\n  },\r\n  \r\n  updateChallengeProgress: async (challengeId: number, data: ChallengeProgressData) => {\r\n    return await apiClient.post(`/challenges/${challengeId}/progress`, data);\r\n  }\r\n};\r\n\r\nexport default challengeService;"],"mappings":";;;;;;AAEA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AAgBA,IAAMC,gBAAgB,GAAG;EACvBC,eAAe;IAAA,IAAAC,gBAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAE,WAAOC,IAAyB,EAAK;MACpD,aAAaC,eAAS,CAACC,IAAI,CAAC,aAAa,EAAEF,IAAI,CAAC;IAClD,CAAC;IAAA,SAFDJ,eAAeA,CAAAO,EAAA;MAAA,OAAAN,gBAAA,CAAAO,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAfT,eAAe;EAAA,GAEd;EAEDU,aAAa;IAAA,IAAAC,cAAA,OAAAT,kBAAA,CAAAC,OAAA,EAAE,WAAOS,MAMrB,EAAK;MACJ,aAAaP,eAAS,CAACQ,GAAG,CAAC,aAAa,EAAE;QAAED,MAAM,EAANA;MAAO,CAAC,CAAC;IACvD,CAAC;IAAA,SARDF,aAAaA,CAAAI,GAAA;MAAA,OAAAH,cAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAbC,aAAa;EAAA,GAQZ;EAEDK,mBAAmB;IAAA,IAAAC,oBAAA,OAAAd,kBAAA,CAAAC,OAAA,EAAE,WAAOc,WAAmB,EAAK;MAClD,aAAaZ,eAAS,CAACQ,GAAG,CAAC,eAAeI,WAAW,EAAE,CAAC;IAC1D,CAAC;IAAA,SAFDF,mBAAmBA,CAAAG,GAAA;MAAA,OAAAF,oBAAA,CAAAR,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAnBM,mBAAmB;EAAA,GAElB;EAEDI,sBAAsB;IAAA,IAAAC,uBAAA,OAAAlB,kBAAA,CAAAC,OAAA,EAAE,WAAOc,WAAmB,EAAK;MACrD,aAAaZ,eAAS,CAACC,IAAI,CAAC,eAAeW,WAAW,cAAc,CAAC;IACvE,CAAC;IAAA,SAFDE,sBAAsBA,CAAAE,GAAA;MAAA,OAAAD,uBAAA,CAAAZ,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAtBU,sBAAsB;EAAA,GAErB;EAEDG,cAAc;IAAA,IAAAC,eAAA,OAAArB,kBAAA,CAAAC,OAAA,EAAE,WAAOc,WAAmB,EAAK;MAC7C,aAAaZ,eAAS,CAACmB,MAAM,CAAC,eAAeP,WAAW,cAAc,CAAC;IACzE,CAAC;IAAA,SAFDK,cAAcA,CAAAG,GAAA;MAAA,OAAAF,eAAA,CAAAf,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAda,cAAc;EAAA,GAEb;EAEDI,uBAAuB;IAAA,IAAAC,wBAAA,OAAAzB,kBAAA,CAAAC,OAAA,EAAE,WAAOc,WAAmB,EAAEb,IAA2B,EAAK;MACnF,aAAaC,eAAS,CAACC,IAAI,CAAC,eAAeW,WAAW,WAAW,EAAEb,IAAI,CAAC;IAC1E,CAAC;IAAA,SAFDsB,uBAAuBA,CAAAE,GAAA,EAAAC,GAAA;MAAA,OAAAF,wBAAA,CAAAnB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAvBiB,uBAAuB;EAAA;AAGzB,CAAC;AAAC,IAAAI,QAAA,GAAAC,OAAA,CAAA5B,OAAA,GAEaJ,gBAAgB","ignoreList":[]}