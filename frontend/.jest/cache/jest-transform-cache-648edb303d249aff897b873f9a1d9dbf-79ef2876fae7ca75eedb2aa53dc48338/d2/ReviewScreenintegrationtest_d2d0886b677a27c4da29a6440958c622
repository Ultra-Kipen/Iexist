e24630f06848b6c71ab3c01259a77c9f
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        background: '#fff'
      }
    }),
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Text: 'Text'
  };
});
_getJestObj().mock("../../../src/screens/ReviewScreen", function () {
  return jest.fn(function () {
    return null;
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _reactNative2 = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 통합 테스트', function () {
  beforeEach(function () {
    var mockImplementation = function mockImplementation() {
      return (0, _jsxRuntime.jsxs)(_reactNative2.ScrollView, {
        style: {
          flex: 1,
          padding: 16
        },
        testID: "scrollView",
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.SegmentedButtons, {
          testID: "segmentedButtons",
          value: "weekly",
          onValueChange: function onValueChange() {},
          buttons: [{
            value: 'weekly',
            label: '주간'
          }, {
            value: 'monthly',
            label: '월간'
          }]
        }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
          style: {
            flexDirection: 'row',
            flexWrap: 'wrap',
            justifyContent: 'space-between'
          },
          testID: "imageGrid",
          children: Array(6).fill(0).map(function (_, index) {
            return (0, _jsxRuntime.jsx)(_reactNativePaper.Card, {
              style: {
                width: '48%',
                marginBottom: 16
              },
              testID: "card",
              children: (0, _jsxRuntime.jsx)(_reactNative2.View, {})
            }, index);
          })
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          testID: "graphButton",
          onPress: function onPress() {
            return console.log('Show emotion graph');
          },
          children: "\uAC10\uC815 \uBCC0\uD654 \uADF8\uB798\uD504 \uBCF4\uAE30"
        })]
      });
    };
    var ReviewScreenMock = require("../../../src/screens/ReviewScreen").default;
    ReviewScreenMock.mockImplementation(mockImplementation);
  });
  it('컴포넌트가 네비게이션 환경에서 렌더링 되어야 함', function () {
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    }).not.toThrow();
  });
  it('모든 주요 UI 요소가 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render.getByTestId,
      getAllByTestId = _render.getAllByTestId;
    expect(getByTestId('scrollView')).toBeTruthy();
    expect(getByTestId('segmentedButtons')).toBeTruthy();
    expect(getByTestId('imageGrid')).toBeTruthy();
    expect(getAllByTestId('card').length).toBe(6);
    expect(getByTestId('graphButton')).toBeTruthy();
  });
  it('기간 선택 버튼이 존재하고 상태를 관리해야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render2.getByTestId;
    var segmentedButtons = getByTestId('segmentedButtons');
    expect(segmentedButtons.props.value).toBe('weekly');
    expect(typeof segmentedButtons.props.onValueChange).toBe('function');
  });
  it('이미지 그리드가 View 컴포넌트 내에 존재해야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render3.getByTestId;
    var imageGridView = getByTestId('imageGrid');
    expect(imageGridView).toBeTruthy();
    expect(imageGridView.props.style).toEqual(expect.objectContaining({
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    }));
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getAllByTestId = _render4.getAllByTestId;
    var cards = getAllByTestId('card');
    expect(cards.length).toBe(6);
  });
  it('감정 변화 그래프 버튼이 클릭되면 콘솔 로그가 출력되어야 함', function () {
    var consoleSpy = jest.spyOn(console, 'log');
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render5.getByTestId;
    var graphButton = getByTestId('graphButton');
    graphButton.props.onPress();
    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');
    consoleSpy.mockRestore();
  });
  it('스타일이 올바르게 적용되어야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render6.getByTestId,
      getAllByTestId = _render6.getAllByTestId;
    var scrollView = getByTestId('scrollView');
    expect(scrollView.props.style).toEqual(expect.objectContaining({
      flex: 1,
      padding: 16
    }));
    var imageGridView = getByTestId('imageGrid');
    expect(imageGridView.props.style).toEqual(expect.objectContaining({
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'space-between'
    }));
    var cards = getAllByTestId('card');
    if (cards.length > 0) {
      expect(cards[0].props.style).toEqual(expect.objectContaining({
        width: '48%',
        marginBottom: 16
      }));
    }
  });
  it('SegmentedButtons의 두 옵션이 주간과 월간으로 표시되어야 함', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render7.getByTestId;
    var segmentedButtons = getByTestId('segmentedButtons');
    expect(segmentedButtons.props.buttons).toEqual([{
      value: 'weekly',
      label: '주간'
    }, {
      value: 'monthly',
      label: '월간'
    }]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,