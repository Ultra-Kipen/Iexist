{"version":3,"names":["_getJestObj","mock","useTheme","jest","fn","mockReturnValue","colors","primary","background","SegmentedButtons","Card","Button","Text","_interopRequireDefault","require","_react","_reactNative","_ReviewScreen","_reactNative2","_reactNativePaper","_jsxRuntime","_require","describe","beforeEach","mockImplementation","jsxs","ScrollView","style","flex","padding","testID","children","jsx","value","onValueChange","buttons","label","View","flexDirection","flexWrap","justifyContent","Array","fill","map","_","index","width","marginBottom","onPress","console","log","ReviewScreenMock","default","it","expect","render","not","toThrow","_render","getByTestId","getAllByTestId","toBeTruthy","length","toBe","_render2","segmentedButtons","props","_render3","imageGridView","toEqual","objectContaining","_render4","cards","consoleSpy","spyOn","_render5","graphButton","toHaveBeenCalledWith","mockRestore","_render6","scrollView","_render7"],"sources":["ReviewScreen.integration.test.tsx"],"sourcesContent":["// root/frontend/tests/integration/screens/ReviewScreen.integration.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport ReviewScreen from '../../../src/screens/ReviewScreen';\r\nimport { View, ScrollView } from 'react-native';\r\nimport { SegmentedButtons, Card, Button } from 'react-native-paper';\r\n\r\n// 간단하게 paper 컴포넌트 모킹\r\njest.mock('react-native-paper', () => {\r\n  return {\r\n    useTheme: jest.fn().mockReturnValue({\r\n      colors: {\r\n        primary: '#000',\r\n        background: '#fff',\r\n      }\r\n    }),\r\n    SegmentedButtons: 'SegmentedButtons',\r\n    Card: 'Card',\r\n    Button: 'Button',\r\n    Text: 'Text',\r\n  };\r\n});\r\n\r\n// 테스트 중인 모듈 전체 모킹\r\njest.mock('../../../src/screens/ReviewScreen', () => jest.fn(() => null));\r\n\r\ndescribe('ReviewScreen 통합 테스트', () => {\r\n  // 각 테스트 전에 모킹을 설정\r\n  beforeEach(() => {\r\n    // 모킹된 구현 설정\r\n    const mockImplementation = () => (\r\n      <ScrollView style={{ flex: 1, padding: 16 }} testID=\"scrollView\">\r\n        <SegmentedButtons\r\n          testID=\"segmentedButtons\"\r\n          value=\"weekly\"\r\n          onValueChange={() => {}}\r\n          buttons={[\r\n            { value: 'weekly', label: '주간' },\r\n            { value: 'monthly', label: '월간' },\r\n          ]}\r\n        />\r\n        <View \r\n          style={{ \r\n            flexDirection: 'row', \r\n            flexWrap: 'wrap', \r\n            justifyContent: 'space-between' \r\n          }}\r\n          testID=\"imageGrid\"\r\n        >\r\n          {Array(6).fill(0).map((_, index) => (\r\n            <Card key={index} style={{ width: '48%', marginBottom: 16 }} testID=\"card\">\r\n              <View />\r\n            </Card>\r\n          ))}\r\n        </View>\r\n        <Button \r\n          testID=\"graphButton\" \r\n          onPress={() => console.log('Show emotion graph')}\r\n        >\r\n          감정 변화 그래프 보기\r\n        </Button>\r\n      </ScrollView>\r\n    );\r\n    \r\n    // 모킹된 컴포넌트 구현 설정\r\n    const ReviewScreenMock = require('../../../src/screens/ReviewScreen').default;\r\n    ReviewScreenMock.mockImplementation(mockImplementation);\r\n  });\r\n\r\n  it('컴포넌트가 네비게이션 환경에서 렌더링 되어야 함', () => {\r\n    expect(() => render(<ReviewScreen />)).not.toThrow();\r\n  });\r\n  \r\n  it('모든 주요 UI 요소가 렌더링되어야 함', () => {\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 주요 컴포넌트들이 렌더링되었는지 확인\r\n    expect(getByTestId('scrollView')).toBeTruthy();\r\n    expect(getByTestId('segmentedButtons')).toBeTruthy();\r\n    expect(getByTestId('imageGrid')).toBeTruthy();\r\n    expect(getAllByTestId('card').length).toBe(6);\r\n    expect(getByTestId('graphButton')).toBeTruthy();\r\n  });\r\n  \r\n  it('기간 선택 버튼이 존재하고 상태를 관리해야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // SegmentedButtons 찾기\r\n    const segmentedButtons = getByTestId('segmentedButtons');\r\n    expect(segmentedButtons.props.value).toBe('weekly');\r\n    \r\n    // 상태 변경 검증 대신 onValueChange 함수가 존재하는지만 확인\r\n    expect(typeof segmentedButtons.props.onValueChange).toBe('function');\r\n  });\r\n  \r\n  it('이미지 그리드가 View 컴포넌트 내에 존재해야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 이미지 그리드 컴포넌트 찾기\r\n    const imageGridView = getByTestId('imageGrid');\r\n    \r\n    expect(imageGridView).toBeTruthy();\r\n    expect(imageGridView.props.style).toEqual(expect.objectContaining({\r\n      flexDirection: 'row',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-between',\r\n    }));\r\n    \r\n    // 이미지 그리드 내의 Card 컴포넌트 확인\r\n    const { getAllByTestId } = render(<ReviewScreen />);\r\n    const cards = getAllByTestId('card');\r\n    expect(cards.length).toBe(6);\r\n  });\r\n  \r\n  it('감정 변화 그래프 버튼이 클릭되면 콘솔 로그가 출력되어야 함', () => {\r\n    const consoleSpy = jest.spyOn(console, 'log');\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 버튼 찾기\r\n    const graphButton = getByTestId('graphButton');\r\n    \r\n    // 버튼 클릭\r\n    graphButton.props.onPress();\r\n    \r\n    // 콘솔 로그 확인\r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n    \r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('스타일이 올바르게 적용되어야 함', () => {\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    // ScrollView에 스타일이 적용되었는지 확인\r\n    const scrollView = getByTestId('scrollView');\r\n    expect(scrollView.props.style).toEqual(expect.objectContaining({\r\n      flex: 1,\r\n      padding: 16,\r\n    }));\r\n    \r\n    // 이미지 그리드 스타일 확인\r\n    const imageGridView = getByTestId('imageGrid');\r\n    expect(imageGridView.props.style).toEqual(expect.objectContaining({\r\n      flexDirection: 'row',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-between',\r\n    }));\r\n    \r\n    // 카드 스타일 확인\r\n    const cards = getAllByTestId('card');\r\n    if (cards.length > 0) {\r\n      expect(cards[0].props.style).toEqual(expect.objectContaining({\r\n        width: '48%',\r\n        marginBottom: 16,\r\n      }));\r\n    }\r\n  });\r\n  \r\n  it('SegmentedButtons의 두 옵션이 주간과 월간으로 표시되어야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    const segmentedButtons = getByTestId('segmentedButtons');\r\n    expect(segmentedButtons.props.buttons).toEqual([\r\n      { value: 'weekly', label: '주간' },\r\n      { value: 'monthly', label: '월간' },\r\n    ]);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}