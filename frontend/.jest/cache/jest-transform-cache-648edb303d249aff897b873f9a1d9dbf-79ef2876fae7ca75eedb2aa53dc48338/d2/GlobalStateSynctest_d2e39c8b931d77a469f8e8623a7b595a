0642d4e168cb7821847b7336ce48b8e8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var StateContext = _react.default.createContext({
  count: 0,
  increment: function increment() {},
  decrement: function decrement() {}
});
var StateProvider = function StateProvider(_ref) {
  var children = _ref.children;
  var _React$useState = _react.default.useState(0),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    count = _React$useState2[0],
    setCount = _React$useState2[1];
  var increment = function increment() {
    return setCount(count + 1);
  };
  var decrement = function decrement() {
    return setCount(count - 1);
  };
  return (0, _jsxRuntime.jsx)(StateContext.Provider, {
    value: {
      count: count,
      increment: increment,
      decrement: decrement
    },
    children: children
  });
};
var CountDisplay = function CountDisplay() {
  var _React$useContext = _react.default.useContext(StateContext),
    count = _React$useContext.count;
  return (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
    testID: "count-display",
    children: ["Count: ", count]
  });
};
var CountControls = function CountControls() {
  var _React$useContext2 = _react.default.useContext(StateContext),
    increment = _React$useContext2.increment,
    decrement = _React$useContext2.decrement;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "\uC99D\uAC00",
      onPress: increment,
      testID: "increment-button"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "\uAC10\uC18C",
      onPress: decrement,
      testID: "decrement-button"
    })]
  });
};
var TestApp = function TestApp() {
  return (0, _jsxRuntime.jsx)(StateProvider, {
    children: (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      children: [(0, _jsxRuntime.jsx)(CountDisplay, {}), (0, _jsxRuntime.jsx)(CountControls, {})]
    })
  });
};
describe('전역 상태 동기화 테스트', function () {
  test('상태가 여러 컴포넌트 간에 동기화되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestApp, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('count-display').props.children).toEqual(['Count: ', 0]);
    _reactNative.fireEvent.press(getByTestId('increment-button'));
    expect(getByTestId('count-display').props.children).toEqual(['Count: ', 1]);
    _reactNative.fireEvent.press(getByTestId('increment-button'));
    expect(getByTestId('count-display').props.children).toEqual(['Count: ', 2]);
    _reactNative.fireEvent.press(getByTestId('decrement-button'));
    expect(getByTestId('count-display').props.children).toEqual(['Count: ', 1]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfanN4UnVudGltZSIsIlN0YXRlQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsImNvdW50IiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiU3RhdGVQcm92aWRlciIsIl9yZWYiLCJjaGlsZHJlbiIsIl9SZWFjdCR1c2VTdGF0ZSIsInVzZVN0YXRlIiwiX1JlYWN0JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJzZXRDb3VudCIsImpzeCIsIlByb3ZpZGVyIiwidmFsdWUiLCJDb3VudERpc3BsYXkiLCJfUmVhY3QkdXNlQ29udGV4dCIsInVzZUNvbnRleHQiLCJqc3hzIiwiVGV4dCIsInRlc3RJRCIsIkNvdW50Q29udHJvbHMiLCJfUmVhY3QkdXNlQ29udGV4dDIiLCJWaWV3IiwiQnV0dG9uIiwidGl0bGUiLCJvblByZXNzIiwiVGVzdEFwcCIsImRlc2NyaWJlIiwidGVzdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInByb3BzIiwidG9FcXVhbCIsImZpcmVFdmVudCIsInByZXNzIl0sInNvdXJjZXMiOlsiR2xvYmFsU3RhdGVTeW5jLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBUZXh0LCBCdXR0b24sIFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuLy8g7KCE7JetIOyDge2DnCDsu6jthY3siqTtirhcclxuY29uc3QgU3RhdGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7XHJcbiAgY291bnQ6IDAsXHJcbiAgaW5jcmVtZW50OiAoKSA9PiB7fSxcclxuICBkZWNyZW1lbnQ6ICgpID0+IHt9LFxyXG59KTtcclxuXHJcbi8vIOyDge2DnCDsoJzqs7XsnpAg7Lu07Y+s64SM7Yq4XHJcbmNvbnN0IFN0YXRlUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkgPT4ge1xyXG4gIGNvbnN0IFtjb3VudCwgc2V0Q291bnRdID0gUmVhY3QudXNlU3RhdGUoMCk7XHJcbiAgXHJcbiAgY29uc3QgaW5jcmVtZW50ID0gKCkgPT4gc2V0Q291bnQoY291bnQgKyAxKTtcclxuICBjb25zdCBkZWNyZW1lbnQgPSAoKSA9PiBzZXRDb3VudChjb3VudCAtIDEpO1xyXG4gIFxyXG4gIHJldHVybiAoXHJcbiAgICA8U3RhdGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGNvdW50LCBpbmNyZW1lbnQsIGRlY3JlbWVudCB9fT5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9TdGF0ZUNvbnRleHQuUHJvdmlkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbi8vIOyDge2DnOulvCDtkZzsi5ztlZjripQg7Lu07Y+s64SM7Yq4XHJcbmNvbnN0IENvdW50RGlzcGxheSA9ICgpID0+IHtcclxuICBjb25zdCB7IGNvdW50IH0gPSBSZWFjdC51c2VDb250ZXh0KFN0YXRlQ29udGV4dCk7XHJcbiAgcmV0dXJuIDxUZXh0IHRlc3RJRD1cImNvdW50LWRpc3BsYXlcIj5Db3VudDoge2NvdW50fTwvVGV4dD47XHJcbn07XHJcblxyXG4vLyDsg4Htg5zrpbwg67OA6rK97ZWY64qUIOy7tO2PrOuEjO2KuFxyXG5jb25zdCBDb3VudENvbnRyb2xzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgaW5jcmVtZW50LCBkZWNyZW1lbnQgfSA9IFJlYWN0LnVzZUNvbnRleHQoU3RhdGVDb250ZXh0KTtcclxuICByZXR1cm4gKFxyXG4gICAgPFZpZXc+XHJcbiAgICAgIDxCdXR0b24gdGl0bGU9XCLspp3qsIBcIiBvblByZXNzPXtpbmNyZW1lbnR9IHRlc3RJRD1cImluY3JlbWVudC1idXR0b25cIiAvPlxyXG4gICAgICA8QnV0dG9uIHRpdGxlPVwi6rCQ7IaMXCIgb25QcmVzcz17ZGVjcmVtZW50fSB0ZXN0SUQ9XCJkZWNyZW1lbnQtYnV0dG9uXCIgLz5cclxuICAgIDwvVmlldz5cclxuICApO1xyXG59O1xyXG5cclxuLy8g65GQIOy7tO2PrOuEjO2KuOulvCDrtoTrpqztlZjsl6wg66CM642U66eB7ZWY64qUIOyVsVxyXG5jb25zdCBUZXN0QXBwID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8U3RhdGVQcm92aWRlcj5cclxuICAgICAgPFZpZXc+XHJcbiAgICAgICAgPENvdW50RGlzcGxheSAvPlxyXG4gICAgICAgIDxDb3VudENvbnRyb2xzIC8+XHJcbiAgICAgIDwvVmlldz5cclxuICAgIDwvU3RhdGVQcm92aWRlcj5cclxuICApO1xyXG59O1xyXG5cclxuZGVzY3JpYmUoJ+yghOyXrSDsg4Htg5wg64+Z6riw7ZmUIO2FjOyKpO2KuCcsICgpID0+IHtcclxuICB0ZXN0KCfsg4Htg5zqsIAg7Jes65+sIOy7tO2PrOuEjO2KuCDqsITsl5Ag64+Z6riw7ZmU65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcig8VGVzdEFwcCAvPik7XHJcbiAgICBcclxuICAgIC8vIOy0iOq4sCDsg4Htg5wg7ZmV7J24XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvdW50LWRpc3BsYXknKS5wcm9wcy5jaGlsZHJlbikudG9FcXVhbChbJ0NvdW50OiAnLCAwXSk7XHJcbiAgICBcclxuICAgIC8vIOymneqwgCDrsoTtirwg7YG066atXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2luY3JlbWVudC1idXR0b24nKSk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NvdW50LWRpc3BsYXknKS5wcm9wcy5jaGlsZHJlbikudG9FcXVhbChbJ0NvdW50OiAnLCAxXSk7XHJcbiAgICBcclxuICAgIC8vIOuLpOyLnCDspp3qsIAg67KE7Yq8IO2BtOumrVxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdpbmNyZW1lbnQtYnV0dG9uJykpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjb3VudC1kaXNwbGF5JykucHJvcHMuY2hpbGRyZW4pLnRvRXF1YWwoWydDb3VudDogJywgMl0pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDshowg67KE7Yq8IO2BtOumrVxyXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkZWNyZW1lbnQtYnV0dG9uJykpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdjb3VudC1kaXNwbGF5JykucHJvcHMuY2hpbGRyZW4pLnRvRXF1YWwoWydDb3VudDogJywgMV0pO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsYUFBQSxHQUFBRixPQUFBO0FBQWtELElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUdsRCxJQUFNSSxZQUFZLEdBQUdDLGNBQUssQ0FBQ0MsYUFBYSxDQUFDO0VBQ3ZDQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxTQUFTLEVBQUUsU0FBWEEsU0FBU0EsQ0FBQSxFQUFRLENBQUMsQ0FBQztFQUNuQkMsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUEsRUFBUSxDQUFDO0FBQ3BCLENBQUMsQ0FBQztBQUdGLElBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBYUEsQ0FBQUMsSUFBQSxFQUFvRDtFQUFBLElBQTlDQyxRQUFRLEdBQUFELElBQUEsQ0FBUkMsUUFBUTtFQUMvQixJQUFBQyxlQUFBLEdBQTBCUixjQUFLLENBQUNTLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFBQUMsZ0JBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBLEVBQUFKLGVBQUE7SUFBcENOLEtB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