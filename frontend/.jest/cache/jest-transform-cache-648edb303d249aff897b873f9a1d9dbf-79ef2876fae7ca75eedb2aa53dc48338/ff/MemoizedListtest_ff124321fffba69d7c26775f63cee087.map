{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_MemoizedList","_jsxRuntime","describe","mockOnPress","jest","fn","mockOnLike","mockOnComment","defaultProps","title","content","onPress","onLike","onComment","beforeEach","clearAllMocks","it","_render","render","jsx","MemoizedCard","getByText","expect","toBeTruthy","_render2","Object","assign","fireEvent","press","toHaveBeenCalledTimes","_render3","authorName","timestamp","_render4","likesCount","commentsCount","_render5","_render6","_render7","isLiked","likeText","props","style","toEqual","arrayContaining","objectContaining","color","fontWeight","_render8","not","toHaveBeenCalled"],"sources":["MemoizedList.test.tsx"],"sourcesContent":["// tests/components/optimized/MemoizedList.test.tsx\r\n\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { MemoizedCard } from '../../../src/components/optimized/MemoizedList';\r\n\r\ndescribe('MemoizedCard Component', () => {\r\n  const mockOnPress = jest.fn();\r\n  const mockOnLike = jest.fn();\r\n  const mockOnComment = jest.fn();\r\n  \r\n  const defaultProps = {\r\n    title: 'Test Title',\r\n    content: 'Test content for the card',\r\n    onPress: mockOnPress,\r\n    onLike: mockOnLike,\r\n    onComment: mockOnComment,\r\n  };\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders correctly with minimal props', () => {\r\n    const { getByText } = render(\r\n      <MemoizedCard \r\n        title={defaultProps.title} \r\n        content={defaultProps.content} \r\n      />\r\n    );\r\n    \r\n    expect(getByText('Test Title')).toBeTruthy();\r\n    expect(getByText('Test content for the card')).toBeTruthy();\r\n  });\r\n\r\n  it('calls onPress when card is pressed', () => {\r\n    const { getByText } = render(<MemoizedCard {...defaultProps} />);\r\n    \r\n    fireEvent.press(getByText('Test Title'));\r\n    expect(mockOnPress).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('displays author information when provided', () => {\r\n    const { getByText } = render(\r\n      <MemoizedCard \r\n        {...defaultProps}\r\n        authorName=\"John Doe\" \r\n        timestamp=\"2 hours ago\" \r\n      />\r\n    );\r\n    \r\n    expect(getByText('John Doe')).toBeTruthy();\r\n    expect(getByText('2 hours ago')).toBeTruthy();\r\n  });\r\n\r\n  it('displays correct stats count', () => {\r\n    const { getByText } = render(\r\n      <MemoizedCard \r\n        {...defaultProps}\r\n        likesCount={10}\r\n        commentsCount={5}\r\n      />\r\n    );\r\n    \r\n    expect(getByText('좋아요 10')).toBeTruthy();\r\n    expect(getByText('댓글 5')).toBeTruthy();\r\n  });\r\n\r\n  it('calls onLike when like button is pressed', () => {\r\n    const { getByText } = render(<MemoizedCard {...defaultProps} />);\r\n    \r\n    fireEvent.press(getByText('좋아요 0'));\r\n    expect(mockOnLike).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('calls onComment when comment button is pressed', () => {\r\n    const { getByText } = render(<MemoizedCard {...defaultProps} />);\r\n    \r\n    fireEvent.press(getByText('댓글 0'));\r\n    expect(mockOnComment).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('applies liked style when isLiked is true', () => {\r\n    const { getByText } = render(\r\n      <MemoizedCard \r\n        {...defaultProps}\r\n        isLiked={true} \r\n      />\r\n    );\r\n    \r\n    // Note: In a real test, you would check style properties more precisely\r\n    // This is a simplified version\r\n    const likeText = getByText('좋아요 0');\r\n    expect(likeText.props.style).toEqual(\r\n      expect.arrayContaining([\r\n        expect.objectContaining({\r\n          color: '#3b82f6',\r\n          fontWeight: 'bold',\r\n        })\r\n      ])\r\n    );\r\n  });\r\n  \r\n  it('does not trigger onLike when onLike prop is not provided', () => {\r\n    const { getByText } = render(\r\n      <MemoizedCard \r\n        title={defaultProps.title} \r\n        content={defaultProps.content} \r\n        // omitting onLike\r\n      />\r\n    );\r\n    \r\n    fireEvent.press(getByText('좋아요 0'));\r\n    expect(mockOnLike).not.toHaveBeenCalled();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}