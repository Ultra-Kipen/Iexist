529e7aab6afa1720a05eab211ee99af1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPathFromState = getPathFromState;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var queryString = _interopRequireWildcard(require("query-string"));
var _getPatternParts = require("./getPatternParts.js");
var _validatePathConfig = require("./validatePathConfig.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _getActiveRoute = function getActiveRoute(state) {
  var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];
  if (route.state) {
    return _getActiveRoute(route.state);
  }
  return route;
};
var cachedNormalizedConfigs = new WeakMap();
var getNormalizedConfigs = function getNormalizedConfigs(options) {
  if (!(options != null && options.screens)) return {};
  var cached = cachedNormalizedConfigs.get(options == null ? void 0 : options.screens);
  if (cached) return cached;
  var normalizedConfigs = createNormalizedConfigs(options.screens);
  cachedNormalizedConfigs.set(options.screens, normalizedConfigs);
  return normalizedConfigs;
};
function getPathFromState(state, options) {
  if (state == null) {
    throw Error(`Got '${String(state)}' for the navigation state. You must pass a valid state object.`);
  }
  if (options) {
    (0, _validatePathConfig.validatePathConfig)(options);
  }
  var configs = getNormalizedConfigs(options);
  var path = '/';
  var current = state;
  var allParams = {};
  var _loop = function _loop() {
    var index = typeof current.index === 'number' ? current.index : 0;
    var route = current.routes[index];
    var parts;
    var focusedParams;
    var currentOptions = configs;
    var focusedRoute = _getActiveRoute(state);
    var nestedRouteNames = [];
    var hasNext = true;
    var _loop2 = function _loop2() {
      parts = currentOptions[route.name].parts;
      nestedRouteNames.push(route.name);
      if (route.params) {
        var _parts2;
        var _options = currentOptions[route.name];
        var currentParams = Object.fromEntries(Object.entries(route.params).map(function (_ref4) {
          var _options$stringify$ke, _options$stringify;
          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
            key = _ref5[0],
            value = _ref5[1];
          if (value === undefined) {
            if (_options) {
              var _options$parts;
              var optional = (_options$parts = _options.parts) == null || (_options$parts = _options$parts.find(function (part) {
                return part.param === key;
              })) == null ? void 0 : _options$parts.optional;
              if (optional) {
                return null;
              }
            } else {
              return null;
            }
          }
          var stringify = (_options$stringify$ke = _options == null || (_options$stringify = _options.stringify) == null ? void 0 : _options$stringify[key]) != null ? _options$stringify$ke : String;
          return [key, stringify(value)];
        }).filter(function (entry) {
          return entry != null;
        }));
        if ((_parts2 = parts) != null && _parts2.length) {
          Object.assign(allParams, currentParams);
        }
        if (focusedRoute === route) {
          var _parts3;
          focusedParams = Object.assign({}, currentParams);
          (_parts3 = parts) == null || _parts3.forEach(function (_ref6) {
            var param = _ref6.param;
            if (param) {
              if (focusedParams) {
                delete focusedParams[param];
              }
            }
          });
        }
      }
      if (!currentOptions[route.name].screens || route.state === undefined) {
        hasNext = false;
      } else {
        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;
        var nextRoute = route.state.routes[index];
        var nestedConfig = currentOptions[route.name].screens;
        if (nestedConfig && nextRoute.name in nestedConfig) {
          route = nextRoute;
          currentOptions = nestedConfig;
        } else {
          hasNext = false;
        }
      }
    };
    while (route.name in currentOptions && hasNext) {
      _loop2();
    }
    if (currentOptions[route.name] !== undefined) {
      var _parts;
      path += (_parts = parts) == null ? void 0 : _parts.map(function (_ref) {
        var segment = _ref.segment,
          param = _ref.param,
          optional = _ref.optional;
        if (segment === '*') {
          return route.name;
        }
        if (param) {
          var value = allParams[param];
          if (value === undefined && optional) {
            return '';
          }
          return String(value).replace(/[^A-Za-z0-9\-._~!$&'()*+,;=:@]/g, function (char) {
            return encodeURIComponent(char);
          });
        }
        return encodeURIComponent(segment);
      }).join('/');
    } else {
      path += encodeURIComponent(route.name);
    }
    if (!focusedParams && focusedRoute.params) {
      focusedParams = Object.fromEntries(Object.entries(focusedRoute.params).map(function (_ref2) {
        var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          key = _ref3[0],
          value = _ref3[1];
        return [key, String(value)];
      }));
    }
    if (route.state) {
      path += '/';
    } else if (focusedParams) {
      for (var param in focusedParams) {
        if (focusedParams[param] === 'undefined') {
          delete focusedParams[param];
        }
      }
      var query = queryString.stringify(focusedParams, {
        sort: false
      });
      if (query) {
        path += `?${query}`;
      }
    }
    current = route.state;
  };
  while (current) {
    _loop();
  }
  if (options != null && options.path) {
    path = `${options.path}/${path}`;
  }
  path = path.replace(/\/+/g, '/');
  path = path.length > 1 ? path.replace(/\/$/, '') : path;
  if (!path.startsWith('/')) {
    path = `/${path}`;
  }
  return path;
}
var createConfigItem = function createConfigItem(config, parentParts) {
  if (typeof config === 'string') {
    var _parts4 = (0, _getPatternParts.getPatternParts)(config);
    if (parentParts) {
      return {
        parts: [].concat((0, _toConsumableArray2.default)(parentParts), (0, _toConsumableArray2.default)(_parts4))
      };
    }
    return {
      parts: _parts4
    };
  }
  if (config.exact && config.path === undefined) {
    throw new Error("A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.");
  }
  var parts = config.exact !== true ? [].concat((0, _toConsumableArray2.default)(parentParts || []), (0, _toConsumableArray2.default)(config.path ? (0, _getPatternParts.getPatternParts)(config.path) : [])) : config.path ? (0, _getPatternParts.getPatternParts)(config.path) : undefined;
  var screens = config.screens ? createNormalizedConfigs(config.screens, parts) : undefined;
  return {
    parts: parts,
    stringify: config.stringify,
    screens: screens
  };
};
var createNormalizedConfigs = function createNormalizedConfigs(options, parts) {
  return Object.fromEntries(Object.entries(options).map(function (_ref7) {
    var _ref8 = (0, _slicedToArray2.default)(_ref7, 2),
      name = _ref8[0],
      c = _ref8[1];
    var result = createConfigItem(c, parts);
    return [name, result];
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,