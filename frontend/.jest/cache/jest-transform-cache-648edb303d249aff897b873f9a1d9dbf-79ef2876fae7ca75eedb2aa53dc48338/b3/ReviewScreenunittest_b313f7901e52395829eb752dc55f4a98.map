{"version":3,"names":["_getJestObj","mock","SegmentedButtons","_ref","value","onValueChange","buttons","_jsxRuntime","jsx","children","map","button","onClick","label","Card","_ref2","style","Button","_ref3","onPress","Title","_ref4","Paragraph","_ref5","useTheme","colors","primary","background","CardComponent","_ref6","Cover","_ref7","source","src","uri","alt","Content","_ref8","__esModule","default","_interopRequireDefault","require","_react","_reactNative","_ReviewScreen","_require","jest","consoleLogSpy","spyOn","console","mockImplementation","describe","afterEach","mockClear","afterAll","mockRestore","it","_render","render","getByTestId","getAllByTestId","expect","getAttribute","toBe","cardImages","length","toBeTruthy","toBeGreaterThanOrEqual","_render2","segmentedButtons","monthlyButton","fireEvent","click","weeklyButton","_render3","graphButton","toHaveBeenCalledWith","_render4","titles","some","title","textContent","_render5","forEach","img","index","toContain","_render6","i","toHaveBeenCalledTimes"],"sources":["ReviewScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/tests/unit/screens/ReviewScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport ReviewScreen from '../../../src/screens/ReviewScreen';\r\n\r\n// 컴포넌트를 실제 동작에 가깝게 모킹\r\njest.mock('react-native-paper', () => {\r\n  return {\r\n    SegmentedButtons: ({ value, onValueChange, buttons }) => (\r\n      <div data-testid=\"segmented-buttons\" data-value={value}>\r\n        {buttons.map((button) => (\r\n          <button \r\n            key={button.value}\r\n            data-testid={`segment-${button.value}`}\r\n            onClick={() => onValueChange && onValueChange(button.value)}\r\n          >\r\n            {button.label}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    ),\r\n    Card: ({ children, style }) => <div data-testid=\"card\" style={style}>{children}</div>,\r\n    Button: ({ onPress, children }) => (\r\n      <button data-testid=\"graph-button\" onClick={onPress}>\r\n        {children}\r\n      </button>\r\n    ),\r\n    Title: ({ children }) => <h2 data-testid=\"title\">{children}</h2>,\r\n    Paragraph: ({ children }) => <p data-testid=\"paragraph\">{children}</p>,\r\n    useTheme: () => ({\r\n      colors: {\r\n        primary: '#000',\r\n        background: '#fff',\r\n      }\r\n    })\r\n  };\r\n});\r\n\r\n// Card 서브컴포넌트\r\njest.mock('react-native-paper/lib/commonjs/components/Card/Card', () => {\r\n  const CardComponent = ({ children, style }) => (\r\n    <div data-testid=\"card\" style={style}>{children}</div>\r\n  );\r\n  \r\n  CardComponent.Cover = ({ source }) => (\r\n    <img data-testid=\"card-image\" src={source?.uri || ''} alt=\"cover\" />\r\n  );\r\n  \r\n  CardComponent.Content = ({ children }) => (\r\n    <div data-testid=\"card-content\">{children}</div>\r\n  );\r\n  \r\n  return {\r\n    __esModule: true,\r\n    default: CardComponent,\r\n    Cover: CardComponent.Cover,\r\n    Content: CardComponent.Content,\r\n  };\r\n});\r\n\r\n// 콘솔 스파이 설정\r\nconst consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\ndescribe('ReviewScreen 단위 테스트', () => {\r\n  // 각 테스트 후 정리\r\n  afterEach(() => {\r\n    consoleLogSpy.mockClear();\r\n  });\r\n  \r\n  // 모든 테스트 후 정리\r\n  afterAll(() => {\r\n    consoleLogSpy.mockRestore();\r\n  });\r\n\r\n  it('컴포넌트가 초기 상태로 올바르게 렌더링되어야 함', () => {\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 세그먼트 버튼이 'weekly'로 초기화되었는지 확인\r\n    expect(getByTestId('segmented-buttons').getAttribute('data-value')).toBe('weekly');\r\n    \r\n    // 이미지 그리드가 6개 아이템을 가지고 있는지 확인\r\n    const cardImages = getAllByTestId('card-image');\r\n    expect(cardImages.length).toBe(6);\r\n    \r\n    // 그래프 버튼이 존재하는지 확인\r\n    expect(getByTestId('graph-button')).toBeTruthy();\r\n    \r\n    // 통계 카드가 존재하는지 확인\r\n    expect(getAllByTestId('card').length).toBeGreaterThanOrEqual(7); // 이미지 6개 + 통계 카드 1개\r\n  });\r\n\r\n  it('세그먼트 버튼 변경 시 period 상태가 올바르게 업데이트되어야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 초기 상태 확인\r\n    const segmentedButtons = getByTestId('segmented-buttons');\r\n    expect(segmentedButtons.getAttribute('data-value')).toBe('weekly');\r\n    \r\n    // 월간 세그먼트로 변경\r\n    const monthlyButton = getByTestId('segment-monthly');\r\n    fireEvent.click(monthlyButton);\r\n    \r\n    // 상태 변경 확인\r\n    expect(segmentedButtons.getAttribute('data-value')).toBe('monthly');\r\n    \r\n    // 주간 세그먼트로 다시 변경\r\n    const weeklyButton = getByTestId('segment-weekly');\r\n    fireEvent.click(weeklyButton);\r\n    \r\n    // 상태 변경 확인\r\n    expect(segmentedButtons.getAttribute('data-value')).toBe('weekly');\r\n  });\r\n\r\n  it('그래프 버튼 클릭 시 적절한 동작을 수행해야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 그래프 버튼 클릭\r\n    const graphButton = getByTestId('graph-button');\r\n    fireEvent.click(graphButton);\r\n    \r\n    // console.log 호출 확인\r\n    expect(consoleLogSpy).toHaveBeenCalledWith('Show emotion graph');\r\n  });\r\n\r\n  it('기간 변경 시 통계 카드 내용이 올바르게 업데이트되어야 함', () => {\r\n    const { getByTestId, getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 초기 상태 (주간)에서 통계 카드 확인\r\n    const titles = getAllByTestId('title');\r\n    expect(titles.some(title => title.textContent === '이번 주의 통계')).toBeTruthy();\r\n    \r\n    // 월간으로 변경\r\n    const monthlyButton = getByTestId('segment-monthly');\r\n    fireEvent.click(monthlyButton);\r\n    \r\n    // 변경 후 통계 카드 확인\r\n    expect(titles.some(title => title.textContent === '이번 달의 통계')).toBeTruthy();\r\n  });\r\n\r\n  it('이미지 카드가 올바른 수량과 속성으로 렌더링되어야 함', () => {\r\n    const { getAllByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 이미지 카드 확인\r\n    const cardImages = getAllByTestId('card-image');\r\n    expect(cardImages.length).toBe(6);\r\n    \r\n    // 이미지 소스 URL이 올바른 형식인지 확인\r\n    cardImages.forEach((img, index) => {\r\n      const src = img.getAttribute('src');\r\n      expect(src).toContain('https://picsum.photos/300?random=');\r\n    });\r\n  });\r\n\r\n  it('컴포넌트의 복잡한 상태 변화에도 안정적으로 동작해야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 빠르게 여러 번 토글하여 안정성 테스트\r\n    const weeklyButton = getByTestId('segment-weekly');\r\n    const monthlyButton = getByTestId('segment-monthly');\r\n    \r\n    for (let i = 0; i < 5; i++) {\r\n      fireEvent.click(monthlyButton);\r\n      fireEvent.click(weeklyButton);\r\n    }\r\n    \r\n    // 최종 상태 확인\r\n    expect(getByTestId('segmented-buttons').getAttribute('data-value')).toBe('weekly');\r\n    \r\n    // 그래프 버튼 여러 번 클릭\r\n    const graphButton = getByTestId('graph-button');\r\n    \r\n    for (let i = 0; i < 3; i++) {\r\n      fireEvent.click(graphButton);\r\n    }\r\n    \r\n    // console.log 호출 횟수 확인\r\n    expect(consoleLogSpy).toHaveBeenCalledTimes(3);\r\n  });\r\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE,YAAM;EACpC,OAAO;IACLC,gBAAgB,EAAE,SAAlBA,gBAAgBA,CAAAC,IAAA;MAAA,IAAKC,KAAK,GAAAD,IAAA,CAALC,KAAK;QAAEC,aAAa,GAAAF,IAAA,CAAbE,aAAa;QAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;MAAA,OAChD,IAAAC,WAAA,CAAAC,GAAA;QAAK,eAAY,mBAAmB;QAAC,cAAYJ,KAAM;QAAAK,QAAA,EACpDH,OAAO,CAACI,GAAG,CAAC,UAACC,MAAM;UAAA,OAClB,IAAAJ,WAAA,CAAAC,GAAA;YAEE,eAAa,WAAWG,MAAM,CAACP,KAAK,EAAG;YACvCQ,OAAO,EAAE,SAATA,OAAOA,CAAA;cAAA,OAAQP,aAAa,IAAIA,aAAa,CAACM,MAAM,CAACP,KAAK,CAAC;YAAA,CAAC;YAAAK,QAAA,EAE3DE,MAAM,CAACE;UAAK,GAJRF,MAAM,CAACP,KAKN,CAAC;QAAA,CACV;MAAC,CACC,CAAC;IAAA,CACP;IACDU,IAAI,EAAE,SAANA,IAAIA,CAAAC,KAAA;MAAA,IAAKN,QAAQ,GAAAM,KAAA,CAARN,QAAQ;QAAEO,KAAK,GAAAD,KAAA,CAALC,KAAK;MAAA,OAAO,IAAAT,WAAA,CAAAC,GAAA;QAAK,eAAY,MAAM;QAACQ,KAAK,EAAEA,KAAM;QAAAP,QAAA,EAAEA;MAAQ,CAAM,CAAC;IAAA;IACrFQ,MAAM,EAAE,SAARA,MAAMA,CAAAC,KAAA;MAAA,IAAKC,OAAO,GAAAD,KAAA,CAAPC,OAAO;QAAEV,QAAQ,GAAAS,KAAA,CAART,QAAQ;MAAA,OAC1B,IAAAF,WAAA,CAAAC,GAAA;QAAQ,eAAY,cAAc;QAACI,OAAO,EAAEO,OAAQ;QAAAV,QAAA,EACjDA;MAAQ,CACH,CAAC;IAAA,CACV;IACDW,KAAK,EAAE,SAAPA,KAAKA,CAAAC,KAAA;MAAA,IAAKZ,QAAQ,GAAAY,KAAA,CAARZ,QAAQ;MAAA,OAAO,IAAAF,WAAA,CAAAC,GAAA;QAAI,eAAY,OAAO;QAAAC,QAAA,EAAEA;MAAQ,CAAK,CAAC;IAAA;IAChEa,SAAS,EAAE,SAAXA,SAASA,CAAAC,KAAA;MAAA,IAAKd,QAAQ,GAAAc,KAAA,CAARd,QAAQ;MAAA,OAAO,IAAAF,WAAA,CAAAC,GAAA;QAAG,eAAY,WAAW;QAAAC,QAAA,EAAEA;MAAQ,CAAI,CAAC;IAAA;IACtEe,QAAQ,EAAE,SAAVA,QAAQA,CAAA;MAAA,OAAS;QACfC,MAAM,EAAE;UACNC,OAAO,EAAE,MAAM;UACfC,UAAU,EAAE;QACd;MACF,CAAC;IAAA;EACH,CAAC;AACH,CAAC,CAAC;AAGF3B,WAAA,GAAKC,IAAI,CAAC,sDAAsD,EAAE,YAAM;EACtE,IAAM2B,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,KAAA;IAAA,IAAMpB,QAAQ,GAAAoB,KAAA,CAARpB,QAAQ;MAAEO,KAAK,GAAAa,KAAA,CAALb,KAAK;IAAA,OACtC,IAAAT,WAAA,CAAAC,GAAA;MAAK,eAAY,MAAM;MAACQ,KAAK,EAAEA,KAAM;MAAAP,QAAA,EAAEA;IAAQ,CAAM,CAAC;EAAA,CACvD;EAEDmB,aAAa,CAACE,KAAK,GAAG,UAAAC,KAAA;IAAA,IAAGC,MAAM,GAAAD,KAAA,CAANC,MAAM;IAAA,OAC7B,IAAAzB,WAAA,CAAAC,GAAA;MAAK,eAAY,YAAY;MAACyB,GAAG,EAAE,CAAAD,MAAM,oBAANA,MAAM,CAAEE,GAAG,KAAI,EAAG;MAACC,GAAG,EAAC;IAAO,CAAE,CAAC;EAAA,CACrE;EAEDP,aAAa,CAACQ,OAAO,GAAG,UAAAC,KAAA;IAAA,IAAG5B,QAAQ,GAAA4B,KAAA,CAAR5B,QAAQ;IAAA,OACjC,IAAAF,WAAA,CAAAC,GAAA;MAAK,eAAY,cAAc;MAAAC,QAAA,EAAEA;IAAQ,CAAM,CAAC;EAAA,CACjD;EAED,OAAO;IACL6B,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAEX,aAAa;IACtBE,KAAK,EAAEF,aAAa,CAACE,KAAK;IAC1BM,OAAO,EAAER,aAAa,CAACQ;EACzB,CAAC;AACH,CAAC,CAAC;AAAC,IAAAI,sBAAA,GAAAC,OAAA;AAzDH,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAA6D,IAAAlC,WAAA,GAAAkC,OAAA;AAAA,SAAAzC,YAAA;EAAA,IAAA6C,QAAA,GAAAJ,OAAA;IAAAK,IAAA,GAAAD,QAAA,CAAAC,IAAA;EAAA9C,WAAA,YAAAA,YAAA;IAAA,OAAA8C,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AA0D7D,IAAMC,aAAa,GAAGD,IAAI,CAACE,KAAK,CAACC,OAAO,EAAE,KAAK,CAAC,CAACC,kBAAkB,CAAC,YAAM,CAAC,CAAC,CAAC;AAE7EC,QAAQ,CAAC,qBAAqB,EAAE,YAAM;EAEpCC,SAAS,CAAC,YAAM;IACdL,aAAa,CAACM,SAAS,CAAC,CAAC;EAC3B,CAAC,CAAC;EAGFC,QAAQ,CAAC,YAAM;IACbP,aAAa,CAACQ,WAAW,CAAC,CAAC;EAC7B,CAAC,CAAC;EAEFC,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACrC,IAAAC,OAAA,GAAwC,IAAAC,mBAAM,EAAC,IAAAnD,WAAA,CAAAC,GAAA,EAACoC,aAAA,CAAAL,OAAY,IAAE,CAAC,CAAC;MAAxDoB,WAAW,GAAAF,OAAA,CAAXE,WAAW;MAAEC,cAAc,GAAAH,OAAA,CAAdG,cAAc;IAGnCC,MAAM,CAACF,WAAW,CAAC,mBAAmB,CAAC,CAACG,YAAY,CAAC,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,QAAQ,CAAC;IAGlF,IAAMC,UAAU,GAAGJ,cAAc,CAAC,YAAY,CAAC;IAC/CC,MAAM,CAACG,UAAU,CAACC,MAAM,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;IAGjCF,MAAM,CAACF,WAAW,CAAC,cAAc,CAAC,CAAC,CAACO,UAAU,CAAC,CAAC;IAGhDL,MAAM,CAACD,cAAc,CAAC,MAAM,CAAC,CAACK,MAAM,CAAC,CAACE,sBAAsB,CAAC,CAAC,CAAC;EACjE,CAAC,CAAC;EAEFX,EAAE,CAAC,wCAAwC,EAAE,YAAM;IACjD,IAAAY,QAAA,GAAwB,IAAAV,mBAAM,EAAC,IAAAnD,WAAA,CAAAC,GAAA,EAACoC,aAAA,CAAAL,OAAY,IAAE,CAAC,CAAC;MAAxCoB,WAAW,GAAAS,QAAA,CAAXT,WAAW;IAGnB,IAAMU,gBAAgB,GAAGV,WAAW,CAAC,mBAAmB,CAAC;IACzDE,MAAM,CAACQ,gBAAgB,CAACP,YAAY,CAAC,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,QAAQ,CAAC;IAGlE,IAAMO,aAAa,GAAGX,WAAW,CAAC,iBAAiB,CAAC;IACpDY,sBAAS,CAACC,KAAK,CAACF,aAAa,CAAC;IAG9BT,MAAM,CAACQ,gBAAgB,CAACP,YAAY,CAAC,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;IAGnE,IAAMU,YAAY,GAAGd,WAAW,CAAC,gBAAgB,CAAC;IAClDY,sBAAS,CAACC,KAAK,CAACC,YAAY,CAAC;IAG7BZ,MAAM,CAACQ,gBAAgB,CAACP,YAAY,CAAC,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,QAAQ,CAAC;EACpE,CAAC,CAAC;EAEFP,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACrC,IAAAkB,QAAA,GAAwB,IAAAhB,mBAAM,EAAC,IAAAnD,WAAA,CAAAC,GAAA,EAACoC,aAAA,CAAAL,OAAY,IAAE,CAAC,CAAC;MAAxCoB,WAAW,GAAAe,QAAA,CAAXf,WAAW;IAGnB,IAAMgB,WAAW,GAAGhB,WAAW,CAAC,cAAc,CAAC;IAC/CY,sBAAS,CAACC,KAAK,CAACG,WAAW,CAAC;IAG5Bd,MAAM,CAACd,aAAa,CAAC,CAAC6B,oBAAoB,CAAC,oBAAoB,CAAC;EAClE,CAAC,CAAC;EAEFpB,EAAE,CAAC,kCAAkC,EAAE,YAAM;IAC3C,IAAAqB,QAAA,GAAwC,IAAAnB,mBAAM,EAAC,IAAAnD,WAAA,CAAAC,GAAA,EAACoC,aAAA,CAAAL,OAAY,IAAE,CAAC,CAAC;MAAxDoB,WAAW,GAAAkB,QAAA,CAAXlB,WAAW;MAAEC,cAAc,GAAAiB,QAAA,CAAdjB,cAAc;IAGnC,IAAMkB,MAAM,GAAGlB,cAAc,CAAC,OAAO,CAAC;IACtCC,MAAM,CAACiB,MAAM,CAACC,IAAI,CAAC,UAAAC,KAAK;MAAA,OAAIA,KAAK,CAACC,WAAW,KAAK,UAAU;IAAA,EAAC,CAAC,CAACf,UAAU,CAAC,CAAC;IAG3E,IAAMI,aAAa,GAAGX,WAAW,CAAC,iBAAiB,CAAC;IACpDY,sBAAS,CAACC,KAAK,CAACF,aAAa,CAAC;IAG9BT,MAAM,CAACiB,MAAM,CAACC,IAAI,CAAC,UAAAC,KAAK;MAAA,OAAIA,KAAK,CAACC,WAAW,KAAK,UAAU;IAAA,EAAC,CAAC,CAACf,UAAU,CAAC,CAAC;EAC7E,CAAC,CAAC;EAEFV,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAA0B,QAAA,GAA2B,IAAAxB,mBAAM,EAAC,IAAAnD,WAAA,CAAAC,GAAA,EAACoC,aAAA,CAAAL,OAAY,IAAE,CAAC,CAAC;MAA3CqB,cAAc,GAAAsB,QAAA,CAAdtB,cAAc;IAGtB,IAAMI,UAAU,GAAGJ,cAAc,CAAC,YAAY,CAAC;IAC/CC,MAAM,CAACG,UAAU,CAACC,MAAM,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;IAGjCC,UAAU,CAACmB,OAAO,CAAC,UAACC,GAAG,EAAEC,KAAK,EAAK;MACjC,IAAMpD,GAAG,GAAGmD,GAAG,CAACtB,YAAY,CAAC,KAAK,CAAC;MACnCD,MAAM,CAAC5B,GAAG,CAAC,CAACqD,SAAS,CAAC,mCAAmC,CAAC;IAC5D,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF9B,EAAE,CAAC,gCAAgC,EAAE,YAAM;IACzC,IAAA+B,QAAA,GAAwB,IAAA7B,mBAAM,EAAC,IAAAnD,WAAA,CAAAC,GAAA,EAACoC,aAAA,CAAAL,OAAY,IAAE,CAAC,CAAC;MAAxCoB,WAAW,GAAA4B,QAAA,CAAX5B,WAAW;IAGnB,IAAMc,YAAY,GAAGd,WAAW,CAAC,gBAAgB,CAAC;IAClD,IAAMW,aAAa,GAAGX,WAAW,CAAC,iBAAiB,CAAC;IAEpD,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BjB,sBAAS,CAACC,KAAK,CAACF,aAAa,CAAC;MAC9BC,sBAAS,CAACC,KAAK,CAACC,YAAY,CAAC;IAC/B;IAGAZ,MAAM,CAACF,WAAW,CAAC,mBAAmB,CAAC,CAACG,YAAY,CAAC,YAAY,CAAC,CAAC,CAACC,IAAI,CAAC,QAAQ,CAAC;IAGlF,IAAMY,WAAW,GAAGhB,WAAW,CAAC,cAAc,CAAC;IAE/C,KAAK,IAAI6B,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,CAAC,EAAEA,EAAC,EAAE,EAAE;MAC1BjB,sBAAS,CAACC,KAAK,CAACG,WAAW,CAAC;IAC9B;IAGAd,MAAM,CAACd,aAAa,CAAC,CAAC0C,qBAAqB,CAAC,CAAC,CAAC;EAChD,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}