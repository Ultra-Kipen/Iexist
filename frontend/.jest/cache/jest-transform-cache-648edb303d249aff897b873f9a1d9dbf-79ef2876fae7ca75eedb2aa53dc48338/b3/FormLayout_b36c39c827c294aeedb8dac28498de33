8ba162fca626dff272ca0d5ffae35a64
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _useTheme2 = require("../hooks/useTheme");
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _jsxRuntime = require("react/jsx-runtime");
var FormLayout = function FormLayout(_ref) {
  var children = _ref.children,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    style = _ref.style,
    contentContainerStyle = _ref.contentContainerStyle,
    header = _ref.header,
    footer = _ref.footer,
    onSubmit = _ref.onSubmit,
    _ref$avoidKeyboard = _ref.avoidKeyboard,
    avoidKeyboard = _ref$avoidKeyboard === void 0 ? true : _ref$avoidKeyboard;
  var _useTheme = (0, _useTheme2.useTheme)(),
    theme = _useTheme.theme;
  var content = (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [header && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.headerContainer,
      children: header
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: [styles.formContainer, contentContainerStyle],
      children: loading ? (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {}) : children
    }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.footerContainer,
      children: footer
    })]
  });
  if (avoidKeyboard) {
    return (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      style: [styles.container, {
        backgroundColor: theme.colors.background
      }, style],
      behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
      keyboardVerticalOffset: _reactNative.Platform.OS === 'ios' ? 64 : 0,
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
        onPress: _reactNative.Keyboard.dismiss,
        children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
          contentContainerStyle: styles.scrollViewContent,
          keyboardShouldPersistTaps: "handled",
          showsVerticalScrollIndicator: false,
          children: content
        })
      })
    });
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: theme.colors.background
    }, style],
    children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      contentContainerStyle: styles.scrollViewContent,
      keyboardShouldPersistTaps: "handled",
      showsVerticalScrollIndicator: false,
      children: content
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  scrollViewContent: {
    flexGrow: 1,
    paddingBottom: 20
  },
  headerContainer: {
    width: '100%',
    marginBottom: 20
  },
  formContainer: {
    flex: 1,
    padding: 16
  },
  footerContainer: {
    width: '100%',
    padding: 16,
    paddingBottom: _reactNative.Platform.OS === 'ios' ? 20 : 16
  }
});
var _default = exports.default = FormLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,