506d8ea78e3e3e23b5d2b873dd3434fe
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    default: {
      interceptors: {
        request: {
          use: jest.fn()
        },
        response: {
          use: jest.fn()
        }
      },
      get: jest.fn(),
      post: jest.fn().mockResolvedValue({
        data: {
          success: true
        }
      }),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn().mockImplementation(function (key) {
      if (key === 'auth_token') return Promise.resolve('mock_token');
      if (key === 'user') return Promise.resolve(JSON.stringify({
        id: 1,
        username: 'testuser',
        nickname: 'Test User'
      }));
      return Promise.resolve(null);
    }),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MockIcon';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    Button: 'Button',
    Chip: 'Chip',
    TextInput: 'TextInput',
    Card: {
      Title: 'Card.Title',
      Content: 'Card.Content',
      Actions: 'Card.Actions'
    },
    Avatar: {
      Icon: 'Avatar.Icon'
    },
    IconButton: 'IconButton',
    FAB: 'FAB',
    Divider: 'Divider',
    Surface: 'Surface',
    ActivityIndicator: 'ActivityIndicator',
    Portal: 'Portal',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        onSurface: '#000000',
        disabled: 'rgba(0, 0, 0, 0.26)',
        placeholder: 'rgba(0, 0, 0, 0.54)',
        backdrop: 'rgba(0, 0, 0, 0.5)',
        notification: '#f50057'
      }
    })
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        id: 1,
        username: 'testuser',
        nickname: 'Test User'
      },
      isAuthenticated: true,
      login: jest.fn(),
      logout: jest.fn()
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn(),
      logEmotion: jest.fn()
    })
  };
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  rn.UIManager.measureInWindow = jest.fn();
  return Object.setPrototypeOf(Object.assign({}, rn, {
    Image: 'Image',
    View: 'View',
    ScrollView: 'ScrollView',
    StyleSheet: {
      create: function create(styles) {
        return styles;
      }
    }
  }), rn);
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HomeScreen = _interopRequireDefault(require("../../src/screens/HomeScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen 컴포넌트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('기본 화면이 올바르게 렌더링되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      findByTestId = _render.findByTestId;
    var container = yield findByTestId('home-screen-container');
    expect(container).toBeTruthy();
  }));
  it('인증되지 않은 상태에서는 로그인 메시지를 표시해야 함', (0, _asyncToGenerator2.default)(function* () {
    require("../../src/contexts/AuthContext").useAuth.mockReturnValueOnce({
      user: null,
      isAuthenticated: false,
      login: jest.fn(),
      logout: jest.fn()
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      findByText = _render2.findByText;
    var loginMessage = yield findByText('로그인이 필요합니다');
    expect(loginMessage).toBeTruthy();
  }));
  it('스냅샷과 일치해야 함', function () {
    var renderer = require('react-test-renderer');
    var tree = renderer.create((0, _jsxRuntime.jsx)(_HomeScreen.default, {})).toJSON();
    expect(tree).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJkZWZhdWx0IiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdCIsInVzZSIsImplc3QiLCJmbiIsInJlc3BvbnNlIiwiZ2V0IiwicG9zdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsInN1Y2Nlc3MiLCJwdXQiLCJkZWxldGUiLCJnZXRJdGVtIiwibW9ja0ltcGxlbWVudGF0aW9uIiwia2V5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJKU09OIiwic3RyaW5naWZ5IiwiaWQiLCJ1c2VybmFtZSIsIm5pY2tuYW1lIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJUZXh0IiwiQnV0dG9uIiwiQ2hpcCIsIlRleHRJbnB1dCIsIkNhcmQiLCJUaXRsZSIsIkNvbnRlbnQiLCJBY3Rpb25zIiwiQXZhdGFyIiwiSWNvbiIsIkljb25CdXR0b24iLCJGQUIiLCJEaXZpZGVyIiwiU3VyZmFjZSIsIkFjdGl2aXR5SW5kaWNhdG9yIiwiUG9ydGFsIiwiRGlhbG9nIiwidXNlVGhlbWUiLCJtb2NrUmV0dXJuVmFsdWUiLCJjb2xvcnMiLCJwcmltYXJ5IiwiYmFja2dyb3VuZCIsInN1cmZhY2UiLCJlcnJvciIsInRleHQiLCJvblN1cmZhY2UiLCJkaXNhYmxlZCIsInBsYWNlaG9sZGVyIiwiYmFja2Ryb3AiLCJub3RpZmljYXRpb24iLCJ1c2VBdXRoIiwidXNlciIsImlzQXV0aGVudGljYXRlZCIsImxvZ2luIiwibG9nb3V0IiwidXNlRW1vdGlvbiIsImVtb3Rpb25zIiwiZW1vdGlvbl9pZCIsIm5hbWUiLCJpY29uIiwic2VsZWN0ZWRFbW90aW9ucyIsInNlbGVjdEVtb3Rpb24iLCJsb2dFbW90aW9uIiwicm4iLCJyZXF1aXJlQWN0dWFsIiwiVUlNYW5hZ2VyIiwibWVhc3VyZUluV2luZG93IiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJhc3NpZ24iLCJJbWFnZSIsIlZpZXciLCJTY3JvbGxWaWV3IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInN0eWxlcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0hvbWVTY3JlZW4iLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInVzZUZha2VUaW1lcnMiLCJhZnRlckVhY2giLCJ1c2VSZWFsVGltZXJzIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZmluZEJ5VGVzdElkIiwiY29udGFpbmVyIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIm1vY2tSZXR1cm5WYWx1ZU9uY2UiLCJfcmVuZGVyMiIsImZpbmRCeVRleHQiLCJsb2dpbk1lc3NhZ2UiLCJyZW5kZXJlciIsInRyZWUiLCJ0b0pTT04iLCJ0b01hdGNoU25hcHNob3QiXSwic291cmNlcyI6WyJIb21lU2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9zY3JlZW5zL0hvbWVTY3JlZW4udGVzdC50c3hcclxuXHJcbi8vIOuqqOuToCDsnoTtj6ztirgg7KCE7JeQIOuqqO2Cue2VtOyVvCDtlanri4jri6RcclxuLy8gQVBJIO2BtOudvOydtOyWuO2KuCDrqqjtgrkgKOuqqOuTiCDqsr3roZwg7KeB7KCRIOyngOyglSlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvYXBpL2NsaWVudCcsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICBpbnRlcmNlcHRvcnM6IHtcclxuICAgICAgICByZXF1ZXN0OiB7IHVzZTogamVzdC5mbigpIH0sXHJcbiAgICAgICAgcmVzcG9uc2U6IHsgdXNlOiBqZXN0LmZuKCkgfVxyXG4gICAgICB9LFxyXG4gICAgICBnZXQ6IGplc3QuZm4oKSxcclxuICAgICAgcG9zdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogeyBzdWNjZXNzOiB0cnVlIH0gfSksXHJcbiAgICAgIHB1dDogamVzdC5mbigpLFxyXG4gICAgICBkZWxldGU6IGplc3QuZm4oKVxyXG4gICAgfVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gQXN5bmNTdG9yYWdlIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcclxuICBnZXRJdGVtOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcclxuICAgIGlmIChrZXkgPT09ICdhdXRoX3Rva2VuJykgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnbW9ja190b2tlbicpO1xyXG4gICAgaWYgKGtleSA9PT0gJ3VzZXInKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEpTT04uc3RyaW5naWZ5KHsgXHJcbiAgICAgIGlkOiAxLCBcclxuICAgICAgdXNlcm5hbWU6ICd0ZXN0dXNlcicsIFxyXG4gICAgICBuaWNrbmFtZTogJ1Rlc3QgVXNlcicgXHJcbiAgICB9KSk7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gIH0pLFxyXG4gIHNldEl0ZW06IGplc3QuZm4oKSxcclxuICByZW1vdmVJdGVtOiBqZXN0LmZuKClcclxufSkpO1xyXG5cclxuLy8gTWF0ZXJpYWxDb21tdW5pdHlJY29ucyDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL01hdGVyaWFsQ29tbXVuaXR5SWNvbnMnLCAoKSA9PiAnTW9ja0ljb24nKTtcclxuXHJcbi8vIFJlYWN0IE5hdGl2ZSBQYXBlciDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtcGFwZXInLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIFRleHQ6ICdUZXh0JyxcclxuICAgIEJ1dHRvbjogJ0J1dHRvbicsXHJcbiAgICBDaGlwOiAnQ2hpcCcsXHJcbiAgICBUZXh0SW5wdXQ6ICdUZXh0SW5wdXQnLFxyXG4gICAgQ2FyZDoge1xyXG4gICAgICBUaXRsZTogJ0NhcmQuVGl0bGUnLFxyXG4gICAgICBDb250ZW50OiAnQ2FyZC5Db250ZW50JyxcclxuICAgICAgQWN0aW9uczogJ0NhcmQuQWN0aW9ucycsXHJcbiAgICB9LFxyXG4gICAgQXZhdGFyOiB7XHJcbiAgICAgIEljb246ICdBdmF0YXIuSWNvbicsXHJcbiAgICB9LFxyXG4gICAgSWNvbkJ1dHRvbjogJ0ljb25CdXR0b24nLFxyXG4gICAgRkFCOiAnRkFCJyxcclxuICAgIERpdmlkZXI6ICdEaXZpZGVyJyxcclxuICAgIFN1cmZhY2U6ICdTdXJmYWNlJyxcclxuICAgIEFjdGl2aXR5SW5kaWNhdG9yOiAnQWN0aXZpdHlJbmRpY2F0b3InLFxyXG4gICAgUG9ydGFsOiAnUG9ydGFsJyxcclxuICAgIERpYWxvZzoge1xyXG4gICAgICBUaXRsZTogJ0RpYWxvZy5UaXRsZScsXHJcbiAgICAgIENvbnRlbnQ6ICdEaWFsb2cuQ29udGVudCcsXHJcbiAgICAgIEFjdGlvbnM6ICdEaWFsb2cuQWN0aW9ucycsXHJcbiAgICB9LFxyXG4gICAgdXNlVGhlbWU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBjb2xvcnM6IHtcclxuICAgICAgICBwcmltYXJ5OiAnIzYyMDBlZScsXHJcbiAgICAgICAgYmFja2dyb3VuZDogJyNmNmY2ZjYnLFxyXG4gICAgICAgIHN1cmZhY2U6ICcjZmZmZmZmJyxcclxuICAgICAgICBlcnJvcjogJyNCMDAwMjAnLFxyXG4gICAgICAgIHRleHQ6ICcjMDAwMDAwJyxcclxuICAgICAgICBvblN1cmZhY2U6ICcjMDAwMDAwJyxcclxuICAgICAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXHJcbiAgICAgICAgYmFja2Ryb3A6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxyXG4gICAgICAgIG5vdGlmaWNhdGlvbjogJyNmNTAwNTcnLFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gQXV0aENvbnRleHQg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbnRleHRzL0F1dGhDb250ZXh0JywgKCkgPT4gKHtcclxuICB1c2VBdXRoOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgIHVzZXI6IHsgaWQ6IDEsIHVzZXJuYW1lOiAndGVzdHVzZXInLCBuaWNrbmFtZTogJ1Rlc3QgVXNlcicgfSxcclxuICAgIGlzQXV0aGVudGljYXRlZDogdHJ1ZSxcclxuICAgIGxvZ2luOiBqZXN0LmZuKCksXHJcbiAgICBsb2dvdXQ6IGplc3QuZm4oKVxyXG4gIH0pXHJcbn0pKTtcclxuXHJcbi8vIEVtb3Rpb25Db250ZXh0IOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9jb250ZXh0cy9FbW90aW9uQ29udGV4dCcsICgpID0+ICh7XHJcbiAgdXNlRW1vdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICBlbW90aW9uczogW1xyXG4gICAgICB7IGVtb3Rpb25faWQ6IDEsIG5hbWU6ICftlonrs7UnLCBpY29uOiAnZW1vdGljb24taGFwcHktb3V0bGluZScgfSxcclxuICAgICAgeyBlbW90aW9uX2lkOiAyLCBuYW1lOiAn6rCQ7IKsJywgaWNvbjogJ2hhbmQtaGVhcnQnIH1cclxuICAgIF0sXHJcbiAgICBzZWxlY3RlZEVtb3Rpb25zOiBbXSxcclxuICAgIHNlbGVjdEVtb3Rpb246IGplc3QuZm4oKSxcclxuICAgIGxvZ0Vtb3Rpb246IGplc3QuZm4oKVxyXG4gIH0pXHJcbn0pKTtcclxuXHJcbi8vIOuCmOuouOyngCDrpqzslaHtirgg64Sk7J207Yuw67iMIOy7tO2PrOuEjO2KuCDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3Qgcm4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIHJuLlVJTWFuYWdlci5tZWFzdXJlSW5XaW5kb3cgPSBqZXN0LmZuKCk7XHJcbiAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihcclxuICAgIHtcclxuICAgICAgLi4ucm4sXHJcbiAgICAgIEltYWdlOiAnSW1hZ2UnLFxyXG4gICAgICBWaWV3OiAnVmlldycsXHJcbiAgICAgIFNjcm9sbFZpZXc6ICdTY3JvbGxWaWV3JyxcclxuICAgICAgU3R5bGVTaGVldDoge1xyXG4gICAgICAgIGNyZWF0ZTogKHN0eWxlcykgPT4gc3R5bGVzLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHJuXHJcbiAgKTtcclxufSk7XHJcblxyXG4vLyDsnbTsoJwg64uk66W4IOyehO2PrO2KuCDqsIDriqVcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgcmVuZGVyLCBmaXJlRXZlbnQsIHdhaXRGb3IgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBIb21lU2NyZWVuIGZyb20gJy4uLy4uL3NyYy9zY3JlZW5zL0hvbWVTY3JlZW4nO1xyXG5cclxuZGVzY3JpYmUoJ0hvbWVTY3JlZW4g7Lu07Y+s64SM7Yq4JywgKCkgPT4ge1xyXG4gIC8vIOqwgSDthYzsiqTtirgg7KCE7JeQIOyLpO2WiVxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcclxuICB9KTtcclxuICBcclxuICAvLyDqsIEg7YWM7Iqk7Yq4IO2bhOyXkCDsi6TtlolcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfquLDrs7gg7ZmU66m07J20IOyYrOuwlOultOqyjCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBmaW5kQnlUZXN0SWQgfSA9IHJlbmRlcig8SG9tZVNjcmVlbiAvPik7XHJcbiAgICBjb25zdCBjb250YWluZXIgPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ2hvbWUtc2NyZWVuLWNvbnRhaW5lcicpO1xyXG4gICAgZXhwZWN0KGNvbnRhaW5lcikudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn7J247Kad65CY7KeAIOyViuydgCDsg4Htg5zsl5DshJzripQg66Gc6re47J24IOuplOyLnOyngOulvCDtkZzsi5ztlbTslbwg7ZWoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gdXNlQXV0aCDrqqjtgrkg7J6s7ISk7KCVXHJcbiAgICByZXF1aXJlKCcuLi8uLi9zcmMvY29udGV4dHMvQXV0aENvbnRleHQnKS51c2VBdXRoLm1vY2tSZXR1cm5WYWx1ZU9uY2Uoe1xyXG4gICAgICB1c2VyOiBudWxsLFxyXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxyXG4gICAgICBsb2dpbjogamVzdC5mbigpLFxyXG4gICAgICBsb2dvdXQ6IGplc3QuZm4oKVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZmluZEJ5VGV4dCB9ID0gcmVuZGVyKDxIb21lU2NyZWVuIC8+KTtcclxuICAgIGNvbnN0IGxvZ2luTWVzc2FnZSA9IGF3YWl0IGZpbmRCeVRleHQoJ+uhnOq3uOyduOydtCDtlYTsmpTtlanri4jri6QnKTtcclxuICAgIGV4cGVjdChsb2dpbk1lc3NhZ2UpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgLy8gcmVhY3QtdGVzdC1yZW5kZXJlcuulvCDsgqzsmqntlZwg7Iqk64OF7IO3IO2FjOyKpO2KuFxyXG4gIGl0KCfsiqTrg4Xsg7fqs7wg7J287LmY7ZW07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHJlbmRlcmVyID0gcmVxdWlyZSgncmVhY3QtdGVzdC1yZW5kZXJlcicpO1xyXG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8SG9tZVNjcmVlbiAvPikudG9KU09OKCk7XHJcbiAg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