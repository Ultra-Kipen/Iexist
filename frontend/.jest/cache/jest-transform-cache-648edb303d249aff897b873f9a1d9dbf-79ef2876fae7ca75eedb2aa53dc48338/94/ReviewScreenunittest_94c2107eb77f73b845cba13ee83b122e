f3cad1d14f016bd100b360e39b29831f
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: function create(styles) {
        return styles;
      }
    },
    View: 'View',
    ScrollView: 'ScrollView',
    Image: 'Image'
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Title: 'Title',
    Paragraph: 'Paragraph',
    useTheme: jest.fn(function () {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    })
  };
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var consoleSpy = jest.spyOn(console, 'log').mockImplementation(function () {});
describe('ReviewScreen 모듈 테스트', function () {
  afterEach(function () {
    consoleSpy.mockClear();
  });
  afterAll(function () {
    consoleSpy.mockRestore();
  });
  it('ReviewScreen 모듈을 불러올 수 있어야 함', function () {
    try {
      var ReviewScreenModule = require("../../../src/screens/ReviewScreen");
      expect(ReviewScreenModule).toBeDefined();
    } catch (e) {
      console.error('모듈 로드 오류:', e);
      fail('ReviewScreen 모듈을 불러오는 데 실패했습니다: ' + e.message);
    }
  });
});
describe('ReviewScreen 구조 검증', function () {
  it('올바른 구조와 중요 요소를 포함해야 함', function () {
    try {
      var fs = require('fs');
      var path = require('path');
      var componentPath = path.resolve(__dirname, '../../../src/screens/ReviewScreen.tsx');
      expect(fs.existsSync(componentPath)).toBe(true);
      var componentCode = fs.readFileSync(componentPath, 'utf8');
      expect(componentCode).toContain('import React, { useState } from');
      expect(componentCode).toContain('const ReviewScreen = () =>');
      expect(componentCode).toContain('const [period, setPeriod] = useState');
      expect(componentCode).toContain('<SegmentedButtons');
      expect(componentCode).toContain('<Card');
      expect(componentCode).toContain('StyleSheet.create');
      expect(componentCode).toContain('onPress={() => console.log');
      expect(componentCode).toContain('value={period}');
      expect(componentCode).toContain('onValueChange={setPeriod}');
      expect(componentCode).toMatch(/\[\s*1\s*,\s*2\s*,\s*3\s*,\s*4\s*,\s*5\s*,\s*6\s*\]/);
      expect(componentCode).toContain('이번 {period === \'weekly\' ? \'주\' : \'달\'}의 통계');
    } catch (e) {
      console.error('파일 검사 오류:', e);
      fail('ReviewScreen 구조 검증에 실패했습니다: ' + e.message);
    }
  });
  it('주요 UI 요소가 올바르게 구성되어 있어야 함', function () {
    try {
      var fs = require('fs');
      var path = require('path');
      var componentPath = path.resolve(__dirname, '../../../src/screens/ReviewScreen.tsx');
      var componentCode = fs.readFileSync(componentPath, 'utf8');
      var styleProps = ['container', 'segmentedButtons', 'title', 'imageGrid', 'imageCard', 'graphButton', 'statsCard'];
      styleProps.forEach(function (prop) {
        expect(componentCode).toContain(prop + ':');
      });
      expect(componentCode).toContain('ScrollView');
      expect(componentCode).toContain('SegmentedButtons');
      expect(componentCode).toContain('buttons={[');
      expect(componentCode).toContain('감정 변화 그래프 보기');
      expect(componentCode).toContain('Card.Content');
      expect(componentCode).toContain('Card.Cover');
      expect(componentCode).toContain('https://picsum.photos/300?random=');
      expect(componentCode).toContain('{ value: \'weekly\', label: \'주간\' }');
      expect(componentCode).toContain('{ value: \'monthly\', label: \'월간\' }');
    } catch (e) {
      console.error('UI 요소 검사 오류:', e);
      fail('ReviewScreen UI 요소 검증에 실패했습니다: ' + e.message);
    }
  });
  it('상태 관리와 이벤트 처리 로직이 올바르게 구현되어 있어야 함', function () {
    try {
      var fs = require('fs');
      var path = require('path');
      var componentPath = path.resolve(__dirname, '../../../src/screens/ReviewScreen.tsx');
      var componentCode = fs.readFileSync(componentPath, 'utf8');
      expect(componentCode).toContain('const [period, setPeriod] = useState(\'weekly\')');
      expect(componentCode).toContain('onValueChange={setPeriod}');
      expect(componentCode).toContain('onPress={() => console.log(\'Show emotion graph\')');
      expect(componentCode).toContain('period === \'weekly\' ? \'주간\' : \'월간\'');
      expect(componentCode).toContain('이번 {period === \'weekly\' ? \'주\' : \'달\'}의 통계');
      expect(componentCode).toMatch(/\{item\}/);
    } catch (e) {
      console.error('기능 검사 오류:', e);
      fail('ReviewScreen 기능 검증에 실패했습니다: ' + e.message);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,