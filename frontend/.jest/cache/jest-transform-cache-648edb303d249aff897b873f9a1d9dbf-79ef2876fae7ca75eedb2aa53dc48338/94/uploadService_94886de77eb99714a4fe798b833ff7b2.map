{"version":3,"names":["_client","_interopRequireDefault","require","uploadService","uploadImage","_uploadImage","_asyncToGenerator2","default","file","onProgress","Error","formData","FormData","append","uri","name","split","pop","type","client","post","headers","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","undefined","error","_x","_x2","apply","arguments","uploadMultipleImages","_uploadMultipleImages","files","forEach","_x3","_x4","uploadProfileImage","_uploadProfileImage","_x5","_x6","validateImageUrl","_validateImageUrl","imageUrl","head","then","catch","_x7","createObjectURL","URL","revokeObjectURL","url","_default","exports"],"sources":["uploadService.ts"],"sourcesContent":["import client from './client';\r\nimport { AxiosResponse } from 'axios';\r\n\r\ninterface UploadResponse {\r\n  image_url: string;\r\n  original_name: string;\r\n  file_size: number;\r\n}\r\n\r\nconst uploadService = {\r\n  uploadImage: async (\r\n    file: string | File, \r\n    onProgress?: (progress: number) => void\r\n  ): Promise<AxiosResponse<UploadResponse>> => {\r\n    // 파일 유효성 검사\r\n    if (!file) {\r\n      throw new Error('업로드할 파일이 없습니다.');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    \r\n    // 파일 타입에 따른 처리\r\n    if (typeof file === 'string') {\r\n      // URI 문자열인 경우\r\n      formData.append('file', {\r\n        uri: file,\r\n        name: file.split('/').pop() || 'image.jpg',\r\n        type: 'image/jpeg'\r\n      } as any);\r\n    } else {\r\n      // File 객체인 경우\r\n      formData.append('file', file);\r\n    }\r\n    \r\n    try {\r\n      return await client.post<UploadResponse>('/uploads/image', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        },\r\n        onUploadProgress: onProgress ? (progressEvent) => {\r\n          const percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total!\r\n          );\r\n          onProgress(percentCompleted);\r\n        } : undefined\r\n      });\r\n    } catch (error) {\r\n      // 오류를 그대로 던짐\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  /**\r\n   * 다중 이미지 업로드\r\n   * @param files 업로드할 파일 배열\r\n   * @param onProgress 진행 상태 콜백 (선택 사항)\r\n   */\r\n  uploadMultipleImages: async (files: File[], onProgress?: (progress: number) => void) => {\r\n    const formData = new FormData();\r\n    \r\n    files.forEach((file) => {\r\n      formData.append('images', file);\r\n    });\r\n    \r\n    return client.post('/uploads/images', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      onUploadProgress: onProgress ? (progressEvent) => {\r\n        const percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total!\r\n        );\r\n        onProgress(percentCompleted);\r\n      } : undefined\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * 프로필 이미지 업로드\r\n   * @param file 업로드할 파일\r\n   * @param onProgress 진행 상태 콜백 (선택 사항)\r\n   */\r\n  uploadProfileImage: async (file: File, onProgress?: (progress: number) => void) => {\r\n    const formData = new FormData();\r\n    formData.append('profile_image', file);\r\n    \r\n    return client.post('/uploads/profile', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      },\r\n      onUploadProgress: onProgress ? (progressEvent) => {\r\n        const percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total!\r\n        );\r\n        onProgress(percentCompleted);\r\n      } : undefined\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * 이미지 URL 검증 (존재하는지 확인)\r\n   * @param imageUrl 확인할 이미지 URL\r\n   */\r\n  validateImageUrl: async (imageUrl: string) => {\r\n    return client.head(imageUrl)\r\n      .then(() => true)\r\n      .catch(() => false);\r\n  },\r\n  \r\n  /**\r\n   * 업로드된 파일의 임시 URL 생성 (미리보기용)\r\n   * @param file 파일 객체\r\n   */\r\n  createObjectURL: (file: File): string => {\r\n    return URL.createObjectURL(file);\r\n  },\r\n  \r\n  /**\r\n   * 생성된 임시 URL 해제\r\n   * @param url 해제할 URL\r\n   */\r\n  revokeObjectURL: (url: string): void => {\r\n    URL.revokeObjectURL(url);\r\n  }\r\n};\r\n\r\nexport default uploadService;"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AASA,IAAMC,aAAa,GAAG;EACpBC,WAAW;IAAA,IAAAC,YAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAE,WACXC,IAAmB,EACnBC,UAAuC,EACI;MAE3C,IAAI,CAACD,IAAI,EAAE;QACT,MAAM,IAAIE,KAAK,CAAC,gBAAgB,CAAC;MACnC;MAEA,IAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAG/B,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;QAE5BG,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE;UACtBC,GAAG,EAAEN,IAAI;UACTO,IAAI,EAAEP,IAAI,CAACQ,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,IAAI,WAAW;UAC1CC,IAAI,EAAE;QACR,CAAQ,CAAC;MACX,CAAC,MAAM;QAELP,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAAC;MAC/B;MAEA,IAAI;QACF,aAAaW,eAAM,CAACC,IAAI,CAAiB,gBAAgB,EAAET,QAAQ,EAAE;UACnEU,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,gBAAgB,EAAEb,UAAU,GAAG,UAACc,aAAa,EAAK;YAChD,IAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAChCH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;YACDnB,UAAU,CAACe,gBAAgB,CAAC;UAC9B,CAAC,GAAGK;QACN,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QAEd,MAAMA,KAAK;MACb;IACF,CAAC;IAAA,SAxCD1B,WAAWA,CAAA2B,EAAA,EAAAC,GAAA;MAAA,OAAA3B,YAAA,CAAA4B,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAX9B,WAAW;EAAA,GAwCV;EAOD+B,oBAAoB;IAAA,IAAAC,qBAAA,OAAA9B,kBAAA,CAAAC,OAAA,EAAE,WAAO8B,KAAa,EAAE5B,UAAuC,EAAK;MACtF,IAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAE/ByB,KAAK,CAACC,OAAO,CAAC,UAAC9B,IAAI,EAAK;QACtBG,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEL,IAAI,CAAC;MACjC,CAAC,CAAC;MAEF,OAAOW,eAAM,CAACC,IAAI,CAAC,iBAAiB,EAAET,QAAQ,EAAE;QAC9CU,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,gBAAgB,EAAEb,UAAU,GAAG,UAACc,aAAa,EAAK;UAChD,IAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAChCH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;UACDnB,UAAU,CAACe,gBAAgB,CAAC;QAC9B,CAAC,GAAGK;MACN,CAAC,CAAC;IACJ,CAAC;IAAA,SAlBDM,oBAAoBA,CAAAI,GAAA,EAAAC,GAAA;MAAA,OAAAJ,qBAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAApBC,oBAAoB;EAAA,GAkBnB;EAODM,kBAAkB;IAAA,IAAAC,mBAAA,OAAApC,kBAAA,CAAAC,OAAA,EAAE,WAAOC,IAAU,EAAEC,UAAuC,EAAK;MACjF,IAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEL,IAAI,CAAC;MAEtC,OAAOW,eAAM,CAACC,IAAI,CAAC,kBAAkB,EAAET,QAAQ,EAAE;QAC/CU,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,gBAAgB,EAAEb,UAAU,GAAG,UAACc,aAAa,EAAK;UAChD,IAAMC,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAChCH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAC/C,CAAC;UACDnB,UAAU,CAACe,gBAAgB,CAAC;QAC9B,CAAC,GAAGK;MACN,CAAC,CAAC;IACJ,CAAC;IAAA,SAfDY,kBAAkBA,CAAAE,GAAA,EAAAC,GAAA;MAAA,OAAAF,mBAAA,CAAAT,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAlBO,kBAAkB;EAAA,GAejB;EAMDI,gBAAgB;IAAA,IAAAC,iBAAA,OAAAxC,kBAAA,CAAAC,OAAA,EAAE,WAAOwC,QAAgB,EAAK;MAC5C,OAAO5B,eAAM,CAAC6B,IAAI,CAACD,QAAQ,CAAC,CACzBE,IAAI,CAAC;QAAA,OAAM,IAAI;MAAA,EAAC,CAChBC,KAAK,CAAC;QAAA,OAAM,KAAK;MAAA,EAAC;IACvB,CAAC;IAAA,SAJDL,gBAAgBA,CAAAM,GAAA;MAAA,OAAAL,iBAAA,CAAAb,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAhBW,gBAAgB;EAAA,GAIf;EAMDO,eAAe,EAAE,SAAjBA,eAAeA,CAAG5C,IAAU,EAAa;IACvC,OAAO6C,GAAG,CAACD,eAAe,CAAC5C,IAAI,CAAC;EAClC,CAAC;EAMD8C,eAAe,EAAE,SAAjBA,eAAeA,CAAGC,GAAW,EAAW;IACtCF,GAAG,CAACC,eAAe,CAACC,GAAG,CAAC;EAC1B;AACF,CAAC;AAAC,IAAAC,QAAA,GAAAC,OAAA,CAAAlD,OAAA,GAEaJ,aAAa","ignoreList":[]}