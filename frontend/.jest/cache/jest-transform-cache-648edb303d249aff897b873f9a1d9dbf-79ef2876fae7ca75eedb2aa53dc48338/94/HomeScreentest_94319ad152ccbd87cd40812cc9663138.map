{"version":3,"names":["_getJestObj","mock","default","interceptors","request","use","jest","fn","response","get","post","mockResolvedValue","data","success","put","delete","getItem","mockImplementation","key","Promise","resolve","JSON","stringify","id","username","nickname","setItem","removeItem","Text","Button","Chip","TextInput","Card","Title","Content","Actions","Avatar","Icon","IconButton","FAB","Divider","Surface","ActivityIndicator","Portal","Dialog","useTheme","mockReturnValue","colors","primary","background","surface","error","text","onSurface","disabled","placeholder","backdrop","notification","useAuth","user","isAuthenticated","login","logout","useEmotion","emotions","emotion_id","name","icon","selectedEmotions","selectEmotion","logEmotion","rn","requireActual","UIManager","measureInWindow","Object","setPrototypeOf","assign","Image","View","ScrollView","StyleSheet","create","styles","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_HomeScreen","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","useFakeTimers","afterEach","useRealTimers","it","_render","render","jsx","findByTestId","container","expect","toBeTruthy","mockReturnValueOnce","_render2","findByText","loginMessage","renderer","tree","toJSON","toMatchSnapshot"],"sources":["HomeScreen.test.tsx"],"sourcesContent":["// __tests__/screens/HomeScreen.test.tsx\r\n\r\n// 모든 임포트 전에 모킹해야 합니다\r\n// API 클라이언트 모킹 (모듈 경로 직접 지정)\r\njest.mock('../../src/services/api/client', () => {\r\n  return {\r\n    default: {\r\n      interceptors: {\r\n        request: { use: jest.fn() },\r\n        response: { use: jest.fn() }\r\n      },\r\n      get: jest.fn(),\r\n      post: jest.fn().mockResolvedValue({ data: { success: true } }),\r\n      put: jest.fn(),\r\n      delete: jest.fn()\r\n    }\r\n  };\r\n});\r\n\r\n// AsyncStorage 모킹\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  getItem: jest.fn().mockImplementation((key) => {\r\n    if (key === 'auth_token') return Promise.resolve('mock_token');\r\n    if (key === 'user') return Promise.resolve(JSON.stringify({ \r\n      id: 1, \r\n      username: 'testuser', \r\n      nickname: 'Test User' \r\n    }));\r\n    return Promise.resolve(null);\r\n  }),\r\n  setItem: jest.fn(),\r\n  removeItem: jest.fn()\r\n}));\r\n\r\n// MaterialCommunityIcons 모킹\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'MockIcon');\r\n\r\n// React Native Paper 모킹\r\njest.mock('react-native-paper', () => {\r\n  return {\r\n    Text: 'Text',\r\n    Button: 'Button',\r\n    Chip: 'Chip',\r\n    TextInput: 'TextInput',\r\n    Card: {\r\n      Title: 'Card.Title',\r\n      Content: 'Card.Content',\r\n      Actions: 'Card.Actions',\r\n    },\r\n    Avatar: {\r\n      Icon: 'Avatar.Icon',\r\n    },\r\n    IconButton: 'IconButton',\r\n    FAB: 'FAB',\r\n    Divider: 'Divider',\r\n    Surface: 'Surface',\r\n    ActivityIndicator: 'ActivityIndicator',\r\n    Portal: 'Portal',\r\n    Dialog: {\r\n      Title: 'Dialog.Title',\r\n      Content: 'Dialog.Content',\r\n      Actions: 'Dialog.Actions',\r\n    },\r\n    useTheme: jest.fn().mockReturnValue({\r\n      colors: {\r\n        primary: '#6200ee',\r\n        background: '#f6f6f6',\r\n        surface: '#ffffff',\r\n        error: '#B00020',\r\n        text: '#000000',\r\n        onSurface: '#000000',\r\n        disabled: 'rgba(0, 0, 0, 0.26)',\r\n        placeholder: 'rgba(0, 0, 0, 0.54)',\r\n        backdrop: 'rgba(0, 0, 0, 0.5)',\r\n        notification: '#f50057',\r\n      }\r\n    })\r\n  };\r\n});\r\n\r\n// AuthContext 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: jest.fn().mockReturnValue({\r\n    user: { id: 1, username: 'testuser', nickname: 'Test User' },\r\n    isAuthenticated: true,\r\n    login: jest.fn(),\r\n    logout: jest.fn()\r\n  })\r\n}));\r\n\r\n// EmotionContext 모킹\r\njest.mock('../../src/contexts/EmotionContext', () => ({\r\n  useEmotion: jest.fn().mockReturnValue({\r\n    emotions: [\r\n      { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline' },\r\n      { emotion_id: 2, name: '감사', icon: 'hand-heart' }\r\n    ],\r\n    selectedEmotions: [],\r\n    selectEmotion: jest.fn(),\r\n    logEmotion: jest.fn()\r\n  })\r\n}));\r\n\r\n// 나머지 리액트 네이티브 컴포넌트 모킹\r\njest.mock('react-native', () => {\r\n  const rn = jest.requireActual('react-native');\r\n  rn.UIManager.measureInWindow = jest.fn();\r\n  return Object.setPrototypeOf(\r\n    {\r\n      ...rn,\r\n      Image: 'Image',\r\n      View: 'View',\r\n      ScrollView: 'ScrollView',\r\n      StyleSheet: {\r\n        create: (styles) => styles,\r\n      },\r\n    },\r\n    rn\r\n  );\r\n});\r\n\r\n// 이제 다른 임포트 가능\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport HomeScreen from '../../src/screens/HomeScreen';\r\n\r\ndescribe('HomeScreen 컴포넌트', () => {\r\n  // 각 테스트 전에 실행\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    jest.useFakeTimers();\r\n  });\r\n  \r\n  // 각 테스트 후에 실행\r\n  afterEach(() => {\r\n    jest.useRealTimers();\r\n  });\r\n\r\n  it('기본 화면이 올바르게 렌더링되어야 함', async () => {\r\n    const { findByTestId } = render(<HomeScreen />);\r\n    const container = await findByTestId('home-screen-container');\r\n    expect(container).toBeTruthy();\r\n  });\r\n\r\n  it('인증되지 않은 상태에서는 로그인 메시지를 표시해야 함', async () => {\r\n    // useAuth 모킹 재설정\r\n    require('../../src/contexts/AuthContext').useAuth.mockReturnValueOnce({\r\n      user: null,\r\n      isAuthenticated: false,\r\n      login: jest.fn(),\r\n      logout: jest.fn()\r\n    });\r\n    \r\n    const { findByText } = render(<HomeScreen />);\r\n    const loginMessage = await findByText('로그인이 필요합니다');\r\n    expect(loginMessage).toBeTruthy();\r\n  });\r\n\r\n  // react-test-renderer를 사용한 스냅샷 테스트\r\n  it('스냅샷과 일치해야 함', () => {\r\n    const renderer = require('react-test-renderer');\r\n    const tree = renderer.create(<HomeScreen />).toJSON();\r\n    expect(tree).toMatchSnapshot();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}