{"version":3,"names":["_getJestObj","mock","Button","_ref","children","onPress","_jsxRuntime","jsx","onClick","Card","_ref2","style","Cover","_ref3","source","src","uri","alt","Content","_ref4","SegmentedButtons","_ref5","value","onValueChange","buttons","map","button","label","Title","_ref6","Paragraph","_ref7","useTheme","jest","fn","colors","primary","background","_interopRequireDefault","require","_react","_reactNative","_ReviewScreen","_require","describe","it","expect","render","default","not","toThrow","_render","getByTestId","segmentedButtons","getAttribute","toBe","_render2","toBeTruthy","_render3","getByText","fireEvent","click","_render4","container","images","querySelectorAll","length","toBeGreaterThanOrEqual","_render5","consoleSpy","spyOn","console","graphButton","toHaveBeenCalledWith","mockRestore","_render6"],"sources":["ReviewScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/tests/unit/screens/ReviewScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport ReviewScreen from '../../../src/screens/ReviewScreen';\r\n\r\n// react-native-paper 컴포넌트 직접 모킹\r\njest.mock('react-native-paper', () => {\r\n  // 모킹할 컴포넌트들 정의\r\n  const Button = ({ children, onPress }) => (\r\n    <button onClick={onPress}>{children}</button>\r\n  );\r\n  const Card = ({ children, style }) => (\r\n    <div style={style}>{children}</div>\r\n  );\r\n  Card.Cover = ({ source }) => (\r\n    <img src={source?.uri || ''} alt=\"cover\" />\r\n  );\r\n  Card.Content = ({ children }) => (\r\n    <div>{children}</div>\r\n  );\r\n  const SegmentedButtons = ({ value, onValueChange, buttons }) => (\r\n    <div data-testid=\"segmented-buttons\" data-value={value}>\r\n      {buttons.map((button) => (\r\n        <button \r\n          key={button.value} \r\n          onClick={() => onValueChange(button.value)}\r\n        >\r\n          {button.label}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n  const Title = ({ children, style }) => (\r\n    <h2 style={style}>{children}</h2>\r\n  );\r\n  const Paragraph = ({ children }) => (\r\n    <p>{children}</p>\r\n  );\r\n  \r\n  // useTheme 모킹\r\n  const useTheme = jest.fn(() => ({\r\n    colors: {\r\n      primary: '#000',\r\n      background: '#fff',\r\n    }\r\n  }));\r\n\r\n  return {\r\n    Button,\r\n    Card,\r\n    SegmentedButtons,\r\n    Title,\r\n    Paragraph,\r\n    useTheme\r\n  };\r\n});\r\n\r\ndescribe('ReviewScreen 단위 테스트', () => {\r\n  it('컴포넌트가 렌더링 되어야 함', () => {\r\n    expect(() => render(<ReviewScreen />)).not.toThrow();\r\n  });\r\n  \r\n  it('useState 훅이 period 상태를 제대로 관리해야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // 초기 상태값이 'weekly'인지 확인\r\n    const segmentedButtons = getByTestId('segmented-buttons');\r\n    expect(segmentedButtons.getAttribute('data-value')).toBe('weekly');\r\n  });\r\n  \r\n  it('SegmentedButtons 컴포넌트가 존재해야 함', () => {\r\n    const { getByTestId } = render(<ReviewScreen />);\r\n    \r\n    // SegmentedButtons 컴포넌트가 있는지 확인\r\n    expect(getByTestId('segmented-buttons')).toBeTruthy();\r\n  });\r\n  \r\n  it('period 상태가 변경되면 UI가 업데이트되어야 함', () => {\r\n    const { getByTestId, getByText } = render(<ReviewScreen />);\r\n    \r\n    // 초기 상태값이 'weekly'인지 확인\r\n    const segmentedButtons = getByTestId('segmented-buttons');\r\n    expect(segmentedButtons.getAttribute('data-value')).toBe('weekly');\r\n    \r\n    // 월간 버튼 클릭\r\n    fireEvent.click(getByText('월간'));\r\n    \r\n    // 변경된 상태값이 'monthly'인지 확인\r\n    expect(segmentedButtons.getAttribute('data-value')).toBe('monthly');\r\n  });\r\n  \r\n  it('이미지 그리드에 카드가 렌더링되어야 함', () => {\r\n    const { container } = render(<ReviewScreen />);\r\n    \r\n    // 이미지 태그가 6개 있는지 확인\r\n    const images = container.querySelectorAll('img');\r\n    expect(images.length).toBeGreaterThanOrEqual(6);\r\n  });\r\n  \r\n  it('감정 변화 그래프 버튼이 존재하고 클릭 가능해야 함', () => {\r\n    const { getByText } = render(<ReviewScreen />);\r\n    const consoleSpy = jest.spyOn(console, 'log');\r\n    \r\n    // 그래프 버튼 찾기\r\n    const graphButton = getByText('감정 변화 그래프 보기');\r\n    expect(graphButton).toBeTruthy();\r\n    \r\n    // 버튼 클릭 시뮬레이션\r\n    fireEvent.click(graphButton);\r\n    \r\n    // console.log가 호출되었는지 확인\r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n    \r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('통계 카드가 존재해야 함', () => {\r\n    const { getByText } = render(<ReviewScreen />);\r\n    \r\n    // 통계 카드 내용 확인\r\n    expect(getByText('이번 주의 통계')).toBeTruthy();\r\n    expect(getByText('가장 많이 느낀 감정: 행복')).toBeTruthy();\r\n    expect(getByText('게시물 수: 7개')).toBeTruthy();\r\n    expect(getByText('받은 공감: 23개')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}