{"version":3,"names":["_getJestObj","mock","useTheme","jest","fn","colors","primary","background","SegmentedButtons","Card","Button","Text","React","require","_require","View","ScrollView","MockReviewScreen","_jsxRuntime","jsxs","style","flex","padding","children","jsx","value","onValueChange","buttons","label","flexDirection","flexWrap","justifyContent","Array","fill","map","_","index","width","marginBottom","onPress","console","log","_interopRequireDefault","_react","_reactNative","_ReviewScreen","_reactNative2","_require2","mockSegmentedButtons","mockCard","mockButton","describe","it","expect","render","default","not","toThrow","_render","UNSAFE_getAllByType","scrollViews","length","toBeGreaterThan","segmentedButtons","toBe","cards","_render2","props","_render3","views","imageGridView","find","view","toBeTruthy","toBeGreaterThanOrEqual","consoleSpy","spyOn","_render4","graphButton","button","includes","toHaveBeenCalledWith","mockRestore","_render5","scrollView","toEqual","objectContaining","_render6"],"sources":["ReviewScreen.integration.test.tsx"],"sourcesContent":["// root/frontend/tests/integration/screens/ReviewScreen.integration.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, act } from '@testing-library/react-native';\r\nimport ReviewScreen from '../../../src/screens/ReviewScreen';\r\nimport { View, ScrollView } from 'react-native';\r\n\r\n// Mock components\r\nconst mockSegmentedButtons = 'mockSegmentedButtons';\r\nconst mockCard = 'mockCard';\r\nconst mockButton = 'mockButton';\r\n\r\n// useTheme 모킹\r\njest.mock('react-native-paper', () => ({\r\n  useTheme: jest.fn(() => ({\r\n    colors: {\r\n      primary: '#000',\r\n      background: '#fff',\r\n    },\r\n  })),\r\n  SegmentedButtons: 'mockSegmentedButtons',\r\n  Card: 'mockCard',\r\n  Button: 'mockButton',\r\n  Text: 'mockText',\r\n}));\r\n\r\n// 테스트에서 사용할 수 있도록 모킹된 컴포넌트 내보내기\r\njest.mock('../../../src/screens/ReviewScreen', () => {\r\n  const React = require('react');\r\n  const { View, ScrollView } = require('react-native');\r\n  \r\n  return function MockReviewScreen() {\r\n    return (\r\n      <ScrollView style={{ flex: 1, padding: 16 }}>\r\n        <View>\r\n          <mockSegmentedButtons \r\n            value=\"weekly\"\r\n            onValueChange={() => {}}\r\n            buttons={[\r\n              { value: 'weekly', label: '주간' },\r\n              { value: 'monthly', label: '월간' },\r\n            ]}\r\n          />\r\n        </View>\r\n        <View style={{ flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'space-between' }}>\r\n          {Array(6).fill(0).map((_, index) => (\r\n            <mockCard key={index} style={{ width: '48%', marginBottom: 16 }}>\r\n              <View />\r\n            </mockCard>\r\n          ))}\r\n        </View>\r\n        <mockButton onPress={() => console.log('Show emotion graph')}>\r\n          감정 변화 그래프 보기\r\n        </mockButton>\r\n      </ScrollView>\r\n    );\r\n  };\r\n});\r\n\r\ndescribe('ReviewScreen 통합 테스트', () => {\r\n  it('컴포넌트가 네비게이션 환경에서 렌더링 되어야 함', () => {\r\n    expect(() => render(<ReviewScreen />)).not.toThrow();\r\n  });\r\n  \r\n  it('모든 주요 UI 요소가 렌더링되어야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // 주요 컴포넌트들이 렌더링되었는지 확인\r\n    const scrollViews = UNSAFE_getAllByType(ScrollView);\r\n    expect(scrollViews.length).toBeGreaterThan(0);\r\n    \r\n    const segmentedButtons = UNSAFE_getAllByType('mockSegmentedButtons');\r\n    expect(segmentedButtons.length).toBe(1);\r\n    \r\n    const cards = UNSAFE_getAllByType('mockCard');\r\n    expect(cards.length).toBeGreaterThan(0);\r\n    \r\n    const buttons = UNSAFE_getAllByType('mockButton');\r\n    expect(buttons.length).toBeGreaterThan(0);\r\n  });\r\n  \r\n  it('기간 선택 버튼이 존재하고 상태를 관리해야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // SegmentedButtons 찾기\r\n    const segmentedButtons = UNSAFE_getAllByType('mockSegmentedButtons')[0];\r\n    expect(segmentedButtons.props.value).toBe('weekly');\r\n    \r\n    // 상태 변경 검증 대신 onValueChange 함수가 존재하는지만 확인\r\n    expect(typeof segmentedButtons.props.onValueChange).toBe('function');\r\n  });\r\n  \r\n  it('이미지 그리드가 View 컴포넌트 내에 존재해야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // 이미지 그리드를 포함하는 View 컴포넌트 찾기\r\n    const views = UNSAFE_getAllByType(View);\r\n    const imageGridView = views.find(view => \r\n      view.props.style && \r\n      view.props.style.flexDirection === 'row' && \r\n      view.props.style.flexWrap === 'wrap'\r\n    );\r\n    \r\n    expect(imageGridView).toBeTruthy();\r\n    \r\n    // 이미지 그리드 내의 Card 컴포넌트 확인 (정확한 개수 대신 최소 개수 확인)\r\n    const cards = UNSAFE_getAllByType('mockCard');\r\n    expect(cards.length).toBeGreaterThanOrEqual(6);\r\n  });\r\n  \r\n  it('감정 변화 그래프 버튼이 클릭되면 콘솔 로그가 출력되어야 함', () => {\r\n    const consoleSpy = jest.spyOn(console, 'log');\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // 버튼 찾기\r\n    const buttons = UNSAFE_getAllByType('mockButton');\r\n    const graphButton = buttons.find(button => \r\n      button.props.children && \r\n      typeof button.props.children === 'string' && \r\n      button.props.children.includes('감정 변화 그래프')\r\n    );\r\n    \r\n    expect(graphButton).toBeTruthy();\r\n    \r\n    // 버튼 클릭\r\n    graphButton?.props.onPress();\r\n    \r\n    // 콘솔 로그 확인\r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n    \r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('스타일이 올바르게 적용되어야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    // ScrollView에 스타일이 적용되었는지 확인\r\n    const scrollView = UNSAFE_getAllByType(ScrollView)[0];\r\n    expect(scrollView.props.style).toEqual(expect.objectContaining({\r\n      flex: 1,\r\n      padding: 16,\r\n    }));\r\n    \r\n    // 이미지 그리드 스타일 확인\r\n    const views = UNSAFE_getAllByType(View);\r\n    const imageGridView = views.find(view => \r\n      view.props.style && \r\n      view.props.style.flexDirection === 'row' && \r\n      view.props.style.flexWrap === 'wrap'\r\n    );\r\n    \r\n    expect(imageGridView?.props.style).toEqual(expect.objectContaining({\r\n      flexDirection: 'row',\r\n      flexWrap: 'wrap',\r\n      justifyContent: 'space-between',\r\n    }));\r\n    \r\n    // 카드 스타일 확인\r\n    const cards = UNSAFE_getAllByType('mockCard');\r\n    if (cards.length > 0) {\r\n      expect(cards[0].props.style).toEqual(expect.objectContaining({\r\n        width: '48%',\r\n        marginBottom: 16,\r\n      }));\r\n    }\r\n  });\r\n  \r\n  it('SegmentedButtons의 두 옵션이 주간과 월간으로 표시되어야 함', () => {\r\n    const { UNSAFE_getAllByType } = render(<ReviewScreen />);\r\n    \r\n    const segmentedButtons = UNSAFE_getAllByType('mockSegmentedButtons')[0];\r\n    expect(segmentedButtons.props.buttons).toEqual([\r\n      { value: 'weekly', label: '주간' },\r\n      { value: 'monthly', label: '월간' },\r\n    ]);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}