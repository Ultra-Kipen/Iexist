b9544dd59b9fb61ca866f7b3e977e049
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tagService = exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("./client"));
var tagService = exports.tagService = {
  client: _client.default,
  getAllTags: function () {
    var _getAllTags = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield tagService.client.get('/tags');
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 목록 조회에 실패했습니다');
      }
    });
    function getAllTags() {
      return _getAllTags.apply(this, arguments);
    }
    return getAllTags;
  }(),
  getPopularTags: function () {
    var _getPopularTags = (0, _asyncToGenerator2.default)(function* () {
      var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      try {
        var response = yield tagService.client.get('/tags/popular', {
          params: {
            limit: limit
          }
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('인기 태그 조회에 실패했습니다');
      }
    });
    function getPopularTags() {
      return _getPopularTags.apply(this, arguments);
    }
    return getPopularTags;
  }(),
  createTag: function () {
    var _createTag = (0, _asyncToGenerator2.default)(function* (name) {
      try {
        var response = yield tagService.client.post('/tags', {
          name: name
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 생성에 실패했습니다');
      }
    });
    function createTag(_x) {
      return _createTag.apply(this, arguments);
    }
    return createTag;
  }(),
  getTagById: function () {
    var _getTagById = (0, _asyncToGenerator2.default)(function* (tagId) {
      try {
        var response = yield tagService.client.get(`/tags/${tagId}`);
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 정보 조회에 실패했습니다');
      }
    });
    function getTagById(_x2) {
      return _getTagById.apply(this, arguments);
    }
    return getTagById;
  }(),
  updateTag: function () {
    var _updateTag = (0, _asyncToGenerator2.default)(function* (tagId, name) {
      try {
        var response = yield tagService.client.put(`/tags/${tagId}`, {
          name: name
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 수정에 실패했습니다');
      }
    });
    function updateTag(_x3, _x4) {
      return _updateTag.apply(this, arguments);
    }
    return updateTag;
  }(),
  deleteTag: function () {
    var _deleteTag = (0, _asyncToGenerator2.default)(function* (tagId) {
      try {
        var response = yield tagService.client.delete(`/tags/${tagId}`);
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 삭제에 실패했습니다');
      }
    });
    function deleteTag(_x5) {
      return _deleteTag.apply(this, arguments);
    }
    return deleteTag;
  }(),
  getPostsByTag: function () {
    var _getPostsByTag = (0, _asyncToGenerator2.default)(function* (tagId, params) {
      try {
        var response = yield tagService.client.get(`/tags/${tagId}/posts`, {
          params: params
        });
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그별 게시물 조회에 실패했습니다');
      }
    });
    function getPostsByTag(_x6, _x7) {
      return _getPostsByTag.apply(this, arguments);
    }
    return getPostsByTag;
  }(),
  searchTags: function () {
    var _searchTags = (0, _asyncToGenerator2.default)(function* (query) {
      try {
        var response = yield tagService.client.get('/tags/search', {
          params: {
            query: query
          }
        });
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('태그 검색에 실패했습니다');
      }
    });
    function searchTags(_x8) {
      return _searchTags.apply(this, arguments);
    }
    return searchTags;
  }(),
  addTagToPost: function () {
    var _addTagToPost = (0, _asyncToGenerator2.default)(function* (postId, tagId, postType) {
      try {
        var response = yield tagService.client.post(`/posts/${postId}/tags`, {
          tag_id: tagId,
          post_type: postType
        });
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('게시물에 태그 추가에 실패했습니다');
      }
    });
    function addTagToPost(_x9, _x10, _x11) {
      return _addTagToPost.apply(this, arguments);
    }
    return addTagToPost;
  }(),
  removeTagFromPost: function () {
    var _removeTagFromPost = (0, _asyncToGenerator2.default)(function* (postId, tagId, postType) {
      try {
        var response = yield tagService.client.delete(`/posts/${postId}/tags/${tagId}?post_type=${postType}`);
        return response.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('게시물에서 태그 제거에 실패했습니다');
      }
    });
    function removeTagFromPost(_x12, _x13, _x14) {
      return _removeTagFromPost.apply(this, arguments);
    }
    return removeTagFromPost;
  }(),
  getPostTags: function () {
    var _getPostTags = (0, _asyncToGenerator2.default)(function* (postId, postType) {
      try {
        var response = yield tagService.client.get(`/posts/${postId}/tags?post_type=${postType}`);
        return response.data.data;
      } catch (error) {
        if (error instanceof Error) {
          throw error;
        }
        throw new Error('게시물의 태그 목록 조회에 실패했습니다');
      }
    });
    function getPostTags(_x15, _x16) {
      return _getPostTags.apply(this, arguments);
    }
    return getPostTags;
  }()
};
var _default = exports.default = tagService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,