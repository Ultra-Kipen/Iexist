{"version":3,"names":["_axios","_interopRequireDefault","require","createApiClient","exports","client","axios","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","window","localStorage","getItem","error","Promise","reject","apiClient","userService","getProfile","_getProfile","_asyncToGenerator2","default","response","get","data","isAxiosError","_error$response","status","message","apply","arguments","updateProfile","_updateProfile","put","_error$response2","_x","getUserById","_getUserById","userId","_error$response3","_x2","getUserStats","_getUserStats","_error$response4","changePassword","_changePassword","currentPassword","newPassword","current_password","new_password","_error$response5","_x3","_x4","blockUser","_blockUser","post","_error$response6","_x5","unblockUser","_unblockUser","delete","_error$response7","_x6","getBlockedUsers","_getBlockedUsers","_error$response8","_default"],"sources":["userService.ts"],"sourcesContent":["import axios, { \r\n  AxiosInstance, \r\n  AxiosError, \r\n  InternalAxiosRequestConfig, \r\n  AxiosRequestHeaders \r\n} from 'axios';\r\n\r\nconst createApiClient = (): AxiosInstance => {\r\n  const client = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    } as AxiosRequestHeaders,\r\n  });\r\n\r\n  // 환경에 따라 인터셉터 추가\r\n  client.interceptors.request.use(\r\n    (config: InternalAxiosRequestConfig) => {\r\n      // headers가 존재하지 않을 경우 초기화\r\n      if (!config.headers) {\r\n        config.headers = {} as AxiosRequestHeaders;\r\n      }\r\n\r\n      const token = typeof window !== 'undefined' \r\n        ? localStorage.getItem('auth_token') \r\n        : null;\r\n\r\n      if (token) {\r\n        config.headers['Authorization'] = `Bearer ${token}`;\r\n      }\r\n\r\n      return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n  );\r\n\r\n  return client;\r\n};\r\n\r\nconst apiClient = createApiClient();\r\n\r\n\r\nexport interface ProfileUpdateData {\r\n  nickname?: string;\r\n  profile_image_url?: string;\r\n  background_image_url?: string;\r\n  favorite_quote?: string;\r\n  theme_preference?: 'light' | 'dark' | 'system';\r\n  privacy_settings?: {\r\n    show_profile?: boolean;\r\n    show_emotions?: boolean;\r\n    show_posts?: boolean;\r\n    show_challenges?: boolean;\r\n  };\r\n}\r\n\r\nexport interface UserProfile {\r\n  user_id: number;\r\n  username: string;\r\n  email: string;\r\n  nickname?: string;\r\n  profile_image_url?: string;\r\n  background_image_url?: string;\r\n  favorite_quote?: string;\r\n  theme_preference: 'light' | 'dark' | 'system';\r\n  privacy_settings: {\r\n    show_profile: boolean;\r\n    show_emotions: boolean;\r\n    show_posts: boolean;\r\n    show_challenges: boolean;\r\n  };\r\n  last_login_at: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface UserStats {\r\n  my_day_post_count: number;\r\n  someone_day_post_count: number;\r\n  my_day_like_received_count: number;\r\n  someone_day_like_received_count: number;\r\n  my_day_comment_received_count: number;\r\n  someone_day_comment_received_count: number;\r\n  challenge_count: number;\r\n  last_updated: string;\r\n}\r\n\r\ninterface ApiResponse<T> {\r\n  status: string;\r\n  message?: string;\r\n  data?: T;\r\n}\r\n\r\nconst userService = {\r\n  getProfile: async (): Promise<ApiResponse<UserProfile>> => {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<UserProfile>>('/users/profile');\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '프로필 정보 조회에 실패했습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  updateProfile: async (data: ProfileUpdateData): Promise<ApiResponse<void>> => {\r\n    try {\r\n      const response = await apiClient.put<ApiResponse<void>>('/users/profile', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '프로필 업데이트에 실패했습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  getUserById: async (userId: number): Promise<ApiResponse<UserProfile>> => {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<UserProfile>>(`/users/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '사용자 정보를 찾을 수 없습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  getUserStats: async (): Promise<ApiResponse<UserStats>> => {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<UserStats>>('/users/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '사용자 통계 정보를 가져올 수 없습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  changePassword: async (currentPassword: string, newPassword: string): Promise<ApiResponse<void>> => {\r\n    try {\r\n      const response = await apiClient.put<ApiResponse<void>>('/users/password', {\r\n        current_password: currentPassword,\r\n        new_password: newPassword\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '비밀번호 변경에 실패했습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  blockUser: async (userId: number): Promise<ApiResponse<void>> => {\r\n    try {\r\n      const response = await apiClient.post<ApiResponse<void>>(`/users/block/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '사용자 차단에 실패했습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  unblockUser: async (userId: number): Promise<ApiResponse<void>> => {\r\n    try {\r\n      const response = await apiClient.delete<ApiResponse<void>>(`/users/block/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '사용자 차단 해제에 실패했습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  getBlockedUsers: async (): Promise<ApiResponse<UserProfile[]>> => {\r\n    try {\r\n      const response = await apiClient.get<ApiResponse<UserProfile[]>>('/users/blocked');\r\n      return response.data;\r\n    } catch (error) {\r\n      if (axios.isAxiosError(error)) {\r\n        throw error.response?.data || { \r\n          status: 'error', \r\n          message: '차단된 사용자 목록을 가져올 수 없습니다.' \r\n        };\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport { apiClient, createApiClient };\r\nexport default userService;"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAOA,IAAMC,eAAe,GAAAC,OAAA,CAAAD,eAAA,GAAG,SAAlBA,eAAeA,CAAA,EAAwB;EAC3C,IAAME,MAAM,GAAGC,cAAK,CAACC,MAAM,CAAC;IAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;IACrEC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAGFP,MAAM,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7B,UAACC,MAAkC,EAAK;IAEtC,IAAI,CAACA,MAAM,CAACJ,OAAO,EAAE;MACnBI,MAAM,CAACJ,OAAO,GAAG,CAAC,CAAwB;IAC5C;IAEA,IAAMK,KAAK,GAAG,OAAOC,MAAM,KAAK,WAAW,GACvCC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,GAClC,IAAI;IAER,IAAIH,KAAK,EAAE;MACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IACrD;IAEA,OAAOD,MAAM;EACf,CAAC,EACD,UAACK,KAAK;IAAA,OAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAAA,CAClC,CAAC;EAED,OAAOhB,MAAM;AACf,CAAC;AAED,IAAMmB,SAAS,GAAApB,OAAA,CAAAoB,SAAA,GAAGrB,eAAe,CAAC,CAAC;AAqDnC,IAAMsB,WAAW,GAAG;EAClBC,UAAU;IAAA,IAAAC,WAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAE,aAA+C;MACzD,IAAI;QACF,IAAMC,QAAQ,SAASN,SAAS,CAACO,GAAG,CAA2B,gBAAgB,CAAC;QAChF,OAAOD,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAAa,eAAA;UAC7B,MAAM,EAAAA,eAAA,GAAAb,KAAK,CAACS,QAAQ,qBAAdI,eAAA,CAAgBF,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbDK,UAAUA,CAAA;MAAA,OAAAC,WAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAVZ,UAAU;EAAA,GAaT;EAEDa,aAAa;IAAA,IAAAC,cAAA,OAAAZ,kBAAA,CAAAC,OAAA,EAAE,WAAOG,IAAuB,EAAiC;MAC5E,IAAI;QACF,IAAMF,QAAQ,SAASN,SAAS,CAACiB,GAAG,CAAoB,gBAAgB,EAAET,IAAI,CAAC;QAC/E,OAAOF,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAAqB,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAArB,KAAK,CAACS,QAAQ,qBAAdY,gBAAA,CAAgBV,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbDkB,aAAaA,CAAAI,EAAA;MAAA,OAAAH,cAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAbC,aAAa;EAAA,GAaZ;EAEDK,WAAW;IAAA,IAAAC,YAAA,OAAAjB,kBAAA,CAAAC,OAAA,EAAE,WAAOiB,MAAc,EAAwC;MACxE,IAAI;QACF,IAAMhB,QAAQ,SAASN,SAAS,CAACO,GAAG,CAA2B,UAAUe,MAAM,EAAE,CAAC;QAClF,OAAOhB,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAA0B,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAA1B,KAAK,CAACS,QAAQ,qBAAdiB,gBAAA,CAAgBf,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbDuB,WAAWA,CAAAI,GAAA;MAAA,OAAAH,YAAA,CAAAR,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAXM,WAAW;EAAA,GAaV;EAEDK,YAAY;IAAA,IAAAC,aAAA,OAAAtB,kBAAA,CAAAC,OAAA,EAAE,aAA6C;MACzD,IAAI;QACF,IAAMC,QAAQ,SAASN,SAAS,CAACO,GAAG,CAAyB,cAAc,CAAC;QAC5E,OAAOD,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAA8B,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAA9B,KAAK,CAACS,QAAQ,qBAAdqB,gBAAA,CAAgBnB,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbD4B,YAAYA,CAAA;MAAA,OAAAC,aAAA,CAAAb,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAZW,YAAY;EAAA,GAaX;EAEDG,cAAc;IAAA,IAAAC,eAAA,OAAAzB,kBAAA,CAAAC,OAAA,EAAE,WAAOyB,eAAuB,EAAEC,WAAmB,EAAiC;MAClG,IAAI;QACF,IAAMzB,QAAQ,SAASN,SAAS,CAACiB,GAAG,CAAoB,iBAAiB,EAAE;UACzEe,gBAAgB,EAAEF,eAAe;UACjCG,YAAY,EAAEF;QAChB,CAAC,CAAC;QACF,OAAOzB,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAAqC,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAArC,KAAK,CAACS,QAAQ,qBAAd4B,gBAAA,CAAgB1B,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAhBD+B,cAAcA,CAAAO,GAAA,EAAAC,GAAA;MAAA,OAAAP,eAAA,CAAAhB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAdc,cAAc;EAAA,GAgBb;EAEDS,SAAS;IAAA,IAAAC,UAAA,OAAAlC,kBAAA,CAAAC,OAAA,EAAE,WAAOiB,MAAc,EAAiC;MAC/D,IAAI;QACF,IAAMhB,QAAQ,SAASN,SAAS,CAACuC,IAAI,CAAoB,gBAAgBjB,MAAM,EAAE,CAAC;QAClF,OAAOhB,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAA2C,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAA3C,KAAK,CAACS,QAAQ,qBAAdkC,gBAAA,CAAgBhC,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbDwC,SAASA,CAAAI,GAAA;MAAA,OAAAH,UAAA,CAAAzB,KAAA,OAAAC,SAAA;IAAA;IAAA,OAATuB,SAAS;EAAA,GAaR;EAEDK,WAAW;IAAA,IAAAC,YAAA,OAAAvC,kBAAA,CAAAC,OAAA,EAAE,WAAOiB,MAAc,EAAiC;MACjE,IAAI;QACF,IAAMhB,QAAQ,SAASN,SAAS,CAAC4C,MAAM,CAAoB,gBAAgBtB,MAAM,EAAE,CAAC;QACpF,OAAOhB,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAAgD,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAAhD,KAAK,CAACS,QAAQ,qBAAduC,gBAAA,CAAgBrC,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbD6C,WAAWA,CAAAI,GAAA;MAAA,OAAAH,YAAA,CAAA9B,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAX4B,WAAW;EAAA,GAaV;EAEDK,eAAe;IAAA,IAAAC,gBAAA,OAAA5C,kBAAA,CAAAC,OAAA,EAAE,aAAiD;MAChE,IAAI;QACF,IAAMC,QAAQ,SAASN,SAAS,CAACO,GAAG,CAA6B,gBAAgB,CAAC;QAClF,OAAOD,QAAQ,CAACE,IAAI;MACtB,CAAC,CAAC,OAAOX,KAAK,EAAE;QACd,IAAIf,cAAK,CAAC2B,YAAY,CAACZ,KAAK,CAAC,EAAE;UAAA,IAAAoD,gBAAA;UAC7B,MAAM,EAAAA,gBAAA,GAAApD,KAAK,CAACS,QAAQ,qBAAd2C,gBAAA,CAAgBzC,IAAI,KAAI;YAC5BG,MAAM,EAAE,OAAO;YACfC,OAAO,EAAE;UACX,CAAC;QACH;QACA,MAAMf,KAAK;MACb;IACF,CAAC;IAAA,SAbDkD,eAAeA,CAAA;MAAA,OAAAC,gBAAA,CAAAnC,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAfiC,eAAe;EAAA;AAcjB,CAAC;AAAC,IAAAG,QAAA,GAAAtE,OAAA,CAAAyB,OAAA,GAGaJ,WAAW","ignoreList":[]}