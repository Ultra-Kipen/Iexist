e76375a78521c18b9525541e5947cae2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _tagService = _interopRequireDefault(require("../services/api/tagService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function isValidApiTagResponse(response) {
  return response && response.data && Array.isArray(response.data.data) && response.data.data.every(function (tag) {
    return typeof tag === 'object' && typeof tag.tag_id === 'number' && typeof tag.name === 'string';
  });
}
var TagSearchInput = function TagSearchInput(_ref) {
  var onTagSelect = _ref.onTagSelect,
    _ref$selectedTags = _ref.selectedTags,
    selectedTags = _ref$selectedTags === void 0 ? [] : _ref$selectedTags,
    _ref$placeholder = _ref.placeholder,
    placeholder = _ref$placeholder === void 0 ? '태그를 검색하세요' : _ref$placeholder,
    _ref$maxTags = _ref.maxTags,
    maxTags = _ref$maxTags === void 0 ? 5 : _ref$maxTags;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    searchText = _useState2[0],
    setSearchText = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    tags = _useState4[0],
    setTags = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    filteredTags = _useState6[0],
    setFilteredTags = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    loading = _useState8[0],
    setLoading = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isDropdownVisible = _useState10[0],
    setIsDropdownVisible = _useState10[1];
  var _useState11 = (0, _react.useState)(null),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    error = _useState12[0],
    setError = _useState12[1];
  var inputRef = (0, _react.useRef)(null);
  var selectedTagIds = (0, _react.useMemo)(function () {
    return selectedTags.map(function (tag) {
      return tag.tag_id;
    });
  }, [selectedTags]);
  var fetchTags = (0, _react.useCallback)((0, _asyncToGenerator2.default)(function* () {
    try {
      setLoading(true);
      setError(null);
      var response = yield _tagService.default.getAllTags();
      if (isValidApiTagResponse(response)) {
        setTags(response.data.data);
      } else {
        throw new Error('유효하지 않은 태그 응답 형식');
      }
      setLoading(false);
    } catch (error) {
      console.error('태그 가져오기 오류:', error);
      setError('태그 목록을 불러오는데 실패했습니다.');
      var fallbackTags = [{
        tag_id: 1,
        name: '일상'
      }, {
        tag_id: 2,
        name: '감정'
      }];
      setTags(fallbackTags);
      setLoading(false);
    }
  }), []);
  (0, _react.useEffect)(function () {
    fetchTags();
  }, [fetchTags]);
  var handleSearchChange = function handleSearchChange(text) {
    setSearchText(text);
    if (text.trim() === '') {
      setFilteredTags([]);
      setIsDropdownVisible(false);
    } else {
      var filtered = tags.filter(function (tag) {
        return tag.name.toLowerCase().includes(text.toLowerCase()) && !selectedTagIds.includes(tag.tag_id);
      });
      setFilteredTags(filtered);
      setIsDropdownVisible(true);
    }
  };
  var handleTagPress = function handleTagPress(tag) {
    if (selectedTags.length >= maxTags) {
      return;
    }
    onTagSelect(tag);
    setSearchText('');
    setFilteredTags([]);
    setIsDropdownVisible(false);
    if (inputRef.current) {
      inputRef.current.focus();
    }
  };
  var handleCreateTag = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (searchText.trim().length < 2) {
        return;
      }
      try {
        setLoading(true);
        var response = yield _tagService.default.createTag(searchText.trim());
        if (response && response.data && response.data.data) {
          var newTag = {
            tag_id: response.data.data.tag_id,
            name: response.data.data.name
          };
          setTags(function (prevTags) {
            return [].concat((0, _toConsumableArray2.default)(prevTags), [newTag]);
          });
          onTagSelect(newTag);
          setSearchText('');
          setFilteredTags([]);
          setIsDropdownVisible(false);
        } else {
          throw new Error('유효하지 않은 태그 생성 응답');
        }
        setLoading(false);
      } catch (error) {
        console.error('태그 생성 오류:', error);
        setError('태그 생성에 실패했습니다.');
        setLoading(false);
      }
    });
    return function handleCreateTag() {
      return _ref3.apply(this, arguments);
    };
  }();
  (0, _react.useEffect)(function () {
    var hideDropdown = function hideDropdown() {
      setIsDropdownVisible(false);
    };
    return function () {};
  }, []);
  var renderTagItem = function renderTagItem(tag) {
    return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.dropdownItem,
      onPress: function onPress() {
        return handleTagPress(tag);
      },
      children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.dropdownItemText,
        children: ["#", tag.name]
      })
    }, tag.tag_id.toString());
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [error && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.errorText,
      children: error
    }), selectedTags.length >= maxTags ? (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.maxTagsText,
      children: ["\uCD5C\uB300 ", maxTags, "\uAC1C\uC758 \uD0DC\uADF8\uAE4C\uC9C0 \uC120\uD0DD\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4."]
    }) : (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        ref: inputRef,
        style: styles.input,
        value: searchText,
        onChangeText: handleSearchChange,
        placeholder: selectedTags.length === 0 ? placeholder : `태그 추가 (${selectedTags.length}/${maxTags})`,
        onFocus: function onFocus() {
          return searchText.trim() !== '' && setIsDropdownVisible(true);
        },
        onSubmitEditing: function onSubmitEditing() {
          if (filteredTags.length > 0) {
            handleTagPress(filteredTags[0]);
          } else if (searchText.trim() !== '') {
            handleCreateTag();
          }
        }
      }), loading && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.loading,
        children: (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
          size: "small",
          color: "#4A6572"
        })
      }), isDropdownVisible && searchText.trim() !== '' && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.dropdown,
        children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
          style: styles.dropdownList,
          children: filteredTags.length > 0 ? filteredTags.map(function (tag) {
            return renderTagItem(tag);
          }) : searchText.trim().length >= 2 ? (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: styles.createTagButton,
            onPress: handleCreateTag,
            children: (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: styles.createTagText,
              children: ["\"", searchText, "\" \uD0DC\uADF8 \uB9CC\uB4E4\uAE30"]
            })
          }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.noResultsText,
            children: "\uAC80\uC0C9 \uACB0\uACFC\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4. 2\uC790 \uC774\uC0C1 \uC785\uB825\uD558\uC5EC \uC0C8 \uD0DC\uADF8\uB97C \uB9CC\uB4E4 \uC218 \uC788\uC2B5\uB2C8\uB2E4."
          })
        })
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%'
  },
  input: {
    height: 48,
    borderWidth: 1,
    borderColor: '#E1E8ED',
    borderRadius: 8,
    paddingHorizontal: 12,
    fontSize: 16,
    backgroundColor: '#F8F9FA'
  },
  maxTagsText: {
    fontSize: 14,
    color: '#657786',
    marginTop: 8,
    fontStyle: 'italic'
  },
  errorText: {
    fontSize: 14,
    color: '#D32F2F',
    marginBottom: 8
  },
  dropdown: {
    position: 'absolute',
    top: 52,
    left: 0,
    right: 0,
    maxHeight: 200,
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#E1E8ED',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    zIndex: 1000
  },
  dropdownList: {
    maxHeight: 200
  },
  dropdownItem: {
    padding: 12,
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth,
    borderBottomColor: '#E1E8ED'
  },
  dropdownItemText: {
    fontSize: 14,
    color: '#14171A'
  },
  createTagButton: {
    padding: 12,
    backgroundColor: '#F2F7FA'
  },
  createTagText: {
    fontSize: 14,
    color: '#4A6572',
    fontWeight: '600'
  },
  noResultsText: {
    padding: 12,
    fontSize: 14,
    color: '#657786',
    fontStyle: 'italic',
    textAlign: 'center'
  },
  loading: {
    position: 'absolute',
    right: 12,
    top: 14
  }
});
var _default = exports.default = TagSearchInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,