a36f4876b4fbe6c0d217016a4eee834f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureStateManager = void 0;
var _reanimatedWrapper = require("./reanimatedWrapper");
var _State = require("../../State");
var _utils = require("../../utils");
var warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');
var REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;
var setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;
function create(handlerTag) {
  'worklet';

  return {
    begin: function begin() {
      'worklet';

      if (REANIMATED_AVAILABLE) {
        setGestureState(handlerTag, _State.State.BEGAN);
      } else {
        console.warn(warningMessage);
      }
    },
    activate: function activate() {
      'worklet';

      if (REANIMATED_AVAILABLE) {
        setGestureState(handlerTag, _State.State.ACTIVE);
      } else {
        console.warn(warningMessage);
      }
    },
    fail: function fail() {
      'worklet';

      if (REANIMATED_AVAILABLE) {
        setGestureState(handlerTag, _State.State.FAILED);
      } else {
        console.warn(warningMessage);
      }
    },
    end: function end() {
      'worklet';

      if (REANIMATED_AVAILABLE) {
        setGestureState(handlerTag, _State.State.END);
      } else {
        console.warn(warningMessage);
      }
    }
  };
}
var GestureStateManager = {
  create: create
};
exports.GestureStateManager = GestureStateManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhbmltYXRlZFdyYXBwZXIiLCJyZXF1aXJlIiwiX1N0YXRlIiwiX3V0aWxzIiwid2FybmluZ01lc3NhZ2UiLCJ0YWdNZXNzYWdlIiwiUkVBTklNQVRFRF9BVkFJTEFCTEUiLCJSZWFuaW1hdGVkIiwidXNlU2hhcmVkVmFsdWUiLCJ1bmRlZmluZWQiLCJzZXRHZXN0dXJlU3RhdGUiLCJjcmVhdGUiLCJoYW5kbGVyVGFnIiwiYmVnaW4iLCJTdGF0ZSIsIkJFR0FOIiwiY29uc29sZSIsIndhcm4iLCJhY3RpdmF0ZSIsIkFDVElWRSIsImZhaWwiLCJGQUlMRUQiLCJlbmQiLCJFTkQiLCJHZXN0dXJlU3RhdGVNYW5hZ2VyIl0sInNvdXJjZXMiOlsiZ2VzdHVyZVN0YXRlTWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFuaW1hdGVkIH0gZnJvbSAnLi9yZWFuaW1hdGVkV3JhcHBlcic7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4uLy4uL1N0YXRlJztcbmltcG9ydCB7IHRhZ01lc3NhZ2UgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VzdHVyZVN0YXRlTWFuYWdlclR5cGUge1xuICBiZWdpbjogKCkgPT4gdm9pZDtcbiAgYWN0aXZhdGU6ICgpID0+IHZvaWQ7XG4gIGZhaWw6ICgpID0+IHZvaWQ7XG4gIGVuZDogKCkgPT4gdm9pZDtcbn1cblxuY29uc3Qgd2FybmluZ01lc3NhZ2UgPSB0YWdNZXNzYWdlKFxuICAncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgaXMgcmVxdWlyZWQgaW4gb3JkZXIgdG8gdXNlIHN5bmNocm9ub3VzIHN0YXRlIG1hbmFnZW1lbnQnXG4pO1xuXG4vLyBDaGVjayBpZiByZWFuaW1hdGVkIG1vZHVsZSBpcyBhdmFpbGFibGUsIGJ1dCBsb29rIGZvciB1c2VTaGFyZWRWYWx1ZSBhcyBjb25kaXRpb25hbFxuLy8gcmVxdWlyZSBvZiByZWFuaW1hdGVkIGNhbiBzb21ldGltZXMgcmV0dXJuIGNvbnRlbnQgb2YgYHV0aWxzLnRzYCBmaWxlICg/KVxuY29uc3QgUkVBTklNQVRFRF9BVkFJTEFCTEUgPSBSZWFuaW1hdGVkPy51c2VTaGFyZWRWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuY29uc3Qgc2V0R2VzdHVyZVN0YXRlID0gUmVhbmltYXRlZD8uc2V0R2VzdHVyZVN0YXRlO1xuXG5mdW5jdGlvbiBjcmVhdGUoaGFuZGxlclRhZzogbnVtYmVyKTogR2VzdHVyZVN0YXRlTWFuYWdlclR5cGUge1xuICAnd29ya2xldCc7XG4gIHJldHVybiB7XG4gICAgYmVnaW46ICgpID0+IHtcbiAgICAgICd3b3JrbGV0JztcbiAgICAgIGlmIChSRUFOSU1BVEVEX0FWQUlMQUJMRSkge1xuICAgICAgICAvLyBXaGVuIFJlYW5pbWF0ZWQgaXMgYXZhaWxhYmxlLCBzZXRHZXN0dXJlU3RhdGUgc2hvdWxkIGJlIGRlZmluZWRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgc2V0R2VzdHVyZVN0YXRlIShoYW5kbGVyVGFnLCBTdGF0ZS5CRUdBTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhY3RpdmF0ZTogKCkgPT4ge1xuICAgICAgJ3dvcmtsZXQnO1xuICAgICAgaWYgKFJFQU5JTUFURURfQVZBSUxBQkxFKSB7XG4gICAgICAgIC8vIFdoZW4gUmVhbmltYXRlZCBpcyBhdmFpbGFibGUsIHNldEdlc3R1cmVTdGF0ZSBzaG91bGQgYmUgZGVmaW5lZFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBzZXRHZXN0dXJlU3RhdGUhKGhhbmRsZXJUYWcsIFN0YXRlLkFDVElWRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBmYWlsOiAoKSA9PiB7XG4gICAgICAnd29ya2xldCc7XG4gICAgICBpZiAoUkVBTklNQVRFRF9BVkFJTEFCTEUpIHtcbiAgICAgICAgLy8gV2hlbiBSZWFuaW1hdGVkIGlzIGF2YWlsYWJsZSwgc2V0R2VzdHVyZVN0YXRlIHNob3VsZCBiZSBkZWZpbmVkXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIHNldEdlc3R1cmVTdGF0ZSEoaGFuZGxlclRhZywgU3RhdGUuRkFJTEVEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybih3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGVuZDogKCkgPT4ge1xuICAgICAgJ3dvcmtsZXQnO1xuICAgICAgaWYgKFJFQU5JTUFURURfQVZBSUxBQkxFKSB7XG4gICAgICAgIC8vIFdoZW4gUmVhbmltYXRlZCBpcyBhdmFpbGFibGUsIHNldEdlc3R1cmVTdGF0ZSBzaG91bGQgYmUgZGVmaW5lZFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBzZXRHZXN0dXJlU3RhdGUhKGhhbmRsZXJUYWcsIFN0YXRlLkVORCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBHZXN0dXJlU3RhdGVNYW5hZ2VyID0ge1xuICBjcmVhdGUsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxrQkFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBU0EsSUFBTUcsY0FBYyxHQUFHLElBQUFELE1BQUEsQ0FBQUUsVUFBQSxFQUNyQixrRkFEcUIsQ0FBdkI7QUFNQSxJQUFNQyxvQkFBb0IsR0FBRyxDQUFBTixrQkFBQSxDQUFBTyxVQUFBLGFBQUFQLGtCQUFBLENBQUFPLFVBQUEsdUJBQUFQLGtCQUFBLENBQUFPLFVBQUEsQ0FBWUMsY0FBWixNQUErQkMsU0FBNUQ7QUFDQSxJQUFNQyxlQUFlLEdBQUdWLGtCQUFBLENBQUFPLFVBQUgsYUFBR1Asa0JBQUEsQ0FBQU8sVUFBSCx1QkFBR1Asa0JBQUEsQ0FBQU8sVUFBQSxDQUFZRyxlQUFwQztBQUVBLFNBQVNDLE1BQVRBLENBQWdCQyxVQUFoQixFQUE2RDtFQUMzRDs7RUFDQSxPQUFPO0lBQ0xDLEtBQUssRUFBRSxTQUFQQSxLQUFLQSxDQUFBLEVBQVE7TUFDWDs7TUFDQSxJQUFJUCxvQkFBSixFQUEwQjtRQUd4QkksZUFBZSxDQUFFRSxVQUFGLEVBQWNWLE1BQUEsQ0FBQVksS0FBQSxDQUFNQyxLQUFwQixDQUFmO01BQ0QsQ0FKRCxNQUlPO1FBQ0xDLE9BQU8sQ0FBQ0MsSUFBUixDQUFhYixjQUFiO01BQ0Q7SUFDRixDQVZJO0lBWUxjLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBLEVBQVE7TUFDZDs7TUFDQSxJQUFJWixvQkFBSixFQUEwQjtRQUd4QkksZUFBZSxDQUFFRSxVQUFGLEVBQWNWLE1BQUEsQ0FBQVksS0FBQSxDQUFNSyxNQUFwQixDQUFmO01BQ0QsQ0FKRCxNQUlPO1FBQ0xILE9BQU8sQ0FBQ0MsSUFBUixDQUFhYixjQUFiO01BQ0Q7SUFDRixDQXJCSTtJQXVCTGdCLElBQUksRUFBRSxTQUFOQSxJQUFJQSxDQUFBLEVBQVE7TUFDVjs7TUFDQSxJQUFJZCxvQkFBSixFQUEwQjtRQUd4QkksZUFBZSxDQUFFRSxVQUFGLEVBQWNWLE1BQUEsQ0FBQVksS0FBQSxDQUFNTyxNQUFwQixDQUFmO01BQ0QsQ0FKRCxNQUlPO1FBQ0xMLE9BQU8sQ0FBQ0MsSUFBUixDQUFhYixjQUFiO01BQ0Q7SUFDRixDQWhDSTtJQWtDTGtCLEdBQUcsRUFBRSxTQUFMQSxHQUFHQSxDQUFBLEVBQVE7TUFDVDs7TUFDQSxJQUFJaEIsb0JBQUosRUFBMEI7UUFHeEJJLGVBQWUsQ0FBRUUsVUFBRixFQUFjVixNQUFBLENBQUFZLEtBQUEsQ0FBTVMsR0FBcEIsQ0FBZjtNQUNELENBSkQsTUFJTztRQUNMUCxPQUFPLENBQUNDLElBQVIsQ0FBYWIsY0FBYjtNQUNEO0lBQ0Y7RUEzQ0ksQ0FBUDtBQTZDRDtBQUVNLElBQU1vQixtQkFBbUIsR0FBRztFQUNqQ2IsTUFBQSxFQUFBQTtBQURpQyxDQUE1QiIsImlnbm9yZUxpc3QiOltdfQ==