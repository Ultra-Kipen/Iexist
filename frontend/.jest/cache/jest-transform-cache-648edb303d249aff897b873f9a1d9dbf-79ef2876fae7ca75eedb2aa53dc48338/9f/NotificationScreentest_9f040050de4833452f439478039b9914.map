{"version":3,"names":["_getJestObj","mock","useNavigation","navigate","jest","fn","goBack","getNotifications","markAsRead","markAllAsRead","getUnreadCount","deleteNotification","alert","_interopRequireDefault","require","_react","_reactNative","_NotificationScreen","_reactNative2","_notificationService","_jsxRuntime","_require","mockNotifications","id","user_id","content","notification_type","related_id","is_read","created_at","Date","toISOString","now","MockedNotificationScreen","props","jsx","default","Object","assign","describe","beforeEach","clearAllMocks","notificationService","mockResolvedValue","data","pagination","page","limit","total","success","count","it","_render","render","UNSAFE_getByType","getByText","rerender","expect","toBeTruthy","toHaveBeenCalled","testNotifications","testLoading","fireEvent","press","Alert","toHaveBeenCalledWith","testError","buttonComponent","title","toBe"],"sources":["NotificationScreen.test.tsx"],"sourcesContent":["// __tests__/screens/NotificationScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport NotificationScreen from '../../src/screens/NotificationScreen';\r\nimport { Alert } from 'react-native';\r\n\r\n// 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n  }),\r\n}));\r\n\r\n// API 서비스 모킹\r\njest.mock('../../src/services/api/notificationService', () => ({\r\n  getNotifications: jest.fn(),\r\n  markAsRead: jest.fn(),\r\n  markAllAsRead: jest.fn(),\r\n  getUnreadCount: jest.fn(),\r\n  deleteNotification: jest.fn(),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 컴포넌트 모킹\r\njest.mock('../../src/components/LoadingIndicator', () => 'LoadingIndicator');\r\njest.mock('../../src/components/Button', () => 'Button');\r\n\r\n// 테스트에 필요한 모듈 가져오기\r\nimport notificationService from '../../src/services/api/notificationService';\r\n\r\n// 테스트 데이터\r\nconst mockNotifications = [\r\n  {\r\n    id: 1,\r\n    user_id: 101,\r\n    content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',\r\n    notification_type: 'like',\r\n    related_id: 101,\r\n    is_read: false,\r\n    created_at: new Date().toISOString(),\r\n  },\r\n  {\r\n    id: 2,\r\n    user_id: 102,\r\n    content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',\r\n    notification_type: 'comment',\r\n    related_id: 102,\r\n    is_read: true,\r\n    created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1일 전\r\n  },\r\n  {\r\n    id: 3,\r\n    user_id: 103,\r\n    content: '행복 챌린지가 시작되었습니다.',\r\n    notification_type: 'challenge',\r\n    related_id: 5,\r\n    is_read: false,\r\n    created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(), // 3일 전\r\n  },\r\n];\r\n\r\n// 테스트용으로 수정된 NotificationScreen\r\nconst MockedNotificationScreen = (props) => {\r\n  return <NotificationScreen {...props} />;\r\n};\r\n\r\ndescribe('NotificationScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 기본 API 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: mockNotifications,\r\n      pagination: { page: 1, limit: 20, total: 3 }\r\n    });\r\n    \r\n    (notificationService.markAsRead as jest.Mock).mockResolvedValue({ success: true });\r\n    (notificationService.markAllAsRead as jest.Mock).mockResolvedValue({ success: true, count: 5 });\r\n  });\r\n\r\n  it('loads and interacts with notifications correctly', () => {\r\n    // 1. 초기 로딩 상태 테스트\r\n    const { UNSAFE_getByType, getByText, rerender } = render(<NotificationScreen />);\r\n    \r\n    // 로딩 상태 확인 - LoadingIndicator 컴포넌트가 있는지 확인\r\n    expect(UNSAFE_getByType('LoadingIndicator')).toBeTruthy();\r\n    \r\n    // API 호출 확인\r\n    expect(notificationService.getNotifications).toHaveBeenCalled();\r\n    \r\n    // 2. 데이터가 있는 상태 시뮬레이션\r\n    rerender(\r\n      <MockedNotificationScreen \r\n        testNotifications={mockNotifications} \r\n        testLoading={false} \r\n      />\r\n    );\r\n    \r\n    // 헤더 확인\r\n    expect(getByText('알림')).toBeTruthy();\r\n    expect(getByText('모두 읽음')).toBeTruthy();\r\n    \r\n    // 3. 모두 읽음 기능 테스트\r\n    fireEvent.press(getByText('모두 읽음'));\r\n    expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n    expect(Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');\r\n    \r\n    // 4. 빈 데이터 상태 테스트\r\n    rerender(\r\n      <MockedNotificationScreen \r\n        testNotifications={[]} \r\n        testLoading={false}\r\n      />\r\n    );\r\n    \r\n    // 빈 상태 메시지 확인\r\n    expect(getByText('알림이 없습니다.')).toBeTruthy();\r\n    \r\n    // 5. 오류 상태 테스트\r\n    rerender(\r\n      <MockedNotificationScreen \r\n        testError=\"알림을 불러오는 중 오류가 발생했습니다.\" \r\n        testLoading={false}\r\n      />\r\n    );\r\n    \r\n    // 오류 메시지 확인\r\n    expect(getByText('알림을 불러오는 중 오류가 발생했습니다.')).toBeTruthy();\r\n    const buttonComponent = UNSAFE_getByType('Button');\r\n    expect(buttonComponent.props.title).toBe('다시 시도');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}