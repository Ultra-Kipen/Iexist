7f7ac7e8aab88b5e6a6c0a4e44d4a884
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
function validateUsername(username) {
  if (!username) {
    return '사용자 이름을 입력해주세요';
  } else if (username.length < 2) {
    return '사용자 이름은 최소 2자 이상이어야 합니다';
  }
  return undefined;
}
function validateEmail(email) {
  if (!email) {
    return '이메일을 입력해주세요';
  } else if (!/\S+@\S+\.\S+/.test(email)) {
    return '유효한 이메일 주소를 입력해주세요';
  }
  return undefined;
}
function validatePassword(password) {
  if (!password) {
    return '비밀번호를 입력해주세요';
  } else if (password.length < 6) {
    return '비밀번호는 최소 6자 이상이어야 합니다';
  } else if (!/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/.test(password)) {
    return '비밀번호는 영문과 숫자를 포함해야 합니다';
  }
  return undefined;
}
function validateConfirmPassword(password, confirmPassword) {
  if (!confirmPassword) {
    return '비밀번호 확인을 입력해주세요';
  } else if (password !== confirmPassword) {
    return '비밀번호가 일치하지 않습니다';
  }
  return undefined;
}
function validateForm(username, email, password, confirmPassword) {
  var errors = {};
  var usernameError = validateUsername(username);
  if (usernameError) {
    errors.username = usernameError;
  }
  var emailError = validateEmail(email);
  if (emailError) {
    errors.email = emailError;
  }
  var passwordError = validatePassword(password);
  if (passwordError) {
    errors.password = passwordError;
  }
  var confirmPasswordError = validateConfirmPassword(password, confirmPassword);
  if (confirmPasswordError) {
    errors.confirmPassword = confirmPasswordError;
  }
  return {
    isValid: Object.keys(errors).length === 0,
    errors: errors
  };
}
function handleRegister(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {
  return _handleRegister.apply(this, arguments);
}
function _handleRegister() {
  _handleRegister = (0, _asyncToGenerator2.default)(function* (username, email, password, confirmPassword, onSuccess, onError, setIsLoading, register) {
    var _validateForm = validateForm(username, email, password, confirmPassword),
      isValid = _validateForm.isValid,
      errors = _validateForm.errors;
    if (!isValid) {
      return;
    }
    setIsLoading(true);
    try {
      yield register({
        username: username,
        email: email,
        password: password
      });
      onSuccess();
    } catch (error) {
      onError(error);
    } finally {
      setIsLoading(false);
    }
  });
  return _handleRegister.apply(this, arguments);
}
describe('RegisterScreen 유틸리티 함수', function () {
  describe('유저네임 검증', function () {
    it('빈 유저네임을 입력했을 때 에러 메시지 반환', function () {
      expect(validateUsername('')).toBe('사용자 이름을 입력해주세요');
    });
    it('너무 짧은 유저네임을 입력했을 때 에러 메시지 반환', function () {
      expect(validateUsername('a')).toBe('사용자 이름은 최소 2자 이상이어야 합니다');
    });
    it('유효한 유저네임을 입력했을 때 undefined 반환', function () {
      expect(validateUsername('testuser')).toBeUndefined();
    });
  });
  describe('이메일 검증', function () {
    it('빈 이메일을 입력했을 때 에러 메시지 반환', function () {
      expect(validateEmail('')).toBe('이메일을 입력해주세요');
    });
    it('유효하지 않은 이메일 형식일 때 에러 메시지 반환', function () {
      expect(validateEmail('invalidEmail')).toBe('유효한 이메일 주소를 입력해주세요');
      expect(validateEmail('invalid@email')).toBe('유효한 이메일 주소를 입력해주세요');
      expect(validateEmail('invalid@.com')).toBe('유효한 이메일 주소를 입력해주세요');
    });
    it('유효한 이메일 형식일 때 undefined 반환', function () {
      expect(validateEmail('valid@email.com')).toBeUndefined();
      expect(validateEmail('test.user@example.co.kr')).toBeUndefined();
    });
  });
  describe('비밀번호 검증', function () {
    it('빈 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      expect(validatePassword('')).toBe('비밀번호를 입력해주세요');
    });
    it('짧은 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      expect(validatePassword('12345')).toBe('비밀번호는 최소 6자 이상이어야 합니다');
    });
    it('숫자만 포함한 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      expect(validatePassword('123456')).toBe('비밀번호는 영문과 숫자를 포함해야 합니다');
    });
    it('영문만 포함한 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      expect(validatePassword('abcdef')).toBe('비밀번호는 영문과 숫자를 포함해야 합니다');
    });
    it('유효한 비밀번호를 입력했을 때 undefined 반환', function () {
      expect(validatePassword('abc123')).toBeUndefined();
      expect(validatePassword('password123')).toBeUndefined();
    });
  });
  describe('비밀번호 확인 검증', function () {
    it('빈 비밀번호 확인을 입력했을 때 에러 메시지 반환', function () {
      expect(validateConfirmPassword('password123', '')).toBe('비밀번호 확인을 입력해주세요');
    });
    it('비밀번호와 일치하지 않을 때 에러 메시지 반환', function () {
      expect(validateConfirmPassword('password123', 'different')).toBe('비밀번호가 일치하지 않습니다');
    });
    it('비밀번호와 일치할 때 undefined 반환', function () {
      expect(validateConfirmPassword('password123', 'password123')).toBeUndefined();
    });
  });
  describe('폼 검증', function () {
    it('빈 폼을 제출했을 때 모든 필드에 에러 메시지 반환', function () {
      var result = validateForm('', '', '', '');
      expect(result.isValid).toBe(false);
      expect(result.errors.username).toBe('사용자 이름을 입력해주세요');
      expect(result.errors.email).toBe('이메일을 입력해주세요');
      expect(result.errors.password).toBe('비밀번호를 입력해주세요');
      expect(result.errors.confirmPassword).toBe('비밀번호 확인을 입력해주세요');
    });
    it('유효하지 않은 이메일과 비밀번호를 입력했을 때 에러 메시지 반환', function () {
      var result = validateForm('testuser', 'invalid', 'abc', 'abc');
      expect(result.isValid).toBe(false);
      expect(result.errors.username).toBeUndefined();
      expect(result.errors.email).toBe('유효한 이메일 주소를 입력해주세요');
      expect(result.errors.password).toBe('비밀번호는 최소 6자 이상이어야 합니다');
      expect(result.errors.confirmPassword).toBeUndefined();
    });
    it('비밀번호와 확인이 일치하지 않을 때 에러 메시지 반환', function () {
      var result = validateForm('testuser', 'valid@email.com', 'password123', 'different');
      expect(result.isValid).toBe(false);
      expect(result.errors.username).toBeUndefined();
      expect(result.errors.email).toBeUndefined();
      expect(result.errors.password).toBeUndefined();
      expect(result.errors.confirmPassword).toBe('비밀번호가 일치하지 않습니다');
    });
    it('모든 필드가 유효할 때 폼 유효성 확인', function () {
      var result = validateForm('testuser', 'valid@email.com', 'password123', 'password123');
      expect(result.isValid).toBe(true);
      expect(result.errors).toEqual({});
    });
  });
  describe('회원가입 처리', function () {
    beforeEach(function () {
      jest.clearAllMocks();
    });
    it('유효하지 않은 폼을 제출했을 때 회원가입 시도하지 않음', (0, _asyncToGenerator2.default)(function* () {
      var onSuccess = jest.fn();
      var onError = jest.fn();
      var setIsLoading = jest.fn();
      var register = jest.fn();
      yield handleRegister('', '', '', '', onSuccess, onError, setIsLoading, register);
      expect(register).not.toHaveBeenCalled();
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(onSuccess).not.toHaveBeenCalled();
      expect(onError).not.toHaveBeenCalled();
    }));
    it('회원가입 성공 시 onSuccess 콜백 실행', (0, _asyncToGenerator2.default)(function* () {
      var onSuccess = jest.fn();
      var onError = jest.fn();
      var setIsLoading = jest.fn();
      var register = jest.fn().mockResolvedValue({
        success: true
      });
      yield handleRegister('testuser', 'valid@email.com', 'password123', 'password123', onSuccess, onError, setIsLoading, register);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      expect(register).toHaveBeenCalledWith({
        username: 'testuser',
        email: 'valid@email.com',
        password: 'password123'
      });
      expect(onSuccess).toHaveBeenCalled();
      expect(onError).not.toHaveBeenCalled();
      expect(setIsLoading).toHaveBeenCalledWith(false);
    }));
    it('회원가입 실패 시 onError 콜백 실행', (0, _asyncToGenerator2.default)(function* () {
      var onSuccess = jest.fn();
      var onError = jest.fn();
      var setIsLoading = jest.fn();
      var mockError = new Error('이미 존재하는 이메일입니다');
      var register = jest.fn().mockRejectedValue(mockError);
      yield handleRegister('testuser', 'valid@email.com', 'password123', 'password123', onSuccess, onError, setIsLoading, register);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      expect(register).toHaveBeenCalledWith({
        username: 'testuser',
        email: 'valid@email.com',
        password: 'password123'
      });
      expect(onSuccess).not.toHaveBeenCalled();
      expect(onError).toHaveBeenCalledWith(mockError);
      expect(setIsLoading).toHaveBeenCalledWith(false);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,