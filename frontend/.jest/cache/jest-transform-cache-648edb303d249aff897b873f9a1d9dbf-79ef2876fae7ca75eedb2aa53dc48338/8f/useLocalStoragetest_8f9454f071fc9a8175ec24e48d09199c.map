{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","Promise","resolve","removeItem","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_asyncStorage","_useLocalStorage","_require","describe","beforeEach","clearAllMocks","AsyncStorage","mockResolvedValue","it","default","mockImplementationOnce","_renderHook","renderHook","useLocalStorage","result","expect","toHaveBeenCalledWith","current","toBe","_renderHook2","act","initialObject","name","value","_renderHook3","updatedObject","JSON","stringify","_renderHook4","prev","toHaveBeenCalled","_renderHook5","storedObject","_renderHook6","console","error","reject","Error","_renderHook7","_renderHook8","_renderHook9","undefined","consoleErrorSpy","spyOn","mockImplementation","_renderHook10","catch","mockRestore"],"sources":["useLocalStorage.test.ts"],"sourcesContent":["// __tests__/hooks/useLocalStorage.test.ts\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { useLocalStorage } from '../../src/hooks/useLocalStorage';\r\n\r\n// AsyncStorage 모킹\r\njest.mock('@react-native-async-storage/async-storage', () => ({\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(() => Promise.resolve()),\r\n  removeItem: jest.fn(() => Promise.resolve()),\r\n}));\r\n\r\ndescribe('useLocalStorage', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    // 기본적으로 AsyncStorage.getItem은 null 반환 (값이 없음)\r\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);\r\n  });\r\n\r\n  it('should use initial value when storage is empty', async () => {\r\n    // AsyncStorage.getItem을 null 반환하도록 설정 (값이 저장소에 없음)\r\n    (AsyncStorage.getItem as jest.Mock).mockImplementationOnce(() => Promise.resolve(null));\r\n    \r\n    const { result } = renderHook(() => useLocalStorage('testKey', 'initialValue'));\r\n    \r\n    // AsyncStorage.getItem 호출 확인\r\n    expect(AsyncStorage.getItem).toHaveBeenCalledWith('testKey');\r\n    \r\n    // 초기값 사용 확인 (비동기 작업이므로 실제 값 확인은 어려울 수 있음)\r\n    expect(result.current[0]).toBe('initialValue');\r\n  });\r\n\r\n  it('should allow setting new values', async () => {\r\n    const { result } = renderHook(() => useLocalStorage('testKey', 'initialValue'));\r\n    \r\n    // setValue 함수 호출\r\n    await act(async () => {\r\n      await result.current[1]('newValue');\r\n    });\r\n    \r\n    // AsyncStorage.setItem 호출 확인\r\n    expect(AsyncStorage.setItem).toHaveBeenCalledWith('testKey', 'newValue');\r\n  });\r\n\r\n  it('should save objects as JSON', async () => {\r\n    const initialObject = { name: 'Initial', value: 1 };\r\n    const { result } = renderHook(() => useLocalStorage('testKey', initialObject));\r\n    \r\n    const updatedObject = { name: 'Updated', value: 2 };\r\n    \r\n    await act(async () => {\r\n      await result.current[1](updatedObject);\r\n    });\r\n    \r\n    // JSON으로 저장되는지 확인\r\n    expect(AsyncStorage.setItem).toHaveBeenCalledWith('testKey', JSON.stringify(updatedObject));\r\n  });\r\n\r\n  it('should support functional updates', async () => {\r\n    // 초기값으로 문자열 설정\r\n    const { result } = renderHook(() => useLocalStorage<string>('testKey', 'initial'));\r\n    \r\n    // 함수형 업데이트\r\n    await act(async () => {\r\n      await result.current[1]((prev) => `${prev}Updated`);\r\n    });\r\n    \r\n    // 함수형 업데이트가 처리되는지 확인\r\n    expect(AsyncStorage.setItem).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should provide a remove function', async () => {\r\n    const { result } = renderHook(() => useLocalStorage('testKey', 'initialValue'));\r\n    \r\n    // removeValue 함수 호출\r\n    await act(async () => {\r\n      await result.current[2]();\r\n    });\r\n    \r\n    // AsyncStorage.removeItem 호출 확인\r\n    expect(AsyncStorage.removeItem).toHaveBeenCalledWith('testKey');\r\n  });\r\n\r\n  it('should parse stored JSON values', async () => {\r\n    // JSON 문자열 형태로 저장된 값 모킹\r\n    const storedObject = { name: 'Stored', value: 99 };\r\n    (AsyncStorage.getItem as jest.Mock).mockImplementationOnce(() => \r\n      Promise.resolve(JSON.stringify(storedObject))\r\n    );\r\n    \r\n    // 훅 렌더링\r\n    const { result } = renderHook(() => useLocalStorage('testKey', { name: 'Default', value: 0 }));\r\n    \r\n    // AsyncStorage.getItem 호출 확인\r\n    expect(AsyncStorage.getItem).toHaveBeenCalledWith('testKey');\r\n  });\r\n  \r\n  it('should handle plain strings from storage', async () => {\r\n    // 일반 문자열 반환하도록 설정\r\n    (AsyncStorage.getItem as jest.Mock).mockImplementationOnce(() => \r\n      Promise.resolve('plainString')\r\n    );\r\n    \r\n    // 훅 렌더링\r\n    renderHook(() => useLocalStorage('testKey', ''));\r\n    \r\n    // AsyncStorage.getItem 호출 확인\r\n    expect(AsyncStorage.getItem).toHaveBeenCalledWith('testKey');\r\n  });\r\n  \r\n  it('should handle errors when reading from storage', async () => {\r\n    // AsyncStorage.getItem에서 에러 발생하도록 설정\r\n    console.error = jest.fn(); // 직접 console.error를 모킹\r\n    \r\n    (AsyncStorage.getItem as jest.Mock).mockImplementationOnce(() => \r\n      Promise.reject(new Error('Storage read error'))\r\n    );\r\n    \r\n    // 훅 렌더링\r\n    const { result } = renderHook(() => useLocalStorage('testKey', 'fallback'));\r\n    \r\n    // 초기값 사용 확인\r\n    expect(result.current[0]).toBe('fallback');\r\n    \r\n    // console.error가 호출되었는지는 검증하지 않음\r\n    // 실제 구현에서 에러 로깅을 다르게 처리할 수 있음\r\n    \r\n    // 원래의 console.error 복원\r\n    console.error = console.error;\r\n  });\r\n  \r\n  \r\n  it('should handle removing non-existent items', async () => {\r\n    const { result } = renderHook(() => useLocalStorage('testKey', 'initialValue'));\r\n    \r\n    // AsyncStorage.removeItem이 실행되어도 에러가 발생하지 않도록 설정\r\n    (AsyncStorage.removeItem as jest.Mock).mockImplementationOnce(() => Promise.resolve());\r\n    \r\n    // removeValue 함수 호출\r\n    await act(async () => {\r\n      await result.current[2]();\r\n    });\r\n    \r\n    // AsyncStorage.removeItem 호출 확인\r\n    expect(AsyncStorage.removeItem).toHaveBeenCalledWith('testKey');\r\n  });\r\n\r\n  it('should handle undefined values', async () => {\r\n    const { result } = renderHook(() => useLocalStorage<string | undefined>('testKey', 'initialValue'));\r\n    \r\n    // undefined 저장 시도\r\n    await act(async () => {\r\n      await result.current[1](undefined);\r\n    });\r\n    \r\n    // undefined 저장 시 removeItem이 호출되어야 함\r\n    expect(AsyncStorage.removeItem).toHaveBeenCalledWith('testKey');\r\n  });\r\n  \r\n  it('should handle errors when writing to storage', async () => {\r\n    // AsyncStorage.setItem에서 에러 발생하도록 설정\r\n    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n    (AsyncStorage.setItem as jest.Mock).mockImplementationOnce(() => \r\n      Promise.reject(new Error('Storage write error'))\r\n    );\r\n    \r\n    // 훅 렌더링\r\n    const { result } = renderHook(() => useLocalStorage('testKey', 'initial'));\r\n    \r\n    // setValue 함수 호출\r\n    await act(async () => {\r\n      await result.current[1]('newValue').catch(() => {});\r\n    });\r\n    \r\n    // console.error가 호출되었는지 확인\r\n    expect(consoleErrorSpy).toHaveBeenCalled();\r\n    \r\n    // 스파이 복원\r\n    consoleErrorSpy.mockRestore();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}