366be2c636c74f10dd5a25ee6e70d4a1
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    Text = _require.Text,
    View = _require.View;
  var createMockComponent = function createMockComponent(displayName) {
    var MockComponent = function MockComponent(_ref) {
      var children = _ref.children,
        title = _ref.title,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      if (title) {
        return React.createElement(Text, {
          testID: `${displayName}-title`
        }, title);
      }
      return React.createElement(Text, {
        testID: displayName
      }, children);
    };
    MockComponent.displayName = displayName;
    return MockComponent;
  };
  var Card = createMockComponent('Card');
  Card.Content = createMockComponent('Card.Content');
  Card.Actions = createMockComponent('Card.Actions');
  var Title = createMockComponent('Title');
  var Paragraph = createMockComponent('Paragraph');
  var Button = function Button(_ref2) {
    var children = _ref2.children,
      onPress = _ref2.onPress;
    return React.createElement(Text, {
      testID: 'Button',
      onPress: onPress
    }, children);
  };
  var ProgressBar = function ProgressBar() {
    return React.createElement(View, {
      testID: 'ProgressBar'
    });
  };
  var List = {
    Item: function Item(_ref3) {
      var title = _ref3.title,
        left = _ref3.left;
      return React.createElement(Text, {
        testID: 'List.Item'
      }, title);
    },
    Icon: function Icon(_ref4) {
      var icon = _ref4.icon;
      return React.createElement(Text, {
        testID: 'List.Icon'
      }, icon);
    }
  };
  return {
    Card: Card,
    Title: Title,
    Paragraph: Paragraph,
    Button: Button,
    ProgressBar: ProgressBar,
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee',
          background: '#ffffff'
        }
      };
    },
    Provider: function Provider(_ref5) {
      var children = _ref5.children;
      return React.createElement(View, {
        testID: 'Provider'
      }, children);
    },
    List: List
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ChallengeScreen = _interopRequireDefault(require("../../../src/screens/ChallengeScreen"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "title"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var createTestProps = function createTestProps() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.assign({
    navigation: {
      navigate: jest.fn()
    }
  }, props);
};
var mockConsoleLog = jest.fn();
console.log = mockConsoleLog;
describe('ChallengeScreen', function () {
  var props;
  var component;
  beforeEach(function () {
    props = createTestProps();
    component = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ChallengeScreen.default, Object.assign({}, props)));
    mockConsoleLog.mockClear();
  });
  it('renders correctly', function () {
    expect(component).toBeTruthy();
  });
  it('displays challenge titles', function () {
    var _component = component,
      queryAllByText = _component.queryAllByText;
    expect(queryAllByText('7일간의 감사 일기').length).toBeGreaterThan(0);
    expect(queryAllByText('30일 긍정 에너지 나누기').length).toBeGreaterThan(0);
    expect(queryAllByText('21일 명상 습관 만들기').length).toBeGreaterThan(0);
  });
  it('displays challenge descriptions', function () {
    var _component2 = component,
      queryAllByText = _component2.queryAllByText;
    expect(queryAllByText('매일 감사한 일 3가지를 기록해보세요.').length).toBeGreaterThan(0);
    expect(queryAllByText('하루에 한 번 주변 사람에게 긍정적인 말을 해보세요.').length).toBeGreaterThan(0);
    expect(queryAllByText('매일 10분씩 명상을 하고 느낀 점을 공유해보세요.').length).toBeGreaterThan(0);
  });
  it('displays participant counts correctly', function () {
    var _component3 = component,
      queryAllByText = _component3.queryAllByText;
    expect(queryAllByText('참여자: 128명').length).toBeGreaterThan(0);
    expect(queryAllByText('참여자: 56명').length).toBeGreaterThan(0);
    expect(queryAllByText('참여자: 89명').length).toBeGreaterThan(0);
  });
  it('displays challenge durations correctly', function () {
    var _component4 = component,
      queryAllByText = _component4.queryAllByText;
    expect(queryAllByText('기간: 7일').length).toBeGreaterThan(0);
    expect(queryAllByText('기간: 30일').length).toBeGreaterThan(0);
    expect(queryAllByText('기간: 21일').length).toBeGreaterThan(0);
  });
  it('displays progress percentages correctly', function () {
    var _component5 = component,
      queryAllByText = _component5.queryAllByText;
    expect(queryAllByText('40% 완료').length).toBeGreaterThan(0);
    expect(queryAllByText('20% 완료').length).toBeGreaterThan(0);
    expect(queryAllByText('60% 완료').length).toBeGreaterThan(0);
  });
  it('calls handleJoinChallenge with correct ID when button is pressed', function () {
    var _component6 = component,
      queryAllByText = _component6.queryAllByText;
    var joinButtons = queryAllByText('참여하기');
    expect(joinButtons.length).toBe(3);
    _reactNative.fireEvent.press(joinButtons[0]);
    expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 1);
    _reactNative.fireEvent.press(joinButtons[1]);
    expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 2);
    _reactNative.fireEvent.press(joinButtons[2]);
    expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 3);
  });
  it('displays the header text correctly', function () {
    var _component7 = component,
      queryAllByText = _component7.queryAllByText;
    expect(queryAllByText('현재 진행 중인 챌린지').length).toBeGreaterThan(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,