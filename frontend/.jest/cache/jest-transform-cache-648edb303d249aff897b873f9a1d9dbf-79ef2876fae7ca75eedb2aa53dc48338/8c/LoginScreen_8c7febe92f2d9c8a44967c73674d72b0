53907a1c9c5b03004f0eaa0240642333
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _AuthContext = require("../contexts/AuthContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var LoginScreen = function LoginScreen(_ref) {
  var navigation = _ref.navigation;
  var _useAuth = (0, _AuthContext.useAuth)(),
    login = _useAuth.login;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    email = _useState2[0],
    setEmail = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    password = _useState4[0],
    setPassword = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    isLoading = _useState6[0],
    setIsLoading = _useState6[1];
  var _useState7 = (0, _react.useState)({}),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    errors = _useState8[0],
    setErrors = _useState8[1];
  var validateForm = function validateForm() {
    var newErrors = {};
    if (!email) {
      newErrors.email = '이메일을 입력해주세요';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = '유효한 이메일 주소를 입력해주세요';
    }
    if (!password) {
      newErrors.password = '비밀번호를 입력해주세요';
    } else if (password.length < 6) {
      newErrors.password = '비밀번호는 최소 6자 이상이어야 합니다';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  var handleLogin = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!validateForm()) return;
      setIsLoading(true);
      try {
        yield login({
          email: email,
          password: password
        });
      } catch (error) {
        var _error$response;
        _reactNative.Alert.alert('로그인 실패', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '로그인 중 오류가 발생했습니다. 다시 시도해주세요.');
      } finally {
        setIsLoading(false);
      }
    });
    return function handleLogin() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      contentContainerStyle: styles.scrollView,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.form,
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.title,
          children: "IExist"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.subtitle,
          children: "\uB098\uB294 \uC874\uC7AC\uD55C\uB2E4."
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          label: "\uC774\uBA54\uC77C",
          value: email,
          onChangeText: setEmail,
          mode: "outlined",
          style: styles.input,
          keyboardType: "email-address",
          autoCapitalize: "none",
          error: !!errors.email
        }), errors.email && (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.errorText,
          children: errors.email
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          label: "\uBE44\uBC00\uBC88\uD638",
          value: password,
          onChangeText: setPassword,
          mode: "outlined",
          style: styles.input,
          secureTextEntry: true,
          error: !!errors.password
        }), errors.password && (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.errorText,
          children: errors.password
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          mode: "contained",
          onPress: handleLogin,
          style: styles.button,
          disabled: isLoading,
          children: isLoading ? (0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
            color: "#fff"
          }) : '로그인'
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          mode: "text",
          onPress: function onPress() {
            return navigation.navigate('ForgotPassword');
          },
          style: styles.textButton,
          children: "\uBE44\uBC00\uBC88\uD638\uB97C \uC78A\uC73C\uC168\uB098\uC694?"
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.registerContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
            children: "\uACC4\uC815\uC774 \uC5C6\uC73C\uC2E0\uAC00\uC694?"
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
            mode: "text",
            onPress: function onPress() {
              return navigation.navigate('Register');
            },
            style: styles.textButton,
            children: "\uD68C\uC6D0\uAC00\uC785"
          })]
        })]
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  scrollView: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20
  },
  form: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
    color: '#4a0e4e'
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 30,
    color: '#666'
  },
  input: {
    marginBottom: 8,
    backgroundColor: 'white'
  },
  errorText: {
    color: 'red',
    fontSize: 12,
    marginBottom: 10,
    marginLeft: 5
  },
  button: {
    marginTop: 16,
    paddingVertical: 8
  },
  textButton: {
    marginTop: 8
  },
  registerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 16
  }
});
var _default = exports.default = LoginScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,