{"version":3,"names":["_getJestObj","mock","_interopRequireDefault","require","_asyncToGenerator2","_client","_comfortWallService","_require","jest","describe","beforeEach","clearAllMocks","it","default","mockData","title","content","is_anonymous","tag_ids","apiClient","post","mockResolvedValue","data","result","comfortWallService","createPost","expect","toHaveBeenCalledWith","toEqual","params","page","limit","sort_by","tag","get","getPosts","undefined","period","getBestPosts","postId","message","sendMessage"],"sources":["comfortWallService.test.ts"],"sourcesContent":["// __tests__/unit/services/api/comfortWallService.test.ts\r\n\r\nimport apiClient from '../../../../src/services/api/client';\r\nimport comfortWallService, { ComfortWallPostData, ComfortMessageData } from '../../../../src/services/api/comfortWallService';\r\n\r\n// Mock apiClient\r\njest.mock('../../../../src/services/api/client');\r\n\r\ndescribe('comfortWallService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('createPost', () => {\r\n    it('should call apiClient.post with correct parameters', async () => {\r\n      const mockData: ComfortWallPostData = {\r\n        title: '테스트 제목',\r\n        content: '테스트 내용',\r\n        is_anonymous: true,\r\n        tag_ids: [1, 2, 3],\r\n      };\r\n\r\n      (apiClient.post as jest.Mock).mockResolvedValue({ data: 'success' });\r\n\r\n      const result = await comfortWallService.createPost(mockData);\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith('/comfort-wall', mockData);\r\n      expect(result).toEqual({ data: 'success' });\r\n    });\r\n  });\r\n\r\n  describe('getPosts', () => {\r\n    it('should call apiClient.get with correct parameters', async () => {\r\n      const params = { \r\n        page: 1, \r\n        limit: 10, \r\n        sort_by: 'latest' as const,\r\n        tag: 'test'\r\n      };\r\n\r\n      (apiClient.get as jest.Mock).mockResolvedValue({ data: ['post1', 'post2'] });\r\n\r\n      const result = await comfortWallService.getPosts(params);\r\n      \r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall', { params });\r\n      expect(result).toEqual({ data: ['post1', 'post2'] });\r\n    });\r\n\r\n    it('should call apiClient.get without parameters', async () => {\r\n      (apiClient.get as jest.Mock).mockResolvedValue({ data: ['post1', 'post2'] });\r\n\r\n      const result = await comfortWallService.getPosts();\r\n      \r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall', { params: undefined });\r\n      expect(result).toEqual({ data: ['post1', 'post2'] });\r\n    });\r\n  });\r\n\r\n  describe('getBestPosts', () => {\r\n    it('should call apiClient.get with correct parameters', async () => {\r\n      const params = { period: 'weekly' as const };\r\n\r\n      (apiClient.get as jest.Mock).mockResolvedValue({ data: ['bestPost1', 'bestPost2'] });\r\n\r\n      const result = await comfortWallService.getBestPosts(params);\r\n      \r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall/best', { params });\r\n      expect(result).toEqual({ data: ['bestPost1', 'bestPost2'] });\r\n    });\r\n\r\n    it('should call apiClient.get without parameters', async () => {\r\n      (apiClient.get as jest.Mock).mockResolvedValue({ data: ['bestPost1', 'bestPost2'] });\r\n\r\n      const result = await comfortWallService.getBestPosts();\r\n      \r\n      expect(apiClient.get).toHaveBeenCalledWith('/comfort-wall/best', { params: undefined });\r\n      expect(result).toEqual({ data: ['bestPost1', 'bestPost2'] });\r\n    });\r\n  });\r\n\r\n  describe('sendMessage', () => {\r\n    it('should call apiClient.post with correct parameters', async () => {\r\n      const postId = 123;\r\n      const mockData: ComfortMessageData = {\r\n        message: '테스트 메시지',\r\n        is_anonymous: true\r\n      };\r\n\r\n      (apiClient.post as jest.Mock).mockResolvedValue({ data: 'success' });\r\n\r\n      const result = await comfortWallService.sendMessage(postId, mockData);\r\n      \r\n      expect(apiClient.post).toHaveBeenCalledWith(`/comfort-wall/${postId}/message`, mockData);\r\n      expect(result).toEqual({ data: 'success' });\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}