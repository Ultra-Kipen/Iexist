{"version":3,"names":["_getJestObj","mock","useNavigation","jest","fn","useStore","_interopRequireDefault","require","_react","_reactNative","_withAuth","_native","_store","_reactNative2","_jsxRuntime","_require","describe","TestComponent","jsx","Text","testID","children","AuthenticatedComponent","withAuth","mockNavigate","beforeEach","clearAllMocks","mockReturnValue","navigate","test","state","isAuthenticated","_render","render","getByTestId","expect","toBeTruthy","not","toHaveBeenCalled","_render2","queryByTestId","toHaveBeenCalledWith","toBeNull","displayName","toBe","_render3","rerender"],"sources":["withAuth.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { withAuth } from '../../src/hoc/withAuth';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useStore } from '../../src/store';\r\nimport { Text } from 'react-native';\r\n\r\n// useNavigation 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: jest.fn(),\r\n}));\r\n\r\n// useStore 모킹\r\njest.mock('../../src/store', () => ({\r\n  useStore: jest.fn(),\r\n}));\r\n\r\ndescribe('withAuth HOC', () => {\r\n  // 테스트 컴포넌트\r\n  const TestComponent = () => <Text testID=\"authenticated-component\">인증된 컴포넌트</Text>;\r\n  const AuthenticatedComponent = withAuth(TestComponent);\r\n  \r\n  const mockNavigate = jest.fn();\r\n  \r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (useNavigation as jest.Mock).mockReturnValue({\r\n      navigate: mockNavigate,\r\n    });\r\n  });\r\n\r\n  test('인증된 경우 컴포넌트가 렌더링되어야 함', () => {\r\n    // 인증된 상태로 모킹\r\n    (useStore as jest.Mock).mockReturnValue({\r\n      state: { isAuthenticated: true },\r\n    });\r\n\r\n    const { getByTestId } = render(<AuthenticatedComponent />);\r\n    expect(getByTestId('authenticated-component')).toBeTruthy();\r\n    expect(mockNavigate).not.toHaveBeenCalled();\r\n  });\r\n\r\n  test('인증되지 않은 경우 로그인 화면으로 네비게이션되어야 함', () => {\r\n    // 인증되지 않은 상태로 모킹\r\n    (useStore as jest.Mock).mockReturnValue({\r\n      state: { isAuthenticated: false },\r\n    });\r\n\r\n    const { queryByTestId } = render(<AuthenticatedComponent />);\r\n    \r\n    expect(mockNavigate).toHaveBeenCalledWith('Login');\r\n    expect(queryByTestId('authenticated-component')).toBeNull();\r\n  });\r\n\r\n  test('HOC가 displayName을 올바르게 설정해야 함', () => {\r\n    expect(AuthenticatedComponent.displayName).toBe('withAuth(TestComponent)');\r\n  });\r\n\r\n  test('isAuthenticated 상태가 변경될 때 컴포넌트가 적절하게 리렌더링되어야 함', () => {\r\n    // 처음에는 인증되지 않은 상태\r\n    (useStore as jest.Mock).mockReturnValue({\r\n      state: { isAuthenticated: false },\r\n    });\r\n\r\n    const { queryByTestId, rerender } = render(<AuthenticatedComponent />);\r\n    expect(queryByTestId('authenticated-component')).toBeNull();\r\n    expect(mockNavigate).toHaveBeenCalledWith('Login');\r\n\r\n    // 인증된 상태로 변경\r\n    (useStore as jest.Mock).mockReturnValue({\r\n      state: { isAuthenticated: true },\r\n    });\r\n\r\n    rerender(<AuthenticatedComponent />);\r\n    expect(queryByTestId('authenticated-component')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}