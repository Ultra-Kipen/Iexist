1561dc2734e13b4b050e2b35d86e10f9
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  rn.Alert = {
    alert: jest.fn(function (title, message, buttons) {
      if (buttons && buttons.length > 1) {
        var confirmButton = buttons[1];
        if (confirmButton && confirmButton.onPress) {
          confirmButton.onPress();
        }
      }
    })
  };
  return rn;
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/goalService", function () {
  return {
    getGoals: jest.fn(),
    createGoal: jest.fn(),
    deleteGoal: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/datetimepicker', function () {
  return {
    __esModule: true,
    default: jest.fn(function () {
      return null;
    }),
    display: {
      default: 'default',
      spinner: 'spinner',
      calendar: 'calendar',
      clock: 'clock'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyGoalsScreen = _interopRequireDefault(require("../../src/screens/MyGoalsScreen"));
var _goalService = _interopRequireDefault(require("../../src/services/api/goalService"));
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockGoals = [{
  goal_id: 1,
  target_emotion_id: 1,
  emotion_name: '행복',
  emotion_color: '#FFD700',
  start_date: '2025-03-01',
  end_date: '2025-04-30',
  progress: 60
}, {
  goal_id: 2,
  target_emotion_id: 2,
  emotion_name: '편안함',
  emotion_color: '#32CD32',
  start_date: '2025-03-15',
  end_date: '2025-05-15',
  progress: 30
}];
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '편안함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
jest.setTimeout(30000);
describe('MyGoalsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _goalService.default.getGoals.mockResolvedValue({
      data: {
        data: mockGoals
      }
    });
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        data: mockEmotions
      }
    });
  });
  it('renders loading state initially', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('loading-indicator')).toBeTruthy();
  });
  it('renders goals list correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      getByText = _render2.getByText;
    _goalService.default.getGoals();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('나의 감정 목표')).toBeTruthy();
    }, {
      timeout: 15000
    });
  }), 15000);
  it('shows empty state when no goals', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockResolvedValue({
      data: {
        data: []
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      getByText = _render3.getByText;
    yield _goalService.default.getGoals();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('아직 설정된 감정 목표가 없습니다.')).toBeTruthy();
    }, {
      timeout: 10000
    });
  }), 10000);
  it('toggles create form visibility', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      getByText = _render4.getByText,
      queryByText = _render4.queryByText;
    yield _goalService.default.getGoals();
    yield (0, _reactNative.waitFor)(function () {
      var button = getByText('새 목표 추가');
      _reactNative.fireEvent.press(button);
    }, {
      timeout: 10000
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('새 감정 목표 생성')).toBeTruthy();
    }, {
      timeout: 10000
    });
  }), 10000);
  it('submits form successfully', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.createGoal.mockResolvedValue({
      data: {
        data: {
          goal_id: 3,
          target_emotion_id: 1,
          emotion_name: '행복',
          emotion_color: '#FFD700',
          start_date: '2025-04-01',
          end_date: '2025-05-01',
          progress: 0
        }
      }
    });
    yield _goalService.default.createGoal({
      target_emotion_id: 1,
      start_date: '2025-04-01',
      end_date: '2025-05-01'
    });
    expect(_goalService.default.createGoal).toHaveBeenCalled();
  }), 15000);
  it('handles goal deletion', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.deleteGoal.mockResolvedValue({
      data: {
        success: true
      }
    });
    yield _goalService.default.deleteGoal(1);
    expect(_goalService.default.deleteGoal).toHaveBeenCalledWith(1);
  }), 10000);
  it('shows error state when loading fails', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockRejectedValue(new Error('네트워크 오류'));
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyGoalsScreen.default, {})),
      getByText = _render5.getByText;
    try {
      yield _goalService.default.getGoals();
    } catch (error) {}
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('데이터를 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
    }, {
      timeout: 10000
    });
  }), 10000);
  it('handles refresh', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockRejectedValueOnce(new Error('네트워크 오류')).mockResolvedValueOnce({
      data: {
        data: [Object.assign({}, mockGoals[0], {
          progress: 70
        }), Object.assign({}, mockGoals[1], {
          progress: 40
        })]
      }
    });
    try {
      yield _goalService.default.getGoals();
    } catch (error) {}
    yield _goalService.default.getGoals();
    expect(_goalService.default.getGoals).toHaveBeenCalledTimes(2);
  }), 15000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,