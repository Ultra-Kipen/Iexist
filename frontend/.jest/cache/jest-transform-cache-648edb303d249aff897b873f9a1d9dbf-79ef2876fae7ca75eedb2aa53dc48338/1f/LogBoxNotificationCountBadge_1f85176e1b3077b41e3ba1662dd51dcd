31dda43b647f657b7a78a5acfde8b18b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = LogBoxNotificationCountBadge;
var _View = _interopRequireDefault(require("../../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
var LogBoxStyle = _interopRequireWildcard(require("./LogBoxStyle"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function LogBoxNotificationCountBadge(props) {
  return (0, _jsxRuntime.jsx)(_View.default, {
    style: styles.outside,
    children: (0, _jsxRuntime.jsx)(_View.default, {
      style: [styles.inside, styles[props.level]],
      children: (0, _jsxRuntime.jsx)(_Text.default, {
        style: styles.text,
        children: props.count <= 1 ? '!' : props.count
      })
    })
  });
}
var styles = _StyleSheet.default.create({
  warn: {
    backgroundColor: LogBoxStyle.getWarningColor(1)
  },
  error: {
    backgroundColor: LogBoxStyle.getErrorColor(1)
  },
  outside: {
    padding: 2,
    borderRadius: 25,
    backgroundColor: '#fff',
    marginRight: 8
  },
  inside: {
    minWidth: 18,
    paddingLeft: 4,
    paddingRight: 4,
    borderRadius: 25,
    fontWeight: '600'
  },
  text: {
    color: LogBoxStyle.getTextColor(1),
    fontSize: 14,
    lineHeight: 18,
    textAlign: 'center',
    fontWeight: '600',
    textShadowColor: LogBoxStyle.getBackgroundColor(0.4),
    textShadowOffset: {
      width: 0,
      height: 0
    },
    textShadowRadius: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0eWxlU2hlZXQiLCJfVGV4dCIsIkxvZ0JveFN0eWxlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJSZWFjdCIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiTG9nQm94Tm90aWZpY2F0aW9uQ291bnRCYWRnZSIsInByb3BzIiwianN4Iiwic3R5bGUiLCJzdHlsZXMiLCJvdXRzaWRlIiwiY2hpbGRyZW4iLCJpbnNpZGUiLCJsZXZlbCIsInRleHQiLCJjb3VudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJ3YXJuIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0V2FybmluZ0NvbG9yIiwiZXJyb3IiLCJnZXRFcnJvckNvbG9yIiwicGFkZGluZyIsImJvcmRlclJhZGl1cyIsIm1hcmdpblJpZ2h0IiwibWluV2lkdGgiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImZvbnRXZWlnaHQiLCJjb2xvciIsImdldFRleHRDb2xvciIsImZvbnRTaXplIiwibGluZUhlaWdodCIsInRleHRBbGlnbiIsInRleHRTaGFkb3dDb2xvciIsImdldEJhY2tncm91bmRDb2xvciIsInRleHRTaGFkb3dPZmZzZXQiLCJ3aWR0aCIsImhlaWdodCIsInRleHRTaGFkb3dSYWRpdXMiXSwic291cmNlcyI6WyJMb2dCb3hOb3RpZmljYXRpb25Db3VudEJhZGdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi8uLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IFRleHQgZnJvbSAnLi4vLi4vVGV4dC9UZXh0JztcbmltcG9ydCAqIGFzIExvZ0JveFN0eWxlIGZyb20gJy4vTG9nQm94U3R5bGUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2dCb3hOb3RpZmljYXRpb25Db3VudEJhZGdlKHByb3BzOiB7XG4gIGNvdW50OiBudW1iZXIsXG4gIGxldmVsOiAnZXJyb3InIHwgJ3dhcm4nLFxufSk6IFJlYWN0Lk5vZGUge1xuICByZXR1cm4gKFxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMub3V0c2lkZX0+XG4gICAgICB7LyogJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV0gKD49MC4xMTQuMCkgVGhpcyBzdXBwcmVzc2lvbiB3YXMgYWRkZWRcbiAgICAgICAqIHdoZW4gZml4aW5nIHRoZSB0eXBlIG9mIGBTdHlsZVNoZWV0LmNyZWF0ZWAuIFJlbW92ZSB0aGlzIGNvbW1lbnQgdG9cbiAgICAgICAqIHNlZSB0aGUgZXJyb3IuICovfVxuICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMuaW5zaWRlLCBzdHlsZXNbcHJvcHMubGV2ZWxdXX0+XG4gICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMudGV4dH0+e3Byb3BzLmNvdW50IDw9IDEgPyAnIScgOiBwcm9wcy5jb3VudH08L1RleHQ+XG4gICAgICA8L1ZpZXc+XG4gICAgPC9WaWV3PlxuICApO1xufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHdhcm46IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IExvZ0JveFN0eWxlLmdldFdhcm5pbmdDb2xvcigxKSxcbiAgfSxcbiAgZXJyb3I6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IExvZ0JveFN0eWxlLmdldEVycm9yQ29sb3IoMSksXG4gIH0sXG4gIG91dHNpZGU6IHtcbiAgICBwYWRkaW5nOiAyLFxuICAgIGJvcmRlclJhZGl1czogMjUsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI2ZmZicsXG4gICAgbWFyZ2luUmlnaHQ6IDgsXG4gIH0sXG4gIGluc2lkZToge1xuICAgIG1pbldpZHRoOiAxOCxcbiAgICBwYWRkaW5nTGVmdDogNCxcbiAgICBwYWRkaW5nUmlnaHQ6IDQsXG4gICAgYm9yZGVyUmFkaXVzOiAyNSxcbiAgICBmb250V2VpZ2h0OiAnNjAwJyxcbiAgfSxcbiAgdGV4dDoge1xuICAgIGNvbG9yOiBMb2dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMSksXG4gICAgZm9udFNpemU6IDE0LFxuICAgIGxpbmVIZWlnaHQ6IDE4LFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgZm9udFdlaWdodDogJzYwMCcsXG4gICAgdGV4dFNoYWRvd0NvbG9yOiBMb2dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMC40KSxcbiAgICB0ZXh0U2hhZG93T2Zmc2V0OiB7d2lkdGg6IDAsIGhlaWdodDogMH0sXG4gICAgdGV4dFNoYWRvd1JhZGl1czogMyxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVVBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNB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