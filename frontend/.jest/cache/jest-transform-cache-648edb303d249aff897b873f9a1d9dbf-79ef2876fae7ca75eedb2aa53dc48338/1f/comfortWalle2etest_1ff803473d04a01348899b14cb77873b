7f786880ebe87e823b2901b762bcf742
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(),
    getBestPosts: jest.fn(),
    createPost: jest.fn(),
    sendMessage: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPosts = [{
  post_id: 1,
  title: '오늘 너무 힘들어요',
  content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
  like_count: 5,
  comment_count: 3
}, {
  post_id: 2,
  title: '대인관계가 어려워요',
  content: '새로운 사람들을 만나는 것이 두려워요...',
  like_count: 10,
  comment_count: 7
}];
describe('ComfortWall Service Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
  });
  test('getPosts should return posts data', (0, _asyncToGenerator2.default)(function* () {
    var result = yield _comfortWallService.default.getPosts();
    expect(result.data.data).toEqual(mockPosts);
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(1);
  }));
  test('createPost should call API with correct data', (0, _asyncToGenerator2.default)(function* () {
    var postData = {
      title: '새로운 고민',
      content: '이것은 테스트 고민입니다.',
      is_anonymous: true
    };
    yield _comfortWallService.default.createPost(postData);
    expect(_comfortWallService.default.createPost).toHaveBeenCalledWith(postData);
  }));
  test('sendMessage should call API with correct data', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.sendMessage.mockResolvedValueOnce({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
    var messageData = {
      message: '힘내세요! 응원합니다.',
      is_anonymous: true
    };
    yield _comfortWallService.default.sendMessage(1, messageData);
    expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, messageData);
  }));
  test('likePost should call API with correct post ID', (0, _asyncToGenerator2.default)(function* () {
    yield _postService.default.likePost(1);
    expect(_postService.default.likePost).toHaveBeenCalledWith(1);
  }));
  test('createPost should handle API error', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    try {
      yield _comfortWallService.default.createPost({
        title: '테스트 제목',
        content: '테스트 내용'
      });
    } catch (error) {
      expect(error.response.data.message).toBe('서버 오류가 발생했습니다.');
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,