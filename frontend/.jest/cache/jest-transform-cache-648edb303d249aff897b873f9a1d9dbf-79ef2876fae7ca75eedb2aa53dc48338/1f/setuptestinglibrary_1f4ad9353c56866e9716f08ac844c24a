a419136cf1553027f683249f90cd47ec
_getJestObj().mock('react-native', function () {
  var mockComponents = ['View', 'Text', 'TouchableOpacity', 'Image', 'ScrollView', 'TextInput'];
  var mockAPI = {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    Platform: {
      OS: 'android'
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      })
    },
    Alert: {
      alert: jest.fn()
    },
    TurboModuleRegistry: {
      getEnforcing: jest.fn(function () {
        return {
          show: jest.fn(),
          debugRemotely: jest.fn()
        };
      })
    }
  };
  var mockedRN = mockComponents.reduce(function (acc, comp) {
    acc[comp] = function (props) {
      return props.children || null;
    };
    return acc;
  }, {});
  return Object.assign({}, mockedRN, mockAPI);
}, {
  virtual: true
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
if (typeof global.expect === 'undefined') {
  var jestExpect = require('@jest/expect');
  global.expect = jestExpect;
}
global.__DEV__ = true;
global.window = global.window || {};
global.window.PR_SHOULD_USE_CONTINUATION = true;
jest.useFakeTimers();
expect.extend({
  toBeDisabled: function toBeDisabled(received) {
    return {
      pass: received.props.disabled === true,
      message: function message() {
        return `expected ${received} to be disabled`;
      }
    };
  },
  toBeEnabled: function toBeEnabled(received) {
    return {
      pass: received.props.disabled !== true,
      message: function message() {
        return `expected ${received} to be enabled`;
      }
    };
  },
  toBeEmpty: function toBeEmpty(received) {
    return {
      pass: !received.props.children,
      message: function message() {
        return `expected ${received} to be empty`;
      }
    };
  },
  toHaveProp: function toHaveProp(received, property, value) {
    return {
      pass: received.props[property] === value,
      message: function message() {
        return `expected ${received} to have prop ${property}`;
      }
    };
  }
});
if (typeof global.ReactTestInstance !== 'undefined') {
  Object.defineProperty(global.ReactTestInstance.prototype, 'textContent', {
    get: function get() {
      return String(this.toString());
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJtb2NrQ29tcG9uZW50cyIsIm1vY2tBUEkiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiamVzdCIsImZuIiwic3R5bGVzIiwiUGxhdGZvcm0iLCJPUyIsIkRpbWVuc2lvbnMiLCJnZXQiLCJ3aWR0aCIsImhlaWdodCIsIkFsZXJ0IiwiYWxlcnQiLCJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiZ2V0RW5mb3JjaW5nIiwic2hvdyIsImRlYnVnUmVtb3RlbHkiLCJtb2NrZWRSTiIsInJlZHVjZSIsImFjYyIsImNvbXAiLCJwcm9wcyIsImNoaWxkcmVuIiwiT2JqZWN0IiwiYXNzaWduIiwidmlydHVhbCIsIl9yZXF1aXJlIiwicmVxdWlyZSIsImdsb2JhbCIsImV4cGVjdCIsImplc3RFeHBlY3QiLCJfX0RFVl9fIiwid2luZG93IiwiUFJfU0hPVUxEX1VTRV9DT05USU5VQVRJT04iLCJ1c2VGYWtlVGltZXJzIiwiZXh0ZW5kIiwidG9CZURpc2FibGVkIiwicmVjZWl2ZWQiLCJwYXNzIiwiZGlzYWJsZWQiLCJtZXNzYWdlIiwidG9CZUVuYWJsZWQiLCJ0b0JlRW1wdHkiLCJ0b0hhdmVQcm9wIiwicHJvcGVydHkiLCJ2YWx1ZSIsIlJlYWN0VGVzdEluc3RhbmNlIiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJTdHJpbmciLCJ0b1N0cmluZyJdLCJzb3VyY2VzIjpbInNldHVwLXRlc3RpbmctbGlicmFyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vc2V0dXAtdGVzdGluZy1saWJyYXJ5LnRzXHJcbi8vIEB0cy1ub2NoZWNrXHJcblxyXG4vLyBKZXN0IOyEpOygleydhCDrqLzsoIAg7ZmV7J247ZWY6rOgIO2VhOyalO2VnCDquIDroZzrsowg67OA7IiYIOyEpOyglVxyXG5pZiAodHlwZW9mIGdsb2JhbC5leHBlY3QgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgY29uc3QgamVzdEV4cGVjdCA9IHJlcXVpcmUoJ0BqZXN0L2V4cGVjdCcpO1xyXG4gIGdsb2JhbC5leHBlY3QgPSBqZXN0RXhwZWN0O1xyXG59XHJcblxyXG4vLyDsoITsl60g67OA7IiYIOyEpOyglVxyXG5nbG9iYWwuX19ERVZfXyA9IHRydWU7XHJcbmdsb2JhbC53aW5kb3cgPSBnbG9iYWwud2luZG93IHx8IHt9O1xyXG5nbG9iYWwud2luZG93LlBSX1NIT1VMRF9VU0VfQ09OVElOVUFUSU9OID0gdHJ1ZTtcclxuXHJcbi8vIO2DgOydtOuouCDrqqjtgrlcclxuamVzdC51c2VGYWtlVGltZXJzKCk7XHJcblxyXG4vLyBSZWFjdCBOYXRpdmUg66qo7YK5IC0g6rCE64uo7ZWY6rKMIOycoOyngFxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICBjb25zdCBtb2NrQ29tcG9uZW50cyA9IFsnVmlldycsICdUZXh0JywgJ1RvdWNoYWJsZU9wYWNpdHknLCAnSW1hZ2UnLCAnU2Nyb2xsVmlldycsICdUZXh0SW5wdXQnXTtcclxuICBjb25zdCBtb2NrQVBJID0ge1xyXG4gICAgU3R5bGVTaGVldDogeyBjcmVhdGU6IGplc3QuZm4oc3R5bGVzID0+IHN0eWxlcykgfSxcclxuICAgIFBsYXRmb3JtOiB7IE9TOiAnYW5kcm9pZCcgfSxcclxuICAgIERpbWVuc2lvbnM6IHsgZ2V0OiBqZXN0LmZuKCgpID0+ICh7IHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0pKSB9LFxyXG4gICAgQWxlcnQ6IHsgYWxlcnQ6IGplc3QuZm4oKSB9LFxyXG4gICAgVHVyYm9Nb2R1bGVSZWdpc3RyeToge1xyXG4gICAgICBnZXRFbmZvcmNpbmc6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgICBzaG93OiBqZXN0LmZuKCksXHJcbiAgICAgICAgZGVidWdSZW1vdGVseTogamVzdC5mbigpXHJcbiAgICAgIH0pKVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIOuqqOuToCDsu7Ttj6zrhIztirjrpbwg6rCE64uo7ZWcIO2VqOyImOuhnCDrqqjtgrlcclxuICBjb25zdCBtb2NrZWRSTiA9IG1vY2tDb21wb25lbnRzLnJlZHVjZSgoYWNjLCBjb21wKSA9PiB7XHJcbiAgICBhY2NbY29tcF0gPSBwcm9wcyA9PiBwcm9wcy5jaGlsZHJlbiB8fCBudWxsO1xyXG4gICAgcmV0dXJuIGFjYztcclxuICB9LCB7fSk7XHJcblxyXG4gIHJldHVybiB7IC4uLm1vY2tlZFJOLCAuLi5tb2NrQVBJIH07XHJcbn0sIHsgdmlydHVhbDogdHJ1ZSB9KTtcclxuXHJcbi8vIGplc3QtbmF0aXZlL2V4dGVuZC1leHBlY3Qg7KeB7KCRIOqwgOyguOyYpOuKlCDrjIDsi6Ag7ZWE7JqU7ZWcIG1hdGNoZXLrp4wg7ISk7KCVXHJcbi8vIOydtOugh+qyjCDtlZjrqbQgZXh0ZW5kLWV4cGVjdC5qc+ydmCDsmbjrtoAg7J2Y7KG07ISxIOusuOygnOulvCDsmrDtmoztlanri4jri6RcclxuZXhwZWN0LmV4dGVuZCh7XHJcbiAgdG9CZURpc2FibGVkKHJlY2VpdmVkKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwYXNzOiByZWNlaXZlZC5wcm9wcy5kaXNhYmxlZCA9PT0gdHJ1ZSxcclxuICAgICAgbWVzc2FnZTogKCkgPT4gYGV4cGVjdGVkICR7cmVjZWl2ZWR9IHRvIGJlIGRpc2FibGVkYCxcclxuICAgIH07XHJcbiAgfSxcclxuICB0b0JlRW5hYmxlZChyZWNlaXZlZCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGFzczogcmVjZWl2ZWQucHJvcHMuZGlzYWJsZWQgIT09IHRydWUsXHJcbiAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBiZSBlbmFibGVkYCxcclxuICAgIH07XHJcbiAgfSxcclxuICB0b0JlRW1wdHkocmVjZWl2ZWQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBhc3M6ICFyZWNlaXZlZC5wcm9wcy5jaGlsZHJlbixcclxuICAgICAgbWVzc2FnZTogKCkgPT4gYGV4cGVjdGVkICR7cmVjZWl2ZWR9IHRvIGJlIGVtcHR5YCxcclxuICAgIH07XHJcbiAgfSxcclxuICB0b0hhdmVQcm9wKHJlY2VpdmVkLCBwcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBhc3M6IHJlY2VpdmVkLnByb3BzW3Byb3BlcnR5XSA9PT0gdmFsdWUsXHJcbiAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBoYXZlIHByb3AgJHtwcm9wZXJ0eX1gLFxyXG4gICAgfTtcclxuICB9LFxyXG4gIC8vIO2VhOyalO2VnCDri6TrpbggbWF0Y2hlcuuTpCDstpTqsIAuLi5cclxufSk7XHJcblxyXG4vLyBSZWFjdFRlc3RJbnN0YW5jZSDtmZXsnqUgKOyeiOuKlCDqsr3smrDsl5Drp4wpXHJcbmlmICh0eXBlb2YgZ2xvYmFsLlJlYWN0VGVzdEluc3RhbmNlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwuUmVhY3RUZXN0SW5zdGFuY2UucHJvdG90eXBlLCAndGV4dENvbnRlbnQnLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gU3RyaW5nKHRoaXMudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0iXSwibWFwcGluZ3MiOiJBQWtCQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDOUIsSUFBTUMsY0FBYyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsQ0FBQztFQUMvRixJQUFNQyxPQUFPLEdBQUc7SUFDZEMsVUFBVSxFQUFFO01BQUVDLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFBQUMsTUFBTTtRQUFBLE9BQUlBLE1BQU07TUFBQTtJQUFFLENBQUM7SUFDakRDLFFBQVEsRUFBRTtNQUFFQyxFQUFFLEVBQUU7SUFBVSxDQUFDO0lBQzNCQyxVQUFVLEVBQUU7TUFBRUMsR0FBRyxF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