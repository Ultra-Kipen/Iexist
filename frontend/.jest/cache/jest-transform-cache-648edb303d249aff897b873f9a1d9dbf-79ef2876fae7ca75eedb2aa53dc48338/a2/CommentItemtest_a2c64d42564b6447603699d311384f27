937aa75f6e8ce927a362adce517abd7c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _CommentItem = _interopRequireDefault(require("../../src/components/CommentItem"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["onLike"],
  _excluded2 = ["onReply"];
describe('CommentItem', function () {
  var mockProps = {
    id: 1,
    content: '테스트 댓글입니다.',
    userName: '홍길동',
    isAnonymous: false,
    createdAt: '2025-04-20T14:30:00.000Z',
    onReply: jest.fn(),
    onLike: jest.fn(),
    likeCount: 5
  };
  it('renders correctly with user name', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, mockProps))),
      getByText = _render.getByText;
    expect(getByText('홍길동')).toBeTruthy();
    expect(getByText('테스트 댓글입니다.')).toBeTruthy();
    expect(getByText('공감 5')).toBeTruthy();
    expect(getByText('답글')).toBeTruthy();
  });
  it('displays anonymous instead of username when isAnonymous is true', function () {
    var anonymousProps = Object.assign({}, mockProps, {
      isAnonymous: true
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, anonymousProps))),
      getByText = _render2.getByText;
    expect(getByText('익명')).toBeTruthy();
  });
  it('calls onLike when like button is pressed', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, mockProps))),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('공감 5'));
    expect(mockProps.onLike).toHaveBeenCalledTimes(1);
  });
  it('calls onReply when reply button is pressed', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, mockProps))),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('답글'));
    expect(mockProps.onReply).toHaveBeenCalledTimes(1);
  });
  it('formats date correctly', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, mockProps))),
      getByText = _render5.getByText;
    var dateText = getByText(/\d{4}\.\s\d{2}\.\s\d{2}\.\s\d{2}:\d{2}/);
    expect(dateText).toBeTruthy();
  });
  it('handles null or empty values gracefully', function () {
    var minimalProps = {
      id: 1,
      content: '',
      userName: '',
      isAnonymous: false,
      createdAt: ''
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, minimalProps))),
      getByTestId = _render6.getByTestId;
    expect(getByTestId('content').props.children).toBe('');
  });
  it('does not show like count when it is 0', function () {
    var propsWithZeroLikes = Object.assign({}, mockProps, {
      likeCount: 0
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, propsWithZeroLikes))),
      getByText = _render7.getByText;
    expect(getByText('공감')).toBeTruthy();
  });
  it('does not render like button when onLike is not provided', function () {
    var onLike = mockProps.onLike,
      propsWithoutLike = (0, _objectWithoutProperties2.default)(mockProps, _excluded);
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, propsWithoutLike))),
      queryByText = _render8.queryByText;
    expect(queryByText('공감')).toBeNull();
  });
  it('does not render reply button when onReply is not provided', function () {
    var onReply = mockProps.onReply,
      propsWithoutReply = (0, _objectWithoutProperties2.default)(mockProps, _excluded2);
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_CommentItem.default, Object.assign({}, propsWithoutReply))),
      queryByText = _render9.queryByText;
    expect(queryByText('답글')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,