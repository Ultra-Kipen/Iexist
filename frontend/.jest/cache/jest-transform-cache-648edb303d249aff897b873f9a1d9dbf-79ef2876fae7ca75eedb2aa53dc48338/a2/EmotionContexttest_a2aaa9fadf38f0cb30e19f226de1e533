057b3398c72642966d4e60d7c692075d
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn().mockResolvedValue({
      data: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart',
        color: '#FF69B4'
      }]
    }),
    getDailyEmotionCheck: jest.fn().mockResolvedValue({
      data: [{
        log_id: 1,
        user_id: 1,
        emotion_id: 1,
        note: '오늘은 즐거운 하루',
        log_date: '2025-04-12',
        created_at: '2025-04-12T14:22:30Z',
        updated_at: '2025-04-12T14:22:30Z'
      }]
    }),
    recordEmotions: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionContext = require("../../src/contexts/EmotionContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestConsumer = function TestConsumer() {
  var _useEmotion = (0, _EmotionContext.useEmotion)(),
    emotions = _useEmotion.emotions,
    userEmotions = _useEmotion.userEmotions,
    selectedEmotions = _useEmotion.selectedEmotions,
    isLoading = _useEmotion.isLoading,
    error = _useEmotion.error,
    fetchEmotions = _useEmotion.fetchEmotions,
    fetchUserEmotions = _useEmotion.fetchUserEmotions,
    logEmotion = _useEmotion.logEmotion,
    selectEmotion = _useEmotion.selectEmotion,
    clearSelectedEmotions = _useEmotion.clearSelectedEmotions;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-state",
      children: isLoading ? 'loading' : 'not-loading'
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "emotions-count",
      children: emotions.length
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "user-emotions-count",
      children: userEmotions.length
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "error-message",
      children: error || 'no-error'
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "selected-emotions-count",
      children: selectedEmotions.length
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      testID: "fetch-emotions-button",
      title: "\uAC10\uC815 \uBAA9\uB85D \uBD88\uB7EC\uC624\uAE30",
      onPress: function onPress() {
        return fetchEmotions();
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      testID: "fetch-user-emotions-button",
      title: "\uC0AC\uC6A9\uC790 \uAC10\uC815 \uBD88\uB7EC\uC624\uAE30",
      onPress: function onPress() {
        return fetchUserEmotions();
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      testID: "log-emotion-button",
      title: "\uAC10\uC815 \uAE30\uB85D\uD558\uAE30",
      onPress: function onPress() {
        return logEmotion(1, '테스트 감정');
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      testID: "select-emotion-button",
      title: "\uAC10\uC815 \uC120\uD0DD\uD558\uAE30",
      onPress: function onPress() {
        return selectEmotion(1);
      }
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      testID: "clear-emotions-button",
      title: "\uAC10\uC815 \uC120\uD0DD \uCD08\uAE30\uD654",
      onPress: function onPress() {
        return clearSelectedEmotions();
      }
    })]
  });
};
describe('EmotionContext', function () {
  it('provides initial state and functions', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
        children: (0, _jsxRuntime.jsx)(TestConsumer, {})
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('loading-state')).toHaveTextContent('loading');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('loading-state')).toHaveTextContent('not-loading');
    expect(getByTestId('emotions-count')).not.toHaveTextContent('0');
  }));
  it('loads user emotions when requested', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
        children: (0, _jsxRuntime.jsx)(TestConsumer, {})
      })),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId('fetch-user-emotions-button'));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('user-emotions-count')).not.toHaveTextContent('0');
  }));
  it('selects and clears emotions', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
        children: (0, _jsxRuntime.jsx)(TestConsumer, {})
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('selected-emotions-count')).toHaveTextContent('0');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId('select-emotion-button'));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('selected-emotions-count')).toHaveTextContent('1');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId('clear-emotions-button'));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('selected-emotions-count')).toHaveTextContent('0');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRBbGxFbW90aW9ucyIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsImVtb3Rpb25faWQiLCJuYW1lIiwiaWNvbiIsImNvbG9yIiwiZ2V0RGFpbHlFbW90aW9uQ2hlY2siLCJsb2dfaWQiLCJ1c2VyX2lkIiwibm90ZSIsImxvZ19kYXRlIiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJyZWNvcmRFbW90aW9ucyIsInN1Y2Nlc3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfRW1vdGlvbkNvbnRleHQiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiVGVzdENvbnN1bWVyIiwiX3VzZUVtb3Rpb24iLCJ1c2VFbW90aW9uIiwiZW1vdGlvbnMiLCJ1c2VyRW1vdGlvbnMiLCJzZWxlY3RlZEVtb3Rpb25zIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJmZXRjaEVtb3Rpb25zIiwiZmV0Y2hVc2VyRW1vdGlvbnMiLCJsb2dFbW90aW9uIiwic2VsZWN0RW1vdGlvbiIsImNsZWFyU2VsZWN0ZWRFbW90aW9ucyIsImpzeHMiLCJWaWV3IiwiY2hpbGRyZW4iLCJqc3giLCJUZXh0IiwidGVzdElEIiwibGVuZ3RoIiwiQnV0dG9uIiwidGl0bGUiLCJvblByZXNzIiwiZGVzY3JpYmUiLCJpdCIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwiRW1vdGlvblByb3ZpZGVyIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0hhdmVUZXh0Q29udGVudCIsImFjdCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIm5vdCIsIl9yZW5kZXIyIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJfcmVuZGVyMyJdLCJzb3VyY2VzIjpbIkVtb3Rpb25Db250ZXh0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9jb250ZXh0cy9FbW90aW9uQ29udGV4dC50ZXN0LnRzeFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGFjdCwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBUZXh0LCBWaWV3LCBCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyBFbW90aW9uUHJvdmlkZXIsIHVzZUVtb3Rpb24gfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvRW1vdGlvbkNvbnRleHQnO1xyXG5cclxuLy8gQVBJIOyEnOu5hOyKpCDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvYXBpL2Vtb3Rpb25TZXJ2aWNlJywgKCkgPT4gKHtcclxuICBnZXRBbGxFbW90aW9uczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgXHJcbiAgICBkYXRhOiBbXHJcbiAgICAgIHsgZW1vdGlvbl9pZDogMSwgbmFtZTogJ+2WieuztScsIGljb246ICdlbW90aWNvbi1oYXBweS1vdXRsaW5lJywgY29sb3I6ICcjRkZENzAwJyB9LFxyXG4gICAgICB7IGVtb3Rpb25faWQ6IDIsIG5hbWU6ICfqsJDsgqwnLCBpY29uOiAnaGFuZC1oZWFydCcsIGNvbG9yOiAnI0ZGNjlCNCcgfVxyXG4gICAgXSBcclxuICB9KSxcclxuICBnZXREYWlseUVtb3Rpb25DaGVjazogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgXHJcbiAgICBkYXRhOiBbXHJcbiAgICAgIHsgbG9nX2lkOiAxLCB1c2VyX2lkOiAxLCBlbW90aW9uX2lkOiAxLCBub3RlOiAn7Jik64qY7J2AIOymkOqxsOyatCDtlZjro6gnLCBsb2dfZGF0ZTogJzIwMjUtMDQtMTInLCBjcmVhdGVkX2F0OiAnMjAyNS0wNC0xMlQxNDoyMjozMFonLCB1cGRhdGVkX2F0OiAnMjAyNS0wNC0xMlQxNDoyMjozMFonIH1cclxuICAgIF0gXHJcbiAgfSksXHJcbiAgcmVjb3JkRW1vdGlvbnM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHsgc3VjY2VzczogdHJ1ZSB9IH0pXHJcbn0pKTtcclxuXHJcbi8vIO2FjOyKpO2KuOyaqSDshozruYTsnpAg7Lu07Y+s64SM7Yq4XHJcbmNvbnN0IFRlc3RDb25zdW1lciA9ICgpID0+IHtcclxuICBjb25zdCB7XHJcbiAgICBlbW90aW9ucyxcclxuICAgIHVzZXJFbW90aW9ucyxcclxuICAgIHNlbGVjdGVkRW1vdGlvbnMsXHJcbiAgICBpc0xvYWRpbmcsXHJcbiAgICBlcnJvcixcclxuICAgIGZldGNoRW1vdGlvbnMsXHJcbiAgICBmZXRjaFVzZXJFbW90aW9ucyxcclxuICAgIGxvZ0Vtb3Rpb24sXHJcbiAgICBzZWxlY3RFbW90aW9uLFxyXG4gICAgY2xlYXJTZWxlY3RlZEVtb3Rpb25zXHJcbiAgfSA9IHVzZUVtb3Rpb24oKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3PlxyXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJsb2FkaW5nLXN0YXRlXCI+e2lzTG9hZGluZyA/ICdsb2FkaW5nJyA6ICdub3QtbG9hZGluZyd9PC9UZXh0PlxyXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJlbW90aW9ucy1jb3VudFwiPntlbW90aW9ucy5sZW5ndGh9PC9UZXh0PlxyXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJ1c2VyLWVtb3Rpb25zLWNvdW50XCI+e3VzZXJFbW90aW9ucy5sZW5ndGh9PC9UZXh0PlxyXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJlcnJvci1tZXNzYWdlXCI+e2Vycm9yIHx8ICduby1lcnJvcid9PC9UZXh0PlxyXG4gICAgICA8VGV4dCB0ZXN0SUQ9XCJzZWxlY3RlZC1lbW90aW9ucy1jb3VudFwiPntzZWxlY3RlZEVtb3Rpb25zLmxlbmd0aH08L1RleHQ+XHJcbiAgICAgIFxyXG4gICAgICA8QnV0dG9uXHJcbiAgICAgICAgdGVzdElEPVwiZmV0Y2gtZW1vdGlvbnMtYnV0dG9uXCJcclxuICAgICAgICB0aXRsZT1cIuqwkOyglSDrqqnroZ0g67aI65+s7Jik6riwXCJcclxuICAgICAgICBvblByZXNzPXsoKSA9PiBmZXRjaEVtb3Rpb25zKCl9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxCdXR0b25cclxuICAgICAgICB0ZXN0SUQ9XCJmZXRjaC11c2VyLWVtb3Rpb25zLWJ1dHRvblwiXHJcbiAgICAgICAgdGl0bGU9XCLsgqzsmqnsnpAg6rCQ7KCVIOu2iOufrOyYpOq4sFwiXHJcbiAgICAgICAgb25QcmVzcz17KCkgPT4gZmV0Y2hVc2VyRW1vdGlvbnMoKX1cclxuICAgICAgLz5cclxuICAgICAgPEJ1dHRvblxyXG4gICAgICAgIHRlc3RJRD1cImxvZy1lbW90aW9uLWJ1dHRvblwiXHJcbiAgICAgICAgdGl0bGU9XCLqsJDsoJUg6riw66Gd7ZWY6riwXCJcclxuICAgICAgICBvblByZXNzPXsoKSA9PiBsb2dFbW90aW9uKDEsICfthYzsiqTtirgg6rCQ7KCVJyl9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxCdXR0b25cclxuICAgICAgICB0ZXN0SUQ9XCJzZWxlY3QtZW1vdGlvbi1idXR0b25cIlxyXG4gICAgICAgIHRpdGxlPVwi6rCQ7KCVIOyEoO2Dne2VmOq4sFwiXHJcbiAgICAgICAgb25QcmVzcz17KCkgPT4gc2VsZWN0RW1vdGlvbigxKX1cclxuICAgICAgLz5cclxuICAgICAgPEJ1dHRvblxyXG4gICAgICAgIHRlc3RJRD1cImNsZWFyLWVtb3Rpb25zLWJ1dHRvblwiXHJcbiAgICAgICAgdGl0bGU9XCLqsJDsoJUg7ISg7YOdIOy0iOq4sO2ZlFwiXHJcbiAgICAgICAgb25QcmVzcz17KCkgPT4gY2xlYXJTZWxlY3RlZEVtb3Rpb25zKCl9XHJcbiAgICAgIC8+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmRlc2NyaWJlKCdFbW90aW9uQ29udGV4dCcsICgpID0+IHtcclxuICBpdCgncHJvdmlkZXMgaW5pdGlhbCBzdGF0ZSBhbmQgZnVuY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RW1vdGlvblByb3ZpZGVyPlxyXG4gICAgICAgIDxUZXN0Q29uc3VtZXIgLz5cclxuICAgICAgPC9FbW90aW9uUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyDstIjquLAg66Gc65SpIOyDge2DnCDtmZXsnbhcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnbG9hZGluZy1zdGF0ZScpKS50b0hhdmVUZXh0Q29udGVudCgnbG9hZGluZycpO1xyXG4gICAgXHJcbiAgICAvLyDruYTrj5nquLAg7J6R7JeFIOyZhOujjCDrjIDquLBcclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g642w7J207YSwIOuhnOuTnCDtmZXsnbhcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnbG9hZGluZy1zdGF0ZScpKS50b0hhdmVUZXh0Q29udGVudCgnbm90LWxvYWRpbmcnKTtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnZW1vdGlvbnMtY291bnQnKSkubm90LnRvSGF2ZVRleHRDb250ZW50KCcwJyk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2xvYWRzIHVzZXIgZW1vdGlvbnMgd2hlbiByZXF1ZXN0ZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uUHJvdmlkZXI+XHJcbiAgICAgICAgPFRlc3RDb25zdW1lciAvPlxyXG4gICAgICA8L0Vtb3Rpb25Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOy0iOq4sCDroZzrk5wg64yA6riwXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyCrOyaqeyekCDqsJDsoJUg66Gc65OcIOyalOyyrVxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdmZXRjaC11c2VyLWVtb3Rpb25zLWJ1dHRvbicpKTtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3VzZXItZW1vdGlvbnMtY291bnQnKSkubm90LnRvSGF2ZVRleHRDb250ZW50KCcwJyk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3NlbGVjdHMgYW5kIGNsZWFycyBlbW90aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25Qcm92aWRlcj5cclxuICAgICAgICA8VGVzdENvbnN1bWVyIC8+XHJcbiAgICAgIDwvRW1vdGlvblByb3ZpZGVyPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8g7LSI6riwIOuhnOuTnCDrjIDquLBcclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7LSI6riwIOyEoO2DneuQnCDqsJDsoJUg7IiYIO2ZleyduFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdzZWxlY3RlZC1lbW90aW9ucy1jb3VudCcpKS50b0hhdmVUZXh0Q29udGVudCgnMCcpO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ3NlbGVjdC1lbW90aW9uLWJ1dHRvbicpKTtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3NlbGVjdGVkLWVtb3Rpb25zLWNvdW50JykpLnRvSGF2ZVRleHRDb250ZW50KCcxJyk7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDshKDtg50g7LSI6riw7ZmUXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2NsZWFyLWVtb3Rpb25zLWJ1dHRvbicpKTtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ3NlbGVjdGVkLWVtb3Rpb25zLWNvdW50JykpLnRvSGF2ZVRleHRDb250ZW50KCcwJyk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBT0FBLFdBQUEsR0FBS0MsSUFBSSwwQ0FBMEM7RUFBQSxPQUFPO0lBQ3hEQyxjQUFjLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7TUFDMUNDLElBQUksRUFBRSxDQUNKO1FBQUVDLFVBQVUsRUFBRSxDQUFDO1FBQUVDLElBQUksRUFBRSxJQUFJO1FBQUVDLElBQUksRUFBRSx3QkFBd0I7UUFBRUMsS0FBSyxFQUFFO01BQVUsQ0FBQyxFQUMvRTtRQUFFSCxVQUFVLEVBQUUsQ0FBQztRQUFFQyxJQUFJLEVBQUUsSUFBSTtRQUFFQyxJQUFJLEVBQUUsWUFBWTtRQUFFQyxLQUFLLEVBQUU7TUFBVSxDQUFDO0lB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