{"version":3,"names":["_challengeData","require","mockChallengeService","exports","getAllChallenges","jest","fn","mockResolvedValue","data","mockChallenges","getChallengeById","mockImplementation","challengeId","challenge","find","c","challenge_id","Promise","resolve","createChallenge","challengeData","Object","assign","Math","floor","random","creator_id","title","description","start_date","Date","toISOString","split","end_date","is_public","max_participants","participant_count","created_at","updateChallenge","updateData","updated_at","deleteChallenge","success","joinChallenge","leaveChallenge","getChallengeParticipants","mockParticipants","getChallengeEmotions","userId","emotions","mockChallengeEmotions","filter","e","user_id","logChallengeEmotion","emotionData","challenge_emotion_id","emotion_id","log_date","note","getUserChallenges","slice","_default","default"],"sources":["challengeService.mock.ts"],"sourcesContent":["// __tests__/mocks/services/challengeService.mock.ts\r\nimport { mockChallenges, mockChallengeEmotions, mockParticipants } from '../data/challengeData.mock';\r\n\r\ninterface Challenge {\r\n  challenge_id: number;\r\n  creator_id: number;\r\n  title: string;\r\n  description: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  is_public: boolean;\r\n  max_participants: number | null;\r\n  participant_count: number;\r\n  created_at: string;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface ChallengeEmotion {\r\n  challenge_emotion_id: number;\r\n  challenge_id: number;\r\n  user_id: number;\r\n  emotion_id: number;\r\n  log_date: string;\r\n  note: string | null;\r\n  created_at: string;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface ApiResponse {\r\n  data: any;\r\n}\r\n\r\nexport const mockChallengeService = {\r\n  getAllChallenges: jest.fn().mockResolvedValue({ \r\n    data: mockChallenges \r\n  }),\r\n  \r\n  getChallengeById: jest.fn().mockImplementation((challengeId: number) => {\r\n    const challenge = mockChallenges.find(c => c.challenge_id === challengeId);\r\n    return Promise.resolve({ data: challenge });\r\n  }),\r\n  \r\n  createChallenge: jest.fn().mockImplementation((challengeData: Partial<Challenge>) => {\r\n    return Promise.resolve({\r\n      data: {\r\n        challenge_id: Math.floor(Math.random() * 1000) + 100,\r\n        creator_id: 1,\r\n        title: '',\r\n        description: '',\r\n        start_date: new Date().toISOString().split('T')[0],\r\n        end_date: new Date().toISOString().split('T')[0],\r\n        is_public: true,\r\n        max_participants: null,\r\n        participant_count: 0,\r\n        created_at: new Date().toISOString(),\r\n        ...challengeData\r\n      }\r\n    });\r\n  }),\r\n  \r\n  updateChallenge: jest.fn().mockImplementation((challengeId: number, updateData: Partial<Challenge>) => {\r\n    return Promise.resolve({\r\n      data: {\r\n        challenge_id: challengeId,\r\n        creator_id: 1,\r\n        title: '',\r\n        description: '',\r\n        start_date: '',\r\n        end_date: '',\r\n        is_public: true,\r\n        max_participants: null,\r\n        participant_count: 0,\r\n        created_at: '',\r\n        updated_at: new Date().toISOString(),\r\n        ...updateData\r\n      }\r\n    });\r\n  }),\r\n  \r\n  deleteChallenge: jest.fn().mockResolvedValue({ \r\n    data: { success: true } \r\n  }),\r\n  \r\n  joinChallenge: jest.fn().mockResolvedValue({ \r\n    data: { success: true } \r\n  }),\r\n  \r\n  leaveChallenge: jest.fn().mockResolvedValue({ \r\n    data: { success: true } \r\n  }),\r\n  \r\n  getChallengeParticipants: jest.fn().mockResolvedValue({ \r\n    data: mockParticipants \r\n  }),\r\n  \r\n  getChallengeEmotions: jest.fn().mockImplementation((challengeId: number, userId?: number) => {\r\n    const emotions = mockChallengeEmotions.filter(e => \r\n      e.challenge_id === challengeId && \r\n      (userId ? e.user_id === userId : true)\r\n    );\r\n    return Promise.resolve({ data: emotions });\r\n  }),\r\n  \r\n  logChallengeEmotion: jest.fn().mockImplementation((challengeId: number, userId: number, emotionData: Partial<ChallengeEmotion>) => {\r\n    return Promise.resolve({\r\n      data: {\r\n        challenge_emotion_id: Math.floor(Math.random() * 1000) + 10,\r\n        challenge_id: challengeId,\r\n        user_id: userId,\r\n        emotion_id: 0,\r\n        log_date: new Date().toISOString().split('T')[0],\r\n        note: null,\r\n        created_at: new Date().toISOString(),\r\n        ...emotionData\r\n      }\r\n    });\r\n  }),\r\n  \r\n  getUserChallenges: jest.fn().mockResolvedValue({ \r\n    data: mockChallenges.slice(0, 1) \r\n  })\r\n};\r\n\r\nexport default mockChallengeService;"],"mappings":";;;;AACA,IAAAA,cAAA,GAAAC,OAAA;AA+BO,IAAMC,oBAAoB,GAAAC,OAAA,CAAAD,oBAAA,GAAG;EAClCE,gBAAgB,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IAC5CC,IAAI,EAAEC;EACR,CAAC,CAAC;EAEFC,gBAAgB,EAAEL,IAAI,CAACC,EAAE,CAAC,CAAC,CAACK,kBAAkB,CAAC,UAACC,WAAmB,EAAK;IACtE,IAAMC,SAAS,GAAGJ,6BAAc,CAACK,IAAI,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,YAAY,KAAKJ,WAAW;IAAA,EAAC;IAC1E,OAAOK,OAAO,CAACC,OAAO,CAAC;MAAEV,IAAI,EAAEK;IAAU,CAAC,CAAC;EAC7C,CAAC,CAAC;EAEFM,eAAe,EAAEd,IAAI,CAACC,EAAE,CAAC,CAAC,CAACK,kBAAkB,CAAC,UAACS,aAAiC,EAAK;IACnF,OAAOH,OAAO,CAACC,OAAO,CAAC;MACrBV,IAAI,EAAAa,MAAA,CAAAC,MAAA;QACFN,YAAY,EAAEO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG;QACpDC,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClDC,QAAQ,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChDE,SAAS,EAAE,IAAI;QACfC,gBAAgB,EAAE,IAAI;QACtBC,iBAAiB,EAAE,CAAC;QACpBC,UAAU,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAAC,GACjCX,aAAa;IAEpB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFkB,eAAe,EAAEjC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACK,kBAAkB,CAAC,UAACC,WAAmB,EAAE2B,UAA8B,EAAK;IACrG,OAAOtB,OAAO,CAACC,OAAO,CAAC;MACrBV,IAAI,EAAAa,MAAA,CAAAC,MAAA;QACFN,YAAY,EAAEJ,WAAW;QACzBc,UAAU,EAAE,CAAC;QACbC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,UAAU,EAAE,EAAE;QACdI,QAAQ,EAAE,EAAE;QACZC,SAAS,EAAE,IAAI;QACfC,gBAAgB,EAAE,IAAI;QACtBC,iBAAiB,EAAE,CAAC;QACpBC,UAAU,EAAE,EAAE;QACdG,UAAU,EAAE,IAAIV,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAAC,GACjCQ,UAAU;IAEjB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFE,eAAe,EAAEpC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IAC3CC,IAAI,EAAE;MAAEkC,OAAO,EAAE;IAAK;EACxB,CAAC,CAAC;EAEFC,aAAa,EAAEtC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IACzCC,IAAI,EAAE;MAAEkC,OAAO,EAAE;IAAK;EACxB,CAAC,CAAC;EAEFE,cAAc,EAAEvC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IAC1CC,IAAI,EAAE;MAAEkC,OAAO,EAAE;IAAK;EACxB,CAAC,CAAC;EAEFG,wBAAwB,EAAExC,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IACpDC,IAAI,EAAEsC;EACR,CAAC,CAAC;EAEFC,oBAAoB,EAAE1C,IAAI,CAACC,EAAE,CAAC,CAAC,CAACK,kBAAkB,CAAC,UAACC,WAAmB,EAAEoC,MAAe,EAAK;IAC3F,IAAMC,QAAQ,GAAGC,oCAAqB,CAACC,MAAM,CAAC,UAAAC,CAAC;MAAA,OAC7CA,CAAC,CAACpC,YAAY,KAAKJ,WAAW,KAC7BoC,MAAM,GAAGI,CAAC,CAACC,OAAO,KAAKL,MAAM,GAAG,IAAI,CAAC;IAAA,CACxC,CAAC;IACD,OAAO/B,OAAO,CAACC,OAAO,CAAC;MAAEV,IAAI,EAAEyC;IAAS,CAAC,CAAC;EAC5C,CAAC,CAAC;EAEFK,mBAAmB,EAAEjD,IAAI,CAACC,EAAE,CAAC,CAAC,CAACK,kBAAkB,CAAC,UAACC,WAAmB,EAAEoC,MAAc,EAAEO,WAAsC,EAAK;IACjI,OAAOtC,OAAO,CAACC,OAAO,CAAC;MACrBV,IAAI,EAAAa,MAAA,CAAAC,MAAA;QACFkC,oBAAoB,EAAEjC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE;QAC3DT,YAAY,EAAEJ,WAAW;QACzByC,OAAO,EAAEL,MAAM;QACfS,UAAU,EAAE,CAAC;QACbC,QAAQ,EAAE,IAAI5B,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChD2B,IAAI,EAAE,IAAI;QACVtB,UAAU,EAAE,IAAIP,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAAC,GACjCwB,WAAW;IAElB,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFK,iBAAiB,EAAEvD,IAAI,CAACC,EAAE,CAAC,CAAC,CAACC,iBAAiB,CAAC;IAC7CC,IAAI,EAAEC,6BAAc,CAACoD,KAAK,CAAC,CAAC,EAAE,CAAC;EACjC,CAAC;AACH,CAAC;AAAC,IAAAC,QAAA,GAAA3D,OAAA,CAAA4D,OAAA,GAEa7D,oBAAoB","ignoreList":[]}