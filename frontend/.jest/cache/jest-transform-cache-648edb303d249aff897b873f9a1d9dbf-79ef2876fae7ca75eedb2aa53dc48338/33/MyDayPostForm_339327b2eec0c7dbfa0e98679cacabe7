a12e6f0713b0b35b00b8a0243efedc7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _EmotionSelector = _interopRequireDefault(require("./EmotionSelector"));
var _LoadingIndicator = _interopRequireDefault(require("./LoadingIndicator"));
var _uploadService = _interopRequireDefault(require("../services/api/uploadService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var selectImage = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* () {
    return new Promise(function (resolve) {
      setTimeout(function () {
        resolve({
          uri: 'file:///mock/image/path.jpg',
          name: 'image.jpg',
          type: 'image/jpeg'
        });
      }, 500);
    });
  });
  return function selectImage() {
    return _ref.apply(this, arguments);
  };
}();
var MyDayPostForm = function MyDayPostForm(_ref2) {
  var onSubmit = _ref2.onSubmit,
    _ref2$isLoading = _ref2.isLoading,
    isLoading = _ref2$isLoading === void 0 ? false : _ref2$isLoading,
    _ref2$initialContent = _ref2.initialContent,
    initialContent = _ref2$initialContent === void 0 ? '' : _ref2$initialContent,
    _ref2$initialEmotionI = _ref2.initialEmotionIds,
    initialEmotionIds = _ref2$initialEmotionI === void 0 ? [] : _ref2$initialEmotionI,
    _ref2$maxContentLengt = _ref2.maxContentLength,
    maxContentLength = _ref2$maxContentLengt === void 0 ? 1000 : _ref2$maxContentLengt;
  var _useState = (0, _react.useState)(initialContent),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    content = _useState2[0],
    setContent = _useState2[1];
  var _useState3 = (0, _react.useState)(initialEmotionIds),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    emotionIds = _useState4[0],
    setEmotionIds = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    emotionSummary = _useState6[0],
    setEmotionSummary = _useState6[1];
  var _useState7 = (0, _react.useState)(undefined),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    imageUrl = _useState8[0],
    setImageUrl = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isAnonymous = _useState10[0],
    setIsAnonymous = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    imageUploadLoading = _useState12[0],
    setImageUploadLoading = _useState12[1];
  var _useState13 = (0, _react.useState)(null),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    selectedImage = _useState14[0],
    setSelectedImage = _useState14[1];
  var _useState15 = (0, _react.useState)([]),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    emotions = _useState16[0],
    setEmotions = _useState16[1];
  var _useState17 = (0, _react.useState)(null),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    error = _useState18[0],
    setError = _useState18[1];
  (0, _react.useEffect)(function () {
    var fetchEmotions = function () {
      var _ref3 = (0, _asyncToGenerator2.default)(function* () {
        try {
          var mockEmotions = [{
            id: 1,
            name: '행복',
            icon: 'emoticon-happy-outline',
            color: '#FFD700'
          }, {
            id: 2,
            name: '감사',
            icon: 'hand-heart',
            color: '#FF69B4'
          }, {
            id: 3,
            name: '위로',
            icon: 'hand-peace',
            color: '#87CEEB'
          }, {
            id: 4,
            name: '감동',
            icon: 'heart-outline',
            color: '#FF6347'
          }, {
            id: 5,
            name: '슬픔',
            icon: 'emoticon-sad-outline',
            color: '#4682B4'
          }, {
            id: 6,
            name: '불안',
            icon: 'alert-outline',
            color: '#DDA0DD'
          }, {
            id: 7,
            name: '화남',
            icon: 'emoticon-angry-outline',
            color: '#FF4500'
          }, {
            id: 8,
            name: '지침',
            icon: 'emoticon-neutral-outline',
            color: '#A9A9A9'
          }, {
            id: 9,
            name: '우울',
            icon: 'weather-cloudy',
            color: '#708090'
          }, {
            id: 10,
            name: '고독',
            icon: 'account-outline',
            color: '#8B4513'
          }, {
            id: 11,
            name: '충격',
            icon: 'lightning-bolt',
            color: '#9932CC'
          }, {
            id: 12,
            name: '편함',
            icon: 'sofa-outline',
            color: '#32CD32'
          }];
          setEmotions(mockEmotions);
        } catch (error) {
          console.error('감정 목록 가져오기 오류:', error);
          setError('감정 목록을 불러오는데 실패했습니다.');
        }
      });
      return function fetchEmotions() {
        return _ref3.apply(this, arguments);
      };
    }();
    fetchEmotions();
  }, []);
  var handleEmotionSelect = function handleEmotionSelect(emotionId) {
    if (emotionIds.includes(emotionId)) {
      setEmotionIds(function (prev) {
        return prev.filter(function (id) {
          return id !== emotionId;
        });
      });
    } else {
      setEmotionIds(function (prev) {
        return [].concat((0, _toConsumableArray2.default)(prev), [emotionId]);
      });
    }
    setTimeout(function () {
      return updateEmotionSummary();
    }, 0);
  };
  var updateEmotionSummary = function updateEmotionSummary() {
    if (emotionIds.length === 0) {
      setEmotionSummary('');
      return;
    }
    var selectedEmotions = emotions.filter(function (emotion) {
      return emotionIds.includes(emotion.id);
    });
    var emotionNames = selectedEmotions.map(function (emotion) {
      return emotion.name;
    });
    var summary = '';
    if (emotionNames.length <= 2) {
      summary = emotionNames.join(', ');
    } else {
      summary = `${emotionNames[0]}, ${emotionNames[1]} 외 ${emotionNames.length - 2}개`;
    }
    setEmotionSummary(summary);
  };
  (0, _react.useEffect)(function () {
    if (emotions.length > 0 && emotionIds.length > 0) {
      updateEmotionSummary();
    }
  }, [emotions, emotionIds]);
  var handleImageSelect = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* () {
      try {
        var result = yield selectImage();
        if (!result) {
          return;
        }
        setSelectedImage(result);
        setImageUrl(result.uri);
      } catch (error) {
        console.error('이미지 선택 오류:', error);
        _reactNative.Alert.alert('오류', '이미지를 선택하는 중 문제가 발생했습니다.');
      }
    });
    return function handleImageSelect() {
      return _ref4.apply(this, arguments);
    };
  }();
  var uploadImage = function () {
    var _ref5 = (0, _asyncToGenerator2.default)(function* () {
      if (!selectedImage) {
        return undefined;
      }
      var imageUri = selectedImage.uri;
      if (!imageUri) {
        return undefined;
      }
      try {
        setImageUploadLoading(true);
        var response = yield _uploadService.default.uploadImage(imageUri);
        if (!response || !response.data || !response.data.image_url) {
          throw new Error('이미지 업로드 응답이 유효하지 않습니다.');
        }
        setImageUploadLoading(false);
        return response.data.image_url;
      } catch (error) {
        setImageUploadLoading(false);
        console.error('이미지 업로드 오류:', error);
        _reactNative.Alert.alert('업로드 실패', '이미지 업로드 중 오류가 발생했습니다. 다시 시도해 주세요.');
        return undefined;
      }
    });
    return function uploadImage() {
      return _ref5.apply(this, arguments);
    };
  }();
  var handleSubmit = function () {
    var _ref6 = (0, _asyncToGenerator2.default)(function* () {
      try {
        if (content.trim().length < 10) {
          _reactNative.Alert.alert('오류', '내용은 최소 10자 이상이어야 합니다.');
          return;
        }
        if (emotionIds.length === 0) {
          _reactNative.Alert.alert('오류', '적어도 하나 이상의 감정을 선택해주세요.');
          return;
        }
        var finalImageUrl = imageUrl;
        if (selectedImage && selectedImage.uri && selectedImage.uri.startsWith('file://')) {
          finalImageUrl = yield uploadImage();
          if (!finalImageUrl && selectedImage) {
            _reactNative.Alert.alert('업로드 경고', '이미지 업로드에 실패했습니다. 이미지 없이 게시물을 등록하시겠습니까?', [{
              text: '취소',
              style: 'cancel'
            }, {
              text: '이미지 없이 등록',
              onPress: function () {
                var _onPress = (0, _asyncToGenerator2.default)(function* () {
                  try {
                    yield onSubmit({
                      content: content,
                      emotion_ids: emotionIds,
                      emotion_summary: emotionSummary,
                      is_anonymous: isAnonymous
                    });
                    resetForm();
                  } catch (submitError) {
                    handleSubmitError(submitError);
                  }
                });
                function onPress() {
                  return _onPress.apply(this, arguments);
                }
                return onPress;
              }()
            }]);
            return;
          }
        }
        yield onSubmit({
          content: content,
          emotion_ids: emotionIds,
          emotion_summary: emotionSummary,
          image_url: finalImageUrl,
          is_anonymous: isAnonymous
        });
        resetForm();
      } catch (error) {
        handleSubmitError(error);
      }
    });
    return function handleSubmit() {
      return _ref6.apply(this, arguments);
    };
  }();
  var resetForm = function resetForm() {
    setContent('');
    setEmotionIds([]);
    setEmotionSummary('');
    setImageUrl(undefined);
    setSelectedImage(null);
    setIsAnonymous(false);
  };
  var handleSubmitError = function handleSubmitError(error) {
    console.error('게시물 제출 오류:', error);
    var errorMessage = '게시물을 제출하는 중 오류가 발생했습니다. 다시 시도해 주세요.';
    if (error.response && error.response.data && error.response.data.message) {
      errorMessage = error.response.data.message;
    }
    _reactNative.Alert.alert('제출 실패', errorMessage);
  };
  var handleRemoveImage = function handleRemoveImage() {
    setImageUrl(undefined);
    setSelectedImage(null);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: "\uC624\uB298 \uD558\uB8E8\uB294 \uC5B4\uB560\uB098\uC694?"
    }), error && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.errorContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: error
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.emotionSelectorContainer,
      children: [emotions.length > 0 ? (0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: emotions,
        selectedEmotions: emotionIds,
        onSelect: handleEmotionSelect,
        multiple: true
      }) : (0, _jsxRuntime.jsxs)(_reactNative.View, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.sectionTitle,
          children: "\uC624\uB298\uC758 \uAC10\uC815"
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.selectorPlaceholder,
          onPress: function onPress() {
            return _reactNative.Alert.alert('감정 선택', '감정을 선택해주세요.');
          },
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.selectorPlaceholderText,
            children: emotionIds.length > 0 ? `${emotionIds.length}개의 감정이 선택됨` : '감정을 선택해주세요'
          })
        })]
      }), emotionSummary ? (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.emotionSummary,
        children: emotionSummary
      }) : null]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.contentContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.sectionTitle,
        children: "\uC624\uB298 \uC788\uC5C8\uB358 \uC77C"
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.contentInput,
        value: content,
        onChangeText: setContent,
        placeholder: "\uC624\uB298 \uD558\uB8E8\uB97C \uAE30\uB85D\uD574\uBCF4\uC138\uC694 (10-1000\uC790)",
        multiline: true,
        maxLength: maxContentLength,
        textAlignVertical: "top"
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: [styles.charCount, content.length >= maxContentLength * 0.9 && styles.charCountWarning],
        children: [content.length, "/", maxContentLength]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.imageContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: styles.imagePicker,
        onPress: handleImageSelect,
        disabled: isLoading || imageUploadLoading,
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.imageButtonText,
          children: "\uC0AC\uC9C4 \uCD94\uAC00"
        })
      }), imageUrl && (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.selectedImageContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: imageUrl
          },
          style: styles.selectedImage
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: styles.removeImageButton,
          onPress: handleRemoveImage,
          disabled: isLoading || imageUploadLoading,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.removeImageText,
            children: "\u2715"
          })
        })]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.anonymousContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [styles.checkbox, isAnonymous && styles.checkboxChecked],
        onPress: function onPress() {
          return setIsAnonymous(!isAnonymous);
        },
        disabled: isLoading,
        children: isAnonymous && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.checkmark,
          children: "\u2713"
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.anonymousText,
        children: "\uC775\uBA85\uC73C\uB85C \uAC8C\uC2DC\uD558\uAE30"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: [styles.submitButton, (isLoading || imageUploadLoading || content.trim().length < 10 || emotionIds.length === 0) && styles.disabledButton],
      onPress: handleSubmit,
      disabled: isLoading || imageUploadLoading || content.trim().length < 10 || emotionIds.length === 0,
      children: isLoading || imageUploadLoading ? (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {
        size: "small",
        color: "#FFFFFF"
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.submitButtonText,
        children: "\uAC8C\uC2DC\uD558\uAE30"
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center'
  },
  errorContainer: {
    backgroundColor: '#FFE5E5',
    padding: 8,
    borderRadius: 4,
    marginBottom: 16
  },
  errorText: {
    color: '#D32F2F',
    textAlign: 'center'
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8
  },
  emotionSelectorContainer: {
    marginBottom: 16
  },
  emotionSummary: {
    fontSize: 14,
    color: '#657786',
    marginTop: 8,
    marginLeft: 16
  },
  contentContainer: {
    marginBottom: 16
  },
  contentInput: {
    height: 120,
    borderWidth: 1,
    borderColor: '#E1E8ED',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#F8F9FA'
  },
  charCount: {
    fontSize: 12,
    color: '#657786',
    textAlign: 'right',
    marginTop: 4
  },
  charCountWarning: {
    color: '#E0245E'
  },
  selectorPlaceholder: {
    height: 48,
    borderWidth: 1,
    borderColor: '#E1E8ED',
    borderRadius: 8,
    paddingHorizontal: 12,
    justifyContent: 'center',
    backgroundColor: '#F8F9FA'
  },
  selectorPlaceholderText: {
    fontSize: 16,
    color: '#657786'
  },
  imageContainer: {
    marginBottom: 16
  },
  imagePicker: {
    borderWidth: 1,
    borderStyle: 'dashed',
    borderColor: '#4A6572',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    justifyContent: 'center'
  },
  imageButtonText: {
    color: '#4A6572',
    fontSize: 16
  },
  selectedImageContainer: {
    marginTop: 8,
    position: 'relative'
  },
  selectedImage: {
    width: '100%',
    height: 200,
    borderRadius: 8,
    resizeMode: 'cover'
  },
  removeImageButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    width: 28,
    height: 28,
    borderRadius: 14,
    alignItems: 'center',
    justifyContent: 'center'
  },
  removeImageText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold'
  },
  anonymousContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16
  },
  checkbox: {
    width: 24,
    height: 24,
    borderWidth: 2,
    borderColor: '#4A6572',
    borderRadius: 4,
    marginRight: 8,
    alignItems: 'center',
    justifyContent: 'center'
  },
  checkboxChecked: {
    backgroundColor: '#4A6572'
  },
  checkmark: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold'
  },
  anonymousText: {
    fontSize: 16,
    color: '#14171A'
  },
  submitButton: {
    backgroundColor: '#4A6572',
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    justifyContent: 'center'
  },
  disabledButton: {
    backgroundColor: '#A9A9A9'
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold'
  }
});
var _default = exports.default = MyDayPostForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,