6ae88eefc34911afa5f7feb2ec8d1523
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      };
    }
  };
});
_getJestObj().mock("../../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  var Button = function Button(props) {
    return (0, _jsxRuntime.jsx)(TouchableOpacity, {
      onPress: props.onPress,
      style: Object.assign({
        backgroundColor: props.mode === 'contained' ? '#2196F3' : 'transparent',
        borderWidth: props.mode === 'outlined' ? 1 : 0,
        padding: 8,
        borderRadius: 4,
        alignItems: 'center',
        justifyContent: 'center'
      }, props.style || {}),
      testID: props.testID,
      children: (0, _jsxRuntime.jsx)(Text, {
        style: {
          color: props.textColor || (props.mode === 'contained' ? 'white' : '#2196F3')
        },
        children: props.children
      })
    });
  };
  var Card = function Card(props) {
    return (0, _jsxRuntime.jsx)(View, {
      style: [{
        margin: 8,
        padding: 8,
        backgroundColor: 'white'
      }, props.style],
      testID: props.testID,
      children: props.children
    });
  };
  Card.Content = function (props) {
    return (0, _jsxRuntime.jsx)(View, {
      style: {
        padding: 8
      },
      children: props.children
    });
  };
  Card.Actions = function (props) {
    return (0, _jsxRuntime.jsx)(View, {
      style: {
        flexDirection: 'row',
        justifyContent: 'flex-end',
        padding: 8
      },
      children: props.children
    });
  };
  var Dialog = function Dialog(props) {
    if (!props.visible) return null;
    return (0, _jsxRuntime.jsx)(View, {
      style: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(0,0,0,0.5)'
      },
      children: (0, _jsxRuntime.jsx)(View, {
        style: {
          backgroundColor: 'white',
          padding: 16,
          width: '80%',
          borderRadius: 8
        },
        children: props.children
      })
    });
  };
  Dialog.Title = function (props) {
    return (0, _jsxRuntime.jsx)(Text, {
      style: {
        fontSize: 18,
        fontWeight: 'bold',
        marginBottom: 8
      },
      children: props.children
    });
  };
  Dialog.Content = function (props) {
    return (0, _jsxRuntime.jsx)(View, {
      style: {
        marginVertical: 8
      },
      children: props.children
    });
  };
  Dialog.Actions = function (props) {
    return (0, _jsxRuntime.jsx)(View, {
      style: {
        flexDirection: 'row',
        justifyContent: 'flex-end'
      },
      children: props.children
    });
  };
  var Chip = function Chip(props) {
    return (0, _jsxRuntime.jsxs)(View, {
      style: [{
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#e0e0e0',
        borderRadius: 16,
        padding: 4
      }, props.style],
      children: [props.icon && props.icon(), (0, _jsxRuntime.jsx)(Text, {
        style: {
          marginLeft: 4
        },
        children: props.children
      })]
    });
  };
  var Portal = function Portal(props) {
    return props.children;
  };
  return {
    Button: Button,
    Card: Card,
    Chip: Chip,
    Dialog: Dialog,
    Portal: Portal
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  var React = require('react');
  var _require2 = require('react-native'),
    Text = _require2.Text;
  return function MockIcon(props) {
    return (0, _jsxRuntime.jsx)(Text, {
      children: props.name
    });
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyPostsScreen = _interopRequireDefault(require("../../../src/screens/MyPostsScreen"));
var _postService = _interopRequireDefault(require("../../../src/services/api/postService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPosts = [{
  post_id: 1,
  content: '첫 번째 테스트 게시물입니다.',
  emotion_summary: '행복',
  like_count: 5,
  comment_count: 2,
  created_at: '2025-03-01T12:00:00Z'
}, {
  post_id: 2,
  content: '두 번째 테스트 게시물입니다.',
  emotion_summary: '슬픔',
  like_count: 2,
  comment_count: 1,
  created_at: '2025-03-02T12:00:00Z'
}];
function createMockResponse(data) {
  return {
    data: data,
    status: 200,
    statusText: 'OK',
    headers: {},
    config: {}
  };
}
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _postService.default.getMyPosts.mockResolvedValue(createMockResponse({
      posts: mockPosts
    }));
  });
  afterEach(function () {
    (0, _reactNative.cleanup)();
    jest.clearAllMocks();
  });
  it('renders post list correctly', (0, _asyncToGenerator2.default)(function* () {
    var mockAddListener = jest.fn().mockReturnValue(jest.fn());
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: mockAddListener
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('내 게시물')).toBeTruthy();
      expect(_reactNative.screen.getByText('첫 번째 테스트 게시물입니다.')).toBeTruthy();
      expect(_reactNative.screen.getByText('두 번째 테스트 게시물입니다.')).toBeTruthy();
    });
  }));
  it('navigates to create post screen', (0, _asyncToGenerator2.default)(function* () {
    var navigate = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: navigate,
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      var newPostButton = _reactNative.screen.getByText('새 게시물');
      _reactNative.fireEvent.press(newPostButton);
    });
    expect(navigate).toHaveBeenCalledWith('CreatePost');
  }));
  it('shows empty state when no posts', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getMyPosts.mockResolvedValue(createMockResponse({
      posts: []
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('게시물이 없습니다')).toBeTruthy();
      expect(_reactNative.screen.getByText('첫 게시물 작성하기')).toBeTruthy();
    });
  }));
  it('handles post deletion', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.deletePost.mockResolvedValue(createMockResponse({
      success: true
    }));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      var deleteButtons = _reactNative.screen.getAllByText('삭제');
      _reactNative.fireEvent.press(deleteButtons[0]);
    });
    expect(_reactNative.screen.getByText('게시물 삭제')).toBeTruthy();
    expect(_reactNative.screen.getByText('정말로 이 게시물을 삭제하시겠습니까?')).toBeTruthy();
    var confirmDeleteButton = _reactNative.screen.getAllByText('삭제')[_reactNative.screen.getAllByText('삭제').length - 1];
    _reactNative.fireEvent.press(confirmDeleteButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.deletePost).toHaveBeenCalledWith(1);
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 성공적으로 삭제되었습니다');
    });
  }));
  it('handles deletion cancellation', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      var deleteButtons = _reactNative.screen.getAllByText('삭제');
      _reactNative.fireEvent.press(deleteButtons[0]);
    });
    var cancelButton = _reactNative.screen.getByText('취소');
    _reactNative.fireEvent.press(cancelButton);
    expect(_postService.default.deletePost).not.toHaveBeenCalled();
  }));
  it('handles error during deletion', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.deletePost.mockRejectedValue({
      response: {
        status: 500,
        data: {
          message: '네트워크 오류'
        }
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      var deleteButtons = _reactNative.screen.getAllByText('삭제');
      _reactNative.fireEvent.press(deleteButtons[0]);
    });
    var confirmDeleteButton = _reactNative.screen.getAllByText('삭제')[_reactNative.screen.getAllByText('삭제').length - 1];
    _reactNative.fireEvent.press(confirmDeleteButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 삭제하는 중 오류가 발생했습니다');
    });
  }));
  it('handles error during data loading', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getMyPosts.mockRejectedValue({
      response: {
        status: 500,
        data: {
          message: '네트워크 오류'
        }
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다');
    });
  }));
  it('navigates to post detail screen', (0, _asyncToGenerator2.default)(function* () {
    var navigate = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: navigate,
        addListener: jest.fn().mockReturnValue(jest.fn())
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      var detailButtons = _reactNative.screen.getAllByText('자세히');
      _reactNative.fireEvent.press(detailButtons[0]);
    });
    expect(navigate).toHaveBeenCalledWith('Post', {
      postId: 1
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,