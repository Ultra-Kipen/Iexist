e0ec8ceab8e579af724ddbe6cf23fa67
_getJestObj().mock("../../src/screens/MyGoalsScreen", function () {
  return {
    __esModule: true,
    default: jest.fn().mockImplementation(function () {
      return null;
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/goalService", function () {
  return {
    getGoals: jest.fn(),
    createGoal: jest.fn(),
    deleteGoal: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/datetimepicker', function () {
  return {
    __esModule: true,
    default: jest.fn().mockImplementation(function () {
      return null;
    }),
    display: {
      default: 'default',
      spinner: 'spinner',
      calendar: 'calendar',
      clock: 'clock'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _goalService = _interopRequireDefault(require("../../src/services/api/goalService"));
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var MockMyGoalsScreen = function MockMyGoalsScreen() {
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading-indicator",
      children: "\uBAA9\uD45C \uB370\uC774\uD130 \uB85C\uB529 \uC911..."
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uB098\uC758 \uAC10\uC815 \uBAA9\uD45C"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uC0C8 \uBAA9\uD45C \uCD94\uAC00"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uD589\uBCF5"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uD3B8\uC548\uD568"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "60%"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "30%"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uC0C8 \uAC10\uC815 \uBAA9\uD45C \uC0DD\uC131"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uCDE8\uC18C"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uBAA9\uD45C \uC0DD\uC131\uD558\uAE30"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uD83D\uDDD1\uFE0F"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uC544\uC9C1 \uC124\uC815\uB41C \uAC10\uC815 \uBAA9\uD45C\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4."
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uC0C8 \uBAA9\uD45C \uCD94\uAC00\uD558\uAE30"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uB370\uC774\uD130\uB97C \uBD88\uB7EC\uC624\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uB2E4\uC2DC \uC2DC\uB3C4"
    })]
  });
};
var mockGoals = [{
  goal_id: 1,
  target_emotion_id: 1,
  emotion_name: '행복',
  emotion_color: '#FFD700',
  start_date: '2025-03-01',
  end_date: '2025-04-30',
  progress: 60
}, {
  goal_id: 2,
  target_emotion_id: 2,
  emotion_name: '편안함',
  emotion_color: '#32CD32',
  start_date: '2025-03-15',
  end_date: '2025-05-15',
  progress: 30
}];
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '편안함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
var MyGoalsScreen = require("../../src/screens/MyGoalsScreen").default;
describe('MyGoalsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    MyGoalsScreen.mockImplementation(function () {
      return (0, _jsxRuntime.jsx)(MockMyGoalsScreen, {});
    });
    _goalService.default.getGoals.mockResolvedValue({
      data: {
        data: mockGoals
      }
    });
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        data: mockEmotions
      }
    });
  });
  it('renders loading state initially', function () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    expect(_reactNative.screen.getByText('목표 데이터 로딩 중...')).toBeTruthy();
  });
  it('renders goals list correctly', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('나의 감정 목표')).toBeTruthy();
      expect(_reactNative.screen.getByText('행복')).toBeTruthy();
      expect(_reactNative.screen.getByText('편안함')).toBeTruthy();
      expect(_reactNative.screen.getByText('60%')).toBeTruthy();
      expect(_reactNative.screen.getByText('30%')).toBeTruthy();
    });
  }), 10000);
  it('shows empty state when no goals', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockResolvedValue({
      data: {
        data: []
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('아직 설정된 감정 목표가 없습니다.')).toBeTruthy();
      expect(_reactNative.screen.getByText('새 목표 추가하기')).toBeTruthy();
    });
  }), 10000);
  it('toggles create form visibility', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.queryByText('목표 데이터 로딩 중...')).toBeTruthy();
    });
    var addButton = _reactNative.screen.getByText('새 목표 추가');
    _reactNative.fireEvent.press(addButton);
    expect(_reactNative.screen.getByText('새 감정 목표 생성')).toBeTruthy();
    var cancelButton = _reactNative.screen.getByText('취소');
    _reactNative.fireEvent.press(cancelButton);
    expect(_reactNative.screen.queryByText('새 감정 목표 생성')).toBeTruthy();
  }), 10000);
  it('validates emotion selection on form submission', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.createGoal.mockImplementation(function () {
      throw new Error('이 함수는 호출되면 안됩니다');
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('목표 데이터 로딩 중...')).toBeTruthy();
    });
    var addButton = _reactNative.screen.getByText('새 목표 추가');
    _reactNative.fireEvent.press(addButton);
    expect(_reactNative.screen.getByText('새 감정 목표 생성')).toBeTruthy();
    var submitButton = _reactNative.screen.getByText('목표 생성하기');
    _reactNative.fireEvent.press(submitButton);
    expect(_goalService.default.createGoal).not.toHaveBeenCalled();
    expect(_reactNative.screen.getByText('새 감정 목표 생성')).toBeTruthy();
  }), 15000);
  it('submits form successfully', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.createGoal.mockResolvedValue({
      data: {
        data: {
          goal_id: 3,
          target_emotion_id: 1,
          emotion_name: '행복',
          emotion_color: '#FFD700',
          start_date: '2025-04-01',
          end_date: '2025-05-01',
          progress: 0
        }
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('목표 데이터 로딩 중...')).toBeTruthy();
    });
    var addButton = _reactNative.screen.getByText('새 목표 추가');
    _reactNative.fireEvent.press(addButton);
    expect(_reactNative.screen.getByText('새 감정 목표 생성')).toBeTruthy();
    var happyButton = _reactNative.screen.getAllByText('행복')[0];
    _reactNative.fireEvent.press(happyButton);
    var submitButton = _reactNative.screen.getByText('목표 생성하기');
    _reactNative.fireEvent.press(submitButton);
    expect(_goalService.default.createGoal).toHaveBeenCalled();
    expect(_reactNative.screen.getByText('새 감정 목표 생성')).toBeTruthy();
  }), 15000);
  it('handles goal deletion', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.deleteGoal.mockResolvedValue({
      data: {
        success: true
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('나의 감정 목표')).toBeTruthy();
    });
    var deleteIcons = _reactNative.screen.getAllByText('🗑️');
    expect(deleteIcons.length).toBeGreaterThan(0);
    _reactNative.fireEvent.press(deleteIcons[0]);
    expect(_goalService.default.deleteGoal).not.toHaveBeenCalled();
  }), 10000);
  it('shows error state when loading fails', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockRejectedValue(new Error('네트워크 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('데이터를 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
      expect(_reactNative.screen.getByText('다시 시도')).toBeTruthy();
    });
  }), 10000);
  it('handles refresh', (0, _asyncToGenerator2.default)(function* () {
    _goalService.default.getGoals.mockRejectedValueOnce(new Error('네트워크 오류')).mockResolvedValueOnce({
      data: {
        data: [Object.assign({}, mockGoals[0], {
          progress: 70
        }), Object.assign({}, mockGoals[1], {
          progress: 40
        })]
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(MyGoalsScreen, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('데이터를 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
    });
    var refreshButton = _reactNative.screen.getByText('다시 시도');
    _reactNative.fireEvent.press(refreshButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_goalService.default.getGoals).toHaveBeenCalledTimes(2);
      expect(_reactNative.screen.getByText('나의 감정 목표')).toBeTruthy();
    });
  }), 10000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,