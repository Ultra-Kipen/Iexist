de0c1d3dea5069f8329a9a591b32a8b4
_getJestObj().mock('@layouts/AuthLayout', function () {
  var React = require('react');
  return function (_ref) {
    var children = _ref.children,
      loading = _ref.loading,
      title = _ref.title,
      footer = _ref.footer;
    return React.createElement('div', {
      'data-testid': 'auth-layout'
    }, loading ? React.createElement('div', {
      'data-testid': 'loading-indicator'
    }) : children);
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _AuthLayout = _interopRequireDefault(require("../../src/layouts/AuthLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthLayout', function () {
  it('should pass', function () {
    expect(true).toBe(true);
  });
  it('renders children correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByText = _render.getByText;
    expect(getByText('인증 내용')).toBeTruthy();
  });
  it('shows loading indicator when loading is true', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uC778\uC99D \uB0B4\uC6A9"
        })
      })),
      getByTestId = _render2.getByTestId,
      queryByText = _render2.queryByText;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    expect(queryByText('인증 내용')).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJfcmVmIiwiY2hpbGRyZW4iLCJsb2FkaW5nIiwidGl0bGUiLCJmb290ZXIiLCJjcmVhdGVFbGVtZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfQXV0aExheW91dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJqZXN0IiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInRvQmUiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsIlRleHQiLCJnZXRCeVRleHQiLCJ0b0JlVHJ1dGh5IiwiX3JlbmRlcjIiLCJnZXRCeVRlc3RJZCIsInF1ZXJ5QnlUZXh0IiwidG9CZU51bGwiXSwic291cmNlcyI6WyJBdXRoTGF5b3V0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL2xheW91dHMvQXV0aExheW91dC50ZXN0LnRzeCAo7JeF642w7J207Yq4KVxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuLy8g7IOB64yAIOqyveuhnCDtmZXsnbggKO2VhOyalO2VmOuptCDsiJjsoJUpXHJcbmltcG9ydCBBdXRoTGF5b3V0IGZyb20gJy4uLy4uL3NyYy9sYXlvdXRzL0F1dGhMYXlvdXQnO1xyXG5cclxuLy8g66qo7YK5IOy2lOqwgFxyXG5qZXN0Lm1vY2soJ0BsYXlvdXRzL0F1dGhMYXlvdXQnLCAoKSA9PiB7XHJcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4gIHJldHVybiAoeyBjaGlsZHJlbiwgbG9hZGluZywgdGl0bGUsIGZvb3RlciB9KSA9PiB7XHJcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyAnZGF0YS10ZXN0aWQnOiAnYXV0aC1sYXlvdXQnIH0sIFxyXG4gICAgICBsb2FkaW5nID8gXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnZGl2JywgeyAnZGF0YS10ZXN0aWQnOiAnbG9hZGluZy1pbmRpY2F0b3InIH0pIDogXHJcbiAgICAgICAgY2hpbGRyZW5cclxuICAgICk7XHJcbiAgfTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnQXV0aExheW91dCcsICgpID0+IHtcclxuICAvLyDquLDrs7gg7YWM7Iqk7Yq4XHJcbiAgaXQoJ3Nob3VsZCBwYXNzJywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHRydWUpLnRvQmUodHJ1ZSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIOy7tO2PrOuEjO2KuCDroIzrjZTrp4Eg7YWM7Iqk7Yq4XHJcbiAgaXQoJ3JlbmRlcnMgY2hpbGRyZW4gY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEF1dGhMYXlvdXQ+XHJcbiAgICAgICAgPFRleHQ+7J247KadIOuCtOyaqTwvVGV4dD5cclxuICAgICAgPC9BdXRoTGF5b3V0PlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7J247KadIOuCtOyaqScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIOuhnOuUqSDthYzsiqTtirhcclxuICBpdCgnc2hvd3MgbG9hZGluZyBpbmRpY2F0b3Igd2hlbiBsb2FkaW5nIGlzIHRydWUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkLCBxdWVyeUJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8QXV0aExheW91dCBsb2FkaW5nPXt0cnVlfT5cclxuICAgICAgICA8VGV4dD7snbjspp0g64K07JqpPC9UZXh0PlxyXG4gICAgICA8L0F1dGhMYXlvdXQ+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2xvYWRpbmctaW5kaWNhdG9yJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgn7J247KadIOuCtOyaqScpKS50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQVNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxZQUFNO0VBQ3JDLElBQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztFQUM5QixPQUFPLFVBQUFDLElBQUEsRUFBMEM7SUFBQSxJQUF2Q0MsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7TUFBRUMsT0FBTyxHQUFBRixJQUFBLENBQVBFLE9BQU87TUFBRUMsS0FBSyxHQUFBSCxJQUFBLENBQUxHLEtBQUs7TUFBRUMsTUFBTSxHQUFBSixJQUFBLENBQU5JLE1BQU07SUFDeEMsT0FBT04sS0FBSyxDQUFDTyxhQUFhLENBQUMsS0FBSyxFQUFFO01BQUUsYUFBYSxFQUFFO0lBQWMsQ0FBQyxFQUNoRUgsT0FBTyxHQUNMSixLQUFLLENBQUNPLGFBQWEsQ0FBQyxLQUFLLEVBQUU7TUFBRSxhQUFhLEVBQUU7SUFBb0IsQ0FBQyxDQUFDLEdBQ2xFSixRQUNKLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUssc0JBQUEsR0FBQVAsT0FBQTtBQWpCSCxJQUFBUSxNQUFBLEdBQUFELHNCQUFBLENBQUFQLE9BQUE7QUFDQSxJQUFBUyxZQUFBLEdBQUFULE9BQUE7QUFDQSxJQUFBVSxhQUFBLEdBQUFWLE9BQUE7QUFHQSxJQUFBVyxXQUFBLEdBQUFKLHNCQUFBLENBQUFQLE9BQUE7QUFBc0QsSUFBQVksV0FBQSxHQUFBWixPQUFBO0FBQUEsU0FBQUgsWUFBQTtFQUFBLElBQUFnQixRQUFBLEdBQUFiLE9BQUE7SUFBQWMsSUFBQSxHQUFBRCxRQUFBLENBQUFDLElBQUE7RUFBQWpCLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFpQixJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFjdERDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtFQUUzQkMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFNO0lBQ3RCQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFDekIsQ0FBQyxDQUFDO0VBR0ZGLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxZQUFNO0lBQ3JDLElBQUFHLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFDMUIsSUFBQVIsV0FBQSxDQUFBUyxHQUFBLEVBQUNWLFdBQUEsQ0FBQVcsT0FBVTtRQUFBcEIsUUFBQSxFQUNULElBQUFVLFdBQUEsQ0FBQVMsR0FBQSxFQUFDWCxhQUFBLENBQUFhLElBQUk7VUFBQXJCLFFBQUEsRUFBQztRQUFLLENBQU07TUFBQyxDQUNSLENBQ2QsQ0FBQztNQUpPc0IsU0FBUyxHQUFBTCxPQUFBLENBQVRLLFNBQVM7SUFNakJQLE1BQU0sQ0FBQ08sU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0VBQ3pDLENBQUMsQ0FBQztFQUdGVCxFQUFFLENBQUMsOENBQThDLEVBQUUsWUFBTTtJQUN2RCxJQUFBVSxRQUFBLEdBQXFDLElBQUFOLG1CQUFNLEVBQ3pDLElBQUFSLFdBQUEsQ0FBQVMsR0FBQSxFQUFDVixXQUFBLENBQUFXLE9BQVU7UUFBQ25CLE9BQU8sRUFBRSxJQUFLO1FBQUFELFFBQUEsRUFDeEIsSUFBQVUsV0FBQSxDQUFBUyxHQUFBLEVBQUNYLGFBQUEsQ0FBQWEsSUFBSTtVQUFBckIsUUFBQSxFQUFDO1FBQUssQ0FBTTtNQUFDLENBQ1IsQ0FDZCxDQUFDO01BSk95QixXQUFXLEdBQUFELFFBQUEsQ0FBWEMsV0FBVztNQUFFQyxXQUFXLEdBQUFGLFFBQUEsQ0FBWEUsV0FBVztJQU1oQ1gsTUFBTSxDQUFDVSxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDRixVQUFVLENBQUMsQ0FBQztJQUNyRFIsTUFBTSxDQUFDVyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7RUFDekMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119