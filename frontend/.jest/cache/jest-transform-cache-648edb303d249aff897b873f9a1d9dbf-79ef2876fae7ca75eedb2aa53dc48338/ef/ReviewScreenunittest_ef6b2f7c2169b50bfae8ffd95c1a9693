2179c9f4fb31ef7d5744626e7615b38c
_getJestObj().mock('react-native-paper', function () {
  var Card = function Card(props) {
    return props.children || null;
  };
  Card.Cover = function Cover() {
    return null;
  };
  Card.Content = function Content(props) {
    return props.children || null;
  };
  return {
    SegmentedButtons: function SegmentedButtons(props) {
      if (props.onValueChange && global.simulatePeriodChange) {
        props.onValueChange(global.newPeriodValue || 'monthly');
        global.simulatePeriodChange = false;
      }
      return null;
    },
    Card: Card,
    Button: function Button(props) {
      if (props.onPress && global.simulateButtonClick) {
        props.onPress();
        global.simulateButtonClick = false;
      }
      return null;
    },
    Title: function Title(props) {
      return props.children || null;
    },
    Paragraph: function Paragraph(props) {
      return props.children || null;
    },
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native', function () {
  var reactNative = jest.requireActual('react-native');
  return Object.assign({}, reactNative, {
    Image: function Image() {
      return null;
    }
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var consoleSpy = jest.spyOn(console, 'log').mockImplementation(function () {});
describe('ReviewScreen 단위 테스트', function () {
  var ReviewScreen;
  beforeEach(function () {
    global.simulatePeriodChange = false;
    global.simulateButtonClick = false;
    global.newPeriodValue = null;
    consoleSpy.mockClear();
    jest.resetModules();
    ReviewScreen = require("../../../src/screens/ReviewScreen").default;
  });
  afterAll(function () {
    consoleSpy.mockRestore();
  });
  it('컴포넌트 모듈 자체가 존재해야 함', function () {
    expect(ReviewScreen).toBeDefined();
  });
  it('컴포넌트가 함수형이어야 함', function () {
    expect(typeof ReviewScreen).toBe('function');
  });
  it('오류 없이 렌더링되어야 함', function () {
    expect(function () {
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    }).not.toThrow();
  });
  it('useState 훅이 올바른 초기값(weekly)으로 설정되어야 함', function () {
    var capturedInitialValue;
    jest.spyOn(_react.default, 'useState').mockImplementationOnce(function (initialValue) {
      capturedInitialValue = initialValue;
      return [initialValue, jest.fn()];
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    expect(capturedInitialValue).toBe('weekly');
  });
  it('period 상태 변경 시 UI가 올바르게 업데이트되어야 함', function () {
    var setPeriod;
    jest.spyOn(_react.default, 'useState').mockImplementationOnce(function (initialValue) {
      return ['monthly', function (newValue) {
        setPeriod = newValue;
      }];
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    expect(setPeriod).toBeDefined();
  });
  it('그래프 버튼 클릭 시 console.log가 호출되어야 함', function () {
    global.simulateButtonClick = true;
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');
  });
  it('기간 변경 시 period 상태가 올바르게 업데이트되어야 함', function () {
    global.simulatePeriodChange = true;
    global.newPeriodValue = 'monthly';
    var mockSetPeriod = jest.fn();
    jest.spyOn(_react.default, 'useState').mockImplementationOnce(function (initialValue) {
      return [initialValue, mockSetPeriod];
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    expect(mockSetPeriod).toHaveBeenCalledWith('monthly');
  });
  it('컴포넌트의 스타일이 올바르게 정의되어야 함', function () {
    var stylesObject = require("../../../src/screens/ReviewScreen").default.stylesObject;
    if (!stylesObject) {
      var componentCode = require('fs').readFileSync(require.resolve("../../../src/screens/ReviewScreen"), 'utf8');
      expect(componentCode).toContain('StyleSheet.create');
      ['container', 'segmentedButtons', 'title', 'imageGrid', 'imageCard', 'graphButton', 'statsCard'].forEach(function (styleName) {
        expect(componentCode).toContain(styleName);
      });
    } else {
      expect(stylesObject.container).toBeDefined();
      expect(stylesObject.segmentedButtons).toBeDefined();
      expect(stylesObject.imageGrid).toBeDefined();
    }
  });
  it('이미지 그리드에 적절한 수의 이미지가 표시되어야 함', function () {
    var mapSpy = jest.spyOn(Array.prototype, 'map');
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(ReviewScreen, {}));
    expect(mapSpy).toHaveBeenCalled();
    var mapCalls = mapSpy.mock.calls;
    var hasImageGridMap = mapCalls.some(function (call) {
      return call[0] && call[0].length === 6 && typeof call[1] === 'function';
    });
    expect(hasImageGridMap).toBe(true);
    mapSpy.mockRestore();
  });
  it('컴포넌트 스냅샷이 일치해야 함', function () {
    jest.doMock('react-native-paper', function () {
      return {
        SegmentedButtons: 'SegmentedButtons',
        Card: 'Card',
        Button: 'Button',
        Title: 'Title',
        Paragraph: 'Paragraph',
        useTheme: function useTheme() {
          return {
            colors: {
              primary: '#000',
              background: '#fff'
            }
          };
        }
      };
    }, {
      virtual: true
    });
    var renderer = require('react-test-renderer');
    var tree = renderer.create((0, _jsxRuntime.jsx)(ReviewScreen, {})).toJSON();
    expect(tree).not.toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,