{"version":3,"names":["_getJestObj","mock","get","jest","fn","post","put","delete","interceptors","request","use","eject","response","_interopRequireDefault","require","_asyncToGenerator2","_statsService","_fs","_path","_require","describe","statsServiceSource","beforeAll","statsServicePath","path","resolve","__dirname","fs","readFileSync","it","expect","toContain","beforeEach","clearAllMocks","default","statsService","client","mockResolvedValueOnce","data","stats","getUserStats","toHaveBeenCalledWith","options","start_date","end_date","type","getEmotionTrends","params","any","URLSearchParams","getWeeklyTrends","getMonthlyTrends","emotionId","period","getEmotionStats","getActivitySummary","mockRejectedValue","Error","rejects","toThrow"],"sources":["statsService.test.ts"],"sourcesContent":["// __tests__/unit/services/api/statsService.test.ts\r\n\r\nimport statsService from '../../../../src/services/api/statsService';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n// apiClient 모킹 (interceptors 포함)\r\njest.mock('../../../../src/services/api/client', () => {\r\n  return {\r\n    get: jest.fn(),\r\n    post: jest.fn(),\r\n    put: jest.fn(),\r\n    delete: jest.fn(),\r\n    interceptors: {\r\n      request: {\r\n        use: jest.fn(),\r\n        eject: jest.fn()\r\n      },\r\n      response: {\r\n        use: jest.fn(),\r\n        eject: jest.fn()\r\n      }\r\n    }\r\n  };\r\n});\r\n\r\ndescribe('statsService 소스 코드 검증', () => {\r\n  let statsServiceSource;\r\n  \r\n  beforeAll(() => {\r\n    // 파일 읽기\r\n    const statsServicePath = path.resolve(__dirname, '../../../../src/services/api/statsService.ts');\r\n    statsServiceSource = fs.readFileSync(statsServicePath, 'utf8');\r\n  });\r\n  \r\n  it('기본 인터페이스와 모든 필수 메서드가 정의되어 있어야 함', () => {\r\n    expect(statsServiceSource).toContain('interface StatsServiceType');\r\n    expect(statsServiceSource).toContain('client: AxiosInstance');\r\n    expect(statsServiceSource).toContain('getUserStats:');\r\n    expect(statsServiceSource).toContain('getEmotionTrends:');\r\n    expect(statsServiceSource).toContain('getWeeklyTrends:');\r\n    expect(statsServiceSource).toContain('getMonthlyTrends:');\r\n    expect(statsServiceSource).toContain('getEmotionStats:');\r\n    expect(statsServiceSource).toContain('getActivitySummary:');\r\n  });\r\n  \r\n  it('각 메서드에 대한 오류 처리가 구현되어 있어야 함', () => {\r\n    expect(statsServiceSource).toContain('try {');\r\n    expect(statsServiceSource).toContain('catch (error)');\r\n    expect(statsServiceSource).toContain('throw new Error');\r\n    \r\n    // 각 오류 메시지 확인\r\n    expect(statsServiceSource).toContain('통계 정보 조회에 실패했습니다');\r\n    expect(statsServiceSource).toContain('감정 트렌드 조회에 실패했습니다');\r\n    expect(statsServiceSource).toContain('주간 트렌드 조회에 실패했습니다');\r\n    expect(statsServiceSource).toContain('월간 트렌드 조회에 실패했습니다');\r\n    expect(statsServiceSource).toContain('감정별 통계 조회에 실패했습니다');\r\n    expect(statsServiceSource).toContain('활동 요약 조회에 실패했습니다');\r\n  });\r\n  \r\n  it('URLSearchParams를 사용하여 쿼리 매개변수를 적절히 처리해야 함', () => {\r\n    expect(statsServiceSource).toContain('const params = new URLSearchParams()');\r\n    expect(statsServiceSource).toContain('params.append(');\r\n  });\r\n  \r\n  it('적절한 API 엔드포인트를 사용해야 함', () => {\r\n    expect(statsServiceSource).toContain('/stats');\r\n    expect(statsServiceSource).toContain('/stats/trends');\r\n    expect(statsServiceSource).toContain('/stats/weekly');\r\n    expect(statsServiceSource).toContain('/stats/monthly');\r\n    expect(statsServiceSource).toContain('/stats/emotions/');\r\n    expect(statsServiceSource).toContain('/stats/activity');\r\n  });\r\n  \r\n  it('모든 메서드에 JSDoc 주석이 있어야 함', () => {\r\n    expect(statsServiceSource).toContain('/**');\r\n    expect(statsServiceSource).toContain('@param');\r\n    expect(statsServiceSource).toContain('@returns');\r\n    expect(statsServiceSource).toContain('*/');\r\n  });\r\n});\r\n\r\n// 기능 테스트: 실제 동작 검증\r\ndescribe('statsService 기능 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n  \r\n  it('getUserStats가 올바른 엔드포인트를 호출해야 함', async () => {\r\n    // 성공 응답 모킹\r\n    (statsService.client.get as jest.Mock).mockResolvedValueOnce({\r\n      data: { stats: {} }\r\n    });\r\n    \r\n    await statsService.getUserStats();\r\n    \r\n    expect(statsService.client.get).toHaveBeenCalledWith('/stats');\r\n  });\r\n  \r\n  it('getEmotionTrends가 올바른 매개변수로 호출되어야 함', async () => {\r\n    // 성공 응답 모킹\r\n    (statsService.client.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {}\r\n    });\r\n    \r\n    const options = {\r\n      start_date: '2025-01-01',\r\n      end_date: '2025-12-31',\r\n      type: 'monthly' as const\r\n    };\r\n    \r\n    await statsService.getEmotionTrends(options);\r\n    \r\n    expect(statsService.client.get).toHaveBeenCalledWith('/stats/trends', {\r\n      params: expect.any(URLSearchParams)\r\n    });\r\n    \r\n    // URLSearchParams를 확인하는 것은 어려울 수 있으므로 생략\r\n  });\r\n  \r\n  it('getWeeklyTrends가 올바른 매개변수로 호출되어야 함', async () => {\r\n    // 성공 응답 모킹\r\n    (statsService.client.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {}\r\n    });\r\n    \r\n    await statsService.getWeeklyTrends({\r\n      start_date: '2025-01-01',\r\n      end_date: '2025-01-31'\r\n    });\r\n    \r\n    expect(statsService.client.get).toHaveBeenCalledWith('/stats/weekly', {\r\n      params: expect.any(URLSearchParams)\r\n    });\r\n  });\r\n  \r\n  it('getMonthlyTrends가 올바른 매개변수로 호출되어야 함', async () => {\r\n    // 성공 응답 모킹\r\n    (statsService.client.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {}\r\n    });\r\n    \r\n    await statsService.getMonthlyTrends({\r\n      start_date: '2025-01-01',\r\n      end_date: '2025-12-31'\r\n    });\r\n    \r\n    expect(statsService.client.get).toHaveBeenCalledWith('/stats/monthly', {\r\n      params: expect.any(URLSearchParams)\r\n    });\r\n  });\r\n  \r\n  it('getEmotionStats가 감정 ID와 기간으로 올바르게 호출되어야 함', async () => {\r\n    // 성공 응답 모킹\r\n    (statsService.client.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {}\r\n    });\r\n    \r\n    const emotionId = 1;\r\n    const period = 'week' as const;\r\n    \r\n    await statsService.getEmotionStats(emotionId, period);\r\n    \r\n    expect(statsService.client.get).toHaveBeenCalledWith(`/stats/emotions/${emotionId}`, {\r\n      params: { period }\r\n    });\r\n  });\r\n  \r\n  it('getActivitySummary가 기간 매개변수로 올바르게 호출되어야 함', async () => {\r\n    // 성공 응답 모킹\r\n    (statsService.client.get as jest.Mock).mockResolvedValueOnce({\r\n      data: {}\r\n    });\r\n    \r\n    const period = 'year' as const;\r\n    \r\n    await statsService.getActivitySummary(period);\r\n    \r\n    expect(statsService.client.get).toHaveBeenCalledWith('/stats/activity', {\r\n      params: { period }\r\n    });\r\n  });\r\n  \r\n  it('모든 메서드가 오류를 올바르게 처리해야 함', async () => {\r\n    // 모든 API 호출에 대해 오류 모킹\r\n    (statsService.client.get as jest.Mock).mockRejectedValue(new Error('API 오류'));\r\n    \r\n    // 각 메서드의 오류 처리 테스트\r\n    await expect(statsService.getUserStats()).rejects.toThrow('통계 정보 조회에 실패했습니다');\r\n    await expect(statsService.getEmotionTrends()).rejects.toThrow('감정 트렌드 조회에 실패했습니다');\r\n    await expect(statsService.getWeeklyTrends()).rejects.toThrow('주간 트렌드 조회에 실패했습니다');\r\n    await expect(statsService.getMonthlyTrends()).rejects.toThrow('월간 트렌드 조회에 실패했습니다');\r\n    await expect(statsService.getEmotionStats(1)).rejects.toThrow('감정별 통계 조회에 실패했습니다');\r\n    await expect(statsService.getActivitySummary()).rejects.toThrow('활동 요약 조회에 실패했습니다');\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}