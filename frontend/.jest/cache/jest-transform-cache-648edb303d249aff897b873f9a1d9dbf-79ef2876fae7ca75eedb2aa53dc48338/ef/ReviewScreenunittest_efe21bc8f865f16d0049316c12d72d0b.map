{"version":3,"names":["_getJestObj","mock","Card","props","children","Cover","Content","SegmentedButtons","onValueChange","global","simulatePeriodChange","newPeriodValue","Button","onPress","simulateButtonClick","Title","Paragraph","useTheme","colors","primary","background","reactNative","jest","requireActual","Object","assign","Image","_interopRequireDefault","require","_react","_reactNative","_jsxRuntime","_require","consoleSpy","spyOn","console","mockImplementation","describe","ReviewScreen","beforeEach","mockClear","resetModules","default","afterAll","mockRestore","it","expect","toBeDefined","toBe","render","jsx","not","toThrow","capturedInitialValue","React","mockImplementationOnce","initialValue","fn","setPeriod","newValue","toHaveBeenCalledWith","mockSetPeriod","stylesObject","componentCode","readFileSync","resolve","toContain","forEach","styleName","container","segmentedButtons","imageGrid","mapSpy","Array","prototype","toHaveBeenCalled","mapCalls","calls","hasImageGridMap","some","call","length","doMock","virtual","renderer","tree","create","toJSON","toBeNull"],"sources":["ReviewScreen.unit.test.tsx"],"sourcesContent":["// root/frontend/tests/unit/screens/ReviewScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\n\r\n// react-native-paper 모킹\r\njest.mock('react-native-paper', () => {\r\n  const Card = function Card(props) { \r\n    return props.children || null; \r\n  };\r\n  Card.Cover = function Cover() { return null; };\r\n  Card.Content = function Content(props) { \r\n    return props.children || null; \r\n  };\r\n  \r\n  return {\r\n    SegmentedButtons: function SegmentedButtons(props) { \r\n      // 버튼 클릭 시뮬레이션을 위해 실제 동작 구현\r\n      if (props.onValueChange && global.simulatePeriodChange) {\r\n        props.onValueChange(global.newPeriodValue || 'monthly');\r\n        global.simulatePeriodChange = false;\r\n      }\r\n      return null; \r\n    },\r\n    Card,\r\n    Button: function Button(props) { \r\n      // 버튼 클릭 시뮬레이션을 위해 실제 동작 구현\r\n      if (props.onPress && global.simulateButtonClick) {\r\n        props.onPress();\r\n        global.simulateButtonClick = false;\r\n      }\r\n      return null; \r\n    },\r\n    Title: function Title(props) { return props.children || null; },\r\n    Paragraph: function Paragraph(props) { return props.children || null; },\r\n    useTheme: () => ({\r\n      colors: {\r\n        primary: '#000',\r\n        background: '#fff',\r\n      }\r\n    })\r\n  };\r\n});\r\n\r\n// 이미지 모킹\r\njest.mock('react-native', () => {\r\n  const reactNative = jest.requireActual('react-native');\r\n  \r\n  return {\r\n    ...reactNative,\r\n    Image: function Image() { return null; }\r\n  };\r\n});\r\n\r\n// 실제 컴포넌트 호출 캡처를 위한 스파이\r\nconst consoleSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n\r\ndescribe('ReviewScreen 단위 테스트', () => {\r\n  let ReviewScreen;\r\n  \r\n  beforeEach(() => {\r\n    // 각 테스트 전에 상태 초기화\r\n    global.simulatePeriodChange = false;\r\n    global.simulateButtonClick = false;\r\n    global.newPeriodValue = null;\r\n    consoleSpy.mockClear();\r\n    \r\n    // 매 테스트마다 모듈 새로 불러오기\r\n    jest.resetModules();\r\n    ReviewScreen = require('../../../src/screens/ReviewScreen').default;\r\n  });\r\n  \r\n  afterAll(() => {\r\n    consoleSpy.mockRestore();\r\n  });\r\n  \r\n  it('컴포넌트 모듈 자체가 존재해야 함', () => {\r\n    expect(ReviewScreen).toBeDefined();\r\n  });\r\n  \r\n  it('컴포넌트가 함수형이어야 함', () => {\r\n    expect(typeof ReviewScreen).toBe('function');\r\n  });\r\n  \r\n  it('오류 없이 렌더링되어야 함', () => {\r\n    expect(() => {\r\n      render(<ReviewScreen />);\r\n    }).not.toThrow();\r\n  });\r\n  \r\n  it('useState 훅이 올바른 초기값(weekly)으로 설정되어야 함', () => {\r\n    // useState 스파이 설정\r\n    let capturedInitialValue;\r\n    jest.spyOn(React, 'useState').mockImplementationOnce((initialValue) => {\r\n      capturedInitialValue = initialValue;\r\n      return [initialValue, jest.fn()];\r\n    });\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // 초기값 검증\r\n    expect(capturedInitialValue).toBe('weekly');\r\n  });\r\n  \r\n  it('period 상태 변경 시 UI가 올바르게 업데이트되어야 함', () => {\r\n    // useState의 상태 변경 함수를 캡처하기 위한 변수\r\n    let setPeriod;\r\n    \r\n    // useState 모킹\r\n    jest.spyOn(React, 'useState').mockImplementationOnce((initialValue) => {\r\n      // 첫 번째 호출에서만 period 상태 캡처\r\n      return ['monthly', (newValue) => {\r\n        setPeriod = newValue;\r\n      }];\r\n    });\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // 상태 변경 함수가 올바르게 캡처되었는지 확인\r\n    expect(setPeriod).toBeDefined();\r\n  });\r\n  \r\n  it('그래프 버튼 클릭 시 console.log가 호출되어야 함', () => {\r\n    // 버튼 클릭 시뮬레이션 활성화\r\n    global.simulateButtonClick = true;\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // console.log 호출 확인\r\n    expect(consoleSpy).toHaveBeenCalledWith('Show emotion graph');\r\n  });\r\n  \r\n  it('기간 변경 시 period 상태가 올바르게 업데이트되어야 함', () => {\r\n    // 기간 변경 시뮬레이션 활성화\r\n    global.simulatePeriodChange = true;\r\n    global.newPeriodValue = 'monthly';\r\n    \r\n    // React.useState 모킹하여 setPeriod 호출 추적\r\n    const mockSetPeriod = jest.fn();\r\n    jest.spyOn(React, 'useState').mockImplementationOnce((initialValue) => {\r\n      return [initialValue, mockSetPeriod];\r\n    });\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // period 상태 변경 함수가 호출되었는지 확인\r\n    expect(mockSetPeriod).toHaveBeenCalledWith('monthly');\r\n  });\r\n  \r\n  it('컴포넌트의 스타일이 올바르게 정의되어야 함', () => {\r\n    // 스타일 객체 직접 접근\r\n    const stylesObject = require('../../../src/screens/ReviewScreen').default.stylesObject;\r\n    \r\n    // 스타일이 존재하지 않으면 추출 방식 변경\r\n    if (!stylesObject) {\r\n      // 컴포넌트 코드 직접 분석\r\n      const componentCode = require('fs').readFileSync(\r\n        require.resolve('../../../src/screens/ReviewScreen'), \r\n        'utf8'\r\n      );\r\n      \r\n      // StyleSheet.create가 호출되는지 확인\r\n      expect(componentCode).toContain('StyleSheet.create');\r\n      \r\n      // 필수 스타일 속성이 있는지 확인\r\n      ['container', 'segmentedButtons', 'title', 'imageGrid', 'imageCard', 'graphButton', 'statsCard'].forEach(styleName => {\r\n        expect(componentCode).toContain(styleName);\r\n      });\r\n    } else {\r\n      // 스타일 객체가 존재하면 직접 검증\r\n      expect(stylesObject.container).toBeDefined();\r\n      expect(stylesObject.segmentedButtons).toBeDefined();\r\n      expect(stylesObject.imageGrid).toBeDefined();\r\n    }\r\n  });\r\n  \r\n  it('이미지 그리드에 적절한 수의 이미지가 표시되어야 함', () => {\r\n    // 배열 매핑 함수를 추적하여 이미지 수 확인\r\n    const mapSpy = jest.spyOn(Array.prototype, 'map');\r\n    \r\n    // 컴포넌트 렌더링\r\n    render(<ReviewScreen />);\r\n    \r\n    // map 호출에서 이미지 배열 길이가 예상대로인지 확인\r\n    expect(mapSpy).toHaveBeenCalled();\r\n    \r\n    // 최소한 하나의 호출에서 배열 길이가 6인 경우가 있어야 함\r\n    const mapCalls = mapSpy.mock.calls;\r\n    const hasImageGridMap = mapCalls.some(call => \r\n      call[0] && call[0].length === 6 && typeof call[1] === 'function'\r\n    );\r\n    \r\n    expect(hasImageGridMap).toBe(true);\r\n    \r\n    // 스파이 정리\r\n    mapSpy.mockRestore();\r\n  });\r\n  \r\n  it('컴포넌트 스냅샷이 일치해야 함', () => {\r\n    // 의존성 모킹을 위한 특별 처리\r\n    jest.doMock('react-native-paper', () => ({\r\n      SegmentedButtons: 'SegmentedButtons',\r\n      Card: 'Card',\r\n      Button: 'Button',\r\n      Title: 'Title',\r\n      Paragraph: 'Paragraph',\r\n      useTheme: () => ({ colors: { primary: '#000', background: '#fff' } })\r\n    }), { virtual: true });\r\n    \r\n    // react-test-renderer 사용 스냅샷 생성\r\n    const renderer = require('react-test-renderer');\r\n    const tree = renderer.create(<ReviewScreen />).toJSON();\r\n    \r\n    // 스냅샷이 null이 아닌지 확인 (최소한의 검증)\r\n    expect(tree).not.toBeNull();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}