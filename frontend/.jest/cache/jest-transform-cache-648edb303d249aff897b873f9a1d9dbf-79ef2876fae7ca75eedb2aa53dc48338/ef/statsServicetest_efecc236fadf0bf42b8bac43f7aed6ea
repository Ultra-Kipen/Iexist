b2f082975dbcc95129aef6e33e105abc
_getJestObj().mock("../../../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: {
        use: jest.fn(),
        eject: jest.fn()
      },
      response: {
        use: jest.fn(),
        eject: jest.fn()
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _statsService = _interopRequireDefault(require("../../../../src/services/api/statsService"));
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('statsService 소스 코드 검증', function () {
  var statsServiceSource;
  beforeAll(function () {
    var statsServicePath = _path.default.resolve(__dirname, '../../../../src/services/api/statsService.ts');
    statsServiceSource = _fs.default.readFileSync(statsServicePath, 'utf8');
  });
  it('기본 인터페이스와 모든 필수 메서드가 정의되어 있어야 함', function () {
    expect(statsServiceSource).toContain('interface StatsServiceType');
    expect(statsServiceSource).toContain('client: AxiosInstance');
    expect(statsServiceSource).toContain('getUserStats:');
    expect(statsServiceSource).toContain('getEmotionTrends:');
    expect(statsServiceSource).toContain('getWeeklyTrends:');
    expect(statsServiceSource).toContain('getMonthlyTrends:');
    expect(statsServiceSource).toContain('getEmotionStats:');
    expect(statsServiceSource).toContain('getActivitySummary:');
  });
  it('각 메서드에 대한 오류 처리가 구현되어 있어야 함', function () {
    expect(statsServiceSource).toContain('try {');
    expect(statsServiceSource).toContain('catch (error)');
    expect(statsServiceSource).toContain('throw new Error');
    expect(statsServiceSource).toContain('통계 정보 조회에 실패했습니다');
    expect(statsServiceSource).toContain('감정 트렌드 조회에 실패했습니다');
    expect(statsServiceSource).toContain('주간 트렌드 조회에 실패했습니다');
    expect(statsServiceSource).toContain('월간 트렌드 조회에 실패했습니다');
    expect(statsServiceSource).toContain('감정별 통계 조회에 실패했습니다');
    expect(statsServiceSource).toContain('활동 요약 조회에 실패했습니다');
  });
  it('URLSearchParams를 사용하여 쿼리 매개변수를 적절히 처리해야 함', function () {
    expect(statsServiceSource).toContain('const params = new URLSearchParams()');
    expect(statsServiceSource).toContain('params.append(');
  });
  it('적절한 API 엔드포인트를 사용해야 함', function () {
    expect(statsServiceSource).toContain('/stats');
    expect(statsServiceSource).toContain('/stats/trends');
    expect(statsServiceSource).toContain('/stats/weekly');
    expect(statsServiceSource).toContain('/stats/monthly');
    expect(statsServiceSource).toContain('/stats/emotions/');
    expect(statsServiceSource).toContain('/stats/activity');
  });
  it('모든 메서드에 JSDoc 주석이 있어야 함', function () {
    expect(statsServiceSource).toContain('/**');
    expect(statsServiceSource).toContain('@param');
    expect(statsServiceSource).toContain('@returns');
    expect(statsServiceSource).toContain('*/');
  });
});
describe('statsService 기능 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('getUserStats가 올바른 엔드포인트를 호출해야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockResolvedValueOnce({
      data: {
        stats: {}
      }
    });
    yield _statsService.default.getUserStats();
    expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats');
  }));
  it('getEmotionTrends가 올바른 매개변수로 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockResolvedValueOnce({
      data: {}
    });
    var options = {
      start_date: '2025-01-01',
      end_date: '2025-12-31',
      type: 'monthly'
    };
    yield _statsService.default.getEmotionTrends(options);
    expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/trends', {
      params: expect.any(URLSearchParams)
    });
  }));
  it('getWeeklyTrends가 올바른 매개변수로 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockResolvedValueOnce({
      data: {}
    });
    yield _statsService.default.getWeeklyTrends({
      start_date: '2025-01-01',
      end_date: '2025-01-31'
    });
    expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/weekly', {
      params: expect.any(URLSearchParams)
    });
  }));
  it('getMonthlyTrends가 올바른 매개변수로 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockResolvedValueOnce({
      data: {}
    });
    yield _statsService.default.getMonthlyTrends({
      start_date: '2025-01-01',
      end_date: '2025-12-31'
    });
    expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/monthly', {
      params: expect.any(URLSearchParams)
    });
  }));
  it('getEmotionStats가 감정 ID와 기간으로 올바르게 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockResolvedValueOnce({
      data: {}
    });
    var emotionId = 1;
    var period = 'week';
    yield _statsService.default.getEmotionStats(emotionId, period);
    expect(_statsService.default.client.get).toHaveBeenCalledWith(`/stats/emotions/${emotionId}`, {
      params: {
        period: period
      }
    });
  }));
  it('getActivitySummary가 기간 매개변수로 올바르게 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockResolvedValueOnce({
      data: {}
    });
    var period = 'year';
    yield _statsService.default.getActivitySummary(period);
    expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/activity', {
      params: {
        period: period
      }
    });
  }));
  it('모든 메서드가 오류를 올바르게 처리해야 함', (0, _asyncToGenerator2.default)(function* () {
    _statsService.default.client.get.mockRejectedValue(new Error('API 오류'));
    yield expect(_statsService.default.getUserStats()).rejects.toThrow('통계 정보 조회에 실패했습니다');
    yield expect(_statsService.default.getEmotionTrends()).rejects.toThrow('감정 트렌드 조회에 실패했습니다');
    yield expect(_statsService.default.getWeeklyTrends()).rejects.toThrow('주간 트렌드 조회에 실패했습니다');
    yield expect(_statsService.default.getMonthlyTrends()).rejects.toThrow('월간 트렌드 조회에 실패했습니다');
    yield expect(_statsService.default.getEmotionStats(1)).rejects.toThrow('감정별 통계 조회에 실패했습니다');
    yield expect(_statsService.default.getActivitySummary()).rejects.toThrow('활동 요약 조회에 실패했습니다');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,