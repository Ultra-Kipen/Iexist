4bebed93e607d454688e06a0ea751da2
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  var mockReact = jest.requireActual('react');
  return Object.assign({}, rn, {
    FlatList: function FlatList(_ref) {
      var data = _ref.data,
        renderItem = _ref.renderItem,
        ListEmptyComponent = _ref.ListEmptyComponent;
      if (!data || data.length === 0) {
        return ListEmptyComponent || null;
      }
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: data.map(function (item, index) {
          return (0, _jsxRuntime.jsx)(mockReact.Fragment, {
            children: renderItem({
              item: item,
              index: index
            })
          }, index);
        })
      });
    }
  });
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  var mockReact = jest.requireActual('react');
  var _jest$requireActual = jest.requireActual('react-native'),
    View = _jest$requireActual.View,
    Text = _jest$requireActual.Text,
    TouchableOpacity = _jest$requireActual.TouchableOpacity;
  var Button = function Button(props) {
    return (0, _jsxRuntime.jsx)(TouchableOpacity, {
      onPress: props.onPress,
      testID: props.testID,
      style: props.style,
      children: (0, _jsxRuntime.jsx)(Text, {
        children: props.children
      })
    });
  };
  var Card = function Card(props) {
    return (0, _jsxRuntime.jsx)(View, {
      style: props.style,
      testID: props.testID,
      children: props.children
    });
  };
  Card.Content = function Content(props) {
    return (0, _jsxRuntime.jsx)(View, {
      children: props.children
    });
  };
  Card.Actions = function Actions(props) {
    return (0, _jsxRuntime.jsx)(View, {
      children: props.children
    });
  };
  var Dialog = function Dialog(props) {
    if (!props.visible) return null;
    return (0, _jsxRuntime.jsx)(View, {
      children: props.children
    });
  };
  Dialog.Title = function Title(props) {
    return (0, _jsxRuntime.jsx)(Text, {
      children: props.children
    });
  };
  Dialog.Content = function Content(props) {
    return (0, _jsxRuntime.jsx)(View, {
      children: props.children
    });
  };
  Dialog.Actions = function Actions(props) {
    return (0, _jsxRuntime.jsx)(View, {
      children: props.children
    });
  };
  var Chip = function Chip(props) {
    return (0, _jsxRuntime.jsxs)(View, {
      style: props.style,
      children: [props.icon && props.icon(), (0, _jsxRuntime.jsx)(Text, {
        children: props.children
      })]
    });
  };
  var Portal = function Portal(props) {
    return props.children;
  };
  return {
    Button: Button,
    Card: Card,
    Chip: Chip,
    Dialog: Dialog,
    Portal: Portal
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  var mockReact = jest.requireActual('react');
  var _jest$requireActual2 = jest.requireActual('react-native'),
    Text = _jest$requireActual2.Text;
  return function MockIcon(props) {
    return (0, _jsxRuntime.jsx)(Text, {
      children: props.name
    });
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyPostsScreen = _interopRequireDefault(require("../../src/screens/MyPostsScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPosts = [{
  post_id: 1,
  content: '첫 번째 테스트 게시물입니다.',
  emotion_summary: '행복',
  like_count: 5,
  comment_count: 2,
  created_at: '2025-03-01T12:00:00Z'
}, {
  post_id: 2,
  content: '두 번째 테스트 게시물입니다.',
  emotion_summary: '슬픔',
  like_count: 2,
  comment_count: 1,
  created_at: '2025-03-02T12:00:00Z'
}];
function createMockResponse(data) {
  return {
    data: data,
    status: 200,
    statusText: 'OK',
    headers: {},
    config: {}
  };
}
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _postService.default.getMyPosts.mockResolvedValue(createMockResponse({
      posts: mockPosts
    }));
  });
  afterEach(function () {
    (0, _reactNative.cleanup)();
  });
  it('renders post list correctly', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: {
        navigate: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      },
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative.screen.getByText('내 게시물')).toBeTruthy();
    }, {
      timeout: 2000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,