{"version":3,"names":["_getJestObj","mock","originalModule","jest","requireActual","Object","assign","init","fn","disconnect","isConnected","on","off","emit","_interopRequireDefault","require","_asyncToGenerator2","_reactHooks","_socketService","_useSocket","_require","describe","beforeEach","clearAllMocks","socketService","mockReturnValue","mockImplementation","event","callback","it","default","mockResolvedValue","undefined","_renderHook","renderHook","useSocket","autoConnect","result","expect","current","isLoading","toBe","error","toHaveBeenCalled","act","_calls$find","calls","connectCallback","find","call","_renderHook2","not","testError","Error","mockRejectedValue","_renderHook3","_calls$find2","errorCallback","_renderHook4","connect","_calls$find3","_renderHook5","_calls$find4","_renderHook6","_calls$find5","message","toHaveBeenCalledWith","consoleWarnSpy","spyOn","console","_renderHook7","mockRestore","_renderHook8","mockCallback","mockEventCallback","events"],"sources":["useSocket.test.ts"],"sourcesContent":["// __tests__/hooks/useSocket.test.ts\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport socketService from '../../src/services/socketService';\r\nimport useSocket from '../../src/hooks/useSocket';\r\n\r\n// socketService 모킹\r\njest.mock('../../src/services/socketService', () => {\r\n  const originalModule = jest.requireActual('../../src/services/socketService');\r\n  return {\r\n    ...originalModule,\r\n    init: jest.fn(),\r\n    disconnect: jest.fn(),\r\n    isConnected: jest.fn(() => false),\r\n    on: jest.fn(),\r\n    off: jest.fn(),\r\n    emit: jest.fn(),\r\n  };\r\n});\r\n\r\ndescribe('useSocket', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(false);\r\n    (socketService.on as jest.Mock).mockImplementation((event, callback) => {\r\n      // 모의 이벤트 리스너 등록만 하고, 실행은 별도로 처리\r\n    });\r\n  });\r\n\r\n  it('autoConnect=true로 초기화하면 자동으로 연결된다', async () => {\r\n    // 모의 성공적인 연결\r\n    (socketService.init as jest.Mock).mockResolvedValue(undefined);\r\n    \r\n    const { result } = renderHook(() => \r\n      useSocket({ autoConnect: true })\r\n    );\r\n    \r\n    // 초기 상태\r\n    expect(result.current.isLoading).toBe(true);\r\n    expect(result.current.isConnected).toBe(false);\r\n    expect(result.current.error).toBe(null);\r\n    \r\n    // Init 호출 되었는지 확인\r\n    expect(socketService.init).toHaveBeenCalled();\r\n    \r\n    // 연결 성공 시뮬레이션\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(true);\r\n    \r\n    // connect 이벤트 시뮬레이션\r\n    act(() => {\r\n      // socketService.on에 등록된 콜백 함수 실행\r\n      const calls = (socketService.on as jest.Mock).mock.calls;\r\n      const connectCallback = calls.find(call => call[0] === 'connect')?.[1];\r\n      if (connectCallback) connectCallback();\r\n    });\r\n    \r\n    // 성공 상태 확인\r\n    expect(result.current.isConnected).toBe(true);\r\n    expect(result.current.isLoading).toBe(false);\r\n    expect(result.current.error).toBe(null);\r\n  });\r\n\r\n  it('autoConnect=false로 초기화하면 자동으로 연결되지 않는다', () => {\r\n    const { result } = renderHook(() => \r\n      useSocket({ autoConnect: false })\r\n    );\r\n    \r\n    expect(socketService.init).not.toHaveBeenCalled();\r\n    expect(result.current.isConnected).toBe(false);\r\n    expect(result.current.isLoading).toBe(false);\r\n  });\r\n\r\n  it('연결 실패 시 에러 상태를 설정한다', () => {\r\n    const testError = new Error('연결 실패');\r\n    (socketService.init as jest.Mock).mockRejectedValue(testError);\r\n    \r\n    const { result } = renderHook(() => \r\n      useSocket({ autoConnect: true })\r\n    );\r\n    \r\n    // 초기 상태 확인\r\n    expect(result.current.isLoading).toBe(true);\r\n    \r\n    // 오류 이벤트 시뮬레이션\r\n    act(() => {\r\n      const calls = (socketService.on as jest.Mock).mock.calls;\r\n      const errorCallback = calls.find(call => call[0] === 'connect_error')?.[1];\r\n      if (errorCallback) errorCallback(testError);\r\n    });\r\n    \r\n    expect(result.current.error).toBe('연결 실패');\r\n    expect(result.current.isLoading).toBe(false);\r\n    expect(result.current.isConnected).toBe(false);\r\n  });\r\n\r\n  it('connect 메서드로 수동 연결할 수 있다', async () => {\r\n    (socketService.init as jest.Mock).mockResolvedValue(undefined);\r\n    \r\n    const { result } = renderHook(() => \r\n      useSocket({ autoConnect: false })\r\n    );\r\n    \r\n    // 수동 연결 시도\r\n    await act(async () => {\r\n      result.current.connect();\r\n    });\r\n    \r\n    expect(socketService.init).toHaveBeenCalled();\r\n    \r\n    // 연결 성공 시뮬레이션\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(true);\r\n    \r\n    // connect 이벤트 시뮬레이션\r\n    act(() => {\r\n      const calls = (socketService.on as jest.Mock).mock.calls;\r\n      const connectCallback = calls.find(call => call[0] === 'connect')?.[1];\r\n      if (connectCallback) connectCallback();\r\n    });\r\n    \r\n    expect(result.current.isConnected).toBe(true);\r\n    expect(result.current.isLoading).toBe(false);\r\n  });\r\n\r\n  it('disconnect 메서드로 연결을 종료할 수 있다', () => {\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(true);\r\n    \r\n    const { result } = renderHook(() => \r\n      useSocket()\r\n    );\r\n    \r\n    // 연결 상태 시뮬레이션\r\n    act(() => {\r\n      const calls = (socketService.on as jest.Mock).mock.calls;\r\n      const connectCallback = calls.find(call => call[0] === 'connect')?.[1];\r\n      if (connectCallback) connectCallback();\r\n    });\r\n    \r\n    // 연결 종료\r\n    act(() => {\r\n      result.current.disconnect();\r\n    });\r\n    \r\n    expect(socketService.disconnect).toHaveBeenCalled();\r\n    expect(result.current.isConnected).toBe(false);\r\n  });\r\n\r\n  it('emit 메서드로 이벤트를 전송할 수 있다', () => {\r\n    (socketService.isConnected as jest.Mock).mockReturnValue(true);\r\n    \r\n    const { result } = renderHook(() => \r\n      useSocket()\r\n    );\r\n    \r\n    // 연결 상태 시뮬레이션\r\n    act(() => {\r\n      const calls = (socketService.on as jest.Mock).mock.calls;\r\n      const connectCallback = calls.find(call => call[0] === 'connect')?.[1];\r\n      if (connectCallback) connectCallback();\r\n    });\r\n    \r\n    // 이벤트 전송\r\n    act(() => {\r\n      result.current.emit('test-event', { message: 'Hello' });\r\n    });\r\n    \r\n    expect(socketService.emit).toHaveBeenCalledWith('test-event', { message: 'Hello' });\r\n  });\r\n\r\n  it('연결되지 않은 상태에서 emit을 호출하면 경고 로그를 출력한다', () => {\r\n    // 콘솔 경고 모킹\r\n    const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();\r\n    \r\n    (socketService.isConnected as jest.Mock).mockReturnValue(false);\r\n    \r\n    const { result } = renderHook(() => \r\n      useSocket({ autoConnect: false })\r\n    );\r\n    \r\n    // 연결되지 않은 상태에서 emit 호출\r\n    result.current.emit('test-event', { message: 'Hello' });\r\n    \r\n    expect(consoleWarnSpy).toHaveBeenCalled();\r\n    expect(socketService.emit).not.toHaveBeenCalled();\r\n    \r\n    // 스파이 복원\r\n    consoleWarnSpy.mockRestore();\r\n  });\r\n\r\n  it('on과 off 메서드로 이벤트 리스너를 등록하고 제거할 수 있다', () => {\r\n    const { result } = renderHook(() => \r\n      useSocket({ autoConnect: false })\r\n    );\r\n    \r\n    const mockCallback = jest.fn();\r\n    \r\n    // 이벤트 리스너 등록\r\n    result.current.on('test-event', mockCallback);\r\n    \r\n    expect(socketService.on).toHaveBeenCalledWith('test-event', mockCallback);\r\n    \r\n    // 이벤트 리스너 제거\r\n    result.current.off('test-event', mockCallback);\r\n    \r\n    expect(socketService.off).toHaveBeenCalledWith('test-event', mockCallback);\r\n  });\r\n\r\n  it('events 옵션으로 전달된 이벤트 리스너가 등록된다', () => {\r\n    const mockEventCallback = jest.fn();\r\n    \r\n    renderHook(() => \r\n      useSocket({\r\n        autoConnect: false,\r\n        events: {\r\n          'test-event': mockEventCallback\r\n        }\r\n      })\r\n    );\r\n    \r\n    // 이벤트 핸들러가 등록되었는지 확인\r\n    expect(socketService.on).toHaveBeenCalledWith('test-event', mockEventCallback);\r\n  });\r\n});"],"mappings":"AAMAA,WAAA,GAAKC,IAAI,qCAAqC,YAAM;EAClD,IAAMC,cAAc,GAAGC,IAAI,CAACC,aAAa,mCAAmC,CAAC;EAC7E,OAAAC,MAAA,CAAAC,MAAA,KACKJ,cAAc;IACjBK,IAAI,EAAEJ,IAAI,CAACK,EAAE,CAAC,CAAC;IACfC,UAAU,EAAEN,IAAI,CAACK,EAAE,CAAC,CAAC;IACrBE,WAAW,EAAEP,IAAI,CAACK,EAAE,CAAC;MAAA,OAAM,KAAK;IAAA,EAAC;IACjCG,EAAE,EAAER,IAAI,CAACK,EAAE,CAAC,CAAC;IACbI,GAAG,EAAET,IAAI,CAACK,EAAE,CAAC,CAAC;IACdK,IAAI,EAAEV,IAAI,CAACK,EAAE,CAAC;EAAC;AAEnB,CAAC,CAAC;AAAC,IAAAM,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAhBH,IAAAE,WAAA,GAAAF,OAAA;AACA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,UAAA,GAAAL,sBAAA,CAAAC,OAAA;AAAkD,SAAAf,YAAA;EAAA,IAAAoB,QAAA,GAAAL,OAAA;IAAAZ,IAAA,GAAAiB,QAAA,CAAAjB,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAgBlDkB,QAAQ,CAAC,WAAW,EAAE,YAAM;EAC1BC,UAAU,CAAC,YAAM;IACfnB,IAAI,CAACoB,aAAa,CAAC,CAAC;IACnBC,sBAAa,CAACd,WAAW,CAAee,eAAe,CAAC,KAAK,CAAC;IAC9DD,sBAAa,CAACb,EAAE,CAAee,kBAAkB,CAAC,UAACC,KAAK,EAAEC,QAAQ,EAAK,CAExE,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFC,EAAE,CAAC,mCAAmC,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;IAEjDN,sBAAa,CAACjB,IAAI,CAAewB,iBAAiB,CAACC,SAAS,CAAC;IAE9D,IAAAC,WAAA,GAAmB,IAAAC,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC;UAAEC,WAAW,EAAE;QAAK,CAAC,CAAC;MAAA,CAClC,CAAC;MAFOC,MAAM,GAAAJ,WAAA,CAANI,MAAM;IAKdC,MAAM,CAACD,MAAM,CAACE,OAAO,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAC3CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC7B,WAAW,CAAC,CAAC+B,IAAI,CAAC,KAAK,CAAC;IAC9CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAACG,KAAK,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;IAGvCH,MAAM,CAACd,sBAAa,CAACjB,IAAI,CAAC,CAACoC,gBAAgB,CAAC,CAAC;IAG5CnB,sBAAa,CAACd,WAAW,CAAee,eAAe,CAAC,IAAI,CAAC;IAG9D,IAAAmB,eAAG,EAAC,YAAM;MAAA,IAAAC,WAAA;MAER,IAAMC,KAAK,GAAItB,sBAAa,CAACb,EAAE,CAAeV,IAAI,CAAC6C,KAAK;MACxD,IAAMC,eAAe,IAAAF,WAAA,GAAGC,KAAK,CAACE,IAAI,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS;MAAA,EAAC,qBAAzCJ,WAAA,CAA4C,CAAC,CAAC;MACtE,IAAIE,eAAe,EAAEA,eAAe,CAAC,CAAC;IACxC,CAAC,CAAC;IAGFT,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC7B,WAAW,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAAC;IAC7CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC5CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAACG,KAAK,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;EACzC,CAAC,EAAC;EAEFZ,EAAE,CAAC,wCAAwC,EAAE,YAAM;IACjD,IAAAqB,YAAA,GAAmB,IAAAhB,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC;UAAEC,WAAW,EAAE;QAAM,CAAC,CAAC;MAAA,CACnC,CAAC;MAFOC,MAAM,GAAAa,YAAA,CAANb,MAAM;IAIdC,MAAM,CAACd,sBAAa,CAACjB,IAAI,CAAC,CAAC4C,GAAG,CAACR,gBAAgB,CAAC,CAAC;IACjDL,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC7B,WAAW,CAAC,CAAC+B,IAAI,CAAC,KAAK,CAAC;IAC9CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;EAC9C,CAAC,CAAC;EAEFZ,EAAE,CAAC,qBAAqB,EAAE,YAAM;IAC9B,IAAMuB,SAAS,GAAG,IAAIC,KAAK,CAAC,OAAO,CAAC;IACnC7B,sBAAa,CAACjB,IAAI,CAAe+C,iBAAiB,CAACF,SAAS,CAAC;IAE9D,IAAAG,YAAA,GAAmB,IAAArB,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC;UAAEC,WAAW,EAAE;QAAK,CAAC,CAAC;MAAA,CAClC,CAAC;MAFOC,MAAM,GAAAkB,YAAA,CAANlB,MAAM;IAKdC,MAAM,CAACD,MAAM,CAACE,OAAO,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAG3C,IAAAG,eAAG,EAAC,YAAM;MAAA,IAAAY,YAAA;MACR,IAAMV,KAAK,GAAItB,sBAAa,CAACb,EAAE,CAAeV,IAAI,CAAC6C,KAAK;MACxD,IAAMW,aAAa,IAAAD,YAAA,GAAGV,KAAK,CAACE,IAAI,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,eAAe;MAAA,EAAC,qBAA/CO,YAAA,CAAkD,CAAC,CAAC;MAC1E,IAAIC,aAAa,EAAEA,aAAa,CAACL,SAAS,CAAC;IAC7C,CAAC,CAAC;IAEFd,MAAM,CAACD,MAAM,CAACE,OAAO,CAACG,KAAK,CAAC,CAACD,IAAI,CAAC,OAAO,CAAC;IAC1CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IAC5CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC7B,WAAW,CAAC,CAAC+B,IAAI,CAAC,KAAK,CAAC;EAChD,CAAC,CAAC;EAEFZ,EAAE,CAAC,0BAA0B,MAAAb,kBAAA,CAAAc,OAAA,EAAE,aAAY;IACxCN,sBAAa,CAACjB,IAAI,CAAewB,iBAAiB,CAACC,SAAS,CAAC;IAE9D,IAAA0B,YAAA,GAAmB,IAAAxB,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC;UAAEC,WAAW,EAAE;QAAM,CAAC,CAAC;MAAA,CACnC,CAAC;MAFOC,MAAM,GAAAqB,YAAA,CAANrB,MAAM;IAKd,MAAM,IAAAO,eAAG,MAAA5B,kBAAA,CAAAc,OAAA,EAAC,aAAY;MACpBO,MAAM,CAACE,OAAO,CAACoB,OAAO,CAAC,CAAC;IAC1B,CAAC,EAAC;IAEFrB,MAAM,CAACd,sBAAa,CAACjB,IAAI,CAAC,CAACoC,gBAAgB,CAAC,CAAC;IAG5CnB,sBAAa,CAACd,WAAW,CAAee,eAAe,CAAC,IAAI,CAAC;IAG9D,IAAAmB,eAAG,EAAC,YAAM;MAAA,IAAAgB,YAAA;MACR,IAAMd,KAAK,GAAItB,sBAAa,CAACb,EAAE,CAAeV,IAAI,CAAC6C,KAAK;MACxD,IAAMC,eAAe,IAAAa,YAAA,GAAGd,KAAK,CAACE,IAAI,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS;MAAA,EAAC,qBAAzCW,YAAA,CAA4C,CAAC,CAAC;MACtE,IAAIb,eAAe,EAAEA,eAAe,CAAC,CAAC;IACxC,CAAC,CAAC;IAEFT,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC7B,WAAW,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAAC;IAC7CH,MAAM,CAACD,MAAM,CAACE,OAAO,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;EAC9C,CAAC,EAAC;EAEFZ,EAAE,CAAC,8BAA8B,EAAE,YAAM;IACtCL,sBAAa,CAACd,WAAW,CAAee,eAAe,CAAC,IAAI,CAAC;IAE9D,IAAAoC,YAAA,GAAmB,IAAA3B,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC,CAAC;MAAA,CACb,CAAC;MAFOE,MAAM,GAAAwB,YAAA,CAANxB,MAAM;IAKd,IAAAO,eAAG,EAAC,YAAM;MAAA,IAAAkB,YAAA;MACR,IAAMhB,KAAK,GAAItB,sBAAa,CAACb,EAAE,CAAeV,IAAI,CAAC6C,KAAK;MACxD,IAAMC,eAAe,IAAAe,YAAA,GAAGhB,KAAK,CAACE,IAAI,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS;MAAA,EAAC,qBAAzCa,YAAA,CAA4C,CAAC,CAAC;MACtE,IAAIf,eAAe,EAAEA,eAAe,CAAC,CAAC;IACxC,CAAC,CAAC;IAGF,IAAAH,eAAG,EAAC,YAAM;MACRP,MAAM,CAACE,OAAO,CAAC9B,UAAU,CAAC,CAAC;IAC7B,CAAC,CAAC;IAEF6B,MAAM,CAACd,sBAAa,CAACf,UAAU,CAAC,CAACkC,gBAAgB,CAAC,CAAC;IACnDL,MAAM,CAACD,MAAM,CAACE,OAAO,CAAC7B,WAAW,CAAC,CAAC+B,IAAI,CAAC,KAAK,CAAC;EAChD,CAAC,CAAC;EAEFZ,EAAE,CAAC,yBAAyB,EAAE,YAAM;IACjCL,sBAAa,CAACd,WAAW,CAAee,eAAe,CAAC,IAAI,CAAC;IAE9D,IAAAsC,YAAA,GAAmB,IAAA7B,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC,CAAC;MAAA,CACb,CAAC;MAFOE,MAAM,GAAA0B,YAAA,CAAN1B,MAAM;IAKd,IAAAO,eAAG,EAAC,YAAM;MAAA,IAAAoB,YAAA;MACR,IAAMlB,KAAK,GAAItB,sBAAa,CAACb,EAAE,CAAeV,IAAI,CAAC6C,KAAK;MACxD,IAAMC,eAAe,IAAAiB,YAAA,GAAGlB,KAAK,CAACE,IAAI,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS;MAAA,EAAC,qBAAzCe,YAAA,CAA4C,CAAC,CAAC;MACtE,IAAIjB,eAAe,EAAEA,eAAe,CAAC,CAAC;IACxC,CAAC,CAAC;IAGF,IAAAH,eAAG,EAAC,YAAM;MACRP,MAAM,CAACE,OAAO,CAAC1B,IAAI,CAAC,YAAY,EAAE;QAAEoD,OAAO,EAAE;MAAQ,CAAC,CAAC;IACzD,CAAC,CAAC;IAEF3B,MAAM,CAACd,sBAAa,CAACX,IAAI,CAAC,CAACqD,oBAAoB,CAAC,YAAY,EAAE;MAAED,OAAO,EAAE;IAAQ,CAAC,CAAC;EACrF,CAAC,CAAC;EAEFpC,EAAE,CAAC,qCAAqC,EAAE,YAAM;IAE9C,IAAMsC,cAAc,GAAGhE,IAAI,CAACiE,KAAK,CAACC,OAAO,EAAE,MAAM,CAAC,CAAC3C,kBAAkB,CAAC,CAAC;IAEtEF,sBAAa,CAACd,WAAW,CAAee,eAAe,CAAC,KAAK,CAAC;IAE/D,IAAA6C,YAAA,GAAmB,IAAApC,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC;UAAEC,WAAW,EAAE;QAAM,CAAC,CAAC;MAAA,CACnC,CAAC;MAFOC,MAAM,GAAAiC,YAAA,CAANjC,MAAM;IAKdA,MAAM,CAACE,OAAO,CAAC1B,IAAI,CAAC,YAAY,EAAE;MAAEoD,OAAO,EAAE;IAAQ,CAAC,CAAC;IAEvD3B,MAAM,CAAC6B,cAAc,CAAC,CAACxB,gBAAgB,CAAC,CAAC;IACzCL,MAAM,CAACd,sBAAa,CAACX,IAAI,CAAC,CAACsC,GAAG,CAACR,gBAAgB,CAAC,CAAC;IAGjDwB,cAAc,CAACI,WAAW,CAAC,CAAC;EAC9B,CAAC,CAAC;EAEF1C,EAAE,CAAC,qCAAqC,EAAE,YAAM;IAC9C,IAAA2C,YAAA,GAAmB,IAAAtC,sBAAU,EAAC;QAAA,OAC5B,IAAAC,kBAAS,EAAC;UAAEC,WAAW,EAAE;QAAM,CAAC,CAAC;MAAA,CACnC,CAAC;MAFOC,MAAM,GAAAmC,YAAA,CAANnC,MAAM;IAId,IAAMoC,YAAY,GAAGtE,IAAI,CAACK,EAAE,CAAC,CAAC;IAG9B6B,MAAM,CAACE,OAAO,CAAC5B,EAAE,CAAC,YAAY,EAAE8D,YAAY,CAAC;IAE7CnC,MAAM,CAACd,sBAAa,CAACb,EAAE,CAAC,CAACuD,oBAAoB,CAAC,YAAY,EAAEO,YAAY,CAAC;IAGzEpC,MAAM,CAACE,OAAO,CAAC3B,GAAG,CAAC,YAAY,EAAE6D,YAAY,CAAC;IAE9CnC,MAAM,CAACd,sBAAa,CAACZ,GAAG,CAAC,CAACsD,oBAAoB,CAAC,YAAY,EAAEO,YAAY,CAAC;EAC5E,CAAC,CAAC;EAEF5C,EAAE,CAAC,+BAA+B,EAAE,YAAM;IACxC,IAAM6C,iBAAiB,GAAGvE,IAAI,CAACK,EAAE,CAAC,CAAC;IAEnC,IAAA0B,sBAAU,EAAC;MAAA,OACT,IAAAC,kBAAS,EAAC;QACRC,WAAW,EAAE,KAAK;QAClBuC,MAAM,EAAE;UACN,YAAY,EAAED;QAChB;MACF,CAAC,CAAC;IAAA,CACJ,CAAC;IAGDpC,MAAM,CAACd,sBAAa,CAACb,EAAE,CAAC,CAACuD,oBAAoB,CAAC,YAAY,EAAEQ,iBAAiB,CAAC;EAChF,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}