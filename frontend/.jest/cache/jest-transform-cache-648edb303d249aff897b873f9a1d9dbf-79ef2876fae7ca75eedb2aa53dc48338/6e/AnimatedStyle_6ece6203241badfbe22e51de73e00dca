879e9b4ce24931ce46f3211ee0893345
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedValidation = require("../../../src/private/animated/NativeAnimatedValidation");
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedObject = _interopRequireDefault(require("./AnimatedObject"));
var _AnimatedTransform = _interopRequireDefault(require("./AnimatedTransform"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
var _Object$hasOwn;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function createAnimatedStyle(inputStyle, allowlist, keepUnanimatedValues) {
  var nodeKeys = [];
  var nodes = [];
  var style = {};
  var keys = Object.keys(inputStyle);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    var value = inputStyle[key];
    if (allowlist == null || hasOwn(allowlist, key)) {
      var node = void 0;
      if (value != null && key === 'transform') {
        node = ReactNativeFeatureFlags.shouldUseAnimatedObjectForTransform() ? _AnimatedObject.default.from(value) : _AnimatedTransform.default.from(value);
      } else if (value instanceof _AnimatedNode.default) {
        node = value;
      } else {
        node = _AnimatedObject.default.from(value);
      }
      if (node == null) {
        if (keepUnanimatedValues) {
          style[key] = value;
        }
      } else {
        nodeKeys.push(key);
        nodes.push(node);
        style[key] = node;
      }
    } else {
      if (true) {
        if (_AnimatedObject.default.from(inputStyle[key]) != null) {
          console.error(`AnimatedStyle: ${key} is not allowlisted for animation, but it ` + 'contains AnimatedNode values; styles allowing animation: ', allowlist);
        }
      }
      if (keepUnanimatedValues) {
        style[key] = value;
      }
    }
  }
  return [nodeKeys, nodes, style];
}
var _inputStyle = (0, _classPrivateFieldLooseKey2.default)("inputStyle");
var _nodeKeys = (0, _classPrivateFieldLooseKey2.default)("nodeKeys");
var _nodes = (0, _classPrivateFieldLooseKey2.default)("nodes");
var _style = (0, _classPrivateFieldLooseKey2.default)("style");
var AnimatedStyle = exports.default = function (_AnimatedWithChildren) {
  function AnimatedStyle(nodeKeys, nodes, style, inputStyle, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedStyle);
    _this = _callSuper(this, AnimatedStyle, [config]);
    Object.defineProperty(_this, _inputStyle, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _nodeKeys, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _nodes, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _style, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
    (0, _classPrivateFieldLooseBase2.default)(_this, _style)[_style] = style;
    (0, _classPrivateFieldLooseBase2.default)(_this, _inputStyle)[_inputStyle] = inputStyle;
    return _this;
  }
  (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedStyle, [{
    key: "__getValue",
    value: function __getValue() {
      var style = {};
      var keys = Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _style)[_style]);
      for (var ii = 0, length = keys.length; ii < length; ii++) {
        var key = keys[ii];
        var value = (0, _classPrivateFieldLooseBase2.default)(this, _style)[_style][key];
        if (value instanceof _AnimatedNode.default) {
          style[key] = value.__getValue();
        } else {
          style[key] = value;
        }
      }
      return _Platform.default.OS === 'web' ? [(0, _classPrivateFieldLooseBase2.default)(this, _inputStyle)[_inputStyle], style] : style;
    }
  }, {
    key: "__getValueWithStaticStyle",
    value: function __getValueWithStaticStyle(staticStyle) {
      var flatStaticStyle = (0, _flattenStyle.default)(staticStyle);
      var style = flatStaticStyle == null ? {} : flatStaticStyle === staticStyle ? Object.assign({}, flatStaticStyle) : flatStaticStyle;
      var keys = Object.keys(style);
      for (var ii = 0, length = keys.length; ii < length; ii++) {
        var key = keys[ii];
        var maybeNode = (0, _classPrivateFieldLooseBase2.default)(this, _style)[_style][key];
        if (key === 'transform' && maybeNode instanceof _AnimatedTransform.default) {
          style[key] = maybeNode.__getValueWithStaticTransforms(Array.isArray(style[key]) ? style[key] : []);
        } else if (maybeNode instanceof _AnimatedObject.default) {
          style[key] = maybeNode.__getValueWithStaticObject(style[key]);
        } else if (maybeNode instanceof _AnimatedNode.default) {
          style[key] = maybeNode.__getValue();
        }
      }
      return _Platform.default.OS === 'web' ? [(0, _classPrivateFieldLooseBase2.default)(this, _inputStyle)[_inputStyle], style] : style;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      var style = {};
      var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var key = nodeKeys[ii];
        var node = nodes[ii];
        style[key] = node.__getAnimatedValue();
      }
      return style;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__addChild(this);
      }
      _superPropGet(AnimatedStyle, "__attach", this, 3)([]);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__removeChild(this);
      }
      _superPropGet(AnimatedStyle, "__detach", this, 3)([]);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__makeNative(platformConfig);
      }
      _superPropGet(AnimatedStyle, "__makeNative", this, 3)([platformConfig]);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var platformConfig = this.__getPlatformConfig();
      var styleConfig = {};
      var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var key = nodeKeys[ii];
        var node = nodes[ii];
        node.__makeNative(platformConfig);
        styleConfig[key] = node.__getNativeTag();
      }
      if (true) {
        (0, _NativeAnimatedValidation.validateStyles)(styleConfig);
      }
      return {
        type: 'style',
        style: styleConfig,
        debugID: this.__getDebugID()
      };
    }
  }], [{
    key: "from",
    value: function from(inputStyle, allowlist) {
      var flatStyle = (0, _flattenStyle.default)(inputStyle);
      if (flatStyle == null) {
        return null;
      }
      var _createAnimatedStyle = createAnimatedStyle(flatStyle, allowlist, _Platform.default.OS !== 'web'),
        _createAnimatedStyle2 = (0, _slicedToArray2.default)(_createAnimatedStyle, 3),
        nodeKeys = _createAnimatedStyle2[0],
        nodes = _createAnimatedStyle2[1],
        style = _createAnimatedStyle2[2];
      if (nodes.length === 0) {
        return null;
      }
      return new AnimatedStyle(nodeKeys, nodes, style, inputStyle);
    }
  }]);
}(_AnimatedWithChildren2.default);
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = (_Object$hasOwn = Object.hasOwn) != null ? _Object$hasOwn : function (obj, prop) {
  return _hasOwnProp.call(obj, prop);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,