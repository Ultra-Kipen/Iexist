8c2b68045fd4fa900247c61f593d181d
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    createPost: jest.fn(),
    getPosts: jest.fn(),
    getPostById: jest.fn(),
    getMyPosts: jest.fn(),
    likePost: jest.fn(),
    addComment: jest.fn(),
    getComments: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: function useAuth() {
      return {
        isAuthenticated: true,
        isLoading: false,
        user: {
          user_id: 1,
          username: 'testuser'
        }
      };
    },
    AuthProvider: function AuthProvider(_ref) {
      var children = _ref.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _reactNativePaper = require("react-native-paper");
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _MockScreens = require("../mocks/MockScreens");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var TestWrapper = function TestWrapper(_ref2) {
  var children = _ref2.children;
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsx)(_reactNativePaper.Provider, {
      children: children
    })
  });
};
describe('게시물 기능 통합 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('Mock 컴포넌트 테스트', function () {
    it('게시물 상세 조회 및 댓글 작성', (0, _asyncToGenerator2.default)(function* () {
      var mockGetPostById = _postService.default.getPostById;
      mockGetPostById.mockResolvedValue({
        data: {
          success: true,
          post: {
            post_id: 1,
            content: '테스트 게시물',
            emotion_summary: '행복',
            like_count: 5,
            comment_count: 2,
            created_at: '2025-04-10T12:00:00Z'
          }
        }
      });
      var mockGetComments = _postService.default.getComments;
      mockGetComments.mockResolvedValue({
        data: {
          success: true,
          comments: [{
            comment_id: 1,
            post_id: 1,
            user_id: 2,
            content: '너무 좋네요!',
            is_anonymous: false,
            created_at: '2025-04-10T13:00:00Z'
          }],
          total_count: 1
        }
      });
      var mockAddComment = _postService.default.addComment;
      mockAddComment.mockResolvedValue({
        data: {
          success: true,
          comment_id: 2,
          message: '댓글이 성공적으로 추가되었습니다.'
        }
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockPostScreen, {
            route: {
              params: {
                postId: 1
              }
            },
            navigation: mockNavigation
          })
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText;
      expect(getByText('게시물 ID: 1')).toBeTruthy();
      var commentInput = getByTestId('comment-input');
      _reactNative.fireEvent.changeText(commentInput, '테스트 댓글입니다.');
      var submitButton = getByTestId('submit-comment');
      _reactNative.fireEvent.press(submitButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAddComment).toHaveBeenCalledWith(1, {
          content: '테스트 댓글입니다.',
          is_anonymous: false
        });
      });
      expect(mockGetPostById).toHaveBeenCalledWith(1);
      expect(mockGetComments).toHaveBeenCalledWith(1);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,