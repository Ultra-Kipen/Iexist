e4044de7c90e459f42d713047e80a78f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _View = _interopRequireDefault(require("../../../Libraries/Components/View/View"));
var _UIManager = _interopRequireDefault(require("../../../Libraries/ReactNative/UIManager"));
var _Platform = _interopRequireDefault(require("../../../Libraries/Utilities/Platform"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var exported = _Platform.default.select({
  ios: require("../../../src/private/specs/components/RCTSafeAreaViewNativeComponent").default,
  android: _UIManager.default.hasViewManagerConfig('RCTSafeAreaView') ? require("../../../src/private/specs/components/RCTSafeAreaViewNativeComponent").default : _View.default,
  default: _View.default
});
var _default = exports.default = exported;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsIl9QbGF0Zm9ybSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJleHBvcnRlZCIsIlBsYXRmb3JtIiwic2VsZWN0IiwiaW9zIiwiYW5kcm9pZCIsIlVJTWFuYWdlciIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIiwiVmlldyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlNhZmVBcmVhVmlld19JTlRFUk5BTF9ET19OT1RfVVNFLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqIEBvbmNhbGwgcmVhY3RfbmF0aXZlXG4gKi9cblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcblxuaW1wb3J0IFZpZXcgZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3JztcbmltcG9ydCBVSU1hbmFnZXIgZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQgUGxhdGZvcm0gZnJvbSAnLi4vLi4vLi4vTGlicmFyaWVzL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGV4cG9ydGVkOiBjb21wb25lbnQoXG4gIHJlZj86IFJlYWN0LlJlZlNldHRlcjxSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3Pj4sXG4gIC4uLlZpZXdQcm9wc1xuKSA9IFBsYXRmb3JtLnNlbGVjdCh7XG4gIGlvczogcmVxdWlyZSgnLi4vLi4vLi4vc3JjL3ByaXZhdGUvc3BlY3MvY29tcG9uZW50cy9SQ1RTYWZlQXJlYVZpZXdOYXRpdmVDb21wb25lbnQnKVxuICAgIC5kZWZhdWx0LFxuICBhbmRyb2lkOiBVSU1hbmFnZXIuaGFzVmlld01hbmFnZXJDb25maWcoJ1JDVFNhZmVBcmVhVmlldycpXG4gICAgPyByZXF1aXJlKCcuLi8uLi8uLi9zcmMvcHJpdmF0ZS9zcGVjcy9jb21wb25lbnRzL1JDVFNhZmVBcmVhVmlld05hdGl2ZUNvbXBvbmVudCcpXG4gICAgICAgIC5kZWZhdWx0XG4gICAgOiBWaWV3LFxuICBkZWZhdWx0OiBWaWV3LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydGVkO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUErQixTQUFBSyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUYsd0JBQUFFLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FBQSxJQUFBZCxDQUFBLG9CQUFBYyxDQUFBLE9BQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBaEIsQ0FBQSxFQUFBYyxDQUFBLFNBQUFHLENBQUEsR0FBQVAsQ0FBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFiLENBQUEsRUFBQWMsQ0FBQSxVQUFBRyxDQUFBLEtBQUFBLENBQUEsQ0FBQVYsR0FBQSxJQUFBVSxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBZCxDQUFBLENBQUFjLENBQUEsWUFBQU4sQ0FBQSxDQUFBSCxPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFlLEdBQUEsQ0FBQWxCLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBRS9CLElBQU1XLFFBR0wsR0FBR0MsaUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO0VBQ2xCQyxHQUFHLEVBQUU1QixPQUFPLHVFQUF1RSxDQUFDLENBQ2pGVyxPQUFPO0VBQ1ZrQixPQUFPLEVBQUVDLGtCQUFTLENBQUNDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLEdBQ3REL0IsT0FBTyx1RUFBdUUsQ0FBQyxDQUM1RVcsT0FBTyxHQUNWcUIsYUFBSTtFQUNSckIsT0FBTyxFQUFFcUI7QUFDWCxDQUFDLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQXZCLE9BQUEsR0FFWWMsUUFBUSIsImlnbm9yZUxpc3QiOltdfQ==