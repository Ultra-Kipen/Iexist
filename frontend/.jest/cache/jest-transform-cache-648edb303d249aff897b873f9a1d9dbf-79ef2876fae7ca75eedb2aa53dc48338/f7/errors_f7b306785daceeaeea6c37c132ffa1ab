e8ffd56c8aa700f25d532782e5738546
'use strict';
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReanimatedError = void 0;
exports.registerReanimatedError = registerReanimatedError;
exports.registerWorkletStackDetails = registerWorkletStackDetails;
exports.reportFatalErrorOnJS = reportFatalErrorOnJS;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var ReanimatedErrorConstructor = exports.ReanimatedError = function ReanimatedError(message) {
  'worklet';

  var prefix = '[Reanimated]';
  var errorInstance = new Error(message ? `${prefix} ${message}` : prefix);
  errorInstance.name = 'ReanimatedError';
  return errorInstance;
};
function registerReanimatedError() {
  'worklet';

  if (!_WORKLET) {
    throw new Error('[Reanimated] registerReanimatedError() must be called on Worklet runtime');
  }
  global.ReanimatedError = ReanimatedErrorConstructor;
}
var _workletStackDetails = new Map();
function registerWorkletStackDetails(hash, stackDetails) {
  _workletStackDetails.set(hash, stackDetails);
}
function getBundleOffset(error) {
  var _error$stack;
  var frame = (_error$stack = error.stack) == null || (_error$stack = _error$stack.split('\n')) == null ? void 0 : _error$stack[0];
  if (frame) {
    var parsedFrame = /@([^@]+):(\d+):(\d+)/.exec(frame);
    if (parsedFrame) {
      var _parsedFrame = (0, _slicedToArray2.default)(parsedFrame, 4),
        file = _parsedFrame[1],
        line = _parsedFrame[2],
        col = _parsedFrame[3];
      return [file, Number(line), Number(col)];
    }
  }
  return ['unknown', 0, 0];
}
function processStack(stack) {
  var workletStackEntries = stack.match(/worklet_(\d+):(\d+):(\d+)/g);
  var result = stack;
  workletStackEntries == null || workletStackEntries.forEach(function (match) {
    var _match$split$map = match.split(/:|_/).map(Number),
      _match$split$map2 = (0, _slicedToArray2.default)(_match$split$map, 4),
      hash = _match$split$map2[1],
      origLine = _match$split$map2[2],
      origCol = _match$split$map2[3];
    var errorDetails = _workletStackDetails.get(hash);
    if (!errorDetails) {
      return;
    }
    var _errorDetails = (0, _slicedToArray2.default)(errorDetails, 3),
      error = _errorDetails[0],
      lineOffset = _errorDetails[1],
      colOffset = _errorDetails[2];
    var _getBundleOffset = getBundleOffset(error),
      _getBundleOffset2 = (0, _slicedToArray2.default)(_getBundleOffset, 3),
      bundleFile = _getBundleOffset2[0],
      bundleLine = _getBundleOffset2[1],
      bundleCol = _getBundleOffset2[2];
    var line = origLine + bundleLine + lineOffset;
    var col = origCol + bundleCol + colOffset;
    result = result.replace(match, `${bundleFile}:${line}:${col}`);
  });
  return result;
}
function reportFatalErrorOnJS(_ref) {
  var message = _ref.message,
    stack = _ref.stack;
  var error = new Error();
  error.message = message;
  error.stack = stack ? processStack(stack) : undefined;
  error.name = 'ReanimatedError';
  error.jsEngine = 'reanimated';
  global.ErrorUtils.reportFatalError(error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVhbmltYXRlZEVycm9yIiwicmVnaXN0ZXJSZWFuaW1hdGVkRXJyb3IiLCJyZWdpc3RlcldvcmtsZXRTdGFja0RldGFpbHMiLCJyZXBvcnRGYXRhbEVycm9yT25KUyIsIl9zbGljZWRUb0FycmF5MiIsIlJlYW5pbWF0ZWRFcnJvckNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInByZWZpeCIsImVycm9ySW5zdGFuY2UiLCJFcnJvciIsIm5hbWUiLCJfV09SS0xFVCIsImdsb2JhbCIsIl93b3JrbGV0U3RhY2tEZXRhaWxzIiwiTWFwIiwiaGFzaCIsInN0YWNrRGV0YWlscyIsInNldCIsImdldEJ1bmRsZU9mZnNldCIsImVycm9yIiwiX2Vycm9yJHN0YWNrIiwiZnJhbWUiLCJzdGFjayIsInNwbGl0IiwicGFyc2VkRnJhbWUiLCJleGVjIiwiX3BhcnNlZEZyYW1lIiwiZGVmYXVsdCIsImZpbGUiLCJsaW5lIiwiY29sIiwiTnVtYmVyIiwicHJvY2Vzc1N0YWNrIiwid29ya2xldFN0YWNrRW50cmllcyIsIm1hdGNoIiwicmVzdWx0IiwiZm9yRWFjaCIsIl9tYXRjaCRzcGxpdCRtYXAiLCJtYXAiLCJfbWF0Y2gkc3BsaXQkbWFwMiIsIm9yaWdMaW5lIiwib3JpZ0NvbCIsImVycm9yRGV0YWlscyIsImdldCIsIl9lcnJvckRldGFpbHMiLCJsaW5lT2Zmc2V0IiwiY29sT2Zmc2V0IiwiX2dldEJ1bmRsZU9mZnNldCIsIl9nZXRCdW5kbGVPZmZzZXQyIiwiYnVuZGxlRmlsZSIsImJ1bmRsZUxpbmUiLCJidW5kbGVDb2wiLCJyZXBsYWNlIiwiX3JlZiIsInVuZGVmaW5lZCIsImpzRW5naW5lIiwiRXJyb3JVdGlscyIsInJlcG9ydEZhdGFsRXJyb3IiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzLnRzIl0sInNvdXJjZXNDb250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