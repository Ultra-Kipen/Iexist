{"version":3,"names":["_getJestObj","mock","StyleSheet","create","jest","fn","styles","View","Text","TouchableOpacity","props","type","Animated","timing","start","cb","finished","Value","setValue","interpolate","Platform","OS","_interopRequireDefault","require","_react","_reactNative","_Toast","_interopRequireWildcard","_reactNative2","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_require","useFakeTimers","TestIcon","jsx","testID","children","fireEvent","press","element","onPress","undefined","describe","beforeEach","clearAllMocks","clearAllTimers","test","_render","render","visible","message","getByTestId","getByText","expect","toBeTruthy","_render2","queryByTestId","toBeNull","types","forEach","_render3","_render4","position","_render5","icon","onClose","_render6","touchable","runAllTimers","toHaveBeenCalled","duration","advanceTimersByTime","mockToast","show","hide","ToastController","setRef","toHaveBeenCalledWith","not","toThrow"],"sources":["Toast.test.tsx"],"sourcesContent":["// __tests__/components/Toast.test.tsx\r\n// 모킹을 먼저 설정\r\njest.mock('react-native', () => ({\r\n  StyleSheet: {\r\n    create: jest.fn(styles => styles),\r\n  },\r\n  View: 'View',\r\n  Text: 'Text',\r\n  TouchableOpacity: jest.fn(props => ({\r\n    type: 'TouchableOpacity',\r\n    props,\r\n  })),\r\n  Animated: {\r\n    View: jest.fn(props => ({\r\n      type: 'Animated.View',\r\n      props,\r\n    })),\r\n    timing: jest.fn(() => ({\r\n      start: jest.fn(cb => {\r\n        if (cb) cb({ finished: true });\r\n      }),\r\n    })),\r\n    Value: jest.fn(() => ({\r\n      setValue: jest.fn(),\r\n      interpolate: jest.fn(() => ({})),\r\n    })),\r\n  },\r\n  Platform: { OS: 'android' },\r\n}));\r\n\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport Toast, { ToastController } from '../../src/components/Toast';\r\nimport { Text } from 'react-native';\r\n\r\n// 타이머 모킹\r\njest.useFakeTimers();\r\n\r\n// 간단한 아이콘 컴포넌트 정의\r\nconst TestIcon = () => <Text testID=\"test-icon\">아이콘</Text>;\r\n\r\n// fireEvent.press 모킹\r\nfireEvent.press = jest.fn((element) => {\r\n  if (element && element.props && element.props.onPress) {\r\n    element.props.onPress();\r\n  }\r\n  // Always return undefined to match the expected type\r\n  return undefined;\r\n});\r\n\r\ndescribe('Toast', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    jest.clearAllTimers();\r\n  });\r\n\r\n  // 각 테스트에 타임아웃 설정 - 10초\r\n  test('renders correctly with default props', () => {\r\n    const { getByTestId, getByText } = render(\r\n      <Toast visible={true} message=\"테스트 메시지\" testID=\"toast\" />\r\n    );\r\n    \r\n    expect(getByTestId('toast')).toBeTruthy();\r\n    expect(getByText('테스트 메시지')).toBeTruthy();\r\n  }, 10000);\r\n\r\n  test('does not render when visible is false', () => {\r\n    const { queryByTestId } = render(\r\n      <Toast visible={false} message=\"테스트 메시지\" testID=\"toast\" />\r\n    );\r\n    \r\n    expect(queryByTestId('toast')).toBeNull();\r\n  }, 10000);\r\n\r\n  test('renders with different types', () => {\r\n    const types = ['success', 'error', 'info', 'warning'];\r\n    \r\n    types.forEach(type => {\r\n      const { getByTestId } = render(\r\n        <Toast visible={true} message=\"테스트 메시지\" type={type as any} testID=\"toast\" />\r\n      );\r\n      expect(getByTestId('toast')).toBeTruthy();\r\n    });\r\n  }, 10000);\r\n\r\n  test('renders with top position', () => {\r\n    const { getByTestId } = render(\r\n      <Toast visible={true} message=\"테스트 메시지\" position=\"top\" testID=\"toast\" />\r\n    );\r\n    \r\n    expect(getByTestId('toast')).toBeTruthy();\r\n  }, 10000);\r\n\r\n  test('icon renders correctly', () => {\r\n    const { getByTestId } = render(\r\n      <Toast \r\n        visible={true} \r\n        message=\"테스트 메시지\" \r\n        icon={<TestIcon />} \r\n        testID=\"toast\"\r\n      />\r\n    );\r\n    \r\n    expect(getByTestId('test-icon')).toBeTruthy();\r\n  }, 10000);\r\n\r\n  test('closes when pressed', () => {\r\n    const onClose = jest.fn();\r\n    \r\n    const { getByTestId } = render(\r\n      <Toast \r\n        visible={true} \r\n        message=\"테스트 메시지\" \r\n        onClose={onClose} \r\n        testID=\"toast-touchable\"\r\n      />\r\n    );\r\n    \r\n    // 직접 onPress 호출\r\n    const touchable = getByTestId('toast-touchable');\r\n    fireEvent.press(touchable);\r\n    \r\n    // 타이머 실행\r\n    jest.runAllTimers();\r\n    \r\n    // onClose가 호출되었는지 확인\r\n    expect(onClose).toHaveBeenCalled();\r\n  }, 10000);\r\n\r\n  test('onClose is called after duration', () => {\r\n    const onClose = jest.fn();\r\n    \r\n    render(\r\n      <Toast \r\n        visible={true} \r\n        message=\"테스트 메시지\" \r\n        duration={1000} \r\n        onClose={onClose} \r\n        testID=\"toast\"\r\n      />\r\n    );\r\n    \r\n    // 타이머 진행\r\n    jest.advanceTimersByTime(1000);\r\n    jest.runAllTimers();\r\n    \r\n    // onClose가 호출되었는지 확인\r\n    expect(onClose).toHaveBeenCalled();\r\n  }, 10000);\r\n\r\n  test('ToastController should handle show and hide', () => {\r\n    const mockToast = {\r\n      show: jest.fn(),\r\n      hide: jest.fn()\r\n    };\r\n    \r\n    ToastController.setRef(mockToast);\r\n    \r\n    ToastController.show({ message: '테스트 메시지' });\r\n    expect(mockToast.show).toHaveBeenCalledWith({ message: '테스트 메시지' });\r\n    \r\n    ToastController.hide();\r\n    expect(mockToast.hide).toHaveBeenCalled();\r\n  }, 10000);\r\n\r\n  test('ToastController handles missing instance', () => {\r\n    ToastController.setRef(null);\r\n    \r\n    expect(() => {\r\n      ToastController.show({ message: '테스트 메시지' });\r\n      ToastController.hide();\r\n    }).not.toThrow();\r\n  }, 10000);\r\n});"],"mappings":"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","ignoreList":[]}