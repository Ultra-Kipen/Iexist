{"version":3,"names":["_getJestObj","mock","DevMenuMock","show","jest","fn","debugRemotely","TurboModuleRegistryMock","get","getEnforcing","name","ViewComponent","props","children","TextComponent","TouchableOpacityComponent","ImageComponent","ScrollViewComponent","TextInputComponent","TurboModuleRegistry","DevMenu","View","Text","TouchableOpacity","Image","ScrollView","TextInput","StyleSheet","create","styles","flatten","style","hairlineWidth","Animated","Value","setValue","interpolate","timing","start","callback","finished","spring","createAnimatedComponent","comp","Platform","OS","select","obj","android","default","Version","SDK_INT","Dimensions","width","height","addEventListener","removeEventListener","Alert","alert","Keyboard","dismiss","addListener","remove","NativeEventEmitter","mockImplementation","removeListeners","NativeModules","NativeAnimatedHelper","startAnimatingNode","stopAnimation","StatusBarManager","HEIGHT","setStyle","setHidden","useWindowDimensions","LayoutAnimation","configureNext","Types","Properties","UIManager","measure","measureInWindow","PixelRatio","getFontScale","getPixelSizeForLayoutSize","size","roundToNearestPixel","BackHandler","AppState","currentState","virtual","require","_require","useFakeTimers","global","window","PR_SHOULD_USE_CONTINUATION","__DEV__","ReactTestInstance","Object","defineProperty","prototype","String","toString"],"sources":["setup-testing-library.ts"],"sourcesContent":["// __tests__/setup-testing-library.ts\r\nimport '@testing-library/jest-native/extend-expect';\r\n\r\n// 타이머 모킹 (애니메이션 및 타이머 관련 테스트를 위해)\r\njest.useFakeTimers();\r\n\r\n// PR_SHOULD_USE_CONTINUATION 속성을 window에 추가\r\n// @ts-ignore - window 속성 무시\r\nglobal.window = global.window || {};\r\n// @ts-ignore - PR_SHOULD_USE_CONTINUATION 속성 추가\r\nglobal.window.PR_SHOULD_USE_CONTINUATION = true;\r\n\r\n// __DEV__가 이미 선언되어 있으므로 값만 설정\r\n// @ts-ignore - __DEV__ 재선언 무시\r\nglobal.__DEV__ = true;\r\n\r\n// TurboModuleRegistry와 DevMenu 관련 문제를 해결하기 위한 모킹\r\njest.mock('react-native', () => {\r\n  // RN을 먼저 가져오지 말고, 필요한 부분을 전부 수동으로 모킹합니다\r\n  \r\n  // DevMenu 모킹\r\n  const DevMenuMock = {\r\n    show: jest.fn(),\r\n    debugRemotely: jest.fn(),\r\n  };\r\n\r\n  // TurboModuleRegistry 모킹\r\n  const TurboModuleRegistryMock = {\r\n    get: jest.fn(() => null),\r\n    getEnforcing: jest.fn((name) => {\r\n      if (name === 'DevMenu') {\r\n        return DevMenuMock;\r\n      }\r\n      return null;\r\n    }),\r\n  };\r\n  \r\n  function ViewComponent(props: { children: any; }) {\r\n    return props.children;\r\n  }\r\n\r\n  function TextComponent(props: { children: any; }) {\r\n    return props.children;\r\n  }\r\n\r\n  function TouchableOpacityComponent(props: { children: any; }) {\r\n    return props.children;\r\n  }\r\n\r\n  function ImageComponent(props: any) {\r\n    return null;\r\n  }\r\n\r\n  function ScrollViewComponent(props: { children: any; }) {\r\n    return props.children;\r\n  }\r\n\r\n  function TextInputComponent(props: any) {\r\n    return null;\r\n  }\r\n  \r\n  return {\r\n    // TurboModuleRegistry와 DevMenu 모킹 추가\r\n    TurboModuleRegistry: TurboModuleRegistryMock,\r\n    DevMenu: DevMenuMock,\r\n    \r\n    // 컴포넌트 모킹\r\n    View: ViewComponent,\r\n    Text: TextComponent,\r\n    TouchableOpacity: TouchableOpacityComponent,\r\n    Image: ImageComponent,\r\n    ScrollView: ScrollViewComponent,\r\n    TextInput: TextInputComponent,\r\n    \r\n    // StyleSheet 모킹\r\n    StyleSheet: {\r\n      create: jest.fn(styles => styles),\r\n      flatten: jest.fn(style => style),\r\n      hairlineWidth: 1,\r\n    },\r\n    \r\n    // Animated 모킹\r\n    Animated: {\r\n      Value: jest.fn(() => ({\r\n        setValue: jest.fn(),\r\n        interpolate: jest.fn(() => ({\r\n          interpolate: jest.fn(),\r\n        })),\r\n      })),\r\n      timing: jest.fn(() => ({\r\n        start: jest.fn(callback => callback && callback({ finished: true })),\r\n      })),\r\n      spring: jest.fn(() => ({\r\n        start: jest.fn(callback => callback && callback({ finished: true })),\r\n      })),\r\n      View: ViewComponent,\r\n      Text: TextComponent,\r\n      Image: ImageComponent,\r\n      createAnimatedComponent: jest.fn(comp => comp),\r\n    },\r\n    \r\n    // 다른 API 모킹\r\n    Platform: {\r\n      OS: 'android',\r\n      select: jest.fn(obj => obj.android || obj.default),\r\n      Version: {\r\n        SDK_INT: 28,\r\n      },\r\n    },\r\n    \r\n    Dimensions: {\r\n      get: jest.fn(() => ({ width: 375, height: 667 })),\r\n      addEventListener: jest.fn(),\r\n      removeEventListener: jest.fn(),\r\n    },\r\n    \r\n    Alert: {\r\n      alert: jest.fn(),\r\n    },\r\n    \r\n    Keyboard: {\r\n      dismiss: jest.fn(),\r\n      addListener: jest.fn(() => ({ remove: jest.fn() })),\r\n    },\r\n    \r\n    NativeEventEmitter: jest.fn().mockImplementation(() => ({\r\n      addListener: jest.fn(),\r\n      removeListeners: jest.fn(),\r\n    })),\r\n    \r\n    NativeModules: {\r\n      DevMenu: DevMenuMock,\r\n      NativeAnimatedHelper: {\r\n        startAnimatingNode: jest.fn(),\r\n        stopAnimation: jest.fn(),\r\n      },\r\n      StatusBarManager: {\r\n        HEIGHT: 42,\r\n        setStyle: jest.fn(),\r\n        setHidden: jest.fn(),\r\n      },\r\n    },\r\n    \r\n    // 추가 API 모킹\r\n    useWindowDimensions: jest.fn(() => ({ width: 375, height: 667 })),\r\n    LayoutAnimation: {\r\n      configureNext: jest.fn(),\r\n      create: jest.fn(),\r\n      Types: {},\r\n      Properties: {},\r\n    },\r\n    UIManager: {\r\n      measure: jest.fn(),\r\n      measureInWindow: jest.fn(),\r\n    },\r\n    \r\n    // 기타 필요한 API\r\n    PixelRatio: {\r\n      get: jest.fn(() => 2),\r\n      getFontScale: jest.fn(() => 1),\r\n      getPixelSizeForLayoutSize: jest.fn(size => size * 2),\r\n      roundToNearestPixel: jest.fn(size => size),\r\n    },\r\n    BackHandler: {\r\n      addEventListener: jest.fn(() => ({ remove: jest.fn() })),\r\n      removeEventListener: jest.fn(),\r\n    },\r\n    AppState: {\r\n      addEventListener: jest.fn(() => ({ remove: jest.fn() })),\r\n      removeEventListener: jest.fn(),\r\n      currentState: 'active',\r\n    },\r\n  };\r\n}, { virtual: true });\r\n\r\n// ReactTestInstance에 textContent 속성 추가 방식 수정\r\n// 이 부분은 모킹 이후에 실행되어야 합니다\r\n// @ts-ignore\r\nif (typeof global.ReactTestInstance !== 'undefined') {\r\n  // @ts-ignore\r\n  Object.defineProperty(global.ReactTestInstance.prototype, 'textContent', {\r\n    get: function() {\r\n      return String(this.toString());\r\n    }\r\n  });\r\n}"],"mappings":"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","ignoreList":[]}