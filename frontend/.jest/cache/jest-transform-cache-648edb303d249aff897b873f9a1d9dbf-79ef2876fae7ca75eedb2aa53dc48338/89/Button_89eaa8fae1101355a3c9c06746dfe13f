7219356e84cfc66336ed4ce5a1b68e6d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../Text/Text"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _TouchableNativeFeedback = _interopRequireDefault(require("./Touchable/TouchableNativeFeedback"));
var _TouchableOpacity = _interopRequireDefault(require("./Touchable/TouchableOpacity"));
var _View = _interopRequireDefault(require("./View/View"));
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Touchable = _Platform.default.OS === 'android' ? _TouchableNativeFeedback.default : _TouchableOpacity.default;
var Button = React.forwardRef(function (props, ref) {
  var _accessibilityState2, _accessibilityState3;
  var accessibilityLabel = props.accessibilityLabel,
    accessibilityState = props.accessibilityState,
    ariaBusy = props['aria-busy'],
    ariaChecked = props['aria-checked'],
    ariaDisabled = props['aria-disabled'],
    ariaExpanded = props['aria-expanded'],
    ariaLabel = props['aria-label'],
    ariaSelected = props['aria-selected'],
    importantForAccessibility = props.importantForAccessibility,
    color = props.color,
    onPress = props.onPress,
    touchSoundDisabled = props.touchSoundDisabled,
    title = props.title,
    hasTVPreferredFocus = props.hasTVPreferredFocus,
    nextFocusDown = props.nextFocusDown,
    nextFocusForward = props.nextFocusForward,
    nextFocusLeft = props.nextFocusLeft,
    nextFocusRight = props.nextFocusRight,
    nextFocusUp = props.nextFocusUp,
    testID = props.testID,
    accessible = props.accessible,
    accessibilityActions = props.accessibilityActions,
    accessibilityHint = props.accessibilityHint,
    accessibilityLanguage = props.accessibilityLanguage,
    onAccessibilityAction = props.onAccessibilityAction;
  var buttonStyles = [styles.button];
  var textStyles = [styles.text];
  if (color) {
    if (_Platform.default.OS === 'ios') {
      textStyles.push({
        color: color
      });
    } else {
      buttonStyles.push({
        backgroundColor: color
      });
    }
  }
  var _accessibilityState = {
    busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
    checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
    disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
    expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
    selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
  };
  var disabled = props.disabled != null ? props.disabled : (_accessibilityState2 = _accessibilityState) == null ? void 0 : _accessibilityState2.disabled;
  _accessibilityState = disabled !== ((_accessibilityState3 = _accessibilityState) == null ? void 0 : _accessibilityState3.disabled) ? Object.assign({}, _accessibilityState, {
    disabled: disabled
  }) : _accessibilityState;
  if (disabled) {
    buttonStyles.push(styles.buttonDisabled);
    textStyles.push(styles.textDisabled);
  }
  (0, _invariant.default)(typeof title === 'string', 'The title prop of a Button must be a string');
  var formattedTitle = _Platform.default.OS === 'android' ? title.toUpperCase() : title;
  var _importantForAccessibility = importantForAccessibility === 'no' ? 'no-hide-descendants' : importantForAccessibility;
  return (0, _jsxRuntime.jsx)(Touchable, {
    accessible: accessible,
    accessibilityActions: accessibilityActions,
    onAccessibilityAction: onAccessibilityAction,
    accessibilityLabel: ariaLabel || accessibilityLabel,
    accessibilityHint: accessibilityHint,
    accessibilityLanguage: accessibilityLanguage,
    accessibilityRole: "button",
    accessibilityState: _accessibilityState,
    importantForAccessibility: _importantForAccessibility,
    hasTVPreferredFocus: hasTVPreferredFocus,
    nextFocusDown: nextFocusDown,
    nextFocusForward: nextFocusForward,
    nextFocusLeft: nextFocusLeft,
    nextFocusRight: nextFocusRight,
    nextFocusUp: nextFocusUp,
    testID: testID,
    disabled: disabled,
    onPress: onPress,
    touchSoundDisabled: touchSoundDisabled,
    ref: ref,
    children: (0, _jsxRuntime.jsx)(_View.default, {
      style: buttonStyles,
      children: (0, _jsxRuntime.jsx)(_Text.default, {
        style: textStyles,
        disabled: disabled,
        children: formattedTitle
      })
    })
  });
});
Button.displayName = 'Button';
var styles = _StyleSheet.default.create({
  button: _Platform.default.select({
    ios: {},
    android: {
      elevation: 4,
      backgroundColor: '#2196F3',
      borderRadius: 2
    }
  }),
  text: Object.assign({
    textAlign: 'center',
    margin: 8
  }, _Platform.default.select({
    ios: {
      color: '#007AFF',
      fontSize: 18
    },
    android: {
      color: 'white',
      fontWeight: '500'
    }
  })),
  buttonDisabled: _Platform.default.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: _Platform.default.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,