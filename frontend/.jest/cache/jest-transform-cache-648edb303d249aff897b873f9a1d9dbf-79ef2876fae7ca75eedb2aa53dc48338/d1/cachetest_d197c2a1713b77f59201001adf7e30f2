744c77da0837c9d0977ae1123907b884
var _cache = require("../../../src/utils/cache");
describe('Cache utils', function () {
  beforeEach(function () {
    (0, _cache.clearCache)();
  });
  describe('setCache and getCache', function () {
    it('should store and retrieve cache items correctly', function () {
      var key = 'testKey';
      var value = {
        name: '테스트',
        id: 123
      };
      (0, _cache.setCache)(key, value);
      var cachedValue = (0, _cache.getCache)(key);
      expect(cachedValue).toEqual(value);
    });
    it('should handle expiration time correctly', function () {
      jest.useFakeTimers();
      var key = 'expiringKey';
      var value = 'will expire';
      var ttl = 60;
      (0, _cache.setCache)(key, value, ttl);
      expect((0, _cache.getCache)(key)).toBe(value);
      jest.advanceTimersByTime(ttl * 1000 + 100);
      expect((0, _cache.getCache)(key)).toBeNull();
      jest.useRealTimers();
    });
  });
  describe('removeCache', function () {
    it('should remove specific cache item', function () {
      (0, _cache.setCache)('key1', 'value1');
      (0, _cache.setCache)('key2', 'value2');
      (0, _cache.removeCache)('key1');
      expect((0, _cache.getCache)('key1')).toBeNull();
      expect((0, _cache.getCache)('key2')).toBe('value2');
    });
  });
  describe('clearCache', function () {
    it('should remove all cache items', function () {
      (0, _cache.setCache)('key1', 'value1');
      (0, _cache.setCache)('key2', 'value2');
      (0, _cache.clearCache)();
      expect((0, _cache.getCache)('key1')).toBeNull();
      expect((0, _cache.getCache)('key2')).toBeNull();
    });
  });
  describe('getCacheKeys', function () {
    it('should return all cache keys', function () {
      (0, _cache.setCache)('key1', 'value1');
      (0, _cache.setCache)('key2', 'value2');
      var keys = (0, _cache.getCacheKeys)();
      expect(keys).toContain('key1');
      expect(keys).toContain('key2');
      expect(keys.length).toBe(2);
    });
  });
  describe('getCacheSize', function () {
    it('should return correct number of cache items', function () {
      expect((0, _cache.getCacheSize)()).toBe(0);
      (0, _cache.setCache)('key1', 'value1');
      expect((0, _cache.getCacheSize)()).toBe(1);
      (0, _cache.setCache)('key2', 'value2');
      expect((0, _cache.getCacheSize)()).toBe(2);
      (0, _cache.removeCache)('key1');
      expect((0, _cache.getCacheSize)()).toBe(1);
      (0, _cache.clearCache)();
      expect((0, _cache.getCacheSize)()).toBe(0);
    });
  });
  describe('isCacheExpired', function () {
    it('should correctly check if cache is expired', function () {
      jest.useFakeTimers();
      var key = 'expiringKey';
      var value = 'will expire';
      var ttl = 60;
      (0, _cache.setCache)(key, value, ttl);
      expect((0, _cache.isCacheExpired)(key)).toBe(false);
      jest.advanceTimersByTime(ttl * 1000 + 100);
      expect((0, _cache.isCacheExpired)(key)).toBe(true);
      jest.useRealTimers();
    });
    it('should return true for non-existent keys', function () {
      expect((0, _cache.isCacheExpired)('nonExistentKey')).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,