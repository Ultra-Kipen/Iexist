8c3cf23adb645edb9e8e6d4cc98725f9
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    SectionList: 'SectionList',
    Image: 'Image',
    TextInput: 'TextInput',
    Button: 'Button',
    Switch: 'Switch',
    ActivityIndicator: 'ActivityIndicator',
    KeyboardAvoidingView: 'KeyboardAvoidingView',
    ImageBackground: 'ImageBackground',
    StyleSheet: {
      create: _globals.jest.fn(function (styles) {
        return styles;
      }),
      flatten: _globals.jest.fn(function (style) {
        return style;
      }),
      absoluteFill: {},
      hairlineWidth: 1
    },
    Platform: {
      OS: 'android',
      select: _globals.jest.fn(function (obj) {
        return obj.android || obj.default;
      }),
      Version: 29
    },
    Dimensions: {
      get: _globals.jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: _globals.jest.fn(),
      removeEventListener: _globals.jest.fn()
    },
    Animated: {
      View: 'View',
      Text: 'Text',
      Image: 'Image',
      createAnimatedComponent: _globals.jest.fn(function (component) {
        return component;
      }),
      timing: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      spring: _globals.jest.fn(function () {
        return {
          start: _globals.jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: _globals.jest.fn(function () {
        return {
          setValue: _globals.jest.fn(),
          interpolate: _globals.jest.fn(function () {
            return {};
          }),
          addListener: _globals.jest.fn(),
          removeListener: _globals.jest.fn()
        };
      }),
      bezier: _globals.jest.fn()
    },
    Alert: {
      alert: _globals.jest.fn()
    },
    Linking: {
      openURL: _globals.jest.fn(),
      canOpenURL: _globals.jest.fn(function () {
        return Promise.resolve(true);
      })
    },
    Keyboard: {
      dismiss: _globals.jest.fn()
    },
    StatusBar: {
      setBarStyle: _globals.jest.fn(),
      setHidden: _globals.jest.fn(),
      setBackgroundColor: _globals.jest.fn(),
      currentHeight: 44
    },
    TurboModuleRegistry: {
      get: _globals.jest.fn(function () {
        return {};
      }),
      getEnforcing: _globals.jest.fn(function () {
        return {};
      })
    },
    UIManager: {
      getViewManagerConfig: _globals.jest.fn(function () {
        return {};
      })
    },
    DevSettings: {
      reload: _globals.jest.fn(),
      addMenuItem: _globals.jest.fn(),
      setIsDebuggingRemotely: _globals.jest.fn()
    },
    NativeModules: {
      DevMenu: {
        show: _globals.jest.fn(),
        reload: _globals.jest.fn(),
        debugRemotely: _globals.jest.fn(),
        setProfilingEnabled: _globals.jest.fn(),
        setHotLoadingEnabled: _globals.jest.fn()
      },
      DevSettings: {
        reload: _globals.jest.fn(),
        setIsDebuggingRemotely: _globals.jest.fn()
      },
      StatusBarManager: {
        HEIGHT: 42,
        setStyle: _globals.jest.fn(),
        setHidden: _globals.jest.fn(),
        getHeight: _globals.jest.fn(function (cb) {
          return cb && cb(42);
        })
      },
      PlatformConstants: {
        interfaceIdiom: 'phone',
        osVersion: '10',
        forceTouchAvailable: false,
        reactNativeVersion: {
          major: 0,
          minor: 69,
          patch: 0
        }
      }
    },
    I18nManager: {
      isRTL: false,
      getConstants: function getConstants() {
        return {
          isRTL: false
        };
      }
    },
    ViewStyle: {},
    TextStyle: {}
  };
});
_getJestObj().mock('axios', function () {
  return {
    create: _globals.jest.fn(function () {
      return {
        get: _globals.jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        post: _globals.jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        put: _globals.jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        delete: _globals.jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        interceptors: {
          request: {
            use: _globals.jest.fn(function () {
              return {};
            })
          },
          response: {
            use: _globals.jest.fn(function () {
              return {};
            })
          }
        },
        defaults: {
          headers: {
            common: {}
          }
        }
      };
    }),
    get: _globals.jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    post: _globals.jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    put: _globals.jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    delete: _globals.jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    interceptors: {
      request: {
        use: _globals.jest.fn(function () {
          return {};
        })
      },
      response: {
        use: _globals.jest.fn(function () {
          return {};
        })
      }
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    NavigationContainer: 'NavigationContainer',
    useNavigation: function useNavigation() {
      return {
        navigate: _globals.jest.fn(),
        goBack: _globals.jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {
          postId: 1
        }
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native-stack', function () {
  return {
    createNativeStackNavigator: _globals.jest.fn(function () {
      return {
        Navigator: 'Navigator',
        Screen: 'Screen'
      };
    })
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Provider: 'PaperProvider',
    Button: 'Button',
    Card: 'Card',
    Title: 'Title',
    Paragraph: 'Paragraph',
    TextInput: 'TextInput',
    useTheme: _globals.jest.fn(function () {
      return {
        colors: {
          primary: '#6200ee',
          background: '#f6f6f6',
          surface: '#ffffff',
          accent: '#03dac6',
          error: '#b00020',
          text: '#000000',
          onSurface: '#000000',
          disabled: 'rgba(0, 0, 0, 0.26)',
          placeholder: 'rgba(0, 0, 0, 0.54)',
          backdrop: 'rgba(0, 0, 0, 0.5)',
          notification: '#f50057'
        },
        fonts: {
          regular: {
            fontFamily: 'System',
            fontWeight: 'normal'
          },
          medium: {
            fontFamily: 'System',
            fontWeight: 'bold'
          }
        },
        animation: {
          scale: 1
        },
        roundness: 4
      };
    }),
    ActivityIndicator: 'ActivityIndicator',
    Appbar: {
      Header: 'Header',
      Content: 'Content',
      Action: 'Action',
      BackAction: 'BackAction'
    },
    Avatar: {
      Icon: 'AvatarIcon',
      Image: 'AvatarImage',
      Text: 'AvatarText'
    },
    Badge: 'Badge',
    Banner: 'Banner',
    BottomNavigation: 'BottomNavigation',
    Checkbox: 'Checkbox',
    Chip: 'Chip',
    Dialog: {
      Title: 'DialogTitle',
      Content: 'DialogContent',
      Actions: 'DialogActions'
    },
    Divider: 'Divider',
    Drawer: {
      Item: 'DrawerItem',
      Section: 'DrawerSection'
    },
    FAB: {
      Group: 'FABGroup'
    },
    IconButton: 'IconButton',
    List: {
      Item: 'ListItem',
      Section: 'ListSection',
      Accordion: 'ListAccordion'
    },
    Menu: {
      Item: 'MenuItem'
    },
    Modal: 'Modal',
    Portal: 'Portal',
    ProgressBar: 'ProgressBar',
    RadioButton: {
      Group: 'RadioButtonGroup',
      Item: 'RadioButtonItem'
    },
    Searchbar: 'Searchbar',
    Snackbar: 'Snackbar',
    Surface: 'Surface',
    Switch: 'Switch',
    ToggleButton: {
      Group: 'ToggleButtonGroup',
      Row: 'ToggleButtonRow'
    },
    TouchableRipple: 'TouchableRipple'
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: 'SafeAreaView',
    SafeAreaProvider: 'SafeAreaProvider',
    useSafeAreaInsets: _globals.jest.fn(function () {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    })
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: _globals.jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: _globals.jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: _globals.jest.fn(function () {
      return Promise.resolve();
    }),
    clear: _globals.jest.fn(function () {
      return Promise.resolve();
    }),
    getAllKeys: _globals.jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiGet: _globals.jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiSet: _globals.jest.fn(function () {
      return Promise.resolve();
    }),
    multiRemove: _globals.jest.fn(function () {
      return Promise.resolve();
    }),
    multiMerge: _globals.jest.fn(function () {
      return Promise.resolve();
    }),
    mergeItem: _globals.jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock("./src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
}, {
  virtual: true
});
_getJestObj().mock("./src/screens/LoginScreen", function () {
  return 'LoginScreen';
}, {
  virtual: true
});
_getJestObj().mock("./src/screens/ComfortScreen", function () {
  return 'ComfortScreen';
}, {
  virtual: true
});
_getJestObj().mock('@testing-library/react-native', function () {
  var rtl = _globals.jest.requireActual('@testing-library/react-native');
  return rtl;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-native/extend-expect");
var _globals = require("@jest/globals");
var _react = _interopRequireDefault(require("react"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.expect = _globals.expect;
global.jest = _globals.jest;
global.test = _globals.test;
global.describe = _globals.describe;
global.beforeEach = _globals.beforeEach;
global.afterEach = _globals.afterEach;
global.beforeAll = _globals.beforeAll;
global.afterAll = _globals.afterAll;
global.__DEV__ = true;
global.React = _react.default;
_globals.jest.setTimeout(120000);
var originalConsoleError = console.error;
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['Unable to find an element', 'Warning: An update inside a test was not wrapped in act', 'Cannot read properties of undefined', 'ReactCurrentDispatcher', 'ReactCurrentOwner', 'act(', 'inside a test was not wrapped in act', 'DevMenu could not be found', 'Exceeded timeout', 'TurboModuleRegistry', 'bezier', 'getViewManagerConfig', 'expect is not defined'];
  if (ignoredErrors.some(function (error) {
    return typeof errorMessage === 'string' && errorMessage.includes(error);
  })) {
    return;
  }
  originalConsoleError.apply(void 0, arguments);
};
var originalConsoleWarn = console.warn;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found', 'DevSettings', 'NativeModule: AsyncStorage is null', 'Element type is invalid'];
  if (ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    return;
  }
  originalConsoleWarn.apply(void 0, arguments);
};
_globals.jest.setTimeout(5000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,