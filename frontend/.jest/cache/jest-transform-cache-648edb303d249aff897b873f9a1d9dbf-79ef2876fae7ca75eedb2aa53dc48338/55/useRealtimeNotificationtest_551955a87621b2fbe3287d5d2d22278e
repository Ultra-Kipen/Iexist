e990ae70c054988743f2a4db5562e326
_getJestObj().mock("../../src/services/socketService", function () {
  return {
    init: jest.fn().mockResolvedValue(undefined),
    isConnected: jest.fn(),
    disconnect: jest.fn(),
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn()
  };
});
_getJestObj().mock("../../src/contexts/NotificationContext", function () {
  return {
    useNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useRealtimeNotification = require("../../src/hooks/useRealtimeNotification");
var _socketService = _interopRequireDefault(require("../../src/services/socketService"));
var _NotificationContext = require("../../src/contexts/NotificationContext");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('useRealtimeNotification', function () {
  var originalTimeout;
  beforeAll(function () {
    originalTimeout = jest.getProperty('setTimeout');
    jest.setTimeout(30000);
  });
  afterAll(function () {
    jest.setTimeout(originalTimeout);
  });
  beforeEach(function () {
    jest.clearAllMocks();
    _socketService.default.isConnected.mockReturnValue(false);
    _NotificationContext.useNotification.mockReturnValue({
      fetchNotifications: jest.fn().mockResolvedValue(undefined),
      setUnreadCount: jest.fn()
    });
  });
  beforeEach(function () {
    _socketService.default.init.mockImplementation(function () {
      return Promise.resolve();
    });
    _socketService.default.disconnect.mockImplementation(function () {});
  });
  it('should have expected properties and methods', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook.result;
    expect(result.current).toHaveProperty('isConnected');
    expect(result.current).toHaveProperty('isLoading');
    expect(result.current).toHaveProperty('error');
    expect(result.current).toHaveProperty('connect');
    expect(result.current).toHaveProperty('disconnect');
    expect(result.current).toHaveProperty('markAsRead');
    expect(result.current).toHaveProperty('markAllAsRead');
  });
  it('should initialize with default values', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook2.result;
    expect(result.current.isConnected).toBe(false);
    expect(result.current.isLoading).toBe(true);
    expect(result.current.error).toBeNull();
  });
  it('should call socketService.init in connect function', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)({
          autoConnect: false
        });
      }),
      result = _renderHook3.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.connect();
    }));
    expect(_socketService.default.init).toHaveBeenCalled();
  }));
  it('should handle loading state during connection process', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)({
          autoConnect: false
        });
      }),
      result = _renderHook4.result;
    var connectPromise;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      _socketService.default.init.mockImplementationOnce(function () {
        return Promise.resolve();
      });
      connectPromise = result.current.connect();
      expect(result.current.isLoading).toBe(false);
      yield connectPromise;
    }));
    expect(result.current.isLoading).toBe(false);
  }));
  it('should call socketService.disconnect in disconnect function', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook5.result;
    (0, _reactHooks.act)(function () {
      result.current.disconnect();
    });
    expect(_socketService.default.disconnect).toHaveBeenCalled();
  });
  it('should register socket event listeners on mount', function () {
    (0, _reactHooks.renderHook)(function () {
      return (0, _useRealtimeNotification.useRealtimeNotification)();
    });
    expect(_socketService.default.on).toHaveBeenCalledWith('connect', expect.any(Function));
    expect(_socketService.default.on).toHaveBeenCalledWith('disconnect', expect.any(Function));
    expect(_socketService.default.on).toHaveBeenCalledWith('new_notification', expect.any(Function));
    expect(_socketService.default.on).toHaveBeenCalledWith('unread_notifications_count', expect.any(Function));
  });
  it('should not call socketService.emit when not connected', function () {
    _socketService.default.isConnected.mockReturnValue(false);
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      result = _renderHook6.result;
    (0, _reactHooks.act)(function () {
      result.current.markAsRead(5);
    });
    expect(_socketService.default.emit).not.toHaveBeenCalled();
    (0, _reactHooks.act)(function () {
      result.current.markAllAsRead();
    });
    expect(_socketService.default.emit).not.toHaveBeenCalled();
  });
  it('should handle connection error', (0, _asyncToGenerator2.default)(function* () {
    var testError = new Error('Connection error');
    _socketService.default.init.mockRejectedValueOnce(testError);
    var originalConsoleError = console.error;
    console.error = jest.fn();
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)({
          autoConnect: false
        });
      }),
      result = _renderHook7.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      try {
        yield result.current.connect();
      } catch (error) {}
    }));
    expect(result.current.error).toBe('Connection error');
    expect(result.current.isLoading).toBe(false);
    expect(console.error).toHaveBeenCalled();
    console.error = originalConsoleError;
  }));
  it('should clean up listeners on unmount', function () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useRealtimeNotification.useRealtimeNotification)();
      }),
      unmount = _renderHook8.unmount;
    (0, _reactHooks.act)(function () {
      unmount();
    });
    expect(_socketService.default.off).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJpbml0IiwiamVzdCIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJ1bmRlZmluZWQiLCJpc0Nvbm5lY3RlZCIsImRpc2Nvbm5lY3QiLCJvbiIsIm9mZiIsImVtaXQiLCJ1c2VOb3RpZmljYXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdEhvb2tzIiwiX3VzZVJlYWx0aW1lTm90aWZpY2F0aW9uIiwiX3NvY2tldFNlcnZpY2UiLCJfTm90aWZpY2F0aW9uQ29udGV4dCIsIl9yZXF1aXJlIiwiZGVzY3JpYmUiLCJvcmlnaW5hbFRpbWVvdXQiLCJiZWZvcmVBbGwiLCJnZXRQcm9wZXJ0eSIsInNldFRpbWVvdXQiLCJhZnRlckFsbCIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwic29ja2V0U2VydmljZSIsIm1vY2tSZXR1cm5WYWx1ZSIsImZldGNoTm90aWZpY2F0aW9ucyIsInNldFVucmVhZENvdW50IiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpdCIsIl9yZW5kZXJIb29rIiwicmVuZGVySG9vayIsInVzZVJlYWx0aW1lTm90aWZpY2F0aW9uIiwicmVzdWx0IiwiZXhwZWN0IiwiY3VycmVudCIsInRvSGF2ZVByb3BlcnR5IiwiX3JlbmRlckhvb2syIiwidG9CZSIsImlzTG9hZGluZyIsImVycm9yIiwidG9CZU51bGwiLCJkZWZhdWx0IiwiX3JlbmRlckhvb2szIiwiYXV0b0Nvbm5lY3QiLCJhY3QiLCJjb25uZWN0IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXJIb29rNCIsImNvbm5lY3RQcm9taXNlIiwibW9ja0ltcGxlbWVudGF0aW9uT25jZSIsIl9yZW5kZXJIb29rNSIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYW55IiwiRnVuY3Rpb24iLCJfcmVuZGVySG9vazYiLCJtYXJrQXNSZWFkIiwibm90IiwibWFya0FsbEFzUmVhZCIsInRlc3RFcnJvciIsIkVycm9yIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwib3JpZ2luYWxDb25zb2xlRXJyb3IiLCJjb25zb2xlIiwiX3JlbmRlckhvb2s3IiwiX3JlbmRlckhvb2s4IiwidW5tb3VudCJdLCJzb3VyY2VzIjpbInVzZVJlYWx0aW1lTm90aWZpY2F0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2hvb2tzL3VzZVJlYWx0aW1lTm90aWZpY2F0aW9uLnRlc3QudHNcclxuaW1wb3J0IHsgcmVuZGVySG9vaywgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1ob29rcyc7XHJcbmltcG9ydCB7IHVzZVJlYWx0aW1lTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vLi4vc3JjL2hvb2tzL3VzZVJlYWx0aW1lTm90aWZpY2F0aW9uJztcclxuaW1wb3J0IHNvY2tldFNlcnZpY2UgZnJvbSAnLi4vLi4vc3JjL3NlcnZpY2VzL3NvY2tldFNlcnZpY2UnO1xyXG5pbXBvcnQgeyB1c2VOb3RpZmljYXRpb24gfSBmcm9tICcuLi8uLi9zcmMvY29udGV4dHMvTm90aWZpY2F0aW9uQ29udGV4dCc7XHJcblxyXG4vLyDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2VydmljZXMvc29ja2V0U2VydmljZScsICgpID0+ICh7XHJcbiAgaW5pdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXHJcbiAgaXNDb25uZWN0ZWQ6IGplc3QuZm4oKSxcclxuICBkaXNjb25uZWN0OiBqZXN0LmZuKCksXHJcbiAgb246IGplc3QuZm4oKSxcclxuICBvZmY6IGplc3QuZm4oKSxcclxuICBlbWl0OiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbnRleHRzL05vdGlmaWNhdGlvbkNvbnRleHQnLCAoKSA9PiAoe1xyXG4gIHVzZU5vdGlmaWNhdGlvbjogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG5kZXNjcmliZSgndXNlUmVhbHRpbWVOb3RpZmljYXRpb24nLCAoKSA9PiB7XHJcbiAgbGV0IG9yaWdpbmFsVGltZW91dDtcclxuXHJcbiAgYmVmb3JlQWxsKCgpID0+IHtcclxuICAgIC8vIO2FjOyKpO2KuCDtg4DsnoTslYTsm4Mg7Kad6rCAXHJcbiAgICBvcmlnaW5hbFRpbWVvdXQgPSBqZXN0LmdldFByb3BlcnR5KCdzZXRUaW1lb3V0Jyk7XHJcbiAgICBqZXN0LnNldFRpbWVvdXQoMzAwMDApO1xyXG4gIH0pO1xyXG5cclxuICBhZnRlckFsbCgoKSA9PiB7XHJcbiAgICAvLyDsm5Drnpgg7YOA7J6E7JWE7JuD7Jy866GcIOuzteybkFxyXG4gICAgamVzdC5zZXRUaW1lb3V0KG9yaWdpbmFsVGltZW91dCk7XHJcbiAgfSk7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgICBcclxuICAgIC8vIOq4sOuzuCDrqqjtgrkg7ISk7KCVXHJcbiAgICAoc29ja2V0U2VydmljZS5pc0Nvbm5lY3RlZCBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShmYWxzZSk7XHJcbiAgICBcclxuICAgIC8vIOy7qO2FjeyKpO2KuCDrqqjtgrlcclxuICAgICh1c2VOb3RpZmljYXRpb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBmZXRjaE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxyXG4gICAgICBzZXRVbnJlYWRDb3VudDogamVzdC5mbigpLFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIHNvY2tldFNlcnZpY2UuaW5pdOqzvCBzb2NrZXRTZXJ2aWNlLmRpc2Nvbm5lY3Tsl5Ag6rWs7LK07KCB7J24IOuPmeyekSDsoJXsnZhcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIChzb2NrZXRTZXJ2aWNlLmluaXQgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xyXG4gICAgKHNvY2tldFNlcnZpY2UuZGlzY29ubmVjdCBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgaGF2ZSBleHBlY3RlZCBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVhbHRpbWVOb3RpZmljYXRpb24oKSk7XHJcbiAgICBcclxuICAgIC8vIOq4sOuzuCBBUEkg7ZmV7J24XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQpLnRvSGF2ZVByb3BlcnR5KCdpc0Nvbm5lY3RlZCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnaXNMb2FkaW5nJyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcicpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnY29ubmVjdCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnZGlzY29ubmVjdCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnbWFya0FzUmVhZCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50KS50b0hhdmVQcm9wZXJ0eSgnbWFya0FsbEFzUmVhZCcpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IHZhbHVlcycsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlYWx0aW1lTm90aWZpY2F0aW9uKCkpO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNDb25uZWN0ZWQpLnRvQmUoZmFsc2UpO1xyXG4gICAgLy8g7Iuk7KCcIOq1rO2YhOyXkOyEnOuKlCBpc0xvYWRpbmfsnbQgdHJ1ZeuhnCDstIjquLDtmZTrkKhcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUodHJ1ZSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgY2FsbCBzb2NrZXRTZXJ2aWNlLmluaXQgaW4gY29ubmVjdCBmdW5jdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlYWx0aW1lTm90aWZpY2F0aW9uKHsgYXV0b0Nvbm5lY3Q6IGZhbHNlIH0pKTtcclxuICAgIFxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgcmVzdWx0LmN1cnJlbnQuY29ubmVjdCgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChzb2NrZXRTZXJ2aWNlLmluaXQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuICBcclxuICBpdCgnc2hvdWxkIGhhbmRsZSBsb2FkaW5nIHN0YXRlIGR1cmluZyBjb25uZWN0aW9uIHByb2Nlc3MnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyDsi6TsoJwg6rWs7ZiE7JeQ7IScIGlzTG9hZGluZ+ydtCDslrTrlrvqsowg67OA7ZWY64qU7KeA7JeQIOunnuy2sCDthYzsiqTtirhcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZVJlYWx0aW1lTm90aWZpY2F0aW9uKHsgYXV0b0Nvbm5lY3Q6IGZhbHNlIH0pKTtcclxuICAgIFxyXG4gICAgbGV0IGNvbm5lY3RQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xyXG4gICAgXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAvLyBpbml0IOyLpO2WiSDsi5zqsIQg64uo7LaVXHJcbiAgICAgIChzb2NrZXRTZXJ2aWNlLmluaXQgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb25PbmNlKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcclxuICAgICAgXHJcbiAgICAgIGNvbm5lY3RQcm9taXNlID0gcmVzdWx0LmN1cnJlbnQuY29ubmVjdCgpO1xyXG4gICAgICBcclxuICAgICAgLy8g7Iuk7KCcIOq1rO2YhOyXkCDrp57strAg66Gc65SpIOyDge2DnCDtmZXsnbhcclxuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgICAgIFxyXG4gICAgICBhd2FpdCBjb25uZWN0UHJvbWlzZTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsl7DqsrAg7JmE66OMIO2bhCDroZzrlKkg7IOB7YOcIO2ZleyduFxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZShmYWxzZSk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3Nob3VsZCBjYWxsIHNvY2tldFNlcnZpY2UuZGlzY29ubmVjdCBpbiBkaXNjb25uZWN0IGZ1bmN0aW9uJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVhbHRpbWVOb3RpZmljYXRpb24oKSk7XHJcbiAgICBcclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgIHJlc3VsdC5jdXJyZW50LmRpc2Nvbm5lY3QoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBleHBlY3Qoc29ja2V0U2VydmljZS5kaXNjb25uZWN0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3Nob3VsZCByZWdpc3RlciBzb2NrZXQgZXZlbnQgbGlzdGVuZXJzIG9uIG1vdW50JywgKCkgPT4ge1xyXG4gICAgcmVuZGVySG9vaygoKSA9PiB1c2VSZWFsdGltZU5vdGlmaWNhdGlvbigpKTtcclxuICAgIFxyXG4gICAgLy8g7J2067Kk7Yq4IOumrOyKpOuEiCDrk7HroZ0g7ZmV7J24XHJcbiAgICBleHBlY3Qoc29ja2V0U2VydmljZS5vbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2Nvbm5lY3QnLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XHJcbiAgICBleHBlY3Qoc29ja2V0U2VydmljZS5vbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2Rpc2Nvbm5lY3QnLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XHJcbiAgICBleHBlY3Qoc29ja2V0U2VydmljZS5vbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ25ld19ub3RpZmljYXRpb24nLCBleHBlY3QuYW55KEZ1bmN0aW9uKSk7XHJcbiAgICBleHBlY3Qoc29ja2V0U2VydmljZS5vbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3VucmVhZF9ub3RpZmljYXRpb25zX2NvdW50JywgZXhwZWN0LmFueShGdW5jdGlvbikpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdzaG91bGQgbm90IGNhbGwgc29ja2V0U2VydmljZS5lbWl0IHdoZW4gbm90IGNvbm5lY3RlZCcsICgpID0+IHtcclxuICAgIChzb2NrZXRTZXJ2aWNlLmlzQ29ubmVjdGVkIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKGZhbHNlKTtcclxuICAgIFxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVhbHRpbWVOb3RpZmljYXRpb24oKSk7XHJcbiAgICBcclxuICAgIC8vIOyXsOqysOuQmOyngCDslYrsnYAg7IOB7YOc7JeQ7IScIG1hcmtBc1JlYWQg7Zi47LacXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5tYXJrQXNSZWFkKDUpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIGVtaXTsnbQg7Zi47Lac65CY7KeAIOyViuyVhOyVvCDtlahcclxuICAgIGV4cGVjdChzb2NrZXRTZXJ2aWNlLmVtaXQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgICBcclxuICAgIC8vIG1hcmtBbGxBc1JlYWQg7Zi47LacXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICByZXN1bHQuY3VycmVudC5tYXJrQWxsQXNSZWFkKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7Jes7KCE7Z6IIGVtaXTsnbQg7Zi47Lac65CY7KeAIOyViuyVhOyVvCDtlahcclxuICAgIGV4cGVjdChzb2NrZXRTZXJ2aWNlLmVtaXQpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ3Nob3VsZCBoYW5kbGUgY29ubmVjdGlvbiBlcnJvcicsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIGluaXTsl5DshJwg7JeQ65+sIOuwnOyDne2VmOuPhOuhnSDshKTsoJVcclxuICAgIGNvbnN0IHRlc3RFcnJvciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpO1xyXG4gICAgKHNvY2tldFNlcnZpY2UuaW5pdCBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZSh0ZXN0RXJyb3IpO1xyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmVycm9yIOuqqO2CuVxyXG4gICAgY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yO1xyXG4gICAgY29uc29sZS5lcnJvciA9IGplc3QuZm4oKTtcclxuICAgIFxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVhbHRpbWVOb3RpZmljYXRpb24oeyBhdXRvQ29ubmVjdDogZmFsc2UgfSkpO1xyXG4gICAgXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IHJlc3VsdC5jdXJyZW50LmNvbm5lY3QoKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAvLyDsl5Drn6zripQg66y07IucIC0g7ZuFIOuCtOu2gOyXkOyEnCDsspjrpqzrkKhcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOyXkOufrCDsg4Htg5wg7ZmV7J24XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuZXJyb3IpLnRvQmUoJ0Nvbm5lY3Rpb24gZXJyb3InKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmUoZmFsc2UpO1xyXG4gICAgZXhwZWN0KGNvbnNvbGUuZXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIFxyXG4gICAgLy8g66qo7YK5IOuzteybkFxyXG4gICAgY29uc29sZS5lcnJvciA9IG9yaWdpbmFsQ29uc29sZUVycm9yO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdzaG91bGQgY2xlYW4gdXAgbGlzdGVuZXJzIG9uIHVubW91bnQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlUmVhbHRpbWVOb3RpZmljYXRpb24oKSk7XHJcbiAgICBcclxuICAgIC8vIOuqheyLnOyggeycvOuhnCDsoJXrpqwg7J6R7JeFIOy2lOqwgFxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgdW5tb3VudCgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChzb2NrZXRTZXJ2aWNlLm9mZikudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUkscUNBQXFDO0VBQUEsT0FBTztJQUNuREMsSUFBSSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDQyxTQUFTLENBQUM7SUFDNUNDLFdBQVcsRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN0QkksVUFBVSxFQUFFTCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCSyxFQUFFLEVBQUVOLElBQUksQ0FBQ0Ms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