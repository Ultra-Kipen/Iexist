36845b9db2d8e15ef5b96f6747ee2f19
_getJestObj().mock("../../../../src/services/api/client");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("../../../../src/services/api/client"));
var _comfortWallService = _interopRequireDefault(require("../../../../src/services/api/comfortWallService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('comfortWallService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('createPost', function () {
    it('should call apiClient.post with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var mockData = {
        title: '테스트 제목',
        content: '테스트 내용',
        is_anonymous: true,
        tag_ids: [1, 2, 3]
      };
      _client.default.post.mockResolvedValue({
        data: 'success'
      });
      var result = yield _comfortWallService.default.createPost(mockData);
      expect(_client.default.post).toHaveBeenCalledWith('/comfort-wall', mockData);
      expect(result).toEqual({
        data: 'success'
      });
    }));
  });
  describe('getPosts', function () {
    it('should call apiClient.get with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        page: 1,
        limit: 10,
        sort_by: 'latest',
        tag: 'test'
      };
      _client.default.get.mockResolvedValue({
        data: ['post1', 'post2']
      });
      var result = yield _comfortWallService.default.getPosts(params);
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall', {
        params: params
      });
      expect(result).toEqual({
        data: ['post1', 'post2']
      });
    }));
    it('should call apiClient.get without parameters', (0, _asyncToGenerator2.default)(function* () {
      _client.default.get.mockResolvedValue({
        data: ['post1', 'post2']
      });
      var result = yield _comfortWallService.default.getPosts();
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall', {
        params: undefined
      });
      expect(result).toEqual({
        data: ['post1', 'post2']
      });
    }));
  });
  describe('getBestPosts', function () {
    it('should call apiClient.get with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var params = {
        period: 'weekly'
      };
      _client.default.get.mockResolvedValue({
        data: ['bestPost1', 'bestPost2']
      });
      var result = yield _comfortWallService.default.getBestPosts(params);
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall/best', {
        params: params
      });
      expect(result).toEqual({
        data: ['bestPost1', 'bestPost2']
      });
    }));
    it('should call apiClient.get without parameters', (0, _asyncToGenerator2.default)(function* () {
      _client.default.get.mockResolvedValue({
        data: ['bestPost1', 'bestPost2']
      });
      var result = yield _comfortWallService.default.getBestPosts();
      expect(_client.default.get).toHaveBeenCalledWith('/comfort-wall/best', {
        params: undefined
      });
      expect(result).toEqual({
        data: ['bestPost1', 'bestPost2']
      });
    }));
  });
  describe('sendMessage', function () {
    it('should call apiClient.post with correct parameters', (0, _asyncToGenerator2.default)(function* () {
      var postId = 123;
      var mockData = {
        message: '테스트 메시지',
        is_anonymous: true
      };
      _client.default.post.mockResolvedValue({
        data: 'success'
      });
      var result = yield _comfortWallService.default.sendMessage(postId, mockData);
      expect(_client.default.post).toHaveBeenCalledWith(`/comfort-wall/${postId}/message`, mockData);
      expect(result).toEqual({
        data: 'success'
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,