31f872c3e41611596539b2d86308d4b4
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/notificationService");
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
});
_getJestObj().mock("../../src/components/Button", function () {
  return 'Button';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationScreen = _interopRequireDefault(require("../../src/screens/NotificationScreen"));
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNotifications = [{
  id: 1,
  content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',
  notification_type: 'like',
  related_id: 101,
  is_read: false,
  created_at: new Date().toISOString()
}, {
  id: 2,
  content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',
  notification_type: 'comment',
  related_id: 102,
  is_read: true,
  created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
}, {
  id: 3,
  content: '행복 챌린지가 시작되었습니다.',
  notification_type: 'challenge',
  related_id: 5,
  is_read: false,
  created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
}];
describe('NotificationScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _notificationService.default.getNotifications = jest.fn().mockResolvedValue({
      data: {
        data: mockNotifications,
        pagination: {
          page: 1,
          limit: 20,
          total: 3
        }
      }
    });
    _notificationService.default.markAsRead = jest.fn().mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead = jest.fn().mockResolvedValue({
      success: true
    });
  });
  it('renders loading state initially', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByProps = _render.getByProps;
    expect(getByProps({
      text: '알림 로딩 중...'
    })).toBeTruthy();
  });
  it('renders notifications list correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      getByText = _render2.getByText,
      findByText = _render2.findByText;
    yield findByText('알림');
    yield findByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.');
    expect(getByText('알림')).toBeTruthy();
    expect(getByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.')).toBeTruthy();
    expect(getByText('김철수님이 회원님의 게시물에 댓글을 남겼습니다.')).toBeTruthy();
    expect(getByText('행복 챌린지가 시작되었습니다.')).toBeTruthy();
  }));
  it('shows empty state when no notifications', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications = jest.fn().mockResolvedValue({
      data: {
        data: [],
        pagination: {
          page: 1,
          limit: 20,
          total: 0
        }
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      findByText = _render3.findByText;
    yield findByText('알림이 없습니다.');
  }));
  it('marks notification as read when clicked', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      findByText = _render4.findByText;
    var notification = yield findByText('홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.');
    _reactNative.fireEvent.press(notification);
    expect(_notificationService.default.markAsRead).toHaveBeenCalledWith(1);
  }));
  it('marks all notifications as read', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      findByText = _render5.findByText;
    var markAllButton = yield findByText('모두 읽음');
    _reactNative.fireEvent.press(markAllButton);
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');
  }));
  it('handles error during loading', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications = jest.fn().mockRejectedValue(new Error('네트워크 오류'));
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      findByText = _render6.findByText;
    yield findByText('알림을 불러오는 중 오류가 발생했습니다.');
    yield findByText('다시 시도');
  }));
  it('handles refresh functionality', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      findByText = _render7.findByText;
    var markAllReadButton = yield findByText('모두 읽음');
    _reactNative.fireEvent.press(markAllReadButton);
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,