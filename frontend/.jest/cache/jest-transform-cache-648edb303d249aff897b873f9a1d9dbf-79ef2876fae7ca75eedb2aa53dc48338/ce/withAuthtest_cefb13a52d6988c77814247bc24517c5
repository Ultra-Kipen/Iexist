211d8ef313cee3965880930e1f8effe8
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn()
  };
});
_getJestObj().mock("../../src/store", function () {
  return {
    useStore: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _withAuth = require("../../src/hoc/withAuth");
var _native = require("@react-navigation/native");
var _store = require("../../src/store");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  return (0, _jsxRuntime.jsx)(_reactNative.Text, {
    testID: "authenticated-component",
    children: "\uC778\uC99D\uB41C \uCEF4\uD3EC\uB10C\uD2B8"
  });
};
var AuthenticatedComponent = (0, _withAuth.withAuth)(TestComponent);
describe('withAuth HOC', function () {
  var mockNavigate = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
    _native.useNavigation.mockReturnValue({
      navigate: mockNavigate
    });
  });
  test('인증된 경우 컴포넌트가 렌더링되어야 함', function () {
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: true
      }
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AuthenticatedComponent, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('authenticated-component')).toBeTruthy();
    expect(mockNavigate).not.toHaveBeenCalled();
  });
  test('인증되지 않은 경우 로그인 화면으로 네비게이션되어야 함', function () {
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: false
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AuthenticatedComponent, {})),
      queryByTestId = _render2.queryByTestId;
    expect(mockNavigate).toHaveBeenCalledWith('Login');
    expect(queryByTestId('authenticated-component')).toBeNull();
  });
  test('HOC가 displayName을 올바르게 설정해야 함', function () {
    expect(AuthenticatedComponent.displayName).toBe('withAuth(TestComponent)');
  });
  test('isAuthenticated 상태가 변경될 때 컴포넌트가 적절하게 리렌더링되어야 함', function () {
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: false
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(AuthenticatedComponent, {})),
      queryByTestId = _render3.queryByTestId,
      rerender = _render3.rerender;
    expect(queryByTestId('authenticated-component')).toBeNull();
    expect(mockNavigate).toHaveBeenCalledWith('Login');
    _store.useStore.mockReturnValue({
      state: {
        isAuthenticated: true
      }
    });
    rerender((0, _jsxRuntime.jsx)(AuthenticatedComponent, {}));
    expect(queryByTestId('authenticated-component')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwidXNlU3RvcmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl93aXRoQXV0aCIsIl9uYXRpdmUiLCJfc3RvcmUiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiVGVzdENvbXBvbmVudCIsImpzeCIsIlRleHQiLCJ0ZXN0SUQiLCJjaGlsZHJlbiIsIkF1dGhlbnRpY2F0ZWRDb21wb25lbnQiLCJ3aXRoQXV0aCIsImRlc2NyaWJlIiwibW9ja05hdmlnYXRlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJuYXZpZ2F0ZSIsInRlc3QiLCJzdGF0ZSIsImlzQXV0aGVudGljYXRlZCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiX3JlbmRlcjIiLCJxdWVyeUJ5VGVzdElkIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJ0b0JlTnVsbCIsImRpc3BsYXlOYW1lIiwidG9CZSIsIl9yZW5kZXIzIiwicmVyZW5kZXIiXSwic291cmNlcyI6WyJ3aXRoQXV0aC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIFRleHQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IHdpdGhBdXRoIH0gZnJvbSAnLi4vLi4vc3JjL2hvYy93aXRoQXV0aCc7XHJcbmltcG9ydCB7IHVzZU5hdmlnYXRpb24gfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4uLy4uL3NyYy9zdG9yZSc7XHJcblxyXG4vLyB1c2VOYXZpZ2F0aW9uIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XHJcbiAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLFxyXG59KSk7XHJcblxyXG4vLyB1c2VTdG9yZSDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc3RvcmUnLCAoKSA9PiAoe1xyXG4gIHVzZVN0b3JlOiBqZXN0LmZuKCksXHJcbn0pKTtcclxuXHJcbi8vIO2FjOyKpO2KuCDsu7Ttj6zrhIztirgg7KCV7J2YIChSZWFjdCBOYXRpdmUgVGV4dCDsp4HsoJEg7IKs7JqpKVxyXG5jb25zdCBUZXN0Q29tcG9uZW50ID0gKCkgPT4gPFRleHQgdGVzdElEPVwiYXV0aGVudGljYXRlZC1jb21wb25lbnRcIj7snbjspp3rkJwg7Lu07Y+s64SM7Yq4PC9UZXh0PjtcclxuY29uc3QgQXV0aGVudGljYXRlZENvbXBvbmVudCA9IHdpdGhBdXRoKFRlc3RDb21wb25lbnQpO1xyXG5cclxuZGVzY3JpYmUoJ3dpdGhBdXRoIEhPQycsICgpID0+IHtcclxuICBjb25zdCBtb2NrTmF2aWdhdGUgPSBqZXN0LmZuKCk7XHJcbiAgXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgICh1c2VOYXZpZ2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IG1vY2tOYXZpZ2F0ZSxcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCfsnbjspp3rkJwg6rK97JqwIOy7tO2PrOuEjO2KuOqwgCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgLy8g7J247Kad65CcIOyDge2DnOuhnCDrqqjtgrlcclxuICAgICh1c2VTdG9yZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIHN0YXRlOiB7IGlzQXV0aGVudGljYXRlZDogdHJ1ZSB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKDxBdXRoZW50aWNhdGVkQ29tcG9uZW50IC8+KTtcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnYXV0aGVudGljYXRlZC1jb21wb25lbnQnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KG1vY2tOYXZpZ2F0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgn7J247Kad65CY7KeAIOyViuydgCDqsr3smrAg66Gc6re47J24IO2ZlOuptOycvOuhnCDrhKTruYTqsozsnbTshZjrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgLy8g7J247Kad65CY7KeAIOyViuydgCDsg4Htg5zroZwg66qo7YK5XHJcbiAgICAodXNlU3RvcmUgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBzdGF0ZTogeyBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQgfSA9IHJlbmRlcig8QXV0aGVudGljYXRlZENvbXBvbmVudCAvPik7XHJcbiAgICBcclxuICAgIGV4cGVjdChtb2NrTmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdMb2dpbicpO1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2F1dGhlbnRpY2F0ZWQtY29tcG9uZW50JykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ0hPQ+qwgCBkaXNwbGF5TmFtZeydhCDsmKzrsJTrpbTqsowg7ISk7KCV7ZW07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGV4cGVjdChBdXRoZW50aWNhdGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lKS50b0JlKCd3aXRoQXV0aChUZXN0Q29tcG9uZW50KScpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KCdpc0F1dGhlbnRpY2F0ZWQg7IOB7YOc6rCAIOuzgOqyveuQoCDrlYwg7Lu07Y+s64SM7Yq46rCAIOyggeygiO2VmOqyjCDrpqzroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgLy8g7LKY7J2M7JeQ64qUIOyduOymneuQmOyngCDslYrsnYAg7IOB7YOcXHJcbiAgICAodXNlU3RvcmUgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBzdGF0ZTogeyBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXN0SWQsIHJlcmVuZGVyIH0gPSByZW5kZXIoPEF1dGhlbnRpY2F0ZWRDb21wb25lbnQgLz4pO1xyXG4gICAgZXhwZWN0KHF1ZXJ5QnlUZXN0SWQoJ2F1dGhlbnRpY2F0ZWQtY29tcG9uZW50JykpLnRvQmVOdWxsKCk7XHJcbiAgICBleHBlY3QobW9ja05hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnTG9naW4nKTtcclxuXHJcbiAgICAvLyDsnbjspp3rkJwg7IOB7YOc66GcIOuzgOqyvVxyXG4gICAgKHVzZVN0b3JlIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgc3RhdGU6IHsgaXNBdXRoZW50aWNhdGVkOiB0cnVlIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXJlbmRlcig8QXV0aGVudGljYXRlZENvbXBvbmVudCAvPik7XHJcbiAgICBleHBlY3QocXVlcnlCeVRlc3RJZCgnYXV0aGVudGljYXRlZC1jb21wb25lbnQnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQU87SUFDM0NDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDekIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISixXQUFBLEdBQUtDLElBQUksb0JBQW9CO0VBQUEsT0FBTztJQUNsQ0ksUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNwQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUUsc0JBQUEsR0FBQUMsT0FBQTtBQWRKLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLE1BQUEsR0FBQUwsT0FBQTtBQUEyQyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBUCxZQUFBO0VBQUEsSUFBQWMsUUFBQSxHQUFBUCxPQUFBO0lBQUFKLElBQUEsR0FBQVcsUUFBQSxDQUFBWCxJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQWEzQyxJQUFNWSxhQUFhLEdBQUcsU0FBaEJBLGFBQWFBLENBQUE7RUFBQSxPQUFTLElBQUFGLFdBQUEsQ0FBQUcsR0FBQSxFQUFDUCxZQUFBLENBQUFRLElBQUk7SUFBQ0MsTUFBTSxFQUFDLHlCQUF5QjtJQUFBQyxRQUFBLEVBQUM7RUFBUSxDQUFNLENBQUM7QUFBQTtBQUNsRixJQUFNQyxzQkFBc0IsR0FBRyxJQUFBQyxrQkFBUSxFQUFDTixhQUFhLENBQUM7QUFFdERPLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM3QixJQUFNQyxZQUFZLEdBQUdwQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0VBRTlCb0IsVUFBVSxDQUFDLFlBQU07SUFDZnJCLElBQUksQ0FBQ3NCLGFBQWEsQ0FBQyxDQUFDO0lBQ25CdkIscUJBQWEsQ0FBZXdCLGVBQWUsQ0FBQztNQUMzQ0MsUUFBUSxFQUFFSjtJQUNaLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGSyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsWUFBTTtJQUVqQ3ZCLGVBQVEsQ0FBZXFCLGVBQWUsQ0FBQztNQUN0Q0csS0FBSyxFQUFFO1FBQUVDLGVBQWUsRUFBRTtNQUFLO0lBQ2pDLENBQUMsQ0FBQztJQUVGLElBQUFDLE9BQUEsR0FBd0IsSUFBQUMsbUJBQU0sRUFBQyxJQUFBbkIsV0FBQSxDQUFBRyxHQUFBLEVBQUNJLHNCQUFzQixJQUFFLENBQUMsQ0FBQztNQUFsRGEsV0FBVyxHQUFBRixPQUFBLENBQVhFLFdBQVc7SUFDbkJDLE1BQU0sQ0FBQ0QsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7SUFDM0RELE1BQU0sQ0FBQ1gsWUFBWSxDQUFDLENBQUNhLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQztFQUM3QyxDQUFDLENBQUM7RUFFRlQsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLFlBQU07SUFFMUN2QixlQUFRLENBQWVxQixlQUFlLENBQUM7TUFDdENHLEtBQUssRUFBRTtRQUFFQyxlQUFlLEVBQUU7TUFBTTtJQUNsQyxDQUFDLENBQUM7SUFFRixJQUFBUSxRQUFBLEdBQTBCLElBQUFOLG1CQUFNLEVBQUMsSUFBQW5CLFdBQUEsQ0FBQUcsR0FBQSxFQUFDSSxzQkFBc0IsSUFBRSxDQUFDLENBQUM7TUFBcERtQixhQUFhLEdBQUFELFFBQUEsQ0FBYkMsYUFBYTtJQUVyQkwsTUFBTSxDQUFDWCxZQUFZLENBQUMsQ0FBQ2lCLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztJQUNsRE4sTUFBTSxDQUFDSyxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDRSxRQUFRLENBQUMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRmIsSUFBSSxDQUFDLCtCQUErQixFQUFFLFlBQU07SUFDMUNNLE1BQU0sQ0FBQ2Qsc0JBQXNCLENBQUNzQixXQUFXLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLHlCQUF5QixDQUFDO0VBQzVFLENBQUMsQ0FBQztFQUVGZixJQUFJLENBQUMsZ0RBQWdELEVBQUUsWUFBTTtJQUUxRHZCLGVBQVEsQ0FBZXFCLGVBQWUsQ0FBQztNQUN0Q0csS0FBSyxFQUFFO1FBQUVDLGVBQWUsRUFBRTtNQUFNO0lBQ2xDLENBQUMsQ0FBQztJQUVGLElBQUFjLFFBQUEsR0FBb0MsSUFBQVosbUJBQU0sRUFBQyxJQUFBbkIsV0FBQSxDQUFBRyxHQUFBLEVBQUNJLHNCQUFzQixJQUFFLENBQUMsQ0FBQztNQUE5RG1CLGFBQWEsR0FBQUssUUFBQSxDQUFiTCxhQUFhO01BQUVNLFFBQVEsR0FBQUQsUUFBQSxDQUFSQyxRQUFRO0lBQy9CWCxNQUFNLENBQUNLLGFBQWEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUNFLFFBQVEsQ0FBQyxDQUFDO0lBQzNEUCxNQUFNLENBQUNYLFlBQVksQ0FBQyxDQUFDaUIsb0JBQW9CLENBQUMsT0FBTyxDQUFDO0lBR2pEbkMsZUFBUSxDQUFlcUIsZUFBZSxDQUFDO01BQ3RDRyxLQUFLLEVBQUU7UUFBRUMsZUFBZSxFQUFFO01BQUs7SUFDakMsQ0FBQyxDQUFDO0lBRUZlLFFBQVEsQ0FBQyxJQUFBaEMsV0FBQSxDQUFBRyxHQUFBLEVBQUNJLHNCQUFzQixJQUFFLENBQUMsQ0FBQztJQUNwQ2MsTUFBTSxDQUFDSyxhQUFhLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDSixVQUFVLENBQUMsQ0FBQztFQUMvRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=