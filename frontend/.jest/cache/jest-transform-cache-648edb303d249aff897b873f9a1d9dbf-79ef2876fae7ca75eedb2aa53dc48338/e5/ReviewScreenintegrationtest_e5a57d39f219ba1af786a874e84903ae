2c2c0224f54d5951b0941ea0fe744d47
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#000',
        background: '#fff'
      }
    }),
    SegmentedButtons: 'SegmentedButtons',
    Card: 'Card',
    Button: 'Button',
    Text: 'Text',
    ActivityIndicator: 'ActivityIndicator'
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getEmotionStats: jest.fn().mockResolvedValue({
      emotions: [{
        id: 1,
        name: '행복',
        count: 5,
        color: '#FFD700'
      }, {
        id: 5,
        name: '슬픔',
        count: 2,
        color: '#4682B4'
      }, {
        id: 6,
        name: '불안',
        count: 1,
        color: '#DDA0DD'
      }],
      mostFrequent: {
        id: 1,
        name: '행복',
        count: 5,
        color: '#FFD700'
      }
    }),
    getEmotionHistory: jest.fn().mockResolvedValue([{
      date: '2025-05-01',
      emotions: [{
        id: 1,
        name: '행복',
        color: '#FFD700'
      }]
    }, {
      date: '2025-05-02',
      emotions: [{
        id: 5,
        name: '슬픔',
        color: '#4682B4'
      }]
    }, {
      date: '2025-05-03',
      emotions: [{
        id: 1,
        name: '행복',
        color: '#FFD700'
      }]
    }])
  };
});
_getJestObj().mock("../../../src/services/api/postService", function () {
  return {
    getUserPosts: jest.fn().mockResolvedValue([{
      id: 1,
      imageUrl: 'https://example.com/1.jpg',
      content: '좋은 하루',
      createdAt: '2025-05-03'
    }, {
      id: 2,
      imageUrl: 'https://example.com/2.jpg',
      content: '힘든 하루',
      createdAt: '2025-05-02'
    }, {
      id: 3,
      imageUrl: 'https://example.com/3.jpg',
      content: '평범한 하루',
      createdAt: '2025-05-01'
    }, {
      id: 4,
      imageUrl: 'https://example.com/4.jpg',
      content: '즐거운 하루',
      createdAt: '2025-04-30'
    }, {
      id: 5,
      imageUrl: 'https://example.com/5.jpg',
      content: '지친 하루',
      createdAt: '2025-04-29'
    }, {
      id: 6,
      imageUrl: 'https://example.com/6.jpg',
      content: '특별한 하루',
      createdAt: '2025-04-28'
    }])
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    })
  };
});
_getJestObj().mock('react', function () {
  return Object.assign({}, jest.requireActual('react'), {
    useState: function useState() {
      var _mockUseState = mockUseState.apply(void 0, arguments),
        _mockUseState2 = (0, _slicedToArray2.default)(_mockUseState, 2),
        state = _mockUseState2[0],
        setState = _mockUseState2[1];
      return [state, setState];
    },
    useEffect: mockUseEffect
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockUseState = jest.fn();
var mockUseEffect = jest.fn();
describe('ReviewScreen 통합 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('컴포넌트가 렌더링되어야 함', function () {
    mockUseState.mockReturnValueOnce(['weekly', jest.fn()]).mockReturnValueOnce([[], jest.fn()]).mockReturnValueOnce([true, jest.fn()]).mockReturnValueOnce([null, jest.fn()]);
    expect(function () {
      return (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {}));
    }).not.toThrow();
  });
  it('서비스 모듈을 올바르게 호출해야 함', function () {
    var emotionService = require("../../../src/services/api/emotionService");
    var postService = require("../../../src/services/api/postService");
    var mockLoadData = function mockLoadData() {
      postService.getUserPosts({
        period: 'weekly',
        limit: 20
      });
      emotionService.getEmotionStats({
        period: 'weekly'
      });
    };
    mockLoadData();
    expect(postService.getUserPosts).toHaveBeenCalledWith({
      period: 'weekly',
      limit: 20
    });
    expect(emotionService.getEmotionStats).toHaveBeenCalledWith({
      period: 'weekly'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,