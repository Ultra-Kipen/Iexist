{"version":3,"names":["_getJestObj","mock","useTheme","jest","fn","mockReturnValue","colors","primary","background","SegmentedButtons","Card","Button","Text","ActivityIndicator","getEmotionStats","mockResolvedValue","emotions","id","name","count","color","mostFrequent","getEmotionHistory","date","getUserPosts","imageUrl","content","createdAt","useNavigation","navigate","goBack","useRoute","params","Object","assign","requireActual","useState","_mockUseState","mockUseState","apply","arguments","_mockUseState2","_slicedToArray2","default","state","setState","useEffect","mockUseEffect","_interopRequireDefault","require","_react","_reactNative","_ReviewScreen","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","it","mockReturnValueOnce","expect","render","jsx","not","toThrow","emotionService","postService","mockLoadData","period","limit","toHaveBeenCalledWith"],"sources":["ReviewScreen.integration.test.tsx"],"sourcesContent":["// root/frontend/tests/integration/screens/ReviewScreen.integration.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport ReviewScreen from '../../../src/screens/ReviewScreen';\r\n\r\n// paper 컴포넌트 모킹\r\njest.mock('react-native-paper', () => ({\r\n  useTheme: jest.fn().mockReturnValue({\r\n    colors: { primary: '#000', background: '#fff' }\r\n  }),\r\n  SegmentedButtons: 'SegmentedButtons',\r\n  Card: 'Card',\r\n  Button: 'Button',\r\n  Text: 'Text',\r\n  ActivityIndicator: 'ActivityIndicator'\r\n}));\r\n\r\n// API 서비스 모킹 (올바른 경로로 수정)\r\njest.mock('../../../src/services/api/emotionService', () => ({\r\n  getEmotionStats: jest.fn().mockResolvedValue({\r\n    emotions: [\r\n      { id: 1, name: '행복', count: 5, color: '#FFD700' },\r\n      { id: 5, name: '슬픔', count: 2, color: '#4682B4' },\r\n      { id: 6, name: '불안', count: 1, color: '#DDA0DD' }\r\n    ],\r\n    mostFrequent: { id: 1, name: '행복', count: 5, color: '#FFD700' }\r\n  }),\r\n  getEmotionHistory: jest.fn().mockResolvedValue([\r\n    { date: '2025-05-01', emotions: [{ id: 1, name: '행복', color: '#FFD700' }] },\r\n    { date: '2025-05-02', emotions: [{ id: 5, name: '슬픔', color: '#4682B4' }] },\r\n    { date: '2025-05-03', emotions: [{ id: 1, name: '행복', color: '#FFD700' }] }\r\n  ])\r\n}));\r\n\r\njest.mock('../../../src/services/api/postService', () => ({\r\n  getUserPosts: jest.fn().mockResolvedValue([\r\n    { id: 1, imageUrl: 'https://example.com/1.jpg', content: '좋은 하루', createdAt: '2025-05-03' },\r\n    { id: 2, imageUrl: 'https://example.com/2.jpg', content: '힘든 하루', createdAt: '2025-05-02' },\r\n    { id: 3, imageUrl: 'https://example.com/3.jpg', content: '평범한 하루', createdAt: '2025-05-01' },\r\n    { id: 4, imageUrl: 'https://example.com/4.jpg', content: '즐거운 하루', createdAt: '2025-04-30' },\r\n    { id: 5, imageUrl: 'https://example.com/5.jpg', content: '지친 하루', createdAt: '2025-04-29' },\r\n    { id: 6, imageUrl: 'https://example.com/6.jpg', content: '특별한 하루', createdAt: '2025-04-28' }\r\n  ])\r\n}));\r\n\r\n// 네비게이션 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: jest.fn().mockReturnValue({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn()\r\n  }),\r\n  useRoute: jest.fn().mockReturnValue({\r\n    params: {}\r\n  })\r\n}));\r\n\r\n// React hooks 모킹을 위한 설정\r\nconst mockUseState = jest.fn();\r\nconst mockUseEffect = jest.fn();\r\n\r\njest.mock('react', () => ({\r\n  ...jest.requireActual('react'),\r\n  useState: (...args) => {\r\n    const [state, setState] = mockUseState(...args);\r\n    return [state, setState];\r\n  },\r\n  useEffect: mockUseEffect\r\n}));\r\n\r\n// 간단한 테스트 수행\r\ndescribe('ReviewScreen 통합 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('컴포넌트가 렌더링되어야 함', () => {\r\n    // mockUseState가 여러 번 호출될 때 다른 값 반환하도록 설정\r\n    mockUseState\r\n      .mockReturnValueOnce(['weekly', jest.fn()]) // period\r\n      .mockReturnValueOnce([[], jest.fn()]) // posts\r\n      .mockReturnValueOnce([true, jest.fn()]) // loading\r\n      .mockReturnValueOnce([null, jest.fn()]); // error\r\n\r\n    expect(() => render(<ReviewScreen />)).not.toThrow();\r\n  });\r\n\r\n  it('서비스 모듈을 올바르게 호출해야 함', () => {\r\n    const emotionService = require('../../../src/services/api/emotionService');\r\n    const postService = require('../../../src/services/api/postService');\r\n    \r\n    // 모형 함수 생성\r\n    const mockLoadData = () => {\r\n      postService.getUserPosts({\r\n        period: 'weekly',\r\n        limit: 20\r\n      });\r\n      emotionService.getEmotionStats({\r\n        period: 'weekly'\r\n      });\r\n    };\r\n    \r\n    // 함수 실행\r\n    mockLoadData();\r\n    \r\n    // API 호출 확인\r\n    expect(postService.getUserPosts).toHaveBeenCalledWith({\r\n      period: 'weekly',\r\n      limit: 20\r\n    });\r\n    \r\n    expect(emotionService.getEmotionStats).toHaveBeenCalledWith({\r\n      period: 'weekly'\r\n    });\r\n  });\r\n\r\n  // 더 많은 테스트 케이스 추가 가능\r\n});"],"mappings":"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","ignoreList":[]}