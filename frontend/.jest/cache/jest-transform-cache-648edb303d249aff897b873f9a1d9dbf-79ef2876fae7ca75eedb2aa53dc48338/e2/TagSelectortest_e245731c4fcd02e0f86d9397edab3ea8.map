{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_TagSelector","_jsxRuntime","mockTags","id","name","describe","it","_render","render","jsx","default","tags","selectedTags","onTagSelect","jest","fn","getByText","expect","toBeTruthy","_render2","selectedTag","props","style","toContainEqual","color","fontWeight","mockOnTagSelect","_render3","tagTextElement","fireEvent","press","toHaveBeenCalled","mockOnTagCreate","_render4","allowCreation","onTagCreate","getByPlaceholderText","_render5","maxSelected","disabledTagText"],"sources":["TagSelector.test.tsx"],"sourcesContent":["// __TESTS__/components/TagSelector.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { RenderAPI } from '@testing-library/react-native';\r\nimport TagSelector from '../../src/components/TagSelector';\r\n\r\nconst mockTags = [\r\n  { id: 1, name: '일상' },\r\n  { id: 2, name: '감정' },\r\n  { id: 3, name: '고민' }\r\n];\r\n\r\ndescribe('TagSelector 컴포넌트', () => {\r\n  it('태그 목록이 올바르게 렌더링되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <TagSelector\r\n        tags={mockTags}\r\n        selectedTags={[]}\r\n        onTagSelect={jest.fn()}\r\n      />\r\n    );\r\n    \r\n    expect(getByText('일상')).toBeTruthy();\r\n    expect(getByText('감정')).toBeTruthy();\r\n    expect(getByText('고민')).toBeTruthy();\r\n  });\r\n\r\n  it('선택된 태그는 시각적으로 구분되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <TagSelector\r\n        tags={mockTags}\r\n        selectedTags={[1]}\r\n        onTagSelect={jest.fn()}\r\n      />\r\n    );\r\n    \r\n    // 수정: 직접 태그 요소를 선택\r\n    const selectedTag = getByText('일상');\r\n    expect(selectedTag.props.style).toContainEqual({\r\n      color: '#4A90E2',\r\n      fontWeight: '500',\r\n    });\r\n  });\r\n\r\n  it('태그를 클릭하면 onTagSelect 콜백이 호출되어야 합니다', () => {\r\n    const mockOnTagSelect = jest.fn();\r\n    const { getByText } = render(\r\n      <TagSelector\r\n        tags={mockTags}\r\n        selectedTags={[]}\r\n        onTagSelect={mockOnTagSelect}\r\n      />\r\n    );\r\n    \r\n    // 태그 텍스트 요소 직접 선택\r\n    const tagTextElement = getByText('감정');\r\n    fireEvent.press(tagTextElement);\r\n    expect(mockOnTagSelect).toHaveBeenCalled();\r\n  });\r\n\r\n  it('allowCreation=true일 때 태그 생성 UI가 표시되어야 합니다', () => {\r\n    const mockOnTagCreate = jest.fn();\r\n    const { getByPlaceholderText, getByText } = render(\r\n      <TagSelector\r\n        tags={mockTags}\r\n        selectedTags={[]}\r\n        onTagSelect={jest.fn()}\r\n        allowCreation={true}\r\n        onTagCreate={mockOnTagCreate}\r\n      />\r\n    );\r\n    \r\n    // 입력 필드와 추가 버튼 확인\r\n    expect(getByPlaceholderText('새 태그 입력')).toBeTruthy();\r\n    expect(getByText('추가')).toBeTruthy();\r\n  });\r\n\r\n  it('maxSelected를 초과하는 태그를 선택하려 하면 disabled 상태가 되어야 합니다', () => {\r\n    const { getByText } = render(\r\n      <TagSelector\r\n        tags={mockTags}\r\n        selectedTags={[1, 2]}\r\n        onTagSelect={jest.fn()}\r\n        maxSelected={2}\r\n      />\r\n    );\r\n    \r\n    // 마지막 태그 텍스트 선택 - 비활성화 상태인지 확인\r\n    const disabledTagText = getByText('고민');\r\n    expect(disabledTagText.props.style).toContainEqual({\r\n      color: '#999999',\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}