{"version":3,"names":["_getJestObj","mock","createPost","jest","fn","getPosts","getPostById","getMyPosts","likePost","addComment","getComments","deletePost","useAuth","isAuthenticated","isLoading","user","user_id","username","AuthProvider","_ref","children","_jsxRuntime","jsx","Fragment","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_native","_reactNativePaper","_postService","_MockScreens","_require","mockNavigation","navigate","goBack","TestWrapper","_ref2","NavigationContainer","Provider","describe","beforeEach","clearAllMocks","it","default","mockGetPostById","postService","mockResolvedValue","data","success","post","post_id","content","emotion_summary","like_count","comment_count","created_at","mockGetComments","comments","comment_id","is_anonymous","total_count","mockAddComment","message","_render","render","MockPostScreen","route","params","postId","navigation","getByTestId","getByText","expect","toBeTruthy","commentInput","fireEvent","changeText","submitButton","press","waitFor","toHaveBeenCalled","toHaveBeenCalledWith"],"sources":["postService.integration.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { Provider as PaperProvider } from 'react-native-paper';\r\nimport postService from '../../src/services/api/postService';\r\nimport { MockPostScreen } from '../mocks/MockScreens';\r\n// App 컴포넌트 직접 import 제거\r\n\r\n// 컴포넌트와 서비스의 통합을 테스트하기 위한 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  createPost: jest.fn(),\r\n  getPosts: jest.fn(),\r\n  getPostById: jest.fn(),\r\n  getMyPosts: jest.fn(),\r\n  likePost: jest.fn(),\r\n  addComment: jest.fn(),\r\n  getComments: jest.fn(),\r\n  deletePost: jest.fn()\r\n}));\r\n\r\n// 인증 컨텍스트 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: () => ({ \r\n    isAuthenticated: true, \r\n    isLoading: false,\r\n    user: { user_id: 1, username: 'testuser' }\r\n  }),\r\n  AuthProvider: ({ children }: { children: React.ReactNode }) => <>{children}</>\r\n}));\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigation = {\r\n  navigate: jest.fn(),\r\n  goBack: jest.fn()\r\n};\r\n\r\n// 테스트 컴포넌트 래퍼\r\n// 테스트 컴포넌트 래퍼\r\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <NavigationContainer>\r\n    <PaperProvider>\r\n      {children}\r\n    </PaperProvider>\r\n  </NavigationContainer>\r\n);\r\n\r\ndescribe('게시물 기능 통합 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('Mock 컴포넌트 테스트', () => {\r\n    it('게시물 상세 조회 및 댓글 작성', async () => {\r\n      const mockGetPostById = postService.getPostById as jest.Mock;\r\n      mockGetPostById.mockResolvedValue({\r\n        data: {\r\n          success: true,\r\n          post: {\r\n            post_id: 1,\r\n            content: '테스트 게시물',\r\n            emotion_summary: '행복',\r\n            like_count: 5,\r\n            comment_count: 2,\r\n            created_at: '2025-04-10T12:00:00Z'\r\n          }\r\n        }\r\n      });\r\n\r\n      const mockGetComments = postService.getComments as jest.Mock;\r\n      mockGetComments.mockResolvedValue({\r\n        data: {\r\n          success: true,\r\n          comments: [\r\n            {\r\n              comment_id: 1,\r\n              post_id: 1,\r\n              user_id: 2,\r\n              content: '너무 좋네요!',\r\n              is_anonymous: false,\r\n              created_at: '2025-04-10T13:00:00Z'\r\n            }\r\n          ],\r\n          total_count: 1\r\n        }\r\n      });\r\n\r\n      const mockAddComment = postService.addComment as jest.Mock;\r\n      mockAddComment.mockResolvedValue({\r\n        data: {\r\n          success: true,\r\n          comment_id: 2,\r\n          message: '댓글이 성공적으로 추가되었습니다.'\r\n        }\r\n      });\r\n\r\n      // Mock 게시물 상세 컴포넌트 렌더링\r\n   // Mock 게시물 상세 컴포넌트 렌더링\r\n// Mock 게시물 상세 컴포넌트 렌더링\r\nconst { getByTestId, getByText } = render(\r\n  <TestWrapper>\r\n    <MockPostScreen\r\n      route={{ params: { postId: 1 } }}\r\n      navigation={mockNavigation}\r\n    />\r\n  </TestWrapper>\r\n);\r\n\r\n// 게시물 ID가 표시되는지 확인\r\nexpect(getByText('게시물 ID: 1')).toBeTruthy();\r\n\r\n// 댓글 입력 필드 확인\r\nconst commentInput = getByTestId('comment-input');\r\nfireEvent.changeText(commentInput, '테스트 댓글입니다.');\r\n\r\n// 댓글 제출 버튼 클릭\r\nconst submitButton = getByTestId('submit-comment');\r\nfireEvent.press(submitButton);\r\n\r\n// addComment 서비스가 호출되었는지 확인\r\nawait waitFor(() => {\r\n  expect(postService.addComment).toHaveBeenCalled();\r\n  // 모의 함수에 전달된 인수 확인 (테스트 댓글이 아닌 고정된 문자열을 사용하므로 수정)\r\n  expect(postService.addComment).toHaveBeenCalledWith(1, {\r\n    content: '테스트 댓글입니다.',\r\n    is_anonymous: false\r\n  });\r\n});\r\n      // getPostById와 getComments가 호출되었는지 확인\r\n      expect(mockGetPostById).toHaveBeenCalledWith(1);\r\n      expect(mockGetComments).toHaveBeenCalledWith(1);\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}