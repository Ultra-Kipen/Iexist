c26893dec5f6266743ad7dca3a1c4df5
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    _Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return {
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee'
        }
      };
    },
    Card: function Card(props) {
      return React.createElement(View, props, props.children);
    },
    CardContent: {
      Content: function Content(props) {
        return React.createElement(View, props, props.children);
      }
    },
    TextInput: function TextInput(props) {
      return React.createElement(View, {
        testID: props.testID,
        onChangeText: props.onChangeText,
        value: props.value
      }, props.label);
    },
    Button: function Button(props) {
      return React.createElement(TouchableOpacity, {
        testID: props.testID,
        onPress: props.onPress,
        disabled: props.disabled,
        mode: props.mode
      }, props.children);
    },
    Title: function Title(props) {
      return React.createElement(_Text, {}, props.children);
    },
    Paragraph: function Paragraph(props) {
      return React.createElement(_Text, {}, props.children);
    },
    Chip: function Chip(props) {
      return React.createElement(TouchableOpacity, {
        onPress: props.onPress,
        testID: props.testID
      }, props.children);
    },
    List: {
      Section: function Section(props) {
        return React.createElement(View, {
          testID: props.testID
        }, props.children);
      },
      Item: function Item(props) {
        return React.createElement(View, {
          onPress: props.onPress
        }, [React.createElement(_Text, {
          key: 'title'
        }, props.title), props.right && props.right({})]);
      },
      Icon: function Icon() {
        return React.createElement(View, {}, null);
      }
    },
    FAB: function FAB(props) {
      return React.createElement(TouchableOpacity, {
        testID: props.testID,
        onPress: props.onPress
      }, props.icon);
    },
    ActivityIndicator: function ActivityIndicator() {
      return React.createElement(View, {
        testID: 'activity-indicator'
      });
    },
    Text: function Text(props) {
      return React.createElement(_Text, {}, props.children);
    }
  };
});
_getJestObj().mock("../../../src/services/api/postService", function () {
  return {
    likePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          message: 'success'
        }
      });
    })
  };
});
_getJestObj().mock("../../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          data: [{
            post_id: 1,
            title: '힘든 하루',
            content: '오늘은 정말 힘든 하루였어요.',
            user_id: 1,
            is_anonymous: true,
            like_count: 8,
            comment_count: 5,
            created_at: '2024-04-06T12:00:00.000Z'
          }]
        }
      });
    }),
    getBestPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          data: [{
            post_id: 3,
            title: '여러분 덕분에 이겨냈어요',
            content: '지난주에 올린 고민, 여러분의 댓글 덕분에 용기를 얻었어요.',
            like_count: 25,
            comment_count: 12
          }]
        }
      });
    }),
    createPost: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          message: '게시물이 성공적으로 등록되었습니다.'
        }
      });
    }),
    sendMessage: jest.fn(function () {
      return Promise.resolve({
        data: {
          status: 'success',
          message: '메시지가 성공적으로 전송되었습니다.'
        }
      });
    })
  };
});
_getJestObj().mock('react-native', function () {
  var reactNative = jest.genMockFromModule('react-native');
  reactNative.Alert = {
    alert: jest.fn()
  };
  return reactNative;
});
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    Alert: Object.assign({}, RN.Alert, {
      alert: jest.fn()
    })
  });
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn(function () {
      return mockNavigation;
    }),
    useRoute: jest.fn(function () {
      return {
        params: {}
      };
    }),
    useIsFocused: jest.fn(function () {
      return true;
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../../src/screens/ComfortScreen"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(console, 'error').mockImplementation(function () {});
jest.spyOn(console, 'warn').mockImplementation(function () {});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn(),
  setOptions: jest.fn()
};
describe('ComfortScreen 단위 테스트', function () {
  var comfortWallService = require("../../../src/services/api/comfortWallService");
  var postService = require("../../../src/services/api/postService");
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('화면 렌더링 확인', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      toJSON = _render.toJSON;
    expect(toJSON()).not.toBeNull();
  });
  test('API 서비스 함수 호출 확인', function () {
    expect(typeof comfortWallService.getPosts).toBe('function');
    expect(typeof comfortWallService.getBestPosts).toBe('function');
    expect(typeof comfortWallService.createPost).toBe('function');
    expect(typeof comfortWallService.sendMessage).toBe('function');
  });
  test('getPosts API가 올바른 데이터 구조 반환', (0, _asyncToGenerator2.default)(function* () {
    var result = yield comfortWallService.getPosts();
    expect(result.data.status).toBe('success');
    expect(Array.isArray(result.data.data)).toBe(true);
    expect(result.data.data.length).toBeGreaterThan(0);
    var post = result.data.data[0];
    expect(post).toHaveProperty('post_id');
    expect(post).toHaveProperty('title');
    expect(post).toHaveProperty('content');
  }));
  test('getBestPosts API가 올바른 데이터 구조 반환', (0, _asyncToGenerator2.default)(function* () {
    var result = yield comfortWallService.getBestPosts();
    expect(result.data.status).toBe('success');
    expect(Array.isArray(result.data.data)).toBe(true);
    if (result.data.data.length > 0) {
      var post = result.data.data[0];
      expect(post).toHaveProperty('post_id');
      expect(post).toHaveProperty('title');
      expect(post).toHaveProperty('content');
    }
  }));
  test('createPost 함수 호출 테스트', (0, _asyncToGenerator2.default)(function* () {
    var postData = {
      title: '테스트 제목',
      content: '테스트 내용',
      is_anonymous: true
    };
    yield comfortWallService.createPost(postData);
    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);
  }));
  test('sendMessage 함수 호출 테스트', (0, _asyncToGenerator2.default)(function* () {
    var postId = 1;
    var messageData = {
      message: '응원 메시지',
      is_anonymous: true
    };
    yield comfortWallService.sendMessage(postId, messageData);
    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(postId, messageData);
  }));
  test('handlePost 함수는 빈 필드를 검증해야 함', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {}));
    var mockHandlePost = function () {
      var _ref6 = (0, _asyncToGenerator2.default)(function* (title, content, isAnonymous) {
        if (!title || !content) {
          _reactNative2.Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.createPost({
            title: title,
            content: content,
            is_anonymous: isAnonymous
          });
          _reactNative2.Alert.alert('성공', '게시물이 등록되었습니다.');
          return true;
        } catch (error) {
          var _error$response;
          _reactNative2.Alert.alert('오류', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '게시물 등록 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockHandlePost(_x, _x2, _x3) {
        return _ref6.apply(this, arguments);
      };
    }();
    yield mockHandlePost('', '', true);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(comfortWallService.createPost).not.toHaveBeenCalled();
  }));
  test('handlePost 함수는 유효한 데이터로 API를 호출해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockHandlePost = function () {
      var _ref8 = (0, _asyncToGenerator2.default)(function* (title, content, isAnonymous) {
        if (!title || !content) {
          _reactNative2.Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.createPost({
            title: title,
            content: content,
            is_anonymous: isAnonymous
          });
          _reactNative2.Alert.alert('성공', '게시물이 등록되었습니다.');
          return true;
        } catch (error) {
          var _error$response2;
          _reactNative2.Alert.alert('오류', ((_error$response2 = error.response) == null || (_error$response2 = _error$response2.data) == null ? void 0 : _error$response2.message) || '게시물 등록 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockHandlePost(_x4, _x5, _x6) {
        return _ref8.apply(this, arguments);
      };
    }();
    yield mockHandlePost('테스트 제목', '테스트 내용', true);
    expect(comfortWallService.createPost).toHaveBeenCalledWith({
      title: '테스트 제목',
      content: '테스트 내용',
      is_anonymous: true
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.');
  }));
  test('handlePost 함수는 API 오류를 처리해야 함', (0, _asyncToGenerator2.default)(function* () {
    comfortWallService.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var mockHandlePost = function () {
      var _ref10 = (0, _asyncToGenerator2.default)(function* (title, content, isAnonymous) {
        if (!title || !content) {
          _reactNative2.Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.createPost({
            title: title,
            content: content,
            is_anonymous: isAnonymous
          });
          _reactNative2.Alert.alert('성공', '게시물이 등록되었습니다.');
          return true;
        } catch (error) {
          var _error$response3;
          _reactNative2.Alert.alert('오류', ((_error$response3 = error.response) == null || (_error$response3 = _error$response3.data) == null ? void 0 : _error$response3.message) || '게시물 등록 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockHandlePost(_x7, _x8, _x9) {
        return _ref10.apply(this, arguments);
      };
    }();
    yield mockHandlePost('테스트 제목', '테스트 내용', true);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
  }));
  test('handleLike 함수는 API를 호출하고 게시물을 새로고침해야 함', (0, _asyncToGenerator2.default)(function* () {
    postService.likePost.mockResolvedValueOnce({
      data: {
        message: 'success'
      }
    });
    var mockHandleLike = function () {
      var _ref12 = (0, _asyncToGenerator2.default)(function* (postId) {
        try {
          yield postService.likePost(postId);
          yield comfortWallService.getPosts();
          return true;
        } catch (error) {
          _reactNative2.Alert.alert('오류', '좋아요 처리 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockHandleLike(_x10) {
        return _ref12.apply(this, arguments);
      };
    }();
    yield mockHandleLike(1);
    expect(postService.likePost).toHaveBeenCalledWith(1);
    expect(comfortWallService.getPosts).toHaveBeenCalled();
  }));
  test('sendMessage 함수는 유효한 데이터로 API를 호출해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockSendMessage = function () {
      var _ref14 = (0, _asyncToGenerator2.default)(function* (postId, message, isAnonymous) {
        if (!message) {
          _reactNative2.Alert.alert('알림', '메시지 내용을 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.sendMessage(postId, {
            message: message,
            is_anonymous: isAnonymous
          });
          _reactNative2.Alert.alert('성공', '메시지가 전송되었습니다.');
          return true;
        } catch (error) {
          var _error$response4;
          _reactNative2.Alert.alert('오류', ((_error$response4 = error.response) == null || (_error$response4 = _error$response4.data) == null ? void 0 : _error$response4.message) || '메시지 전송 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockSendMessage(_x11, _x12, _x13) {
        return _ref14.apply(this, arguments);
      };
    }();
    yield mockSendMessage(1, '힘내세요! 응원합니다.', true);
    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(1, {
      message: '힘내세요! 응원합니다.',
      is_anonymous: true
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.');
  }));
  test('sendMessage 함수는 빈 메시지를 검증해야 함', (0, _asyncToGenerator2.default)(function* () {
    var mockSendMessage = function () {
      var _ref16 = (0, _asyncToGenerator2.default)(function* (postId, message, isAnonymous) {
        if (!message) {
          _reactNative2.Alert.alert('알림', '메시지 내용을 입력해주세요.');
          return false;
        }
        try {
          yield comfortWallService.sendMessage(postId, {
            message: message,
            is_anonymous: isAnonymous
          });
          _reactNative2.Alert.alert('성공', '메시지가 전송되었습니다.');
          return true;
        } catch (error) {
          var _error$response5;
          _reactNative2.Alert.alert('오류', ((_error$response5 = error.response) == null || (_error$response5 = _error$response5.data) == null ? void 0 : _error$response5.message) || '메시지 전송 중 오류가 발생했습니다.');
          return false;
        }
      });
      return function mockSendMessage(_x14, _x15, _x16) {
        return _ref16.apply(this, arguments);
      };
    }();
    yield mockSendMessage(1, '', true);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');
    expect(comfortWallService.sendMessage).not.toHaveBeenCalled();
  }));
  test('API 오류 발생 시 폼 입력이 유지되어야 함', (0, _asyncToGenerator2.default)(function* () {
    comfortWallService.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var mockHandlePost = function () {
      var _ref18 = (0, _asyncToGenerator2.default)(function* (title, content, isAnonymous, formState) {
        if (!title || !content) {
          _reactNative2.Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
          return Object.assign({}, formState);
        }
        try {
          yield comfortWallService.createPost({
            title: title,
            content: content,
            is_anonymous: isAnonymous
          });
          _reactNative2.Alert.alert('성공', '게시물이 등록되었습니다.');
          return {
            title: '',
            content: ''
          };
        } catch (error) {
          var _error$response6;
          _reactNative2.Alert.alert('오류', ((_error$response6 = error.response) == null || (_error$response6 = _error$response6.data) == null ? void 0 : _error$response6.message) || '게시물 등록 중 오류가 발생했습니다.');
          return Object.assign({}, formState);
        }
      });
      return function mockHandlePost(_x17, _x18, _x19, _x20) {
        return _ref18.apply(this, arguments);
      };
    }();
    var initialFormState = {
      title: '테스트 제목',
      content: '테스트 내용'
    };
    var resultState = yield mockHandlePost(initialFormState.title, initialFormState.content, true, initialFormState);
    expect(resultState).toEqual(initialFormState);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,