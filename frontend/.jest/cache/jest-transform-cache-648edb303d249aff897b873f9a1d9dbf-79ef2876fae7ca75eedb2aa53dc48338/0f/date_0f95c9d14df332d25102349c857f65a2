f73ca1cb563a5cdf915eb99fe3b27d9b
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseDate = exports.isYesterday = exports.isWithinRange = exports.isToday = exports.getRelativeTime = exports.getLastDayOfMonth = exports.getFirstDayOfMonth = exports.getDaysBetween = exports.getDayOfWeek = exports.getDateRange = exports.formatDatetime = exports.formatDateKorean = exports.formatDate = exports.default = exports.addWeeks = exports.addMonths = exports.addDays = void 0;
var formatDate = exports.formatDate = function formatDate(date) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'yyyy.MM.dd';
  var d = typeof date === 'string' ? new Date(date) : date;
  var year = d.getFullYear();
  var month = String(d.getMonth() + 1).padStart(2, '0');
  var day = String(d.getDate()).padStart(2, '0');
  var result = format;
  result = result.replace('yyyy', year.toString());
  result = result.replace('MM', month);
  result = result.replace('dd', day);
  return result;
};
var formatDatetime = exports.formatDatetime = function formatDatetime(date) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'yyyy.MM.dd HH:mm';
  var d = typeof date === 'string' ? new Date(date) : date;
  var year = d.getFullYear();
  var month = String(d.getMonth() + 1).padStart(2, '0');
  var day = String(d.getDate()).padStart(2, '0');
  var hours = String(d.getHours()).padStart(2, '0');
  var hours12 = String(d.getHours() % 12 || 12).padStart(2, '0');
  var minutes = String(d.getMinutes()).padStart(2, '0');
  var ampm = d.getHours() >= 12 ? 'PM' : 'AM';
  var result = format;
  result = result.replace('yyyy', year.toString());
  result = result.replace('MM', month);
  result = result.replace('dd', day);
  result = result.replace('HH', hours);
  result = result.replace('hh', hours12);
  result = result.replace('mm', minutes);
  result = result.replace('a', ampm);
  return result;
};
var getRelativeTime = exports.getRelativeTime = function getRelativeTime(date) {
  var d = typeof date === 'string' ? new Date(date) : date;
  var now = new Date();
  var diffMs = now.getTime() - d.getTime();
  var diffSec = Math.floor(diffMs / 1000);
  if (diffSec < 60) {
    return '방금 전';
  }
  var diffMin = Math.floor(diffSec / 60);
  if (diffMin < 60) {
    return `${diffMin}분 전`;
  }
  var diffHour = Math.floor(diffMin / 60);
  if (diffHour < 24) {
    return `${diffHour}시간 전`;
  }
  var diffDay = Math.floor(diffHour / 24);
  if (diffDay < 7) {
    return `${diffDay}일 전`;
  }
  return formatDate(d);
};
var isToday = exports.isToday = function isToday(date) {
  var d = typeof date === 'string' ? new Date(date) : date;
  var today = new Date();
  return d.getDate() === today.getDate() && d.getMonth() === today.getMonth() && d.getFullYear() === today.getFullYear();
};
var isYesterday = exports.isYesterday = function isYesterday(date) {
  var d = typeof date === 'string' ? new Date(date) : date;
  var yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  return d.getDate() === yesterday.getDate() && d.getMonth() === yesterday.getMonth() && d.getFullYear() === yesterday.getFullYear();
};
var parseDate = exports.parseDate = function parseDate(dateStr) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'yyyy-MM-dd';
  var year = 0,
    month = 0,
    day = 0;
  if (format === 'yyyy-MM-dd') {
    var parts = dateStr.split('-');
    year = parseInt(parts[0]);
    month = parseInt(parts[1]) - 1;
    day = parseInt(parts[2]);
  } else if (format === 'MM/dd/yyyy') {
    var _parts = dateStr.split('/');
    month = parseInt(_parts[0]) - 1;
    day = parseInt(_parts[1]);
    year = parseInt(_parts[2]);
  } else if (format === 'dd.MM.yyyy') {
    var _parts2 = dateStr.split('.');
    day = parseInt(_parts2[0]);
    month = parseInt(_parts2[1]) - 1;
    year = parseInt(_parts2[2]);
  }
  return new Date(year, month, day);
};
var getDateRange = exports.getDateRange = function getDateRange(period) {
  var baseDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();
  var date = typeof baseDate === 'string' ? new Date(baseDate) : baseDate;
  if (period === 'week') {
    var start = new Date(date);
    start.setDate(start.getDate() - 6);
    return {
      start: start,
      end: date
    };
  } else if (period === 'month') {
    var _start = new Date(date.getFullYear(), date.getMonth(), 1);
    var end = new Date(date.getFullYear(), date.getMonth() + 1, 0);
    return {
      start: _start,
      end: end
    };
  } else if (period === 'year') {
    var _start2 = new Date(date.getFullYear(), 0, 1);
    var _end = new Date(date.getFullYear(), 11, 31);
    return {
      start: _start2,
      end: _end
    };
  }
  return {
    start: date,
    end: date
  };
};
var getDayOfWeek = exports.getDayOfWeek = function getDayOfWeek(date) {
  var d = typeof date === 'string' ? new Date(date) : date;
  var days = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];
  return days[d.getDay()];
};
var formatDateKorean = exports.formatDateKorean = function formatDateKorean(date) {
  var d = typeof date === 'string' ? new Date(date) : date;
  var year = d.getFullYear();
  var month = d.getMonth() + 1;
  var day = d.getDate();
  return `${year}년 ${month}월 ${day}일`;
};
var isWithinRange = exports.isWithinRange = function isWithinRange(date, startDate, endDate) {
  var d = typeof date === 'string' ? new Date(date) : date;
  var start = typeof startDate === 'string' ? new Date(startDate) : startDate;
  var end = typeof endDate === 'string' ? new Date(endDate) : endDate;
  return d >= start && d <= end;
};
var addDays = exports.addDays = function addDays(date, days) {
  var d = typeof date === 'string' ? new Date(date) : new Date(date.getTime());
  d.setDate(d.getDate() + days);
  return d;
};
var addWeeks = exports.addWeeks = function addWeeks(date, weeks) {
  return addDays(date, weeks * 7);
};
var addMonths = exports.addMonths = function addMonths(date, months) {
  var d = typeof date === 'string' ? new Date(date) : new Date(date.getTime());
  d.setMonth(d.getMonth() + months);
  return d;
};
var getDaysBetween = exports.getDaysBetween = function getDaysBetween(date1, date2) {
  var d1 = typeof date1 === 'string' ? new Date(date1) : date1;
  var d2 = typeof date2 === 'string' ? new Date(date2) : date2;
  var utc1 = Date.UTC(d1.getFullYear(), d1.getMonth(), d1.getDate());
  var utc2 = Date.UTC(d2.getFullYear(), d2.getMonth(), d2.getDate());
  var MS_PER_DAY = 1000 * 60 * 60 * 24;
  return Math.floor((utc2 - utc1) / MS_PER_DAY);
};
var getFirstDayOfMonth = exports.getFirstDayOfMonth = function getFirstDayOfMonth(date) {
  var d = typeof date === 'string' ? new Date(date) : new Date(date.getTime());
  return new Date(d.getFullYear(), d.getMonth(), 1);
};
var getLastDayOfMonth = exports.getLastDayOfMonth = function getLastDayOfMonth(date) {
  var d = typeof date === 'string' ? new Date(date) : new Date(date.getTime());
  return new Date(d.getFullYear(), d.getMonth() + 1, 0);
};
var _default = exports.default = {
  formatDate: formatDate,
  formatDateKorean: formatDateKorean,
  formatDatetime: formatDatetime,
  getRelativeTime: getRelativeTime,
  isToday: isToday,
  isYesterday: isYesterday,
  isWithinRange: isWithinRange,
  addDays: addDays,
  addWeeks: addWeeks,
  addMonths: addMonths,
  getDaysBetween: getDaysBetween,
  getFirstDayOfMonth: getFirstDayOfMonth,
  getLastDayOfMonth: getLastDayOfMonth,
  parseDate: parseDate,
  getDateRange: getDateRange,
  getDayOfWeek: getDayOfWeek
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,