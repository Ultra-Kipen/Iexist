b27c02094baa1368dc79315b2f2138d3
_getJestObj().mock('react-native', function () {
  var React = require('react');
  return {
    Platform: {
      OS: 'ios',
      select: jest.fn()
    },
    StyleSheet: {
      create: function create(styles) {
        return styles;
      },
      flatten: function flatten(styles) {
        return styles;
      },
      compose: function compose(style1, style2) {
        return [style1, style2];
      }
    },
    View: React.forwardRef(function (_ref, ref) {
      var children = _ref.children,
        style = _ref.style,
        testID = _ref.testID,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return React.createElement('View', Object.assign({
        'data-testid': testID
      }, props, {
        ref: ref
      }), children);
    }),
    Text: React.forwardRef(function (_ref2, ref) {
      var children = _ref2.children,
        style = _ref2.style,
        testID = _ref2.testID,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return React.createElement('Text', Object.assign({
        'data-testid': testID
      }, props, {
        ref: ref
      }), children);
    }),
    TouchableOpacity: React.forwardRef(function (_ref3, ref) {
      var children = _ref3.children,
        onPress = _ref3.onPress,
        style = _ref3.style,
        testID = _ref3.testID,
        props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
      var handlePress = function handlePress() {
        if (onPress) onPress();
      };
      return React.createElement('TouchableOpacity', Object.assign({
        onClick: handlePress,
        'data-testid': testID
      }, props, {
        ref: ref
      }), children);
    }),
    Dimensions: {
      get: function get() {
        return {
          width: 375,
          height: 667
        };
      }
    }
  };
}, {
  virtual: true
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MemoizedList = require("../../../src/components/optimized/MemoizedList");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "testID"],
  _excluded2 = ["children", "style", "testID"],
  _excluded3 = ["children", "onPress", "style", "testID"];
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('MemoizedCard Component', function () {
  var mockOnPress = jest.fn();
  var mockOnLike = jest.fn();
  var mockOnComment = jest.fn();
  var defaultProps = {
    title: 'Test Title',
    content: 'Test content for the card',
    onPress: mockOnPress,
    onLike: mockOnLike,
    onComment: mockOnComment
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders correctly with minimal props', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, {
        title: defaultProps.title,
        content: defaultProps.content
      })),
      getByText = _render.getByText;
    expect(getByText('Test Title')).toBeTruthy();
    expect(getByText('Test content for the card')).toBeTruthy();
  });
  it('calls onPress when card is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps))),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('Test Title'));
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('displays author information when provided', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps, {
        authorName: "John Doe",
        timestamp: "2 hours ago"
      }))),
      getByText = _render3.getByText;
    expect(getByText('John Doe')).toBeTruthy();
    expect(getByText('2 hours ago')).toBeTruthy();
  });
  it('displays correct stats count', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps, {
        likesCount: 10,
        commentsCount: 5
      }))),
      getByText = _render4.getByText;
    expect(getByText('좋아요 10')).toBeTruthy();
    expect(getByText('댓글 5')).toBeTruthy();
  });
  it('calls onLike when like button is pressed', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps))),
      getByText = _render5.getByText;
    _reactNative.fireEvent.press(getByText('좋아요 0'));
    expect(mockOnLike).toHaveBeenCalledTimes(1);
  });
  it('calls onComment when comment button is pressed', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps))),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText('댓글 0'));
    expect(mockOnComment).toHaveBeenCalledTimes(1);
  });
  it('applies liked style when isLiked is true', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, Object.assign({}, defaultProps, {
        isLiked: true
      }))),
      getByText = _render7.getByText;
    var likeText = getByText('좋아요 0');
    expect(likeText.props.style).toEqual(expect.arrayContaining([expect.objectContaining({
      color: '#3b82f6',
      fontWeight: 'bold'
    })]));
  });
  it('does not trigger onLike when onLike prop is not provided', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MemoizedList.MemoizedCard, {
        title: defaultProps.title,
        content: defaultProps.content
      })),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('좋아요 0'));
    expect(mockOnLike).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,