02d979513dbde348648b436fc4daf89a
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withSpring = void 0;
var _springUtils = require("./springUtils.js");
var _util = require("./util.js");
var withSpring = exports.withSpring = function withSpring(toValue, userConfig, callback) {
  'worklet';

  return (0, _util.defineAnimation)(toValue, function () {
    'worklet';

    var defaultConfig = {
      damping: 10,
      mass: 1,
      stiffness: 100,
      overshootClamping: false,
      restDisplacementThreshold: 0.01,
      restSpeedThreshold: 2,
      velocity: 0,
      duration: 2000,
      dampingRatio: 0.5,
      reduceMotion: undefined,
      clamp: undefined
    };
    var config = Object.assign({}, defaultConfig, userConfig, {
      useDuration: !!(userConfig != null && userConfig.duration || userConfig != null && userConfig.dampingRatio),
      skipAnimation: false
    });
    config.skipAnimation = !(0, _springUtils.checkIfConfigIsValid)(config);
    if (config.duration === 0) {
      config.skipAnimation = true;
    }
    function springOnFrame(animation, now) {
      var toValue = animation.toValue,
        startTimestamp = animation.startTimestamp,
        current = animation.current;
      var timeFromStart = now - startTimestamp;
      if (config.useDuration && timeFromStart >= config.duration) {
        animation.current = toValue;
        animation.lastTimestamp = 0;
        return true;
      }
      if (config.skipAnimation) {
        animation.current = toValue;
        animation.lastTimestamp = 0;
        return true;
      }
      var lastTimestamp = animation.lastTimestamp,
        velocity = animation.velocity;
      var deltaTime = Math.min(now - lastTimestamp, 64);
      animation.lastTimestamp = now;
      var t = deltaTime / 1000;
      var v0 = -velocity;
      var x0 = toValue - current;
      var zeta = animation.zeta,
        omega0 = animation.omega0,
        omega1 = animation.omega1;
      var _ref = zeta < 1 ? (0, _springUtils.underDampedSpringCalculations)(animation, {
          zeta: zeta,
          v0: v0,
          x0: x0,
          omega0: omega0,
          omega1: omega1,
          t: t
        }) : (0, _springUtils.criticallyDampedSpringCalculations)(animation, {
          v0: v0,
          x0: x0,
          omega0: omega0,
          t: t
        }),
        newPosition = _ref.position,
        newVelocity = _ref.velocity;
      animation.current = newPosition;
      animation.velocity = newVelocity;
      var _isAnimationTerminati = (0, _springUtils.isAnimationTerminatingCalculation)(animation, config),
        isOvershooting = _isAnimationTerminati.isOvershooting,
        isVelocity = _isAnimationTerminati.isVelocity,
        isDisplacement = _isAnimationTerminati.isDisplacement;
      var springIsNotInMove = isOvershooting || isVelocity && isDisplacement;
      if (!config.useDuration && springIsNotInMove) {
        animation.velocity = 0;
        animation.current = toValue;
        animation.lastTimestamp = 0;
        return true;
      }
      return false;
    }
    function isTriggeredTwice(previousAnimation, animation) {
      return (previousAnimation == null ? void 0 : previousAnimation.lastTimestamp) && (previousAnimation == null ? void 0 : previousAnimation.startTimestamp) && (previousAnimation == null ? void 0 : previousAnimation.toValue) === animation.toValue && (previousAnimation == null ? void 0 : previousAnimation.duration) === animation.duration && (previousAnimation == null ? void 0 : previousAnimation.dampingRatio) === animation.dampingRatio;
    }
    function onStart(animation, value, now, previousAnimation) {
      animation.current = value;
      animation.startValue = value;
      var mass = config.mass;
      var triggeredTwice = isTriggeredTwice(previousAnimation, animation);
      var duration = config.duration;
      var x0 = triggeredTwice ? previousAnimation == null ? void 0 : previousAnimation.startValue : Number(animation.toValue) - value;
      if (previousAnimation) {
        animation.velocity = (triggeredTwice ? previousAnimation == null ? void 0 : previousAnimation.velocity : (previousAnimation == null ? void 0 : previousAnimation.velocity) + config.velocity) || 0;
      } else {
        animation.velocity = config.velocity || 0;
      }
      if (triggeredTwice) {
        animation.zeta = (previousAnimation == null ? void 0 : previousAnimation.zeta) || 0;
        animation.omega0 = (previousAnimation == null ? void 0 : previousAnimation.omega0) || 0;
        animation.omega1 = (previousAnimation == null ? void 0 : previousAnimation.omega1) || 0;
      } else {
        if (config.useDuration) {
          var actualDuration = triggeredTwice ? duration - (((previousAnimation == null ? void 0 : previousAnimation.lastTimestamp) || 0) - ((previousAnimation == null ? void 0 : previousAnimation.startTimestamp) || 0)) : duration;
          config.duration = actualDuration;
          mass = (0, _springUtils.calculateNewMassToMatchDuration)(x0, config, animation.velocity);
        }
        var _initialCalculations = (0, _springUtils.initialCalculations)(mass, config),
          zeta = _initialCalculations.zeta,
          omega0 = _initialCalculations.omega0,
          omega1 = _initialCalculations.omega1;
        animation.zeta = zeta;
        animation.omega0 = omega0;
        animation.omega1 = omega1;
        if (config.clamp !== undefined) {
          animation.zeta = (0, _springUtils.scaleZetaToMatchClamps)(animation, config.clamp);
        }
      }
      animation.lastTimestamp = (previousAnimation == null ? void 0 : previousAnimation.lastTimestamp) || now;
      animation.startTimestamp = triggeredTwice ? (previousAnimation == null ? void 0 : previousAnimation.startTimestamp) || now : now;
    }
    return {
      onFrame: springOnFrame,
      onStart: onStart,
      toValue: toValue,
      velocity: config.velocity || 0,
      current: toValue,
      startValue: 0,
      callback: callback,
      lastTimestamp: 0,
      startTimestamp: 0,
      zeta: 0,
      omega0: 0,
      omega1: 0,
      reduceMotion: (0, _util.getReduceMotionForAnimation)(config.reduceMotion)
    };
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,