db4d95e44f2f9add20af983c318a4f38
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useEmotion = exports.EmotionProvider = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _emotionService = _interopRequireDefault(require("../services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var EmotionContext = (0, _react.createContext)(undefined);
var useEmotion = exports.useEmotion = function useEmotion() {
  var context = (0, _react.useContext)(EmotionContext);
  if (context === undefined) {
    throw new Error('useEmotion must be used within an EmotionProvider');
  }
  return context;
};
var EmotionProvider = exports.EmotionProvider = function EmotionProvider(_ref) {
  var children = _ref.children;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    emotions = _useState2[0],
    setEmotions = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    userEmotions = _useState4[0],
    setUserEmotions = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    selectedEmotions = _useState6[0],
    setSelectedEmotions = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isLoading = _useState8[0],
    setIsLoading = _useState8[1];
  var _useState9 = (0, _react.useState)(null),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    error = _useState10[0],
    setError = _useState10[1];
  var fetchEmotions = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setIsLoading(true);
        setError(null);
        var response = yield _emotionService.default.getAllEmotions();
        var apiResponse = response;
        if (apiResponse && apiResponse.data) {
          setEmotions(apiResponse.data);
        }
      } catch (err) {
        setError('감정 목록을 불러오는데 실패했습니다.');
        console.error('감정 목록 불러오기 오류:', err);
      } finally {
        setIsLoading(false);
      }
    });
    return function fetchEmotions() {
      return _ref2.apply(this, arguments);
    };
  }();
  var fetchUserEmotions = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      try {
        setIsLoading(true);
        setError(null);
        var response = yield _emotionService.default.getDailyEmotionCheck();
        if (response && response.data) {
          setUserEmotions(response.data);
        }
      } catch (err) {
        setError('사용자 감정 기록을 불러오는데 실패했습니다.');
        console.error('사용자 감정 기록 불러오기 오류:', err);
      } finally {
        setIsLoading(false);
      }
    });
    return function fetchUserEmotions() {
      return _ref3.apply(this, arguments);
    };
  }();
  var logEmotion = function () {
    var _ref4 = (0, _asyncToGenerator2.default)(function* (emotionId, note) {
      try {
        setIsLoading(true);
        setError(null);
        yield _emotionService.default.recordEmotions({
          emotion_ids: [emotionId],
          note: note
        });
        yield fetchUserEmotions();
      } catch (err) {
        setError('감정 기록에 실패했습니다.');
        console.error('감정 기록 오류:', err);
      } finally {
        setIsLoading(false);
      }
    });
    return function logEmotion(_x, _x2) {
      return _ref4.apply(this, arguments);
    };
  }();
  var selectEmotion = function selectEmotion(emotionId) {
    if (!selectedEmotions.includes(emotionId)) {
      setSelectedEmotions([].concat((0, _toConsumableArray2.default)(selectedEmotions), [emotionId]));
    }
  };
  var unselectEmotion = function unselectEmotion(emotionId) {
    setSelectedEmotions(selectedEmotions.filter(function (id) {
      return id !== emotionId;
    }));
  };
  var clearSelectedEmotions = function clearSelectedEmotions() {
    setSelectedEmotions([]);
  };
  (0, _react.useEffect)(function () {
    fetchEmotions();
  }, []);
  return (0, _jsxRuntime.jsx)(EmotionContext.Provider, {
    value: {
      emotions: emotions,
      userEmotions: userEmotions,
      selectedEmotions: selectedEmotions,
      isLoading: isLoading,
      error: error,
      fetchEmotions: fetchEmotions,
      fetchUserEmotions: fetchUserEmotions,
      logEmotion: logEmotion,
      selectEmotion: selectEmotion,
      unselectEmotion: unselectEmotion,
      clearSelectedEmotions: clearSelectedEmotions
    },
    children: children
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,