37824f26106fa98754267f4406cd6de7
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bisectRoot = bisectRoot;
exports.calculateNewMassToMatchDuration = calculateNewMassToMatchDuration;
exports.checkIfConfigIsValid = checkIfConfigIsValid;
exports.criticallyDampedSpringCalculations = criticallyDampedSpringCalculations;
exports.initialCalculations = initialCalculations;
exports.isAnimationTerminatingCalculation = isAnimationTerminatingCalculation;
exports.scaleZetaToMatchClamps = scaleZetaToMatchClamps;
exports.underDampedSpringCalculations = underDampedSpringCalculations;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _index = require("../logger/index.js");
function checkIfConfigIsValid(config) {
  'worklet';

  var _config$clamp, _config$clamp2;
  var errorMessage = '';
  ['stiffness', 'damping', 'dampingRatio', 'restDisplacementThreshold', 'restSpeedThreshold', 'mass'].forEach(function (prop) {
    var value = config[prop];
    if (value <= 0) {
      errorMessage += `, ${prop} must be grater than zero but got ${value}`;
    }
  });
  if (config.duration < 0) {
    errorMessage += `, duration can't be negative, got ${config.duration}`;
  }
  if ((_config$clamp = config.clamp) != null && _config$clamp.min && (_config$clamp2 = config.clamp) != null && _config$clamp2.max && config.clamp.min > config.clamp.max) {
    errorMessage += `, clamp.min should be lower than clamp.max, got clamp: {min: ${config.clamp.min}, max: ${config.clamp.max}} `;
  }
  if (errorMessage !== '') {
    _index.logger.warn('Invalid spring config' + errorMessage);
  }
  return errorMessage === '';
}
function bisectRoot(_ref) {
  'worklet';

  var min = _ref.min,
    max = _ref.max,
    func = _ref.func,
    _ref$maxIterations = _ref.maxIterations,
    maxIterations = _ref$maxIterations === void 0 ? 20 : _ref$maxIterations;
  var ACCURACY = 0.00005;
  var idx = maxIterations;
  var current = (max + min) / 2;
  while (Math.abs(func(current)) > ACCURACY && idx > 0) {
    idx -= 1;
    if (func(current) < 0) {
      min = current;
    } else {
      max = current;
    }
    current = (min + max) / 2;
  }
  return current;
}
function initialCalculations() {
  'worklet';

  var mass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var config = arguments.length > 1 ? arguments[1] : undefined;
  if (config.skipAnimation) {
    return {
      zeta: 0,
      omega0: 0,
      omega1: 0
    };
  }
  if (config.useDuration) {
    var k = config.stiffness,
      zeta = config.dampingRatio;
    var omega0 = Math.sqrt(k / mass);
    var omega1 = omega0 * Math.sqrt(1 - zeta ** 2);
    return {
      zeta: zeta,
      omega0: omega0,
      omega1: omega1
    };
  } else {
    var c = config.damping,
      m = config.mass,
      _k = config.stiffness;
    var _zeta = c / (2 * Math.sqrt(_k * m));
    var _omega = Math.sqrt(_k / m);
    var _omega2 = _omega * Math.sqrt(1 - _zeta ** 2);
    return {
      zeta: _zeta,
      omega0: _omega,
      omega1: _omega2
    };
  }
}
function scaleZetaToMatchClamps(animation, clamp) {
  'worklet';

  var zeta = animation.zeta,
    toValue = animation.toValue,
    startValue = animation.startValue;
  var toValueNum = Number(toValue);
  if (toValueNum === startValue) {
    return zeta;
  }
  var _ref2 = toValueNum - startValue > 0 ? [clamp.min, clamp.max] : [clamp.max, clamp.min],
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    firstBound = _ref3[0],
    secondBound = _ref3[1];
  var relativeExtremum1 = secondBound !== undefined ? Math.abs((secondBound - toValueNum) / (toValueNum - startValue)) : undefined;
  var relativeExtremum2 = firstBound !== undefined ? Math.abs((firstBound - toValueNum) / (toValueNum - startValue)) : undefined;
  var newZeta1 = relativeExtremum1 !== undefined ? Math.abs(Math.log(relativeExtremum1) / Math.PI) : undefined;
  var newZeta2 = relativeExtremum2 !== undefined ? Math.abs(Math.log(relativeExtremum2) / (2 * Math.PI)) : undefined;
  var zetaSatisfyingClamp = [newZeta1, newZeta2].filter(function (x) {
    return x !== undefined;
  });
  return Math.max.apply(Math, (0, _toConsumableArray2.default)(zetaSatisfyingClamp).concat([zeta]));
}
function calculateNewMassToMatchDuration(x0, config, v0) {
  'worklet';

  if (config.skipAnimation) {
    return 0;
  }
  var k = config.stiffness,
    zeta = config.dampingRatio,
    threshold = config.restSpeedThreshold,
    duration = config.duration;
  var durationForMass = function durationForMass(mass) {
    'worklet';

    var amplitude = (mass * v0 * v0 + k * x0 * x0) / (Math.exp(1 - 0.5 * zeta) * k);
    var c = zeta * 2 * Math.sqrt(k * mass);
    return 1000 * (-2 * mass / c) * Math.log(threshold * 0.01 / amplitude) - duration;
  };
  return bisectRoot({
    min: 0,
    max: 100,
    func: durationForMass
  });
}
function criticallyDampedSpringCalculations(animation, precalculatedValues) {
  'worklet';

  var toValue = animation.toValue;
  var v0 = precalculatedValues.v0,
    x0 = precalculatedValues.x0,
    omega0 = precalculatedValues.omega0,
    t = precalculatedValues.t;
  var criticallyDampedEnvelope = Math.exp(-omega0 * t);
  var criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);
  var criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);
  return {
    position: criticallyDampedPosition,
    velocity: criticallyDampedVelocity
  };
}
function underDampedSpringCalculations(animation, precalculatedValues) {
  'worklet';

  var toValue = animation.toValue,
    current = animation.current,
    velocity = animation.velocity;
  var zeta = precalculatedValues.zeta,
    t = precalculatedValues.t,
    omega0 = precalculatedValues.omega0,
    omega1 = precalculatedValues.omega1;
  var v0 = -velocity;
  var x0 = toValue - current;
  var sin1 = Math.sin(omega1 * t);
  var cos1 = Math.cos(omega1 * t);
  var underDampedEnvelope = Math.exp(-zeta * omega0 * t);
  var underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);
  var underDampedPosition = toValue - underDampedFrag1;
  var underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);
  return {
    position: underDampedPosition,
    velocity: underDampedVelocity
  };
}
function isAnimationTerminatingCalculation(animation, config) {
  'worklet';

  var toValue = animation.toValue,
    velocity = animation.velocity,
    startValue = animation.startValue,
    current = animation.current;
  var isOvershooting = config.overshootClamping ? current > toValue && startValue < toValue || current < toValue && startValue > toValue : false;
  var isVelocity = Math.abs(velocity) < config.restSpeedThreshold;
  var isDisplacement = Math.abs(toValue - current) < config.restDisplacementThreshold;
  return {
    isOvershooting: isOvershooting,
    isVelocity: isVelocity,
    isDisplacement: isDisplacement
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,