5a79008b861d1fe124f8e6de3184001b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressTransitionManager = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _core = require("../../core.js");
var _errors = require("../../errors.js");
var _PlatformChecker = require("../../PlatformChecker.js");
var _threads = require("../../threads.js");
var IS_ANDROID = _reactNative.Platform.OS === 'android';
var ProgressTransitionManager = exports.ProgressTransitionManager = function () {
  function ProgressTransitionManager() {
    (0, _classCallCheck2.default)(this, ProgressTransitionManager);
    this._sharedElementCount = 0;
    this._eventHandler = {
      isRegistered: false,
      onTransitionProgress: -1,
      onAppear: -1,
      onDisappear: -1,
      onSwipeDismiss: -1
    };
  }
  return (0, _createClass2.default)(ProgressTransitionManager, [{
    key: "addProgressAnimation",
    value: function addProgressAnimation(viewTag, progressAnimation) {
      (0, _threads.runOnUIImmediately)(function () {
        'worklet';

        global.ProgressTransitionRegister.addProgressAnimation(viewTag, progressAnimation);
      })();
      this.registerEventHandlers();
    }
  }, {
    key: "removeProgressAnimation",
    value: function removeProgressAnimation(viewTag) {
      var isUnmounting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unregisterEventHandlers();
      (0, _threads.runOnUIImmediately)(function () {
        'worklet';

        global.ProgressTransitionRegister.removeProgressAnimation(viewTag, isUnmounting);
      })();
    }
  }, {
    key: "registerEventHandlers",
    value: function registerEventHandlers() {
      this._sharedElementCount++;
      var eventHandler = this._eventHandler;
      if (!eventHandler.isRegistered) {
        eventHandler.isRegistered = true;
        var eventPrefix = IS_ANDROID ? 'on' : 'top';
        var lastProgressValue = -1;
        eventHandler.onTransitionProgress = (0, _core.registerEventHandler)(function (event) {
          'worklet';

          var progress = event.progress;
          if (progress === lastProgressValue) {
            return;
          }
          lastProgressValue = progress;
          global.ProgressTransitionRegister.frame(progress);
        }, eventPrefix + 'TransitionProgress');
        eventHandler.onAppear = (0, _core.registerEventHandler)(function () {
          'worklet';

          global.ProgressTransitionRegister.onTransitionEnd();
        }, eventPrefix + 'Appear');
        if (IS_ANDROID) {
          eventHandler.onDisappear = (0, _core.registerEventHandler)(function () {
            'worklet';

            global.ProgressTransitionRegister.onAndroidFinishTransitioning();
          }, 'onFinishTransitioning');
        } else if (_reactNative.Platform.OS === 'ios') {
          eventHandler.onDisappear = (0, _core.registerEventHandler)(function () {
            'worklet';

            global.ProgressTransitionRegister.onTransitionEnd(true);
          }, 'topDisappear');
          eventHandler.onSwipeDismiss = (0, _core.registerEventHandler)(function () {
            'worklet';

            global.ProgressTransitionRegister.onTransitionEnd();
          }, 'topGestureCancel');
        }
      }
    }
  }, {
    key: "unregisterEventHandlers",
    value: function unregisterEventHandlers() {
      this._sharedElementCount--;
      if (this._sharedElementCount === 0) {
        var eventHandler = this._eventHandler;
        eventHandler.isRegistered = false;
        if (eventHandler.onTransitionProgress !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onTransitionProgress);
          eventHandler.onTransitionProgress = -1;
        }
        if (eventHandler.onAppear !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onAppear);
          eventHandler.onAppear = -1;
        }
        if (eventHandler.onDisappear !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onDisappear);
          eventHandler.onDisappear = -1;
        }
        if (eventHandler.onSwipeDismiss !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onSwipeDismiss);
          eventHandler.onSwipeDismiss = -1;
        }
      }
    }
  }]);
}();
function createProgressTransitionRegister() {
  'worklet';

  var progressAnimations = new Map();
  var snapshots = new Map();
  var currentTransitions = new Set();
  var toRemove = new Set();
  var skipCleaning = false;
  var isTransitionRestart = false;
  var progressTransitionManager = {
    addProgressAnimation: function addProgressAnimation(viewTag, progressAnimation) {
      if (currentTransitions.size > 0 && !progressAnimations.has(viewTag)) {
        isTransitionRestart = !IS_ANDROID;
      }
      progressAnimations.set(viewTag, progressAnimation);
    },
    removeProgressAnimation: function removeProgressAnimation(viewTag, isUnmounting) {
      if (currentTransitions.size > 0) {
        isTransitionRestart = !IS_ANDROID;
      }
      if (isUnmounting) {
        toRemove.add(viewTag);
      } else {
        progressAnimations.delete(viewTag);
      }
    },
    onTransitionStart: function onTransitionStart(viewTag, snapshot) {
      skipCleaning = isTransitionRestart;
      snapshots.set(viewTag, snapshot);
      currentTransitions.add(viewTag);
      progressTransitionManager.frame(0);
    },
    frame: function frame(progress) {
      for (var viewTag of currentTransitions) {
        var progressAnimation = progressAnimations.get(viewTag);
        if (!progressAnimation) {
          continue;
        }
        var snapshot = snapshots.get(viewTag);
        progressAnimation(viewTag, snapshot, progress);
      }
    },
    onAndroidFinishTransitioning: function onAndroidFinishTransitioning() {
      if (toRemove.size > 0) {
        progressTransitionManager.onTransitionEnd();
      }
    },
    onTransitionEnd: function onTransitionEnd() {
      var removeViews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (currentTransitions.size === 0) {
        toRemove.clear();
        return;
      }
      if (skipCleaning) {
        skipCleaning = false;
        isTransitionRestart = false;
        return;
      }
      for (var viewTag of currentTransitions) {
        global._notifyAboutEnd(viewTag, removeViews);
      }
      currentTransitions.clear();
      if (isTransitionRestart) {
        return;
      }
      snapshots.clear();
      if (toRemove.size > 0) {
        for (var _viewTag of toRemove) {
          progressAnimations.delete(_viewTag);
          global._notifyAboutEnd(_viewTag, removeViews);
        }
        toRemove.clear();
      }
    }
  };
  return progressTransitionManager;
}
if ((0, _PlatformChecker.shouldBeUseWeb)()) {
  var maybeThrowError = function maybeThrowError() {
    if (!(0, _PlatformChecker.isJest)()) {
      throw new _errors.ReanimatedError('`ProgressTransitionRegister` is not available on non-native platform.');
    }
  };
  global.ProgressTransitionRegister = new Proxy({}, {
    get: maybeThrowError,
    set: function set() {
      maybeThrowError();
      return false;
    }
  });
} else {
  (0, _threads.runOnUIImmediately)(function () {
    'worklet';

    global.ProgressTransitionRegister = createProgressTransitionRegister();
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,