0ff0f94bb3bc401ff9ac0c996b1645fa
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    TouchableOpacity = _require.TouchableOpacity,
    Text = _require.Text,
    View = _require.View;
  return {
    Chip: function Chip(_ref) {
      var children = _ref.children,
        onPress = _ref.onPress,
        testID = _ref.testID,
        style = _ref.style;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        testID: testID,
        style: style,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: children
        })
      });
    },
    Button: jest.requireActual('react-native').TouchableOpacity,
    TextInput: jest.requireActual('react-native').TextInput,
    Portal: function Portal(_ref2) {
      var children = _ref2.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    Provider: function Provider(_ref3) {
      var children = _ref3.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    }
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = {
  alert: jest.fn()
};
global.Alert = mockAlert;
var mockNavigation = {
  goBack: jest.fn()
};
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}, {
  emotion_id: 3,
  name: '위로',
  icon: 'hand-peace',
  color: '#87CEEB'
}, {
  emotion_id: 4,
  name: '감동',
  icon: 'heart-outline',
  color: '#FF6347'
}, {
  emotion_id: 5,
  name: '슬픔',
  icon: 'emoticon-sad-outline',
  color: '#4682B4'
}, {
  emotion_id: 6,
  name: '불안',
  icon: 'alert-outline',
  color: '#DDA0DD'
}, {
  emotion_id: 7,
  name: '화남',
  icon: 'emoticon-angry-outline',
  color: '#FF4500'
}, {
  emotion_id: 8,
  name: '지침',
  icon: 'emoticon-neutral-outline',
  color: '#A9A9A9'
}, {
  emotion_id: 9,
  name: '우울',
  icon: 'weather-cloudy',
  color: '#708090'
}, {
  emotion_id: 10,
  name: '고독',
  icon: 'account-outline',
  color: '#8B4513'
}, {
  emotion_id: 11,
  name: '충격',
  icon: 'lightning-bolt',
  color: '#9932CC'
}, {
  emotion_id: 12,
  name: '편함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
describe('EmotionLogScreen 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAlert.alert.mockClear();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText,
      findByText = _render.findByText;
    yield findByText('오늘의 감정');
    yield findByText('현재 어떤 감정을 느끼고 계신가요?');
  }), 30000);
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render2.findByTestId,
      getAllByTestId = _render2.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      expect(chips.length).toBe(mockEmotions.length);
    });
  }), 30000);
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render3.getAllByTestId,
      findByTestId = _render3.findByTestId,
      getByRole = _render3.getByRole;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render4.getAllByTestId,
      findByTestId = _render4.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      _reactNative.fireEvent.press(chips[1]);
      _reactNative.fireEvent.press(chips[2]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      findByTestId = _render5.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }), 30000);
  it('감정 선택 후 제출 버튼이 활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId,
      findByTestId = _render6.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render7.getAllByTestId,
      findByTestId = _render7.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    var alertCall = mockAlert.alert.mock.calls[0];
    var confirmButton = alertCall[2][0];
    confirmButton.onPress();
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }), 30000);
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render8.getAllByTestId,
      findByTestId = _render8.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
    });
  }), 30000);
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render9.getAllByTestId,
      findByTestId = _render9.findByTestId;
    var chips;
    yield (0, _reactNative.waitFor)(function () {
      chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
    _reactNative.fireEvent.press(chips[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
    });
  }), 30000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSZWFjdCIsInJlcXVpcmUiLCJfcmVxdWlyZSIsIlRvdWNoYWJsZU9wYWNpdHkiLCJUZXh0IiwiVmlldyIsIkNoaXAiLCJfcmVmIiwiY2hpbGRyZW4iLCJvblByZXNzIiwidGVzdElEIiwic3R5bGUiLCJfanN4UnVudGltZSIsImpzeCIsIkJ1dHRvbiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiVGV4dElucHV0IiwiUG9ydGFsIiwiX3JlZjIiLCJGcmFnbWVudCIsIlByb3ZpZGVyIiwiX3JlZjMiLCJnZXRBbGxFbW90aW9ucyIsImZuIiwicmVjb3JkRW1vdGlvbnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX0Vtb3Rpb25Mb2dTY3JlZW4iLCJfZW1vdGlvblNlcnZpY2UiLCJfcmVxdWlyZTIiLCJtb2NrQWxlcnQiLCJhbGVydCIsImdsb2JhbCIsIkFsZXJ0IiwibW9ja05hdmlnYXRpb24iLCJnb0JhY2siLCJtb2NrRW1vdGlvbnMiLCJlbW90aW9uX2lkIiwibmFtZSIsImljb24iLCJjb2xvciIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJtb2NrQ2xlYXIiLCJlbW90aW9uU2VydmljZSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsInN0YXR1cyIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJuYXZpZ2F0aW9uIiwiZ2V0QnlUZXh0IiwiZmluZEJ5VGV4dCIsIl9yZW5kZXIyIiwiZmluZEJ5VGVzdElkIiwiZ2V0QWxsQnlUZXN0SWQiLCJ3YWl0Rm9yIiwiY2hpcHMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0JlIiwiX3JlbmRlcjMiLCJnZXRCeVJvbGUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInN1Ym1pdEJ1dHRvbiIsInByb3BzIiwiYWNjZXNzaWJpbGl0eVN0YXRlIiwiZGlzYWJsZWQiLCJ0b0JlRmFsc3kiLCJfcmVuZGVyNCIsIl9yZW5kZXI1Iiwibm90ZUlucHV0IiwidG9CZVRydXRoeSIsImNoYW5nZVRleHQiLCJfcmVuZGVyNiIsIl9yZW5kZXI3IiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYW55dGhpbmciLCJhbGVydENhbGwiLCJjYWxscyIsImNvbmZpcm1CdXR0b24iLCJtb2NrUmVqZWN0ZWRWYWx1ZU9uY2UiLCJyZXNwb25zZSIsIm1lc3NhZ2UiLCJfcmVuZGVyOCIsIl9yZW5kZXI5Il0sInNvdXJjZXMiOlsiRW1vdGlvbkxvZ1NjcmVlbi5pbnRlZ3JhdGlvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciwgYWN0IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgRW1vdGlvbkxvZ1NjcmVlbiBmcm9tICcuLi8uLi8uLi9zcmMvc2NyZWVucy9FbW90aW9uTG9nU2NyZWVuJztcclxuaW1wb3J0IGVtb3Rpb25TZXJ2aWNlIGZyb20gJy4uLy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvZW1vdGlvblNlcnZpY2UnO1xyXG5cclxuLy8gQWxlcnQg66qo7YK5IOyImOyglVxyXG5jb25zdCBtb2NrQWxlcnQgPSB7XHJcbiAgYWxlcnQ6IGplc3QuZm4oKVxyXG59O1xyXG5nbG9iYWwuQWxlcnQgPSBtb2NrQWxlcnQ7XHJcblxyXG4vLyByZWFjdC1uYXRpdmUtcGFwZXIgQ2hpcCDrqqjtgrkg7IiY7KCVXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXBhcGVyJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuICBjb25zdCB7IFRvdWNoYWJsZU9wYWNpdHksIFRleHQsIFZpZXcgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICBDaGlwOiAoeyBjaGlsZHJlbiwgb25QcmVzcywgdGVzdElELCBzdHlsZSB9KSA9PiAoXHJcbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5IG9uUHJlc3M9e29uUHJlc3N9IHRlc3RJRD17dGVzdElEfSBzdHlsZT17c3R5bGV9PlxyXG4gICAgICAgIDxUZXh0PntjaGlsZHJlbn08L1RleHQ+XHJcbiAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cclxuICAgICksXHJcbiAgICBCdXR0b246IGplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtbmF0aXZlJykuVG91Y2hhYmxlT3BhY2l0eSxcclxuICAgIFRleHRJbnB1dDogamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdC1uYXRpdmUnKS5UZXh0SW5wdXQsXHJcbiAgICBQb3J0YWw6ICh7IGNoaWxkcmVuIH0pID0+IDw+e2NoaWxkcmVufTwvPixcclxuICAgIFByb3ZpZGVyOiAoeyBjaGlsZHJlbiB9KSA9PiA8PntjaGlsZHJlbn08Lz4sXHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyDrqqjtgrlcclxuamVzdC5tb2NrKCcuLi8uLi8uLi9zcmMvc2VydmljZXMvYXBpL2Vtb3Rpb25TZXJ2aWNlJywgKCkgPT4gKHtcclxuICBnZXRBbGxFbW90aW9uczogamVzdC5mbigpLFxyXG4gIHJlY29yZEVtb3Rpb25zOiBqZXN0LmZuKClcclxufSkpO1xyXG5cclxuLy8g64Sk67mE6rKM7J207IWYIOuqqO2CuVxyXG5jb25zdCBtb2NrTmF2aWdhdGlvbiA9IHsgZ29CYWNrOiBqZXN0LmZuKCkgfTtcclxuXHJcbi8vIOuqqSDrjbDsnbTthLAgLSDsi6TsoJwgQVBJIOydkeuLtSDqtazsobDsl5Ag66ee7LawIOyImOyglVxyXG5jb25zdCBtb2NrRW1vdGlvbnMgPSBbXHJcbiAgeyBlbW90aW9uX2lkOiAxLCBuYW1lOiAn7ZaJ67O1JywgaWNvbjogJ2Vtb3RpY29uLWhhcHB5LW91dGxpbmUnLCBjb2xvcjogJyNGRkQ3MDAnIH0sXHJcbiAgeyBlbW90aW9uX2lkOiAyLCBuYW1lOiAn6rCQ7IKsJywgaWNvbjogJ2hhbmQtaGVhcnQnLCBjb2xvcjogJyNGRjY5QjQnIH0sXHJcbiAgeyBlbW90aW9uX2lkOiAzLCBuYW1lOiAn7JyE66GcJywgaWNvbjogJ2hhbmQtcGVhY2UnLCBjb2xvcjogJyM4N0NFRUInIH0sXHJcbiAgeyBlbW90aW9uX2lkOiA0LCBuYW1lOiAn6rCQ64+ZJywgaWNvbjogJ2hlYXJ0LW91dGxpbmUnLCBjb2xvcjogJyNGRjYzNDcnIH0sXHJcbiAgeyBlbW90aW9uX2lkOiA1LCBuYW1lOiAn7Iqs7ZSUJywgaWNvbjogJ2Vtb3RpY29uLXNhZC1vdXRsaW5lJywgY29sb3I6ICcjNDY4MkI0JyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogNiwgbmFtZTogJ+u2iOyViCcsIGljb246ICdhbGVydC1vdXRsaW5lJywgY29sb3I6ICcjRERBMEREJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogNywgbmFtZTogJ+2ZlOuCqCcsIGljb246ICdlbW90aWNvbi1hbmdyeS1vdXRsaW5lJywgY29sb3I6ICcjRkY0NTAwJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogOCwgbmFtZTogJ+yngOy5qCcsIGljb246ICdlbW90aWNvbi1uZXV0cmFsLW91dGxpbmUnLCBjb2xvcjogJyNBOUE5QTknIH0sXHJcbiAgeyBlbW90aW9uX2lkOiA5LCBuYW1lOiAn7Jqw7Jq4JywgaWNvbjogJ3dlYXRoZXItY2xvdWR5JywgY29sb3I6ICcjNzA4MDkwJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogMTAsIG5hbWU6ICfqs6Drj4UnLCBpY29uOiAnYWNjb3VudC1vdXRsaW5lJywgY29sb3I6ICcjOEI0NTEzJyB9LFxyXG4gIHsgZW1vdGlvbl9pZDogMTEsIG5hbWU6ICfstqnqsqknLCBpY29uOiAnbGlnaHRuaW5nLWJvbHQnLCBjb2xvcjogJyM5OTMyQ0MnIH0sXHJcbiAgeyBlbW90aW9uX2lkOiAxMiwgbmFtZTogJ+2OuO2VqCcsIGljb246ICdzb2ZhLW91dGxpbmUnLCBjb2xvcjogJyMzMkNEMzInIH1cclxuXTtcclxuXHJcbmRlc2NyaWJlKCdFbW90aW9uTG9nU2NyZWVuIO2FjOyKpO2KuCcsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xyXG4gICAgbW9ja0FsZXJ0LmFsZXJ0Lm1vY2tDbGVhcigpO1xyXG4gICAgXHJcbiAgICAvLyDrqqjtgrnrkJwg7ZWo7IiY6rCAIOymieyLnCDsnZHri7XtlZjrj4TroZ0g7ISk7KCVXHJcbiAgICAoZW1vdGlvblNlcnZpY2UuZ2V0QWxsRW1vdGlvbnMgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IFxyXG4gICAgICBkYXRhOiB7IFxyXG4gICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLCBcclxuICAgICAgICBkYXRhOiBtb2NrRW1vdGlvbnMgXHJcbiAgICAgIH0gXHJcbiAgICB9KTtcclxuICAgIChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHsgc3RhdHVzOiAyMDAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIOuCmOuouOyngCDthYzsiqTtirgg7L2U65Oc64qUIOuPmeydvC4uLlxyXG4gIC8vIOy7tO2PrOuEjO2KuCDroIzrjZTrp4Eg7YWM7Iqk7Yq4XHJcbiAgaXQoJ+ugjOuNlOungeydtCDsmKzrsJTrpbTqsowg65CoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQsIGZpbmRCeVRleHQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyDrjbDsnbTthLAg66Gc65OcIOyZhOujjCDtm4Qg7ZmU66m0IO2ZleyduFxyXG4gICAgYXdhaXQgZmluZEJ5VGV4dCgn7Jik64qY7J2YIOqwkOyglScpO1xyXG4gICAgYXdhaXQgZmluZEJ5VGV4dCgn7ZiE7J6sIOyWtOuWpCDqsJDsoJXsnYQg64qQ64G86rOgIOqzhOyLoOqwgOyalD8nKTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOqwkOyglSDsuakg66CM642U66eBIO2FjOyKpO2KuCAtIOyImOyglVxyXG4gIGl0KCfrqqjrk6Ag6rCQ7KCVIOy5qeydtCDsmKzrsJTrpbTqsowg66CM642U66eB65CoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBmaW5kQnlUZXN0SWQsIGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8gZW1vdGlvbi1jaGlwIHRlc3RJROuhnCDrqqjrk6Ag7Lmp7J2EIOywvuydjFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoaXBzID0gZ2V0QWxsQnlUZXN0SWQoJ2Vtb3Rpb24tY2hpcCcpO1xyXG4gICAgICBleHBlY3QoY2hpcHMubGVuZ3RoKS50b0JlKG1vY2tFbW90aW9ucy5sZW5ndGgpO1xyXG4gICAgfSk7XHJcbiAgfSwgMzAwMDApO1xyXG5cclxuICAvLyDsl6zquLDsl5Ag64KY66i47KeAIOuqqOuToCDthYzsiqTtirjrk6TsnbQg6re464yA66GcIOuTpOyWtOqwkeuLiOuLpC4uLlxyXG4gIC8vICjsnbTsoIQg64u167OA7J2YIOyImOygleuQnCDthYzsiqTtirjrk6QpXHJcbiAgXHJcbiAgLy8g6rCQ7KCVIOyEoO2DnSDsg4Htg5wg67OA6rK9IO2FjOyKpO2KuCAtIOyImOyglVxyXG4gIGl0KCfqsJDsoJUg7Lmp7J2EIO2BtOumre2VmOuptCDshKDtg50g7IOB7YOc6rCAIOuzgOqyveuQqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQsIGZpbmRCeVRlc3RJZCwgZ2V0QnlSb2xlIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8gZW1vdGlvbi1jaGlw65OkIOykkSDssqsg67KI7Ke4KO2WieuztSnrpbwg7LC+7JWE7IScIO2BtOumrVxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoaXBzID0gZ2V0QWxsQnlUZXN0SWQoJ2Vtb3Rpb24tY2hpcCcpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoY2hpcHNbMF0pOyAvLyDssqsg67KI7Ke4IOy5qSjtlonrs7UpIO2BtOumrVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirzsnbQg7Zmc7ISx7ZmU65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYXdhaXQgZmluZEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc3VibWl0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZUZhbHN5KCk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOyXrOufrCDqsJDsoJUg7ISg7YOdIO2FjOyKpO2KuCAtIOyImOyglVxyXG4gIGl0KCfsl6zrn6wg6rCQ7KCV7J2EIOyEoO2Dne2VoCDsiJgg7J6I7J2MJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCwgZmluZEJ5VGVzdElkIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgLy8g7Jes65+sIOqwkOyglSDssL7quLAg67CPIOyEoO2DnVxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoaXBzID0gZ2V0QWxsQnlUZXN0SWQoJ2Vtb3Rpb24tY2hpcCcpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3MoY2hpcHNbMF0pOyAvLyDtlonrs7VcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGNoaXBzWzFdKTsgLy8g6rCQ7IKsXHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhjaGlwc1syXSk7IC8vIOychOuhnFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirzsnbQg7Zmc7ISx7ZmU65CY7JeI64qU7KeAIO2ZleyduFxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYXdhaXQgZmluZEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc3VibWl0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZUZhbHN5KCk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOuplOuqqCDsnoXroKUg7YWM7Iqk7Yq4XHJcbiAgaXQoJ+uplOuqqCDsnoXroKXsnbQg6rCA64ql7ZWoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBmaW5kQnlUZXN0SWQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICBjb25zdCBub3RlSW5wdXQgPSBhd2FpdCBmaW5kQnlUZXN0SWQoJ2Vtb3Rpb24tbm90ZS1pbnB1dCcpO1xyXG4gICAgZXhwZWN0KG5vdGVJbnB1dCkudG9CZVRydXRoeSgpO1xyXG4gICAgXHJcbiAgICBmaXJlRXZlbnQuY2hhbmdlVGV4dChub3RlSW5wdXQsICfsmKTripjsnYAg7KCV66eQIOyii+ydgCDtlZjro6jsmIDsirXri4jri6QuJyk7XHJcbiAgfSwgMzAwMDApO1xyXG5cclxuICAvLyDsoJzstpwg67KE7Yq8IO2FjOyKpO2KuCAtIOyImOyglVxyXG4gIGl0KCfqsJDsoJUg7ISg7YOdIO2bhCDsoJzstpwg67KE7Yq87J20IO2ZnOyEse2ZlOuQqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQsIGZpbmRCeVRlc3RJZCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDshKDtg51cclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBjb25zdCBjaGlwcyA9IGdldEFsbEJ5VGVzdElkKCdlbW90aW9uLWNoaXAnKTtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGNoaXBzWzBdKTsgLy8g7LKrIOuyiOynuCDsuako7ZaJ67O1KSDtgbTrpq1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsoJzstpwg67KE7Yq8IO2ZleyduFxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYXdhaXQgZmluZEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3Qoc3VibWl0QnV0dG9uLnByb3BzLmFjY2Vzc2liaWxpdHlTdGF0ZS5kaXNhYmxlZCkudG9CZUZhbHN5KCk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcblxyXG4gIC8vIOq4sOuhnSDshLHqs7Ug7YWM7Iqk7Yq4IC0g7IiY7KCVXHJcbiAgaXQoJ+qwkOyglSDquLDroZ0g7KCc7LacIOyEseqztSDsi5wg7ZmV7J24IOuplOyLnOyngOyZgCDtmZTrqbQg7J2064+Z7J20IOuPmeyeke2VqCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXN0SWQsIGZpbmRCeVRlc3RJZCB9ID0gcmVuZGVyKDxFbW90aW9uTG9nU2NyZWVuIG5hdmlnYXRpb249e21vY2tOYXZpZ2F0aW9ufSAvPik7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDshKDtg51cclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBjb25zdCBjaGlwcyA9IGdldEFsbEJ5VGVzdElkKCdlbW90aW9uLWNoaXAnKTtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGNoaXBzWzBdKTsgLy8g7LKrIOuyiOynuCDsuako7ZaJ67O1KSDtgbTrpq1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsoJzstpwg67KE7Yq8IO2BtOumrVxyXG4gICAgY29uc3Qgc3VibWl0QnV0dG9uID0gYXdhaXQgZmluZEJ5VGVzdElkKCdlbW90aW9uLXN1Ym1pdC1idXR0b24nKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhzdWJtaXRCdXR0b24pO1xyXG4gICAgXHJcbiAgICAvLyBBUEkg7Zi47LacIO2ZleyduFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucykudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIEFsZXJ0IO2YuOy2nCDtmZXsnbhcclxuICAgIGV4cGVjdChtb2NrQWxlcnQuYWxlcnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxyXG4gICAgICAn6rCQ7KCVIOq4sOuhnSDsmYTro4wnLFxyXG4gICAgICAn7Jik64qY7J2YIOqwkOygleydtCDshLHqs7XsoIHsnLzroZwg6riw66Gd65CY7JeI7Iq164uI64ukLicsXHJcbiAgICAgIGV4cGVjdC5hbnl0aGluZygpXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyBBbGVydOydmCDsvZzrsLEg7ZWo7IiYIO2YuOy2nCDsi5zrrqzroIjsnbTshZhcclxuICAgIGNvbnN0IGFsZXJ0Q2FsbCA9IG1vY2tBbGVydC5hbGVydC5tb2NrLmNhbGxzWzBdO1xyXG4gICAgY29uc3QgY29uZmlybUJ1dHRvbiA9IGFsZXJ0Q2FsbFsyXVswXTtcclxuICAgIGNvbmZpcm1CdXR0b24ub25QcmVzcygpO1xyXG4gICAgXHJcbiAgICAvLyDrhKTruYTqsozsnbTshZgg7ZmV7J24XHJcbiAgICBleHBlY3QobW9ja05hdmlnYXRpb24uZ29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSwgMzAwMDApO1xyXG5cclxuICAvLyDquLDroZ0g7Iuk7YyoIO2FjOyKpO2KuCAtIOyImOyglVxyXG4gIGl0KCfqsJDsoJUg6riw66GdIOygnOy2nCDsi6TtjKgg7IucIOyXkOufrCDrqZTsi5zsp4DqsIAg7ZGc7Iuc65CoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8gQVBJIOyYpOulmCDshKTsoJVcclxuICAgIChlbW90aW9uU2VydmljZS5yZWNvcmRFbW90aW9ucyBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZSh7XHJcbiAgICAgIHJlc3BvbnNlOiB7IGRhdGE6IHsgbWVzc2FnZTogJ+qwkOyglSDquLDroZ0g7Iuk7YyoJyB9IH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkLCBmaW5kQnlUZXN0SWQgfSA9IHJlbmRlcig8RW1vdGlvbkxvZ1NjcmVlbiBuYXZpZ2F0aW9uPXttb2NrTmF2aWdhdGlvbn0gLz4pO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgY29uc3QgY2hpcHMgPSBnZXRBbGxCeVRlc3RJZCgnZW1vdGlvbi1jaGlwJyk7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhjaGlwc1swXSk7IC8vIOyyqyDrsojsp7gg7LmpKO2WieuztSkg7YG066atXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvCDtgbTrpq1cclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGF3YWl0IGZpbmRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgIFxyXG4gICAgLy8gQVBJIO2YuOy2nCDtmZXsnbhcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBleHBlY3QoZW1vdGlvblNlcnZpY2UucmVjb3JkRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyBBbGVydCDtmLjstpwg7ZmV7J24XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KG1vY2tBbGVydC5hbGVydCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ+yYpOulmCcsICfqsJDsoJUg6riw66GdIOyLpO2MqCcpO1xyXG4gICAgfSk7XHJcbiAgfSwgMzAwMDApO1xyXG5cclxuICAvLyDsg4jroZzsmrQg7YWM7Iqk7Yq4IC0g6rCQ7KCVIOyEoO2DnSDtlbTsoJwg7YWM7Iqk7Yq4IC0g7IiY7KCVXHJcbiAgaXQoJ+qwkOygleydhCDshKDtg53tlojri6TqsIAg64uk7IucIO2BtOumre2VmOuptCDshKDtg53snbQg7ZW07KCc65CoJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCwgZmluZEJ5VGVzdElkIH0gPSByZW5kZXIoPEVtb3Rpb25Mb2dTY3JlZW4gbmF2aWdhdGlvbj17bW9ja05hdmlnYXRpb259IC8+KTtcclxuICAgIFxyXG4gICAgbGV0IGNoaXBzO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgY2hpcHMgPSBnZXRBbGxCeVRlc3RJZCgnZW1vdGlvbi1jaGlwJyk7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhjaGlwc1swXSk7IC8vIOyyqyDrsojsp7gg7LmpKO2WieuztSkg7YG066atXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g7KCc7LacIOuyhO2KvOydtCDtmZzshLHtmZTrkKhcclxuICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGF3YWl0IGZpbmRCeVRlc3RJZCgnZW1vdGlvbi1zdWJtaXQtYnV0dG9uJyk7XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgZXhwZWN0KHN1Ym1pdEJ1dHRvbi5wcm9wcy5hY2Nlc3NpYmlsaXR5U3RhdGUuZGlzYWJsZWQpLnRvQmVGYWxzeSgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOqwkOyglSDri6Tsi5wg7YG066at7ZW07IScIOyEoO2DnSDtlbTsoJxcclxuICAgIGZpcmVFdmVudC5wcmVzcyhjaGlwc1swXSk7XHJcbiAgICBcclxuICAgIC8vIOygnOy2nCDrsoTtirzsnbQg64uk7IucIOu5hO2ZnOyEse2ZlOuQqFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzdWJtaXRCdXR0b24ucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlLmRpc2FibGVkKS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KTtcclxuICB9LCAzMDAwMCk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBWUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFlBQU07RUFDcEMsSUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0VBQzlCLElBQUFDLFFBQUEsR0FBeUNELE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBeERFLGdCQUFnQixHQUFBRCxRQUFBLENBQWhCQyxnQkFBZ0I7SUFBRUMsSUFBSSxHQUFBRixRQUFBLENBQUpFLElBQUk7SUFBRUMsSUFBSSxHQUFBSCxRQUFBLENBQUpHLElBQUk7RUFFcEMsT0FBTztJQUNMQyxJQUFJLEVBQUUsU0FBTkEsSUFBSUEsQ0FBQUMsSUFBQTtNQUFBLElBQUtDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO1FBQUVDLE9BQU8sR0FBQUYsSUFBQSxDQUFQRSxPQUFPO1FBQUVDLE1BQU0sR0FBQUgsSUFBQSxDQUFORyxNQUFNO1FBQUVDLEtBQUssR0FBQUosSUFBQSxDQUFMSSxLQUFLO01BQUEsT0FDdkMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNWLGdCQUFnQjtRQUFDTSxPQUFPLEVBQUVBLE9BQVE7UUFBQ0MsTUFBTSxFQUFFQSxNQUFPO1FBQUNDLEtBQUssRUFBRUEsS0FBTTtRQUFBSCxRQUFBLEVBQy9ELElBQUFJLFdBQUEsQ0FBQUMsR0FBQSxFQUFDVCxJQUFJO1VBQUFJLFFBQUEsRUFBRUE7UUFBUSxDQUFPO01BQUMsQ0FDUCxDQUFDO0lBQUEsQ0FDcEI7SUFDRE0sTUFBTSxFQUFFQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQ2IsZ0JBQWdCO0lBQzNEYyxTQUFTLEVBQUVGLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDQyxTQUFTO0lBQ3ZEQyxNQUFNLEVBQUUsU0FBUkEsTUFBTUEsQ0FBQUMsS0FBQTtNQUFBLElBQUtYLFFBQVEsR0FBQVcsS0FBQSxDQUFSWCxRQUFRO01BQUEsT0FBTyxJQUFBSSxXQUFBLENBQUFDLEdBQUEsRUFBQUQsV0FBQSxDQUFBUSxRQUFBO1FBQUFaLFFBQUEsRUFBR0E7TUFBUSxDQUFHLENBQUM7SUFBQTtJQUN6Q2EsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUFDLEtBQUE7TUFBQSxJQUFLZCxRQUFRLEdBQUFjLEtBQUEsQ0FBUmQsUUFBUTtNQUFBLE9BQU8sSUFBQUksV0FBQSxDQUFBQyxHQUFBLEVBQUFELFdBQUEsQ0FBQVEsUUFBQTtRQUFBWixRQUFBLEVBQUdBO01BQVEsQ0FBRyxDQUFDO0lBQUE7RUFDN0MsQ0FBQztBQUNILENBQUMsQ0FBQztBQUdGVixXQUFBLEdBQUtDLElBQUksNkNBQTZDO0VBQUEsT0FBTztJQUMzRHdCLGNBQWMsRUFBRVIsSUFBSSxDQUFDUyxFQUFFLENBQUMsQ0FBQztJQUN6QkMsY0FBYyxFQUFFVixJQUFJLENBQUNTLEVBQUUsQ0FBQztFQUMxQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUUsc0JBQUEsR0FBQXpCLE9BQUE7QUFBQSxJQUFBMEIsa0JBQUEsR0FBQUQsc0JBQUEsQ0FBQXpCLE9BQUE7QUFqQ0osSUFBQTJCLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQXpCLE9BQUE7QUFDQSxJQUFBNEIsWUFBQSxHQUFBNUIsT0FBQTtBQUNBLElBQUE2QixpQkFBQSxHQUFBSixzQkFBQSxDQUFBekIsT0FBQTtBQUNBLElBQUE4QixlQUFBLEdBQUFMLHNCQUFBLENBQUF6QixPQUFBO0FBQXNFLElBQUFXLFdBQUEsR0FBQVgsT0FBQTtBQUFBLFNBQUFILFlBQUE7RUFBQSxJQUFBa0MsU0FBQSxHQUFBL0IsT0FBQTtJQUFBYyxJQUFBLEdBQUFpQixTQUFBLENBQUFqQixJQUFBO0VBQUFqQixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBaUIsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBR3RFLElBQU1rQixTQUFTLEdBQUc7RUFDaEJDLEtBQUssRUFBRW5CLElBQUksQ0FBQ1MsRUFBRSxDQUFDO0FBQ2pCLENBQUM7QUFDRFcsTUFBTSxDQUFDQyxLQUFLLEdBQUdILFNBQVM7QUEyQnhCLElBQU1JLGNBQWMsR0FBRztFQUFFQyxNQUFNLEVBQUV2QixJQUFJLENBQUNTLEVBQUUsQ0FBQztBQUFFLENBQUM7QUFHNUMsSUFBTWUsWUFBWSxHQUFHLENBQ25CO0VBQUVDLFVBQVUsRUFBRSxDQUFDO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLElBQUksRUFBRSx3QkFBd0I7RUFBRUMsS0FBSyxFQUFFO0FBQVUsQ0FBQyxFQUMvRTtFQUFFSCxVQUFVLEVBQUUsQ0FBQztFQUFFQyxJQUFJLEVBQUUsSUFBSTtFQUFFQyxJQUFJLEVBQUUsWUFBWTtFQUFFQyxLQUFLLEVBQUU7QUFBVSxDQUFDLEVBQ25FO0VBQUVILFVBQVUsRUFBRSxDQUFDO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLElBQUksRUFBRSxZQUFZO0VBQUVDLEtBQUssRUFBRTtBQUFVLENBQUMsRUFDbkU7RUFBRUgsVUFBVSxFQUFFLENBQUM7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsSUFBSSxFQUFFLGVBQWU7RUFBRUMsS0FBSyxFQUFFO0FBQVUsQ0FBQyxFQUN0RTtFQUFFSCxVQUFVLEVBQUUsQ0FBQztFQUFFQyxJQUFJLEVBQUUsSUFBSTtFQUFFQyxJQUFJLEVBQUUsc0JBQXNCO0VBQUVDLEtBQUssRUFBRTtBQUFVLENBQUMsRUFDN0U7RUFBRUgsVUFBVSxFQUFFLENBQUM7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsSUFBSSxFQUFFLGVBQWU7RUFBRUMsS0FBSyxFQUFFO0FBQVUsQ0FBQyxFQUN0RTtFQUFFSCxVQUFVLEVBQUUsQ0FBQztFQUFFQyxJQUFJLEVBQUUsSUFBSTtFQUFFQyxJQUFJLEVBQUUsd0JBQXdCO0VBQUVDLEtBQUssRUFBRTtBQUFVLENBQUMsRUFDL0U7RUFBRUgsVUFBVSxFQUFFLENBQUM7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsSUFBSSxFQUFFLDBCQUEwQjtFQUFFQyxLQUFLLEVBQUU7QUFBVSxDQUFDLEVBQ2pGO0VBQUVILFVBQVUsRUFBRSxDQUFDO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLElBQUksRUFBRSxnQkFBZ0I7RUFBRUMsS0FBSyxFQUFFO0FBQVUsQ0FBQyxFQUN2RTtFQUFFSCxVQUFVLEVBQUUsRUFBRTtFQUFFQyxJQUFJLEVBQUUsSUFBSTtFQUFFQyxJQUFJLEVBQUUsaUJBQWlCO0VBQUVDLEtBQUssRUFBRTtBQUFVLENBQUMsRUFDekU7RUFBRUgsVUFBVSxFQUFFLEVBQUU7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsSUFBSSxFQUFFLGdCQUFnQjtFQUFFQyxLQUFLLEVBQUU7QUFBVSxDQUFDLEVBQ3hFO0VBQUVILFVBQVUsRUFBRSxFQUFFO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLElBQUksRUFBRSxjQUFjO0VBQUVDLEtBQUssRUFBRTtBQUFVLENBQUMsQ0FDdkU7QUFFREMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckNDLFVBQVUsQ0FBQyxZQUFNO0lBQ2Y5QixJQUFJLENBQUMrQixhQUFhLENBQUMsQ0FBQztJQUNwQmIsU0FBUyxDQUFDQyxLQUFLLENBQUNhLFNBQVMsQ0FBQyxDQUFDO0lBRzFCQyx1QkFBYyxDQUFDekIsY0FBYyxDQUFlMEIsaUJBQWlCLENBQUM7TUFDN0RDLElBQUksRUFBRTtRQUNKQyxNQUFNLEVBQUUsU0FBUztRQUNqQkQsSUFBSSxFQUFFWDtNQUNSO0lBQ0YsQ0FBQyxDQUFDO0lBQ0RTLHVCQUFjLENBQUN2QixjQUFjLENBQWV3QixpQkFBaUIsQ0FBQztNQUFFRSxNQUFNLEVBQUU7SUFBSSxDQUFDLENBQUM7RUFDakYsQ0FBQyxDQUFDO0VBSUZDLEVBQUUsQ0FBQyxhQUFhLE1BQUF6QixrQkFBQSxDQUFBMEIsT0FBQSxFQUFFLGFBQVk7SUFDNUIsSUFBQUMsT0FBQSxHQUFrQyxJQUFBQyxtQkFBTSxFQUFDLElBQUEzQyxXQUFBLENBQUFDLEdBQUEsRUFBQ2lCLGlCQUFBLENBQUF1QixPQUFnQjtRQUFDRyxVQUFVLEVBQUVuQjtNQUFlLENBQUUsQ0FBQyxDQUFDO01BQWxGb0IsU0FBUyxHQUFBSCxPQUFBLENBQVRHLFNBQVM7TUFBRUMsVUFBVSxHQUFBSixPQUFBLENBQVZJLFVBQVU7SUFHN0IsTUFBTUEsVUFBVSxDQUFDLFFBQVEsQ0FBQztJQUMxQixNQUFNQSxVQUFVLENBQUMscUJBQXFCLENBQUM7RUFDekMsQ0FBQyxHQUFFLEtBQUssQ0FBQztFQUdUTixFQUFFLENBQUMsb0JBQW9CLE1BQUF6QixrQkFBQSxDQUFBMEIsT0FBQSxFQUFFLGFBQVk7SUFDbkMsSUFBQU0sUUFBQSxHQUF5QyxJQUFBSixtQkFBTSxFQUFDLElBQUEzQyxXQUFBLENBQUFDLEdBQUEsRUFBQ2lCLGlCQUFBLENBQUF1QixPQUFnQjtRQUFDRyxVQUFVLEVBQUVuQjtNQUFlLENBQUUsQ0FBQyxDQUFDO01BQXpGdUIsWUFBWSxHQUFBRCxRQUFBLENBQVpDLFlBQVk7TUFBRUMsY0FBYyxHQUFBRixRQUFBLENBQWRFLGNBQWM7SUFHcEMsTUFBTSxJQUFBQyxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsS0FBSyxHQUFHRixjQUFjLENBQUMsY0FBYyxDQUFDO01BQzVDRyxNQUFNLENBQUNELEtBQUssQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQzNCLFlBQVksQ0FBQzBCLE1BQU0sQ0FBQztJQUNoRCxDQUFDLENBQUM7RUFDSixDQUFDLEdBQUUsS0FBSyxDQUFDO0VBTVRiLEVBQUUsQ0FBQyx1QkFBdUIsTUFBQXpCLGtCQUFBLENBQUEwQixPQUFBLEVBQUUsYUFBWTtJQUN0QyxJQUFBYyxRQUFBLEdBQW9ELElBQUFaLG1CQUFNLEVBQUMsSUFBQTNDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaUIsaUJBQUEsQ0FBQXVCLE9BQWdCO1FBQUNHLFVBQVUsRUFBRW5CO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBcEd3QixjQUFjLEdBQUFNLFFBQUEsQ0FBZE4sY0FBYztNQUFFRCxZQUFZLEdBQUFPLFFBQUEsQ0FBWlAsWUFBWTtNQUFFUSxTQUFTLEdBQUFELFFBQUEsQ0FBVEMsU0FBUztJQUcvQyxNQUFNLElBQUFOLG9CQUFPLEVBQUMsWUFBTTtNQUNsQixJQUFNQyxLQUFLLEdBQUdGLGNBQWMsQ0FBQyxjQUFjLENBQUM7TUFDNUNRLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQztJQUdGLElBQU1RLFlBQVksU0FBU1gsWUFBWSxDQUFDLHVCQUF1QixDQUFDO0lBQ2hFLE1BQU0sSUFBQUUsb0JBQU8sRUFBQyxZQUFNO01BQ2xCRSxNQUFNLENBQUNPLFlBQVksQ0FBQ0MsS0FBSyxDQUFDQyxrQkFBa0IsQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQztFQUNKLENBQUMsR0FBRSxLQUFLLENBQUM7RUFHVHZCLEVBQUUsQ0FBQyxpQkFBaUIsTUFBQXpCLGtCQUFBLENBQUEwQixPQUFBLEVBQUUsYUFBWTtJQUNoQyxJQUFBdUIsUUFBQSxHQUF5QyxJQUFBckIsbUJBQU0sRUFBQyxJQUFBM0MsV0FBQSxDQUFBQyxHQUFBLEVBQUNpQixpQkFBQSxDQUFBdUIsT0FBZ0I7UUFBQ0csVUFBVSxFQUFFbkI7TUFBZSxDQUFFLENBQUMsQ0FBQztNQUF6RndCLGNBQWMsR0FBQWUsUUFBQSxDQUFkZixjQUFjO01BQUVELFlBQVksR0FBQWdCLFFBQUEsQ0FBWmhCLFlBQVk7SUFHcEMsTUFBTSxJQUFBRSxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsS0FBSyxHQUFHRixjQUFjLENBQUMsY0FBYyxDQUFDO01BQzVDUSxzQkFBUyxDQUFDQyxLQUFLLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztNQUN6Qk0sc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDUCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDekJNLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQztJQUdGLElBQU1RLFlBQVksU0FBU1gsWUFBWSxDQUFDLHVCQUF1QixDQUFDO0lBQ2hFLE1BQU0sSUFBQUUsb0JBQU8sRUFBQyxZQUFNO01BQ2xCRSxNQUFNLENBQUNPLFlBQVksQ0FBQ0MsS0FBSyxDQUFDQyxrQkFBa0IsQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQztFQUNKLENBQUMsR0FBRSxLQUFLLENBQUM7RUFHVHZCLEVBQUUsQ0FBQyxZQUFZLE1BQUF6QixrQkFBQSxDQUFBMEIsT0FBQSxFQUFFLGFBQVk7SUFDM0IsSUFBQXdCLFFBQUEsR0FBeUIsSUFBQXRCLG1CQUFNLEVBQUMsSUFBQTNDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaUIsaUJBQUEsQ0FBQXVCLE9BQWdCO1FBQUNHLFVBQVUsRUFBRW5CO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBekV1QixZQUFZLEdBQUFpQixRQUFBLENBQVpqQixZQUFZO0lBRXBCLElBQU1rQixTQUFTLFNBQVNsQixZQUFZLENBQUMsb0JBQW9CLENBQUM7SUFDMURJLE1BQU0sQ0FBQ2MsU0FBUyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0lBRTlCVixzQkFBUyxDQUFDVyxVQUFVLENBQUNGLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQztFQUN0RCxDQUFDLEdBQUUsS0FBSyxDQUFDO0VBR1QxQixFQUFFLENBQUMscUJBQXFCLE1BQUF6QixrQkFBQSxDQUFBMEIsT0FBQSxFQUFFLGFBQVk7SUFDcEMsSUFBQTRCLFFBQUEsR0FBeUMsSUFBQTFCLG1CQUFNLEVBQUMsSUFBQTNDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaUIsaUJBQUEsQ0FBQXVCLE9BQWdCO1FBQUNHLFVBQVUsRUFBRW5CO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBekZ3QixjQUFjLEdBQUFvQixRQUFBLENBQWRwQixjQUFjO01BQUVELFlBQVksR0FBQXFCLFFBQUEsQ0FBWnJCLFlBQVk7SUFHcEMsTUFBTSxJQUFBRSxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsS0FBSyxHQUFHRixjQUFjLENBQUMsY0FBYyxDQUFDO01BQzVDUSxzQkFBUyxDQUFDQyxLQUFLLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFHRixJQUFNUSxZQUFZLFNBQVNYLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQztJQUNoRSxNQUFNLElBQUFFLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkUsTUFBTSxDQUFDTyxZQUFZLENBQUNDLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUNDLFFBQVEsQ0FBQyxDQUFDQyxTQUFTLENBQUMsQ0FBQztJQUNwRSxDQUFDLENBQUM7RUFDSixDQUFDLEdBQUUsS0FBSyxDQUFDO0VBR1R2QixFQUFFLENBQUMsa0NBQWtDLE1BQUF6QixrQkFBQSxDQUFBMEIsT0FBQSxFQUFFLGFBQVk7SUFDakQsSUFBQTZCLFFBQUEsR0FBeUMsSUFBQTNCLG1CQUFNLEVBQUMsSUFBQTNDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaUIsaUJBQUEsQ0FBQXVCLE9BQWdCO1FBQUNHLFVBQVUsRUFBRW5CO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBekZ3QixjQUFjLEdBQUFxQixRQUFBLENBQWRyQixjQUFjO01BQUVELFlBQVksR0FBQXNCLFFBQUEsQ0FBWnRCLFlBQVk7SUFHcEMsTUFBTSxJQUFBRSxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsS0FBSyxHQUFHRixjQUFjLENBQUMsY0FBYyxDQUFDO01BQzVDUSxzQkFBUyxDQUFDQyxLQUFLLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFHRixJQUFNUSxZQUFZLFNBQVNYLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQztJQUNoRVMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxZQUFZLENBQUM7SUFHN0IsTUFBTSxJQUFBVCxvQkFBTyxFQUFDLFlBQU07TUFDbEJFLE1BQU0sQ0FBQ2hCLHVCQUFjLENBQUN2QixjQUFjLENBQUMsQ0FBQzBELGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDO0lBR0ZuQixNQUFNLENBQUMvQixTQUFTLENBQUNDLEtBQUssQ0FBQyxDQUFDa0Qsb0JBQW9CLENBQzFDLFVBQVUsRUFDVix3QkFBd0IsRUFDeEJwQixNQUFNLENBQUNxQixRQUFRLENBQUMsQ0FDbEIsQ0FBQztJQUdELElBQU1DLFNBQVMsR0FBR3JELFNBQVMsQ0FBQ0MsS0FBSyxDQUFDbkMsSUFBSSxDQUFDd0YsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvQyxJQUFNQyxhQUFhLEdBQUdGLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckNFLGFBQWEsQ0FBQy9FLE9BQU8sQ0FBQyxDQUFDO0lBR3ZCdUQsTUFBTSxDQUFDM0IsY0FBYyxDQUFDQyxNQUFNLENBQUMsQ0FBQzZDLGdCQUFnQixDQUFDLENBQUM7RUFDbEQsQ0FBQyxHQUFFLEtBQUssQ0FBQztFQUdUL0IsRUFBRSxDQUFDLDJCQUEyQixNQUFBekIsa0JBQUEsQ0FBQTBCLE9BQUEsRUFBRSxhQUFZO0lBRXpDTCx1QkFBYyxDQUFDdkIsY0FBYyxDQUFlZ0UscUJBQXFCLENBQUM7TUFDakVDLFFBQVEsRUFBRTtRQUFFeEMsSUFBSSxFQUFFO1VBQUV5QyxPQUFPLEVBQUU7UUFBVztNQUFFO0lBQzVDLENBQUMsQ0FBQztJQUVGLElBQUFDLFFBQUEsR0FBeUMsSUFBQXJDLG1CQUFNLEVBQUMsSUFBQTNDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaUIsaUJBQUEsQ0FBQXVCLE9BQWdCO1FBQUNHLFVBQVUsRUFBRW5CO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBekZ3QixjQUFjLEdBQUErQixRQUFBLENBQWQvQixjQUFjO01BQUVELFlBQVksR0FBQWdDLFFBQUEsQ0FBWmhDLFlBQVk7SUFHcEMsTUFBTSxJQUFBRSxvQkFBTyxFQUFDLFlBQU07TUFDbEIsSUFBTUMsS0FBSyxHQUFHRixjQUFjLENBQUMsY0FBYyxDQUFDO01BQzVDUSxzQkFBUyxDQUFDQyxLQUFLLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFHRixJQUFNUSxZQUFZLFNBQVNYLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQztJQUNoRVMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxZQUFZLENBQUM7SUFHN0IsTUFBTSxJQUFBVCxvQkFBTyxFQUFDLFlBQU07TUFDbEJFLE1BQU0sQ0FBQ2hCLHVCQUFjLENBQUN2QixjQUFjLENBQUMsQ0FBQzBELGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDO0lBR0YsTUFBTSxJQUFBckIsb0JBQU8sRUFBQyxZQUFNO01BQ2xCRSxNQUFNLENBQUMvQixTQUFTLENBQUNDLEtBQUssQ0FBQyxDQUFDa0Qsb0JBQW9CLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQztJQUNoRSxDQUFDLENBQUM7RUFDSixDQUFDLEdBQUUsS0FBSyxDQUFDO0VBR1RoQyxFQUFFLENBQUMsMkJBQTJCLE1BQUF6QixrQkFBQSxDQUFBMEIsT0FBQSxFQUFFLGFBQVk7SUFDMUMsSUFBQXdDLFFBQUEsR0FBeUMsSUFBQXRDLG1CQUFNLEVBQUMsSUFBQTNDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDaUIsaUJBQUEsQ0FBQXVCLE9BQWdCO1FBQUNHLFVBQVUsRUFBRW5CO01BQWUsQ0FBRSxDQUFDLENBQUM7TUFBekZ3QixjQUFjLEdBQUFnQyxRQUFBLENBQWRoQyxjQUFjO01BQUVELFlBQVksR0FBQWlDLFFBQUEsQ0FBWmpDLFlBQVk7SUFFcEMsSUFBSUcsS0FBSztJQUdULE1BQU0sSUFBQUQsb0JBQU8sRUFBQyxZQUFNO01BQ2xCQyxLQUFLLEdBQUdGLGNBQWMsQ0FBQyxjQUFjLENBQUM7TUFDdENRLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQztJQUdGLElBQU1RLFlBQVksU0FBU1gsWUFBWSxDQUFDLHVCQUF1QixDQUFDO0lBQ2hFLE1BQU0sSUFBQUUsb0JBQU8sRUFBQyxZQUFNO01BQ2xCRSxNQUFNLENBQUNPLFlBQVksQ0FBQ0MsS0FBSyxDQUFDQyxrQkFBa0IsQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQztJQUdGTixzQkFBUyxDQUFDQyxLQUFLLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUd6QixNQUFNLElBQUFELG9CQUFPLEVBQUMsWUFBTTtNQUNsQkUsTUFBTSxDQUFDTyxZQUFZLENBQUNDLEtBQUssQ0FBQ0Msa0JBQWtCLENBQUNDLFFBQVEsQ0FBQyxDQUFDSyxVQUFVLENBQUMsQ0FBQztJQUNyRSxDQUFDLENBQUM7RUFDSixDQUFDLEdBQUUsS0FBSyxDQUFDO0FBQ1gsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119