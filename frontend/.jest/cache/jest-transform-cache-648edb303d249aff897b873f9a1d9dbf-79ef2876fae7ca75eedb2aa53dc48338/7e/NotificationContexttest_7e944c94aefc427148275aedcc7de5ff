2435fc510d1dbb5768092a99b9957ce3
_getJestObj().mock("../../src/services/api/notificationService", function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    deleteNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestComponent = function TestComponent() {
  var _useNotification = (0, _NotificationContext.useNotification)(),
    notifications = _useNotification.notifications,
    unreadCount = _useNotification.unreadCount,
    isLoading = _useNotification.isLoading,
    error = _useNotification.error,
    markAsRead = _useNotification.markAsRead,
    markAllAsRead = _useNotification.markAllAsRead,
    deleteNotification = _useNotification.deleteNotification;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      testID: "loading",
      children: isLoading ? 'loading' : 'not-loading'
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      testID: "error",
      children: error || 'no-error'
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      testID: "unread-count",
      children: unreadCount.toString()
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      testID: "notifications-count",
      children: notifications.length.toString()
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "mark-read",
      onPress: function onPress() {
        return markAsRead(1);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Mark Read"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "mark-all-read",
      onPress: function onPress() {
        return markAllAsRead();
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Mark All Read"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      testID: "delete-notification",
      onPress: function onPress() {
        return deleteNotification(1);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Delete"
      })
    })]
  });
};
describe('NotificationContext', function () {
  var mockNotifications = [{
    id: 1,
    user_id: 1,
    content: 'Test notification 1',
    notification_type: 'like',
    is_read: false,
    created_at: '2024-01-01T00:00:00Z'
  }, {
    id: 2,
    user_id: 1,
    content: 'Test notification 2',
    notification_type: 'comment',
    is_read: true,
    created_at: '2024-01-02T00:00:00Z'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _notificationService.default.getNotifications.mockResolvedValue({
      data: mockNotifications
    });
    _notificationService.default.markAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.deleteNotification.mockResolvedValue({
      success: true
    });
    global.setInterval = jest.fn().mockReturnValue(123);
    global.clearInterval = jest.fn();
  });
  it('renders without crashing', function () {
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Test"
      })
    }));
    expect(true).toBe(true);
  });
  it('initializes with correct data', (0, _asyncToGenerator2.default)(function* () {
    var resolvePromise;
    _notificationService.default.getNotifications.mockImplementation(function () {
      return new Promise(function (resolve) {
        resolvePromise = resolve;
      });
    });
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('notifications-count').props.children).toBe('0');
    resolvePromise({
      data: mockNotifications
    });
    yield (0, _reactNative2.waitFor)(function () {
      expect(getByTestId('notifications-count').props.children).toBe('2');
    });
    expect(getByTestId('unread-count').props.children).toBe('1');
    expect(getByTestId('error').props.children).toBe('no-error');
  }));
  it('can mark all notifications as read', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_notificationService.default.getNotifications).toHaveBeenCalled();
    });
    _reactNative2.fireEvent.press(getByTestId('mark-all-read'));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    });
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('can delete a notification', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_notificationService.default.getNotifications).toHaveBeenCalled();
    });
    _reactNative2.fireEvent.press(getByTestId('delete-notification'));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_notificationService.default.deleteNotification).toHaveBeenCalledWith(1);
    });
    expect(_notificationService.default.getNotifications).toHaveBeenCalledTimes(2);
  }));
  it('handles errors when fetching notifications', (0, _asyncToGenerator2.default)(function* () {
    _notificationService.default.getNotifications.mockRejectedValue(new Error('Failed to fetch notifications'));
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(getByTestId('error').props.children).toBe('알림을 불러오는데 실패했습니다.');
    });
  }));
  it('shows loading state', (0, _asyncToGenerator2.default)(function* () {
    var resolvePromise;
    _notificationService.default.getNotifications.mockImplementation(function () {
      return new Promise(function (resolve) {
        resolvePromise = resolve;
      });
    });
    var _render5 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_NotificationContext.NotificationProvider, {
        children: (0, _jsxRuntime.jsx)(TestComponent, {})
      })),
      getByTestId = _render5.getByTestId;
    expect(getByTestId('loading').props.children).toBe('loading');
    resolvePromise({
      data: mockNotifications
    });
    yield (0, _reactNative2.waitFor)(function () {
      expect(getByTestId('loading').props.children).toBe('not-loading');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,