{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_reactNative2","_jsxRuntime","ResponsiveComponent","_Dimensions$get","Dimensions","get","width","isLargeScreen","isTablet","styles","StyleSheet","create","container","padding","maxWidth","text","fontSize","fontWeight","jsxs","View","testID","style","children","jsx","Text","describe","originalDimensionsGet","beforeEach","afterEach","test","jest","fn","dim","height","scale","fontScale","_render","render","getByTestId","queryByTestId","expect","props","toEqual","toBeTruthy","toBeNull","_render2","_render3","_render4","rerender"],"sources":["ResponsiveRendering.test.tsx"],"sourcesContent":["// __tests__/responsive/ResponsiveRendering.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { Dimensions, View, Text, StyleSheet } from 'react-native';\r\n\r\n// 테스트할 실제 반응형 컴포넌트 구현\r\nfunction ResponsiveComponent() {\r\n  const { width } = Dimensions.get('window');\r\n  const isLargeScreen = width >= 768;\r\n  const isTablet = width >= 480 && width < 768;\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      padding: isLargeScreen ? 20 : (isTablet ? 15 : 10),\r\n      maxWidth: isLargeScreen ? 1024 : (isTablet ? 640 : '100%'),\r\n    },\r\n    text: {\r\n      fontSize: isLargeScreen ? 18 : (isTablet ? 16 : 14),\r\n      fontWeight: isLargeScreen ? 'bold' : 'normal',\r\n    }\r\n  });\r\n  \r\n  return (\r\n    <View testID=\"responsive-container\" style={styles.container}>\r\n      <Text testID=\"responsive-text\" style={styles.text}>\r\n        반응형 컴포넌트\r\n      </Text>\r\n      {isLargeScreen && (\r\n        <View testID=\"large-screen-only\">\r\n          <Text>대형 화면에서만 보이는 콘텐츠</Text>\r\n        </View>\r\n      )}\r\n      {isTablet && (\r\n        <View testID=\"tablet-only\">\r\n          <Text>태블릿 화면에서만 보이는 콘텐츠</Text>\r\n        </View>\r\n      )}\r\n      {width < 480 && (\r\n        <View testID=\"mobile-only\">\r\n          <Text>모바일 화면에서만 보이는 콘텐츠</Text>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\n// 실제 테스트 코드\r\ndescribe('반응형 컴포넌트 테스트', () => {\r\n  let originalDimensionsGet;\r\n  \r\n  beforeEach(() => {\r\n    originalDimensionsGet = Dimensions.get;\r\n  });\r\n  \r\n  afterEach(() => {\r\n    Dimensions.get = originalDimensionsGet;\r\n  });\r\n  \r\n  test('모바일 화면 크기에서 적절한 스타일과 컴포넌트가 렌더링되어야 함', () => {\r\n    // 모바일 화면 크기 모킹\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 360, height: 640, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    const { getByTestId, queryByTestId } = render(<ResponsiveComponent />);\r\n    \r\n    // 컨테이너 스타일 테스트\r\n    const container = getByTestId('responsive-container');\r\n    expect(container.props.style).toEqual({\r\n      padding: 10,\r\n      maxWidth: '100%'\r\n    });\r\n    \r\n    // 텍스트 스타일 테스트\r\n    const text = getByTestId('responsive-text');\r\n    expect(text.props.style).toEqual({\r\n      fontSize: 14,\r\n      fontWeight: 'normal'\r\n    });\r\n    \r\n    // 조건부 렌더링 테스트\r\n    expect(queryByTestId('mobile-only')).toBeTruthy();\r\n    expect(queryByTestId('tablet-only')).toBeNull();\r\n    expect(queryByTestId('large-screen-only')).toBeNull();\r\n  });\r\n  \r\n  test('태블릿 화면 크기에서 적절한 스타일과 컴포넌트가 렌더링되어야 함', () => {\r\n    // 태블릿 화면 크기 모킹\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 600, height: 800, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    const { getByTestId, queryByTestId } = render(<ResponsiveComponent />);\r\n    \r\n    // 컨테이너 스타일 테스트\r\n    const container = getByTestId('responsive-container');\r\n    expect(container.props.style).toEqual({\r\n      padding: 15,\r\n      maxWidth: 640\r\n    });\r\n    \r\n    // 텍스트 스타일 테스트\r\n    const text = getByTestId('responsive-text');\r\n    expect(text.props.style).toEqual({\r\n      fontSize: 16,\r\n      fontWeight: 'normal'\r\n    });\r\n    \r\n    // 조건부 렌더링 테스트\r\n    expect(queryByTestId('mobile-only')).toBeNull();\r\n    expect(queryByTestId('tablet-only')).toBeTruthy();\r\n    expect(queryByTestId('large-screen-only')).toBeNull();\r\n  });\r\n  \r\n  test('대형 화면 크기에서 적절한 스타일과 컴포넌트가 렌더링되어야 함', () => {\r\n    // 대형 화면 크기 모킹\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 1024, height: 1366, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    const { getByTestId, queryByTestId } = render(<ResponsiveComponent />);\r\n    \r\n    // 컨테이너 스타일 테스트\r\n    const container = getByTestId('responsive-container');\r\n    expect(container.props.style).toEqual({\r\n      padding: 20,\r\n      maxWidth: 1024\r\n    });\r\n    \r\n    // 텍스트 스타일 테스트\r\n    const text = getByTestId('responsive-text');\r\n    expect(text.props.style).toEqual({\r\n      fontSize: 18,\r\n      fontWeight: 'bold'\r\n    });\r\n    \r\n    // 조건부 렌더링 테스트\r\n    expect(queryByTestId('mobile-only')).toBeNull();\r\n    expect(queryByTestId('tablet-only')).toBeNull();\r\n    expect(queryByTestId('large-screen-only')).toBeTruthy();\r\n  });\r\n  \r\n  test('화면 크기가 변경될 때 컴포넌트가 올바르게 업데이트되어야 함', () => {\r\n    // 초기 모바일 화면으로 시작\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 360, height: 640, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    const { getByTestId, queryByTestId, rerender } = render(<ResponsiveComponent />);\r\n    \r\n    // 모바일 화면에서의 렌더링 확인\r\n    expect(queryByTestId('mobile-only')).toBeTruthy();\r\n    \r\n    // 화면 크기를 태블릿으로 변경\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 600, height: 800, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    // 컴포넌트 다시 렌더링\r\n    rerender(<ResponsiveComponent />);\r\n    \r\n    // 태블릿 화면에서의 렌더링 확인\r\n    expect(queryByTestId('mobile-only')).toBeNull();\r\n    expect(queryByTestId('tablet-only')).toBeTruthy();\r\n    \r\n    // 화면 크기를 대형 화면으로 변경\r\n    Dimensions.get = jest.fn((dim) => {\r\n      if (dim === 'window' || dim === 'screen') {\r\n        return { width: 1024, height: 1366, scale: 1, fontScale: 1 };\r\n      }\r\n      return originalDimensionsGet(dim);\r\n    });\r\n    \r\n    // 컴포넌트 다시 렌더링\r\n    rerender(<ResponsiveComponent />);\r\n    \r\n    // 대형 화면에서의 렌더링 확인\r\n    expect(queryByTestId('tablet-only')).toBeNull();\r\n    expect(queryByTestId('large-screen-only')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}