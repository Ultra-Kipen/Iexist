43b7ed544d8f823c670c73a066324a26
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    Text: 'Text',
    Button: 'Button',
    TextInput: 'TextInput',
    TouchableOpacity: 'TouchableOpacity',
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      }),
      absoluteFill: {},
      hairlineWidth: 1
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      })
    },
    NativeModules: {},
    DevMenu: {
      show: jest.fn()
    },
    I18nManager: {
      isRTL: false,
      getConstants: function getConstants() {
        return {
          isRTL: false
        };
      }
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    NavigationContainer: function NavigationContainer(_ref) {
      var children = _ref.children;
      return children;
    },
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Provider: function Provider(_ref2) {
      var children = _ref2.children;
      return children;
    }
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    createPost: jest.fn(),
    getPosts: jest.fn(),
    getPostById: jest.fn(),
    getMyPosts: jest.fn(),
    likePost: jest.fn(),
    addComment: jest.fn(),
    getComments: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _native = require("@react-navigation/native");
var _reactNativePaper = require("react-native-paper");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var MockPostScreen = function MockPostScreen(_ref3) {
  var route = _ref3.route,
    navigation = _ref3.navigation;
  var _ref4 = (route == null ? void 0 : route.params) || {
      postId: 1
    },
    postId = _ref4.postId;
  (0, _react.useEffect)(function () {
    _postService.default.getPostById(postId);
    _postService.default.getComments(postId);
  }, [postId]);
  var handleAddComment = function handleAddComment() {
    _postService.default.addComment(postId, {
      content: '테스트 댓글입니다.',
      is_anonymous: false
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uAC8C\uC2DC\uBB3C \uC0C1\uC138 \uD654\uBA74"
    }), (0, _jsxRuntime.jsxs)(_reactNative2.Text, {
      children: ["\uAC8C\uC2DC\uBB3C ID: ", postId]
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uD14C\uC2A4\uD2B8 \uAC8C\uC2DC\uBB3C"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      placeholder: "\uB313\uAE00\uC744 \uC785\uB825\uD558\uC138\uC694...",
      testID: "comment-input"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "\uAC8C\uC2DC",
      onPress: handleAddComment,
      testID: "submit-comment"
    })]
  });
};
var MockMyPostsScreen = function MockMyPostsScreen(_ref5) {
  var navigation = _ref5.navigation;
  (0, _react.useEffect)(function () {
    _postService.default.getMyPosts();
  }, []);
  var handleDeletePost = function handleDeletePost(postId) {
    _postService.default.deletePost(postId);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uB0B4 \uAC8C\uC2DC\uBB3C \uD654\uBA74"
    }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "post-item",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uAC8C\uC2DC\uBB3C 1"
      }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
        title: "\uC0AD\uC81C",
        onPress: function onPress() {
          return handleDeletePost(1);
        },
        testID: "delete-button"
      })]
    })]
  });
};
var MockStatisticsScreen = function MockStatisticsScreen(_ref6) {
  var navigation = _ref6.navigation;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uAC10\uC815 \uD1B5\uACC4"
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "emotion-chart",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uADF8\uB798\uD504 \uC601\uC5ED"
      })
    })]
  });
};
var testUser = {
  user_id: 1,
  username: 'testuser',
  nickname: '테스트유저',
  email: 'test@example.com'
};
var testPosts = {
  success: true,
  posts: [{
    post_id: 1,
    user_id: 1,
    content: '행복한 하루였어요',
    emotion_summary: '행복',
    emotion_ids: [1],
    image_url: null,
    is_anonymous: false,
    like_count: 5,
    comment_count: 2,
    created_at: '2025-04-10T12:00:00Z'
  }, {
    post_id: 2,
    user_id: 2,
    content: '오늘은 조금 피곤하네요',
    emotion_summary: '지침',
    emotion_ids: [8],
    image_url: null,
    is_anonymous: true,
    like_count: 3,
    comment_count: 1,
    created_at: '2025-04-10T10:30:00Z'
  }],
  total_count: 2
};
var testComments = {
  success: true,
  comments: [{
    comment_id: 1,
    post_id: 1,
    user_id: 2,
    content: '너무 좋네요!',
    is_anonymous: false,
    created_at: '2025-04-10T13:00:00Z'
  }],
  total_count: 1
};
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var TestWrapper = function TestWrapper(_ref7) {
  var children = _ref7.children;
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsx)(_reactNativePaper.Provider, {
      children: children
    })
  });
};
describe('게시물 기능 E2E 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key === 'auth_token') return Promise.resolve('fake-token');
      if (key === 'user_info') return Promise.resolve(JSON.stringify(testUser));
      return Promise.resolve(null);
    });
  });
  describe('게시물 상세 화면', function () {
    it('게시물 상세 조회 및 댓글 작성', (0, _asyncToGenerator2.default)(function* () {
      var mockGetPostById = _postService.default.getPostById;
      mockGetPostById.mockResolvedValue({
        data: {
          success: true,
          post: testPosts.posts[0]
        }
      });
      var mockGetComments = _postService.default.getComments;
      mockGetComments.mockResolvedValue({
        data: testComments
      });
      var mockAddComment = _postService.default.addComment;
      mockAddComment.mockResolvedValue({
        data: {
          success: true,
          comment_id: 2,
          message: '댓글이 성공적으로 추가되었습니다.'
        }
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MockPostScreen, {
            route: {
              params: {
                postId: 1
              }
            },
            navigation: mockNavigation
          })
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText;
      expect(getByText('게시물 ID: 1')).toBeTruthy();
      var commentInput = getByTestId('comment-input');
      _reactNative.fireEvent.changeText(commentInput, 'E2E 테스트로 작성한 댓글입니다!');
      var submitButton = getByTestId('submit-comment');
      _reactNative.fireEvent.press(submitButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAddComment).toHaveBeenCalledWith(1, expect.any(Object));
      });
    }), 10000);
  });
  describe('내 게시물 관리', function () {
    it('내 게시물 화면에서 게시물을 삭제할 수 있어야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockGetMyPosts = _postService.default.getMyPosts;
      mockGetMyPosts.mockResolvedValue({
        data: testPosts
      });
      var mockDeletePost = _postService.default.deletePost;
      mockDeletePost.mockResolvedValue({
        data: {
          success: true,
          message: '게시물이 성공적으로 삭제되었습니다.'
        }
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MockMyPostsScreen, {
            navigation: mockNavigation
          })
        })),
        getByTestId = _render2.getByTestId;
      var deleteButton = getByTestId('delete-button');
      _reactNative.fireEvent.press(deleteButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockDeletePost).toHaveBeenCalledWith(1);
      });
    }), 10000);
  });
  describe('감정 통계', function () {
    it('통계 화면에서 감정 그래프가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(MockStatisticsScreen, {
            navigation: mockNavigation
          })
        })),
        getByTestId = _render3.getByTestId,
        getByText = _render3.getByText;
      expect(getByTestId('emotion-chart')).toBeTruthy();
      expect(getByText('감정 통계')).toBeTruthy();
    }), 10000);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,