beebb48b05b3897806fa60ac857006ae
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    interceptors: {
      request: {
        use: jest.fn()
      },
      response: {
        use: jest.fn()
      }
    },
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve('test_token');
    }),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        username: 'testuser',
        nickname: 'Test User'
      },
      isAuthenticated: true,
      login: jest.fn(),
      logout: jest.fn()
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn(),
      logEmotion: jest.fn()
    })
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
_getJestObj().mock('react-native-paper', function () {
  var mockComponent = function mockComponent(name) {
    var component = function component(props) {
      return {
        $$typeof: Symbol.for('react.element'),
        type: name,
        props: props,
        _owner: null
      };
    };
    if (name === 'Card') {
      component.Title = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Card.Title',
          props: props,
          _owner: null
        };
      };
      component.Content = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Card.Content',
          props: props,
          _owner: null
        };
      };
      component.Actions = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Card.Actions',
          props: props,
          _owner: null
        };
      };
    }
    if (name === 'Avatar') {
      component.Icon = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Avatar.Icon',
          props: props,
          _owner: null
        };
      };
    }
    if (name === 'Dialog') {
      component.Title = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Dialog.Title',
          props: props,
          _owner: null
        };
      };
      component.Content = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Dialog.Content',
          props: props,
          _owner: null
        };
      };
      component.Actions = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'Dialog.Actions',
          props: props,
          _owner: null
        };
      };
    }
    if (name === 'TextInput') {
      component.Icon = function (props) {
        return {
          $$typeof: Symbol.for('react.element'),
          type: 'TextInput.Icon',
          props: props,
          _owner: null
        };
      };
    }
    return component;
  };
  return {
    Text: mockComponent('Text'),
    Button: mockComponent('Button'),
    Chip: mockComponent('Chip'),
    TextInput: mockComponent('TextInput'),
    Card: mockComponent('Card'),
    Avatar: mockComponent('Avatar'),
    IconButton: mockComponent('IconButton'),
    FAB: mockComponent('FAB'),
    Divider: mockComponent('Divider'),
    Surface: mockComponent('Surface'),
    ActivityIndicator: mockComponent('ActivityIndicator'),
    Portal: mockComponent('Portal'),
    Dialog: mockComponent('Dialog'),
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        onSurface: '#000000',
        disabled: 'rgba(0, 0, 0, 0.26)',
        placeholder: 'rgba(0, 0, 0, 0.54)',
        backdrop: 'rgba(0, 0, 0, 0.5)',
        notification: '#f50057'
      },
      dark: false,
      roundness: 4,
      animation: {
        scale: 1
      }
    })
  };
});
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  var React = require('react');
  var View = require('react-native').View;
  return function MockHomeScreen() {
    return React.createElement(View, {
      testID: 'mock-home-screen'
    }, null);
  };
});
var _reactNative = require("@testing-library/react-native");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen', function () {
  it('renders without crashing', function () {
    var _render = (0, _reactNative.render)(require("../../src/screens/HomeScreen").default),
      getByTestId = _render.getByTestId;
    expect(getByTestId('mock-home-screen')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,