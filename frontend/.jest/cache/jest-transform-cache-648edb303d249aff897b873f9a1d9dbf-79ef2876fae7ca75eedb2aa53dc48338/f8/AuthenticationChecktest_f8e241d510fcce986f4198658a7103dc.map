{"version":3,"names":["_getJestObj","mock","__esModule","default","jest","fn","useAuth","useEmotion","mockReturnValue","emotions","emotion_id","name","selectedEmotions","selectEmotion","logEmotion","_interopRequireDefault","require","_react","_reactNative","_reactNative2","AuthContextModule","_interopRequireWildcard","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_require2","MockHomeScreen","_require","auth","isAuthenticated","jsxs","View","children","jsx","Text","testID","user","nickname","describe","beforeEach","clearAllMocks","HomeScreenModule","mockImplementation","it","HomeScreen","_render","render","getByText","expect","toBeTruthy","username","_render2","getByTestId"],"sources":["AuthenticationCheck.test.tsx"],"sourcesContent":["// AuthenticationCheck.test.tsx (수정)\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport { Text, View } from 'react-native';\r\nimport * as AuthContextModule from '../../src/contexts/AuthContext';\r\nimport * as EmotionContextModule from '../../src/contexts/EmotionContext';\r\n\r\n// 실제 HomeScreen 대신 사용할 간단한 모의 컴포넌트\r\nfunction MockHomeScreen() {\r\n  const { useAuth } = require('../../src/contexts/AuthContext');\r\n  const auth = useAuth();\r\n  \r\n  if (!auth.isAuthenticated) {\r\n    return (\r\n      <View>\r\n        <Text>로그인이 필요합니다</Text>\r\n        <Text>게시물을 보려면, 먼저 로그인해주세요.</Text>\r\n      </View>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <View testID=\"home-screen-container\">\r\n      <Text>환영합니다, {auth.user.nickname}님</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\n// 원본 HomeScreen 모듈 모킹\r\njest.mock('../../src/screens/HomeScreen', () => ({\r\n  __esModule: true,\r\n  default: jest.fn()\r\n}));\r\n\r\n// AuthContext 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: jest.fn()\r\n}));\r\n\r\n// EmotionContext 모킹 \r\njest.mock('../../src/contexts/EmotionContext', () => ({\r\n  useEmotion: jest.fn().mockReturnValue({\r\n    emotions: [{ emotion_id: 1, name: '행복' }],\r\n    selectedEmotions: [],\r\n    selectEmotion: jest.fn(),\r\n    logEmotion: jest.fn(),\r\n  })\r\n}));\r\n\r\ndescribe('HomeScreen Authentication', () => {\r\n  // 테스트 전에 HomeScreen 모킹을 설정\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 실제 HomeScreen 대신 MockHomeScreen 사용\r\n    const HomeScreenModule = require('../../src/screens/HomeScreen');\r\n    HomeScreenModule.default.mockImplementation(MockHomeScreen);\r\n  });\r\n\r\n  it('renders login required message when not authenticated', () => {\r\n    // 인증되지 않은 상태로 모킹\r\n    (AuthContextModule.useAuth as jest.Mock).mockReturnValue({\r\n      isAuthenticated: false,\r\n      user: null\r\n    });\r\n\r\n    // 실제 HomeScreen을 가져와 렌더링\r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByText } = render(<HomeScreen />);\r\n    \r\n    expect(getByText('로그인이 필요합니다')).toBeTruthy();\r\n    expect(getByText('게시물을 보려면, 먼저 로그인해주세요.')).toBeTruthy();\r\n  });\r\n\r\n  it('renders screen content when authenticated', () => {\r\n    // 인증된 상태로 모킹\r\n    (AuthContextModule.useAuth as jest.Mock).mockReturnValue({\r\n      isAuthenticated: true,\r\n      user: { username: 'testuser', nickname: '테스트' }\r\n    });\r\n\r\n    // 실제 HomeScreen을 가져와 렌더링\r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByText, getByTestId } = render(<HomeScreen />);\r\n    \r\n    expect(getByText('환영합니다, 테스트님')).toBeTruthy();\r\n    expect(getByTestId('home-screen-container')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}