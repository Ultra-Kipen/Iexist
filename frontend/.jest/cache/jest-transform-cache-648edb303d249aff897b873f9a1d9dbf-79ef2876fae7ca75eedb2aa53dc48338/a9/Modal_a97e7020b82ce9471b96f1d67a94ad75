7f8c525eadf9ad678cd5fad6ffbe717f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var Modal = function Modal(_ref) {
  var isVisible = _ref.isVisible,
    onClose = _ref.onClose,
    title = _ref.title,
    children = _ref.children,
    footer = _ref.footer,
    _ref$animationType = _ref.animationType,
    animationType = _ref$animationType === void 0 ? 'fade' : _ref$animationType,
    _ref$closeOnBackdropP = _ref.closeOnBackdropPress,
    closeOnBackdropPress = _ref$closeOnBackdropP === void 0 ? true : _ref$closeOnBackdropP;
  var handleBackdropPress = function handleBackdropPress() {
    if (closeOnBackdropPress) {
      onClose();
    }
  };
  return (0, _jsxRuntime.jsx)(_reactNative.Modal, {
    transparent: true,
    visible: isVisible,
    animationType: animationType,
    onRequestClose: onClose,
    children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.backdrop,
      activeOpacity: 1,
      onPress: handleBackdropPress,
      testID: "modal-backdrop",
      accessibilityLabel: "modal-backdrop",
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.modalContainer,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        testID: "modal-container",
        children: [title && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.header,
          testID: "modal-header",
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.headerText,
            children: title
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: onClose,
            style: styles.closeButton,
            testID: "modal-close-button",
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.closeButtonText,
              children: "\xD7"
            })
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.content,
          testID: "modal-content-container",
          children: children
        }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.footer,
          testID: "modal-footer",
          children: footer
        })]
      })
    })
  });
};
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  width = _Dimensions$get.width;
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center'
  },
  modalContainer: {
    width: width * 0.85,
    backgroundColor: 'white',
    borderRadius: 10,
    overflow: 'hidden',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0'
  },
  headerText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333'
  },
  closeButton: {
    padding: 5
  },
  closeButtonText: {
    fontSize: 24,
    color: '#999',
    lineHeight: 24
  },
  content: {
    padding: 15
  },
  footer: {
    padding: 15,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
    flexDirection: 'row',
    justifyContent: 'flex-end'
  }
});
var _default = exports.default = Modal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,