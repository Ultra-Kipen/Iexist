04fb5676a39edf202ca910f6347fcfa8
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockChallengeService = exports.default = void 0;
var _challengeData = require("../data/challengeData.mock");
var mockChallengeService = exports.mockChallengeService = {
  getAllChallenges: jest.fn().mockResolvedValue({
    data: _challengeData.mockChallenges
  }),
  getChallengeById: jest.fn().mockImplementation(function (challengeId) {
    var challenge = _challengeData.mockChallenges.find(function (c) {
      return c.challenge_id === challengeId;
    });
    return Promise.resolve({
      data: challenge
    });
  }),
  createChallenge: jest.fn().mockImplementation(function (challengeData) {
    return Promise.resolve({
      data: Object.assign({
        challenge_id: Math.floor(Math.random() * 1000) + 100,
        creator_id: 1,
        title: '',
        description: '',
        start_date: new Date().toISOString().split('T')[0],
        end_date: new Date().toISOString().split('T')[0],
        is_public: true,
        max_participants: null,
        participant_count: 0,
        created_at: new Date().toISOString()
      }, challengeData)
    });
  }),
  updateChallenge: jest.fn().mockImplementation(function (challengeId, updateData) {
    return Promise.resolve({
      data: Object.assign({
        challenge_id: challengeId,
        creator_id: 1,
        title: '',
        description: '',
        start_date: '',
        end_date: '',
        is_public: true,
        max_participants: null,
        participant_count: 0,
        created_at: '',
        updated_at: new Date().toISOString()
      }, updateData)
    });
  }),
  deleteChallenge: jest.fn().mockResolvedValue({
    data: {
      success: true
    }
  }),
  joinChallenge: jest.fn().mockResolvedValue({
    data: {
      success: true
    }
  }),
  leaveChallenge: jest.fn().mockResolvedValue({
    data: {
      success: true
    }
  }),
  getChallengeParticipants: jest.fn().mockResolvedValue({
    data: _challengeData.mockParticipants
  }),
  getChallengeEmotions: jest.fn().mockImplementation(function (challengeId, userId) {
    var emotions = _challengeData.mockChallengeEmotions.filter(function (e) {
      return e.challenge_id === challengeId && (userId ? e.user_id === userId : true);
    });
    return Promise.resolve({
      data: emotions
    });
  }),
  logChallengeEmotion: jest.fn().mockImplementation(function (challengeId, userId, emotionData) {
    return Promise.resolve({
      data: Object.assign({
        challenge_emotion_id: Math.floor(Math.random() * 1000) + 10,
        challenge_id: challengeId,
        user_id: userId,
        emotion_id: 0,
        log_date: new Date().toISOString().split('T')[0],
        note: null,
        created_at: new Date().toISOString()
      }, emotionData)
    });
  }),
  getUserChallenges: jest.fn().mockResolvedValue({
    data: _challengeData.mockChallenges.slice(0, 1)
  })
};
var _default = exports.default = mockChallengeService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,