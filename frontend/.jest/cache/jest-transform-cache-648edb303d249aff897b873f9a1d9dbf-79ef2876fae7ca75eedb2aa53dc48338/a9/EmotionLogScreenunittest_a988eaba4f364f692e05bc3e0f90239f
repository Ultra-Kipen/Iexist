b27458f877183dce524817d93405df5b
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Utilities/DevSettings', function () {
  return {
    addMenuItem: jest.fn()
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  var mockEmotions = [{
    emotion_id: 1,
    name: '행복',
    icon: 'happy-icon',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '슬픔',
    icon: 'sad-icon',
    color: '#4682B4'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
  });
  it('renders emotion chips correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('행복')).toBeTruthy();
      expect(getByText('슬픔')).toBeTruthy();
    });
  }));
  it('allows selecting and deselecting emotions', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var happyChip = getByText('행복');
      _reactNative.fireEvent.press(happyChip);
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }));
  it('shows error when no emotion is selected', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
    });
  }));
  it('submits emotions successfully', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockResolvedValue({
      data: {
        status: 'success'
      }
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render4.getByText,
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var happyChip = getByText('행복');
      _reactNative.fireEvent.press(happyChip);
      var noteInput = getByTestId('emotion-note-input');
      _reactNative.fireEvent.changeText(noteInput, '오늘은 매우 행복한 날');
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: '오늘은 매우 행복한 날'
      });
    });
  }));
  it('handles emotion submission error', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValue({
      response: {
        data: {
          message: '감정 기록 중 오류가 발생했습니다.'
        }
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByText = _render5.getByText,
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var happyChip = getByText('행복');
      _reactNative.fireEvent.press(happyChip);
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(require('react-native/Libraries/Alert/Alert').alert).toHaveBeenCalledWith('오류', '감정 기록 중 오류가 발생했습니다.');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,