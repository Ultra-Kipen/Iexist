0a9498a0d664b0b618e7e8e55088b446
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _AuthContext = require("../contexts/AuthContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var RegisterScreen = function RegisterScreen(_ref) {
  var navigation = _ref.navigation;
  var _useAuth = (0, _AuthContext.useAuth)(),
    register = _useAuth.register;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    username = _useState2[0],
    setUsername = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    email = _useState4[0],
    setEmail = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    password = _useState6[0],
    setPassword = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    confirmPassword = _useState8[0],
    setConfirmPassword = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isLoading = _useState10[0],
    setIsLoading = _useState10[1];
  var _useState11 = (0, _react.useState)({}),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    errors = _useState12[0],
    setErrors = _useState12[1];
  var validateForm = function validateForm() {
    var newErrors = {};
    if (!username) {
      newErrors.username = '사용자 이름을 입력해주세요';
    } else if (username.length < 2) {
      newErrors.username = '사용자 이름은 최소 2자 이상이어야 합니다';
    }
    if (!email) {
      newErrors.email = '이메일을 입력해주세요';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = '유효한 이메일 주소를 입력해주세요';
    }
    if (!password) {
      newErrors.password = '비밀번호를 입력해주세요';
    } else if (password.length < 6) {
      newErrors.password = '비밀번호는 최소 6자 이상이어야 합니다';
    } else if (!/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/.test(password)) {
      newErrors.password = '비밀번호는 영문과 숫자를 포함해야 합니다';
    }
    if (!confirmPassword) {
      newErrors.confirmPassword = '비밀번호 확인을 입력해주세요';
    } else if (password !== confirmPassword) {
      newErrors.confirmPassword = '비밀번호가 일치하지 않습니다';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  var handleRegister = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!validateForm()) return;
      setIsLoading(true);
      try {
        yield register({
          username: username,
          email: email,
          password: password
        });
      } catch (error) {
        var _error$response;
        _reactNative.Alert.alert('회원가입 실패', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || '회원가입 중 오류가 발생했습니다. 다시 시도해주세요.');
      } finally {
        setIsLoading(false);
      }
    });
    return function handleRegister() {
      return _ref2.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
    style: styles.container,
    children: (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      contentContainerStyle: styles.scrollView,
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.form,
        children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.title,
          children: "\uD68C\uC6D0\uAC00\uC785"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.subtitle,
          children: "IExist\uC640 \uD568\uAED8 \uB098\uC758 \uC874\uC7AC\uB97C \uAE30\uB85D\uD574\uBCF4\uC138\uC694"
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          label: "\uC0AC\uC6A9\uC790 \uC774\uB984",
          value: username,
          onChangeText: setUsername,
          mode: "outlined",
          style: styles.input,
          error: !!errors.username
        }), errors.username && (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.errorText,
          children: errors.username
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          label: "\uC774\uBA54\uC77C",
          value: email,
          onChangeText: setEmail,
          mode: "outlined",
          style: styles.input,
          keyboardType: "email-address",
          autoCapitalize: "none",
          error: !!errors.email
        }), errors.email && (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.errorText,
          children: errors.email
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          label: "\uBE44\uBC00\uBC88\uD638",
          value: password,
          onChangeText: setPassword,
          mode: "outlined",
          style: styles.input,
          secureTextEntry: true,
          error: !!errors.password
        }), errors.password && (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.errorText,
          children: errors.password
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.TextInput, {
          label: "\uBE44\uBC00\uBC88\uD638 \uD655\uC778",
          value: confirmPassword,
          onChangeText: setConfirmPassword,
          mode: "outlined",
          style: styles.input,
          secureTextEntry: true,
          error: !!errors.confirmPassword
        }), errors.confirmPassword && (0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
          style: styles.errorText,
          children: errors.confirmPassword
        }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
          mode: "contained",
          onPress: handleRegister,
          style: styles.button,
          disabled: isLoading,
          children: isLoading ? (0, _jsxRuntime.jsx)(_reactNativePaper.ActivityIndicator, {
            color: "#fff"
          }) : '회원가입'
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.loginContainer,
          children: [(0, _jsxRuntime.jsx)(_reactNativePaper.Text, {
            children: "\uC774\uBBF8 \uACC4\uC815\uC774 \uC788\uC73C\uC2E0\uAC00\uC694?"
          }), (0, _jsxRuntime.jsx)(_reactNativePaper.Button, {
            mode: "text",
            onPress: function onPress() {
              return navigation.navigate('Login');
            },
            style: styles.textButton,
            children: "\uB85C\uADF8\uC778"
          })]
        })]
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5'
  },
  scrollView: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 20
  },
  form: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
    color: '#4a0e4e'
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 30,
    color: '#666'
  },
  input: {
    marginBottom: 8,
    backgroundColor: 'white'
  },
  errorText: {
    color: 'red',
    fontSize: 12,
    marginBottom: 10,
    marginLeft: 5
  },
  button: {
    marginTop: 16,
    paddingVertical: 8
  },
  textButton: {
    marginTop: 8
  },
  loginContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 16
  }
});
var _default = exports.default = RegisterScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,