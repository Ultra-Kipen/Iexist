{"version":3,"names":["_socket","require","SocketService","_createClass2","default","_this","_classCallCheck2","socket","connectPromise","resolveConnect","rejectConnect","reconnectTimer","reconnectAttempts","maxReconnectAttempts","reconnectDelay","init","_asyncToGenerator2","connected","Promise","resolve","clearTimeout","reject","token","localStorage","getItem","Error","socketUrl","process","env","REACT_APP_API_URL","io","auth","reconnection","reconnectionAttempts","reconnectionDelay","timeout","transports","on","handleConnect","handleConnectError","handleDisconnect","handleError","error","disconnect","event","callback","console","off","emit","data","isConnected","log","message","attemptReconnect","reason","setTimeout","catch","socketService","_default","exports"],"sources":["socketService.ts"],"sourcesContent":["// services/socketService.ts\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\n/**\r\n * Socket.IO 연결 및 이벤트 처리를 위한 서비스\r\n */\r\nclass SocketService {\r\n  private socket: Socket | null = null;\r\n  private connectPromise: Promise<void> | null = null;\r\n  private resolveConnect: (() => void) | null = null;\r\n  private rejectConnect: ((error: Error) => void) | null = null;\r\n  private reconnectTimer: NodeJS.Timeout | null = null;\r\n  private reconnectAttempts = 0;\r\n  private maxReconnectAttempts = 5;\r\n  private reconnectDelay = 3000; // 3초\r\n\r\n  /**\r\n   * Socket.IO 연결 초기화\r\n   */\r\n  public init = async (): Promise<void> => {\r\n    // 이미 연결된 소켓이 있으면 바로 반환\r\n    if (this.socket && this.socket.connected) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // 이전 연결 시도가 있으면 중지\r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n      this.reconnectTimer = null;\r\n    }\r\n\r\n    // 새로운 연결 Promise 생성\r\n    this.connectPromise = new Promise<void>((resolve, reject) => {\r\n      this.resolveConnect = resolve;\r\n      this.rejectConnect = reject;\r\n    });\r\n\r\n    try {\r\n      // 토큰 가져오기\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (!token) {\r\n        throw new Error('인증 토큰 없음');\r\n      }\r\n\r\n      const socketUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n      \r\n      this.socket = io(socketUrl, {\r\n        auth: { token },\r\n        reconnection: true,\r\n        reconnectionAttempts: 3,\r\n        reconnectionDelay: 1000,\r\n        timeout: 10000,\r\n        transports: ['websocket', 'polling']\r\n      });\r\n\r\n      // 연결 이벤트 핸들러\r\n      this.socket.on('connect', this.handleConnect);\r\n      this.socket.on('connect_error', this.handleConnectError);\r\n      this.socket.on('disconnect', this.handleDisconnect);\r\n      this.socket.on('error', this.handleError);\r\n\r\n      // 재시도 카운터 초기화\r\n      this.reconnectAttempts = 0;\r\n      \r\n      return this.connectPromise;\r\n    } catch (error) {\r\n      if (this.rejectConnect) {\r\n        this.rejectConnect(error as Error);\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 연결 해제\r\n   */\r\n  public disconnect = (): void => {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n    }\r\n    \r\n    if (this.reconnectTimer) {\r\n      clearTimeout(this.reconnectTimer);\r\n      this.reconnectTimer = null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 이벤트 수신 리스너 등록\r\n   * @param event 이벤트 이름\r\n   * @param callback 콜백 함수\r\n   */\r\n  public on = (event: string, callback: (...args: any[]) => void): void => {\r\n    if (!this.socket) {\r\n      console.error('소켓이 초기화되지 않았습니다');\r\n      return;\r\n    }\r\n    this.socket.on(event, callback);\r\n  };\r\n\r\n  /**\r\n   * 이벤트 수신 리스너 제거\r\n   * @param event 이벤트 이름\r\n   * @param callback 콜백 함수 (선택 사항)\r\n   */\r\n  public off = (event: string, callback?: (...args: any[]) => void): void => {\r\n    if (!this.socket) return;\r\n    \r\n    if (callback) {\r\n      this.socket.off(event, callback);\r\n    } else {\r\n      this.socket.off(event);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 이벤트 전송\r\n   * @param event 이벤트 이름\r\n   * @param data 전송할 데이터\r\n   */\r\n  public emit = (event: string, data?: any): void => {\r\n    if (!this.socket || !this.socket.connected) {\r\n      console.error('소켓이 연결되지 않았습니다');\r\n      return;\r\n    }\r\n    this.socket.emit(event, data);\r\n  };\r\n\r\n  /**\r\n   * 연결 상태 확인\r\n   */\r\n  public isConnected = (): boolean => {\r\n    return !!this.socket && this.socket.connected;\r\n  };\r\n\r\n  // 내부 이벤트 핸들러\r\n  private handleConnect = (): void => {\r\n    console.log('소켓 연결됨');\r\n    if (this.resolveConnect) {\r\n      this.resolveConnect();\r\n    }\r\n  };\r\n\r\n  private handleConnectError = (error: Error): void => {\r\n    console.error('소켓 연결 오류:', error.message);\r\n    this.attemptReconnect();\r\n  };\r\n\r\n  private handleDisconnect = (reason: string): void => {\r\n    console.log('소켓 연결 해제됨:', reason);\r\n    this.attemptReconnect();\r\n  };\r\n\r\n  private handleError = (error: Error): void => {\r\n    console.error('소켓 오류:', error.message);\r\n    if (this.rejectConnect) {\r\n      this.rejectConnect(error);\r\n    }\r\n  };\r\n\r\n  private attemptReconnect = (): void => {\r\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n      console.log('최대 재연결 시도 횟수 초과');\r\n      return;\r\n    }\r\n\r\n    this.reconnectAttempts++;\r\n    console.log(`${this.reconnectAttempts}번째 재연결 시도...`);\r\n    \r\n    this.reconnectTimer = setTimeout(() => {\r\n      this.init().catch(error => {\r\n        console.error('재연결 실패:', error);\r\n      });\r\n    }, this.reconnectDelay);\r\n  };\r\n}\r\n\r\n// 싱글톤 인스턴스\r\nconst socketService = new SocketService();\r\n\r\nexport default socketService;"],"mappings":"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","ignoreList":[]}