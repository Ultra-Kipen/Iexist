4ca24db5c059d420b8d92341f7ac8b91
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withStyleAnimation = withStyleAnimation;
var _Colors = require("../Colors.js");
var _index = require("../logger/index.js");
var _timing = require("./timing.js");
var _util = require("./util.js");
function resolvePath(obj, path) {
  'worklet';

  var keys = Array.isArray(path) ? path : [path];
  return keys.reduce(function (acc, current) {
    if (Array.isArray(acc) && typeof current === 'number') {
      return acc[current];
    } else if (acc !== null && typeof acc === 'object' && current in acc) {
      return acc[current];
    }
    return undefined;
  }, obj);
}
function setPath(obj, path, value) {
  'worklet';

  var keys = Array.isArray(path) ? path : [path];
  var currObj = obj;
  for (var i = 0; i < keys.length - 1; i++) {
    currObj = currObj;
    if (!(keys[i] in currObj)) {
      if (typeof keys[i + 1] === 'number') {
        currObj[keys[i]] = [];
      } else {
        currObj[keys[i]] = {};
      }
    }
    currObj = currObj[keys[i]];
  }
  currObj[keys[keys.length - 1]] = value;
}
function withStyleAnimation(styleAnimations) {
  'worklet';

  return (0, _util.defineAnimation)({}, function () {
    'worklet';

    var onFrame = function onFrame(animation, now) {
      var stillGoing = false;
      var entriesToCheck = [{
        value: animation.styleAnimations,
        path: []
      }];
      while (entriesToCheck.length > 0) {
        var currentEntry = entriesToCheck.pop();
        if (Array.isArray(currentEntry.value)) {
          for (var index = 0; index < currentEntry.value.length; index++) {
            entriesToCheck.push({
              value: currentEntry.value[index],
              path: currentEntry.path.concat(index)
            });
          }
        } else if (typeof currentEntry.value === 'object' && currentEntry.value.onFrame === undefined) {
          for (var key of Object.keys(currentEntry.value)) {
            entriesToCheck.push({
              value: currentEntry.value[key],
              path: currentEntry.path.concat(key)
            });
          }
        } else {
          var currentStyleAnimation = currentEntry.value;
          if (currentStyleAnimation.finished) {
            continue;
          }
          var finished = currentStyleAnimation.onFrame(currentStyleAnimation, now);
          if (finished) {
            currentStyleAnimation.finished = true;
            if (currentStyleAnimation.callback) {
              currentStyleAnimation.callback(true);
            }
          } else {
            stillGoing = true;
          }
          var isAnimatingColorProp = _Colors.ColorProperties.includes(currentEntry.path[0]);
          setPath(animation.current, currentEntry.path, isAnimatingColorProp ? (0, _Colors.processColor)(currentStyleAnimation.current) : currentStyleAnimation.current);
        }
      }
      return !stillGoing;
    };
    var onStart = function onStart(animation, value, now, previousAnimation) {
      var entriesToCheck = [{
        value: styleAnimations,
        path: []
      }];
      while (entriesToCheck.length > 0) {
        var currentEntry = entriesToCheck.pop();
        if (Array.isArray(currentEntry.value)) {
          for (var index = 0; index < currentEntry.value.length; index++) {
            entriesToCheck.push({
              value: currentEntry.value[index],
              path: currentEntry.path.concat(index)
            });
          }
        } else if (typeof currentEntry.value === 'object' && currentEntry.value.onStart === undefined) {
          for (var key of Object.keys(currentEntry.value)) {
            entriesToCheck.push({
              value: currentEntry.value[key],
              path: currentEntry.path.concat(key)
            });
          }
        } else {
          var prevAnimation = resolvePath(previousAnimation == null ? void 0 : previousAnimation.styleAnimations, currentEntry.path);
          var prevVal = resolvePath(value, currentEntry.path);
          if (prevAnimation && !prevVal) {
            prevVal = prevAnimation.current;
          }
          if (true) {
            if (prevVal === undefined) {
              _index.logger.warn(`Initial values for animation are missing for property ${currentEntry.path.join('.')}`);
            }
            var propName = currentEntry.path[0];
            if (typeof propName === 'string' && !(0, _util.isValidLayoutAnimationProp)(propName.trim())) {
              _index.logger.warn(`'${propName}' property is not officially supported for layout animations. It may not work as expected.`);
            }
          }
          setPath(animation.current, currentEntry.path, prevVal);
          var currentAnimation = void 0;
          if (typeof currentEntry.value !== 'object' || !currentEntry.value.onStart) {
            currentAnimation = (0, _timing.withTiming)(currentEntry.value, {
              duration: 0
            });
            setPath(animation.styleAnimations, currentEntry.path, currentAnimation);
          } else {
            currentAnimation = currentEntry.value;
          }
          currentAnimation.onStart(currentAnimation, prevVal, now, prevAnimation);
        }
      }
    };
    var callback = function callback(finished) {
      if (!finished) {
        var animationsToCheck = [styleAnimations];
        while (animationsToCheck.length > 0) {
          var currentAnimation = animationsToCheck.pop();
          if (Array.isArray(currentAnimation)) {
            for (var element of currentAnimation) {
              animationsToCheck.push(element);
            }
          } else if (typeof currentAnimation === 'object' && currentAnimation.onStart === undefined) {
            for (var value of Object.values(currentAnimation)) {
              animationsToCheck.push(value);
            }
          } else {
            var currentStyleAnimation = currentAnimation;
            if (!currentStyleAnimation.finished && currentStyleAnimation.callback) {
              currentStyleAnimation.callback(false);
            }
          }
        }
      }
    };
    return {
      isHigherOrder: true,
      onFrame: onFrame,
      onStart: onStart,
      current: {},
      styleAnimations: styleAnimations,
      callback: callback
    };
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,