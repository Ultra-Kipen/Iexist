2d46dbd9e6f509f4626cdc64444c03e1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = exports.initialState = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _types = require("./types");
var initialState = exports.initialState = {
  isAuthenticated: false,
  user: null,
  notifications: [],
  theme: 'system',
  loading: false,
  error: null
};
var reducer = exports.reducer = function reducer(state, action) {
  switch (action.type) {
    case _types.ActionType.SET_AUTHENTICATED:
      return Object.assign({}, state, {
        isAuthenticated: action.payload
      });
    case _types.ActionType.SET_USER:
      return Object.assign({}, state, {
        user: action.payload
      });
    case _types.ActionType.ADD_NOTIFICATION:
      return Object.assign({}, state, {
        notifications: [].concat((0, _toConsumableArray2.default)(state.notifications), [action.payload])
      });
    case _types.ActionType.REMOVE_NOTIFICATION:
      return Object.assign({}, state, {
        notifications: state.notifications.filter(function (notification) {
          return notification.id !== action.payload;
        })
      });
    case _types.ActionType.CLEAR_NOTIFICATIONS:
      return Object.assign({}, state, {
        notifications: []
      });
    case _types.ActionType.SET_THEME:
      return Object.assign({}, state, {
        theme: action.payload
      });
    case _types.ActionType.SET_LOADING:
      return Object.assign({}, state, {
        loading: action.payload
      });
    case _types.ActionType.SET_ERROR:
      return Object.assign({}, state, {
        error: action.payload
      });
    case _types.ActionType.CLEAR_ERROR:
      return Object.assign({}, state, {
        error: null
      });
    case _types.ActionType.RESET_STATE:
      return initialState;
    default:
      return state;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZXMiLCJyZXF1aXJlIiwiaW5pdGlhbFN0YXRlIiwiZXhwb3J0cyIsImlzQXV0aGVudGljYXRlZCIsInVzZXIiLCJub3RpZmljYXRpb25zIiwidGhlbWUiLCJsb2FkaW5nIiwiZXJyb3IiLCJyZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiQWN0aW9uVHlwZSIsIlNFVF9BVVRIRU5USUNBVEVEIiwiT2JqZWN0IiwiYXNzaWduIiwicGF5bG9hZCIsIlNFVF9VU0VSIiwiQUREX05PVElGSUNBVElPTiIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJkZWZhdWx0IiwiUkVNT1ZFX05PVElGSUNBVElPTiIsImZpbHRlciIsIm5vdGlmaWNhdGlvbiIsImlkIiwiQ0xFQVJfTk9USUZJQ0FUSU9OUyIsIlNFVF9USEVNRSIsIlNFVF9MT0FESU5HIiwiU0VUX0VSUk9SIiwiQ0xFQVJfRVJST1IiLCJSRVNFVF9TVEFURSJdLCJzb3VyY2VzIjpbInJlZHVjZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwU3RhdGUsIEFjdGlvbiwgQWN0aW9uVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLy8g7LSI6riwIOyDge2DnFxyXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBBcHBTdGF0ZSA9IHtcclxuICBpc0F1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxyXG4gIHVzZXI6IG51bGwsXHJcbiAgbm90aWZpY2F0aW9uczogW10sXHJcbiAgdGhlbWU6ICdzeXN0ZW0nLFxyXG4gIGxvYWRpbmc6IGZhbHNlLFxyXG4gIGVycm9yOiBudWxsLFxyXG59O1xyXG5cclxuLy8g66as65OA7IScIO2VqOyImFxyXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChzdGF0ZTogQXBwU3RhdGUsIGFjdGlvbjogQWN0aW9uKTogQXBwU3RhdGUgPT4ge1xyXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQVVUSEVOVElDQVRFRDpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9VU0VSOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBBY3Rpb25UeXBlLkFERF9OT1RJRklDQVRJT046XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgbm90aWZpY2F0aW9uczogWy4uLnN0YXRlLm5vdGlmaWNhdGlvbnMsIGFjdGlvbi5wYXlsb2FkXSxcclxuICAgICAgfTtcclxuICAgIGNhc2UgQWN0aW9uVHlwZS5SRU1PVkVfTk9USUZJQ0FUSU9OOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIG5vdGlmaWNhdGlvbnM6IHN0YXRlLm5vdGlmaWNhdGlvbnMuZmlsdGVyKFxyXG4gICAgICAgICAgKG5vdGlmaWNhdGlvbikgPT4gbm90aWZpY2F0aW9uLmlkICE9PSBhY3Rpb24ucGF5bG9hZFxyXG4gICAgICAgICksXHJcbiAgICAgIH07XHJcbiAgICBjYXNlIEFjdGlvblR5cGUuQ0xFQVJfTk9USUZJQ0FUSU9OUzpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBub3RpZmljYXRpb25zOiBbXSxcclxuICAgICAgfTtcclxuICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfVEhFTUU6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgdGhlbWU6IGFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9MT0FESU5HOlxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIGxvYWRpbmc6IGFjdGlvbi5wYXlsb2FkLFxyXG4gICAgICB9O1xyXG4gICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9FUlJPUjpcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICBlcnJvcjogYWN0aW9uLnBheWxvYWQsXHJcbiAgICAgIH07XHJcbiAgICBjYXNlIEFjdGlvblR5cGUuQ0xFQVJfRVJST1I6XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgZXJyb3I6IG51bGwsXHJcbiAgICAgIH07XHJcbiAgICBjYXNlIEFjdGlvblR5cGUuUkVTRVRfU1RBVEU6XHJcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgfVxyXG59OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxPQUFBO0FBR08sSUFBTUMsWUFBc0IsR0FBQUMsT0FBQSxDQUFBRCxZQUFBLEdBQUc7RUFDcENFLGVBQWUsRUFBRSxLQUFLO0VBQ3RCQyxJQUFJLEVBQUUsSUFBSTtFQUNWQyxhQUFhLEVBQUUsRUFBRTtFQUNqQkMsS0FBSyxFQUFFLFFBQVE7RUFDZkMsT0FBTyxFQUFFLEtBQUs7RUFDZEMsS0FBSyxFQUFFO0FBQ1QsQ0FBQztBQUdNLElBQU1DLE9BQU8sR0FBQVAsT0FBQSxDQUFBTyxPQUFBLEdBQUcsU0FBVkEsT0FBT0EsQ0FBSUMsS0FBZSxFQUFFQyxNQUFjLEVBQWU7RUFDcEUsUUFBUUEsTUFBTSxDQUFDQyxJQUFJO0lBQ2pCLEtBQUtDLGlCQUFVLENBQUNDLGlCQUFpQjtNQUMvQixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS04sS0FBSztRQUNSUCxlQUFlLEVBQUVRLE1BQU0sQ0FBQ007TUFBTztJQUVuQyxLQUFLSixpQkFBVSxDQUFDSyxRQUFRO01BQ3RCLE9BQUFILE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO1FBQ1JOLElBQUksRUFBRU8sTUFBTSxDQUFDTTtNQUFPO0lBRXhCLEtBQUtKLGlCQUFVLENBQUNNLGdCQUFnQjtNQUM5QixPQUFBSixNQUFBLENBQUFDLE1BQUEsS0FDS04sS0FBSztRQUNSTCxhQUFhLEtBQUFlLE1BQUEsS0FBQUMsbUJBQUEsQ0FBQUMsT0FBQSxFQUFNWixLQUFLLENBQUNMLGFBQWEsSUFBRU0sTUFBTSxDQUFDTSxPQUFPO01BQUM7SUFFM0QsS0FBS0osaUJBQVUsQ0FBQ1UsbUJBQW1CO01BQ2pDLE9BQUFSLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO1FBQ1JMLGFBQWEsRUFBRUssS0FBSyxDQUFDTCxhQUFhLENBQUNtQixNQUFNLENBQ3ZDLFVBQUNDLFlBQVk7VUFBQSxPQUFLQSxZQUFZLENBQUNDLEVBQUUsS0FBS2YsTUFBTSxDQUFDTSxPQUFPO1FBQUEsQ0FDdEQ7TUFBQztJQUVMLEtBQUtKLGlCQUFVLENBQUNjLG1CQUFtQjtNQUNqQyxPQUFBWixNQUFBLENBQUFDLE1BQUEsS0FDS04sS0FBSztRQUNSTCxhQUFhLEVBQUU7TUFBRTtJQUVyQixLQUFLUSxpQkFBVSxDQUFDZSxTQUFTO01BQ3ZCLE9BQUFiLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO1FBQ1JKLEtBQUssRUFBRUssTUFBTSxDQUFDTTtNQUFPO0lBRXpCLEtBQUtKLGlCQUFVLENBQUNnQixXQUFXO01BQ3pCLE9BQUFkLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO1FBQ1JILE9BQU8sRUFBRUksTUFBTSxDQUFDTTtNQUFPO0lBRTNCLEtBQUtKLGlCQUFVLENBQUNpQixTQUFTO01BQ3ZCLE9BQUFmLE1BQUEsQ0FBQUMsTUFBQSxLQUNLTixLQUFLO1FBQ1JGLEtBQUssRUFBRUcsTUFBTSxDQUFDTTtNQUFPO0lBRXpCLEtBQUtKLGlCQUFVLENBQUNrQixXQUFXO01BQ3pCLE9BQUFoQixNQUFBLENBQUFDLE1BQUEsS0FDS04sS0FBSztRQUNSRixLQUFLLEVBQUU7TUFBSTtJQUVmLEtBQUtLLGlCQUFVLENBQUNtQixXQUFXO01BQ3pCLE9BQU8vQixZQUFZO0lBQ3JCO01BQ0UsT0FBT1MsS0FBSztFQUNoQjtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=