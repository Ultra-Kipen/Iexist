{"version":3,"names":["_date","require","describe","it","date","Date","expect","formatDate","toBe","formatDatetime","now","fiveSecondsAgo","getTime","getRelativeTime","tenMinutesAgo","threeHoursAgo","threeDaysAgo","oldDate","toMatch","today","isToday","yesterday","setDate","getDate","isYesterday","dateStr","parsed","parseDate","getFullYear","getMonth","dateStr1","parsed1","dateStr2","parsed2","_getDateRange","getDateRange","start","end","_getDateRange2","_getDateRange3","monday","getDayOfWeek","sunday"],"sources":["date.test.ts"],"sourcesContent":["import { \r\n    formatDate, \r\n    formatDatetime, \r\n    getRelativeTime, \r\n    isToday, \r\n    isYesterday,\r\n    parseDate,\r\n    getDateRange,\r\n    getDayOfWeek\r\n  } from '../../../src/utils/date';\r\n  \r\n  describe('Date utils', () => {\r\n    describe('formatDate', () => {\r\n      it('should format date correctly', () => {\r\n        const date = new Date('2025-04-21T14:30:00');\r\n        expect(formatDate(date)).toBe('2025.04.21');\r\n      });\r\n  \r\n      it('should handle different format options', () => {\r\n        const date = new Date('2025-04-21T14:30:00');\r\n        expect(formatDate(date, 'yyyy-MM-dd')).toBe('2025-04-21');\r\n        expect(formatDate(date, 'MM/dd/yyyy')).toBe('04/21/2025');\r\n        expect(formatDate(date, 'dd.MM.yyyy')).toBe('21.04.2025');\r\n      });\r\n    });\r\n  \r\n    describe('formatDatetime', () => {\r\n      it('should format datetime correctly', () => {\r\n        const date = new Date('2025-04-21T14:30:00');\r\n        expect(formatDatetime(date)).toBe('2025.04.21 14:30');\r\n      });\r\n  \r\n      it('should handle different format options', () => {\r\n        const date = new Date('2025-04-21T14:30:00');\r\n        expect(formatDatetime(date, 'yyyy-MM-dd HH:mm')).toBe('2025-04-21 14:30');\r\n        expect(formatDatetime(date, 'MM/dd/yyyy hh:mm a')).toBe('04/21/2025 02:30 PM');\r\n      });\r\n    });\r\n  \r\n    describe('getRelativeTime', () => {\r\n      it('should return \"방금 전\" for times less than a minute ago', () => {\r\n        const now = new Date();\r\n        const fiveSecondsAgo = new Date(now.getTime() - 5000);\r\n        expect(getRelativeTime(fiveSecondsAgo)).toBe('방금 전');\r\n      });\r\n  \r\n      it('should return minutes for times less than an hour ago', () => {\r\n        const now = new Date();\r\n        const tenMinutesAgo = new Date(now.getTime() - 10 * 60 * 1000);\r\n        expect(getRelativeTime(tenMinutesAgo)).toBe('10분 전');\r\n      });\r\n  \r\n      it('should return hours for times less than a day ago', () => {\r\n        const now = new Date();\r\n        const threeHoursAgo = new Date(now.getTime() - 3 * 60 * 60 * 1000);\r\n        expect(getRelativeTime(threeHoursAgo)).toBe('3시간 전');\r\n      });\r\n  \r\n      it('should return days for times less than a week ago', () => {\r\n        const now = new Date();\r\n        const threeDaysAgo = new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000);\r\n        expect(getRelativeTime(threeDaysAgo)).toBe('3일 전');\r\n      });\r\n  \r\n      it('should return the date for older times', () => {\r\n        const oldDate = new Date('2025-01-01T10:30:00');\r\n        expect(getRelativeTime(oldDate)).toMatch(/\\d{4}\\.\\d{2}\\.\\d{2}/);\r\n      });\r\n    });\r\n  \r\n    describe('isToday', () => {\r\n      it('should return true for today', () => {\r\n        const today = new Date();\r\n        expect(isToday(today)).toBe(true);\r\n      });\r\n  \r\n      it('should return false for yesterday', () => {\r\n        const yesterday = new Date();\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        expect(isToday(yesterday)).toBe(false);\r\n      });\r\n    });\r\n  \r\n    describe('isYesterday', () => {\r\n      it('should return true for yesterday', () => {\r\n        const yesterday = new Date();\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        expect(isYesterday(yesterday)).toBe(true);\r\n      });\r\n  \r\n      it('should return false for today', () => {\r\n        const today = new Date();\r\n        expect(isYesterday(today)).toBe(false);\r\n      });\r\n    });\r\n  \r\n    describe('parseDate', () => {\r\n      it('should parse date string correctly', () => {\r\n        const dateStr = '2025-04-21';\r\n        const parsed = parseDate(dateStr);\r\n        expect(parsed.getFullYear()).toBe(2025);\r\n        expect(parsed.getMonth()).toBe(3); // 0-based, so April is 3\r\n        expect(parsed.getDate()).toBe(21);\r\n      });\r\n  \r\n      it('should handle different date formats', () => {\r\n        const dateStr1 = '04/21/2025';\r\n        const parsed1 = parseDate(dateStr1, 'MM/dd/yyyy');\r\n        expect(parsed1.getFullYear()).toBe(2025);\r\n        expect(parsed1.getMonth()).toBe(3);\r\n        expect(parsed1.getDate()).toBe(21);\r\n        \r\n        const dateStr2 = '21.04.2025';\r\n        const parsed2 = parseDate(dateStr2, 'dd.MM.yyyy');\r\n        expect(parsed2.getFullYear()).toBe(2025);\r\n        expect(parsed2.getMonth()).toBe(3);\r\n        expect(parsed2.getDate()).toBe(21);\r\n      });\r\n    });\r\n  \r\n    describe('getDateRange', () => {\r\n      it('should return a week date range correctly', () => {\r\n        const today = new Date('2025-04-21');\r\n        const { start, end } = getDateRange('week', today);\r\n        expect(formatDate(start, 'yyyy-MM-dd')).toBe('2025-04-15');\r\n        expect(formatDate(end, 'yyyy-MM-dd')).toBe('2025-04-21');\r\n      });\r\n  \r\n      it('should return a month date range correctly', () => {\r\n        const today = new Date('2025-04-21');\r\n        const { start, end } = getDateRange('month', today);\r\n        expect(formatDate(start, 'yyyy-MM-dd')).toBe('2025-04-01');\r\n        expect(formatDate(end, 'yyyy-MM-dd')).toBe('2025-04-30');\r\n      });\r\n  \r\n      it('should return a year date range correctly', () => {\r\n        const today = new Date('2025-04-21');\r\n        const { start, end } = getDateRange('year', today);\r\n        expect(formatDate(start, 'yyyy-MM-dd')).toBe('2025-01-01');\r\n        expect(formatDate(end, 'yyyy-MM-dd')).toBe('2025-12-31');\r\n      });\r\n    });\r\n  \r\n    describe('getDayOfWeek', () => {\r\n      it('should return correct day of week in Korean', () => {\r\n        const monday = new Date('2025-04-21'); // Monday\r\n        expect(getDayOfWeek(monday)).toBe('월요일');\r\n        \r\n        const sunday = new Date('2025-04-20'); // Sunday\r\n        expect(getDayOfWeek(sunday)).toBe('일요일');\r\n      });\r\n    });\r\n  });"],"mappings":"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","ignoreList":[]}