f99f6bed2a91d8214e04cd4c08b1fa9f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var PostItem = function PostItem(_ref) {
  var content = _ref.content,
    userName = _ref.userName,
    isAnonymous = _ref.isAnonymous,
    createdAt = _ref.createdAt,
    likeCount = _ref.likeCount,
    commentCount = _ref.commentCount,
    imageUrl = _ref.imageUrl,
    emotions = _ref.emotions,
    onPress = _ref.onPress,
    onLikePress = _ref.onLikePress,
    onCommentPress = _ref.onCommentPress,
    _ref$isLiked = _ref.isLiked,
    isLiked = _ref$isLiked === void 0 ? false : _ref$isLiked;
  var displayName = isAnonymous ? '익명' : userName;
  var formattedDate = new Date(createdAt).toLocaleDateString('ko-KR', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
  }).replace(/\./g, '.').replace(/\s/g, ' ');
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    onPress: onPress,
    style: styles.container,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.header,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.userName,
        children: displayName
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.date,
        children: formattedDate
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.content,
      numberOfLines: 3,
      children: content
    }), imageUrl && (0, _jsxRuntime.jsx)(_reactNative.Image, {
      source: {
        uri: imageUrl
      },
      style: styles.image,
      resizeMode: "cover"
    }), emotions && emotions.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.emotionsContainer,
      children: emotions.map(function (emotion) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: [styles.emotionTag, {
            backgroundColor: `${emotion.color}20`
          }],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.emotionText, {
              color: emotion.color
            }],
            children: emotion.name
          })
        }, emotion.id);
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.footer,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: onLikePress,
        style: styles.actionButton,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.iconText, {
            color: isLiked ? '#FF6B6B' : '#666666'
          }],
          children: isLiked ? '♥' : '♡'
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: [styles.actionText, isLiked && styles.likedText],
          children: likeCount > 0 ? likeCount : '공감'
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
        onPress: onCommentPress,
        style: styles.actionButton,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.iconText,
          children: "\uD83D\uDCAC"
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.actionText,
          children: commentCount > 0 ? commentCount : '댓글'
        })]
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10
  },
  userName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333333'
  },
  date: {
    fontSize: 12,
    color: '#999999'
  },
  content: {
    fontSize: 14,
    lineHeight: 20,
    color: '#333333',
    marginBottom: 12
  },
  image: {
    width: '100%',
    height: 200,
    borderRadius: 8,
    marginBottom: 12
  },
  emotionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12
  },
  emotionTag: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 16,
    marginRight: 8,
    marginBottom: 8
  },
  emotionText: {
    fontSize: 12,
    fontWeight: '500'
  },
  iconText: {
    fontSize: 18,
    marginRight: 4
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
    paddingTop: 12
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 20
  },
  actionText: {
    fontSize: 12,
    color: '#666666',
    marginLeft: 4
  },
  likedText: {
    color: '#FF6B6B'
  }
});
var _default = exports.default = PostItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,