ea706fe62b1d81c02169841f0d854230
_getJestObj().mock('react-native-paper', function () {
  return {
    SegmentedButtons: function SegmentedButtons(_ref) {
      var value = _ref.value,
        onValueChange = _ref.onValueChange,
        buttons = _ref.buttons;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": "segmented-buttons",
        "data-value": value,
        children: buttons.map(function (button) {
          return (0, _jsxRuntime.jsx)("button", {
            "data-testid": `segment-${button.value}`,
            onClick: function onClick() {
              return onValueChange && onValueChange(button.value);
            },
            children: button.label
          }, button.value);
        })
      });
    },
    Card: function Card(_ref2) {
      var children = _ref2.children,
        style = _ref2.style;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": "card",
        style: style,
        children: children
      });
    },
    Button: function Button(_ref3) {
      var onPress = _ref3.onPress,
        children = _ref3.children;
      return (0, _jsxRuntime.jsx)("button", {
        "data-testid": "graph-button",
        onClick: onPress,
        children: children
      });
    },
    Title: function Title(_ref4) {
      var children = _ref4.children;
      return (0, _jsxRuntime.jsx)("h2", {
        "data-testid": "title",
        children: children
      });
    },
    Paragraph: function Paragraph(_ref5) {
      var children = _ref5.children;
      return (0, _jsxRuntime.jsx)("p", {
        "data-testid": "paragraph",
        children: children
      });
    },
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-paper/lib/commonjs/components/Card/Card', function () {
  var CardComponent = function CardComponent(_ref6) {
    var children = _ref6.children,
      style = _ref6.style;
    return (0, _jsxRuntime.jsx)("div", {
      "data-testid": "card",
      style: style,
      children: children
    });
  };
  CardComponent.Cover = function (_ref7) {
    var source = _ref7.source;
    return (0, _jsxRuntime.jsx)("img", {
      "data-testid": "card-image",
      src: (source == null ? void 0 : source.uri) || '',
      alt: "cover"
    });
  };
  CardComponent.Content = function (_ref8) {
    var children = _ref8.children;
    return (0, _jsxRuntime.jsx)("div", {
      "data-testid": "card-content",
      children: children
    });
  };
  return {
    __esModule: true,
    default: CardComponent,
    Cover: CardComponent.Cover,
    Content: CardComponent.Content
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ReviewScreen = _interopRequireDefault(require("../../../src/screens/ReviewScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(function () {});
describe('ReviewScreen 단위 테스트', function () {
  afterEach(function () {
    consoleLogSpy.mockClear();
  });
  afterAll(function () {
    consoleLogSpy.mockRestore();
  });
  it('컴포넌트가 초기 상태로 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render.getByTestId,
      getAllByTestId = _render.getAllByTestId;
    expect(getByTestId('segmented-buttons').getAttribute('data-value')).toBe('weekly');
    var cardImages = getAllByTestId('card-image');
    expect(cardImages.length).toBe(6);
    expect(getByTestId('graph-button')).toBeTruthy();
    expect(getAllByTestId('card').length).toBeGreaterThanOrEqual(7);
  });
  it('세그먼트 버튼 변경 시 period 상태가 올바르게 업데이트되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render2.getByTestId;
    var segmentedButtons = getByTestId('segmented-buttons');
    expect(segmentedButtons.getAttribute('data-value')).toBe('weekly');
    var monthlyButton = getByTestId('segment-monthly');
    _reactNative.fireEvent.click(monthlyButton);
    expect(segmentedButtons.getAttribute('data-value')).toBe('monthly');
    var weeklyButton = getByTestId('segment-weekly');
    _reactNative.fireEvent.click(weeklyButton);
    expect(segmentedButtons.getAttribute('data-value')).toBe('weekly');
  });
  it('그래프 버튼 클릭 시 적절한 동작을 수행해야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render3.getByTestId;
    var graphButton = getByTestId('graph-button');
    _reactNative.fireEvent.click(graphButton);
    expect(consoleLogSpy).toHaveBeenCalledWith('Show emotion graph');
  });
  it('기간 변경 시 통계 카드 내용이 올바르게 업데이트되어야 함', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render4.getByTestId,
      getAllByTestId = _render4.getAllByTestId;
    var titles = getAllByTestId('title');
    expect(titles.some(function (title) {
      return title.textContent === '이번 주의 통계';
    })).toBeTruthy();
    var monthlyButton = getByTestId('segment-monthly');
    _reactNative.fireEvent.click(monthlyButton);
    expect(titles.some(function (title) {
      return title.textContent === '이번 달의 통계';
    })).toBeTruthy();
  });
  it('이미지 카드가 올바른 수량과 속성으로 렌더링되어야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getAllByTestId = _render5.getAllByTestId;
    var cardImages = getAllByTestId('card-image');
    expect(cardImages.length).toBe(6);
    cardImages.forEach(function (img, index) {
      var src = img.getAttribute('src');
      expect(src).toContain('https://picsum.photos/300?random=');
    });
  });
  it('컴포넌트의 복잡한 상태 변화에도 안정적으로 동작해야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ReviewScreen.default, {})),
      getByTestId = _render6.getByTestId;
    var weeklyButton = getByTestId('segment-weekly');
    var monthlyButton = getByTestId('segment-monthly');
    for (var i = 0; i < 5; i++) {
      _reactNative.fireEvent.click(monthlyButton);
      _reactNative.fireEvent.click(weeklyButton);
    }
    expect(getByTestId('segmented-buttons').getAttribute('data-value')).toBe('weekly');
    var graphButton = getByTestId('graph-button');
    for (var _i = 0; _i < 3; _i++) {
      _reactNative.fireEvent.click(graphButton);
    }
    expect(consoleLogSpy).toHaveBeenCalledTimes(3);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,