{"version":3,"names":["_react","_interopRequireWildcard","require","_emotionService","_interopRequireDefault","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","EmotionContext","createContext","undefined","useEmotion","exports","context","useContext","Error","EmotionProvider","_ref","children","_useState","useState","_useState2","_slicedToArray2","emotions","setEmotions","_useState3","_useState4","userEmotions","setUserEmotions","_useState5","_useState6","selectedEmotions","setSelectedEmotions","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","error","setError","fetchEmotions","_ref2","_asyncToGenerator2","response","emotionService","getAllEmotions","apiResponse","data","err","console","apply","arguments","fetchUserEmotions","_ref3","getDailyEmotionCheck","logEmotion","_ref4","emotionId","note","recordEmotions","emotion_ids","_x","_x2","selectEmotion","includes","concat","_toConsumableArray2","unselectEmotion","filter","id","clearSelectedEmotions","useEffect","jsx","Provider","value"],"sources":["EmotionContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, ReactNode } from 'react';\r\nimport emotionService, { Emotion } from '../services/api/emotionService';\r\n\r\n// EmotionLog 타입 정의\r\ninterface EmotionLog {\r\n  log_id: number;\r\n  user_id: number;\r\n  emotion_id: number;\r\n  note?: string;\r\n  log_date: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  emotion?: Emotion;\r\n}\r\n\r\ninterface EmotionContextType {\r\n  emotions: Emotion[];\r\n  userEmotions: EmotionLog[];\r\n  selectedEmotions: number[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  fetchEmotions: () => Promise<void>;\r\n  fetchUserEmotions: () => Promise<void>;\r\n  logEmotion: (emotionId: number, note?: string) => Promise<void>;\r\n  selectEmotion: (emotionId: number) => void;\r\n  unselectEmotion: (emotionId: number) => void;\r\n  clearSelectedEmotions: () => void;\r\n}\r\n\r\nconst EmotionContext = createContext<EmotionContextType | undefined>(undefined);\r\n\r\nexport const useEmotion = () => {\r\n  const context = useContext(EmotionContext);\r\n  if (context === undefined) {\r\n    throw new Error('useEmotion must be used within an EmotionProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface EmotionProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const EmotionProvider: React.FC<EmotionProviderProps> = ({ children }) => {\r\n  const [emotions, setEmotions] = useState<Emotion[]>([]);\r\n  const [userEmotions, setUserEmotions] = useState<EmotionLog[]>([]);\r\n  const [selectedEmotions, setSelectedEmotions] = useState<number[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchEmotions = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      const response = await emotionService.getAllEmotions();\r\n      // API 응답에서 데이터 직접 추출\r\n      const apiResponse = response as unknown as { data: Emotion[] };\r\n      if (apiResponse && apiResponse.data) {\r\n        setEmotions(apiResponse.data);\r\n      }\r\n    } catch (err) {\r\n      setError('감정 목록을 불러오는데 실패했습니다.');\r\n      console.error('감정 목록 불러오기 오류:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchUserEmotions = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      const response = await emotionService.getDailyEmotionCheck();\r\n      if (response && response.data) {\r\n        setUserEmotions(response.data);\r\n      }\r\n    } catch (err) {\r\n      setError('사용자 감정 기록을 불러오는데 실패했습니다.');\r\n      console.error('사용자 감정 기록 불러오기 오류:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logEmotion = async (emotionId: number, note?: string) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      await emotionService.recordEmotions({ emotion_ids: [emotionId], note });\r\n      await fetchUserEmotions();\r\n    } catch (err) {\r\n      setError('감정 기록에 실패했습니다.');\r\n      console.error('감정 기록 오류:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const selectEmotion = (emotionId: number) => {\r\n    if (!selectedEmotions.includes(emotionId)) {\r\n      setSelectedEmotions([...selectedEmotions, emotionId]);\r\n    }\r\n  };\r\n\r\n  const unselectEmotion = (emotionId: number) => {\r\n    setSelectedEmotions(selectedEmotions.filter(id => id !== emotionId));\r\n  };\r\n\r\n  const clearSelectedEmotions = () => {\r\n    setSelectedEmotions([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEmotions();\r\n  }, []);\r\n\r\n  return (\r\n    <EmotionContext.Provider\r\n      value={{\r\n        emotions,\r\n        userEmotions,\r\n        selectedEmotions,\r\n        isLoading,\r\n        error,\r\n        fetchEmotions,\r\n        fetchUserEmotions,\r\n        logEmotion,\r\n        selectEmotion,\r\n        unselectEmotion,\r\n        clearSelectedEmotions,\r\n      }}\r\n    >\r\n      {children}\r\n    </EmotionContext.Provider>\r\n  );\r\n};"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,eAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAyE,IAAAG,WAAA,GAAAH,OAAA;AAAA,SAAAI,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAN,wBAAAM,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,CAAA,SAAAG,CAAA,GAAAP,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAG,CAAA,KAAAA,CAAA,CAAAV,GAAA,IAAAU,CAAA,CAAAC,GAAA,IAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAG,CAAA,IAAAT,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AA4BzE,IAAMW,cAAc,GAAG,IAAAC,oBAAa,EAAiCC,SAAS,CAAC;AAExE,IAAMC,UAAU,GAAAC,OAAA,CAAAD,UAAA,GAAG,SAAbA,UAAUA,CAAA,EAAS;EAC9B,IAAME,OAAO,GAAG,IAAAC,iBAAU,EAACN,cAAc,CAAC;EAC1C,IAAIK,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAIK,KAAK,CAAC,mDAAmD,CAAC;EACtE;EACA,OAAOF,OAAO;AAChB,CAAC;AAMM,IAAMG,eAA+C,GAAAJ,OAAA,CAAAI,eAAA,GAAG,SAAlDA,eAA+CA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACxE,IAAAC,SAAA,GAAgC,IAAAC,eAAQ,EAAY,EAAE,CAAC;IAAAC,UAAA,OAAAC,eAAA,CAAA5B,OAAA,EAAAyB,SAAA;IAAhDI,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAAwC,IAAAL,eAAQ,EAAe,EAAE,CAAC;IAAAM,UAAA,OAAAJ,eAAA,CAAA5B,OAAA,EAAA+B,UAAA;IAA3DE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAAG,UAAA,GAAgD,IAAAT,eAAQ,EAAW,EAAE,CAAC;IAAAU,UAAA,OAAAR,eAAA,CAAA5B,OAAA,EAAAmC,UAAA;IAA/DE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAC5C,IAAAG,UAAA,GAAkC,IAAAb,eAAQ,EAAU,KAAK,CAAC;IAAAc,UAAA,OAAAZ,eAAA,CAAA5B,OAAA,EAAAuC,UAAA;IAAnDE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAAG,UAAA,GAA0B,IAAAjB,eAAQ,EAAgB,IAAI,CAAC;IAAAkB,WAAA,OAAAhB,eAAA,CAAA5B,OAAA,EAAA2C,UAAA;IAAhDE,KAAK,GAAAD,WAAA;IAAEE,QAAQ,GAAAF,WAAA;EAEtB,IAAMG,aAAa;IAAA,IAAAC,KAAA,OAAAC,kBAAA,CAAAjD,OAAA,EAAG,aAAY;MAChC,IAAI;QACF0C,YAAY,CAAC,IAAI,CAAC;QAClBI,QAAQ,CAAC,IAAI,CAAC;QACd,IAAMI,QAAQ,SAASC,uBAAc,CAACC,cAAc,CAAC,CAAC;QAEtD,IAAMC,WAAW,GAAGH,QAA0C;QAC9D,IAAIG,WAAW,IAAIA,WAAW,CAACC,IAAI,EAAE;UACnCxB,WAAW,CAACuB,WAAW,CAACC,IAAI,CAAC;QAC/B;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZT,QAAQ,CAAC,sBAAsB,CAAC;QAChCU,OAAO,CAACX,KAAK,CAAC,gBAAgB,EAAEU,GAAG,CAAC;MACtC,CAAC,SAAS;QACRb,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBAhBKK,aAAaA,CAAA;MAAA,OAAAC,KAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,GAgBlB;EAED,IAAMC,iBAAiB;IAAA,IAAAC,KAAA,OAAAX,kBAAA,CAAAjD,OAAA,EAAG,aAAY;MACpC,IAAI;QACF0C,YAAY,CAAC,IAAI,CAAC;QAClBI,QAAQ,CAAC,IAAI,CAAC;QACd,IAAMI,QAAQ,SAASC,uBAAc,CAACU,oBAAoB,CAAC,CAAC;QAC5D,IAAIX,QAAQ,IAAIA,QAAQ,CAACI,IAAI,EAAE;UAC7BpB,eAAe,CAACgB,QAAQ,CAACI,IAAI,CAAC;QAChC;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZT,QAAQ,CAAC,0BAA0B,CAAC;QACpCU,OAAO,CAACX,KAAK,CAAC,oBAAoB,EAAEU,GAAG,CAAC;MAC1C,CAAC,SAAS;QACRb,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBAdKiB,iBAAiBA,CAAA;MAAA,OAAAC,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GActB;EAED,IAAMI,UAAU;IAAA,IAAAC,KAAA,OAAAd,kBAAA,CAAAjD,OAAA,EAAG,WAAOgE,SAAiB,EAAEC,IAAa,EAAK;MAC7D,IAAI;QACFvB,YAAY,CAAC,IAAI,CAAC;QAClBI,QAAQ,CAAC,IAAI,CAAC;QACd,MAAMK,uBAAc,CAACe,cAAc,CAAC;UAAEC,WAAW,EAAE,CAACH,SAAS,CAAC;UAAEC,IAAI,EAAJA;QAAK,CAAC,CAAC;QACvE,MAAMN,iBAAiB,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOJ,GAAG,EAAE;QACZT,QAAQ,CAAC,gBAAgB,CAAC;QAC1BU,OAAO,CAACX,KAAK,CAAC,WAAW,EAAEU,GAAG,CAAC;MACjC,CAAC,SAAS;QACRb,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBAZKoB,UAAUA,CAAAM,EAAA,EAAAC,GAAA;MAAA,OAAAN,KAAA,CAAAN,KAAA,OAAAC,SAAA;IAAA;EAAA,GAYf;EAED,IAAMY,aAAa,GAAG,SAAhBA,aAAaA,CAAIN,SAAiB,EAAK;IAC3C,IAAI,CAAC3B,gBAAgB,CAACkC,QAAQ,CAACP,SAAS,CAAC,EAAE;MACzC1B,mBAAmB,IAAAkC,MAAA,KAAAC,mBAAA,CAAAzE,OAAA,EAAKqC,gBAAgB,IAAE2B,SAAS,EAAC,CAAC;IACvD;EACF,CAAC;EAED,IAAMU,eAAe,GAAG,SAAlBA,eAAeA,CAAIV,SAAiB,EAAK;IAC7C1B,mBAAmB,CAACD,gBAAgB,CAACsC,MAAM,CAAC,UAAAC,EAAE;MAAA,OAAIA,EAAE,KAAKZ,SAAS;IAAA,EAAC,CAAC;EACtE,CAAC;EAED,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAS;IAClCvC,mBAAmB,CAAC,EAAE,CAAC;EACzB,CAAC;EAED,IAAAwC,gBAAS,EAAC,YAAM;IACd/B,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,OACE,IAAAtD,WAAA,CAAAsF,GAAA,EAACjE,cAAc,CAACkE,QAAQ;IACtBC,KAAK,EAAE;MACLpD,QAAQ,EAARA,QAAQ;MACRI,YAAY,EAAZA,YAAY;MACZI,gBAAgB,EAAhBA,gBAAgB;MAChBI,SAAS,EAATA,SAAS;MACTI,KAAK,EAALA,KAAK;MACLE,aAAa,EAAbA,aAAa;MACbY,iBAAiB,EAAjBA,iBAAiB;MACjBG,UAAU,EAAVA,UAAU;MACVQ,aAAa,EAAbA,aAAa;MACbI,eAAe,EAAfA,eAAe;MACfG,qBAAqB,EAArBA;IACF,CAAE;IAAArD,QAAA,EAEDA;EAAQ,CACc,CAAC;AAE9B,CAAC","ignoreList":[]}