431265f68715f9068a3400337c7e04b9
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MockIcon';
});
var _HomeScreen = require("../../src/screens/HomeScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  describe('handlePostSubmission Ìï®Ïàò', function () {
    it('ÎÇ¥Ïö©Í≥º Í∞êÏ†ïÏù¥ ÏûàÏùÑ Îïå trueÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = _HomeScreen.emotions[0];
      var imageUrl = 'https://example.com/image.jpg';
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(true);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      jest.advanceTimersByTime(1000);
      expect(setIsLoading).toHaveBeenCalledWith(false);
      expect(setIsDialogVisible).toHaveBeenCalledWith(true);
    });
    it('ÎÇ¥Ïö©Ïù¥ ÏóÜÏùÑ Îïå falseÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = '';
      var emotion = _HomeScreen.emotions[0];
      var imageUrl = 'https://example.com/image.jpg';
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(setIsDialogVisible).not.toHaveBeenCalled();
    });
    it('Í∞êÏ†ïÏù¥ ÏóÜÏùÑ Îïå falseÎ•º Î∞òÌôòÌï¥Ïïº Ìï®', function () {
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = null;
      var imageUrl = 'https://example.com/image.jpg';
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(setIsDialogVisible).not.toHaveBeenCalled();
    });
  });
  describe('handleImageUploadAction Ìï®Ïàò', function () {
    it('Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏÑ§Ï†ïÌï¥Ïïº Ìï®', function () {
      var setImageUrl = jest.fn();
      (0, _HomeScreen.handleImageUploadAction)(setImageUrl);
      expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    });
  });
  describe('handleLikeAction Ìï®Ïàò', function () {
    it('Ï¢ãÏïÑÏöî ÏàòÎ•º Ï¶ùÍ∞ÄÏãúÏºúÏïº Ìï®', function () {
      var posts = [{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 5,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }];
      var postId = 1;
      var setPosts = jest.fn();
      (0, _HomeScreen.handleLikeAction)(posts, postId, setPosts);
      expect(setPosts).toHaveBeenCalled();
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].likes).toBe(6);
    });
  });
  describe('handleCommentAction Ìï®Ïàò', function () {
    it('ÎåìÍ∏ÄÏùÑ Ï∂îÍ∞ÄÌï¥Ïïº Ìï®', function () {
      var posts = [{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 5,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }];
      var postId = 1;
      var commentContent = 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä';
      var setPosts = jest.fn();
      (0, _HomeScreen.handleCommentAction)(posts, postId, commentContent, setPosts);
      expect(setPosts).toHaveBeenCalled();
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].comments.length).toBe(1);
      expect(updatedPosts[0].comments[0].content).toBe('ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä');
    });
  });
  describe('renderEmotionIcon Ìï®Ïàò', function () {
    it('ÏïÑÏù¥ÏΩò Ïù¥Î¶ÑÍ≥º ÏÉâÏÉÅÏúºÎ°ú Ìò∏Ï∂úÎêòÏñ¥Ïïº Ìï®', function () {
      expect(typeof _HomeScreen.renderEmotionIcon).toBe('function');
      (0, _HomeScreen.renderEmotionIcon)('emoticon-happy-outline', '#FFD700');
    });
  });
  describe('emotions Î∞∞Ïó¥', function () {
    it('Ï†ïÏùòÎêú Í∞êÏ†ïÎì§Ïù¥ ÏûàÏñ¥Ïïº Ìï®', function () {
      expect(_HomeScreen.emotions.length).toBeGreaterThan(0);
      expect(_HomeScreen.emotions[0]).toHaveProperty('label');
      expect(_HomeScreen.emotions[0]).toHaveProperty('icon');
      expect(_HomeScreen.emotions[0]).toHaveProperty('color');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,