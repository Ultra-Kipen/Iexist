3e61d8d18b1589eea46d74ea09904d9c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _VirtualizedList = _interopRequireDefault(require("./VirtualizedList"));
var _VirtualizeUtils = require("./VirtualizeUtils");
var _invariant = _interopRequireDefault(require("invariant"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["ItemSeparatorComponent", "SectionSeparatorComponent", "renderItem", "renderSectionFooter", "renderSectionHeader", "sections", "stickySectionHeadersEnabled"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var VirtualizedSectionList = function (_React$PureComponent) {
  function VirtualizedSectionList() {
    var _this;
    (0, _classCallCheck2.default)(this, VirtualizedSectionList);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, VirtualizedSectionList, [].concat(args));
    _this._keyExtractor = function (item, index) {
      var info = _this._subExtractor(index);
      return info && info.key || String(index);
    };
    _this._convertViewable = function (viewable) {
      var _info$index;
      (0, _invariant.default)(viewable.index != null, 'Received a broken ViewToken');
      var info = _this._subExtractor(viewable.index);
      if (!info) {
        return null;
      }
      var keyExtractorWithNullableIndex = info.section.keyExtractor;
      var keyExtractorWithNonNullableIndex = _this.props.keyExtractor || _VirtualizeUtils.keyExtractor;
      var key = keyExtractorWithNullableIndex != null ? keyExtractorWithNullableIndex(viewable.item, info.index) : keyExtractorWithNonNullableIndex(viewable.item, (_info$index = info.index) != null ? _info$index : 0);
      return Object.assign({}, viewable, {
        index: info.index,
        key: key,
        section: info.section
      });
    };
    _this._onViewableItemsChanged = function (_ref) {
      var viewableItems = _ref.viewableItems,
        changed = _ref.changed;
      var onViewableItemsChanged = _this.props.onViewableItemsChanged;
      if (onViewableItemsChanged != null) {
        onViewableItemsChanged({
          viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
          changed: changed.map(_this._convertViewable, _this).filter(Boolean)
        });
      }
    };
    _this._renderItem = function (listItemCount) {
      return function (_ref2) {
        var item = _ref2.item,
          index = _ref2.index;
        var info = _this._subExtractor(index);
        if (!info) {
          return null;
        }
        var infoIndex = info.index;
        if (infoIndex == null) {
          var section = info.section;
          if (info.header === true) {
            var renderSectionHeader = _this.props.renderSectionHeader;
            return renderSectionHeader ? renderSectionHeader({
              section: section
            }) : null;
          } else {
            var renderSectionFooter = _this.props.renderSectionFooter;
            return renderSectionFooter ? renderSectionFooter({
              section: section
            }) : null;
          }
        } else {
          var renderItem = info.section.renderItem || _this.props.renderItem;
          var SeparatorComponent = _this._getSeparatorComponent(index, info, listItemCount);
          (0, _invariant.default)(renderItem, 'no renderItem!');
          return (0, _jsxRuntime.jsx)(ItemWithSeparator, {
            SeparatorComponent: SeparatorComponent,
            LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
            cellKey: info.key,
            index: infoIndex,
            item: item,
            leadingItem: info.leadingItem,
            leadingSection: info.leadingSection,
            prevCellKey: (_this._subExtractor(index - 1) || {}).key,
            setSelfHighlightCallback: _this._setUpdateHighlightFor,
            setSelfUpdatePropsCallback: _this._setUpdatePropsFor,
            updateHighlightFor: _this._updateHighlightFor,
            updatePropsFor: _this._updatePropsFor,
            renderItem: renderItem,
            section: info.section,
            trailingItem: info.trailingItem,
            trailingSection: info.trailingSection,
            inverted: !!_this.props.inverted
          });
        }
      };
    };
    _this._updatePropsFor = function (cellKey, value) {
      var updateProps = _this._updatePropsMap[cellKey];
      if (updateProps != null) {
        updateProps(value);
      }
    };
    _this._updateHighlightFor = function (cellKey, value) {
      var updateHighlight = _this._updateHighlightMap[cellKey];
      if (updateHighlight != null) {
        updateHighlight(value);
      }
    };
    _this._setUpdateHighlightFor = function (cellKey, updateHighlightFn) {
      if (updateHighlightFn != null) {
        _this._updateHighlightMap[cellKey] = updateHighlightFn;
      } else {
        delete _this._updateHighlightFor[cellKey];
      }
    };
    _this._setUpdatePropsFor = function (cellKey, updatePropsFn) {
      if (updatePropsFn != null) {
        _this._updatePropsMap[cellKey] = updatePropsFn;
      } else {
        delete _this._updatePropsMap[cellKey];
      }
    };
    _this._updateHighlightMap = {};
    _this._updatePropsMap = {};
    _this._captureRef = function (ref) {
      _this._listRef = ref;
    };
    return _this;
  }
  (0, _inherits2.default)(VirtualizedSectionList, _React$PureComponent);
  return (0, _createClass2.default)(VirtualizedSectionList, [{
    key: "scrollToLocation",
    value: function scrollToLocation(params) {
      var index = params.itemIndex;
      for (var i = 0; i < params.sectionIndex; i++) {
        index += this.props.getItemCount(this.props.sections[i].data) + 2;
      }
      var viewOffset = params.viewOffset || 0;
      if (this._listRef == null) {
        return;
      }
      var listRef = this._listRef;
      if (params.itemIndex > 0 && this.props.stickySectionHeadersEnabled) {
        var frame = listRef.__getListMetrics().getCellMetricsApprox(index - params.itemIndex, listRef.props);
        viewOffset += frame.length;
      }
      var toIndexParams = Object.assign({}, params, {
        viewOffset: viewOffset,
        index: index
      });
      this._listRef.scrollToIndex(toIndexParams);
    }
  }, {
    key: "getListRef",
    value: function getListRef() {
      return this._listRef;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        ItemSeparatorComponent = _this$props.ItemSeparatorComponent,
        SectionSeparatorComponent = _this$props.SectionSeparatorComponent,
        _renderItem = _this$props.renderItem,
        renderSectionFooter = _this$props.renderSectionFooter,
        renderSectionHeader = _this$props.renderSectionHeader,
        _sections = _this$props.sections,
        stickySectionHeadersEnabled = _this$props.stickySectionHeadersEnabled,
        passThroughProps = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var listHeaderOffset = this.props.ListHeaderComponent ? 1 : 0;
      var stickyHeaderIndices = this.props.stickySectionHeadersEnabled ? [] : undefined;
      var itemCount = 0;
      for (var section of this.props.sections) {
        if (stickyHeaderIndices != null) {
          stickyHeaderIndices.push(itemCount + listHeaderOffset);
        }
        itemCount += 2;
        itemCount += this.props.getItemCount(section.data);
      }
      var renderItem = this._renderItem(itemCount);
      return (0, _jsxRuntime.jsx)(_VirtualizedList.default, Object.assign({}, passThroughProps, {
        keyExtractor: this._keyExtractor,
        stickyHeaderIndices: stickyHeaderIndices,
        renderItem: renderItem,
        data: this.props.sections,
        getItem: function getItem(sections, index) {
          return _this2._getItem(_this2.props, sections, index);
        },
        getItemCount: function getItemCount() {
          return itemCount;
        },
        onViewableItemsChanged: this.props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
        ref: this._captureRef
      }));
    }
  }, {
    key: "_getItem",
    value: function _getItem(props, sections, index) {
      if (!sections) {
        return null;
      }
      var itemIdx = index - 1;
      for (var i = 0; i < sections.length; i++) {
        var section = sections[i];
        var sectionData = section.data;
        var itemCount = props.getItemCount(sectionData);
        if (itemIdx === -1 || itemIdx === itemCount) {
          return section;
        } else if (itemIdx < itemCount) {
          return props.getItem(sectionData, itemIdx);
        } else {
          itemIdx -= itemCount + 2;
        }
      }
      return null;
    }
  }, {
    key: "_subExtractor",
    value: function _subExtractor(index) {
      var itemIndex = index;
      var _this$props2 = this.props,
        getItem = _this$props2.getItem,
        getItemCount = _this$props2.getItemCount,
        keyExtractor = _this$props2.keyExtractor,
        sections = _this$props2.sections;
      for (var i = 0; i < sections.length; i++) {
        var section = sections[i];
        var sectionData = section.data;
        var key = section.key || String(i);
        itemIndex -= 1;
        if (itemIndex >= getItemCount(sectionData) + 1) {
          itemIndex -= getItemCount(sectionData) + 1;
        } else if (itemIndex === -1) {
          return {
            section: section,
            key: key + ':header',
            index: null,
            header: true,
            trailingSection: sections[i + 1]
          };
        } else if (itemIndex === getItemCount(sectionData)) {
          return {
            section: section,
            key: key + ':footer',
            index: null,
            header: false,
            trailingSection: sections[i + 1]
          };
        } else {
          var extractor = section.keyExtractor || keyExtractor || _VirtualizeUtils.keyExtractor;
          return {
            section: section,
            key: key + ':' + extractor(getItem(sectionData, itemIndex), itemIndex),
            index: itemIndex,
            leadingItem: getItem(sectionData, itemIndex - 1),
            leadingSection: sections[i - 1],
            trailingItem: getItem(sectionData, itemIndex + 1),
            trailingSection: sections[i + 1]
          };
        }
      }
    }
  }, {
    key: "_getSeparatorComponent",
    value: function _getSeparatorComponent(index, info, listItemCount) {
      info = info || this._subExtractor(index);
      if (!info) {
        return null;
      }
      var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
      var SectionSeparatorComponent = this.props.SectionSeparatorComponent;
      var isLastItemInList = index === listItemCount - 1;
      var isLastItemInSection = info.index === this.props.getItemCount(info.section.data) - 1;
      if (SectionSeparatorComponent && isLastItemInSection) {
        return SectionSeparatorComponent;
      }
      if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
        return ItemSeparatorComponent;
      }
      return null;
    }
  }]);
}(React.PureComponent);
function ItemWithSeparator(props) {
  var LeadingSeparatorComponent = props.LeadingSeparatorComponent,
    SeparatorComponent = props.SeparatorComponent,
    cellKey = props.cellKey,
    prevCellKey = props.prevCellKey,
    setSelfHighlightCallback = props.setSelfHighlightCallback,
    updateHighlightFor = props.updateHighlightFor,
    setSelfUpdatePropsCallback = props.setSelfUpdatePropsCallback,
    updatePropsFor = props.updatePropsFor,
    item = props.item,
    index = props.index,
    section = props.section,
    inverted = props.inverted;
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    leadingSeparatorHiglighted = _React$useState2[0],
    setLeadingSeparatorHighlighted = _React$useState2[1];
  var _React$useState3 = React.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    separatorHighlighted = _React$useState4[0],
    setSeparatorHighlighted = _React$useState4[1];
  var _React$useState5 = React.useState({
      leadingItem: props.leadingItem,
      leadingSection: props.leadingSection,
      section: props.section,
      trailingItem: props.item,
      trailingSection: props.trailingSection
    }),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    leadingSeparatorProps = _React$useState6[0],
    setLeadingSeparatorProps = _React$useState6[1];
  var _React$useState7 = React.useState({
      leadingItem: props.item,
      leadingSection: props.leadingSection,
      section: props.section,
      trailingItem: props.trailingItem,
      trailingSection: props.trailingSection
    }),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    separatorProps = _React$useState8[0],
    setSeparatorProps = _React$useState8[1];
  React.useEffect(function () {
    setSelfHighlightCallback(cellKey, setSeparatorHighlighted);
    setSelfUpdatePropsCallback(cellKey, setSeparatorProps);
    return function () {
      setSelfUpdatePropsCallback(cellKey, null);
      setSelfHighlightCallback(cellKey, null);
    };
  }, [cellKey, setSelfHighlightCallback, setSeparatorProps, setSelfUpdatePropsCallback]);
  var separators = {
    highlight: function highlight() {
      setLeadingSeparatorHighlighted(true);
      setSeparatorHighlighted(true);
      if (prevCellKey != null) {
        updateHighlightFor(prevCellKey, true);
      }
    },
    unhighlight: function unhighlight() {
      setLeadingSeparatorHighlighted(false);
      setSeparatorHighlighted(false);
      if (prevCellKey != null) {
        updateHighlightFor(prevCellKey, false);
      }
    },
    updateProps: function updateProps(select, newProps) {
      if (select === 'leading') {
        if (LeadingSeparatorComponent != null) {
          setLeadingSeparatorProps(Object.assign({}, leadingSeparatorProps, newProps));
        } else if (prevCellKey != null) {
          updatePropsFor(prevCellKey, Object.assign({}, leadingSeparatorProps, newProps));
        }
      } else if (select === 'trailing' && SeparatorComponent != null) {
        setSeparatorProps(Object.assign({}, separatorProps, newProps));
      }
    }
  };
  var element = props.renderItem({
    item: item,
    index: index,
    section: section,
    separators: separators
  });
  var leadingSeparator = LeadingSeparatorComponent != null && (0, _jsxRuntime.jsx)(LeadingSeparatorComponent, Object.assign({
    highlighted: leadingSeparatorHiglighted
  }, leadingSeparatorProps));
  var separator = SeparatorComponent != null && (0, _jsxRuntime.jsx)(SeparatorComponent, Object.assign({
    highlighted: separatorHighlighted
  }, separatorProps));
  var RenderSeparator = leadingSeparator || separator;
  var firstSeparator = inverted === false ? leadingSeparator : separator;
  var secondSeparator = inverted === false ? separator : leadingSeparator;
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [RenderSeparator ? firstSeparator : null, element, RenderSeparator ? secondSeparator : null]
  });
}
module.exports = VirtualizedSectionList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlydHVhbGl6ZWRMaXN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfVmlydHVhbGl6ZVV0aWxzIiwiX2ludmFyaWFudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9jYWxsU3VwZXIiLCJvIiwiX2dldFByb3RvdHlwZU9mMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJfa2V5RXh0cmFjdG9yIiwiaXRlbSIsImluZGV4IiwiaW5mbyIsIl9zdWJFeHRyYWN0b3IiLCJrZXkiLCJTdHJpbmciLCJfY29udmVydFZpZXdhYmxlIiwidmlld2FibGUiLCJfaW5mbyRpbmRleCIsImludmFyaWFudCIsImtleUV4dHJhY3RvcldpdGhOdWxsYWJsZUluZGV4Iiwic2VjdGlvbiIsImtleUV4dHJhY3RvciIsImtleUV4dHJhY3RvcldpdGhOb25OdWxsYWJsZUluZGV4IiwicHJvcHMiLCJkZWZhdWx0S2V5RXh0cmFjdG9yIiwiYXNzaWduIiwiX29uVmlld2FibGVJdGVtc0NoYW5nZWQiLCJfcmVmIiwidmlld2FibGVJdGVtcyIsImNoYW5nZWQiLCJvblZpZXdhYmxlSXRlbXNDaGFuZ2VkIiwibWFwIiwiZmlsdGVyIiwiX3JlbmRlckl0ZW0iLCJsaXN0SXRlbUNvdW50IiwiX3JlZjIiLCJpbmZvSW5kZXgiLCJoZWFkZXIiLCJyZW5kZXJTZWN0aW9uSGVhZGVyIiwicmVuZGVyU2VjdGlvbkZvb3RlciIsInJlbmRlckl0ZW0iLCJTZXBhcmF0b3JDb21wb25lbnQiLCJfZ2V0U2VwYXJhdG9yQ29tcG9uZW50IiwianN4IiwiSXRlbVdpdGhTZXBhcmF0b3IiLCJMZWFkaW5nU2VwYXJhdG9yQ29tcG9uZW50IiwiU2VjdGlvblNlcGFyYXRvckNvbXBvbmVudCIsInVuZGVmaW5lZCIsImNlbGxLZXkiLCJsZWFkaW5nSXRlbSIsImxlYWRpbmdTZWN0aW9uIiwicHJldkNlbGxLZXkiLCJzZXRTZWxmSGlnaGxpZ2h0Q2FsbGJhY2siLCJfc2V0VXBkYXRlSGlnaGxpZ2h0Rm9yIiwic2V0U2VsZlVwZGF0ZVByb3BzQ2FsbGJhY2siLCJfc2V0VXBkYXRlUHJvcHNGb3IiLCJ1cGRhdGVIaWdobGlnaHRGb3IiLCJfdXBkYXRlSGlnaGxpZ2h0Rm9yIiwidXBkYXRlUHJvcHNGb3IiLCJfdXBkYXRlUHJvcHNGb3IiLCJ0cmFpbGluZ0l0ZW0iLCJ0cmFpbGluZ1NlY3Rpb24iLCJpbnZlcnRlZCIsInZhbHVlIiwidXBkYXRlUHJvcHMiLCJfdXBkYXRlUHJvcHNNYXAiLCJ1cGRhdGVIaWdobGlnaHQiLCJfdXBkYXRlSGlnaGxpZ2h0TWFwIiwidXBkYXRlSGlnaGxpZ2h0Rm4iLCJ1cGRhdGVQcm9wc0ZuIiwiX2NhcHR1cmVSZWYiLCJyZWYiLCJfbGlzdFJlZiIsIl9pbmhlcml0czIiLCJfY3JlYXRlQ2xhc3MyIiwic2Nyb2xsVG9Mb2NhdGlvbiIsInBhcmFtcyIsIml0ZW1JbmRleCIsInNlY3Rpb25JbmRleCIsImdldEl0ZW1Db3VudCIsInNlY3Rpb25zIiwiZGF0YSIsInZpZXdPZmZzZXQiLCJsaXN0UmVmIiwic3RpY2t5U2VjdGlvbkhlYWRlcnNFbmFibGVkIiwiZnJhbWUiLCJfX2dldExpc3RNZXRyaWNzIiwiZ2V0Q2VsbE1ldHJpY3NBcHByb3giLCJ0b0luZGV4UGFyYW1zIiwic2Nyb2xsVG9JbmRleCIsImdldExpc3RSZWYiLCJyZW5kZXIiLCJfdGhpczIiLCJfdGhpcyRwcm9wcyIsIkl0ZW1TZXBhcmF0b3JDb21wb25lbnQiLCJfc2VjdGlvbnMiLCJwYXNzVGhyb3VnaFByb3BzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsImxpc3RIZWFkZXJPZmZzZXQiLCJMaXN0SGVhZGVyQ29tcG9uZW50Iiwic3RpY2t5SGVhZGVySW5kaWNlcyIsIml0ZW1Db3VudCIsInB1c2giLCJnZXRJdGVtIiwiX2dldEl0ZW0iLCJpdGVtSWR4Iiwic2VjdGlvbkRhdGEiLCJfdGhpcyRwcm9wczIiLCJleHRyYWN0b3IiLCJpc0xhc3RJdGVtSW5MaXN0IiwiaXNMYXN0SXRlbUluU2VjdGlvbiIsIlB1cmVDb21wb25lbnQiLCJfUmVhY3QkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJsZWFkaW5nU2VwYXJhdG9ySGlnbGlnaHRlZCIsInNldExlYWRpbmdTZXBhcmF0b3JIaWdobGlnaHRlZCIsIl9SZWFjdCR1c2VTdGF0ZTMiLCJfUmVhY3QkdXNlU3RhdGU0Iiwic2VwYXJhdG9ySGlnaGxpZ2h0ZWQiLCJzZXRTZXBhcmF0b3JIaWdobGlnaHRlZCIsIl9SZWFjdCR1c2VTdGF0ZTUiLCJfUmVhY3QkdXNlU3RhdGU2IiwibGVhZGluZ1NlcGFyYXRvclByb3BzIiwic2V0TGVhZGluZ1NlcGFyYXRvclByb3BzIiwiX1JlYWN0JHVzZVN0YXRlNyIsIl9SZWFjdCR1c2VTdGF0ZTgiLCJzZXBhcmF0b3JQcm9wcyIsInNldFNlcGFyYXRvclByb3BzIiwidXNlRWZmZWN0Iiwic2VwYXJhdG9ycyIsImhpZ2hsaWdodCIsInVuaGlnaGxpZ2h0Iiwic2VsZWN0IiwibmV3UHJvcHMiLCJlbGVtZW50IiwibGVhZGluZ1NlcGFyYXRvciIsImhpZ2hsaWdodGVkIiwic2VwYXJhdG9yIiwiUmVuZGVyU2VwYXJhdG9yIiwiZmlyc3RTZXBhcmF0b3IiLCJzZWNvbmRTZXBhcmF0b3IiLCJqc3hzIiwiRnJhZ21lbnQiLCJjaGlsZHJlbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJWaXJ0dWFsaXplZFNlY3Rpb25MaXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3VG9rZW59IGZyb20gJy4vVmlld2FiaWxpdHlIZWxwZXInO1xuXG5pbXBvcnQgVmlydHVhbGl6ZWRMaXN0IGZyb20gJy4vVmlydHVhbGl6ZWRMaXN0JztcbmltcG9ydCB7a2V5RXh0cmFjdG9yIGFzIGRlZmF1bHRLZXlFeHRyYWN0b3J9IGZyb20gJy4vVmlydHVhbGl6ZVV0aWxzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnR5cGUgSXRlbSA9IGFueTtcblxuZXhwb3J0IHR5cGUgU2VjdGlvbkJhc2U8U2VjdGlvbkl0ZW1UPiA9IHtcbiAgLyoqXG4gICAqIFRoZSBkYXRhIGZvciByZW5kZXJpbmcgaXRlbXMgaW4gdGhpcyBzZWN0aW9uLlxuICAgKi9cbiAgZGF0YTogJFJlYWRPbmx5QXJyYXk8U2VjdGlvbkl0ZW1UPixcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGtleSB0byBrZWVwIHRyYWNrIG9mIHNlY3Rpb24gcmUtb3JkZXJpbmcuIElmIHlvdSBkb24ndCBwbGFuIG9uIHJlLW9yZGVyaW5nIHNlY3Rpb25zLFxuICAgKiB0aGUgYXJyYXkgaW5kZXggd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBrZXk/OiBzdHJpbmcsXG4gIC8vIE9wdGlvbmFsIHByb3BzIHdpbGwgb3ZlcnJpZGUgbGlzdC13aWRlIHByb3BzIGp1c3QgZm9yIHRoaXMgc2VjdGlvbi5cbiAgcmVuZGVySXRlbT86ID8oaW5mbzoge1xuICAgIGl0ZW06IFNlY3Rpb25JdGVtVCxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHNlY3Rpb246IFNlY3Rpb25CYXNlPFNlY3Rpb25JdGVtVD4sXG4gICAgc2VwYXJhdG9yczoge1xuICAgICAgaGlnaGxpZ2h0OiAoKSA9PiB2b2lkLFxuICAgICAgdW5oaWdobGlnaHQ6ICgpID0+IHZvaWQsXG4gICAgICB1cGRhdGVQcm9wczogKHNlbGVjdDogJ2xlYWRpbmcnIHwgJ3RyYWlsaW5nJywgbmV3UHJvcHM6IE9iamVjdCkgPT4gdm9pZCxcbiAgICAgIC4uLlxuICAgIH0sXG4gICAgLi4uXG4gIH0pID0+IG51bGwgfCBSZWFjdC5NaXhlZEVsZW1lbnQsXG4gIEl0ZW1TZXBhcmF0b3JDb21wb25lbnQ/OiA/UmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICBrZXlFeHRyYWN0b3I/OiAoaXRlbTogU2VjdGlvbkl0ZW1ULCBpbmRleD86ID9udW1iZXIpID0+IHN0cmluZyxcbiAgLi4uXG59O1xuXG50eXBlIFJlcXVpcmVkUHJvcHM8U2VjdGlvblQ6IFNlY3Rpb25CYXNlPGFueT4+ID0ge3xcbiAgc2VjdGlvbnM6ICRSZWFkT25seUFycmF5PFNlY3Rpb25UPixcbnx9O1xuXG50eXBlIE9wdGlvbmFsUHJvcHM8U2VjdGlvblQ6IFNlY3Rpb25CYXNlPGFueT4+ID0ge3xcbiAgLyoqXG4gICAqIERlZmF1bHQgcmVuZGVyZXIgZm9yIGV2ZXJ5IGl0ZW0gaW4gZXZlcnkgc2VjdGlvbi5cbiAgICovXG4gIHJlbmRlckl0ZW0/OiAoaW5mbzoge1xuICAgIGl0ZW06IEl0ZW0sXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBzZWN0aW9uOiBTZWN0aW9uVCxcbiAgICBzZXBhcmF0b3JzOiB7XG4gICAgICBoaWdobGlnaHQ6ICgpID0+IHZvaWQsXG4gICAgICB1bmhpZ2hsaWdodDogKCkgPT4gdm9pZCxcbiAgICAgIHVwZGF0ZVByb3BzOiAoc2VsZWN0OiAnbGVhZGluZycgfCAndHJhaWxpbmcnLCBuZXdQcm9wczogT2JqZWN0KSA9PiB2b2lkLFxuICAgICAgLi4uXG4gICAgfSxcbiAgICAuLi5cbiAgfSkgPT4gbnVsbCB8IFJlYWN0Lk5vZGUsXG4gIC8qKlxuICAgKiBSZW5kZXJlZCBhdCB0aGUgdG9wIG9mIGVhY2ggc2VjdGlvbi4gVGhlc2Ugc3RpY2sgdG8gdGhlIHRvcCBvZiB0aGUgYFNjcm9sbFZpZXdgIGJ5IGRlZmF1bHQgb25cbiAgICogaU9TLiBTZWUgYHN0aWNreVNlY3Rpb25IZWFkZXJzRW5hYmxlZGAuXG4gICAqL1xuICByZW5kZXJTZWN0aW9uSGVhZGVyPzogPyhpbmZvOiB7c2VjdGlvbjogU2VjdGlvblQsIC4uLn0pID0+IG51bGwgfCBSZWFjdC5Ob2RlLFxuICAvKipcbiAgICogUmVuZGVyZWQgYXQgdGhlIGJvdHRvbSBvZiBlYWNoIHNlY3Rpb24uXG4gICAqL1xuICByZW5kZXJTZWN0aW9uRm9vdGVyPzogPyhpbmZvOiB7c2VjdGlvbjogU2VjdGlvblQsIC4uLn0pID0+IG51bGwgfCBSZWFjdC5Ob2RlLFxuICAvKipcbiAgICogUmVuZGVyZWQgYXQgdGhlIHRvcCBhbmQgYm90dG9tIG9mIGVhY2ggc2VjdGlvbiAobm90ZSB0aGlzIGlzIGRpZmZlcmVudCBmcm9tXG4gICAqIGBJdGVtU2VwYXJhdG9yQ29tcG9uZW50YCB3aGljaCBpcyBvbmx5IHJlbmRlcmVkIGJldHdlZW4gaXRlbXMpLiBUaGVzZSBhcmUgaW50ZW5kZWQgdG8gc2VwYXJhdGVcbiAgICogc2VjdGlvbnMgZnJvbSB0aGUgaGVhZGVycyBhYm92ZSBhbmQgYmVsb3cgYW5kIHR5cGljYWxseSBoYXZlIHRoZSBzYW1lIGhpZ2hsaWdodCByZXNwb25zZSBhc1xuICAgKiBgSXRlbVNlcGFyYXRvckNvbXBvbmVudGAuIEFsc28gcmVjZWl2ZXMgYGhpZ2hsaWdodGVkYCwgYFtsZWFkaW5nL3RyYWlsaW5nXVtJdGVtL1NlcGFyYXRvcl1gLFxuICAgKiBhbmQgYW55IGN1c3RvbSBwcm9wcyBmcm9tIGBzZXBhcmF0b3JzLnVwZGF0ZVByb3BzYC5cbiAgICovXG4gIFNlY3Rpb25TZXBhcmF0b3JDb21wb25lbnQ/OiA/UmVhY3QuQ29tcG9uZW50VHlwZTxhbnk+LFxuICAvKipcbiAgICogTWFrZXMgc2VjdGlvbiBoZWFkZXJzIHN0aWNrIHRvIHRoZSB0b3Agb2YgdGhlIHNjcmVlbiB1bnRpbCB0aGUgbmV4dCBvbmUgcHVzaGVzIGl0IG9mZi4gT25seVxuICAgKiBlbmFibGVkIGJ5IGRlZmF1bHQgb24gaU9TIGJlY2F1c2UgdGhhdCBpcyB0aGUgcGxhdGZvcm0gc3RhbmRhcmQgdGhlcmUuXG4gICAqL1xuICBzdGlja3lTZWN0aW9uSGVhZGVyc0VuYWJsZWQ/OiBib29sZWFuLFxuICBvbkVuZFJlYWNoZWQ/OiA/KHtkaXN0YW5jZUZyb21FbmQ6IG51bWJlciwgLi4ufSkgPT4gdm9pZCxcbnx9O1xuXG50eXBlIFZpcnR1YWxpemVkTGlzdFByb3BzID0gUmVhY3QuRWxlbWVudENvbmZpZzx0eXBlb2YgVmlydHVhbGl6ZWRMaXN0PjtcblxuZXhwb3J0IHR5cGUgUHJvcHM8U2VjdGlvblQ+ID0ge3xcbiAgLi4uUmVxdWlyZWRQcm9wczxTZWN0aW9uVD4sXG4gIC4uLk9wdGlvbmFsUHJvcHM8U2VjdGlvblQ+LFxuICAuLi4kRGlmZjxcbiAgICBWaXJ0dWFsaXplZExpc3RQcm9wcyxcbiAgICB7XG4gICAgICByZW5kZXJJdGVtOiAkUHJvcGVydHlUeXBlPFZpcnR1YWxpemVkTGlzdFByb3BzLCAncmVuZGVySXRlbSc+LFxuICAgICAgZGF0YTogJFByb3BlcnR5VHlwZTxWaXJ0dWFsaXplZExpc3RQcm9wcywgJ2RhdGEnPixcbiAgICAgIC4uLlxuICAgIH0sXG4gID4sXG58fTtcbmV4cG9ydCB0eXBlIFNjcm9sbFRvTG9jYXRpb25QYXJhbXNUeXBlID0ge3xcbiAgYW5pbWF0ZWQ/OiA/Ym9vbGVhbixcbiAgaXRlbUluZGV4OiBudW1iZXIsXG4gIHNlY3Rpb25JbmRleDogbnVtYmVyLFxuICB2aWV3T2Zmc2V0PzogbnVtYmVyLFxuICB2aWV3UG9zaXRpb24/OiBudW1iZXIsXG58fTtcblxudHlwZSBTdGF0ZSA9IHtjaGlsZFByb3BzOiBWaXJ0dWFsaXplZExpc3RQcm9wcywgLi4ufTtcblxuLyoqXG4gKiBSaWdodCBub3cgdGhpcyBqdXN0IGZsYXR0ZW5zIGV2ZXJ5dGhpbmcgaW50byBvbmUgbGlzdCBhbmQgdXNlcyBWaXJ0dWFsaXplZExpc3QgdW5kZXIgdGhlXG4gKiBob29kLiBUaGUgb25seSBvcGVyYXRpb24gdGhhdCBtaWdodCBub3Qgc2NhbGUgd2VsbCBpcyBjb25jYXR0aW5nIHRoZSBkYXRhIGFycmF5cyBvZiBhbGwgdGhlXG4gKiBzZWN0aW9ucyB3aGVuIG5ldyBwcm9wcyBhcmUgcmVjZWl2ZWQsIHdoaWNoIHNob3VsZCBiZSBwbGVudHkgZmFzdCBmb3IgdXAgdG8gfjEwLDAwMCBpdGVtcy5cbiAqL1xuY2xhc3MgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdDxcbiAgU2VjdGlvblQ6IFNlY3Rpb25CYXNlPGFueT4sXG4+IGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxQcm9wczxTZWN0aW9uVD4sIFN0YXRlPiB7XG4gIHNjcm9sbFRvTG9jYXRpb24ocGFyYW1zOiBTY3JvbGxUb0xvY2F0aW9uUGFyYW1zVHlwZSkge1xuICAgIGxldCBpbmRleCA9IHBhcmFtcy5pdGVtSW5kZXg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXMuc2VjdGlvbkluZGV4OyBpKyspIHtcbiAgICAgIGluZGV4ICs9IHRoaXMucHJvcHMuZ2V0SXRlbUNvdW50KHRoaXMucHJvcHMuc2VjdGlvbnNbaV0uZGF0YSkgKyAyO1xuICAgIH1cbiAgICBsZXQgdmlld09mZnNldCA9IHBhcmFtcy52aWV3T2Zmc2V0IHx8IDA7XG4gICAgaWYgKHRoaXMuX2xpc3RSZWYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsaXN0UmVmID0gdGhpcy5fbGlzdFJlZjtcbiAgICBpZiAocGFyYW1zLml0ZW1JbmRleCA+IDAgJiYgdGhpcy5wcm9wcy5zdGlja3lTZWN0aW9uSGVhZGVyc0VuYWJsZWQpIHtcbiAgICAgIGNvbnN0IGZyYW1lID0gbGlzdFJlZlxuICAgICAgICAuX19nZXRMaXN0TWV0cmljcygpXG4gICAgICAgIC5nZXRDZWxsTWV0cmljc0FwcHJveChpbmRleCAtIHBhcmFtcy5pdGVtSW5kZXgsIGxpc3RSZWYucHJvcHMpO1xuICAgICAgdmlld09mZnNldCArPSBmcmFtZS5sZW5ndGg7XG4gICAgfVxuICAgIGNvbnN0IHRvSW5kZXhQYXJhbXMgPSB7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICB2aWV3T2Zmc2V0LFxuICAgICAgaW5kZXgsXG4gICAgfTtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgdGhpcy5fbGlzdFJlZi5zY3JvbGxUb0luZGV4KHRvSW5kZXhQYXJhbXMpO1xuICB9XG5cbiAgZ2V0TGlzdFJlZigpOiA/VmlydHVhbGl6ZWRMaXN0IHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdFJlZjtcbiAgfVxuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBJdGVtU2VwYXJhdG9yQ29tcG9uZW50LCAvLyBkb24ndCBwYXNzIHRocm91Z2gsIHJlbmRlcmVkIHdpdGggcmVuZGVySXRlbVxuICAgICAgU2VjdGlvblNlcGFyYXRvckNvbXBvbmVudCxcbiAgICAgIHJlbmRlckl0ZW06IF9yZW5kZXJJdGVtLFxuICAgICAgcmVuZGVyU2VjdGlvbkZvb3RlcixcbiAgICAgIHJlbmRlclNlY3Rpb25IZWFkZXIsXG4gICAgICBzZWN0aW9uczogX3NlY3Rpb25zLFxuICAgICAgc3RpY2t5U2VjdGlvbkhlYWRlcnNFbmFibGVkLFxuICAgICAgLi4ucGFzc1Rocm91Z2hQcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgbGlzdEhlYWRlck9mZnNldCA9IHRoaXMucHJvcHMuTGlzdEhlYWRlckNvbXBvbmVudCA/IDEgOiAwO1xuXG4gICAgY29uc3Qgc3RpY2t5SGVhZGVySW5kaWNlcyA9IHRoaXMucHJvcHMuc3RpY2t5U2VjdGlvbkhlYWRlcnNFbmFibGVkXG4gICAgICA/IChbXTogQXJyYXk8bnVtYmVyPilcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgbGV0IGl0ZW1Db3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBzZWN0aW9uIG9mIHRoaXMucHJvcHMuc2VjdGlvbnMpIHtcbiAgICAgIC8vIFRyYWNrIHRoZSBzZWN0aW9uIGhlYWRlciBpbmRpY2VzXG4gICAgICBpZiAoc3RpY2t5SGVhZGVySW5kaWNlcyAhPSBudWxsKSB7XG4gICAgICAgIHN0aWNreUhlYWRlckluZGljZXMucHVzaChpdGVtQ291bnQgKyBsaXN0SGVhZGVyT2Zmc2V0KTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHR3byBmb3IgdGhlIHNlY3Rpb24gaGVhZGVyIGFuZCBmb290ZXIuXG4gICAgICBpdGVtQ291bnQgKz0gMjtcbiAgICAgIGl0ZW1Db3VudCArPSB0aGlzLnByb3BzLmdldEl0ZW1Db3VudChzZWN0aW9uLmRhdGEpO1xuICAgIH1cbiAgICBjb25zdCByZW5kZXJJdGVtID0gdGhpcy5fcmVuZGVySXRlbShpdGVtQ291bnQpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxWaXJ0dWFsaXplZExpc3RcbiAgICAgICAgey4uLnBhc3NUaHJvdWdoUHJvcHN9XG4gICAgICAgIGtleUV4dHJhY3Rvcj17dGhpcy5fa2V5RXh0cmFjdG9yfVxuICAgICAgICBzdGlja3lIZWFkZXJJbmRpY2VzPXtzdGlja3lIZWFkZXJJbmRpY2VzfVxuICAgICAgICByZW5kZXJJdGVtPXtyZW5kZXJJdGVtfVxuICAgICAgICBkYXRhPXt0aGlzLnByb3BzLnNlY3Rpb25zfVxuICAgICAgICBnZXRJdGVtPXsoc2VjdGlvbnMsIGluZGV4KSA9PlxuICAgICAgICAgIHRoaXMuX2dldEl0ZW0odGhpcy5wcm9wcywgc2VjdGlvbnMsIGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIGdldEl0ZW1Db3VudD17KCkgPT4gaXRlbUNvdW50fVxuICAgICAgICBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkPXtcbiAgICAgICAgICB0aGlzLnByb3BzLm9uVmlld2FibGVJdGVtc0NoYW5nZWRcbiAgICAgICAgICAgID8gdGhpcy5fb25WaWV3YWJsZUl0ZW1zQ2hhbmdlZFxuICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICByZWY9e3RoaXMuX2NhcHR1cmVSZWZ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBfZ2V0SXRlbShcbiAgICBwcm9wczogUHJvcHM8U2VjdGlvblQ+LFxuICAgIHNlY3Rpb25zOiA/JFJlYWRPbmx5QXJyYXk8SXRlbT4sXG4gICAgaW5kZXg6IG51bWJlcixcbiAgKTogP0l0ZW0ge1xuICAgIGlmICghc2VjdGlvbnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgaXRlbUlkeCA9IGluZGV4IC0gMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzZWN0aW9uID0gc2VjdGlvbnNbaV07XG4gICAgICBjb25zdCBzZWN0aW9uRGF0YSA9IHNlY3Rpb24uZGF0YTtcbiAgICAgIGNvbnN0IGl0ZW1Db3VudCA9IHByb3BzLmdldEl0ZW1Db3VudChzZWN0aW9uRGF0YSk7XG4gICAgICBpZiAoaXRlbUlkeCA9PT0gLTEgfHwgaXRlbUlkeCA9PT0gaXRlbUNvdW50KSB7XG4gICAgICAgIC8vIFdlIGludGVuZCBmb3IgdGhlcmUgdG8gYmUgb3ZlcmZsb3cgYnkgb25lIG9uIGJvdGggZW5kcyBvZiB0aGUgbGlzdC5cbiAgICAgICAgLy8gVGhpcyB3aWxsIGJlIGZvciBoZWFkZXJzIGFuZCBmb290ZXJzLiBXaGVuIHJldHVybmluZyBhIGhlYWRlciBvciBmb290ZXJcbiAgICAgICAgLy8gaXRlbSB0aGUgc2VjdGlvbiBpdHNlbGYgaXMgdGhlIGl0ZW0uXG4gICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgICAgfSBlbHNlIGlmIChpdGVtSWR4IDwgaXRlbUNvdW50KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBpbiB0aGUgYm91bmRzIG9mIHRoZSBsaXN0J3MgZGF0YSB0aGVuIHJldHVybiB0aGUgaXRlbS5cbiAgICAgICAgcmV0dXJuIHByb3BzLmdldEl0ZW0oc2VjdGlvbkRhdGEsIGl0ZW1JZHgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbUlkeCAtPSBpdGVtQ291bnQgKyAyOyAvLyBBZGQgdHdvIGZvciB0aGUgaGVhZGVyIGFuZCBmb290ZXJcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lW21pc3NpbmctbG9jYWwtYW5ub3RdXG4gIF9rZXlFeHRyYWN0b3IgPSAoaXRlbTogSXRlbSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGluZm8gPSB0aGlzLl9zdWJFeHRyYWN0b3IoaW5kZXgpO1xuICAgIHJldHVybiAoaW5mbyAmJiBpbmZvLmtleSkgfHwgU3RyaW5nKGluZGV4KTtcbiAgfTtcblxuICBfc3ViRXh0cmFjdG9yKGluZGV4OiBudW1iZXIpOiA/e1xuICAgIHNlY3Rpb246IFNlY3Rpb25ULFxuICAgIC8vIEtleSBvZiB0aGUgc2VjdGlvbiBvciBjb21iaW5lZCBrZXkgZm9yIHNlY3Rpb24gKyBpdGVtXG4gICAga2V5OiBzdHJpbmcsXG4gICAgLy8gUmVsYXRpdmUgaW5kZXggd2l0aGluIHRoZSBzZWN0aW9uXG4gICAgaW5kZXg6ID9udW1iZXIsXG4gICAgLy8gVHJ1ZSBpZiB0aGlzIGlzIHRoZSBzZWN0aW9uIGhlYWRlclxuICAgIGhlYWRlcj86ID9ib29sZWFuLFxuICAgIGxlYWRpbmdJdGVtPzogP0l0ZW0sXG4gICAgbGVhZGluZ1NlY3Rpb24/OiA/U2VjdGlvblQsXG4gICAgdHJhaWxpbmdJdGVtPzogP0l0ZW0sXG4gICAgdHJhaWxpbmdTZWN0aW9uPzogP1NlY3Rpb25ULFxuICAgIC4uLlxuICB9IHtcbiAgICBsZXQgaXRlbUluZGV4ID0gaW5kZXg7XG4gICAgY29uc3Qge2dldEl0ZW0sIGdldEl0ZW1Db3VudCwga2V5RXh0cmFjdG9yLCBzZWN0aW9uc30gPSB0aGlzLnByb3BzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNlY3Rpb24gPSBzZWN0aW9uc1tpXTtcbiAgICAgIGNvbnN0IHNlY3Rpb25EYXRhID0gc2VjdGlvbi5kYXRhO1xuICAgICAgY29uc3Qga2V5ID0gc2VjdGlvbi5rZXkgfHwgU3RyaW5nKGkpO1xuICAgICAgaXRlbUluZGV4IC09IDE7IC8vIFRoZSBzZWN0aW9uIGFkZHMgYW4gaXRlbSBmb3IgdGhlIGhlYWRlclxuICAgICAgaWYgKGl0ZW1JbmRleCA+PSBnZXRJdGVtQ291bnQoc2VjdGlvbkRhdGEpICsgMSkge1xuICAgICAgICBpdGVtSW5kZXggLT0gZ2V0SXRlbUNvdW50KHNlY3Rpb25EYXRhKSArIDE7IC8vIFRoZSBzZWN0aW9uIGFkZHMgYW4gaXRlbSBmb3IgdGhlIGZvb3Rlci5cbiAgICAgIH0gZWxzZSBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNlY3Rpb24sXG4gICAgICAgICAga2V5OiBrZXkgKyAnOmhlYWRlcicsXG4gICAgICAgICAgaW5kZXg6IG51bGwsXG4gICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgIHRyYWlsaW5nU2VjdGlvbjogc2VjdGlvbnNbaSArIDFdLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChpdGVtSW5kZXggPT09IGdldEl0ZW1Db3VudChzZWN0aW9uRGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzZWN0aW9uLFxuICAgICAgICAgIGtleToga2V5ICsgJzpmb290ZXInLFxuICAgICAgICAgIGluZGV4OiBudWxsLFxuICAgICAgICAgIGhlYWRlcjogZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmdTZWN0aW9uOiBzZWN0aW9uc1tpICsgMV0sXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBleHRyYWN0b3IgPVxuICAgICAgICAgIHNlY3Rpb24ua2V5RXh0cmFjdG9yIHx8IGtleUV4dHJhY3RvciB8fCBkZWZhdWx0S2V5RXh0cmFjdG9yO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNlY3Rpb24sXG4gICAgICAgICAga2V5OlxuICAgICAgICAgICAga2V5ICsgJzonICsgZXh0cmFjdG9yKGdldEl0ZW0oc2VjdGlvbkRhdGEsIGl0ZW1JbmRleCksIGl0ZW1JbmRleCksXG4gICAgICAgICAgaW5kZXg6IGl0ZW1JbmRleCxcbiAgICAgICAgICBsZWFkaW5nSXRlbTogZ2V0SXRlbShzZWN0aW9uRGF0YSwgaXRlbUluZGV4IC0gMSksXG4gICAgICAgICAgbGVhZGluZ1NlY3Rpb246IHNlY3Rpb25zW2kgLSAxXSxcbiAgICAgICAgICB0cmFpbGluZ0l0ZW06IGdldEl0ZW0oc2VjdGlvbkRhdGEsIGl0ZW1JbmRleCArIDEpLFxuICAgICAgICAgIHRyYWlsaW5nU2VjdGlvbjogc2VjdGlvbnNbaSArIDFdLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9jb252ZXJ0Vmlld2FibGUgPSAodmlld2FibGU6IFZpZXdUb2tlbik6ID9WaWV3VG9rZW4gPT4ge1xuICAgIGludmFyaWFudCh2aWV3YWJsZS5pbmRleCAhPSBudWxsLCAnUmVjZWl2ZWQgYSBicm9rZW4gVmlld1Rva2VuJyk7XG4gICAgY29uc3QgaW5mbyA9IHRoaXMuX3N1YkV4dHJhY3Rvcih2aWV3YWJsZS5pbmRleCk7XG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qga2V5RXh0cmFjdG9yV2l0aE51bGxhYmxlSW5kZXggPSBpbmZvLnNlY3Rpb24ua2V5RXh0cmFjdG9yO1xuICAgIGNvbnN0IGtleUV4dHJhY3RvcldpdGhOb25OdWxsYWJsZUluZGV4ID1cbiAgICAgIHRoaXMucHJvcHMua2V5RXh0cmFjdG9yIHx8IGRlZmF1bHRLZXlFeHRyYWN0b3I7XG4gICAgY29uc3Qga2V5ID1cbiAgICAgIGtleUV4dHJhY3RvcldpdGhOdWxsYWJsZUluZGV4ICE9IG51bGxcbiAgICAgICAgPyBrZXlFeHRyYWN0b3JXaXRoTnVsbGFibGVJbmRleCh2aWV3YWJsZS5pdGVtLCBpbmZvLmluZGV4KVxuICAgICAgICA6IGtleUV4dHJhY3RvcldpdGhOb25OdWxsYWJsZUluZGV4KHZpZXdhYmxlLml0ZW0sIGluZm8uaW5kZXggPz8gMCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4udmlld2FibGUsXG4gICAgICBpbmRleDogaW5mby5pbmRleCxcbiAgICAgIGtleSxcbiAgICAgIHNlY3Rpb246IGluZm8uc2VjdGlvbixcbiAgICB9O1xuICB9O1xuXG4gIF9vblZpZXdhYmxlSXRlbXNDaGFuZ2VkID0gKHtcbiAgICB2aWV3YWJsZUl0ZW1zLFxuICAgIGNoYW5nZWQsXG4gIH06IHtcbiAgICB2aWV3YWJsZUl0ZW1zOiBBcnJheTxWaWV3VG9rZW4+LFxuICAgIGNoYW5nZWQ6IEFycmF5PFZpZXdUb2tlbj4sXG4gICAgLi4uXG4gIH0pID0+IHtcbiAgICBjb25zdCBvblZpZXdhYmxlSXRlbXNDaGFuZ2VkID0gdGhpcy5wcm9wcy5vblZpZXdhYmxlSXRlbXNDaGFuZ2VkO1xuICAgIGlmIChvblZpZXdhYmxlSXRlbXNDaGFuZ2VkICE9IG51bGwpIHtcbiAgICAgIG9uVmlld2FibGVJdGVtc0NoYW5nZWQoe1xuICAgICAgICB2aWV3YWJsZUl0ZW1zOiB2aWV3YWJsZUl0ZW1zXG4gICAgICAgICAgLm1hcCh0aGlzLl9jb252ZXJ0Vmlld2FibGUsIHRoaXMpXG4gICAgICAgICAgLmZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgY2hhbmdlZDogY2hhbmdlZC5tYXAodGhpcy5fY29udmVydFZpZXdhYmxlLCB0aGlzKS5maWx0ZXIoQm9vbGVhbiksXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3JlbmRlckl0ZW0gPVxuICAgIChsaXN0SXRlbUNvdW50OiBudW1iZXIpOiAkRmxvd0ZpeE1lID0+XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLXVuc3RhYmxlLW5lc3RlZC1jb21wb25lbnRzXG4gICAgKHtpdGVtLCBpbmRleH06IHtpdGVtOiBJdGVtLCBpbmRleDogbnVtYmVyLCAuLi59KSA9PiB7XG4gICAgICBjb25zdCBpbmZvID0gdGhpcy5fc3ViRXh0cmFjdG9yKGluZGV4KTtcbiAgICAgIGlmICghaW5mbykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZm9JbmRleCA9IGluZm8uaW5kZXg7XG4gICAgICBpZiAoaW5mb0luZGV4ID09IG51bGwpIHtcbiAgICAgICAgY29uc3Qge3NlY3Rpb259ID0gaW5mbztcbiAgICAgICAgaWYgKGluZm8uaGVhZGVyID09PSB0cnVlKSB7XG4gICAgICAgICAgY29uc3Qge3JlbmRlclNlY3Rpb25IZWFkZXJ9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICByZXR1cm4gcmVuZGVyU2VjdGlvbkhlYWRlciA/IHJlbmRlclNlY3Rpb25IZWFkZXIoe3NlY3Rpb259KSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge3JlbmRlclNlY3Rpb25Gb290ZXJ9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgICByZXR1cm4gcmVuZGVyU2VjdGlvbkZvb3RlciA/IHJlbmRlclNlY3Rpb25Gb290ZXIoe3NlY3Rpb259KSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlbmRlckl0ZW0gPSBpbmZvLnNlY3Rpb24ucmVuZGVySXRlbSB8fCB0aGlzLnByb3BzLnJlbmRlckl0ZW07XG4gICAgICAgIGNvbnN0IFNlcGFyYXRvckNvbXBvbmVudCA9IHRoaXMuX2dldFNlcGFyYXRvckNvbXBvbmVudChcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBpbmZvLFxuICAgICAgICAgIGxpc3RJdGVtQ291bnQsXG4gICAgICAgICk7XG4gICAgICAgIGludmFyaWFudChyZW5kZXJJdGVtLCAnbm8gcmVuZGVySXRlbSEnKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8SXRlbVdpdGhTZXBhcmF0b3JcbiAgICAgICAgICAgIFNlcGFyYXRvckNvbXBvbmVudD17U2VwYXJhdG9yQ29tcG9uZW50fVxuICAgICAgICAgICAgTGVhZGluZ1NlcGFyYXRvckNvbXBvbmVudD17XG4gICAgICAgICAgICAgIGluZm9JbmRleCA9PT0gMCA/IHRoaXMucHJvcHMuU2VjdGlvblNlcGFyYXRvckNvbXBvbmVudCA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2VsbEtleT17aW5mby5rZXl9XG4gICAgICAgICAgICBpbmRleD17aW5mb0luZGV4fVxuICAgICAgICAgICAgaXRlbT17aXRlbX1cbiAgICAgICAgICAgIGxlYWRpbmdJdGVtPXtpbmZvLmxlYWRpbmdJdGVtfVxuICAgICAgICAgICAgbGVhZGluZ1NlY3Rpb249e2luZm8ubGVhZGluZ1NlY3Rpb259XG4gICAgICAgICAgICBwcmV2Q2VsbEtleT17KHRoaXMuX3N1YkV4dHJhY3RvcihpbmRleCAtIDEpIHx8IHt9KS5rZXl9XG4gICAgICAgICAgICAvLyBDYWxsYmFjayB0byBwcm92aWRlIHVwZGF0ZUhpZ2hsaWdodCBmb3IgdGhpcyBpdGVtXG4gICAgICAgICAgICBzZXRTZWxmSGlnaGxpZ2h0Q2FsbGJhY2s9e3RoaXMuX3NldFVwZGF0ZUhpZ2hsaWdodEZvcn1cbiAgICAgICAgICAgIHNldFNlbGZVcGRhdGVQcm9wc0NhbGxiYWNrPXt0aGlzLl9zZXRVcGRhdGVQcm9wc0Zvcn1cbiAgICAgICAgICAgIC8vIFByb3ZpZGUgY2hpbGQgYWJpbGl0eSB0byBzZXQgaGlnaGxpZ2h0L3VwZGF0ZVByb3BzIGZvciBwcmV2aW91cyBpdGVtIHVzaW5nIHByZXZDZWxsS2V5XG4gICAgICAgICAgICB1cGRhdGVIaWdobGlnaHRGb3I9e3RoaXMuX3VwZGF0ZUhpZ2hsaWdodEZvcn1cbiAgICAgICAgICAgIHVwZGF0ZVByb3BzRm9yPXt0aGlzLl91cGRhdGVQcm9wc0Zvcn1cbiAgICAgICAgICAgIHJlbmRlckl0ZW09e3JlbmRlckl0ZW19XG4gICAgICAgICAgICBzZWN0aW9uPXtpbmZvLnNlY3Rpb259XG4gICAgICAgICAgICB0cmFpbGluZ0l0ZW09e2luZm8udHJhaWxpbmdJdGVtfVxuICAgICAgICAgICAgdHJhaWxpbmdTZWN0aW9uPXtpbmZvLnRyYWlsaW5nU2VjdGlvbn1cbiAgICAgICAgICAgIGludmVydGVkPXshIXRoaXMucHJvcHMuaW52ZXJ0ZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gIF91cGRhdGVQcm9wc0ZvciA9IChjZWxsS2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgICBjb25zdCB1cGRhdGVQcm9wcyA9IHRoaXMuX3VwZGF0ZVByb3BzTWFwW2NlbGxLZXldO1xuICAgIGlmICh1cGRhdGVQcm9wcyAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVQcm9wcyh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIF91cGRhdGVIaWdobGlnaHRGb3IgPSAoY2VsbEtleTogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgIGNvbnN0IHVwZGF0ZUhpZ2hsaWdodCA9IHRoaXMuX3VwZGF0ZUhpZ2hsaWdodE1hcFtjZWxsS2V5XTtcbiAgICBpZiAodXBkYXRlSGlnaGxpZ2h0ICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZUhpZ2hsaWdodCh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIF9zZXRVcGRhdGVIaWdobGlnaHRGb3IgPSAoXG4gICAgY2VsbEtleTogc3RyaW5nLFxuICAgIHVwZGF0ZUhpZ2hsaWdodEZuOiA/KGJvb2xlYW4pID0+IHZvaWQsXG4gICkgPT4ge1xuICAgIGlmICh1cGRhdGVIaWdobGlnaHRGbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLl91cGRhdGVIaWdobGlnaHRNYXBbY2VsbEtleV0gPSB1cGRhdGVIaWdobGlnaHRGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBkZWxldGUgdGhpcy5fdXBkYXRlSGlnaGxpZ2h0Rm9yW2NlbGxLZXldO1xuICAgIH1cbiAgfTtcblxuICBfc2V0VXBkYXRlUHJvcHNGb3IgPSAoY2VsbEtleTogc3RyaW5nLCB1cGRhdGVQcm9wc0ZuOiA/KGJvb2xlYW4pID0+IHZvaWQpID0+IHtcbiAgICBpZiAodXBkYXRlUHJvcHNGbiAhPSBudWxsKSB7XG4gICAgICB0aGlzLl91cGRhdGVQcm9wc01hcFtjZWxsS2V5XSA9IHVwZGF0ZVByb3BzRm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl91cGRhdGVQcm9wc01hcFtjZWxsS2V5XTtcbiAgICB9XG4gIH07XG5cbiAgX2dldFNlcGFyYXRvckNvbXBvbmVudChcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGluZm8/OiA/T2JqZWN0LFxuICAgIGxpc3RJdGVtQ291bnQ6IG51bWJlcixcbiAgKTogP1JlYWN0LkNvbXBvbmVudFR5cGU8YW55PiB7XG4gICAgaW5mbyA9IGluZm8gfHwgdGhpcy5fc3ViRXh0cmFjdG9yKGluZGV4KTtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBJdGVtU2VwYXJhdG9yQ29tcG9uZW50ID1cbiAgICAgIGluZm8uc2VjdGlvbi5JdGVtU2VwYXJhdG9yQ29tcG9uZW50IHx8IHRoaXMucHJvcHMuSXRlbVNlcGFyYXRvckNvbXBvbmVudDtcbiAgICBjb25zdCB7U2VjdGlvblNlcGFyYXRvckNvbXBvbmVudH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzTGFzdEl0ZW1Jbkxpc3QgPSBpbmRleCA9PT0gbGlzdEl0ZW1Db3VudCAtIDE7XG4gICAgY29uc3QgaXNMYXN0SXRlbUluU2VjdGlvbiA9XG4gICAgICBpbmZvLmluZGV4ID09PSB0aGlzLnByb3BzLmdldEl0ZW1Db3VudChpbmZvLnNlY3Rpb24uZGF0YSkgLSAxO1xuICAgIGlmIChTZWN0aW9uU2VwYXJhdG9yQ29tcG9uZW50ICYmIGlzTGFzdEl0ZW1JblNlY3Rpb24pIHtcbiAgICAgIHJldHVybiBTZWN0aW9uU2VwYXJhdG9yQ29tcG9uZW50O1xuICAgIH1cbiAgICBpZiAoSXRlbVNlcGFyYXRvckNvbXBvbmVudCAmJiAhaXNMYXN0SXRlbUluU2VjdGlvbiAmJiAhaXNMYXN0SXRlbUluTGlzdCkge1xuICAgICAgcmV0dXJuIEl0ZW1TZXBhcmF0b3JDb21wb25lbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgX3VwZGF0ZUhpZ2hsaWdodE1hcDoge1tzdHJpbmddOiAoYm9vbGVhbikgPT4gdm9pZH0gPSB7fTtcbiAgX3VwZGF0ZVByb3BzTWFwOiB7W3N0cmluZ106IHZvaWQgfCAoYm9vbGVhbiA9PiB2b2lkKX0gPSB7fTtcbiAgX2xpc3RSZWY6ID9WaXJ0dWFsaXplZExpc3Q7XG4gIF9jYXB0dXJlUmVmID0gKHJlZjogbnVsbCB8IFZpcnR1YWxpemVkTGlzdCkgPT4ge1xuICAgIHRoaXMuX2xpc3RSZWYgPSByZWY7XG4gIH07XG59XG5cbnR5cGUgSXRlbVdpdGhTZXBhcmF0b3JDb21tb25Qcm9wcyA9ICRSZWFkT25seTx7fFxuICBsZWFkaW5nSXRlbTogP0l0ZW0sXG4gIGxlYWRpbmdTZWN0aW9uOiA/T2JqZWN0LFxuICBzZWN0aW9uOiBPYmplY3QsXG4gIHRyYWlsaW5nSXRlbTogP0l0ZW0sXG4gIHRyYWlsaW5nU2VjdGlvbjogP09iamVjdCxcbnx9PjtcblxudHlwZSBJdGVtV2l0aFNlcGFyYXRvclByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLkl0ZW1XaXRoU2VwYXJhdG9yQ29tbW9uUHJvcHMsXG4gIExlYWRpbmdTZXBhcmF0b3JDb21wb25lbnQ6ID9SZWFjdC5Db21wb25lbnRUeXBlPGFueT4sXG4gIFNlcGFyYXRvckNvbXBvbmVudDogP1JlYWN0LkNvbXBvbmVudFR5cGU8YW55PixcbiAgY2VsbEtleTogc3RyaW5nLFxuICBpbmRleDogbnVtYmVyLFxuICBpdGVtOiBJdGVtLFxuICBzZXRTZWxmSGlnaGxpZ2h0Q2FsbGJhY2s6IChcbiAgICBjZWxsS2V5OiBzdHJpbmcsXG4gICAgdXBkYXRlRm46ID8oYm9vbGVhbikgPT4gdm9pZCxcbiAgKSA9PiB2b2lkLFxuICBzZXRTZWxmVXBkYXRlUHJvcHNDYWxsYmFjazogKFxuICAgIGNlbGxLZXk6IHN0cmluZyxcbiAgICB1cGRhdGVGbjogPyhib29sZWFuKSA9PiB2b2lkLFxuICApID0+IHZvaWQsXG4gIHByZXZDZWxsS2V5PzogP3N0cmluZyxcbiAgdXBkYXRlSGlnaGxpZ2h0Rm9yOiAocHJldkNlbGxLZXk6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pID0+IHZvaWQsXG4gIHVwZGF0ZVByb3BzRm9yOiAocHJldkNlbGxLZXk6IHN0cmluZywgdmFsdWU6IE9iamVjdCkgPT4gdm9pZCxcbiAgcmVuZGVySXRlbTogRnVuY3Rpb24sXG4gIGludmVydGVkOiBib29sZWFuLFxufH0+O1xuXG5mdW5jdGlvbiBJdGVtV2l0aFNlcGFyYXRvcihwcm9wczogSXRlbVdpdGhTZXBhcmF0b3JQcm9wcyk6IFJlYWN0Lk5vZGUge1xuICBjb25zdCB7XG4gICAgTGVhZGluZ1NlcGFyYXRvckNvbXBvbmVudCxcbiAgICAvLyB0aGlzIGlzIHRoZSB0cmFpbGluZyBzZXBhcmF0b3IgYW5kIGlzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGl0ZW1cbiAgICBTZXBhcmF0b3JDb21wb25lbnQsXG4gICAgY2VsbEtleSxcbiAgICBwcmV2Q2VsbEtleSxcbiAgICBzZXRTZWxmSGlnaGxpZ2h0Q2FsbGJhY2ssXG4gICAgdXBkYXRlSGlnaGxpZ2h0Rm9yLFxuICAgIHNldFNlbGZVcGRhdGVQcm9wc0NhbGxiYWNrLFxuICAgIHVwZGF0ZVByb3BzRm9yLFxuICAgIGl0ZW0sXG4gICAgaW5kZXgsXG4gICAgc2VjdGlvbixcbiAgICBpbnZlcnRlZCxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IFtsZWFkaW5nU2VwYXJhdG9ySGlnbGlnaHRlZCwgc2V0TGVhZGluZ1NlcGFyYXRvckhpZ2hsaWdodGVkXSA9XG4gICAgUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IFtzZXBhcmF0b3JIaWdobGlnaHRlZCwgc2V0U2VwYXJhdG9ySGlnaGxpZ2h0ZWRdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IFtsZWFkaW5nU2VwYXJhdG9yUHJvcHMsIHNldExlYWRpbmdTZXBhcmF0b3JQcm9wc10gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgbGVhZGluZ0l0ZW06IHByb3BzLmxlYWRpbmdJdGVtLFxuICAgIGxlYWRpbmdTZWN0aW9uOiBwcm9wcy5sZWFkaW5nU2VjdGlvbixcbiAgICBzZWN0aW9uOiBwcm9wcy5zZWN0aW9uLFxuICAgIHRyYWlsaW5nSXRlbTogcHJvcHMuaXRlbSxcbiAgICB0cmFpbGluZ1NlY3Rpb246IHByb3BzLnRyYWlsaW5nU2VjdGlvbixcbiAgfSk7XG4gIGNvbnN0IFtzZXBhcmF0b3JQcm9wcywgc2V0U2VwYXJhdG9yUHJvcHNdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGxlYWRpbmdJdGVtOiBwcm9wcy5pdGVtLFxuICAgIGxlYWRpbmdTZWN0aW9uOiBwcm9wcy5sZWFkaW5nU2VjdGlvbixcbiAgICBzZWN0aW9uOiBwcm9wcy5zZWN0aW9uLFxuICAgIHRyYWlsaW5nSXRlbTogcHJvcHMudHJhaWxpbmdJdGVtLFxuICAgIHRyYWlsaW5nU2VjdGlvbjogcHJvcHMudHJhaWxpbmdTZWN0aW9uLFxuICB9KTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFNlbGZIaWdobGlnaHRDYWxsYmFjayhjZWxsS2V5LCBzZXRTZXBhcmF0b3JIaWdobGlnaHRlZCk7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICBzZXRTZWxmVXBkYXRlUHJvcHNDYWxsYmFjayhjZWxsS2V5LCBzZXRTZXBhcmF0b3JQcm9wcyk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2V0U2VsZlVwZGF0ZVByb3BzQ2FsbGJhY2soY2VsbEtleSwgbnVsbCk7XG4gICAgICBzZXRTZWxmSGlnaGxpZ2h0Q2FsbGJhY2soY2VsbEtleSwgbnVsbCk7XG4gICAgfTtcbiAgfSwgW1xuICAgIGNlbGxLZXksXG4gICAgc2V0U2VsZkhpZ2hsaWdodENhbGxiYWNrLFxuICAgIHNldFNlcGFyYXRvclByb3BzLFxuICAgIHNldFNlbGZVcGRhdGVQcm9wc0NhbGxiYWNrLFxuICBdKTtcblxuICBjb25zdCBzZXBhcmF0b3JzID0ge1xuICAgIGhpZ2hsaWdodDogKCkgPT4ge1xuICAgICAgc2V0TGVhZGluZ1NlcGFyYXRvckhpZ2hsaWdodGVkKHRydWUpO1xuICAgICAgc2V0U2VwYXJhdG9ySGlnaGxpZ2h0ZWQodHJ1ZSk7XG4gICAgICBpZiAocHJldkNlbGxLZXkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVIaWdobGlnaHRGb3IocHJldkNlbGxLZXksIHRydWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5oaWdobGlnaHQ6ICgpID0+IHtcbiAgICAgIHNldExlYWRpbmdTZXBhcmF0b3JIaWdobGlnaHRlZChmYWxzZSk7XG4gICAgICBzZXRTZXBhcmF0b3JIaWdobGlnaHRlZChmYWxzZSk7XG4gICAgICBpZiAocHJldkNlbGxLZXkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVIaWdobGlnaHRGb3IocHJldkNlbGxLZXksIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVByb3BzOiAoXG4gICAgICBzZWxlY3Q6ICdsZWFkaW5nJyB8ICd0cmFpbGluZycsXG4gICAgICBuZXdQcm9wczogUGFydGlhbDxJdGVtV2l0aFNlcGFyYXRvckNvbW1vblByb3BzPixcbiAgICApID0+IHtcbiAgICAgIGlmIChzZWxlY3QgPT09ICdsZWFkaW5nJykge1xuICAgICAgICBpZiAoTGVhZGluZ1NlcGFyYXRvckNvbXBvbmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgc2V0TGVhZGluZ1NlcGFyYXRvclByb3BzKHsuLi5sZWFkaW5nU2VwYXJhdG9yUHJvcHMsIC4uLm5ld1Byb3BzfSk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJldkNlbGxLZXkgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgcHJldmlvdXMgaXRlbSdzIHNlcGFyYXRvclxuICAgICAgICAgIHVwZGF0ZVByb3BzRm9yKHByZXZDZWxsS2V5LCB7Li4ubGVhZGluZ1NlcGFyYXRvclByb3BzLCAuLi5uZXdQcm9wc30pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdCA9PT0gJ3RyYWlsaW5nJyAmJiBTZXBhcmF0b3JDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgICBzZXRTZXBhcmF0b3JQcm9wcyh7Li4uc2VwYXJhdG9yUHJvcHMsIC4uLm5ld1Byb3BzfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbiAgY29uc3QgZWxlbWVudCA9IHByb3BzLnJlbmRlckl0ZW0oe1xuICAgIGl0ZW0sXG4gICAgaW5kZXgsXG4gICAgc2VjdGlvbixcbiAgICBzZXBhcmF0b3JzLFxuICB9KTtcbiAgY29uc3QgbGVhZGluZ1NlcGFyYXRvciA9IExlYWRpbmdTZXBhcmF0b3JDb21wb25lbnQgIT0gbnVsbCAmJiAoXG4gICAgPExlYWRpbmdTZXBhcmF0b3JDb21wb25lbnRcbiAgICAgIGhpZ2hsaWdodGVkPXtsZWFkaW5nU2VwYXJhdG9ySGlnbGlnaHRlZH1cbiAgICAgIHsuLi5sZWFkaW5nU2VwYXJhdG9yUHJvcHN9XG4gICAgLz5cbiAgKTtcbiAgY29uc3Qgc2VwYXJhdG9yID0gU2VwYXJhdG9yQ29tcG9uZW50ICE9IG51bGwgJiYgKFxuICAgIDxTZXBhcmF0b3JDb21wb25lbnRcbiAgICAgIGhpZ2hsaWdodGVkPXtzZXBhcmF0b3JIaWdobGlnaHRlZH1cbiAgICAgIHsuLi5zZXBhcmF0b3JQcm9wc31cbiAgICAvPlxuICApO1xuICBjb25zdCBSZW5kZXJTZXBhcmF0b3IgPSBsZWFkaW5nU2VwYXJhdG9yIHx8IHNlcGFyYXRvcjtcbiAgY29uc3QgZmlyc3RTZXBhcmF0b3IgPSBpbnZlcnRlZCA9PT0gZmFsc2UgPyBsZWFkaW5nU2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICBjb25zdCBzZWNvbmRTZXBhcmF0b3IgPSBpbnZlcnRlZCA9PT0gZmFsc2UgPyBzZXBhcmF0b3IgOiBsZWFkaW5nU2VwYXJhdG9yO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtSZW5kZXJTZXBhcmF0b3IgPyBmaXJzdFNlcGFyYXRvciA6IG51bGx9XG4gICAgICB7ZWxlbWVudH1cbiAgICAgIHtSZW5kZXJTZXBhcmF0b3IgPyBzZWNvbmRTZXBhcmF0b3IgOiBudWxsfVxuICAgIDwvPlxuICApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZpcnR1YWxpemVkU2VjdGlvbkxpc3QgYXMgY29tcG9uZW50KFxuICByZWY6IFJlYWN0LlJlZlNldHRlcjxcbiAgICBpbnRlcmZhY2Uge1xuICAgICAgZ2V0TGlzdFJlZigpOiA/VmlydHVhbGl6ZWRMaXN0LFxuICAgICAgc2Nyb2xsVG9Mb2NhdGlvbihwYXJhbXM6IFNjcm9sbFRvTG9jYXRpb25QYXJhbXNUeXBlKTogdm9pZCxcbiAgICB9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