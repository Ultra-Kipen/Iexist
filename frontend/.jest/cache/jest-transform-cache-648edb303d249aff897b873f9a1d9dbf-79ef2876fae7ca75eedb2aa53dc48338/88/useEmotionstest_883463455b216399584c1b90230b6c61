556157cb1cbf8009c8cb659afbf895bf
_getJestObj().mock("../../src/store", function () {
  return {
    useStore: function useStore() {
      return {
        state: {
          emotions: []
        },
        dispatch: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/store/actions", function () {
  return {
    actions: {
      setEmotions: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useEmotions = require("../../src/hooks/useEmotions");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockJsonPromise = Promise.resolve([{
  id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}]);
var mockFetchPromise = Promise.resolve({
  ok: true,
  json: function json() {
    return mockJsonPromise;
  }
});
global.fetch = jest.fn().mockImplementation(function () {
  return mockFetchPromise;
});
describe('useEmotions Hook', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should initialize with empty emotions and start loading', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook.result;
    expect(result.current.loading).toBe(true);
    expect(result.current.emotions).toEqual([]);
    expect(result.current.selectedEmotions).toEqual([]);
    expect(result.current.error).toBeNull();
  });
  it('should toggle emotion selection', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook2.result;
    (0, _reactHooks.act)(function () {
      result.current.toggleEmotion(1);
    });
    expect(result.current.selectedEmotions).toContain(1);
    (0, _reactHooks.act)(function () {
      result.current.toggleEmotion(1);
    });
    expect(result.current.selectedEmotions).not.toContain(1);
  });
  it('should select emotion', function () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook3.result;
    (0, _reactHooks.act)(function () {
      result.current.selectEmotion(1);
    });
    expect(result.current.selectedEmotions).toContain(1);
    (0, _reactHooks.act)(function () {
      result.current.selectEmotion(1);
    });
    expect(result.current.selectedEmotions.filter(function (id) {
      return id === 1;
    }).length).toBe(1);
  });
  it('should deselect emotion', function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook4.result;
    (0, _reactHooks.act)(function () {
      result.current.selectEmotion(1);
      result.current.selectEmotion(2);
    });
    expect(result.current.selectedEmotions).toContain(1);
    expect(result.current.selectedEmotions).toContain(2);
    (0, _reactHooks.act)(function () {
      result.current.deselectEmotion(1);
    });
    expect(result.current.selectedEmotions).not.toContain(1);
    expect(result.current.selectedEmotions).toContain(2);
  });
  it('should clear all selected emotions', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook5.result;
    (0, _reactHooks.act)(function () {
      result.current.selectEmotion(1);
      result.current.selectEmotion(2);
    });
    expect(result.current.selectedEmotions.length).toBe(2);
    (0, _reactHooks.act)(function () {
      result.current.clearEmotions();
    });
    expect(result.current.selectedEmotions.length).toBe(0);
  });
  it('should handle fetch error', (0, _asyncToGenerator2.default)(function* () {
    global.fetch = jest.fn().mockImplementationOnce(function () {
      return Promise.reject(new Error("감정 목록을 불러오는데 실패했습니다."));
    });
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook6.result;
    expect(result.current.loading).toBe(true);
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.fetchEmotions();
    }));
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBe("감정 목록을 불러오는데 실패했습니다.");
  }));
  it('should fetch emotions manually', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useEmotions.useEmotions)();
      }),
      result = _renderHook7.result;
    global.fetch = jest.fn().mockClear();
    global.fetch = jest.fn().mockImplementationOnce(function () {
      return mockFetchPromise;
    });
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.fetchEmotions();
    }));
    expect(global.fetch).toHaveBeenCalledWith('/api/emotions');
    expect(result.current.loading).toBe(false);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,