a0ace71d1e5fbca65992461203003407
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var useTheme = function useTheme() {
  return {
    theme: {
      colors: {
        background: '#ffffff'
      },
      dark: false
    }
  };
};
var LoadingIndicator = function LoadingIndicator() {
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    testID: "loading-indicator",
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: "\uB85C\uB529\uC911..."
    })
  });
};
var SafeAreaView = function SafeAreaView(_ref) {
  var children = _ref.children,
    style = _ref.style;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: style,
    children: children
  });
};
var AuthLayout = function AuthLayout(_ref2) {
  var children = _ref2.children,
    _ref2$loading = _ref2.loading,
    loading = _ref2$loading === void 0 ? false : _ref2$loading,
    title = _ref2.title,
    footer = _ref2.footer,
    _ref2$imageBackground = _ref2.imageBackground,
    imageBackground = _ref2$imageBackground === void 0 ? false : _ref2$imageBackground,
    _ref2$logoVisible = _ref2.logoVisible,
    logoVisible = _ref2$logoVisible === void 0 ? true : _ref2$logoVisible;
  var _useTheme = useTheme(),
    theme = _useTheme.theme;
  var dismissKeyboard = function dismissKeyboard() {
    if (typeof _reactNative.Keyboard !== 'undefined' && typeof _reactNative.Keyboard.dismiss === 'function') {
      _reactNative.Keyboard.dismiss();
    }
  };
  var renderContent = function renderContent() {
    return (0, _jsxRuntime.jsx)(_reactNative.KeyboardAvoidingView, {
      behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : 'height',
      style: styles.keyboardView,
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableWithoutFeedback, {
        onPress: dismissKeyboard,
        children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
          contentContainerStyle: styles.scrollView,
          keyboardShouldPersistTaps: "handled",
          children: [logoVisible && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.logoContainer,
            children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: {},
              style: styles.logo,
              testID: "logo-image"
            })
          }), title && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.titleContainer,
            children: title
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.contentContainer,
            children: loading ? (0, _jsxRuntime.jsx)(LoadingIndicator, {}) : children
          }), footer && (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: styles.footerContainer,
            children: footer
          })]
        })
      })
    });
  };
  if (imageBackground) {
    return (0, _jsxRuntime.jsxs)(SafeAreaView, {
      style: styles.container,
      children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
        backgroundColor: "transparent",
        translucent: true,
        barStyle: "light-content"
      }), (0, _jsxRuntime.jsx)(_reactNative.ImageBackground, {
        source: {},
        style: styles.backgroundImage,
        testID: "image-background",
        children: (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.overlay,
          children: renderContent()
        })
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(SafeAreaView, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.StatusBar, {
      backgroundColor: theme.colors.background,
      barStyle: theme.dark ? 'light-content' : 'dark-content'
    }), renderContent()]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  backgroundImage: {
    flex: 1,
    width: '100%',
    height: '100%'
  },
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    paddingTop: _reactNative.Platform.OS === 'android' ? 30 : 0
  },
  keyboardView: {
    flex: 1
  },
  scrollView: {
    flexGrow: 1,
    paddingHorizontal: 20,
    paddingBottom: 20
  },
  logoContainer: {
    alignItems: 'center',
    marginTop: 50,
    marginBottom: 30
  },
  logo: {
    width: 150,
    height: 150
  },
  titleContainer: {
    marginBottom: 30
  },
  contentContainer: {
    flex: 1,
    width: '100%'
  },
  footerContainer: {
    width: '100%',
    marginTop: 20,
    alignItems: 'center'
  }
});
var _default = exports.default = AuthLayout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,