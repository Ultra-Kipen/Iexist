4f77807fd2c6edc92afa5db94a5dc999
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var Button = function Button(_ref) {
  var title = _ref.title,
    onPress = _ref.onPress,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'primary' : _ref$type,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'medium' : _ref$size,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    style = _ref.style,
    textStyle = _ref.textStyle,
    leftIcon = _ref.leftIcon,
    rightIcon = _ref.rightIcon;
  var buttonStyles = [styles.button, styles[`${type}Button`], styles[`${size}Button`], disabled && styles.disabledButton, style];
  var textStyles = [styles.text, styles[`${type}Text`], styles[`${size}Text`], disabled && styles.disabledText, textStyle];
  var handlePress = function handlePress() {
    if (!disabled && !loading) {
      onPress();
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    style: buttonStyles,
    onPress: handlePress,
    disabled: disabled || loading,
    activeOpacity: 0.7,
    children: [!loading && leftIcon, !loading && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: textStyles,
      children: title
    }), loading && (0, _jsxRuntime.jsx)(_reactNative.ActivityIndicator, {
      color: "#FFFFFF"
    }), !loading && rightIcon]
  });
};
var styles = _reactNative.StyleSheet.create({
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 8,
    paddingHorizontal: 16
  },
  primaryButton: {
    backgroundColor: '#007AFF'
  },
  secondaryButton: {
    backgroundColor: '#E9E9EB'
  },
  outlineButton: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#007AFF'
  },
  textButton: {
    backgroundColor: 'transparent',
    paddingHorizontal: 0
  },
  smallButton: {
    height: 32,
    paddingHorizontal: 12
  },
  mediumButton: {
    height: 44
  },
  largeButton: {
    height: 56
  },
  disabledButton: {
    backgroundColor: '#E9E9EB',
    borderColor: '#E9E9EB'
  },
  text: {
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center'
  },
  primaryText: {
    color: '#FFFFFF'
  },
  secondaryText: {
    color: '#000000'
  },
  outlineText: {
    color: '#007AFF'
  },
  textText: {
    color: '#007AFF'
  },
  smallText: {
    fontSize: 14
  },
  mediumText: {
    fontSize: 16
  },
  largeText: {
    fontSize: 18
  },
  disabledText: {
    color: '#8E8E93'
  }
});
var _default = exports.default = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,