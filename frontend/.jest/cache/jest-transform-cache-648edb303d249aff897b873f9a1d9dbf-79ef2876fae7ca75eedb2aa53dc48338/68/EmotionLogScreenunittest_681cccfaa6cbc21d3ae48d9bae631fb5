6aeb3afdd0b8a06dc9f4ef93e179cfcc
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'Text',
    Chip: 'Chip',
    Button: 'Button',
    TextInput: 'TextInput',
    ActivityIndicator: 'ActivityIndicator'
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var alertMock = jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  var mockEmotions = [{
    emotion_id: 1,
    name: '행복',
    icon: 'happy-icon',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '슬픔',
    icon: 'sad-icon',
    color: '#4682B4'
  }];
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
  });
  afterEach(function () {
    alertMock.mockClear();
  });
  it('renders the screen correctly with all UI elements', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render.getByTestId,
      getAllByTestId = _render.getAllByTestId,
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('오늘의 감정')).toBeTruthy();
      expect(getByText('현재 어떤 감정을 느끼고 계신가요?')).toBeTruthy();
      var emotionChips = getAllByTestId('emotion-chip');
      expect(emotionChips.length).toBe(2);
      expect(getByTestId('emotion-note-input')).toBeTruthy();
      expect(getByTestId('emotion-submit-button')).toBeTruthy();
    }, {
      timeout: 3000
    });
  }));
  it('loads emotion data from API on mount', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.getAllEmotions).toHaveBeenCalledTimes(1);
    });
  }));
  it('toggles emotion selection when chip is pressed', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render2.getAllByTestId,
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var emotionChips = getAllByTestId('emotion-chip');
      expect(emotionChips.length).toBe(2);
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.disabled).toBeTruthy();
      _reactNative.fireEvent.press(emotionChips[0]);
      expect(submitButton.props.disabled).toBeFalsy();
      _reactNative.fireEvent.press(emotionChips[0]);
      expect(submitButton.props.disabled).toBeTruthy();
    }, {
      timeout: 3000
    });
  }));
  it('handles text input for emotion note', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var noteInput = getByTestId('emotion-note-input');
      var testNote = '오늘은 정말 행복한 하루였습니다';
      _reactNative.fireEvent.changeText(noteInput, testNote);
      expect(noteInput.props.value).toBe(testNote);
    });
  }));
  it('shows alert when trying to submit without selecting emotions', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
      expect(alertMock).toHaveBeenCalledWith('알림', '감정을 적어도 하나 이상 선택해주세요.');
    });
  }));
  it('successfully records emotions and navigates back on completion', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockResolvedValue({
      data: {
        status: 'success'
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render5.getAllByTestId,
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var emotionChips = getAllByTestId('emotion-chip');
      var noteInput = getByTestId('emotion-note-input');
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(emotionChips[0]);
      var testNote = '오늘의 행복한 순간들';
      _reactNative.fireEvent.changeText(noteInput, testNote);
      _reactNative.fireEvent.press(submitButton);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: '오늘의 행복한 순간들'
      });
      expect(alertMock).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.arrayContaining([expect.objectContaining({
        text: '확인'
      })]));
      var alertCallback = alertMock.mock.calls[alertMock.mock.calls.length - 1][2][0].onPress;
      if (alertCallback) alertCallback();
      expect(mockNavigation.goBack).toHaveBeenCalled();
    });
  }));
  it('handles recordEmotions API error', (0, _asyncToGenerator2.default)(function* () {
    var errorMessage = '네트워크 오류가 발생했습니다';
    _emotionService.default.recordEmotions.mockRejectedValue({
      response: {
        data: {
          message: errorMessage
        }
      }
    });
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId,
      getByTestId = _render6.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var emotionChips = getAllByTestId('emotion-chip');
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(emotionChips[0]);
      _reactNative.fireEvent.press(submitButton);
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(alertMock).toHaveBeenCalledWith('오류', errorMessage);
      expect(mockNavigation.goBack).not.toHaveBeenCalled();
    });
  }));
  it('handles API loading states correctly', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockImplementation(function () {
      return new Promise(function (resolve) {
        setTimeout(function () {
          resolve({
            data: {
              status: 'success',
              data: mockEmotions
            }
          });
        }, 100);
      });
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation
      })),
      queryByText = _render7.queryByText,
      getByTestId = _render7.getByTestId;
    expect(queryByText('감정 데이터를 불러오는 중...')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('emotion-submit-button')).toBeTruthy();
    });
  }));
  it('handles getAllEmotions API error', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockRejectedValue(new Error('API 에러'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(alertMock).toHaveBeenCalledWith('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
    }, {
      timeout: 5000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,