fef2cf1cab3dbcbeb98fe0f513a2790a
_getJestObj().mock('react-native-paper', function () {
  return {
    Button: 'Button',
    Text: 'Text',
    TextInput: 'TextInput',
    Card: {
      Content: 'Card.Content',
      Actions: 'Card.Actions',
      Title: 'Card.Title'
    },
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    Portal: 'Portal',
    IconButton: 'IconButton',
    Surface: 'Surface',
    FAB: 'FAB',
    Divider: 'Divider',
    Chip: 'Chip',
    Avatar: {
      Icon: 'Avatar.Icon'
    },
    ActivityIndicator: 'ActivityIndicator',
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee',
          surface: '#ffffff'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn(function () {
      return {
        user: {
          id: 1,
          username: 'testuser',
          nickname: '테스트유저'
        },
        isAuthenticated: true
      };
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn(function () {
      return {
        emotions: [{
          emotion_id: 1,
          name: '행복',
          icon: 'icon-happy',
          color: '#FFD700'
        }],
        selectedEmotions: [],
        logEmotion: jest.fn()
      };
    })
  };
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen Basic', function () {
  it('can be imported without crashing', function () {
    var HomeScreen = require("../../src/screens/HomeScreen").default;
    expect(HomeScreen).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJCdXR0b24iLCJUZXh0IiwiVGV4dElucHV0IiwiQ2FyZCIsIkNvbnRlbnQiLCJBY3Rpb25zIiwiVGl0bGUiLCJEaWFsb2ciLCJQb3J0YWwiLCJJY29uQnV0dG9uIiwiU3VyZmFjZSIsIkZBQiIsIkRpdmlkZXIiLCJDaGlwIiwiQXZhdGFyIiwiSWNvbiIsIkFjdGl2aXR5SW5kaWNhdG9yIiwidXNlVGhlbWUiLCJjb2xvcnMiLCJwcmltYXJ5Iiwic3VyZmFjZSIsInVzZUF1dGgiLCJqZXN0IiwiZm4iLCJ1c2VyIiwiaWQiLCJ1c2VybmFtZSIsIm5pY2tuYW1lIiwiaXNBdXRoZW50aWNhdGVkIiwidXNlRW1vdGlvbiIsImVtb3Rpb25zIiwiZW1vdGlvbl9pZCIsIm5hbWUiLCJpY29uIiwiY29sb3IiLCJzZWxlY3RlZEVtb3Rpb25zIiwibG9nRW1vdGlvbiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiZGVzY3JpYmUiLCJpdCIsIkhvbWVTY3JlZW4iLCJkZWZhdWx0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiXSwic291cmNlcyI6WyJIb21lU2NyZWVuQmFzaWMudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSG9tZVNjcmVlbkJhc2ljLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuXHJcbi8vIOyekOuPmSDrqqjtgrkg7Zmc7ISx7ZmUICjstZzshoztlZzsnZgg66qo7YK5KVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgQnV0dG9uOiAnQnV0dG9uJyxcclxuICAgIFRleHQ6ICdUZXh0JyxcclxuICAgIFRleHRJbnB1dDogJ1RleHRJbnB1dCcsXHJcbiAgICBDYXJkOiB7XHJcbiAgICAgIENvbnRlbnQ6ICdDYXJkLkNvbnRlbnQnLFxyXG4gICAgICBBY3Rpb25zOiAnQ2FyZC5BY3Rpb25zJyxcclxuICAgICAgVGl0bGU6ICdDYXJkLlRpdGxlJ1xyXG4gICAgfSxcclxuICAgIERpYWxvZzoge1xyXG4gICAgICBUaXRsZTogJ0RpYWxvZy5UaXRsZScsXHJcbiAgICAgIENvbnRlbnQ6ICdEaWFsb2cuQ29udGVudCcsXHJcbiAgICAgIEFjdGlvbnM6ICdEaWFsb2cuQWN0aW9ucydcclxuICAgIH0sXHJcbiAgICBQb3J0YWw6ICdQb3J0YWwnLFxyXG4gICAgSWNvbkJ1dHRvbjogJ0ljb25CdXR0b24nLFxyXG4gICAgU3VyZmFjZTogJ1N1cmZhY2UnLFxyXG4gICAgRkFCOiAnRkFCJyxcclxuICAgIERpdmlkZXI6ICdEaXZpZGVyJyxcclxuICAgIENoaXA6ICdDaGlwJyxcclxuICAgIEF2YXRhcjoge1xyXG4gICAgICBJY29uOiAnQXZhdGFyLkljb24nXHJcbiAgICB9LFxyXG4gICAgQWN0aXZpdHlJbmRpY2F0b3I6ICdBY3Rpdml0eUluZGljYXRvcicsXHJcbiAgICB1c2VUaGVtZTogKCkgPT4gKHsgY29sb3JzOiB7IHByaW1hcnk6ICcjNjIwMGVlJywgc3VyZmFjZTogJyNmZmZmZmYnIH0gfSlcclxuICB9O1xyXG59KTtcclxuXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9NYXRlcmlhbENvbW11bml0eUljb25zJywgKCkgPT4gJ0ljb24nKTtcclxuXHJcbmplc3QubW9jaygnLi4vLi4vc3JjL2NvbnRleHRzL0F1dGhDb250ZXh0JywgKCkgPT4gKHtcclxuICB1c2VBdXRoOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICB1c2VyOiB7IGlkOiAxLCB1c2VybmFtZTogJ3Rlc3R1c2VyJywgbmlja25hbWU6ICfthYzsiqTtirjsnKDsoIAnIH0sXHJcbiAgICBpc0F1dGhlbnRpY2F0ZWQ6IHRydWVcclxuICB9KSlcclxufSkpO1xyXG5cclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29udGV4dHMvRW1vdGlvbkNvbnRleHQnLCAoKSA9PiAoe1xyXG4gIHVzZUVtb3Rpb246IGplc3QuZm4oKCkgPT4gKHtcclxuICAgIGVtb3Rpb25zOiBbeyBlbW90aW9uX2lkOiAxLCBuYW1lOiAn7ZaJ67O1JywgaWNvbjogJ2ljb24taGFwcHknLCBjb2xvcjogJyNGRkQ3MDAnIH1dLFxyXG4gICAgc2VsZWN0ZWRFbW90aW9uczogW10sXHJcbiAgICBsb2dFbW90aW9uOiBqZXN0LmZuKClcclxuICB9KSlcclxufSkpO1xyXG5cclxuLy8g7Iuk7KCcIO2FjOyKpO2KuCDsvZTrk5xcclxuZGVzY3JpYmUoJ0hvbWVTY3JlZW4gQmFzaWMnLCAoKSA9PiB7XHJcbiAgaXQoJ2NhbiBiZSBpbXBvcnRlZCB3aXRob3V0IGNyYXNoaW5nJywgKCkgPT4ge1xyXG4gICAgLy8g7JWE7KeBIOugjOuNlOungeydgCDtlZjsp4Ag7JWK6rOgIOuLqOyInO2eiCDsnoTtj6ztirjrp4wg7YWM7Iqk7Yq4XHJcbiAgICBjb25zdCBIb21lU2NyZWVuID0gcmVxdWlyZSgnLi4vLi4vc3JjL3NjcmVlbnMvSG9tZVNjcmVlbicpLmRlZmF1bHQ7XHJcbiAgICBleHBlY3QoSG9tZVNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFLQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtFQUNwQyxPQUFPO0lBQ0xDLE1BQU0sRUFBRSxRQUFRO0lBQ2hCQyxJQUFJLEVBQUUsTUFBTTtJQUNaQyxTQUFTLEVBQUUsV0FBVztJQUN0QkMsSUFBSSxFQUFFO01BQ0pDLE9BQU8sRUFBRSxjQUFjO01BQ3ZCQyxPQUFPLEVBQUUsY0FBYztNQUN2QkMsS0FBSyxFQUFFO0lBQ1QsQ0FBQztJQUNEQyxNQUFNLEVBQUU7TUFDTkQsS0FBSyxFQUFFLGNBQWM7TUFDckJGLE9BQU8sRUFBRSxnQkFBZ0I7TUFDekJDLE9BQU8sRUFBRTtJQUNYLENBQUM7SUFDREcsTUFBTSxFQUFFLFFBQVE7SUFDaEJDLFVBQVUsRUFBRSxZQUFZO0lBQ3hCQyxPQUFPLEVBQUUsU0FBUztJQUNsQkMsR0FBRyxFQUFFLEtBQUs7SUFDVkMsT0FBTyxFQUFFLFNBQVM7SUFDbEJDLElBQUksRUFBRSxNQUFNO0lBQ1pDLE1BQU0sRUFBRTtNQUNOQyxJQUFJLEVBQUU7SUFDUixDQUFDO0lBQ0RDLGlCQUFpQixFQUFFLG1CQUFtQjtJQUN0Q0MsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQUVDLE1BQU0sRUFBRTtVQUFFQyxPQUFPLEVBQUUsU0FBUztVQUFFQyxPQUFPLEVBQUU7UUFBVTtNQUFFLENBQUM7SUFBQTtFQUN6RSxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUZ0QixXQUFBLEdBQUtDLElBQUksQ0FBQyxrREFBa0QsRUFBRTtFQUFBLE9BQU0sTUFBTTtBQUFBLEVBQUM7QUFFM0VELFdBQUEsR0FBS0MsSUFBSSxtQ0FBbUM7RUFBQSxPQUFPO0lBQ2pEc0IsT0FBTyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU87UUFDdEJDLElBQUksRUFBRTtVQUFFQyxFQUFFLEVBQUUsQ0FBQztVQUFFQyxRQUFRLEVBQUUsVUFBVTtVQUFFQyxRQUFRLEVBQUU7UUFBUSxDQUFDO1FBQ3hEQyxlQUFlLEVBQUU7TUFDbkIsQ0FBQztJQUFBLENBQUM7RUFDSixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUg5QixXQUFBLEdBQUtDLElBQUksc0NBQXNDO0VBQUEsT0FBTztJQUNwRDhCLFVBQVUsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFPO1FBQ3pCTyxRQUFRLEVBQUUsQ0FBQztVQUFFQyxVQUFVLEVBQUUsQ0FBQztVQUFFQyxJQUFJLEVBQUUsSUFBSTtVQUFFQyxJQUFJLEVBQUUsWUFBWTtVQUFFQyxLQUFLLEVBQUU7UUFBVSxDQUFDLENBQUM7UUFDL0VDLGdCQUFnQixFQUFFLEVBQUU7UUFDcEJDLFVBQVUsRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFDdEIsQ0FBQztJQUFBLENBQUM7RUFDSixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUNjLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBLFNBQUExQyxZQUFBO0VBQUEsSUFBQTJDLFFBQUEsR0FBQUMsT0FBQTtJQUFBcEIsSUFBQSxHQUFBbUIsUUFBQSxDQUFBbkIsSUFBQTtFQUFBeEIsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQXdCLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUdKcUIsUUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07RUFDakNDLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0lBRTNDLElBQU1DLFVBQVUsR0FBR0gsT0FBTywrQkFBK0IsQ0FBQyxDQUFDSSxPQUFPO0lBQ2xFQyxNQUFNLENBQUNGLFVBQVUsQ0FBQyxDQUFDRyxXQUFXLENBQUMsQ0FBQztFQUNsQyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=