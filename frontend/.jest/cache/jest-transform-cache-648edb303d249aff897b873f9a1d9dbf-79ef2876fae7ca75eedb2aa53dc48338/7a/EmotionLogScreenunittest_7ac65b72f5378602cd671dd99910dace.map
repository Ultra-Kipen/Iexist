{"version":3,"names":["_getJestObj","mock","getAllEmotions","jest","fn","recordEmotions","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_EmotionLogScreen","_emotionService","_jsxRuntime","_require","mockEmotions","status","data","emotion_id","name","icon","color","mockAlert","Alert","alert","mockNavigation","goBack","describe","beforeEach","clearAllMocks","emotionService","mockResolvedValue","setupRenderAndWaitForEmotions","_ref","default","renderResult","render","jsx","navigation","waitFor","expect","getByText","toBeTruthy","timeout","apply","arguments","test","_yield$setupRenderAnd","queryByText","toHaveBeenCalledTimes","toBeNull","mockRejectedValue","Error","toHaveBeenCalledWith","_yield$setupRenderAnd2","fireEvent","press","_yield$setupRenderAnd3","getByTestId","noteInput","changeText","props","value","toBe","_yield$setupRenderAnd4","submitButton","accessibilityState","disabled","_yield$setupRenderAnd5","emotion_ids","note","undefined","text","onPress","any","Function","alertButtons","calls","toHaveBeenCalled","response","message","_yield$setupRenderAnd6"],"sources":["EmotionLogScreen.unit.test.tsx"],"sourcesContent":["// tests/unit/EmotionLogScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport { Alert } from 'react-native';\r\nimport EmotionLogScreen from '../../../src/screens/EmotionLogScreen';\r\nimport emotionService from '../../../src/services/api/emotionService';\r\n\r\n// 목 데이터\r\nconst mockEmotions = {\r\n  status: 'success',\r\n  data: [\r\n    { emotion_id: 1, name: '행복', icon: 'emoticon-happy-outline', color: '#FFD700' },\r\n    { emotion_id: 2, name: '감사', icon: 'hand-heart', color: '#FF69B4' },\r\n    { emotion_id: 3, name: '위로', icon: 'hand-peace', color: '#87CEEB' }\r\n  ]\r\n};\r\n\r\n// 모킹 설정\r\njest.mock('../../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn(),\r\n  recordEmotions: jest.fn()\r\n}));\r\n\r\n// Alert 모킹\r\nconst mockAlert = jest.fn();\r\nAlert.alert = mockAlert;\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigation = { goBack: jest.fn() };\r\n\r\ndescribe('EmotionLogScreen 단위 테스트', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (emotionService.getAllEmotions as jest.Mock).mockResolvedValue({ data: mockEmotions });\r\n    (emotionService.recordEmotions as jest.Mock).mockResolvedValue({ status: 200 });\r\n  });\r\n\r\n  const setupRenderAndWaitForEmotions = async () => {\r\n    const renderResult = render(<EmotionLogScreen navigation={mockNavigation} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(renderResult.getByText('행복')).toBeTruthy();\r\n    }, { timeout: 10000 });\r\n\r\n    return renderResult;\r\n  };\r\n\r\n  test('감정 데이터를 성공적으로 로드함', async () => {\r\n    const { getByText, queryByText } = await setupRenderAndWaitForEmotions();\r\n    \r\n    expect(emotionService.getAllEmotions).toHaveBeenCalledTimes(1);\r\n    expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();\r\n    expect(getByText('오늘의 감정')).toBeTruthy();\r\n    expect(getByText('현재 어떤 감정을 느끼고 계신가요?')).toBeTruthy();\r\n    expect(getByText('행복')).toBeTruthy();\r\n    expect(getByText('감사')).toBeTruthy();\r\n    expect(getByText('위로')).toBeTruthy();\r\n  }, 15000);\r\n\r\n  test('감정 데이터 로드 실패 시 알림 표시', async () => {\r\n    (emotionService.getAllEmotions as jest.Mock).mockRejectedValue(new Error('네트워크 오류'));\r\n    \r\n    render(<EmotionLogScreen navigation={mockNavigation} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(mockAlert).toHaveBeenCalledWith(\r\n        '오류', \r\n        '감정 데이터를 불러오는 중 오류가 발생했습니다.'\r\n      );\r\n    }, { timeout: 10000 });\r\n  }, 15000);\r\n\r\n  test('감정 선택/해제 기능이 정상 작동함', async () => {\r\n    const { getByText } = await setupRenderAndWaitForEmotions();\r\n    \r\n    // 감정 선택\r\n    fireEvent.press(getByText('행복'));\r\n    \r\n    // 감정 해제\r\n    fireEvent.press(getByText('행복'));\r\n    \r\n    // 다른 감정 선택\r\n    fireEvent.press(getByText('감사'));\r\n  }, 15000);\r\n\r\n  test('메모 입력이 정상 작동함', async () => {\r\n    const { getByTestId } = await setupRenderAndWaitForEmotions();\r\n    \r\n    const noteInput = getByTestId('emotion-note-input');\r\n    fireEvent.changeText(noteInput, '오늘은 좋은 날이었습니다.');\r\n    \r\n    expect(noteInput.props.value).toBe('오늘은 좋은 날이었습니다.');\r\n  }, 15000);\r\n\r\n  test('감정 선택 없을 때 제출 버튼이 비활성화됨', async () => {\r\n    const { getByTestId } = await setupRenderAndWaitForEmotions();\r\n    \r\n    const submitButton = getByTestId('emotion-submit-button');\r\n    \r\n    expect(submitButton.props.accessibilityState.disabled).toBeTruthy();\r\n  }, 15000);\r\n\r\n  test('감정 로그 제출 성공 시 알림 및 화면 이동', async () => {\r\n    const { getByText, getByTestId } = await setupRenderAndWaitForEmotions();\r\n    \r\n    // 감정 선택\r\n    fireEvent.press(getByText('행복'));\r\n    \r\n    // 제출\r\n    const submitButton = getByTestId('emotion-submit-button');\r\n    fireEvent.press(submitButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(emotionService.recordEmotions).toHaveBeenCalledWith({\r\n        emotion_ids: [1],\r\n        note: undefined\r\n      });\r\n      \r\n      // 성공 알림 확인\r\n      expect(mockAlert).toHaveBeenCalledWith(\r\n        '감정 기록 완료',\r\n        '오늘의 감정이 성공적으로 기록되었습니다.',\r\n        [{ text: '확인', onPress: expect.any(Function) }]\r\n      );\r\n    }, { timeout: 10000 });\r\n    \r\n    // 알림의 확인 버튼 클릭 시뮬레이션\r\n    const alertButtons = mockAlert.mock.calls[0][2];\r\n    alertButtons[0].onPress();\r\n    \r\n    expect(mockNavigation.goBack).toHaveBeenCalled();\r\n  }, 15000);\r\n\r\n  test('감정 로그 제출 실패 시 에러 알림', async () => {\r\n    (emotionService.recordEmotions as jest.Mock).mockRejectedValue({\r\n      response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n    });\r\n    \r\n    const { getByText, getByTestId } = await setupRenderAndWaitForEmotions();\r\n    \r\n    // 감정 선택\r\n    fireEvent.press(getByText('행복'));\r\n    \r\n    // 제출\r\n    const submitButton = getByTestId('emotion-submit-button');\r\n    fireEvent.press(submitButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(mockAlert).toHaveBeenCalledWith(\r\n        '오류', \r\n        '서버 오류가 발생했습니다.'\r\n      );\r\n    }, { timeout: 10000 });\r\n  }, 15000);\r\n});"],"mappings":"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","ignoreList":[]}