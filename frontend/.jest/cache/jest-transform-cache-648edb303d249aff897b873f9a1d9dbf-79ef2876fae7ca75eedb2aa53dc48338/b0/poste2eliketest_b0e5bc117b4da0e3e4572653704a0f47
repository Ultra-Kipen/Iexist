3d3b72c3a1729b59f7f2ea0f98cd792b
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    createPost: jest.fn(),
    getPosts: jest.fn(),
    getPostById: jest.fn(),
    getMyPosts: jest.fn(),
    likePost: jest.fn(),
    addComment: jest.fn(),
    getComments: jest.fn(),
    deletePost: jest.fn()
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _native = require("@react-navigation/native");
var _reactNativePaper = require("react-native-paper");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _MockScreens = require("../mocks/MockScreens");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var testUser = {
  user_id: 1,
  username: 'testuser',
  nickname: '테스트유저',
  email: 'test@example.com'
};
var testPosts = {
  success: true,
  posts: [{
    post_id: 1,
    user_id: 1,
    content: '행복한 하루였어요',
    emotion_summary: '행복',
    emotion_ids: [1],
    image_url: null,
    is_anonymous: false,
    like_count: 5,
    comment_count: 2,
    created_at: '2025-04-10T12:00:00Z'
  }, {
    post_id: 2,
    user_id: 2,
    content: '오늘은 조금 피곤하네요',
    emotion_summary: '지침',
    emotion_ids: [8],
    image_url: null,
    is_anonymous: true,
    like_count: 3,
    comment_count: 1,
    created_at: '2025-04-10T10:30:00Z'
  }],
  total_count: 2
};
var testComments = {
  success: true,
  comments: [{
    comment_id: 1,
    post_id: 1,
    user_id: 2,
    content: '너무 좋네요!',
    is_anonymous: false,
    created_at: '2025-04-10T13:00:00Z'
  }],
  total_count: 1
};
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var TestWrapper = function TestWrapper(_ref) {
  var children = _ref.children;
  return (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
    children: (0, _jsxRuntime.jsx)(_reactNativePaper.Provider, {
      children: children
    })
  });
};
describe('게시물 기능 E2E 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _asyncStorage.default.getItem.mockImplementation(function (key) {
      if (key === 'auth_token') return Promise.resolve('fake-token');
      if (key === 'user_info') return Promise.resolve(JSON.stringify(testUser));
      return Promise.resolve(null);
    });
  });
  describe('게시물 상세 화면', function () {
    it('게시물 상세 조회 및 댓글 작성', (0, _asyncToGenerator2.default)(function* () {
      var mockGetPostById = _postService.default.getPostById;
      mockGetPostById.mockResolvedValue({
        data: {
          success: true,
          post: testPosts.posts[0]
        }
      });
      var mockGetComments = _postService.default.getComments;
      mockGetComments.mockResolvedValue({
        data: testComments
      });
      var mockAddComment = _postService.default.addComment;
      mockAddComment.mockResolvedValue({
        data: {
          success: true,
          comment_id: 2,
          message: '댓글이 성공적으로 추가되었습니다.'
        }
      });
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockPostScreen, {
            route: {
              params: {
                postId: 1
              }
            },
            navigation: mockNavigation
          })
        })),
        getByTestId = _render.getByTestId,
        getByText = _render.getByText;
      expect(getByText('게시물 ID: 1')).toBeTruthy();
      var commentInput = getByTestId('comment-input');
      _reactNative.fireEvent.changeText(commentInput, 'E2E 테스트로 작성한 댓글입니다!');
      var submitButton = getByTestId('submit-comment');
      _reactNative.fireEvent.press(submitButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockAddComment).toHaveBeenCalledWith(1, expect.any(Object));
      });
    }), 10000);
  });
  describe('내 게시물 관리', function () {
    it('내 게시물 화면에서 게시물을 삭제할 수 있어야 함', (0, _asyncToGenerator2.default)(function* () {
      var mockGetMyPosts = _postService.default.getMyPosts;
      mockGetMyPosts.mockResolvedValue({
        data: testPosts
      });
      var mockDeletePost = _postService.default.deletePost;
      mockDeletePost.mockResolvedValue({
        data: {
          success: true,
          message: '게시물이 성공적으로 삭제되었습니다.'
        }
      });
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockMyPostsScreen, {
            navigation: mockNavigation
          })
        })),
        getByTestId = _render2.getByTestId;
      var deleteButton = getByTestId('delete-button');
      _reactNative.fireEvent.press(deleteButton);
      yield (0, _reactNative.waitFor)(function () {
        expect(mockDeletePost).toHaveBeenCalledWith(1);
      });
    }), 10000);
  });
  describe('감정 통계', function () {
    it('통계 화면에서 감정 그래프가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(TestWrapper, {
          children: (0, _jsxRuntime.jsx)(_MockScreens.MockStatisticsScreen, {
            navigation: mockNavigation
          })
        })),
        getByTestId = _render3.getByTestId,
        getByText = _render3.getByText;
      expect(getByTestId('emotion-chart')).toBeTruthy();
      expect(getByText('감정 통계')).toBeTruthy();
    }), 10000);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,