f73136f6225381fcaa4a3acf7088897f
var React = require('react');
var _require = require('@testing-library/react-native'),
  render = _require.render,
  fireEvent = _require.fireEvent;
var _require2 = require('react-native'),
  TouchableOpacity = _require2.TouchableOpacity,
  View = _require2.View,
  Text = _require2.Text;
var MockButton = function MockButton(props) {
  var onPress = props.onPress,
    title = props.title,
    disabled = props.disabled,
    loading = props.loading,
    leftIcon = props.leftIcon,
    rightIcon = props.rightIcon,
    _props$testID = props.testID,
    testID = _props$testID === void 0 ? 'button-component' : _props$testID;
  return React.createElement(TouchableOpacity, {
    testID: testID,
    onPress: !disabled && !loading ? onPress : undefined,
    disabled: disabled || loading
  }, !loading ? React.createElement(View, {}, leftIcon, React.createElement(Text, {
    testID: 'button-text'
  }, title), rightIcon) : React.createElement(Text, {
    testID: 'loading-indicator'
  }, 'Loading...'));
};
var LeftIcon = function LeftIcon() {
  return React.createElement(View, {
    testID: 'left-icon-content'
  });
};
var RightIcon = function RightIcon() {
  return React.createElement(View, {
    testID: 'right-icon-content'
  });
};
describe('Button 컴포넌트', function () {
  var mockOnPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('버튼이 올바르게 렌더링되어야 함', function () {
    var _render = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '테스트 버튼'
      })),
      getByTestId = _render.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('버튼 클릭 시 onPress 함수가 호출되어야 함', function () {
    var _render2 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '테스트 버튼'
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('button-component');
    fireEvent.press(button);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('비활성화된 버튼은 onPress 함수를 호출하지 않아야 함', function () {
    var disabledMockOnPress = jest.fn();
    var _render3 = render(React.createElement(MockButton, {
        onPress: disabledMockOnPress,
        title: '비활성화 버튼',
        disabled: true
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('button-component');
    fireEvent.press(button);
    expect(disabledMockOnPress).not.toHaveBeenCalled();
  });
  it('로딩 상태의 버튼은 텍스트를 숨겨야 함', function () {
    var _render4 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '로딩 버튼',
        loading: true
      })),
      queryByTestId = _render4.queryByTestId;
    var buttonText = queryByTestId('button-text');
    expect(buttonText).toBeNull();
    var loadingIndicator = queryByTestId('loading-indicator');
    expect(loadingIndicator).toBeTruthy();
  });
  it('primary 타입 버튼이 렌더링되어야 함', function () {
    var _render5 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '프라이머리 버튼',
        type: 'primary'
      })),
      getByTestId = _render5.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('secondary 타입 버튼이 렌더링되어야 함', function () {
    var _render6 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '세컨더리 버튼',
        type: 'secondary'
      })),
      getByTestId = _render6.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('outline 타입 버튼이 렌더링되어야 함', function () {
    var _render7 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '아웃라인 버튼',
        type: 'outline'
      })),
      getByTestId = _render7.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('text 타입 버튼이 렌더링되어야 함', function () {
    var _render8 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '텍스트 버튼',
        type: 'text'
      })),
      getByTestId = _render8.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('small 크기 버튼이 렌더링되어야 함', function () {
    var _render9 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '작은 버튼',
        size: 'small'
      })),
      getByTestId = _render9.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('large 크기 버튼이 렌더링되어야 함', function () {
    var _render10 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '큰 버튼',
        size: 'large'
      })),
      getByTestId = _render10.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('커스텀 스타일이 적용된 버튼이 렌더링되어야 함', function () {
    var customStyle = {
      backgroundColor: '#FF5733',
      borderRadius: 20
    };
    var _render11 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '커스텀 스타일 버튼',
        style: customStyle
      })),
      getByTestId = _render11.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('커스텀 텍스트 스타일이 적용된 버튼이 렌더링되어야 함', function () {
    var _render12 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '커스텀 텍스트 스타일',
        textStyle: {
          fontSize: 18,
          fontWeight: 'bold',
          color: '#FF0000'
        }
      })),
      getByTestId = _render12.getByTestId;
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('leftIcon이 있는 버튼이 올바르게 렌더링되어야 함', function () {
    var _render13 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '왼쪽 아이콘 버튼',
        leftIcon: React.createElement(LeftIcon)
      })),
      getByTestId = _render13.getByTestId;
    var button = getByTestId('button-component');
    expect(button).toBeTruthy();
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('rightIcon이 있는 버튼이 올바르게 렌더링되어야 함', function () {
    var _render14 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '오른쪽 아이콘 버튼',
        rightIcon: React.createElement(RightIcon)
      })),
      getByTestId = _render14.getByTestId;
    var button = getByTestId('button-component');
    expect(button).toBeTruthy();
    var buttonText = getByTestId('button-text');
    expect(buttonText).toBeTruthy();
  });
  it('로딩 상태에서는 아이콘이 표시되지 않아야 함', function () {
    var _render15 = render(React.createElement(MockButton, {
        onPress: mockOnPress,
        title: '로딩 상태 아이콘 버튼',
        leftIcon: React.createElement(LeftIcon),
        rightIcon: React.createElement(RightIcon),
        loading: true
      })),
      queryByTestId = _render15.queryByTestId;
    var buttonText = queryByTestId('button-text');
    expect(buttonText).toBeNull();
    var loadingIndicator = queryByTestId('loading-indicator');
    expect(loadingIndicator).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJfcmVxdWlyZSIsInJlbmRlciIsImZpcmVFdmVudCIsIl9yZXF1aXJlMiIsIlRvdWNoYWJsZU9wYWNpdHkiLCJWaWV3IiwiVGV4dCIsIk1vY2tCdXR0b24iLCJwcm9wcyIsIm9uUHJlc3MiLCJ0aXRsZSIsImRpc2FibGVkIiwibG9hZGluZyIsImxlZnRJY29uIiwicmlnaHRJY29uIiwiX3Byb3BzJHRlc3RJRCIsInRlc3RJRCIsImNyZWF0ZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJMZWZ0SWNvbiIsIlJpZ2h0SWNvbiIsImRlc2NyaWJlIiwibW9ja09uUHJlc3MiLCJqZXN0IiwiZm4iLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiX3JlbmRlciIsImdldEJ5VGVzdElkIiwiYnV0dG9uVGV4dCIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMiIsImJ1dHRvbiIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIiwiZGlzYWJsZWRNb2NrT25QcmVzcyIsIl9yZW5kZXIzIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZW5kZXI0IiwicXVlcnlCeVRlc3RJZCIsInRvQmVOdWxsIiwibG9hZGluZ0luZGljYXRvciIsIl9yZW5kZXI1IiwidHlwZSIsIl9yZW5kZXI2IiwiX3JlbmRlcjciLCJfcmVuZGVyOCIsIl9yZW5kZXI5Iiwic2l6ZSIsIl9yZW5kZXIxMCIsImN1c3RvbVN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwiX3JlbmRlcjExIiwic3R5bGUiLCJfcmVuZGVyMTIiLCJ0ZXh0U3R5bGUiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJjb2xvciIsIl9yZW5kZXIxMyIsIl9yZW5kZXIxNCIsIl9yZW5kZXIxNSJdLCJzb3VyY2VzIjpbIkJ1dHRvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCdXR0b24udGVzdC50c3hcclxuLy8gQHRzLW5vY2hlY2tcclxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5jb25zdCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gPSByZXF1aXJlKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZScpO1xyXG5jb25zdCB7IFRvdWNoYWJsZU9wYWNpdHksIFZpZXcsIFRleHQgfSA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZScpO1xyXG5cclxuLy8gQnV0dG9uIOy7tO2PrOuEjO2KuCDrqqjsnZgg6rWs7ZiEXHJcbmNvbnN0IE1vY2tCdXR0b24gPSAocHJvcHMpID0+IHtcclxuICBjb25zdCB7IG9uUHJlc3MsIHRpdGxlLCBkaXNhYmxlZCwgbG9hZGluZywgbGVmdEljb24sIHJpZ2h0SWNvbiwgdGVzdElEID0gJ2J1dHRvbi1jb21wb25lbnQnIH0gPSBwcm9wcztcclxuICBcclxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcclxuICAgIFRvdWNoYWJsZU9wYWNpdHksXHJcbiAgICB7IFxyXG4gICAgICB0ZXN0SUQ6IHRlc3RJRCwgXHJcbiAgICAgIG9uUHJlc3M6ICFkaXNhYmxlZCAmJiAhbG9hZGluZyA/IG9uUHJlc3MgOiB1bmRlZmluZWQsIFxyXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfHwgbG9hZGluZyBcclxuICAgIH0sXHJcbiAgICAhbG9hZGluZyA/IFxyXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxyXG4gICAgICAgIFZpZXcsXHJcbiAgICAgICAge30sXHJcbiAgICAgICAgbGVmdEljb24sXHJcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUZXh0LCB7IHRlc3RJRDogJ2J1dHRvbi10ZXh0JyB9LCB0aXRsZSksXHJcbiAgICAgICAgcmlnaHRJY29uXHJcbiAgICAgICkgOlxyXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRleHQsIHsgdGVzdElEOiAnbG9hZGluZy1pbmRpY2F0b3InIH0sICdMb2FkaW5nLi4uJylcclxuICApO1xyXG59O1xyXG5cclxuLy8g7YWM7Iqk7Yq47JqpIOyVhOydtOy9mCDsu7Ttj6zrhIztirhcclxuY29uc3QgTGVmdEljb24gPSAoKSA9PiBSZWFjdC5jcmVhdGVFbGVtZW50KFZpZXcsIHsgdGVzdElEOiAnbGVmdC1pY29uLWNvbnRlbnQnIH0pO1xyXG5jb25zdCBSaWdodEljb24gPSAoKSA9PiBSZWFjdC5jcmVhdGVFbGVtZW50KFZpZXcsIHsgdGVzdElEOiAncmlnaHQtaWNvbi1jb250ZW50JyB9KTtcclxuXHJcbmRlc2NyaWJlKCdCdXR0b24g7Lu07Y+s64SM7Yq4JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tPblByZXNzID0gamVzdC5mbigpO1xyXG4gIFxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfrsoTtirzsnbQg7Jis67CU66W06rKMIOugjOuNlOungeuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBvblByZXNzOiBtb2NrT25QcmVzcywgdGl0bGU6ICfthYzsiqTtirgg67KE7Yq8JyB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uVGV4dCA9IGdldEJ5VGVzdElkKCdidXR0b24tdGV4dCcpO1xyXG4gICAgZXhwZWN0KGJ1dHRvblRleHQpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+uyhO2KvCDtgbTrpq0g7IucIG9uUHJlc3Mg7ZWo7IiY6rCAIO2YuOy2nOuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBvblByZXNzOiBtb2NrT25QcmVzcywgdGl0bGU6ICfthYzsiqTtirgg67KE7Yq8JyB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi1jb21wb25lbnQnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhidXR0b24pO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja09uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+u5hO2ZnOyEse2ZlOuQnCDrsoTtirzsnYAgb25QcmVzcyDtlajsiJjrpbwg7Zi47Lac7ZWY7KeAIOyViuyVhOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBkaXNhYmxlZE1vY2tPblByZXNzID0gamVzdC5mbigpO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBvblByZXNzOiBkaXNhYmxlZE1vY2tPblByZXNzLCB0aXRsZTogJ+u5hO2ZnOyEse2ZlCDrsoTtirwnLCBkaXNhYmxlZDogdHJ1ZSB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi1jb21wb25lbnQnKTtcclxuICAgIGZpcmVFdmVudC5wcmVzcyhidXR0b24pO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZGlzYWJsZWRNb2NrT25QcmVzcykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+uhnOuUqSDsg4Htg5zsnZgg67KE7Yq87J2AIO2FjeyKpO2KuOulvCDsiKjqsqjslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBvblByZXNzOiBtb2NrT25QcmVzcywgdGl0bGU6ICfroZzrlKkg67KE7Yq8JywgbG9hZGluZzogdHJ1ZSB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uVGV4dCA9IHF1ZXJ5QnlUZXN0SWQoJ2J1dHRvbi10ZXh0Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uVGV4dCkudG9CZU51bGwoKTtcclxuICAgIFxyXG4gICAgY29uc3QgbG9hZGluZ0luZGljYXRvciA9IHF1ZXJ5QnlUZXN0SWQoJ2xvYWRpbmctaW5kaWNhdG9yJyk7XHJcbiAgICBleHBlY3QobG9hZGluZ0luZGljYXRvcikudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgncHJpbWFyeSDtg4DsnoUg67KE7Yq87J20IOugjOuNlOungeuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBvblByZXNzOiBtb2NrT25QcmVzcywgdGl0bGU6ICftlITrnbzsnbTrqLjrpqwg67KE7Yq8JywgdHlwZTogJ3ByaW1hcnknIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBidXR0b25UZXh0ID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi10ZXh0Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uVGV4dCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnc2Vjb25kYXJ5IO2DgOyehSDrsoTtirzsnbQg66CM642U66eB65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb2NrQnV0dG9uLCB7IG9uUHJlc3M6IG1vY2tPblByZXNzLCB0aXRsZTogJ+yEuOy7qOuNlOumrCDrsoTtirwnLCB0eXBlOiAnc2Vjb25kYXJ5JyB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uVGV4dCA9IGdldEJ5VGVzdElkKCdidXR0b24tdGV4dCcpO1xyXG4gICAgZXhwZWN0KGJ1dHRvblRleHQpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ291dGxpbmUg7YOA7J6FIOuyhO2KvOydtCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1vY2tCdXR0b24sIHsgb25QcmVzczogbW9ja09uUHJlc3MsIHRpdGxlOiAn7JWE7JuD65287J24IOuyhO2KvCcsIHR5cGU6ICdvdXRsaW5lJyB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uVGV4dCA9IGdldEJ5VGVzdElkKCdidXR0b24tdGV4dCcpO1xyXG4gICAgZXhwZWN0KGJ1dHRvblRleHQpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3RleHQg7YOA7J6FIOuyhO2KvOydtCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1vY2tCdXR0b24sIHsgb25QcmVzczogbW9ja09uUHJlc3MsIHRpdGxlOiAn7YWN7Iqk7Yq4IOuyhO2KvCcsIHR5cGU6ICd0ZXh0JyB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uVGV4dCA9IGdldEJ5VGVzdElkKCdidXR0b24tdGV4dCcpO1xyXG4gICAgZXhwZWN0KGJ1dHRvblRleHQpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3NtYWxsIO2BrOq4sCDrsoTtirzsnbQg66CM642U66eB65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb2NrQnV0dG9uLCB7IG9uUHJlc3M6IG1vY2tPblByZXNzLCB0aXRsZTogJ+yekeydgCDrsoTtirwnLCBzaXplOiAnc21hbGwnIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBidXR0b25UZXh0ID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi10ZXh0Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uVGV4dCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnbGFyZ2Ug7YGs6riwIOuyhO2KvOydtCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1vY2tCdXR0b24sIHsgb25QcmVzczogbW9ja09uUHJlc3MsIHRpdGxlOiAn7YGwIOuyhO2KvCcsIHNpemU6ICdsYXJnZScgfSlcclxuICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJ1dHRvblRleHQgPSBnZXRCeVRlc3RJZCgnYnV0dG9uLXRleHQnKTtcclxuICAgIGV4cGVjdChidXR0b25UZXh0KS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfsu6TsiqTthYAg7Iqk7YOA7J287J20IOyggeyaqeuQnCDrsoTtirzsnbQg66CM642U66eB65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IGN1c3RvbVN0eWxlID0geyBiYWNrZ3JvdW5kQ29sb3I6ICcjRkY1NzMzJywgYm9yZGVyUmFkaXVzOiAyMCB9O1xyXG4gICAgXHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBcclxuICAgICAgICBvblByZXNzOiBtb2NrT25QcmVzcywgXHJcbiAgICAgICAgdGl0bGU6ICfsu6TsiqTthYAg7Iqk7YOA7J28IOuyhO2KvCcsXHJcbiAgICAgICAgc3R5bGU6IGN1c3RvbVN0eWxlXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBidXR0b25UZXh0ID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi10ZXh0Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uVGV4dCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn7Luk7Iqk7YWAIO2FjeyKpO2KuCDsiqTtg4DsnbzsnbQg7KCB7Jqp65CcIOuyhO2KvOydtCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1vY2tCdXR0b24sIHsgXHJcbiAgICAgICAgb25QcmVzczogbW9ja09uUHJlc3MsIFxyXG4gICAgICAgIHRpdGxlOiAn7Luk7Iqk7YWAIO2FjeyKpO2KuCDsiqTtg4DsnbwnLFxyXG4gICAgICAgIHRleHRTdHlsZTogeyBmb250U2l6ZTogMTgsIGZvbnRXZWlnaHQ6ICdib2xkJywgY29sb3I6ICcjRkYwMDAwJyB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBidXR0b25UZXh0ID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi10ZXh0Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uVGV4dCkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnbGVmdEljb27snbQg7J6I64qUIOuyhO2KvOydtCDsmKzrsJTrpbTqsowg66CM642U66eB65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb2NrQnV0dG9uLCB7IFxyXG4gICAgICAgIG9uUHJlc3M6IG1vY2tPblByZXNzLCBcclxuICAgICAgICB0aXRsZTogJ+yZvOyqvSDslYTsnbTsvZgg67KE7Yq8JyxcclxuICAgICAgICBsZWZ0SWNvbjogUmVhY3QuY3JlYXRlRWxlbWVudChMZWZ0SWNvbilcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdidXR0b24tY29tcG9uZW50Jyk7XHJcbiAgICBleHBlY3QoYnV0dG9uKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJ1dHRvblRleHQgPSBnZXRCeVRlc3RJZCgnYnV0dG9uLXRleHQnKTtcclxuICAgIGV4cGVjdChidXR0b25UZXh0KS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyaWdodEljb27snbQg7J6I64qUIOuyhO2KvOydtCDsmKzrsJTrpbTqsowg66CM642U66eB65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNb2NrQnV0dG9uLCB7IFxyXG4gICAgICAgIG9uUHJlc3M6IG1vY2tPblByZXNzLCBcclxuICAgICAgICB0aXRsZTogJ+yYpOuluOyqvSDslYTsnbTsvZgg67KE7Yq8JyxcclxuICAgICAgICByaWdodEljb246IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmlnaHRJY29uKVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2J1dHRvbi1jb21wb25lbnQnKTtcclxuICAgIGV4cGVjdChidXR0b24pLnRvQmVUcnV0aHkoKTtcclxuICAgIFxyXG4gICAgY29uc3QgYnV0dG9uVGV4dCA9IGdldEJ5VGVzdElkKCdidXR0b24tdGV4dCcpO1xyXG4gICAgZXhwZWN0KGJ1dHRvblRleHQpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+uhnOuUqSDsg4Htg5zsl5DshJzripQg7JWE7J207L2Y7J20IO2RnOyLnOuQmOyngCDslYrslYTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBxdWVyeUJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW9ja0J1dHRvbiwgeyBcclxuICAgICAgICBvblByZXNzOiBtb2NrT25QcmVzcywgXHJcbiAgICAgICAgdGl0bGU6ICfroZzrlKkg7IOB7YOcIOyVhOydtOy9mCDrsoTtirwnLFxyXG4gICAgICAgIGxlZnRJY29uOiBSZWFjdC5jcmVhdGVFbGVtZW50KExlZnRJY29uKSxcclxuICAgICAgICByaWdodEljb246IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmlnaHRJY29uKSxcclxuICAgICAgICBsb2FkaW5nOiB0cnVlXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBidXR0b25UZXh0ID0gcXVlcnlCeVRlc3RJZCgnYnV0dG9uLXRleHQnKTtcclxuICAgIGV4cGVjdChidXR0b25UZXh0KS50b0JlTnVsbCgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBsb2FkaW5nSW5kaWNhdG9yID0gcXVlcnlCeVRlc3RJZCgnbG9hZGluZy1pbmRpY2F0b3InKTtcclxuICAgIGV4cGVjdChsb2FkaW5nSW5kaWNhdG9yKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLElBQUFDLFFBQUEsR0FBOEJELE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztFQUE5REUsTUFBTSxHQUFBRCxRQUFBLENBQU5DLE1BQU07RUFBRUMsU0FBUyxHQUFBRixRQUFBLENBQVRFLFNBQVM7QUFDekIsSUFBQUMsU0FBQSxHQUF5Q0osT0FBTyxDQUFDLGNBQWMsQ0FBQztFQUF4REssZ0JBQWdCLEdBQUFELFNBQUEsQ0FBaEJDLGdCQUFnQjtFQUFFQyxJQUFJLEdBQUFGLFNBQUEsQ0FBSkUsSUFBSTtFQUFFQyxJQUFJLEdBQUFILFNBQUEsQ0FBSkcsSUFBSTtBQUdwQyxJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBSUMsS0FBSyxFQUFLO0VBQzVCLElBQVFDLE9BQU8sR0FBaUZELEtBQUssQ0FBN0ZDLE9BQU87SUFBRUMsS0FBSyxHQUEwRUYsS0FBSyxD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