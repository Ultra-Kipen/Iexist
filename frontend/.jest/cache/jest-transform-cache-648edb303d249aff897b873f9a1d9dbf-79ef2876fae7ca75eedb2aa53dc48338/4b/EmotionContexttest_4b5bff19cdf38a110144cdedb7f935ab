9394ec0d5d96e107bab27b591faa85eb
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn().mockResolvedValue({
      data: [{
        emotion_id: 1,
        name: '행복',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      }, {
        emotion_id: 2,
        name: '감사',
        icon: 'hand-heart',
        color: '#FF69B4'
      }]
    }),
    getDailyEmotionCheck: jest.fn().mockResolvedValue({
      data: [{
        log_id: 1,
        user_id: 1,
        emotion_id: 1,
        note: '오늘은 즐거운 하루',
        log_date: '2025-04-12',
        created_at: '2025-04-12T14:22:30Z',
        updated_at: '2025-04-12T14:22:30Z'
      }]
    }),
    recordEmotions: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionContext = require("../../src/contexts/EmotionContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestConsumer = function TestConsumer() {
  var _useEmotion = (0, _EmotionContext.useEmotion)(),
    emotions = _useEmotion.emotions,
    userEmotions = _useEmotion.userEmotions,
    selectedEmotions = _useEmotion.selectedEmotions,
    isLoading = _useEmotion.isLoading,
    error = _useEmotion.error,
    fetchEmotions = _useEmotion.fetchEmotions,
    fetchUserEmotions = _useEmotion.fetchUserEmotions,
    logEmotion = _useEmotion.logEmotion,
    selectEmotion = _useEmotion.selectEmotion,
    clearSelectedEmotions = _useEmotion.clearSelectedEmotions;
  var _require = require('react-native'),
    Text = _require.Text,
    View = _require.View,
    Button = _require.Button;
  return (0, _jsxRuntime.jsxs)(View, {
    children: [(0, _jsxRuntime.jsx)(Text, {
      testID: "loading-state",
      children: isLoading ? 'loading' : 'not-loading'
    }), (0, _jsxRuntime.jsx)(Text, {
      testID: "emotions-count",
      children: emotions.length
    }), (0, _jsxRuntime.jsx)(Text, {
      testID: "user-emotions-count",
      children: userEmotions.length
    }), (0, _jsxRuntime.jsx)(Text, {
      testID: "error-message",
      children: error || 'no-error'
    }), (0, _jsxRuntime.jsx)(Text, {
      testID: "selected-emotions-count",
      children: selectedEmotions.length
    }), (0, _jsxRuntime.jsx)(Button, {
      testID: "fetch-emotions-button",
      title: "\uAC10\uC815 \uBAA9\uB85D \uBD88\uB7EC\uC624\uAE30",
      onPress: function onPress() {
        return fetchEmotions();
      }
    }), (0, _jsxRuntime.jsx)(Button, {
      testID: "fetch-user-emotions-button",
      title: "\uC0AC\uC6A9\uC790 \uAC10\uC815 \uBD88\uB7EC\uC624\uAE30",
      onPress: function onPress() {
        return fetchUserEmotions();
      }
    }), (0, _jsxRuntime.jsx)(Button, {
      testID: "log-emotion-button",
      title: "\uAC10\uC815 \uAE30\uB85D\uD558\uAE30",
      onPress: function onPress() {
        return logEmotion(1, '테스트 감정');
      }
    }), (0, _jsxRuntime.jsx)(Button, {
      testID: "select-emotion-button",
      title: "\uAC10\uC815 \uC120\uD0DD\uD558\uAE30",
      onPress: function onPress() {
        return selectEmotion(1);
      }
    }), (0, _jsxRuntime.jsx)(Button, {
      testID: "clear-emotions-button",
      title: "\uAC10\uC815 \uC120\uD0DD \uCD08\uAE30\uD654",
      onPress: function onPress() {
        return clearSelectedEmotions();
      }
    })]
  });
};
describe('EmotionContext', function () {
  it('provides initial state and functions', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
        children: (0, _jsxRuntime.jsx)(TestConsumer, {})
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('loading-state')).toHaveTextContent('loading');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('loading-state')).toHaveTextContent('not-loading');
    expect(getByTestId('emotions-count')).not.toHaveTextContent('0');
  }));
  it('loads user emotions when requested', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
        children: (0, _jsxRuntime.jsx)(TestConsumer, {})
      })),
      getByTestId = _render2.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId('fetch-user-emotions-button'));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('user-emotions-count')).not.toHaveTextContent('0');
  }));
  it('selects and clears emotions', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
        children: (0, _jsxRuntime.jsx)(TestConsumer, {})
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('selected-emotions-count')).toHaveTextContent('0');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId('select-emotion-button'));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('selected-emotions-count')).toHaveTextContent('1');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(getByTestId('clear-emotions-button'));
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 0);
      });
    }));
    expect(getByTestId('selected-emotions-count')).toHaveTextContent('0');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRBbGxFbW90aW9ucyIsImplc3QiLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZGF0YSIsImVtb3Rpb25faWQiLCJuYW1lIiwiaWNvbiIsImNvbG9yIiwiZ2V0RGFpbHlFbW90aW9uQ2hlY2siLCJsb2dfaWQiLCJ1c2VyX2lkIiwibm90ZSIsImxvZ19kYXRlIiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJyZWNvcmRFbW90aW9ucyIsInN1Y2Nlc3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9FbW90aW9uQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUyIiwiVGVzdENvbnN1bWVyIiwiX3VzZUVtb3Rpb24iLCJ1c2VFbW90aW9uIiwiZW1vdGlvbnMiLCJ1c2VyRW1vdGlvbnMiLCJzZWxlY3RlZEVtb3Rpb25zIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJmZXRjaEVtb3Rpb25zIiwiZmV0Y2hVc2VyRW1vdGlvbnMiLCJsb2dFbW90aW9uIiwic2VsZWN0RW1vdGlvbiIsImNsZWFyU2VsZWN0ZWRFbW90aW9ucyIsIl9yZXF1aXJlIiwiVGV4dCIsIlZpZXciLCJCdXR0b24iLCJqc3hzIiwiY2hpbGRyZW4iLCJqc3giLCJ0ZXN0SUQiLCJsZW5ndGgiLCJ0aXRsZSIsIm9uUHJlc3MiLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJFbW90aW9uUHJvdmlkZXIiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvSGF2ZVRleHRDb250ZW50IiwiYWN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Iiwibm90IiwiX3JlbmRlcjIiLCJmaXJlRXZlbnQiLCJwcmVzcyIsIl9yZW5kZXIzIl0sInNvdXJjZXMiOlsiRW1vdGlvbkNvbnRleHQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL2NvbnRleHRzL0Vtb3Rpb25Db250ZXh0LnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgYWN0LCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7IEVtb3Rpb25Qcm92aWRlciwgdXNlRW1vdGlvbiB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9FbW90aW9uQ29udGV4dCc7XHJcblxyXG4vLyBBUEkg7ISc67mE7IqkIOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvZW1vdGlvblNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldEFsbEVtb3Rpb25zOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBcclxuICAgIGRhdGE6IFtcclxuICAgICAgeyBlbW90aW9uX2lkOiAxLCBuYW1lOiAn7ZaJ67O1JywgaWNvbjogJ2Vtb3RpY29uLWhhcHB5LW91dGxpbmUnLCBjb2xvcjogJyNGRkQ3MDAnIH0sXHJcbiAgICAgIHsgZW1vdGlvbl9pZDogMiwgbmFtZTogJ+qwkOyCrCcsIGljb246ICdoYW5kLWhlYXJ0JywgY29sb3I6ICcjRkY2OUI0JyB9XHJcbiAgICBdIFxyXG4gIH0pLFxyXG4gIGdldERhaWx5RW1vdGlvbkNoZWNrOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBcclxuICAgIGRhdGE6IFtcclxuICAgICAgeyBsb2dfaWQ6IDEsIHVzZXJfaWQ6IDEsIGVtb3Rpb25faWQ6IDEsIG5vdGU6ICfsmKTripjsnYAg7KaQ6rGw7Jq0IO2VmOujqCcsIGxvZ19kYXRlOiAnMjAyNS0wNC0xMicsIGNyZWF0ZWRfYXQ6ICcyMDI1LTA0LTEyVDE0OjIyOjMwWicsIHVwZGF0ZWRfYXQ6ICcyMDI1LTA0LTEyVDE0OjIyOjMwWicgfVxyXG4gICAgXSBcclxuICB9KSxcclxuICByZWNvcmRFbW90aW9uczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogeyBzdWNjZXNzOiB0cnVlIH0gfSlcclxufSkpO1xyXG5cclxuLy8g7YWM7Iqk7Yq47JqpIOyGjOu5hOyekCDsu7Ttj6zrhIztirhcclxuY29uc3QgVGVzdENvbnN1bWVyID0gKCkgPT4ge1xyXG4gIGNvbnN0IHtcclxuICAgIGVtb3Rpb25zLFxyXG4gICAgdXNlckVtb3Rpb25zLFxyXG4gICAgc2VsZWN0ZWRFbW90aW9ucyxcclxuICAgIGlzTG9hZGluZyxcclxuICAgIGVycm9yLFxyXG4gICAgZmV0Y2hFbW90aW9ucyxcclxuICAgIGZldGNoVXNlckVtb3Rpb25zLFxyXG4gICAgbG9nRW1vdGlvbixcclxuICAgIHNlbGVjdEVtb3Rpb24sXHJcbiAgICBjbGVhclNlbGVjdGVkRW1vdGlvbnNcclxuICB9ID0gdXNlRW1vdGlvbigpO1xyXG5cclxuICBjb25zdCB7IFRleHQsIFZpZXcsIEJ1dHRvbiB9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJyk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8Vmlldz5cclxuICAgICAgPFRleHQgdGVzdElEPVwibG9hZGluZy1zdGF0ZVwiPntpc0xvYWRpbmcgPyAnbG9hZGluZycgOiAnbm90LWxvYWRpbmcnfTwvVGV4dD5cclxuICAgICAgPFRleHQgdGVzdElEPVwiZW1vdGlvbnMtY291bnRcIj57ZW1vdGlvbnMubGVuZ3RofTwvVGV4dD5cclxuICAgICAgPFRleHQgdGVzdElEPVwidXNlci1lbW90aW9ucy1jb3VudFwiPnt1c2VyRW1vdGlvbnMubGVuZ3RofTwvVGV4dD5cclxuICAgICAgPFRleHQgdGVzdElEPVwiZXJyb3ItbWVzc2FnZVwiPntlcnJvciB8fCAnbm8tZXJyb3InfTwvVGV4dD5cclxuICAgICAgPFRleHQgdGVzdElEPVwic2VsZWN0ZWQtZW1vdGlvbnMtY291bnRcIj57c2VsZWN0ZWRFbW90aW9ucy5sZW5ndGh9PC9UZXh0PlxyXG4gICAgICBcclxuICAgICAgPEJ1dHRvblxyXG4gICAgICAgIHRlc3RJRD1cImZldGNoLWVtb3Rpb25zLWJ1dHRvblwiXHJcbiAgICAgICAgdGl0bGU9XCLqsJDsoJUg66qp66GdIOu2iOufrOyYpOq4sFwiXHJcbiAgICAgICAgb25QcmVzcz17KCkgPT4gZmV0Y2hFbW90aW9ucygpfVxyXG4gICAgICAvPlxyXG4gICAgICA8QnV0dG9uXHJcbiAgICAgICAgdGVzdElEPVwiZmV0Y2gtdXNlci1lbW90aW9ucy1idXR0b25cIlxyXG4gICAgICAgIHRpdGxlPVwi7IKs7Jqp7J6QIOqwkOyglSDrtojrn6zsmKTquLBcIlxyXG4gICAgICAgIG9uUHJlc3M9eygpID0+IGZldGNoVXNlckVtb3Rpb25zKCl9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxCdXR0b25cclxuICAgICAgICB0ZXN0SUQ9XCJsb2ctZW1vdGlvbi1idXR0b25cIlxyXG4gICAgICAgIHRpdGxlPVwi6rCQ7KCVIOq4sOuhne2VmOq4sFwiXHJcbiAgICAgICAgb25QcmVzcz17KCkgPT4gbG9nRW1vdGlvbigxLCAn7YWM7Iqk7Yq4IOqwkOyglScpfVxyXG4gICAgICAvPlxyXG4gICAgICA8QnV0dG9uXHJcbiAgICAgICAgdGVzdElEPVwic2VsZWN0LWVtb3Rpb24tYnV0dG9uXCJcclxuICAgICAgICB0aXRsZT1cIuqwkOyglSDshKDtg53tlZjquLBcIlxyXG4gICAgICAgIG9uUHJlc3M9eygpID0+IHNlbGVjdEVtb3Rpb24oMSl9XHJcbiAgICAgIC8+XHJcbiAgICAgIDxCdXR0b25cclxuICAgICAgICB0ZXN0SUQ9XCJjbGVhci1lbW90aW9ucy1idXR0b25cIlxyXG4gICAgICAgIHRpdGxlPVwi6rCQ7KCVIOyEoO2DnSDstIjquLDtmZRcIlxyXG4gICAgICAgIG9uUHJlc3M9eygpID0+IGNsZWFyU2VsZWN0ZWRFbW90aW9ucygpfVxyXG4gICAgICAvPlxyXG4gICAgPC9WaWV3PlxyXG4gICk7XHJcbn07XHJcblxyXG5kZXNjcmliZSgnRW1vdGlvbkNvbnRleHQnLCAoKSA9PiB7XHJcbiAgaXQoJ3Byb3ZpZGVzIGluaXRpYWwgc3RhdGUgYW5kIGZ1bmN0aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25Qcm92aWRlcj5cclxuICAgICAgICA8VGVzdENvbnN1bWVyIC8+XHJcbiAgICAgIDwvRW1vdGlvblByb3ZpZGVyPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgLy8g7LSI6riwIOuhnOuUqSDsg4Htg5wg7ZmV7J24XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2xvYWRpbmctc3RhdGUnKSkudG9IYXZlVGV4dENvbnRlbnQoJ2xvYWRpbmcnKTtcclxuICAgIFxyXG4gICAgLy8g67mE64+Z6riwIOyekeyXhSDsmYTro4wg64yA6riwXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOuNsOydtO2EsCDroZzrk5wg7ZmV7J24XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2xvYWRpbmctc3RhdGUnKSkudG9IYXZlVGV4dENvbnRlbnQoJ25vdC1sb2FkaW5nJyk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2Vtb3Rpb25zLWNvdW50JykpLm5vdC50b0hhdmVUZXh0Q29udGVudCgnMCcpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdsb2FkcyB1c2VyIGVtb3Rpb25zIHdoZW4gcmVxdWVzdGVkJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RW1vdGlvblByb3ZpZGVyPlxyXG4gICAgICAgIDxUZXN0Q29uc3VtZXIgLz5cclxuICAgICAgPC9FbW90aW9uUHJvdmlkZXI+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyDstIjquLAg66Gc65OcIOuMgOq4sFxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICAvLyDsgqzsmqnsnpAg6rCQ7KCVIOuhnOuTnCDsmpTssq1cclxuICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZmV0Y2gtdXNlci1lbW90aW9ucy1idXR0b24nKSk7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCd1c2VyLWVtb3Rpb25zLWNvdW50JykpLm5vdC50b0hhdmVUZXh0Q29udGVudCgnMCcpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdzZWxlY3RzIGFuZCBjbGVhcnMgZW1vdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uUHJvdmlkZXI+XHJcbiAgICAgICAgPFRlc3RDb25zdW1lciAvPlxyXG4gICAgICA8L0Vtb3Rpb25Qcm92aWRlcj5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIOy0iOq4sCDroZzrk5wg64yA6riwXHJcbiAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIC8vIOy0iOq4sCDshKDtg53rkJwg6rCQ7KCVIOyImCDtmZXsnbhcclxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnc2VsZWN0ZWQtZW1vdGlvbnMtY291bnQnKSkudG9IYXZlVGV4dENvbnRlbnQoJzAnKTtcclxuICAgIFxyXG4gICAgLy8g6rCQ7KCVIOyEoO2DnVxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdzZWxlY3QtZW1vdGlvbi1idXR0b24nKSk7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdzZWxlY3RlZC1lbW90aW9ucy1jb3VudCcpKS50b0hhdmVUZXh0Q29udGVudCgnMScpO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg7ISg7YOdIOy0iOq4sO2ZlFxyXG4gICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcclxuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdjbGVhci1lbW90aW9ucy1idXR0b24nKSk7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdzZWxlY3RlZC1lbW90aW9ucy1jb3VudCcpKS50b0hhdmVUZXh0Q29udGVudCgnMCcpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksMENBQTBDO0VBQUEsT0FBTztJQUN4REMsY0FBYyxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDO01BQzFDQyxJQUFJLEVBQUUsQ0FDSjtRQUFFQyxVQUFVLEVBQUUsQ0FBQztRQUFFQyxJQUFJLEVBQUUsSUFBSTtRQUFFQyxJQUFJLEVBQUUsd0JBQXdCO1FBQUVDLEtBQUssRUFBRTtNQUFVLENBQUMsRUFDL0U7UUFBRUgsVUFBVSxFQUFFLENBQUM7UUFBRUMsSUFBSSxFQUFFLElBQUk7UUFBRUMsSUFBSSxFQUFFLFlBQVk7UUFBRUMsS0FBSyxFQUFFO01BQVUs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