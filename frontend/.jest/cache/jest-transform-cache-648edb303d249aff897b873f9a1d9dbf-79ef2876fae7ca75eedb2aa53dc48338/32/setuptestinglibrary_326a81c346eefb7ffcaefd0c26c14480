956bf96e56bd86f992b68772bda60537
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  var DevMenuMock = {
    show: jest.fn(),
    debugRemotely: jest.fn()
  };
  var TurboModuleRegistryMock = {
    get: jest.fn(function () {
      return null;
    }),
    getEnforcing: jest.fn(function (name) {
      if (name === 'DevMenu') {
        return DevMenuMock;
      }
      return null;
    })
  };
  function ViewComponent(props) {
    return props.children;
  }
  function TextComponent(props) {
    return props.children;
  }
  function TouchableOpacityComponent(props) {
    return props.children;
  }
  function ImageComponent(props) {
    return null;
  }
  function ScrollViewComponent(props) {
    return props.children;
  }
  function TextInputComponent(props) {
    return null;
  }
  return Object.assign({}, RN, {
    TurboModuleRegistry: TurboModuleRegistryMock,
    DevMenu: DevMenuMock,
    Alert: {
      alert: jest.fn()
    },
    View: ViewComponent,
    Text: TextComponent,
    TouchableOpacity: TouchableOpacityComponent,
    Image: ImageComponent,
    ScrollView: ScrollViewComponent,
    TextInput: TextInputComponent,
    Animated: Object.assign({}, RN.Animated, {
      timing: function timing() {
        return {
          start: function start(callback) {
            return callback && callback();
          }
        };
      },
      spring: function spring() {
        return {
          start: function start(callback) {
            return callback && callback();
          }
        };
      },
      View: ViewComponent,
      Text: TextComponent,
      Image: ImageComponent
    }),
    Platform: Object.assign({}, RN.Platform, {
      OS: 'android',
      select: function select(obj) {
        return obj.android || obj.default;
      }
    }),
    Keyboard: {
      dismiss: jest.fn(),
      addListener: jest.fn(function () {
        return {
          remove: jest.fn()
        };
      })
    },
    NativeEventEmitter: jest.fn().mockImplementation(function () {
      return {
        addListener: jest.fn(),
        removeListeners: jest.fn()
      };
    }),
    NativeModules: Object.assign({}, RN.NativeModules, {
      DevMenu: DevMenuMock,
      NativeAnimatedHelper: {
        startAnimatingNode: jest.fn(),
        stopAnimation: jest.fn()
      }
    })
  });
}, {
  virtual: true
});
require("@testing-library/jest-native/extend-expect");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
global.window = global.window || {};
global.window.PR_SHOULD_USE_CONTINUATION = true;
global.__DEV__ = true;
if (typeof global.ReactTestInstance !== 'undefined') {
  Object.defineProperty(global.ReactTestInstance.prototype, 'textContent', {
    get: function get() {
      return String(this.toString());
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,