27084a2c0d2b538bdbc7de96d9cdcfce
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTheme = exports.TextInput = exports.Text = exports.Surface = exports.Portal = exports.IconButton = exports.FAB = exports.Divider = exports.Dialog = exports.Chip = exports.Card = exports.Button = exports.Avatar = exports.ActivityIndicator = void 0;
var _react = _interopRequireDefault(require("react"));
var mockComponent = function mockComponent(name) {
  return function (props) {
    return _react.default.createElement(name, Object.assign({}, props, {
      'data-testid': props.testID
    }));
  };
};
var Button = exports.Button = mockComponent('Button');
var Text = exports.Text = mockComponent('Text');
var TextInput = exports.TextInput = mockComponent('TextInput');
var Card = exports.Card = {
  Content: mockComponent('Card.Content'),
  Actions: mockComponent('Card.Actions'),
  Title: mockComponent('Card.Title')
};
var Dialog = exports.Dialog = {
  Title: mockComponent('Dialog.Title'),
  Content: mockComponent('Dialog.Content'),
  Actions: mockComponent('Dialog.Actions')
};
var Portal = exports.Portal = mockComponent('Portal');
var IconButton = exports.IconButton = mockComponent('IconButton');
var Surface = exports.Surface = mockComponent('Surface');
var FAB = exports.FAB = mockComponent('FAB');
var Divider = exports.Divider = mockComponent('Divider');
var Chip = exports.Chip = mockComponent('Chip');
var Avatar = exports.Avatar = {
  Icon: mockComponent('Avatar.Icon')
};
var ActivityIndicator = exports.ActivityIndicator = mockComponent('ActivityIndicator');
var useTheme = exports.useTheme = function useTheme() {
  return {
    colors: {
      primary: '#6200ee',
      surface: '#ffffff'
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm1vY2tDb21wb25lbnQiLCJuYW1lIiwicHJvcHMiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJ0ZXN0SUQiLCJCdXR0b24iLCJleHBvcnRzIiwiVGV4dCIsIlRleHRJbnB1dCIsIkNhcmQiLCJDb250ZW50IiwiQWN0aW9ucyIsIlRpdGxlIiwiRGlhbG9nIiwiUG9ydGFsIiwiSWNvbkJ1dHRvbiIsIlN1cmZhY2UiLCJGQUIiLCJEaXZpZGVyIiwiQ2hpcCIsIkF2YXRhciIsIkljb24iLCJBY3Rpdml0eUluZGljYXRvciIsInVzZVRoZW1lIiwiY29sb3JzIiwicHJpbWFyeSIsInN1cmZhY2UiXSwic291cmNlcyI6WyJyZWFjdC1uYXRpdmUtcGFwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX19tb2Nrc19fL3JlYWN0LW5hdGl2ZS1wYXBlci50c1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIE1vY2tDb21wb25lbnRQcm9wcyB7XHJcbiAgdGVzdElEPzogc3RyaW5nO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuY29uc3QgbW9ja0NvbXBvbmVudCA9IChuYW1lOiBzdHJpbmcpID0+IChwcm9wczogTW9ja0NvbXBvbmVudFByb3BzKSA9PiB7XHJcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQobmFtZSwge1xyXG4gICAgLi4ucHJvcHMsXHJcbiAgICAnZGF0YS10ZXN0aWQnOiBwcm9wcy50ZXN0SURcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBCdXR0b24gPSBtb2NrQ29tcG9uZW50KCdCdXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IFRleHQgPSBtb2NrQ29tcG9uZW50KCdUZXh0Jyk7XHJcbmV4cG9ydCBjb25zdCBUZXh0SW5wdXQgPSBtb2NrQ29tcG9uZW50KCdUZXh0SW5wdXQnKTtcclxuZXhwb3J0IGNvbnN0IENhcmQgPSB7XHJcbiAgQ29udGVudDogbW9ja0NvbXBvbmVudCgnQ2FyZC5Db250ZW50JyksXHJcbiAgQWN0aW9uczogbW9ja0NvbXBvbmVudCgnQ2FyZC5BY3Rpb25zJyksXHJcbiAgVGl0bGU6IG1vY2tDb21wb25lbnQoJ0NhcmQuVGl0bGUnKVxyXG59O1xyXG5leHBvcnQgY29uc3QgRGlhbG9nID0ge1xyXG4gIFRpdGxlOiBtb2NrQ29tcG9uZW50KCdEaWFsb2cuVGl0bGUnKSxcclxuICBDb250ZW50OiBtb2NrQ29tcG9uZW50KCdEaWFsb2cuQ29udGVudCcpLFxyXG4gIEFjdGlvbnM6IG1vY2tDb21wb25lbnQoJ0RpYWxvZy5BY3Rpb25zJylcclxufTtcclxuZXhwb3J0IGNvbnN0IFBvcnRhbCA9IG1vY2tDb21wb25lbnQoJ1BvcnRhbCcpO1xyXG5leHBvcnQgY29uc3QgSWNvbkJ1dHRvbiA9IG1vY2tDb21wb25lbnQoJ0ljb25CdXR0b24nKTtcclxuZXhwb3J0IGNvbnN0IFN1cmZhY2UgPSBtb2NrQ29tcG9uZW50KCdTdXJmYWNlJyk7XHJcbmV4cG9ydCBjb25zdCBGQUIgPSBtb2NrQ29tcG9uZW50KCdGQUInKTtcclxuZXhwb3J0IGNvbnN0IERpdmlkZXIgPSBtb2NrQ29tcG9uZW50KCdEaXZpZGVyJyk7XHJcbmV4cG9ydCBjb25zdCBDaGlwID0gbW9ja0NvbXBvbmVudCgnQ2hpcCcpO1xyXG5leHBvcnQgY29uc3QgQXZhdGFyID0ge1xyXG4gIEljb246IG1vY2tDb21wb25lbnQoJ0F2YXRhci5JY29uJylcclxufTtcclxuZXhwb3J0IGNvbnN0IEFjdGl2aXR5SW5kaWNhdG9yID0gbW9ja0NvbXBvbmVudCgnQWN0aXZpdHlJbmRpY2F0b3InKTtcclxuZXhwb3J0IGNvbnN0IHVzZVRoZW1lID0gKCkgPT4gKHsgY29sb3JzOiB7IHByaW1hcnk6ICcjNjIwMGVlJywgc3VyZmFjZTogJyNmZmZmZmYnIH0gfSk7Il0sIm1hcHBpbmdzIjoiOzs7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