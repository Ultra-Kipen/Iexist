e9a97d11b8d553aeb2b638997ff69a9b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _RendererProxy = require("../../ReactNative/RendererProxy");
var _AnimatedEvent = require("../AnimatedEvent");
var _AnimatedNode2 = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedObject = _interopRequireDefault(require("./AnimatedObject"));
var _AnimatedStyle = _interopRequireDefault(require("./AnimatedStyle"));
var _invariant = _interopRequireDefault(require("invariant"));
var _Object$hasOwn;
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
function createAnimatedProps(inputProps, allowlist) {
  var nodeKeys = [];
  var nodes = [];
  var props = {};
  var keys = Object.keys(inputProps);
  for (var ii = 0, length = keys.length; ii < length; ii++) {
    var key = keys[ii];
    var value = inputProps[key];
    if (allowlist == null || hasOwn(allowlist, key)) {
      var node = void 0;
      if (key === 'style') {
        node = _AnimatedStyle.default.from(value, allowlist == null ? void 0 : allowlist.style);
      } else if (value instanceof _AnimatedNode2.default) {
        node = value;
      } else {
        node = _AnimatedObject.default.from(value);
      }
      if (node == null) {
        props[key] = value;
      } else {
        nodeKeys.push(key);
        nodes.push(node);
        props[key] = node;
      }
    } else {
      if (true) {
        if (_AnimatedObject.default.from(inputProps[key]) != null) {
          console.error(`AnimatedProps: ${key} is not allowlisted for animation, but it ` + 'contains AnimatedNode values; props allowing animation: ', allowlist);
        }
      }
      props[key] = value;
    }
  }
  return [nodeKeys, nodes, props];
}
var _animatedView = (0, _classPrivateFieldLooseKey2.default)("animatedView");
var _callback = (0, _classPrivateFieldLooseKey2.default)("callback");
var _nodeKeys = (0, _classPrivateFieldLooseKey2.default)("nodeKeys");
var _nodes = (0, _classPrivateFieldLooseKey2.default)("nodes");
var _props = (0, _classPrivateFieldLooseKey2.default)("props");
var AnimatedProps = exports.default = function (_AnimatedNode) {
  function AnimatedProps(inputProps, callback, allowlist, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedProps);
    _this = _callSuper(this, AnimatedProps, [config]);
    Object.defineProperty(_this, _animatedView, {
      writable: true,
      value: null
    });
    Object.defineProperty(_this, _callback, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _nodeKeys, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _nodes, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, _props, {
      writable: true,
      value: void 0
    });
    var _createAnimatedProps = createAnimatedProps(inputProps, allowlist),
      _createAnimatedProps2 = (0, _slicedToArray2.default)(_createAnimatedProps, 3),
      nodeKeys = _createAnimatedProps2[0],
      nodes = _createAnimatedProps2[1],
      props = _createAnimatedProps2[2];
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodeKeys)[_nodeKeys] = nodeKeys;
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
    (0, _classPrivateFieldLooseBase2.default)(_this, _props)[_props] = props;
    (0, _classPrivateFieldLooseBase2.default)(_this, _callback)[_callback] = callback;
    return _this;
  }
  (0, _inherits2.default)(AnimatedProps, _AnimatedNode);
  return (0, _createClass2.default)(AnimatedProps, [{
    key: "__getValue",
    value: function __getValue() {
      var props = {};
      var keys = Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _props)[_props]);
      for (var ii = 0, length = keys.length; ii < length; ii++) {
        var key = keys[ii];
        var value = (0, _classPrivateFieldLooseBase2.default)(this, _props)[_props][key];
        if (value instanceof _AnimatedNode2.default) {
          props[key] = value.__getValue();
        } else if (value instanceof _AnimatedEvent.AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    }
  }, {
    key: "__getValueWithStaticProps",
    value: function __getValueWithStaticProps(staticProps) {
      var props = Object.assign({}, staticProps);
      var keys = Object.keys(staticProps);
      for (var ii = 0, length = keys.length; ii < length; ii++) {
        var key = keys[ii];
        var maybeNode = (0, _classPrivateFieldLooseBase2.default)(this, _props)[_props][key];
        if (key === 'style' && maybeNode instanceof _AnimatedStyle.default) {
          props[key] = maybeNode.__getValueWithStaticStyle(staticProps.style);
        } else if (maybeNode instanceof _AnimatedNode2.default) {
          props[key] = maybeNode.__getValue();
        } else if (maybeNode instanceof _AnimatedEvent.AnimatedEvent) {
          props[key] = maybeNode.__getHandler();
        }
      }
      return props;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      var props = {};
      var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var key = nodeKeys[ii];
        var node = nodes[ii];
        props[key] = node.__getAnimatedValue();
      }
      return props;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__addChild(this);
      }
      _superPropGet(AnimatedProps, "__attach", this, 3)([]);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      if (this.__isNative && (0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]) {
        this.__disconnectAnimatedView();
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView] = null;
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__removeChild(this);
      }
      _superPropGet(AnimatedProps, "__detach", this, 3)([]);
    }
  }, {
    key: "update",
    value: function update() {
      (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback]();
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__makeNative(platformConfig);
      }
      if (!this.__isNative) {
        this.__isNative = true;
        _superPropGet(AnimatedProps, "__setPlatformConfig", this, 3)([platformConfig]);
        if ((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: "setNativeView",
    value: function setNativeView(animatedView) {
      if ((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView] === animatedView) {
        return;
      }
      (0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView] = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: "__connectAnimatedView",
    value: function __connectAnimatedView() {
      (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = (0, _RendererProxy.findNodeHandle)((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]);
      if (nativeViewTag == null) {
        if (process.env.NODE_ENV === 'test') {
          nativeViewTag = -1;
        } else {
          throw new Error('Unable to locate attached view in the native tree');
        }
      }
      _NativeAnimatedHelper.default.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: "__disconnectAnimatedView",
    value: function __disconnectAnimatedView() {
      (0, _invariant.default)(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = (0, _RendererProxy.findNodeHandle)((0, _classPrivateFieldLooseBase2.default)(this, _animatedView)[_animatedView]);
      if (nativeViewTag == null) {
        if (process.env.NODE_ENV === 'test') {
          nativeViewTag = -1;
        } else {
          throw new Error('Unable to locate attached view in the native tree');
        }
      }
      _NativeAnimatedHelper.default.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: "__restoreDefaultValues",
    value: function __restoreDefaultValues() {
      if (this.__isNative) {
        _NativeAnimatedHelper.default.API.restoreDefaultValues(this.__getNativeTag());
      }
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var platformConfig = this.__getPlatformConfig();
      var propsConfig = {};
      var nodeKeys = (0, _classPrivateFieldLooseBase2.default)(this, _nodeKeys)[_nodeKeys];
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var key = nodeKeys[ii];
        var node = nodes[ii];
        node.__makeNative(platformConfig);
        propsConfig[key] = node.__getNativeTag();
      }
      return {
        type: 'props',
        props: propsConfig,
        debugID: this.__getDebugID()
      };
    }
  }]);
}(_AnimatedNode2.default);
var _hasOwnProp = Object.prototype.hasOwnProperty;
var hasOwn = (_Object$hasOwn = Object.hasOwn) != null ? _Object$hasOwn : function (obj, prop) {
  return _hasOwnProp.call(obj, prop);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,