2452ef8d30fc0349e80f9674eea34756
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/notificationService", function () {
  return {
    getNotifications: jest.fn(),
    markAsRead: jest.fn(),
    markAllAsRead: jest.fn(),
    getUnreadCount: jest.fn(),
    deleteNotification: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
});
_getJestObj().mock("../../src/components/Button", function () {
  return 'Button';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationScreen = _interopRequireDefault(require("../../src/screens/NotificationScreen"));
var _reactNative2 = require("react-native");
var _notificationService = _interopRequireDefault(require("../../src/services/api/notificationService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNotifications = [{
  id: 1,
  user_id: 101,
  content: '홍길동님이 회원님의 게시물에 좋아요를 눌렀습니다.',
  notification_type: 'like',
  related_id: 101,
  is_read: false,
  created_at: new Date().toISOString()
}, {
  id: 2,
  user_id: 102,
  content: '김철수님이 회원님의 게시물에 댓글을 남겼습니다.',
  notification_type: 'comment',
  related_id: 102,
  is_read: true,
  created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
}, {
  id: 3,
  user_id: 103,
  content: '행복 챌린지가 시작되었습니다.',
  notification_type: 'challenge',
  related_id: 5,
  is_read: false,
  created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString()
}];
describe('NotificationScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _notificationService.default.getNotifications.mockResolvedValue({
      data: mockNotifications,
      pagination: {
        page: 1,
        limit: 20,
        total: 3
      }
    });
    _notificationService.default.markAsRead.mockResolvedValue({
      success: true
    });
    _notificationService.default.markAllAsRead.mockResolvedValue({
      success: true,
      count: 5
    });
  });
  it('loads and interacts with notifications correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationScreen.default, {})),
      UNSAFE_getByType = _render.UNSAFE_getByType,
      getByText = _render.getByText,
      queryByText = _render.queryByText,
      rerender = _render.rerender;
    expect(UNSAFE_getByType('LoadingIndicator')).toBeTruthy();
    expect(_notificationService.default.getNotifications).toHaveBeenCalled();
    var MockedNotificationScreen = function MockedNotificationScreen() {
      var Component = _NotificationScreen.default;
      return (0, _jsxRuntime.jsx)(Component, {
        testNotifications: mockNotifications
      });
    };
    rerender((0, _jsxRuntime.jsx)(MockedNotificationScreen, {}));
    var getByTextAfterRerender = function getByTextAfterRerender(text) {
      return queryByText(text) || getByText(text);
    };
    expect(getByTextAfterRerender('알림')).toBeTruthy();
    expect(getByTextAfterRerender('모두 읽음')).toBeTruthy();
    _reactNative.fireEvent.press(getByTextAfterRerender('모두 읽음'));
    expect(_notificationService.default.markAllAsRead).toHaveBeenCalled();
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '모든 알림이 읽음 처리되었습니다.');
    _notificationService.default.getNotifications.mockResolvedValue({
      data: [],
      pagination: {
        page: 1,
        limit: 20,
        total: 0
      }
    });
    var EmptyNotificationScreen = function EmptyNotificationScreen() {
      var Component = _NotificationScreen.default;
      return (0, _jsxRuntime.jsx)(Component, {
        testNotifications: [],
        testEmptyState: true
      });
    };
    rerender((0, _jsxRuntime.jsx)(EmptyNotificationScreen, {}));
    expect(getByText('알림이 없습니다.')).toBeTruthy();
    var ErrorNotificationScreen = function ErrorNotificationScreen() {
      var Component = _NotificationScreen.default;
      return (0, _jsxRuntime.jsx)(Component, {
        testError: "\uC54C\uB9BC\uC744 \uBD88\uB7EC\uC624\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."
      });
    };
    rerender((0, _jsxRuntime.jsx)(ErrorNotificationScreen, {}));
    expect(getByText('알림을 불러오는 중 오류가 발생했습니다.')).toBeTruthy();
    var Button = require("../../src/components/Button").default || require("../../src/components/Button");
    expect(UNSAFE_getByType(Button).props.title).toBe('다시 시도');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,