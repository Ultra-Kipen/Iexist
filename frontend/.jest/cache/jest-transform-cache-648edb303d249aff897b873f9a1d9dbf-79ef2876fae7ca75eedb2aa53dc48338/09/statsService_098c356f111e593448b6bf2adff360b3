5414e71ba652365865c57eb1075d47ca
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("./client"));
var statsService = {
  client: _client.default,
  getUserStats: function () {
    var _getUserStats = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response = yield statsService.client.get('/stats');
        return response;
      } catch (error) {
        if (error instanceof Error && error.message === '통계 정보 조회에 실패했습니다') {
          throw error;
        }
        throw new Error('통계 정보 조회에 실패했습니다');
      }
    });
    function getUserStats() {
      return _getUserStats.apply(this, arguments);
    }
    return getUserStats;
  }(),
  getEmotionTrends: function () {
    var _getEmotionTrends = (0, _asyncToGenerator2.default)(function* (options) {
      try {
        var params = new URLSearchParams();
        if (options != null && options.start_date) {
          params.append('start_date', options.start_date);
        }
        if (options != null && options.end_date) {
          params.append('end_date', options.end_date);
        }
        if (options != null && options.type) {
          params.append('type', options.type);
        }
        var response = yield statsService.client.get('/stats/trends', {
          params: params
        });
        return response;
      } catch (error) {
        throw new Error('감정 트렌드 조회에 실패했습니다');
      }
    });
    function getEmotionTrends(_x) {
      return _getEmotionTrends.apply(this, arguments);
    }
    return getEmotionTrends;
  }(),
  getWeeklyTrends: function () {
    var _getWeeklyTrends = (0, _asyncToGenerator2.default)(function* (options) {
      try {
        var params = new URLSearchParams();
        if (options != null && options.start_date) {
          params.append('start_date', options.start_date);
        }
        if (options != null && options.end_date) {
          params.append('end_date', options.end_date);
        }
        var response = yield statsService.client.get('/stats/weekly', {
          params: params
        });
        return response;
      } catch (error) {
        throw new Error('주간 트렌드 조회에 실패했습니다');
      }
    });
    function getWeeklyTrends(_x2) {
      return _getWeeklyTrends.apply(this, arguments);
    }
    return getWeeklyTrends;
  }(),
  getMonthlyTrends: function () {
    var _getMonthlyTrends = (0, _asyncToGenerator2.default)(function* (options) {
      try {
        var params = new URLSearchParams();
        if (options != null && options.start_date) {
          params.append('start_date', options.start_date);
        }
        if (options != null && options.end_date) {
          params.append('end_date', options.end_date);
        }
        var response = yield statsService.client.get('/stats/monthly', {
          params: params
        });
        return response;
      } catch (error) {
        throw new Error('월간 트렌드 조회에 실패했습니다');
      }
    });
    function getMonthlyTrends(_x3) {
      return _getMonthlyTrends.apply(this, arguments);
    }
    return getMonthlyTrends;
  }(),
  getEmotionStats: function () {
    var _getEmotionStats = (0, _asyncToGenerator2.default)(function* (emotionId) {
      var period = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'month';
      try {
        var response = yield statsService.client.get(`/stats/emotions/${emotionId}`, {
          params: {
            period: period
          }
        });
        return response;
      } catch (error) {
        throw new Error('감정별 통계 조회에 실패했습니다');
      }
    });
    function getEmotionStats(_x4) {
      return _getEmotionStats.apply(this, arguments);
    }
    return getEmotionStats;
  }(),
  getActivitySummary: function () {
    var _getActivitySummary = (0, _asyncToGenerator2.default)(function* () {
      var period = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'month';
      try {
        var response = yield statsService.client.get('/stats/activity', {
          params: {
            period: period
          }
        });
        return response;
      } catch (error) {
        throw new Error('활동 요약 조회에 실패했습니다');
      }
    });
    function getActivitySummary() {
      return _getActivitySummary.apply(this, arguments);
    }
    return getActivitySummary;
  }()
};
var _default = exports.default = statsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xpZW50IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJzdGF0c1NlcnZpY2UiLCJjbGllbnQiLCJnZXRVc2VyU3RhdHMiLCJfZ2V0VXNlclN0YXRzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsInJlc3BvbnNlIiwiZ2V0IiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJhcHBseSIsImFyZ3VtZW50cyIsImdldEVtb3Rpb25UcmVuZHMiLCJfZ2V0RW1vdGlvblRyZW5kcyIsIm9wdGlvbnMiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJzdGFydF9kYXRlIiwiYXBwZW5kIiwiZW5kX2RhdGUiLCJ0eXBlIiwiX3giLCJnZXRXZWVrbHlUcmVuZHMiLCJfZ2V0V2Vla2x5VHJlbmRzIiwiX3gyIiwiZ2V0TW9udGhseVRyZW5kcyIsIl9nZXRNb250aGx5VHJlbmRzIiwiX3gzIiwiZ2V0RW1vdGlvblN0YXRzIiwiX2dldEVtb3Rpb25TdGF0cyIsImVtb3Rpb25JZCIsInBlcmlvZCIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl94NCIsImdldEFjdGl2aXR5U3VtbWFyeSIsIl9nZXRBY3Rpdml0eVN1bW1hcnkiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJzdGF0c1NlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2VydmljZXMvYXBpL3N0YXRzU2VydmljZS50c1xyXG5pbXBvcnQgY2xpZW50IGZyb20gJy4vY2xpZW50JztcclxuaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXNwb25zZSB9IGZyb20gJ2F4aW9zJztcclxuXHJcbmludGVyZmFjZSBTdGF0c1NlcnZpY2VUeXBlIHtcclxuICBjbGllbnQ6IEF4aW9zSW5zdGFuY2U7XHJcbiAgZ2V0VXNlclN0YXRzOiAoKSA9PiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8YW55Pj47XHJcbiAgZ2V0RW1vdGlvblRyZW5kczogKG9wdGlvbnM/OiB7XHJcbiAgICBzdGFydF9kYXRlPzogc3RyaW5nO1xyXG4gICAgZW5kX2RhdGU/OiBzdHJpbmc7XHJcbiAgICB0eXBlPzogJ2RhaWx5JyB8ICd3ZWVrbHknIHwgJ21vbnRobHknO1xyXG4gIH0pID0+IFByb21pc2U8QXhpb3NSZXNwb25zZTxhbnk+PjtcclxuICBnZXRXZWVrbHlUcmVuZHM6IChvcHRpb25zPzoge1xyXG4gICAgc3RhcnRfZGF0ZT86IHN0cmluZztcclxuICAgIGVuZF9kYXRlPzogc3RyaW5nO1xyXG4gIH0pID0+IFByb21pc2U8QXhpb3NSZXNwb25zZTxhbnk+PjtcclxuICBnZXRNb250aGx5VHJlbmRzOiAob3B0aW9ucz86IHtcclxuICAgIHN0YXJ0X2RhdGU/OiBzdHJpbmc7XHJcbiAgICBlbmRfZGF0ZT86IHN0cmluZztcclxuICB9KSA9PiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8YW55Pj47XHJcbiAgZ2V0RW1vdGlvblN0YXRzOiAoZW1vdGlvbklkOiBudW1iZXIsIHBlcmlvZD86ICd3ZWVrJyB8ICdtb250aCcgfCAneWVhcicpID0+IFByb21pc2U8QXhpb3NSZXNwb25zZTxhbnk+PjtcclxuICBnZXRBY3Rpdml0eVN1bW1hcnk6IChwZXJpb2Q/OiAnd2VlaycgfCAnbW9udGgnIHwgJ3llYXInKSA9PiBQcm9taXNlPEF4aW9zUmVzcG9uc2U8YW55Pj47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDsgqzsmqnsnpAg7Ya16rOEIEFQSSDshJzruYTsiqRcclxuICovXHJcbmNvbnN0IHN0YXRzU2VydmljZTogU3RhdHNTZXJ2aWNlVHlwZSA9IHtcclxuICBjbGllbnQsIC8vIO2FjOyKpO2KuOulvCDsnITtlbQgY2xpZW50IOqwneyytCDrhbjstpxcclxuXHJcbiAgLyoqXHJcbiAgICog7IKs7Jqp7J6QIO2GteqzhCDsobDtmoxcclxuICAgKiBAcmV0dXJucyDsgqzsmqnsnpAg7Ya16rOEIOygleuztFxyXG4gICAqL1xyXG4gIGdldFVzZXJTdGF0czogYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdGF0c1NlcnZpY2UuY2xpZW50LmdldCgnL3N0YXRzJyk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm1lc3NhZ2UgPT09ICfthrXqs4Qg7KCV67O0IOyhsO2ajOyXkCDsi6TtjKjtlojsirXri4jri6QnKSB7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgIH1cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfthrXqs4Qg7KCV67O0IOyhsO2ajOyXkCDsi6TtjKjtlojsirXri4jri6QnKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDqsJDsoJUg7Yq466CM65OcIOyhsO2ajFxyXG4gICAqIEBwYXJhbSBvcHRpb25zIOyYteyFmCAo7Iuc7J6R64Kg7KecLCDsooXro4zrgqDsp5wsIO2KuOugjOuTnCDtg4DsnoUpXHJcbiAgICogQHJldHVybnMg6rCQ7KCVIO2KuOugjOuTnCDrjbDsnbTthLBcclxuICAgKi9cclxuICBnZXRFbW90aW9uVHJlbmRzOiBhc3luYyAob3B0aW9ucz86IHtcclxuICAgIHN0YXJ0X2RhdGU/OiBzdHJpbmc7XHJcbiAgICBlbmRfZGF0ZT86IHN0cmluZztcclxuICAgIHR5cGU/OiAnZGFpbHknIHwgJ3dlZWtseScgfCAnbW9udGhseSc7XHJcbiAgfSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xyXG4gICAgICBcclxuICAgICAgaWYgKG9wdGlvbnM/LnN0YXJ0X2RhdGUpIHtcclxuICAgICAgICBwYXJhbXMuYXBwZW5kKCdzdGFydF9kYXRlJywgb3B0aW9ucy5zdGFydF9kYXRlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKG9wdGlvbnM/LmVuZF9kYXRlKSB7XHJcbiAgICAgICAgcGFyYW1zLmFwcGVuZCgnZW5kX2RhdGUnLCBvcHRpb25zLmVuZF9kYXRlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKG9wdGlvbnM/LnR5cGUpIHtcclxuICAgICAgICBwYXJhbXMuYXBwZW5kKCd0eXBlJywgb3B0aW9ucy50eXBlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdGF0c1NlcnZpY2UuY2xpZW50LmdldCgnL3N0YXRzL3RyZW5kcycsIHsgcGFyYW1zIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+qwkOyglSDtirjroIzrk5wg7KGw7ZqM7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOyjvOqwhCDqsJDsoJUg7Yq466CM65OcIOyhsO2ajFxyXG4gICAqIEBwYXJhbSBvcHRpb25zIOyYteyFmCAo7Iuc7J6R64Kg7KecLCDsooXro4zrgqDsp5wpXHJcbiAgICogQHJldHVybnMg7KO86rCEIOqwkOyglSDtirjroIzrk5wg642w7J207YSwXHJcbiAgICovXHJcbiAgZ2V0V2Vla2x5VHJlbmRzOiBhc3luYyAob3B0aW9ucz86IHtcclxuICAgIHN0YXJ0X2RhdGU/OiBzdHJpbmc7XHJcbiAgICBlbmRfZGF0ZT86IHN0cmluZztcclxuICB9KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAob3B0aW9ucz8uc3RhcnRfZGF0ZSkge1xyXG4gICAgICAgIHBhcmFtcy5hcHBlbmQoJ3N0YXJ0X2RhdGUnLCBvcHRpb25zLnN0YXJ0X2RhdGUpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAob3B0aW9ucz8uZW5kX2RhdGUpIHtcclxuICAgICAgICBwYXJhbXMuYXBwZW5kKCdlbmRfZGF0ZScsIG9wdGlvbnMuZW5kX2RhdGUpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN0YXRzU2VydmljZS5jbGllbnQuZ2V0KCcvc3RhdHMvd2Vla2x5JywgeyBwYXJhbXMgfSk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign7KO86rCEIO2KuOugjOuTnCDsobDtmozsl5Ag7Iuk7Yyo7ZaI7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog7JuU6rCEIOqwkOyglSDtirjroIzrk5wg7KGw7ZqMXHJcbiAgICogQHBhcmFtIG9wdGlvbnMg7Ji17IWYICjsi5zsnpHrgqDsp5wsIOyiheujjOuCoOynnClcclxuICAgKiBAcmV0dXJucyDsm5TqsIQg6rCQ7KCVIO2KuOugjOuTnCDrjbDsnbTthLBcclxuICAgKi9cclxuICBnZXRNb250aGx5VHJlbmRzOiBhc3luYyAob3B0aW9ucz86IHtcclxuICAgIHN0YXJ0X2RhdGU/OiBzdHJpbmc7XHJcbiAgICBlbmRfZGF0ZT86IHN0cmluZztcclxuICB9KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAob3B0aW9ucz8uc3RhcnRfZGF0ZSkge1xyXG4gICAgICAgIHBhcmFtcy5hcHBlbmQoJ3N0YXJ0X2RhdGUnLCBvcHRpb25zLnN0YXJ0X2RhdGUpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBpZiAob3B0aW9ucz8uZW5kX2RhdGUpIHtcclxuICAgICAgICBwYXJhbXMuYXBwZW5kKCdlbmRfZGF0ZScsIG9wdGlvbnMuZW5kX2RhdGUpO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN0YXRzU2VydmljZS5jbGllbnQuZ2V0KCcvc3RhdHMvbW9udGhseScsIHsgcGFyYW1zIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+yblOqwhCDtirjroIzrk5wg7KGw7ZqM7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLyoqXHJcbiAgICog6rCQ7KCV67OEIO2GteqzhCDsobDtmoxcclxuICAgKiBAcGFyYW0gZW1vdGlvbklkIOqwkOyglSBJRFxyXG4gICAqIEBwYXJhbSBwZXJpb2Qg6riw6rCEICjso7zqsIQsIOyblOqwhCwg7Jew6rCEKVxyXG4gICAqIEByZXR1cm5zIOqwkOygleuzhCDthrXqs4Qg642w7J207YSwXHJcbiAgICovXHJcbiAgZ2V0RW1vdGlvblN0YXRzOiBhc3luYyAoZW1vdGlvbklkOiBudW1iZXIsIHBlcmlvZDogJ3dlZWsnIHwgJ21vbnRoJyB8ICd5ZWFyJyA9ICdtb250aCcpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc3RhdHNTZXJ2aWNlLmNsaWVudC5nZXQoYC9zdGF0cy9lbW90aW9ucy8ke2Vtb3Rpb25JZH1gLCB7XHJcbiAgICAgICAgcGFyYW1zOiB7IHBlcmlvZCB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+qwkOygleuzhCDthrXqs4Qg7KGw7ZqM7JeQIOyLpO2MqO2WiOyKteuLiOuLpCcpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgXHJcbiAgLyoqXHJcbiAgICog7Zmc64+ZIOyalOyVvSDthrXqs4Qg7KGw7ZqMXHJcbiAgICogQHBhcmFtIHBlcmlvZCDquLDqsIQgKOyjvOqwhCwg7JuU6rCELCDsl7DqsIQpXHJcbiAgICogQHJldHVybnMg7Zmc64+ZIOyalOyVvSDthrXqs4Qg642w7J207YSwXHJcbiAgICovXHJcbiAgZ2V0QWN0aXZpdHlTdW1tYXJ5OiBhc3luYyAocGVyaW9kOiAnd2VlaycgfCAnbW9udGgnIHwgJ3llYXInID0gJ21vbnRoJykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdGF0c1NlcnZpY2UuY2xpZW50LmdldCgnL3N0YXRzL2FjdGl2aXR5Jywge1xyXG4gICAgICAgIHBhcmFtczogeyBwZXJpb2QgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCftmZzrj5kg7JqU7JW9IOyhsO2ajOyXkCDsi6TtjKjtlojsirXri4jri6QnKTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzdGF0c1NlcnZpY2U7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUEwQkEsSUFBTUMsWUFBOEIsR0FBRztFQUNyQ0MsTUFBTSxFQUFOQSxlQUFNO0VBTU5DLFlBQVk7SUFBQSxJQUFBQyxhQUFBLE9BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxhQUFZO01BQ3hCLElBQUk7UUFDRixJQUFNQyxRQUFRLFNBQVNOLFlBQVksQ0FBQ0MsTUFBTSxDQUFDTSxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQ3hELE9BQU9ELFFBQVE7TUFDakIsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtRQUNkLElBQUlBLEtBQUssWUFBWUMsS0FBSyxJQUFJRCxLQUFLLENBQUNFLE9BQU8sS0FBSyxrQkFBa0IsRUFBRTtVQUNsRSxNQUFNRixLQUFLO1FBQ2I7UUFDQSxNQUFNLElBQUlDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztNQUNyQztJQUNGLENBQUM7SUFBQSxTQVZEUCxZQUFZQSxDQUFBO01BQUEsT0FBQUMsYUFBQSxDQUFBUSxLQUFBLE9BQUFDLFNBQUE7SUFBQTtJQUFBLE9BQVpWLFlBQVk7RUFBQSxHQVVYO0VBT0RXLGdCQUFnQjtJQUFBLElBQUFDLGlCQUFBLE9BQUFWLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxXQUFPVSxPQUl4QixFQUFLO01BQ0osSUFBSTtRQUNGLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxlQUFlLENBQUMsQ0FBQztRQUVwQyxJQUFJRixPQUFPLFlBQVBBLE9BQU8sQ0FBRUcsVUFBVSxFQUFFO1VBQ3ZCRixNQUFNLENBQUNHLE1BQU0sQ0FBQyxZQUFZLEVBQUVKLE9BQU8sQ0FBQ0csVUFBVSxDQUFDO1FBQ2pEO1FBRUEsSUFBSUgsT0FBTyxZQUFQQSxPQUFPLENBQUVLLFFBQVEsRUFBRTtVQUNyQkosTUFBTSxDQUFDRyxNQUFNLENBQUMsVUFBVSxFQUFFSixPQUFPLENBQUNLLFFBQVEsQ0FBQztRQUM3QztRQUVBLElBQUlMLE9BQU8sWUFBUEEsT0FBTyxDQUFFTSxJQUFJLEVBQUU7VUFDakJMLE1BQU0sQ0FBQ0csTUFBTSxDQUFDLE1BQU0sRUFBRUosT0FBTyxDQUFDTSxJQUFJLENBQUM7UUFDckM7UUFFQSxJQUFNZixRQUFRLFNBQVNOLFlBQVksQ0FBQ0MsTUFBTSxDQUFDTSxHQUFHLENBQUMsZUFBZSxFQUFFO1VBQUVTLE1BQU0sRUFBTkE7UUFBTyxDQUFDLENBQUM7UUFDM0UsT0FBT1YsUUFBUTtNQUNqQixDQUFDLENBQUMsT0FBT0UsS0FBSyxFQUFFO1FBQ2QsTUFBTSxJQUFJQyxLQUFLLENBQUMsbUJBQW1CLENBQUM7TUFDdEM7SUFDRixDQUFDO0lBQUEsU0F6QkRJLGdCQUFnQkEsQ0FBQVMsRUFBQTtNQUFBLE9BQUFSLGlCQUFBLENBQUFILEtBQUEsT0FBQUMsU0FBQTtJQUFBO0lBQUEsT0FBaEJDLGdCQUFnQjtFQUFBLEdBeUJmO0VBT0RVLGVBQWU7SUFBQSxJQUFBQyxnQkFBQSxPQUFBcEIsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLFdBQU9VLE9BR3ZCLEVBQUs7TUFDSixJQUFJO1FBQ0YsSUFBTUMsTUFBTSxHQUFHLElBQUlDLGVBQWUsQ0FBQyxDQUFDO1FBRXBDLElBQUlGLE9BQU8sWUFBUEEsT0FBTyxDQUFFRyxVQUFVLEVBQUU7VUFDdkJGLE1BQU0sQ0FBQ0csTUFBTSxDQUFDLFlBQVksRUFBRUosT0FBTyxDQUFDRyxVQUFVLENBQUM7UUFDakQ7UUFFQSxJQUFJSCxPQUFPLFlBQVBBLE9BQU8sQ0FBRUssUUFBUSxFQUFFO1VBQ3JCSixNQUFNLENBQUNHLE1BQU0sQ0FBQyxVQUFVLEVBQUVKLE9BQU8sQ0FBQ0ssUUFBUSxDQUFDO1FBQzdDO1FBRUEsSUFBTWQsUUFBUSxTQUFTTixZQUFZLENBQUNDLE1BQU0sQ0FBQ00sR0FBRyxDQUFDLGVBQWUsRUFBRTtVQUFFUyxNQUFNLEVBQU5BO1FBQU8sQ0FBQyxDQUFDO1FBQzNFLE9BQU9WLFFBQVE7TUFDakIsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtRQUNkLE1BQU0sSUFBSUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO01BQ3RDO0lBQ0YsQ0FBQztJQUFBLFNBcEJEYyxlQUFlQSxDQUFBRSxHQUFBO01BQUEsT0FBQUQsZ0JBQUEsQ0FBQWIsS0FBQSxPQUFBQyxTQUFBO0lBQUE7SUFBQSxPQUFmVyxlQUFlO0VBQUEsR0FvQmQ7RUFPREcsZ0JBQWdCO0lBQUEsSUFBQUMsaUJBQUEsT0FBQXZCLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxXQUFPVSxPQUd4QixFQUFLO01BQ0osSUFBSTtRQUNGLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxlQUFlLENBQUMsQ0FBQztRQUVwQyxJQUFJRixPQUFPLFlBQVBBLE9BQU8sQ0FBRUcsVUFBVSxFQUFFO1VBQ3ZCRixNQUFNLENBQUNHLE1BQU0sQ0FBQyxZQUFZLEVBQUVKLE9BQU8sQ0FBQ0csVUFBVSxDQUFDO1FBQ2pEO1FBRUEsSUFBSUgsT0FBTyxZQUFQQSxPQUFPLENBQUVLLFFBQVEsRUFBRTtVQUNyQkosTUFBTSxDQUFDRyxNQUFNLENBQUMsVUFBVSxFQUFFSixPQUFPLENBQUNLLFFBQVEsQ0FBQztRQUM3QztRQUVBLElBQU1kLFFBQVEsU0FBU04sWUFBWSxDQUFDQyxNQUFNLENBQUNNLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRTtVQUFFUyxNQUFNLEVBQU5BO1FBQU8sQ0FBQyxDQUFDO1FBQzVFLE9BQU9WLFFBQVE7TUFDakIsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtRQUNkLE1BQU0sSUFBSUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO01BQ3RDO0lBQ0YsQ0FBQztJQUFBLFNBcEJEaUIsZ0JBQWdCQSxDQUFBRSxHQUFBO01BQUEsT0FBQUQsaUJBQUEsQ0FBQWhCLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0lBQUEsT0FBaEJjLGdCQUFnQjtFQUFBLEdBb0JmO0VBUURHLGVBQWU7SUFBQSxJQUFBQyxnQkFBQSxPQUFBMUIsa0JBQUEsQ0FBQUMsT0FBQSxFQUFFLFdBQU8wQixTQUFpQixFQUFrRDtNQUFBLElBQWhEQyxNQUFpQyxHQUFBcEIsU0FBQSxDQUFBcUIsTUFBQSxRQUFBckIsU0FBQSxRQUFBc0IsU0FBQSxHQUFBdEIsU0FBQSxNQUFHLE9BQU87TUFDcEYsSUFBSTtRQUNGLElBQU1OLFFBQVEsU0FBU04sWUFBWSxDQUFDQyxNQUFNLENBQUNNLEdBQUcsQ0FBQyxtQkFBbUJ3QixTQUFTLEVBQUUsRUFBRTtVQUM3RWYsTUFBTSxFQUFFO1lBQUVnQixNQUFNLEVBQU5BO1VBQU87UUFDbkIsQ0FBQyxDQUFDO1FBQ0YsT0FBTzFCLFFBQVE7TUFDakIsQ0FBQyxDQUFDLE9BQU9FLEtBQUssRUFBRTtRQUNkLE1BQU0sSUFBSUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDO01BQ3RDO0lBQ0YsQ0FBQztJQUFBLFNBVERvQixlQUFlQSxDQUFBTSxHQUFBO01BQUEsT0FBQUwsZ0JBQUEsQ0FBQW5CLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0lBQUEsT0FBZmlCLGVBQWU7RUFBQSxHQVNkO0VBT0RPLGtCQUFrQjtJQUFBLElBQUFDLG1CQUFBLE9BQUFqQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsYUFBdUQ7TUFBQSxJQUFoRDJCLE1BQWlDLEdBQUFwQixTQUFBLENBQUFxQixNQUFBLFFBQUFyQixTQUFBLFFBQUFzQixTQUFBLEdBQUF0QixTQUFBLE1BQUcsT0FBTztNQUNwRSxJQUFJO1FBQ0YsSUFBTU4sUUFBUSxTQUFTTixZQUFZLENBQUNDLE1BQU0sQ0FBQ00sR0FBRyxDQUFDLGlCQUFpQixFQUFFO1VBQ2hFUyxNQUFNLEVBQUU7WUFBRWdCLE1BQU0sRUFBTkE7VUFBTztRQUNuQixDQUFDLENBQUM7UUFDRixPQUFPMUIsUUFBUTtNQUNqQixDQUFDLENBQUMsT0FBT0UsS0FBSyxFQUFFO1FBQ2QsTUFBTSxJQUFJQyxLQUFLLENBQUMsa0JBQWtCLENBQUM7TUFDckM7SUFDRixDQUFDO0lBQUEsU0FURDJCLGtCQUFrQkEsQ0FBQTtNQUFBLE9BQUFDLG1CQUFBLENBQUExQixLQUFBLE9BQUFDLFNBQUE7SUFBQTtJQUFBLE9BQWxCd0Isa0JBQWtCO0VBQUE7QUFVcEIsQ0FBQztBQUFDLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxDQUFBbEMsT0FBQSxHQUVhTCxZQUFZIiwiaWdub3JlTGlzdCI6W119