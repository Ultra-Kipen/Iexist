771d257f015d3ccac93190485ae62696
_getJestObj().mock('react-native-paper', function () {
  return {
    __esModule: true,
    Chip: function Chip(_ref) {
      var children = _ref.children,
        onPress = _ref.onPress,
        testID = _ref.testID,
        style = _ref.style;
      var _require = require('react-native'),
        TouchableOpacity = _require.TouchableOpacity,
        Text = _require.Text;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        testID: testID,
        style: style,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: children
        })
      });
    },
    Button: function Button(_ref2) {
      var children = _ref2.children,
        onPress = _ref2.onPress,
        testID = _ref2.testID,
        disabled = _ref2.disabled,
        style = _ref2.style;
      var _require2 = require('react-native'),
        TouchableOpacity = _require2.TouchableOpacity,
        Text = _require2.Text;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        testID: testID,
        accessibilityState: {
          disabled: disabled
        },
        style: style,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: children
        })
      });
    },
    TextInput: function TextInput(props) {
      var _require3 = require('react-native'),
        TextInput = _require3.TextInput;
      return (0, _jsxRuntime.jsx)(TextInput, Object.assign({}, props));
    },
    Portal: function Portal(_ref3) {
      var children = _ref3.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    },
    PaperProvider: function PaperProvider(_ref4) {
      var children = _ref4.children;
      return (0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
        children: children
      });
    }
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    __esModule: true,
    default: {
      getAllEmotions: jest.fn(),
      recordEmotions: jest.fn()
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require4 = require("@jest/globals"),
    jest = _require4.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = {
  alert: jest.fn()
};
global.Alert = mockAlert;
var mockNavigation = {
  goBack: jest.fn()
};
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}, {
  emotion_id: 3,
  name: '위로',
  icon: 'hand-peace',
  color: '#87CEEB'
}, {
  emotion_id: 4,
  name: '감동',
  icon: 'heart-outline',
  color: '#FF6347'
}, {
  emotion_id: 5,
  name: '슬픔',
  icon: 'emoticon-sad-outline',
  color: '#4682B4'
}, {
  emotion_id: 6,
  name: '불안',
  icon: 'alert-outline',
  color: '#DDA0DD'
}, {
  emotion_id: 7,
  name: '화남',
  icon: 'emoticon-angry-outline',
  color: '#FF4500'
}, {
  emotion_id: 8,
  name: '지침',
  icon: 'emoticon-neutral-outline',
  color: '#A9A9A9'
}, {
  emotion_id: 9,
  name: '우울',
  icon: 'weather-cloudy',
  color: '#708090'
}, {
  emotion_id: 10,
  name: '고독',
  icon: 'account-outline',
  color: '#8B4513'
}, {
  emotion_id: 11,
  name: '충격',
  icon: 'lightning-bolt',
  color: '#9932CC'
}, {
  emotion_id: 12,
  name: '편함',
  icon: 'sofa-outline',
  color: '#32CD32'
}];
describe('EmotionLogScreen 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    mockAlert.alert.mockClear();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      status: 200
    });
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import.default;
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      findByText = _render.findByText;
    yield findByText('오늘의 감정');
    yield findByText('현재 어떤 감정을 느끼고 계신가요?');
  }), 30000);
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import2 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import2.default;
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render2.getAllByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      expect(chips.length).toBe(mockEmotions.length);
    });
  }), 30000);
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import3 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import3.default;
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render3.getAllByTestId,
      findByTestId = _render3.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import4 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import4.default;
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render4.getAllByTestId,
      findByTestId = _render4.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      _reactNative.fireEvent.press(chips[1]);
      _reactNative.fireEvent.press(chips[2]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import5 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import5.default;
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      findByTestId = _render5.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }), 30000);
  it('감정 선택 후 제출 버튼이 활성화됨', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import6 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import6.default;
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId,
      findByTestId = _render6.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
  }), 30000);
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import7 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import7.default;
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render7.getAllByTestId,
      findByTestId = _render7.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    var alertCall = mockAlert.alert.mock.calls[0];
    var confirmButton = alertCall[2][0];
    confirmButton.onPress();
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }), 30000);
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    var _yield$import8 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import8.default;
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render8.getAllByTestId,
      findByTestId = _render8.findByTestId;
    yield (0, _reactNative.waitFor)(function () {
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
    });
  }), 30000);
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    var _yield$import9 = yield import("../../../src/screens/EmotionLogScreen"),
      EmotionLogScreen = _yield$import9.default;
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render9.getAllByTestId,
      findByTestId = _render9.findByTestId;
    var chips;
    yield (0, _reactNative.waitFor)(function () {
      chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
    });
    var submitButton = yield findByTestId('emotion-submit-button');
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();
    });
    _reactNative.fireEvent.press(chips[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();
    });
  }), 30000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,