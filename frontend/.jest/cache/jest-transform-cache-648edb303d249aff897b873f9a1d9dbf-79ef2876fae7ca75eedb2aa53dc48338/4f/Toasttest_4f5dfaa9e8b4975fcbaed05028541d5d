ad792634f6c44a8184e58f2b6a1d476b
_getJestObj().mock('@testing-library/react-native', function () {
  return {
    render: jest.fn(function () {
      return {
        getByTestId: jest.fn(function () {
          return {};
        }),
        getByText: jest.fn(function () {
          return {};
        }),
        queryByTestId: jest.fn(function () {
          return null;
        })
      };
    }),
    act: jest.fn(function (cb) {
      return cb();
    }),
    fireEvent: {
      press: jest.fn()
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Animated: {
      View: 'View',
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          })
        };
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.useFakeTimers();
var TestIcon = function TestIcon() {
  return (0, _jsxRuntime.jsx)(_reactNative2.Text, {
    testID: "test-icon",
    children: "\uC544\uC774\uCF58"
  });
};
_reactNative.render.mockImplementation(function (ui) {
  var _ui$props, _ui$props2, _ui$props3, _ui$props4, _ui$props5;
  var visible = (_ui$props = ui.props) == null ? void 0 : _ui$props.visible;
  var message = (_ui$props2 = ui.props) == null ? void 0 : _ui$props2.message;
  var testID = (_ui$props3 = ui.props) == null ? void 0 : _ui$props3.testID;
  var onClose = (_ui$props4 = ui.props) == null ? void 0 : _ui$props4.onClose;
  var duration = ((_ui$props5 = ui.props) == null ? void 0 : _ui$props5.duration) || 3000;
  if (visible && onClose) {
    setTimeout(function () {
      onClose();
    }, duration);
  }
  return {
    getByTestId: jest.fn(function (id) {
      var _ui$props6, _ui$props7;
      if (id === testID) return {
        props: {
          onPress: (_ui$props6 = ui.props) == null ? void 0 : _ui$props6.onPress
        }
      };
      if (id === 'toast-touchable' && (_ui$props7 = ui.props) != null && _ui$props7.onClose) {
        return {
          props: {
            onPress: function onPress() {
              return ui.props.onClose();
            }
          }
        };
      }
      if (id === 'test-icon') return {
        props: {
          children: '아이콘'
        }
      };
      throw new Error(`TestID not found: ${id}`);
    }),
    getByText: jest.fn(function (text) {
      if (text === message) return {
        props: {
          children: message
        }
      };
      throw new Error(`Text not found: ${text}`);
    }),
    queryByTestId: jest.fn(function (id) {
      if (id === testID && visible) return {
        props: ui.props
      };
      return null;
    }),
    rerender: jest.fn(),
    unmount: jest.fn(),
    container: {
      props: ui.props
    }
  };
});
_reactNative.fireEvent.press.mockImplementation(function (element) {
  if (element && element.props && element.props.onPress) {
    element.props.onPress();
  }
});
describe('Toast', function () {
  afterEach(function () {
    jest.clearAllMocks();
    jest.clearAllTimers();
  });
  test('renders correctly with default props', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      testID: "toast"
    }));
    expect(renderResult.getByTestId('toast')).toBeTruthy();
    expect(renderResult.getByText('테스트 메시지')).toBeTruthy();
  }, 120000);
  test('does not render when visible is false', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      testID: "toast"
    }));
    expect(renderResult.queryByTestId('toast')).toBeNull();
  }, 120000);
  test('icon renders correctly', function () {
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      icon: (0, _jsxRuntime.jsx)(TestIcon, {}),
      testID: "toast"
    }));
    expect(renderResult.getByTestId('test-icon')).toBeTruthy();
  }, 120000);
  test('onClose is called after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  }, 120000);
  test('closes when pressed', function () {
    var onClose = jest.fn();
    var renderResult = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD14C\uC2A4\uD2B8 \uBA54\uC2DC\uC9C0",
      onClose: onClose,
      testID: "toast"
    }));
    _reactNative.fireEvent.press(renderResult.getByTestId('toast-touchable'));
    expect(onClose).toHaveBeenCalled();
  }, 120000);
  test('ToastController should handle show and hide', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    expect(mockToast.show).toHaveBeenCalledWith({
      message: '테스트 메시지'
    });
    _Toast.ToastController.hide();
    expect(mockToast.hide).toHaveBeenCalled();
  }, 120000);
  test('ToastController handles missing instance', function () {
    _Toast.ToastController.setRef(null);
    expect(function () {
      _Toast.ToastController.show({
        message: '테스트 메시지'
      });
      _Toast.ToastController.hide();
    }).not.toThrow();
  }, 120000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJyZW5kZXIiLCJqZXN0IiwiZm4iLCJnZXRCeVRlc3RJZCIsImdldEJ5VGV4dCIsInF1ZXJ5QnlUZXN0SWQiLCJhY3QiLCJjYiIsImZpcmVFdmVudCIsInByZXNzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInN0eWxlcyIsIlZpZXciLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkFuaW1hdGVkIiwidGltaW5nIiwic3RhcnQiLCJmaW5pc2hlZCIsIlZhbHVlIiwic2V0VmFsdWUiLCJpbnRlcnBvbGF0ZSIsIlBsYXRmb3JtIiwiT1MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9Ub2FzdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0TmF0aXZlMiIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiX3JlcXVpcmUiLCJ1c2VGYWtlVGltZXJzIiwiVGVzdEljb24iLCJqc3giLCJ0ZXN0SUQiLCJjaGlsZHJlbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInVpIiwiX3VpJHByb3BzIiwiX3VpJHByb3BzMiIsIl91aSRwcm9wczMiLCJfdWkkcHJvcHM0IiwiX3VpJHByb3BzNSIsInZpc2libGUiLCJwcm9wcyIsIm1lc3NhZ2UiLCJvbkNsb3NlIiwiZHVyYXRpb24iLCJzZXRUaW1lb3V0IiwiaWQiLCJfdWkkcHJvcHM2IiwiX3VpJHByb3BzNyIsIm9uUHJlc3MiLCJFcnJvciIsInRleHQiLCJyZXJlbmRlciIsInVubW91bnQiLCJjb250YWluZXIiLCJlbGVtZW50IiwiZGVzY3JpYmUiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIiwiY2xlYXJBbGxUaW1lcnMiLCJ0ZXN0IiwicmVuZGVyUmVzdWx0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInRvQmVOdWxsIiwiaWNvbiIsInJ1bkFsbFRpbWVycyIsInRvSGF2ZUJlZW5DYWxsZWQiLCJtb2NrVG9hc3QiLCJzaG93IiwiaGlkZSIsIlRvYXN0Q29udHJvbGxlciIsInNldFJlZiIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwibm90IiwidG9UaHJvdyJdLCJzb3VyY2VzIjpbIlRvYXN0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9jb21wb25lbnRzL1RvYXN0LnRlc3QudHN4XHJcbi8vIOuqqO2CueydhCDrqLzsoIAg7ISk7KCVXHJcbmplc3QubW9jaygnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnLCAoKSA9PiAoe1xyXG4gIHJlbmRlcjogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgZ2V0QnlUZXN0SWQ6IGplc3QuZm4oKCkgPT4gKHt9KSksXHJcbiAgICBnZXRCeVRleHQ6IGplc3QuZm4oKCkgPT4gKHt9KSksXHJcbiAgICBxdWVyeUJ5VGVzdElkOiBqZXN0LmZuKCgpID0+IG51bGwpLFxyXG4gIH0pKSxcclxuICBhY3Q6IGplc3QuZm4oY2IgPT4gY2IoKSksXHJcbiAgZmlyZUV2ZW50OiB7XHJcbiAgICBwcmVzczogamVzdC5mbigpLFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4gKHtcclxuICBTdHlsZVNoZWV0OiB7XHJcbiAgICBjcmVhdGU6IGplc3QuZm4oc3R5bGVzID0+IHN0eWxlcyksXHJcbiAgfSxcclxuICBWaWV3OiAnVmlldycsXHJcbiAgVGV4dDogJ1RleHQnLFxyXG4gIFRvdWNoYWJsZU9wYWNpdHk6ICdUb3VjaGFibGVPcGFjaXR5JyxcclxuICBBbmltYXRlZDoge1xyXG4gICAgVmlldzogJ1ZpZXcnLFxyXG4gICAgdGltaW5nOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICAgIHN0YXJ0OiBqZXN0LmZuKGNiID0+IGNiICYmIGNiKHsgZmluaXNoZWQ6IHRydWUgfSkpLFxyXG4gICAgfSkpLFxyXG4gICAgVmFsdWU6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgc2V0VmFsdWU6IGplc3QuZm4oKSxcclxuICAgICAgaW50ZXJwb2xhdGU6IGplc3QuZm4oKCkgPT4gKHt9KSksXHJcbiAgICB9KSksXHJcbiAgfSxcclxuICBQbGF0Zm9ybTogeyBPUzogJ2FuZHJvaWQnIH0sXHJcbn0pKTtcclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50LCBhY3QgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBUb2FzdCwgeyBUb2FzdENvbnRyb2xsZXIgfSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9Ub2FzdCc7XHJcbmltcG9ydCB7IFRleHQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5cclxuLy8g7YOA7J2066i4IOuqqO2CuVxyXG5qZXN0LnVzZUZha2VUaW1lcnMoKTtcclxuXHJcbi8vIOqwhOuLqO2VnCDslYTsnbTsvZgg7Lu07Y+s64SM7Yq4IOygleydmFxyXG5jb25zdCBUZXN0SWNvbiA9ICgpID0+IDxUZXh0IHRlc3RJRD1cInRlc3QtaWNvblwiPuyVhOydtOy9mDwvVGV4dD47XHJcblxyXG4vLyDroIzrjZQg6rKw6rO8IOuqqO2CuVxyXG4ocmVuZGVyIGFzIGplc3QuTW9jaykubW9ja0ltcGxlbWVudGF0aW9uKCh1aSkgPT4ge1xyXG4gIGNvbnN0IHZpc2libGUgPSB1aS5wcm9wcz8udmlzaWJsZTtcclxuICBjb25zdCBtZXNzYWdlID0gdWkucHJvcHM/Lm1lc3NhZ2U7XHJcbiAgY29uc3QgdGVzdElEID0gdWkucHJvcHM/LnRlc3RJRDtcclxuICBjb25zdCBvbkNsb3NlID0gdWkucHJvcHM/Lm9uQ2xvc2U7XHJcbiAgY29uc3QgZHVyYXRpb24gPSB1aS5wcm9wcz8uZHVyYXRpb24gfHwgMzAwMDtcclxuICBcclxuICAvLyDtg4DsnbTrqLgg7ISk7KCVXHJcbiAgaWYgKHZpc2libGUgJiYgb25DbG9zZSkge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIG9uQ2xvc2UoKTtcclxuICAgIH0sIGR1cmF0aW9uKTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEJ5VGVzdElkOiBqZXN0LmZuKChpZCkgPT4ge1xyXG4gICAgICBpZiAoaWQgPT09IHRlc3RJRCkgcmV0dXJuIHsgcHJvcHM6IHsgb25QcmVzczogdWkucHJvcHM/Lm9uUHJlc3MgfSB9O1xyXG4gICAgICBpZiAoaWQgPT09ICd0b2FzdC10b3VjaGFibGUnICYmIHVpLnByb3BzPy5vbkNsb3NlKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgcHJvcHM6IHsgb25QcmVzczogKCkgPT4gdWkucHJvcHMub25DbG9zZSgpIH0gfTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaWQgPT09ICd0ZXN0LWljb24nKSByZXR1cm4geyBwcm9wczogeyBjaGlsZHJlbjogJ+yVhOydtOy9mCcgfSB9O1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlc3RJRCBub3QgZm91bmQ6ICR7aWR9YCk7XHJcbiAgICB9KSxcclxuICAgIGdldEJ5VGV4dDogamVzdC5mbigodGV4dCkgPT4ge1xyXG4gICAgICBpZiAodGV4dCA9PT0gbWVzc2FnZSkgcmV0dXJuIHsgcHJvcHM6IHsgY2hpbGRyZW46IG1lc3NhZ2UgfSB9O1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRleHQgbm90IGZvdW5kOiAke3RleHR9YCk7XHJcbiAgICB9KSxcclxuICAgIHF1ZXJ5QnlUZXN0SWQ6IGplc3QuZm4oKGlkKSA9PiB7XHJcbiAgICAgIGlmIChpZCA9PT0gdGVzdElEICYmIHZpc2libGUpIHJldHVybiB7IHByb3BzOiB1aS5wcm9wcyB9O1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0pLFxyXG4gICAgcmVyZW5kZXI6IGplc3QuZm4oKSxcclxuICAgIHVubW91bnQ6IGplc3QuZm4oKSxcclxuICAgIGNvbnRhaW5lcjogeyBwcm9wczogdWkucHJvcHMgfSxcclxuICB9O1xyXG59KTtcclxuXHJcbi8vIGZpcmVFdmVudCDrqqjtgrlcclxuKGZpcmVFdmVudC5wcmVzcyBhcyBqZXN0Lk1vY2spLm1vY2tJbXBsZW1lbnRhdGlvbigoZWxlbWVudCkgPT4ge1xyXG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQucHJvcHMgJiYgZWxlbWVudC5wcm9wcy5vblByZXNzKSB7XHJcbiAgICBlbGVtZW50LnByb3BzLm9uUHJlc3MoKTtcclxuICB9XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1RvYXN0JywgKCkgPT4ge1xyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICAgIGplc3QuY2xlYXJBbGxUaW1lcnMoKTtcclxuICB9KTtcclxuXHJcbiAgLy8g6rCBIO2FjOyKpO2KuOyXkCDtg4DsnoTslYTsm4Mg7ISk7KCVIC0gMTIw7LSIXHJcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBkZWZhdWx0IHByb3BzJywgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVuZGVyUmVzdWx0ID0gcmVuZGVyKFxyXG4gICAgICA8VG9hc3QgdmlzaWJsZT17dHJ1ZX0gbWVzc2FnZT1cIu2FjOyKpO2KuCDrqZTsi5zsp4BcIiB0ZXN0SUQ9XCJ0b2FzdFwiIC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QocmVuZGVyUmVzdWx0LmdldEJ5VGVzdElkKCd0b2FzdCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QocmVuZGVyUmVzdWx0LmdldEJ5VGV4dCgn7YWM7Iqk7Yq4IOuplOyLnOyngCcpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSwgMTIwMDAwKTtcclxuXHJcbiAgdGVzdCgnZG9lcyBub3QgcmVuZGVyIHdoZW4gdmlzaWJsZSBpcyBmYWxzZScsICgpID0+IHtcclxuICAgIGNvbnN0IHJlbmRlclJlc3VsdCA9IHJlbmRlcihcclxuICAgICAgPFRvYXN0IHZpc2libGU9e2ZhbHNlfSBtZXNzYWdlPVwi7YWM7Iqk7Yq4IOuplOyLnOyngFwiIHRlc3RJRD1cInRvYXN0XCIgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZW5kZXJSZXN1bHQucXVlcnlCeVRlc3RJZCgndG9hc3QnKSkudG9CZU51bGwoKTtcclxuICB9LCAxMjAwMDApO1xyXG5cclxuICB0ZXN0KCdpY29uIHJlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgY29uc3QgcmVuZGVyUmVzdWx0ID0gcmVuZGVyKFxyXG4gICAgICA8VG9hc3QgXHJcbiAgICAgICAgdmlzaWJsZT17dHJ1ZX0gXHJcbiAgICAgICAgbWVzc2FnZT1cIu2FjOyKpO2KuCDrqZTsi5zsp4BcIiBcclxuICAgICAgICBpY29uPXs8VGVzdEljb24gLz59IFxyXG4gICAgICAgIHRlc3RJRD1cInRvYXN0XCJcclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChyZW5kZXJSZXN1bHQuZ2V0QnlUZXN0SWQoJ3Rlc3QtaWNvbicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSwgMTIwMDAwKTtcclxuXHJcbiAgdGVzdCgnb25DbG9zZSBpcyBjYWxsZWQgYWZ0ZXIgZHVyYXRpb24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBvbkNsb3NlID0gamVzdC5mbigpO1xyXG4gICAgXHJcbiAgICByZW5kZXIoXHJcbiAgICAgIDxUb2FzdCBcclxuICAgICAgICB2aXNpYmxlPXt0cnVlfSBcclxuICAgICAgICBtZXNzYWdlPVwi7YWM7Iqk7Yq4IOuplOyLnOyngFwiIFxyXG4gICAgICAgIGR1cmF0aW9uPXsxMDAwfSBcclxuICAgICAgICBvbkNsb3NlPXtvbkNsb3NlfSBcclxuICAgICAgICB0ZXN0SUQ9XCJ0b2FzdFwiXHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICAvLyDtg4DsnbTrqLgg7KeE7ZaJXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpOyAvLyDrqqjrk6Ag7YOA7J2066i4IOyLpO2WiVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGV4cGVjdChvbkNsb3NlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XHJcbiAgfSwgMTIwMDAwKTtcclxuXHJcbiAgdGVzdCgnY2xvc2VzIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IG9uQ2xvc2UgPSBqZXN0LmZuKCk7XHJcbiAgICBcclxuICAgIGNvbnN0IHJlbmRlclJlc3VsdCA9IHJlbmRlcihcclxuICAgICAgPFRvYXN0IFxyXG4gICAgICAgIHZpc2libGU9e3RydWV9IFxyXG4gICAgICAgIG1lc3NhZ2U9XCLthYzsiqTtirgg66mU7Iuc7KeAXCIgXHJcbiAgICAgICAgb25DbG9zZT17b25DbG9zZX0gXHJcbiAgICAgICAgdGVzdElEPVwidG9hc3RcIlxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZmlyZUV2ZW50LnByZXNzKHJlbmRlclJlc3VsdC5nZXRCeVRlc3RJZCgndG9hc3QtdG91Y2hhYmxlJykpO1xyXG4gICAgXHJcbiAgICBleHBlY3Qob25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0sIDEyMDAwMCk7XHJcblxyXG4gIHRlc3QoJ1RvYXN0Q29udHJvbGxlciBzaG91bGQgaGFuZGxlIHNob3cgYW5kIGhpZGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBtb2NrVG9hc3QgPSB7XHJcbiAgICAgIHNob3c6IGplc3QuZm4oKSxcclxuICAgICAgaGlkZTogamVzdC5mbigpXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBUb2FzdENvbnRyb2xsZXIuc2V0UmVmKG1vY2tUb2FzdCk7XHJcbiAgICBcclxuICAgIFRvYXN0Q29udHJvbGxlci5zaG93KHsgbWVzc2FnZTogJ+2FjOyKpO2KuCDrqZTsi5zsp4AnIH0pO1xyXG4gICAgZXhwZWN0KG1vY2tUb2FzdC5zaG93KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IG1lc3NhZ2U6ICfthYzsiqTtirgg66mU7Iuc7KeAJyB9KTtcclxuICAgIFxyXG4gICAgVG9hc3RDb250cm9sbGVyLmhpZGUoKTtcclxuICAgIGV4cGVjdChtb2NrVG9hc3QuaGlkZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0sIDEyMDAwMCk7XHJcblxyXG4gIHRlc3QoJ1RvYXN0Q29udHJvbGxlciBoYW5kbGVzIG1pc3NpbmcgaW5zdGFuY2UnLCAoKSA9PiB7XHJcbiAgICBUb2FzdENvbnRyb2xsZXIuc2V0UmVmKG51bGwpO1xyXG4gICAgXHJcbiAgICBleHBlY3QoKCkgPT4ge1xyXG4gICAgICBUb2FzdENvbnRyb2xsZXIuc2hvdyh7IG1lc3NhZ2U6ICfthYzsiqTtirgg66mU7Iuc7KeAJyB9KTtcclxuICAgICAgVG9hc3RDb250cm9sbGVyLmhpZGUoKTtcclxuICAgIH0pLm5vdC50b1Rocm93KCk7XHJcbiAgfSwgMTIwMDAwKTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFFQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsK0JBQStCLEVBQUU7RUFBQSxPQUFPO0lBQ2hEQyxNQUFNLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDO01BQUEsT0FBTztRQUNyQkMsV0FBVyxFQUFFRixJQUFJLENBQUNDLEVBQUUsQ0FBQztVQUFBLE9BQU8sQ0FBQyxDQUFDO1FBQUEsQ0FBQyxDQUFDO1FBQ2hDRSxTQUFTLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxDQUFDO1VBQUEsT0FBTyxDQUFDLENBQUM7UUFBQSxDQUFDLENBQUM7UUFDOUJHLGFBQWEsRUFBRUosSUFBSSxDQUFDQyxFQUFFLENBQUM7VUFBQSxPQUFNLElBQUk7UUFBQTtNQUNuQyxDQUFDO0lBQUEsQ0FBQyxDQUFDO0lBQ0hJLEdBQUcsRUFBRUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsVUFB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