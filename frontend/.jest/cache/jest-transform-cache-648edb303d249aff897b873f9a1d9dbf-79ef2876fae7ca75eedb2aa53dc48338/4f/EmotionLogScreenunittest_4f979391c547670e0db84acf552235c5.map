{"version":3,"names":["_getJestObj","mock","Text","_ref","children","style","type","props","Chip","_ref2","selected","onPress","textStyle","testID","Button","_ref3","mode","disabled","TextInput","_ref4","label","value","onChangeText","multiline","numberOfLines","ActivityIndicator","_ref5","size","alert","jest","fn","getAllEmotions","recordEmotions","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_EmotionLogScreen","_emotionService","_jsxRuntime","_require","describe","mockNavigation","goBack","mockEmotions","emotion_id","name","icon","color","beforeEach","clearAllMocks","emotionService","mockResolvedValue","data","status","it","default","_render","render","jsx","navigation","getByText","waitFor","expect","toBeTruthy","_render2","getByTestId","happyChip","fireEvent","press","submitButton","accessibilityState","toBeFalsy","_render3","_render4","noteInput","changeText","toHaveBeenCalledWith","emotion_ids","note","mockRejectedValue","response","message","_render5"],"sources":["EmotionLogScreen.unit.test.tsx"],"sourcesContent":["// EmotionLogScreen.unit.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport EmotionLogScreen from '../../../src/screens/EmotionLogScreen';\r\nimport emotionService from '../../../src/services/api/emotionService';\r\n\r\n// react-native-paper 모킹 추가\r\njest.mock('react-native-paper', () => ({\r\n  Text: ({ children, style }) => ({ type: 'Text', props: { children, style } }),\r\n  Chip: ({ children, selected, onPress, style, textStyle, testID }) => \r\n    ({ type: 'Chip', props: { children, selected, onPress, style, textStyle, testID } }),\r\n  Button: ({ children, mode, onPress, style, disabled, testID }) => \r\n    ({ type: 'Button', props: { children, mode, onPress, style, disabled, testID } }),\r\n  TextInput: ({ label, value, onChangeText, mode, multiline, numberOfLines, style, testID }) => \r\n    ({ type: 'TextInput', props: { label, value, onChangeText, mode, multiline, numberOfLines, style, testID } }),\r\n  ActivityIndicator: ({ size }) => ({ type: 'ActivityIndicator', props: { size } })\r\n}));\r\n\r\n// MaterialCommunityIcons 모킹\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'MaterialCommunityIcons');\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// emotionService 모킹\r\njest.mock('../../../src/services/api/emotionService', () => ({\r\n  getAllEmotions: jest.fn(),\r\n  recordEmotions: jest.fn(),\r\n}));\r\ndescribe('EmotionLogScreen', () => {\r\n  const mockNavigation = {\r\n    goBack: jest.fn(),\r\n  };\r\n\r\n  const mockEmotions = [\r\n    { \r\n      emotion_id: 1, \r\n      name: '행복', \r\n      icon: 'happy-icon', \r\n      color: '#FFD700' \r\n    },\r\n    { \r\n      emotion_id: 2, \r\n      name: '슬픔', \r\n      icon: 'sad-icon', \r\n      color: '#4682B4' \r\n    }\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 모든 테스트에 대한 기본 모킹 설정\r\n    (emotionService.getAllEmotions as jest.Mock).mockResolvedValue({\r\n      data: { \r\n        status: 'success', \r\n        data: mockEmotions \r\n      }\r\n    });\r\n  });\r\n\r\n  it('renders emotion chips correctly', async () => {\r\n    const { getByText } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    // 감정 데이터 로딩 대기\r\n    await waitFor(() => {\r\n      expect(getByText('행복')).toBeTruthy();\r\n      expect(getByText('슬픔')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('allows selecting and deselecting emotions', async () => {\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    // 감정 데이터 로딩 대기\r\n    await waitFor(() => {\r\n      const happyChip = getByText('행복');\r\n      \r\n      // 감정 선택\r\n      fireEvent.press(happyChip);\r\n      \r\n      // 제출 버튼 확인\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      expect(submitButton.props.accessibilityState.disabled).toBeFalsy();\r\n    });\r\n  });\r\n\r\n  it('shows error when no emotion is selected', async () => {\r\n    const { getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      \r\n      // 제출 버튼 비활성화 확인\r\n      expect(submitButton.props.accessibilityState.disabled).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('submits emotions successfully', async () => {\r\n    // recordEmotions 성공 모킹\r\n    (emotionService.recordEmotions as jest.Mock).mockResolvedValue({\r\n      data: { status: 'success' }\r\n    });\r\n\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // 감정 선택\r\n      const happyChip = getByText('행복');\r\n      fireEvent.press(happyChip);\r\n\r\n      // 메모 입력\r\n      const noteInput = getByTestId('emotion-note-input');\r\n      fireEvent.changeText(noteInput, '오늘은 매우 행복한 날');\r\n\r\n      // 제출 버튼 클릭\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      fireEvent.press(submitButton);\r\n    });\r\n\r\n    // 제출 후 검증\r\n    await waitFor(() => {\r\n      expect(emotionService.recordEmotions).toHaveBeenCalledWith({\r\n        emotion_ids: [1],\r\n        note: '오늘은 매우 행복한 날'\r\n      });\r\n    });\r\n  });\r\n\r\n  it('handles emotion submission error', async () => {\r\n    // recordEmotions 실패 모킹\r\n    (emotionService.recordEmotions as jest.Mock).mockRejectedValue({\r\n      response: {\r\n        data: {\r\n          message: '감정 기록 중 오류가 발생했습니다.'\r\n        }\r\n      }\r\n    });\r\n\r\n    const { getByText, getByTestId } = render(\r\n      <EmotionLogScreen navigation={mockNavigation} />\r\n    );\r\n\r\n    await waitFor(() => {\r\n      // 감정 선택\r\n      const happyChip = getByText('행복');\r\n      fireEvent.press(happyChip);\r\n\r\n      // 제출 버튼 클릭\r\n      const submitButton = getByTestId('emotion-submit-button');\r\n      fireEvent.press(submitButton);\r\n    });\r\n\r\n    // 오류 얼럿 호출 확인\r\n    await waitFor(() => {\r\n      expect(require('react-native/Libraries/Alert/Alert').alert).toHaveBeenCalledWith(\r\n        '오류',\r\n        '감정 기록 중 오류가 발생했습니다.'\r\n      );\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}