{"version":3,"names":["_client","_interopRequireDefault","require","cov_giqm4om5l","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","s","f","b","_coverageSchema","coverage","actualCoverage","authService","login","_login","_asyncToGenerator2","default","credentials","apiClient","post","_x","apply","arguments","register","_register","data","_x2","logout","_logout","refreshToken","_refreshToken","oldToken","token","_x3","forgotPassword","_forgotPassword","email","_x4","resetPassword","_resetPassword","newPassword","_x5","_x6","getProfile","_getProfile","get","updateProfile","_updateProfile","put","_x7","_default","exports"],"sources":["authService.ts"],"sourcesContent":["// src/services/api/authService.ts\r\n\r\nimport apiClient from './client';\r\n\r\nexport interface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface RegisterData {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface AuthResponse {\r\n  status: string;\r\n  message: string;\r\n  data: {\r\n    token: string;\r\n    user: {\r\n      user_id: number;\r\n      username: string;\r\n      email: string;\r\n      nickname?: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst authService = {\r\n  login: async (credentials: LoginCredentials) => {\r\n    return await apiClient.post<AuthResponse>('/auth/login', credentials);\r\n  },\r\n  \r\n  register: async (data: RegisterData) => {\r\n    return await apiClient.post<AuthResponse>('/auth/register', data);\r\n  },\r\n  \r\n  logout: async () => {\r\n    return await apiClient.post('/auth/logout');\r\n  },\r\n  \r\n  refreshToken: async (oldToken: string) => {\r\n    return await apiClient.post<AuthResponse>('/auth/refresh', { token: oldToken });\r\n  },\r\n  \r\n  forgotPassword: async (email: string) => {\r\n    return await apiClient.post('/users/forgot-password', { email });\r\n  },\r\n  \r\n  resetPassword: async (token: string, newPassword: string) => {\r\n    return await apiClient.post('/users/reset-password', { token, newPassword });\r\n  },\r\n  \r\n  getProfile: async () => {\r\n    return await apiClient.get('/users/profile');\r\n  },\r\n  \r\n  updateProfile: async (data: any) => {\r\n    return await apiClient.put('/users/profile', data);\r\n  }\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]}