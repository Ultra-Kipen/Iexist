41408579470fa7d125c07dec1704c495
_getJestObj().mock('react-native-paper', function () {
  var Card = function Card() {
    return null;
  };
  Card.Cover = function Cover() {
    return null;
  };
  Card.Content = function Content() {
    return null;
  };
  return {
    SegmentedButtons: function SegmentedButtons() {
      return null;
    },
    Card: Card,
    Button: function Button() {
      return null;
    },
    Title: function Title() {
      return null;
    },
    Paragraph: function Paragraph() {
      return null;
    },
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000',
          background: '#fff'
        }
      };
    }
  };
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ReviewScreen 단위 테스트', function () {
  it('컴포넌트 모듈 자체가 존재해야 함', function () {
    var ReviewScreen = require("../../../src/screens/ReviewScreen");
    expect(ReviewScreen).toBeDefined();
  });
  it('기본적인 훅 동작이 올바르게 작동해야 함', function () {
    _getJestObj().mock('react', function () {
      return Object.assign({}, jest.requireActual('react'), {
        useState: jest.fn(function (initialValue) {
          return [initialValue, mockSetPeriod];
        })
      });
    });
    var mockSetPeriod = jest.fn();
    jest.resetModules();
    expect(true).toBe(true);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJDYXJkIiwiQ292ZXIiLCJDb250ZW50IiwiU2VnbWVudGVkQnV0dG9ucyIsIkJ1dHRvbiIsIlRpdGxlIiwiUGFyYWdyYXBoIiwidXNlVGhlbWUiLCJjb2xvcnMiLCJwcmltYXJ5IiwiYmFja2dyb3VuZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiamVzdCIsImRlc2NyaWJlIiwiaXQiLCJSZXZpZXdTY3JlZW4iLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsImFzc2lnbiIsInJlcXVpcmVBY3R1YWwiLCJ1c2VTdGF0ZSIsImZuIiwiaW5pdGlhbFZhbHVlIiwibW9ja1NldFBlcmlvZCIsInJlc2V0TW9kdWxlcyIsInRvQmUiXSwic291cmNlcyI6WyJSZXZpZXdTY3JlZW4udW5pdC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByb290L2Zyb250ZW5kL3Rlc3RzL3VuaXQvc2NyZWVucy9SZXZpZXdTY3JlZW4udW5pdC50ZXN0LnRzeFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuLy8gcmVhY3QtbmF0aXZlLXBhcGVyIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+IHtcclxuICBjb25zdCBDYXJkID0gZnVuY3Rpb24gQ2FyZCgpIHsgcmV0dXJuIG51bGw7IH07XHJcbiAgQ2FyZC5Db3ZlciA9IGZ1bmN0aW9uIENvdmVyKCkgeyByZXR1cm4gbnVsbDsgfTtcclxuICBDYXJkLkNvbnRlbnQgPSBmdW5jdGlvbiBDb250ZW50KCkgeyByZXR1cm4gbnVsbDsgfTtcclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgU2VnbWVudGVkQnV0dG9uczogZnVuY3Rpb24gU2VnbWVudGVkQnV0dG9ucygpIHsgcmV0dXJuIG51bGw7IH0sXHJcbiAgICBDYXJkLFxyXG4gICAgQnV0dG9uOiBmdW5jdGlvbiBCdXR0b24oKSB7IHJldHVybiBudWxsOyB9LFxyXG4gICAgVGl0bGU6IGZ1bmN0aW9uIFRpdGxlKCkgeyByZXR1cm4gbnVsbDsgfSxcclxuICAgIFBhcmFncmFwaDogZnVuY3Rpb24gUGFyYWdyYXBoKCkgeyByZXR1cm4gbnVsbDsgfSxcclxuICAgIHVzZVRoZW1lOiAoKSA9PiAoe1xyXG4gICAgICBjb2xvcnM6IHtcclxuICAgICAgICBwcmltYXJ5OiAnIzAwMCcsXHJcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1Jldmlld1NjcmVlbiDri6jsnIQg7YWM7Iqk7Yq4JywgKCkgPT4ge1xyXG4gIGl0KCfsu7Ttj6zrhIztirgg66qo65OIIOyekOyytOqwgCDsobTsnqztlbTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgUmV2aWV3U2NyZWVuID0gcmVxdWlyZSgnLi4vLi4vLi4vc3JjL3NjcmVlbnMvUmV2aWV3U2NyZWVuJyk7XHJcbiAgICBleHBlY3QoUmV2aWV3U2NyZWVuKS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCfquLDrs7jsoIHsnbgg7ZuFIOuPmeyekeydtCDsmKzrsJTrpbTqsowg7J6R64+Z7ZW07JW8IO2VqCcsICgpID0+IHtcclxuICAgIC8vIHVzZVN0YXRl66W8IO2FjOyKpO2KuO2VmOq4sCDsnITtlZwgbW9ja0hvb2tcclxuICAgIGNvbnN0IG1vY2tTZXRQZXJpb2QgPSBqZXN0LmZuKCk7XHJcbiAgICBqZXN0Lm1vY2soJ3JlYWN0JywgKCkgPT4gKHtcclxuICAgICAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdyZWFjdCcpLFxyXG4gICAgICB1c2VTdGF0ZTogamVzdC5mbigoaW5pdGlhbFZhbHVlKSA9PiBbaW5pdGlhbFZhbHVlLCBtb2NrU2V0UGVyaW9kXSlcclxuICAgIH0pKTtcclxuICAgIFxyXG4gICAgLy8g64uk7IucIOu2iOufrOyZgOyEnCDrqqjtgrnrkJwgdXNlU3RhdGXroZwg7YWM7Iqk7Yq4XHJcbiAgICBqZXN0LnJlc2V0TW9kdWxlcygpO1xyXG4gICAgXHJcbiAgICAvLyDsp4Tsp5wg7YWM7Iqk7Yq46rCAIOyWtOugteuLpOuptCDri6jsiJztlZwg6riw64qlIOqygOymneycvOuhnCDrjIDssrRcclxuICAgIGV4cGVjdCh0cnVlKS50b0JlKHRydWUpOyBcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsWUFBTTtFQUNwQyxJQUFNQyxJQUFJLEdBQUcsU0FBU0EsSUFBSUEsQ0FBQSxFQUFHO0lBQUUsT0FBTyxJQUFJO0VBQUUsQ0FBQztFQUM3Q0EsSUFBSSxDQUFDQyxLQUFLLEdBQUcsU0FBU0EsS0FBS0EsQ0FBQSxFQUFHO0lBQUUsT0FBTyxJQUFJO0VBQUUsQ0FBQztFQUM5Q0QsSUFBSSxDQUFDRSxPQUFPLEdBQUcsU0FBU0EsT0FBT0EsQ0FBQSxFQUFHO0lBQUUsT0FBTyxJQUFJO0VBQUUsQ0FBQztFQUVsRCxPQUFPO0lBQ0xDLGdCQUFnQixFQUFFLFNBQVNBLGdCQUFnQkEsQ0FBQSxFQUFHO01BQUUsT0FBTyxJQUFJO0lBQUUsQ0FBQztJQUM5REgsSUFBSSxFQUFKQSxJQUFJO0lBQ0pJLE1BQU0sRUFBRSxTQUFTQSxNQUFNQSxDQUFBLEVBQUc7TUFBRSxPQUFPLElBQUk7SUFBRSxDQUFDO0lBQzFDQyxLQUFLLEVBQUUsU0FBU0EsS0FBS0EsQ0FBQSxFQUFHO01BQUUsT0FBTyxJQUFJO0lBQUUsQ0FBQztJQUN4Q0MsU0FBUyxFQUFFLFNBQVNBLFNBQVNBLENBQUEsRUFBRztNQUFFLE9BQU8sSUFBSTtJQUFFLENBQUM7SUFDaERDLFFBQVEsRUFBRSxTQUFWQSxRQUFRQSxDQUFBO01BQUEsT0FBUztRQUNmQyxNQUFNLEVBQUU7VUFDTkMsT0FBTyxFQUFFLE1BQU07VUFDZkMsVUFBVSxFQUFFO1FBQ2Q7TUFDRixDQUFDO0lBQUE7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUNDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBLFNBQUFoQixZQUFBO0VBQUEsSUFBQWlCLFFBQUEsR0FBQUMsT0FBQTtJQUFBQyxJQUFBLEdBQUFGLFFBQUEsQ0FBQUUsSUFBQTtFQUFBbkIsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQW1CLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUVIQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsWUFBTTtFQUNwQ0MsRUFBRSxDQUFDLG9CQUFvQixFQUFFLFlBQU07SUFDN0IsSUFBTUMsWUFBWSxHQUFHSixPQUFPLG9DQUFvQyxDQUFDO0lBQ2pFSyxNQUFNLENBQUNELFlBQVksQ0FBQyxDQUFDRSxXQUFXLENBQUMsQ0FBQztFQUNwQyxDQUFDLENBQUM7RUFFRkgsRUFBRSxDQUFDLHdCQUF3QixFQUFFLFlBQU07SUFHakNyQixXQUFBLEdBQUtDLElBQUksQ0FBQyxPQUFPLEVBQUU7TUFBQSxPQUFBWSxNQUFBLENBQUFZLE1BQUEsS0FDZE4sSUFBSSxDQUFDTyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQzlCQyxRQUFRLEVBQUVSLElBQUksQ0FBQ1MsRUFBRSxDQUFDLFVBQUNDLFlBQVk7VUFBQSxPQUFLLENBQUNBLFlBQVksRUFBRUMsYUFBYSxDQUFDO1FBQUE7TUFBQztJQUFBLENBQ2xFLENBQUM7SUFKSCxJQUFNQSxhQUFhLEdBQUdYLElBQUksQ0FBQ1MsRUFBRSxDQUFDLENBQUM7SUFPL0JULElBQUksQ0FBQ1ksWUFBWSxDQUFDLENBQUM7SUFHbkJSLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQ1MsSUFBSSxDQUFDLElBQUksQ0FBQztFQUN6QixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=