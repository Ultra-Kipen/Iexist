1a6e0309d241fd0df66d22342d64df6a
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minLength = exports.min = exports.maxLength = exports.max = exports.matches = exports.isValidUsername = exports.isValidUrl = exports.isValidPhoneNumber = exports.isValidPassword = exports.isValidEmail = exports.isRequired = exports.isPastDate = exports.isNumber = exports.isInteger = exports.isFutureDate = exports.hasUpperCase = exports.hasNumber = exports.hasLowerCase = exports.getPasswordStrength = exports.default = void 0;
var isValidEmail = exports.isValidEmail = function isValidEmail(email) {
  var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};
var isValidPassword = exports.isValidPassword = function isValidPassword(password) {
  var passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{8,}$/;
  return passwordRegex.test(password);
};
var isValidUsername = exports.isValidUsername = function isValidUsername(username) {
  var usernameRegex = /^[A-Za-z0-9_-]{3,30}$/;
  return usernameRegex.test(username);
};
var getPasswordStrength = exports.getPasswordStrength = function getPasswordStrength(password) {
  var score = 0;
  if (!password) return 0;
  if (password.length >= 6) score += 1;
  if (password.length >= 10) score += 1;
  if (/[A-Z]/.test(password)) score += 0.5;
  if (/[a-z]/.test(password)) score += 0.5;
  if (/[0-9]/.test(password)) score += 1;
  if (/[^A-Za-z0-9]/.test(password)) score += 1;
  return Math.min(4, score);
};
var isValidUrl = exports.isValidUrl = function isValidUrl(url) {
  try {
    new URL(url);
    return true;
  } catch (_unused) {
    return false;
  }
};
var isValidPhoneNumber = exports.isValidPhoneNumber = function isValidPhoneNumber(phoneNumber) {
  var phoneRegex = /^(01[016789]|02|0[3-9]{1}[0-9]{1})-?[0-9]{3,4}-?[0-9]{4}$/;
  return phoneRegex.test(phoneNumber);
};
var isRequired = exports.isRequired = function isRequired(value) {
  if (value === null || value === undefined) return false;
  if (typeof value === 'string') return value.trim().length > 0;
  return true;
};
var minLength = exports.minLength = function minLength(minLen) {
  return function (value) {
    return value.length >= minLen;
  };
};
var maxLength = exports.maxLength = function maxLength(maxLen) {
  return function (value) {
    return value.length <= maxLen;
  };
};
var matches = exports.matches = function matches(value1, value2) {
  return value1 === value2;
};
var isNumber = exports.isNumber = function isNumber(value) {
  return !isNaN(Number(value));
};
var isInteger = exports.isInteger = function isInteger(value) {
  return Number.isInteger(Number(value));
};
var min = exports.min = function min(value, _min) {
  return value >= _min;
};
var max = exports.max = function max(value, _max) {
  return value <= _max;
};
var isFutureDate = exports.isFutureDate = function isFutureDate(date) {
  var checkDate = typeof date === 'string' ? new Date(date) : date;
  var today = new Date();
  today.setHours(0, 0, 0, 0);
  return checkDate >= today;
};
var isPastDate = exports.isPastDate = function isPastDate(date) {
  var checkDate = typeof date === 'string' ? new Date(date) : date;
  var today = new Date();
  today.setHours(0, 0, 0, 0);
  return checkDate < today;
};
var hasUpperCase = exports.hasUpperCase = function hasUpperCase(value) {
  return /[A-Z]/.test(value);
};
var hasLowerCase = exports.hasLowerCase = function hasLowerCase(value) {
  return /[a-z]/.test(value);
};
var hasNumber = exports.hasNumber = function hasNumber(value) {
  return /[0-9]/.test(value);
};
var _default = exports.default = {
  isValidEmail: isValidEmail,
  isValidPassword: isValidPassword,
  isValidUsername: isValidUsername,
  getPasswordStrength: getPasswordStrength,
  isValidUrl: isValidUrl,
  isValidPhoneNumber: isValidPhoneNumber,
  isRequired: isRequired,
  minLength: minLength,
  maxLength: maxLength,
  matches: matches,
  isNumber: isNumber,
  isInteger: isInteger,
  min: min,
  max: max,
  isFutureDate: isFutureDate,
  isPastDate: isPastDate,
  hasUpperCase: hasUpperCase,
  hasLowerCase: hasLowerCase,
  hasNumber: hasNumber
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,