b024c4b63d3ff05727ca64db503dbb5a
_getJestObj().mock('@testing-library/react-native', function () {
  var originalModule = jest.requireActual('@testing-library/react-native');
  return Object.assign({}, originalModule, {
    waitFor: jest.fn(function (callback, options) {
      return originalModule.waitFor(callback, Object.assign({}, options, {
        timeout: (options == null ? void 0 : options.timeout) || 20000
      }));
    })
  });
});
_getJestObj().mock('axios', function () {
  return {
    create: jest.fn(function () {
      return {
        get: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        post: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        put: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        delete: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        defaults: {
          headers: {
            common: {}
          }
        }
      };
    }),
    get: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    post: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    put: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    delete: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    })
  };
});
_getJestObj().mock('@testing-library/jest-native/extend-expect', function () {
  return {};
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    clear: jest.fn(function () {
      return Promise.resolve();
    }),
    getAllKeys: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiGet: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiSet: jest.fn(function () {
      return Promise.resolve();
    }),
    multiRemove: jest.fn(function () {
      return Promise.resolve();
    }),
    multiMerge: jest.fn(function () {
      return Promise.resolve();
    }),
    mergeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    useAsyncStorage: jest.fn(function () {
      return {
        getItem: jest.fn(function () {
          return Promise.resolve(null);
        }),
        setItem: jest.fn(function () {
          return Promise.resolve();
        }),
        removeItem: jest.fn(function () {
          return Promise.resolve();
        }),
        mergeItem: jest.fn(function () {
          return Promise.resolve();
        })
      };
    }),
    default: {
      setItem: jest.fn(function () {
        return Promise.resolve();
      }),
      getItem: jest.fn(function () {
        return Promise.resolve(null);
      }),
      removeItem: jest.fn(function () {
        return Promise.resolve();
      }),
      clear: jest.fn(function () {
        return Promise.resolve();
      }),
      getAllKeys: jest.fn(function () {
        return Promise.resolve([]);
      }),
      multiGet: jest.fn(function () {
        return Promise.resolve([]);
      }),
      multiSet: jest.fn(function () {
        return Promise.resolve();
      }),
      multiRemove: jest.fn(function () {
        return Promise.resolve();
      }),
      multiMerge: jest.fn(function () {
        return Promise.resolve();
      }),
      mergeItem: jest.fn(function () {
        return Promise.resolve();
      })
    }
  };
});
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      }),
      absoluteFill: {},
      hairlineWidth: 1
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      }),
      Version: 29
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Animated: {
      View: 'Animated.View',
      Text: 'Animated.Text',
      Image: 'Animated.Image',
      createAnimatedComponent: jest.fn(function (component) {
        return component;
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          }),
          addListener: jest.fn(),
          removeListener: jest.fn()
        };
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    SectionList: 'SectionList',
    Image: 'Image',
    TextInput: 'TextInput',
    Button: 'Button',
    Switch: 'Switch',
    ActivityIndicator: 'ActivityIndicator',
    Alert: {
      alert: jest.fn()
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      })
    },
    TurboModuleRegistry: {
      get: jest.fn(function () {
        return null;
      }),
      getEnforcing: jest.fn(function (name) {
        if (name === 'DevMenu') {
          return {
            show: jest.fn(),
            reload: jest.fn(),
            debugRemotely: jest.fn(),
            setProfilingEnabled: jest.fn(),
            setHotLoadingEnabled: jest.fn()
          };
        }
        return null;
      })
    },
    DevSettings: {
      reload: jest.fn(),
      addMenuItem: jest.fn(),
      setIsDebuggingRemotely: jest.fn()
    },
    NativeModules: {
      DevMenu: {
        show: jest.fn(),
        reload: jest.fn(),
        debugRemotely: jest.fn(),
        setProfilingEnabled: jest.fn(),
        setHotLoadingEnabled: jest.fn()
      },
      DevSettings: {
        reload: jest.fn(),
        setIsDebuggingRemotely: jest.fn()
      },
      StatusBarManager: {
        HEIGHT: 42,
        setStyle: jest.fn(),
        setHidden: jest.fn(),
        getHeight: jest.fn(function (cb) {
          return cb && cb(42);
        })
      },
      RNCAsyncStorage: {
        getItem: jest.fn(function (key, callback) {
          return callback(null, null);
        }),
        setItem: jest.fn(function (key, value, callback) {
          return callback(null);
        }),
        removeItem: jest.fn(function (key, callback) {
          return callback(null);
        }),
        getAllKeys: jest.fn(function (callback) {
          return callback(null, []);
        }),
        multiGet: jest.fn(function (keys, callback) {
          return callback(null, []);
        }),
        multiSet: jest.fn(function (keyValuePairs, callback) {
          return callback(null);
        }),
        multiRemove: jest.fn(function (keys, callback) {
          return callback(null);
        }),
        multiMerge: jest.fn(function (keyValuePairs, callback) {
          return callback(null);
        })
      }
    },
    I18nManager: {
      isRTL: false,
      getConstants: function getConstants() {
        return {
          isRTL: false
        };
      }
    },
    ViewStyle: {},
    TextStyle: {}
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var jestGlobals = _interopRequireWildcard(require("@jest/globals"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
require("@testing-library/jest-native/extend-expect");
var _reactNative = require("@testing-library/react-native");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.expect = jestGlobals.expect;
global.test = jestGlobals.test;
global.describe = jestGlobals.describe;
global.beforeEach = jestGlobals.beforeEach;
global.afterEach = jestGlobals.afterEach;
global.jest = jestGlobals.jest;
global.__DEV__ = true;
global.window = global.window || {};
global.React = _react.default;
global.ReactDOM = _reactDom.default;
global.act = _reactNative.act;
jest.setTimeout(30000);
var originalConsoleError = console.error;
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['Unable to find an element', 'Warning: An update inside a test was not wrapped in act', 'Cannot read properties of undefined', 'ReactCurrentDispatcher', 'ReactCurrentOwner', 'act(', 'inside a test was not wrapped in act', 'DevMenu could not be found'];
  if (ignoredErrors.some(function (error) {
    return errorMessage.includes(error);
  })) {
    return;
  }
  originalConsoleError.apply(void 0, arguments);
};
var originalConsoleWarn = console.warn;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found', 'DevSettings', 'NativeModule: AsyncStorage is null'];
  if (ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    return;
  }
  originalConsoleWarn.apply(void 0, arguments);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJvcmlnaW5hbE1vZHVsZSIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwid2FpdEZvciIsImZuIiwiY2FsbGJhY2siLCJvcHRpb25zIiwidGltZW91dCIsImNyZWF0ZSIsImdldCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGF0YSIsInBvc3QiLCJwdXQiLCJkZWxldGUiLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJjbGVhciIsImdldEFsbEtleXMiLCJtdWx0aUdldCIsIm11bHRpU2V0IiwibXVsdGlSZW1vdmUiLCJtdWx0aU1lcmdlIiwibWVyZ2VJdGVtIiwidXNlQXN5bmNTdG9yYWdlIiwiZGVmYXVsdCIsIlN0eWxlU2hlZXQiLCJzdHlsZXMiLCJmbGF0dGVuIiwic3R5bGUiLCJhYnNvbHV0ZUZpbGwiLCJoYWlybGluZVdpZHRoIiwiUGxhdGZvcm0iLCJPUyIsInNlbGVjdCIsIm9iaiIsImFuZHJvaWQiLCJWZXJzaW9uIiwiRGltZW5zaW9ucyIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJBbmltYXRlZCIsIlZpZXciLCJUZXh0IiwiSW1hZ2UiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsImNvbXBvbmVudCIsInRpbWluZyIsInN0YXJ0IiwiY2IiLCJmaW5pc2hlZCIsInNwcmluZyIsIlZhbHVlIiwic2V0VmFsdWUiLCJpbnRlcnBvbGF0ZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJUb3VjaGFibGVPcGFjaXR5IiwiVG91Y2hhYmxlSGlnaGxpZ2h0IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwiU2Nyb2xsVmlldyIsIkZsYXRMaXN0IiwiU2VjdGlvbkxpc3QiLCJUZXh0SW5wdXQiLCJCdXR0b24iLCJTd2l0Y2giLCJBY3Rpdml0eUluZGljYXRvciIsIkFsZXJ0IiwiYWxlcnQiLCJMaW5raW5nIiwib3BlblVSTCIsImNhbk9wZW5VUkwiLCJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiZ2V0RW5mb3JjaW5nIiwibmFtZSIsInNob3ciLCJyZWxvYWQiLCJkZWJ1Z1JlbW90ZWx5Iiwic2V0UHJvZmlsaW5nRW5hYmxlZCIsInNldEhvdExvYWRpbmdFbmFibGVkIiwiRGV2U2V0dGluZ3MiLCJhZGRNZW51SXRlbSIsInNldElzRGVidWdnaW5nUmVtb3RlbHkiLCJOYXRpdmVNb2R1bGVzIiwiRGV2TWVudSIsIlN0YXR1c0Jhck1hbmFnZXIiLCJIRUlHSFQiLCJzZXRTdHlsZSIsInNldEhpZGRlbiIsImdldEhlaWdodCIsIlJOQ0FzeW5jU3RvcmFnZSIsImtleSIsInZhbHVlIiwia2V5cyIsImtleVZhbHVlUGFpcnMiLCJJMThuTWFuYWdlciIsImlzUlRMIiwiZ2V0Q29uc3RhbnRzIiwiVmlld1N0eWxlIiwiVGV4dFN0eWxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJqZXN0R2xvYmFscyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX3JlYWN0IiwiX3JlYWN0RG9tIiwiX3JlYWN0TmF0aXZlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJoYXMiLCJuIiwiX19wcm90b19fIiwiYSIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJfcmVxdWlyZSIsImdsb2JhbCIsImV4cGVjdCIsInRlc3QiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJfX0RFVl9fIiwid2luZG93IiwiUmVhY3QiLCJSZWFjdERPTSIsImFjdCIsInNldFRpbWVvdXQiLCJvcmlnaW5hbENvbnNvbGVFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImlnbm9yZWRFcnJvcnMiLCJzb21lIiwiaW5jbHVkZXMiLCJhcHBseSIsIm9yaWdpbmFsQ29uc29sZVdhcm4iLCJ3YXJuIiwid2FybmluZ01lc3NhZ2UiLCJpZ25vcmVkV2FybmluZ3MiLCJ3YXJuaW5nIl0sInNvdXJjZXMiOlsiamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqZXN0LnNldHVwLnRzXHJcblxyXG4vLyBAdHMtbm9jaGVja1xyXG5cclxuLy8gSmVzdCDsoITsl60g6rCd7LK066W8IOuovOyggCDshKTsoJVcclxuaW1wb3J0ICogYXMgamVzdEdsb2JhbHMgZnJvbSAnQGplc3QvZ2xvYmFscyc7XHJcbmdsb2JhbC5leHBlY3QgPSBqZXN0R2xvYmFscy5leHBlY3Q7XHJcbmdsb2JhbC50ZXN0ID0gamVzdEdsb2JhbHMudGVzdDtcclxuZ2xvYmFsLmRlc2NyaWJlID0gamVzdEdsb2JhbHMuZGVzY3JpYmU7XHJcbmdsb2JhbC5iZWZvcmVFYWNoID0gamVzdEdsb2JhbHMuYmVmb3JlRWFjaDtcclxuZ2xvYmFsLmFmdGVyRWFjaCA9IGplc3RHbG9iYWxzLmFmdGVyRWFjaDtcclxuZ2xvYmFsLmplc3QgPSBqZXN0R2xvYmFscy5qZXN0O1xyXG5cclxuLy8gUmVhY3Qg67CPIO2FjOyKpO2KuCDrnbzsnbTruIzrn6zrpqwg7LaU6rCAXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCc7XHJcbmltcG9ydCB7IGFjdCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuXHJcbi8vIOq4gOuhnOuyjCDshKTsoJVcclxuZ2xvYmFsLl9fREVWX18gPSB0cnVlO1xyXG5nbG9iYWwud2luZG93ID0gZ2xvYmFsLndpbmRvdyB8fCB7fTtcclxuZ2xvYmFsLlJlYWN0ID0gUmVhY3Q7XHJcbmdsb2JhbC5SZWFjdERPTSA9IFJlYWN0RE9NO1xyXG5nbG9iYWwuYWN0ID0gYWN0O1xyXG5cclxuLy8gd2FpdEZvciDrsI8g6rSA66CoIO2VqOyImCDrqqjtgrlcclxuamVzdC5tb2NrKCdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZScsICgpID0+IHtcclxuICBjb25zdCBvcmlnaW5hbE1vZHVsZSA9IGplc3QucmVxdWlyZUFjdHVhbCgnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnKTtcclxuICByZXR1cm4ge1xyXG4gICAgLi4ub3JpZ2luYWxNb2R1bGUsXHJcbiAgICB3YWl0Rm9yOiBqZXN0LmZuKChjYWxsYmFjaywgb3B0aW9ucykgPT4ge1xyXG4gICAgICByZXR1cm4gb3JpZ2luYWxNb2R1bGUud2FpdEZvcihjYWxsYmFjaywgeyBcclxuICAgICAgICAuLi5vcHRpb25zLCBcclxuICAgICAgICB0aW1lb3V0OiBvcHRpb25zPy50aW1lb3V0IHx8IDIwMDAwIFxyXG4gICAgICB9KTtcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gYXhpb3Mg66qo7YK5IC0g6rCE64uo7ZWY6rKMIOyEpOyglVxyXG5qZXN0Lm1vY2soJ2F4aW9zJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBjcmVhdGU6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgZ2V0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHt9IH0pKSxcclxuICAgICAgcG9zdDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7fSB9KSksXHJcbiAgICAgIHB1dDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7fSB9KSksXHJcbiAgICAgIGRlbGV0ZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7fSB9KSksXHJcbiAgICAgIGRlZmF1bHRzOiB7XHJcbiAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgY29tbW9uOiB7fVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSkpLFxyXG4gICAgZ2V0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHt9IH0pKSxcclxuICAgIHBvc3Q6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZGF0YToge30gfSkpLFxyXG4gICAgcHV0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHt9IH0pKSxcclxuICAgIGRlbGV0ZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7fSB9KSksXHJcbiAgfTtcclxufSk7XHJcblxyXG4vLyBAdGVzdGluZy1saWJyYXJ5L2plc3QtbmF0aXZlL2V4dGVuZC1leHBlY3Qg66qo7YK5XHJcbmplc3QubW9jaygnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JywgKCkgPT4gKHt9KSk7XHJcblxyXG4vLyDtg4DsnoTslYTsm4Mg67CPIOyYpOulmCDsspjrpqwg6rCc7ISgXHJcbmplc3Quc2V0VGltZW91dCgzMDAwMCk7IC8vIOq4gOuhnOuyjCDtg4DsnoTslYTsm4Mg7Kad6rCAXHJcblxyXG4vLyDstpTqsIDsoIHsnbgg7Jik66WYIOyymOumrFxyXG5jb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XHJcbmNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xyXG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9IGFyZ3NbMF0gfHwgJyc7XHJcbiAgXHJcbiAgLy8g7Yq57KCVIOyYpOulmCDrqZTsi5zsp4Ag66y07IucXHJcbiAgY29uc3QgaWdub3JlZEVycm9ycyA9IFtcclxuICAgICdVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50JyxcclxuICAgICdXYXJuaW5nOiBBbiB1cGRhdGUgaW5zaWRlIGEgdGVzdCB3YXMgbm90IHdyYXBwZWQgaW4gYWN0JyxcclxuICAgICdDYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIHVuZGVmaW5lZCcsXHJcbiAgICAnUmVhY3RDdXJyZW50RGlzcGF0Y2hlcicsXHJcbiAgICAnUmVhY3RDdXJyZW50T3duZXInLFxyXG4gICAgJ2FjdCgnLFxyXG4gICAgJ2luc2lkZSBhIHRlc3Qgd2FzIG5vdCB3cmFwcGVkIGluIGFjdCcsXHJcbiAgICAnRGV2TWVudSBjb3VsZCBub3QgYmUgZm91bmQnXHJcbiAgXTtcclxuXHJcbiAgaWYgKGlnbm9yZWRFcnJvcnMuc29tZShlcnJvciA9PiBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoZXJyb3IpKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBvcmlnaW5hbENvbnNvbGVFcnJvciguLi5hcmdzKTtcclxufTtcclxuXHJcbi8vIOqyveqzoCDtlYTthLDrp4Hsl5AgRGV2TWVudSDqtIDroKgg6rK96rOgIOy2lOqwgFxyXG5jb25zdCBvcmlnaW5hbENvbnNvbGVXYXJuID0gY29uc29sZS53YXJuO1xyXG5jb25zb2xlLndhcm4gPSAoLi4uYXJncykgPT4ge1xyXG4gIGNvbnN0IHdhcm5pbmdNZXNzYWdlID0gYXJnc1swXSB8fCAnJztcclxuICBcclxuICBjb25zdCBpZ25vcmVkV2FybmluZ3MgPSBbXHJcbiAgICAnUHJvZ3Jlc3NCYXJBbmRyb2lkIGhhcyBiZWVuIGV4dHJhY3RlZCcsXHJcbiAgICAnQ2xpcGJvYXJkIGhhcyBiZWVuIGV4dHJhY3RlZCcsXHJcbiAgICAnVHVyYm9Nb2R1bGVSZWdpc3RyeS5nZXRFbmZvcmNpbmcnLFxyXG4gICAgJ0Rldk1lbnUgY291bGQgbm90IGJlIGZvdW5kJyxcclxuICAgICdEZXZTZXR0aW5ncycsXHJcbiAgICAnTmF0aXZlTW9kdWxlOiBBc3luY1N0b3JhZ2UgaXMgbnVsbCcsXHJcbiAgXTtcclxuICBcclxuICBpZiAoaWdub3JlZFdhcm5pbmdzLnNvbWUod2FybmluZyA9PiBcclxuICAgIHR5cGVvZiB3YXJuaW5nTWVzc2FnZSA9PT0gJ3N0cmluZycgJiYgd2FybmluZ01lc3NhZ2UuaW5jbHVkZXMod2FybmluZylcclxuICApKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIFxyXG4gIG9yaWdpbmFsQ29uc29sZVdhcm4oLi4uYXJncyk7XHJcbn07XHJcblxyXG4vLyBBc3luY1N0b3JhZ2Ug66qo7YK5XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1hc3luYy1zdG9yYWdlL2FzeW5jLXN0b3JhZ2UnLCAoKSA9PiAoe1xyXG4gIHNldEl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gIGdldEl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcclxuICByZW1vdmVJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICBjbGVhcjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgZ2V0QWxsS2V5czogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcclxuICBtdWx0aUdldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcclxuICBtdWx0aVNldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgbXVsdGlSZW1vdmU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gIG11bHRpTWVyZ2U6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gIG1lcmdlSXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgdXNlQXN5bmNTdG9yYWdlOiBqZXN0LmZuKCgpID0+ICh7XHJcbiAgICBnZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXHJcbiAgICBzZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICAgIHJlbW92ZUl0ZW06IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gICAgbWVyZ2VJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICB9KSksXHJcbiAgZGVmYXVsdDoge1xyXG4gICAgc2V0SXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgICBnZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXHJcbiAgICByZW1vdmVJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICAgIGNsZWFyOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICAgIGdldEFsbEtleXM6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFtdKSksXHJcbiAgICBtdWx0aUdldDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoW10pKSxcclxuICAgIG11bHRpU2V0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICAgIG11bHRpUmVtb3ZlOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICAgIG11bHRpTWVyZ2U6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG4gICAgbWVyZ2VJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICB9LFxyXG59KSk7XHJcblxyXG4vLyBSZWFjdCBOYXRpdmUg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBTdHlsZVNoZWV0OiB7XHJcbiAgICAgIGNyZWF0ZTogamVzdC5mbihzdHlsZXMgPT4gc3R5bGVzKSxcclxuICAgICAgZmxhdHRlbjogamVzdC5mbihzdHlsZSA9PiBzdHlsZSksXHJcbiAgICAgIGFic29sdXRlRmlsbDoge30sXHJcbiAgICAgIGhhaXJsaW5lV2lkdGg6IDEsXHJcbiAgICB9LFxyXG4gICAgUGxhdGZvcm06IHsgXHJcbiAgICAgIE9TOiAnYW5kcm9pZCcsXHJcbiAgICAgIHNlbGVjdDogamVzdC5mbihvYmogPT4gb2JqLmFuZHJvaWQgfHwgb2JqLmRlZmF1bHQpLFxyXG4gICAgICBWZXJzaW9uOiAyOSxcclxuICAgIH0sXHJcbiAgICBEaW1lbnNpb25zOiB7IFxyXG4gICAgICBnZXQ6IGplc3QuZm4oKCkgPT4gKHsgd2lkdGg6IDM3NSwgaGVpZ2h0OiA2NjcgfSkpLFxyXG4gICAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXHJcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgIH0sXHJcbiAgICBBbmltYXRlZDoge1xyXG4gICAgICBWaWV3OiAnQW5pbWF0ZWQuVmlldycsXHJcbiAgICAgIFRleHQ6ICdBbmltYXRlZC5UZXh0JyxcclxuICAgICAgSW1hZ2U6ICdBbmltYXRlZC5JbWFnZScsXHJcbiAgICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiBqZXN0LmZuKGNvbXBvbmVudCA9PiBjb21wb25lbnQpLFxyXG4gICAgICB0aW1pbmc6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgICBzdGFydDogamVzdC5mbihjYiA9PiBjYiAmJiBjYih7IGZpbmlzaGVkOiB0cnVlIH0pKSxcclxuICAgICAgfSkpLFxyXG4gICAgICBzcHJpbmc6IGplc3QuZm4oKCkgPT4gKHtcclxuICAgICAgICBzdGFydDogamVzdC5mbihjYiA9PiBjYiAmJiBjYih7IGZpbmlzaGVkOiB0cnVlIH0pKSxcclxuICAgICAgfSkpLFxyXG4gICAgICBWYWx1ZTogamVzdC5mbigoKSA9PiAoe1xyXG4gICAgICAgIHNldFZhbHVlOiBqZXN0LmZuKCksXHJcbiAgICAgICAgaW50ZXJwb2xhdGU6IGplc3QuZm4oKCkgPT4gKHt9KSksXHJcbiAgICAgICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcclxuICAgICAgICByZW1vdmVMaXN0ZW5lcjogamVzdC5mbigpLFxyXG4gICAgICB9KSksXHJcbiAgICB9LFxyXG4gICAgVmlldzogJ1ZpZXcnLFxyXG4gICAgVGV4dDogJ1RleHQnLFxyXG4gICAgVG91Y2hhYmxlT3BhY2l0eTogJ1RvdWNoYWJsZU9wYWNpdHknLFxyXG4gICAgVG91Y2hhYmxlSGlnaGxpZ2h0OiAnVG91Y2hhYmxlSGlnaGxpZ2h0JyxcclxuICAgIFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjazogJ1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjaycsXHJcbiAgICBTY3JvbGxWaWV3OiAnU2Nyb2xsVmlldycsXHJcbiAgICBGbGF0TGlzdDogJ0ZsYXRMaXN0JyxcclxuICAgIFNlY3Rpb25MaXN0OiAnU2VjdGlvbkxpc3QnLFxyXG4gICAgSW1hZ2U6ICdJbWFnZScsXHJcbiAgICBUZXh0SW5wdXQ6ICdUZXh0SW5wdXQnLFxyXG4gICAgQnV0dG9uOiAnQnV0dG9uJyxcclxuICAgIFN3aXRjaDogJ1N3aXRjaCcsXHJcbiAgICBBY3Rpdml0eUluZGljYXRvcjogJ0FjdGl2aXR5SW5kaWNhdG9yJyxcclxuICAgIEFsZXJ0OiB7IFxyXG4gICAgICBhbGVydDogamVzdC5mbigpIFxyXG4gICAgfSxcclxuICAgIExpbmtpbmc6IHtcclxuICAgICAgb3BlblVSTDogamVzdC5mbigpLFxyXG4gICAgICBjYW5PcGVuVVJMOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh0cnVlKSksXHJcbiAgICB9LFxyXG4gICAgLy8gVHVyYm9Nb2R1bGVSZWdpc3RyeSDrqqjtgrkg7LaU6rCAXHJcbiAgICBUdXJib01vZHVsZVJlZ2lzdHJ5OiB7XHJcbiAgICAgIGdldDogamVzdC5mbigoKSA9PiBudWxsKSxcclxuICAgICAgZ2V0RW5mb3JjaW5nOiBqZXN0LmZuKChuYW1lKSA9PiB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdEZXZNZW51Jykge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2hvdzogamVzdC5mbigpLFxyXG4gICAgICAgICAgICByZWxvYWQ6IGplc3QuZm4oKSxcclxuICAgICAgICAgICAgZGVidWdSZW1vdGVseTogamVzdC5mbigpLFxyXG4gICAgICAgICAgICBzZXRQcm9maWxpbmdFbmFibGVkOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICAgIHNldEhvdExvYWRpbmdFbmFibGVkOiBqZXN0LmZuKCksXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfSksXHJcbiAgICB9LFxyXG4gICAgLy8gRGV2U2V0dGluZ3Mg66qo7YK5XHJcbiAgICBEZXZTZXR0aW5nczoge1xyXG4gICAgICByZWxvYWQ6IGplc3QuZm4oKSxcclxuICAgICAgYWRkTWVudUl0ZW06IGplc3QuZm4oKSxcclxuICAgICAgc2V0SXNEZWJ1Z2dpbmdSZW1vdGVseTogamVzdC5mbigpLFxyXG4gICAgfSxcclxuICAgIE5hdGl2ZU1vZHVsZXM6IHtcclxuICAgICAgRGV2TWVudToge1xyXG4gICAgICAgIHNob3c6IGplc3QuZm4oKSxcclxuICAgICAgICByZWxvYWQ6IGplc3QuZm4oKSxcclxuICAgICAgICBkZWJ1Z1JlbW90ZWx5OiBqZXN0LmZuKCksXHJcbiAgICAgICAgc2V0UHJvZmlsaW5nRW5hYmxlZDogamVzdC5mbigpLFxyXG4gICAgICAgIHNldEhvdExvYWRpbmdFbmFibGVkOiBqZXN0LmZuKCksXHJcbiAgICAgIH0sXHJcbiAgICAgIERldlNldHRpbmdzOiB7XHJcbiAgICAgICAgcmVsb2FkOiBqZXN0LmZuKCksXHJcbiAgICAgICAgc2V0SXNEZWJ1Z2dpbmdSZW1vdGVseTogamVzdC5mbigpLFxyXG4gICAgICB9LFxyXG4gICAgICBTdGF0dXNCYXJNYW5hZ2VyOiB7XHJcbiAgICAgICAgSEVJR0hUOiA0MixcclxuICAgICAgICBzZXRTdHlsZTogamVzdC5mbigpLFxyXG4gICAgICAgIHNldEhpZGRlbjogamVzdC5mbigpLFxyXG4gICAgICAgIGdldEhlaWdodDogamVzdC5mbihjYiA9PiBjYiAmJiBjYig0MikpLFxyXG4gICAgICB9LFxyXG4gICAgICBSTkNBc3luY1N0b3JhZ2U6IHtcclxuICAgICAgICBnZXRJdGVtOiBqZXN0LmZuKChrZXksIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhudWxsLCBudWxsKSksXHJcbiAgICAgICAgc2V0SXRlbTogamVzdC5mbigoa2V5LCB2YWx1ZSwgY2FsbGJhY2spID0+IGNhbGxiYWNrKG51bGwpKSxcclxuICAgICAgICByZW1vdmVJdGVtOiBqZXN0LmZuKChrZXksIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhudWxsKSksXHJcbiAgICAgICAgZ2V0QWxsS2V5czogamVzdC5mbigoY2FsbGJhY2spID0+IGNhbGxiYWNrKG51bGwsIFtdKSksXHJcbiAgICAgICAgbXVsdGlHZXQ6IGplc3QuZm4oKGtleXMsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhudWxsLCBbXSkpLFxyXG4gICAgICAgIG11bHRpU2V0OiBqZXN0LmZuKChrZXlWYWx1ZVBhaXJzLCBjYWxsYmFjaykgPT4gY2FsbGJhY2sobnVsbCkpLFxyXG4gICAgICAgIG11bHRpUmVtb3ZlOiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT4gY2FsbGJhY2sobnVsbCkpLFxyXG4gICAgICAgIG11bHRpTWVyZ2U6IGplc3QuZm4oKGtleVZhbHVlUGFpcnMsIGNhbGxiYWNrKSA9PiBjYWxsYmFjayhudWxsKSksXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgSTE4bk1hbmFnZXI6IHtcclxuICAgICAgaXNSVEw6IGZhbHNlLFxyXG4gICAgICBnZXRDb25zdGFudHM6ICgpID0+ICh7IGlzUlRMOiBmYWxzZSB9KSxcclxuICAgIH0sXHJcbiAgICAvLyDstpTqsIA6IOuqheyLnOyggeycvOuhnCBWaWV3U3R5bGUsIFRleHRTdHlsZSDrgrTrs7TrgrTquLAg7LaU6rCAXHJcbiAgICBWaWV3U3R5bGU6IHt9LFxyXG4gICAgVGV4dFN0eWxlOiB7fSxcclxuICB9O1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQTJCQUEsV0FBQSxHQUFLQyxJQUFJ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