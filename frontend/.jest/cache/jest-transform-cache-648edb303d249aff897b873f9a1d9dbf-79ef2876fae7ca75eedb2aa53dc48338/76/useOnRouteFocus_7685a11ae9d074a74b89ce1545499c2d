c5d4e09e0e2bdde3e9ba25dcac8bc2e5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOnRouteFocus = useOnRouteFocus;
var React = _interopRequireWildcard(require("react"));
var _NavigationBuilderContext = require("./NavigationBuilderContext.js");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function useOnRouteFocus(_ref) {
  var router = _ref.router,
    getState = _ref.getState,
    sourceRouteKey = _ref.key,
    setState = _ref.setState;
  var _React$useContext = React.useContext(_NavigationBuilderContext.NavigationBuilderContext),
    onRouteFocusParent = _React$useContext.onRouteFocus;
  return React.useCallback(function (key) {
    var state = getState();
    var result = router.getStateForRouteFocus(state, key);
    if (result !== state) {
      setState(result);
    }
    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {
      onRouteFocusParent(sourceRouteKey);
    }
  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9OYXZpZ2F0aW9uQnVpbGRlckNvbnRleHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJ1c2VPblJvdXRlRm9jdXMiLCJfcmVmIiwicm91dGVyIiwiZ2V0U3RhdGUiLCJzb3VyY2VSb3V0ZUtleSIsImtleSIsInNldFN0YXRlIiwiX1JlYWN0JHVzZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiTmF2aWdhdGlvbkJ1aWxkZXJDb250ZXh0Iiwib25Sb3V0ZUZvY3VzUGFyZW50Iiwib25Sb3V0ZUZvY3VzIiwidXNlQ2FsbGJhY2siLCJzdGF0ZSIsInJlc3VsdCIsImdldFN0YXRlRm9yUm91dGVGb2N1cyIsInVuZGVmaW5lZCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91c2VPblJvdXRlRm9jdXMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBQyx5QkFBQSxHQUFBRCxPQUFBO0FBQXFFLFNBQUFFLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBSix3QkFBQUksQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFVBQUEsU0FBQUosQ0FBQSxlQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFdBQUFLLE9BQUEsRUFBQUwsQ0FBQSxRQUFBRyxDQUFBLEdBQUFKLHdCQUFBLENBQUFHLENBQUEsT0FBQUMsQ0FBQSxJQUFBQSxDQUFBLENBQUFHLEdBQUEsQ0FBQU4sQ0FBQSxVQUFBRyxDQUFBLENBQUFJLEdBQUEsQ0FBQVAsQ0FBQSxPQUFBUSxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFkLENBQUEsb0JBQUFjLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLENBQUEsU0FBQUcsQ0FBQSxHQUFBUCxDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFHLENBQUEsS0FBQUEsQ0FBQSxDQUFBVixHQUFBLElBQUFVLENBQUEsQ0FBQUMsR0FBQSxJQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFHLENBQUEsSUFBQVQsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWUsR0FBQSxDQUFBbEIsQ0FBQSxFQUFBUSxDQUFBLEdBQUFBLENBQUE7QUFjOUQsU0FBU1csZUFBZUEsQ0FBQUMsSUFBQSxFQUtYO0VBQUEsSUFKbEJDLE1BQU0sR0FBQUQsSUFBQSxDQUFOQyxNQUFNO0lBQ05DLFFBQVEsR0FBQUYsSUFBQSxDQUFSRSxRQUFRO0lBQ0hDLGNBQWMsR0FBQUgsSUFBQSxDQUFuQkksR0FBRztJQUNIQyxRQUFBLEdBQUFMLElBQUEsQ0FBQUssUUFBQTtFQUVBLElBQUFDLGlCQUFBLEdBQTZDL0IsS0FBSyxDQUFDZ0MsVUFBVSxDQUMzREMsa0RBQ0YsQ0FBQztJQUZxQkMsa0JBQUEsR0FBQUgsaUJBQUEsQ0FBZEksWUFBWTtFQUlwQixPQUFPbkMsS0FBSyxDQUFDb0MsV0FBVyxDQUNyQixVQUFBUCxHQUFXLEVBQUs7SUFDZixJQUFNUSxLQUFLLEdBQUdWLFFBQVEsQ0FBQyxDQUFDO0lBQ3hCLElBQU1XLE1BQU0sR0FBR1osTUFBTSxDQUFDYSxxQkFBcUIsQ0FBQ0YsS0FBSyxFQUFFUixHQUFHLENBQUM7SUFFdkQsSUFBSVMsTUFBTSxLQUFLRCxLQUFLLEVBQUU7TUFDcEJQLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDO0lBQ2xCO0lBRUEsSUFBSUosa0JBQWtCLEtBQUtNLFNBQVMsSUFBSVosY0FBYyxLQUFLWSxTQUFTLEVBQUU7TUFDcEVOLGtCQUFrQixDQUFDTixjQUFjLENBQUM7SUFDcEM7RUFDRixDQUFDLEVBQ0QsQ0FBQ0QsUUFBUSxFQUFFTyxrQkFBa0IsRUFBRVIsTUFBTSxFQUFFSSxRQUFRLEVBQUVGLGNBQWMsQ0FDakUsQ0FBQztBQUNIIiwiaWdub3JlTGlzdCI6W119