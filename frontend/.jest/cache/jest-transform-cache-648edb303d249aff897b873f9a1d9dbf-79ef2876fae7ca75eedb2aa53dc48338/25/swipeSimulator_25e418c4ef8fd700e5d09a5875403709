9792760fd79cad6dd9887aaff5e512c8
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSwipeSimulator = getSwipeSimulator;
var _RNScreensTurboModule = require("./RNScreensTurboModule.js");
var _styleUpdater = require("./styleUpdater.js");
var BASE_VELOCITY = 400;
var ADDITIONAL_VELOCITY_FACTOR_X = 400;
var ADDITIONAL_VELOCITY_FACTOR_Y = 500;
var ADDITIONAL_VELOCITY_FACTOR_XY = 600;
function computeEasingProgress(startingTimestamp, distance, velocity) {
  'worklet';

  if (Math.abs(distance) < 1) {
    return 1;
  }
  var elapsedTime = (_getAnimationTimestamp() - startingTimestamp) / 1000;
  var currentPosition = velocity * elapsedTime;
  var progress = currentPosition / distance;
  return progress;
}
function easing(x) {
  'worklet';
  return 1 - Math.pow(1 - x, 5);
}
function computeProgress(screenTransitionConfig, event, isTransitionCanceled) {
  'worklet';

  var screenDimensions = screenTransitionConfig.screenDimensions;
  var progressX = Math.abs(event.translationX / screenDimensions.width);
  var progressY = Math.abs(event.translationY / screenDimensions.height);
  var maxProgress = Math.max(progressX, progressY);
  var progress = isTransitionCanceled ? maxProgress / 2 : maxProgress;
  return progress;
}
function maybeScheduleNextFrame(step, didScreenReachDestination, screenTransitionConfig, event, isTransitionCanceled) {
  'worklet';

  if (!didScreenReachDestination) {
    var stackTag = screenTransitionConfig.stackTag;
    var progress = computeProgress(screenTransitionConfig, event, isTransitionCanceled);
    _RNScreensTurboModule.RNScreensTurboModule.updateTransition(stackTag, progress);
    requestAnimationFrame(step);
  } else {
    screenTransitionConfig.onFinishAnimation == null || screenTransitionConfig.onFinishAnimation();
  }
}
function getSwipeSimulator(event, screenTransitionConfig, lockAxis) {
  'worklet';

  var screenDimensions = screenTransitionConfig.screenDimensions;
  var startTimestamp = _getAnimationTimestamp();
  var isTransitionCanceled = screenTransitionConfig.isTransitionCanceled;
  var startingPosition = {
    x: event.translationX,
    y: event.translationY
  };
  var direction = {
    x: Math.sign(event.translationX),
    y: Math.sign(event.translationY)
  };
  var finalPosition = isTransitionCanceled ? {
    x: 0,
    y: 0
  } : {
    x: direction.x * screenDimensions.width,
    y: direction.y * screenDimensions.height
  };
  var distance = {
    x: Math.abs(finalPosition.x - startingPosition.x),
    y: Math.abs(finalPosition.y - startingPosition.y)
  };
  var didScreenReachDestination = {
    x: false,
    y: false
  };
  var velocity = {
    x: BASE_VELOCITY,
    y: BASE_VELOCITY
  };
  if (lockAxis === 'x') {
    velocity.y = 0;
    velocity.x += ADDITIONAL_VELOCITY_FACTOR_X * distance.x / screenDimensions.width;
  } else if (lockAxis === 'y') {
    velocity.x = 0;
    velocity.y += ADDITIONAL_VELOCITY_FACTOR_Y * distance.y / screenDimensions.height;
  } else {
    var euclideanDistance = Math.sqrt(distance.x ** 2 + distance.y ** 2);
    var screenDiagonal = Math.sqrt(screenDimensions.width ** 2 + screenDimensions.height ** 2);
    var velocityVectorLength = BASE_VELOCITY + ADDITIONAL_VELOCITY_FACTOR_XY * euclideanDistance / screenDiagonal;
    if (Math.abs(startingPosition.x) > Math.abs(startingPosition.y)) {
      velocity.x = velocityVectorLength;
      velocity.y = velocityVectorLength * Math.abs(startingPosition.y / startingPosition.x);
    } else {
      velocity.x = velocityVectorLength * Math.abs(startingPosition.x / startingPosition.y);
      velocity.y = velocityVectorLength;
    }
  }
  if (isTransitionCanceled) {
    function didScreenReachDestinationCheck() {
      if (lockAxis === 'x') {
        return didScreenReachDestination.x;
      } else if (lockAxis === 'y') {
        return didScreenReachDestination.y;
      } else {
        return didScreenReachDestination.x && didScreenReachDestination.y;
      }
    }
    function restoreOriginalStyleForBelowTopScreen() {
      event.translationX = direction.x * screenDimensions.width;
      event.translationY = direction.y * screenDimensions.height;
      (0, _styleUpdater.applyStyleForBelowTopScreen)(screenTransitionConfig, event);
    }
    var _computeFrame = function computeFrame() {
      var progress = {
        x: computeEasingProgress(startTimestamp, distance.x, velocity.x),
        y: computeEasingProgress(startTimestamp, distance.y, velocity.y)
      };
      event.translationX = startingPosition.x - direction.x * distance.x * easing(progress.x);
      event.translationY = startingPosition.y - direction.y * distance.y * easing(progress.y);
      if (direction.x > 0) {
        if (event.translationX <= 0) {
          didScreenReachDestination.x = true;
          event.translationX = 0;
        }
      } else {
        if (event.translationX >= 0) {
          didScreenReachDestination.x = true;
          event.translationX = 0;
        }
      }
      if (direction.y > 0) {
        if (event.translationY <= 0) {
          didScreenReachDestination.y = true;
          event.translationY = 0;
        }
      } else {
        if (event.translationY >= 0) {
          didScreenReachDestination.y = true;
          event.translationY = 0;
        }
      }
      (0, _styleUpdater.applyStyle)(screenTransitionConfig, event);
      var finished = didScreenReachDestinationCheck();
      if (finished) {
        restoreOriginalStyleForBelowTopScreen();
      }
      maybeScheduleNextFrame(_computeFrame, finished, screenTransitionConfig, event, isTransitionCanceled);
    };
    return _computeFrame;
  } else {
    var _computeFrame2 = function computeFrame() {
      var progress = {
        x: computeEasingProgress(startTimestamp, distance.x, velocity.x),
        y: computeEasingProgress(startTimestamp, distance.y, velocity.y)
      };
      event.translationX = startingPosition.x + direction.x * distance.x * easing(progress.x);
      event.translationY = startingPosition.y + direction.y * distance.y * easing(progress.y);
      if (direction.x > 0) {
        if (event.translationX >= screenDimensions.width) {
          didScreenReachDestination.x = true;
          event.translationX = screenDimensions.width;
        }
      } else {
        if (event.translationX <= -screenDimensions.width) {
          didScreenReachDestination.x = true;
          event.translationX = -screenDimensions.width;
        }
      }
      if (direction.y > 0) {
        if (event.translationY >= screenDimensions.height) {
          didScreenReachDestination.y = true;
          event.translationY = screenDimensions.height;
        }
      } else {
        if (event.translationY <= -screenDimensions.height) {
          didScreenReachDestination.y = true;
          event.translationY = -screenDimensions.height;
        }
      }
      (0, _styleUpdater.applyStyle)(screenTransitionConfig, event);
      maybeScheduleNextFrame(_computeFrame2, didScreenReachDestination.x || didScreenReachDestination.y, screenTransitionConfig, event, isTransitionCanceled);
    };
    return _computeFrame2;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,