0dd0dc0b36bacc8f67cdcbf1d6b26bdb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createComponentForStaticNavigation = createComponentForStaticNavigation;
exports.createPathConfigForStaticNavigation = createPathConfigForStaticNavigation;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _reactIs = require("react-is");
var _useRoute = require("./useRoute.js");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["screen", "if"],
  _excluded2 = ["screens", "groups"],
  _excluded3 = ["if"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var MemoizedScreen = React.memo(function (_ref) {
  var component = _ref.component;
  var route = (0, _useRoute.useRoute)();
  var children = React.createElement(component, {
    route: route
  });
  return children;
});
MemoizedScreen.displayName = 'Memo(Screen)';
var getItemsFromScreens = function getItemsFromScreens(Screen, screens) {
  return Object.entries(screens).map(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
      name = _ref3[0],
      item = _ref3[1];
    var component;
    var props = {};
    var useIf;
    var isNavigator = false;
    if ('screen' in item) {
      var screen = item.screen,
        _if = item.if,
        rest = (0, _objectWithoutProperties2.default)(item, _excluded);
      useIf = _if;
      props = rest;
      if ((0, _reactIs.isValidElementType)(screen)) {
        component = screen;
      } else if ('config' in screen) {
        isNavigator = true;
        component = createComponentForStaticNavigation(screen, `${name}Navigator`);
      }
    } else if ((0, _reactIs.isValidElementType)(item)) {
      component = item;
    } else if ('config' in item) {
      isNavigator = true;
      component = createComponentForStaticNavigation(item, `${name}Navigator`);
    }
    if (component == null) {
      throw new Error(`Couldn't find a 'screen' property for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);
    }
    var element = isNavigator ? (React.createElement(component, {})) : (0, _jsxRuntime.jsx)(MemoizedScreen, {
      component: component
    });
    return function () {
      var shouldRender = useIf == null || useIf();
      if (!shouldRender) {
        return null;
      }
      return (0, _jsxRuntime.jsx)(Screen, Object.assign({
        name: name
      }, props, {
        children: function children() {
          return element;
        }
      }), name);
    };
  });
};
function createComponentForStaticNavigation(tree, displayName) {
  var Navigator = tree.Navigator,
    Group = tree.Group,
    Screen = tree.Screen,
    config = tree.config;
  var screens = config.screens,
    groups = config.groups,
    rest = (0, _objectWithoutProperties2.default)(config, _excluded2);
  if (screens == null && groups == null) {
    throw new Error("Couldn't find a 'screens' or 'groups' property. Make sure to define your screens under a 'screens' property in the configuration.");
  }
  var items = [];
  for (var key in config) {
    if (key === 'screens' && screens) {
      items.push.apply(items, (0, _toConsumableArray2.default)(getItemsFromScreens(Screen, screens)));
    }
    if (key === 'groups' && groups) {
      items.push.apply(items, (0, _toConsumableArray2.default)(Object.entries(groups).map(function (_ref4) {
        var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
          key = _ref5[0],
          _ref5$ = _ref5[1],
          useIf = _ref5$.if,
          group = (0, _objectWithoutProperties2.default)(_ref5$, _excluded3);
        var groupItems = getItemsFromScreens(Screen, group.screens);
        return function () {
          var children = groupItems.map(function (item) {
            return item();
          });
          var shouldRender = useIf == null || useIf();
          if (!shouldRender) {
            return null;
          }
          return (0, _react.createElement)(Group, Object.assign({
            navigationKey: key
          }, group, {
            key: key
          }), children);
        };
      })));
    }
  }
  var NavigatorComponent = function NavigatorComponent() {
    var children = items.map(function (item) {
      return item();
    });
    return (0, _jsxRuntime.jsx)(Navigator, Object.assign({}, rest, {
      children: children
    }));
  };
  NavigatorComponent.displayName = displayName;
  return NavigatorComponent;
}
function createPathConfigForStaticNavigation(tree, options, auto) {
  var initialScreenConfig;
  var _createPathConfigForTree = function createPathConfigForTree(t, o, skipInitialDetection) {
    var createPathConfigForScreens = function createPathConfigForScreens(screens, initialRouteName) {
      return Object.fromEntries(Object.entries(screens).sort(function (_ref6, _ref7) {
        var _ref8 = (0, _slicedToArray2.default)(_ref6, 1),
          a = _ref8[0];
        var _ref9 = (0, _slicedToArray2.default)(_ref7, 1),
          b = _ref9[0];
        if (a === initialRouteName) {
          return -1;
        }
        if (b === initialRouteName) {
          return 1;
        }
        return 0;
      }).map(function (_ref10) {
        var _ref11 = (0, _slicedToArray2.default)(_ref10, 2),
          key = _ref11[0],
          item = _ref11[1];
        var screenConfig = {};
        if ('linking' in item) {
          if (typeof item.linking === 'string') {
            screenConfig.path = item.linking;
          } else {
            Object.assign(screenConfig, item.linking);
          }
          if (typeof screenConfig.path === 'string') {
            screenConfig.path = screenConfig.path.replace(/^\//, '').replace(/\/$/, '');
          }
        }
        var screens;
        var skipInitialDetectionInChild = skipInitialDetection || screenConfig.path != null && screenConfig.path !== '';
        if ('config' in item) {
          screens = _createPathConfigForTree(item, undefined, skipInitialDetectionInChild);
        } else if ('screen' in item && 'config' in item.screen && (item.screen.config.screens || item.screen.config.groups)) {
          screens = _createPathConfigForTree(item.screen, undefined, skipInitialDetectionInChild);
        }
        if (screens) {
          screenConfig.screens = screens;
        }
        if (auto && !screenConfig.screens && !('linking' in item && item.linking == null)) {
          if (screenConfig.path != null) {
            if (!skipInitialDetection && screenConfig.path === '') {
              initialScreenConfig = undefined;
            }
          } else {
            if (!skipInitialDetection && initialScreenConfig == null) {
              initialScreenConfig = screenConfig;
            }
            screenConfig.path = key.replace(/([A-Z]+)/g, '-$1').replace(/^-/, '').toLowerCase();
          }
        }
        return [key, screenConfig];
      }).filter(function (_ref12) {
        var _ref13 = (0, _slicedToArray2.default)(_ref12, 2),
          screen = _ref13[1];
        return Object.keys(screen).length > 0;
      }));
    };
    var screens = {};
    for (var key in t.config) {
      if (key === 'screens' && t.config.screens) {
        var _o$initialRouteName;
        Object.assign(screens, createPathConfigForScreens(t.config.screens, (_o$initialRouteName = o == null ? void 0 : o.initialRouteName) != null ? _o$initialRouteName : t.config.initialRouteName));
      }
      if (key === 'groups' && t.config.groups) {
        Object.entries(t.config.groups).forEach(function (_ref14) {
          var _o$initialRouteName2;
          var _ref15 = (0, _slicedToArray2.default)(_ref14, 2),
            group = _ref15[1];
          Object.assign(screens, createPathConfigForScreens(group.screens, (_o$initialRouteName2 = o == null ? void 0 : o.initialRouteName) != null ? _o$initialRouteName2 : t.config.initialRouteName));
        });
      }
    }
    if (Object.keys(screens).length === 0) {
      return undefined;
    }
    return screens;
  };
  var screens = _createPathConfigForTree(tree, options, false);
  if (auto && initialScreenConfig) {
    initialScreenConfig.path = '';
  }
  return screens;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,