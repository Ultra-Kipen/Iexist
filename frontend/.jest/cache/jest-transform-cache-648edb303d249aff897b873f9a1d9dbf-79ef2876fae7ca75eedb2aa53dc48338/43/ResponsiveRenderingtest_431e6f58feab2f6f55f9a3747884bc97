2f979b64ddb22ccd265f5048e375688d
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function (key) {
      if (key === 'user') {
        return Promise.resolve(JSON.stringify({
          id: 1,
          username: 'testuser',
          nickname: '테스트유저'
        }));
      }
      if (key === 'auth_token') {
        return Promise.resolve('test-token');
      }
      return Promise.resolve(null);
    }),
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock("../../src/services/api/authService", function () {
  return {
    login: jest.fn(),
    register: jest.fn(),
    logout: jest.fn()
  };
});
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(function () {
      return Promise.resolve({
        data: [{
          emotion_id: 1,
          name: '행복',
          icon: 'emoticon-happy-outline',
          color: '#FFD700'
        }, {
          emotion_id: 2,
          name: '감사',
          icon: 'hand-heart',
          color: '#FF69B4'
        }]
      });
    }),
    getDailyEmotionCheck: jest.fn(function () {
      return Promise.resolve({
        data: []
      });
    }),
    recordEmotions: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee',
          surface: '#ffffff'
        }
      };
    },
    Button: 'Button',
    Card: 'Card',
    Title: 'Title',
    Paragraph: 'Paragraph',
    Avatar: {
      Icon: 'AvatarIcon'
    },
    ActivityIndicator: 'ActivityIndicator',
    Appbar: {
      Header: 'AppbarHeader',
      Content: 'AppbarContent',
      Action: 'AppbarAction'
    },
    IconButton: 'IconButton',
    Text: 'PaperText',
    Surface: 'Surface'
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MaterialCommunityIcons';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _HomeScreen = _interopRequireDefault(require("../../src/screens/HomeScreen"));
var _AuthContext = require("../../src/contexts/AuthContext");
var _EmotionContext = require("../../src/contexts/EmotionContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockScreenSize = function mockScreenSize(width, height) {
  var original = _reactNative2.Dimensions.get;
  jest.spyOn(_reactNative2.Dimensions, 'get').mockImplementation(function (dimension) {
    if (dimension === 'window' || dimension === 'screen') {
      return {
        width: width,
        height: height,
        scale: 1,
        fontScale: 1
      };
    }
    return original(dimension);
  });
};
describe('Responsive Rendering Tests', function () {
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('renders correctly on small screen', (0, _asyncToGenerator2.default)(function* () {
    mockScreenSize(320, 568);
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
          children: (0, _jsxRuntime.jsx)(_HomeScreen.default, {})
        })
      })),
      toJSON = _render.toJSON;
    expect(toJSON()).toMatchSnapshot();
  }));
  it('renders correctly on medium screen', (0, _asyncToGenerator2.default)(function* () {
    mockScreenSize(375, 812);
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
          children: (0, _jsxRuntime.jsx)(_HomeScreen.default, {})
        })
      })),
      toJSON = _render2.toJSON;
    expect(toJSON()).toMatchSnapshot();
  }));
  it('renders correctly on large screen', (0, _asyncToGenerator2.default)(function* () {
    mockScreenSize(768, 1024);
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
          children: (0, _jsxRuntime.jsx)(_HomeScreen.default, {})
        })
      })),
      toJSON = _render3.toJSON;
    expect(toJSON()).toMatchSnapshot();
  }));
  it('adjusts layout based on orientation', (0, _asyncToGenerator2.default)(function* () {
    mockScreenSize(812, 375);
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthProvider, {
        children: (0, _jsxRuntime.jsx)(_EmotionContext.EmotionProvider, {
          children: (0, _jsxRuntime.jsx)(_HomeScreen.default, {})
        })
      })),
      toJSON = _render4.toJSON;
    expect(toJSON()).toMatchSnapshot();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,