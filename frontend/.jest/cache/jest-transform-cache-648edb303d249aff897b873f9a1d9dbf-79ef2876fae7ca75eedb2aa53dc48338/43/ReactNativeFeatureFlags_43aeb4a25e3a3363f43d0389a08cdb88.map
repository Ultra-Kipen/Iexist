{"version":3,"names":["_ReactNativeFeatureFlagsBase","require","jsOnlyTestFlag","exports","createJavaScriptFlagGetter","animatedShouldDebounceQueueFlush","animatedShouldUseSingleOp","disableInteractionManager","disableInteractionManagerInBatchinator","enableAccessToHostTreeInFabric","enableAnimatedAllowlist","enableAnimatedClearImmediateFix","enableAnimatedPropsMemo","fixVirtualizeListCollapseWindowSize","isLayoutAnimationEnabled","shouldSkipStateUpdatesForLoopingAnimations","shouldUseAnimatedObjectForTransform","shouldUseRemoveClippedSubviewsAsDefaultOnIOS","shouldUseSetNativePropsInFabric","useInsertionEffectsForAnimations","useRefsForTextInputState","commonTestFlag","createNativeFlagGetter","commonTestFlagWithoutNativeImplementation","completeReactInstanceCreationOnBgThreadOnAndroid","disableEventLoopOnBridgeless","disableMountItemReorderingAndroid","enableAccumulatedUpdatesInRawPropsAndroid","enableBridgelessArchitecture","enableCppPropsIteratorSetter","enableDeletionOfUnmountedViews","enableEagerRootViewAttachment","enableEventEmitterRetentionDuringGesturesOnAndroid","enableFabricLogs","enableFabricRenderer","enableFixForViewCommandRace","enableGranularShadowTreeStateReconciliation","enableIOSViewClipToPaddingBox","enableImagePrefetchingAndroid","enableLayoutAnimationsOnAndroid","enableLayoutAnimationsOnIOS","enableLongTaskAPI","enableNewBackgroundAndBorderDrawables","enablePreciseSchedulingForPremountItemsOnAndroid","enablePropsUpdateReconciliationAndroid","enableReportEventPaintTime","enableSynchronousStateUpdates","enableUIConsistency","enableViewRecycling","excludeYogaFromRawProps","fixDifferentiatorEmittingUpdatesWithWrongParentTag","fixMappingOfEventPrioritiesBetweenFabricAndReact","fixMountingCoordinatorReportedPendingTransactionsOnAndroid","fuseboxEnabledRelease","initEagerTurboModulesOnNativeModulesQueueAndroid","lazyAnimationCallbacks","loadVectorDrawablesOnImages","traceTurboModulePromiseRejectionsOnAndroid","useAlwaysAvailableJSErrorHandling","useFabricInterop","useImmediateExecutorInAndroidBridgeless","useNativeViewConfigsInBridgelessMode","useOptimisedViewPreallocationOnAndroid","useOptimizedEventBatchingOnAndroid","useRawPropsJsiValue","useRuntimeShadowNodeReferenceUpdate","useTurboModuleInterop","useTurboModules","override","setOverrides"],"sources":["ReactNativeFeatureFlags.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @generated SignedSource<<3037cf1c938dae492b656333cec9633c>>\n * @flow strict\n */\n\n/**\n * IMPORTANT: Do NOT modify this file directly.\n *\n * To change the definition of the flags, edit\n *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.\n *\n * To regenerate this code, run the following script from the repo root:\n *   yarn featureflags --update\n */\n\nimport {\n  type Getter,\n  type OverridesFor,\n  createJavaScriptFlagGetter,\n  createNativeFlagGetter,\n  setOverrides,\n} from './ReactNativeFeatureFlagsBase';\n\nexport type ReactNativeFeatureFlagsJsOnly = $ReadOnly<{\n  jsOnlyTestFlag: Getter<boolean>,\n  animatedShouldDebounceQueueFlush: Getter<boolean>,\n  animatedShouldUseSingleOp: Getter<boolean>,\n  disableInteractionManager: Getter<boolean>,\n  disableInteractionManagerInBatchinator: Getter<boolean>,\n  enableAccessToHostTreeInFabric: Getter<boolean>,\n  enableAnimatedAllowlist: Getter<boolean>,\n  enableAnimatedClearImmediateFix: Getter<boolean>,\n  enableAnimatedPropsMemo: Getter<boolean>,\n  fixVirtualizeListCollapseWindowSize: Getter<boolean>,\n  isLayoutAnimationEnabled: Getter<boolean>,\n  shouldSkipStateUpdatesForLoopingAnimations: Getter<boolean>,\n  shouldUseAnimatedObjectForTransform: Getter<boolean>,\n  shouldUseRemoveClippedSubviewsAsDefaultOnIOS: Getter<boolean>,\n  shouldUseSetNativePropsInFabric: Getter<boolean>,\n  useInsertionEffectsForAnimations: Getter<boolean>,\n  useRefsForTextInputState: Getter<boolean>,\n}>;\n\nexport type ReactNativeFeatureFlagsJsOnlyOverrides = OverridesFor<ReactNativeFeatureFlagsJsOnly>;\n\nexport type ReactNativeFeatureFlags = $ReadOnly<{\n  ...ReactNativeFeatureFlagsJsOnly,\n  commonTestFlag: Getter<boolean>,\n  commonTestFlagWithoutNativeImplementation: Getter<boolean>,\n  completeReactInstanceCreationOnBgThreadOnAndroid: Getter<boolean>,\n  disableEventLoopOnBridgeless: Getter<boolean>,\n  disableMountItemReorderingAndroid: Getter<boolean>,\n  enableAccumulatedUpdatesInRawPropsAndroid: Getter<boolean>,\n  enableBridgelessArchitecture: Getter<boolean>,\n  enableCppPropsIteratorSetter: Getter<boolean>,\n  enableDeletionOfUnmountedViews: Getter<boolean>,\n  enableEagerRootViewAttachment: Getter<boolean>,\n  enableEventEmitterRetentionDuringGesturesOnAndroid: Getter<boolean>,\n  enableFabricLogs: Getter<boolean>,\n  enableFabricRenderer: Getter<boolean>,\n  enableFixForViewCommandRace: Getter<boolean>,\n  enableGranularShadowTreeStateReconciliation: Getter<boolean>,\n  enableIOSViewClipToPaddingBox: Getter<boolean>,\n  enableImagePrefetchingAndroid: Getter<boolean>,\n  enableLayoutAnimationsOnAndroid: Getter<boolean>,\n  enableLayoutAnimationsOnIOS: Getter<boolean>,\n  enableLongTaskAPI: Getter<boolean>,\n  enableNewBackgroundAndBorderDrawables: Getter<boolean>,\n  enablePreciseSchedulingForPremountItemsOnAndroid: Getter<boolean>,\n  enablePropsUpdateReconciliationAndroid: Getter<boolean>,\n  enableReportEventPaintTime: Getter<boolean>,\n  enableSynchronousStateUpdates: Getter<boolean>,\n  enableUIConsistency: Getter<boolean>,\n  enableViewRecycling: Getter<boolean>,\n  excludeYogaFromRawProps: Getter<boolean>,\n  fixDifferentiatorEmittingUpdatesWithWrongParentTag: Getter<boolean>,\n  fixMappingOfEventPrioritiesBetweenFabricAndReact: Getter<boolean>,\n  fixMountingCoordinatorReportedPendingTransactionsOnAndroid: Getter<boolean>,\n  fuseboxEnabledRelease: Getter<boolean>,\n  initEagerTurboModulesOnNativeModulesQueueAndroid: Getter<boolean>,\n  lazyAnimationCallbacks: Getter<boolean>,\n  loadVectorDrawablesOnImages: Getter<boolean>,\n  traceTurboModulePromiseRejectionsOnAndroid: Getter<boolean>,\n  useAlwaysAvailableJSErrorHandling: Getter<boolean>,\n  useFabricInterop: Getter<boolean>,\n  useImmediateExecutorInAndroidBridgeless: Getter<boolean>,\n  useNativeViewConfigsInBridgelessMode: Getter<boolean>,\n  useOptimisedViewPreallocationOnAndroid: Getter<boolean>,\n  useOptimizedEventBatchingOnAndroid: Getter<boolean>,\n  useRawPropsJsiValue: Getter<boolean>,\n  useRuntimeShadowNodeReferenceUpdate: Getter<boolean>,\n  useTurboModuleInterop: Getter<boolean>,\n  useTurboModules: Getter<boolean>,\n}>;\n\n/**\n * JS-only flag for testing. Do NOT modify.\n */\nexport const jsOnlyTestFlag: Getter<boolean> = createJavaScriptFlagGetter('jsOnlyTestFlag', false);\n\n/**\n * Enables an experimental flush-queue debouncing in Animated.js.\n */\nexport const animatedShouldDebounceQueueFlush: Getter<boolean> = createJavaScriptFlagGetter('animatedShouldDebounceQueueFlush', false);\n\n/**\n * Enables an experimental mega-operation for Animated.js that replaces many calls to native with a single call into native, to reduce JSI/JNI traffic.\n */\nexport const animatedShouldUseSingleOp: Getter<boolean> = createJavaScriptFlagGetter('animatedShouldUseSingleOp', false);\n\n/**\n * Disables InteractionManager and replaces its scheduler with `setImmediate`.\n */\nexport const disableInteractionManager: Getter<boolean> = createJavaScriptFlagGetter('disableInteractionManager', false);\n\n/**\n * Skips InteractionManager in `Batchinator` and invokes callbacks synchronously.\n */\nexport const disableInteractionManagerInBatchinator: Getter<boolean> = createJavaScriptFlagGetter('disableInteractionManagerInBatchinator', false);\n\n/**\n * Enables access to the host tree in Fabric using DOM-compatible APIs.\n */\nexport const enableAccessToHostTreeInFabric: Getter<boolean> = createJavaScriptFlagGetter('enableAccessToHostTreeInFabric', false);\n\n/**\n * Enables Animated to skip non-allowlisted props and styles.\n */\nexport const enableAnimatedAllowlist: Getter<boolean> = createJavaScriptFlagGetter('enableAnimatedAllowlist', true);\n\n/**\n * Enables an experimental to use the proper clearIntermediate instead of calling the wrong clearTimeout and canceling another timer.\n */\nexport const enableAnimatedClearImmediateFix: Getter<boolean> = createJavaScriptFlagGetter('enableAnimatedClearImmediateFix', true);\n\n/**\n * Enables Animated to analyze props to minimize invalidating `AnimatedProps`.\n */\nexport const enableAnimatedPropsMemo: Getter<boolean> = createJavaScriptFlagGetter('enableAnimatedPropsMemo', true);\n\n/**\n * Fixing an edge case where the current window size is not properly calculated with fast scrolling. Window size collapsed to 1 element even if windowSize more than the current amount of elements\n */\nexport const fixVirtualizeListCollapseWindowSize: Getter<boolean> = createJavaScriptFlagGetter('fixVirtualizeListCollapseWindowSize', false);\n\n/**\n * Function used to enable / disabled Layout Animations in React Native.\n */\nexport const isLayoutAnimationEnabled: Getter<boolean> = createJavaScriptFlagGetter('isLayoutAnimationEnabled', true);\n\n/**\n * If the animation is within Animated.loop, we do not send state updates to React.\n */\nexport const shouldSkipStateUpdatesForLoopingAnimations: Getter<boolean> = createJavaScriptFlagGetter('shouldSkipStateUpdatesForLoopingAnimations', true);\n\n/**\n * Enables use of AnimatedObject for animating transform values.\n */\nexport const shouldUseAnimatedObjectForTransform: Getter<boolean> = createJavaScriptFlagGetter('shouldUseAnimatedObjectForTransform', false);\n\n/**\n * removeClippedSubviews prop will be used as the default in FlatList on iOS to match Android\n */\nexport const shouldUseRemoveClippedSubviewsAsDefaultOnIOS: Getter<boolean> = createJavaScriptFlagGetter('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);\n\n/**\n * Enables use of setNativeProps in JS driven animations.\n */\nexport const shouldUseSetNativePropsInFabric: Getter<boolean> = createJavaScriptFlagGetter('shouldUseSetNativePropsInFabric', true);\n\n/**\n * Changes construction of the animation graph to `useInsertionEffect` instead of `useLayoutEffect`.\n */\nexport const useInsertionEffectsForAnimations: Getter<boolean> = createJavaScriptFlagGetter('useInsertionEffectsForAnimations', true);\n\n/**\n * Enable a variant of TextInput that moves some state to refs to avoid unnecessary re-renders\n */\nexport const useRefsForTextInputState: Getter<boolean> = createJavaScriptFlagGetter('useRefsForTextInputState', false);\n\n/**\n * Common flag for testing. Do NOT modify.\n */\nexport const commonTestFlag: Getter<boolean> = createNativeFlagGetter('commonTestFlag', false);\n/**\n * Common flag for testing (without native implementation). Do NOT modify.\n */\nexport const commonTestFlagWithoutNativeImplementation: Getter<boolean> = createNativeFlagGetter('commonTestFlagWithoutNativeImplementation', false);\n/**\n * Do not wait for a main-thread dispatch to complete init to start executing work on the JS thread on Android\n */\nexport const completeReactInstanceCreationOnBgThreadOnAndroid: Getter<boolean> = createNativeFlagGetter('completeReactInstanceCreationOnBgThreadOnAndroid', true);\n/**\n * The bridgeless architecture enables the event loop by default. This feature flag allows us to force disabling it in specific instances.\n */\nexport const disableEventLoopOnBridgeless: Getter<boolean> = createNativeFlagGetter('disableEventLoopOnBridgeless', false);\n/**\n * Prevent FabricMountingManager from reordering mountitems, which may lead to invalid state on the UI thread\n */\nexport const disableMountItemReorderingAndroid: Getter<boolean> = createNativeFlagGetter('disableMountItemReorderingAndroid', false);\n/**\n * When enabled, Andoid will accumulate updates in rawProps to reduce the number of mounting instructions for cascading rerenders.\n */\nexport const enableAccumulatedUpdatesInRawPropsAndroid: Getter<boolean> = createNativeFlagGetter('enableAccumulatedUpdatesInRawPropsAndroid', false);\n/**\n * Feature flag to enable the new bridgeless architecture. Note: Enabling this will force enable the following flags: `useTurboModules` & `enableFabricRenderer.\n */\nexport const enableBridgelessArchitecture: Getter<boolean> = createNativeFlagGetter('enableBridgelessArchitecture', false);\n/**\n * Enable prop iterator setter-style construction of Props in C++ (this flag is not used in Java).\n */\nexport const enableCppPropsIteratorSetter: Getter<boolean> = createNativeFlagGetter('enableCppPropsIteratorSetter', false);\n/**\n * Deletes views that were pre-allocated but never mounted on the screen.\n */\nexport const enableDeletionOfUnmountedViews: Getter<boolean> = createNativeFlagGetter('enableDeletionOfUnmountedViews', false);\n/**\n * Feature flag to configure eager attachment of the root view/initialisation of the JS code.\n */\nexport const enableEagerRootViewAttachment: Getter<boolean> = createNativeFlagGetter('enableEagerRootViewAttachment', false);\n/**\n * Enables the retention of EventEmitterWrapper on Android till the touch gesture is over to fix a bug on pressable (#44610)\n */\nexport const enableEventEmitterRetentionDuringGesturesOnAndroid: Getter<boolean> = createNativeFlagGetter('enableEventEmitterRetentionDuringGesturesOnAndroid', false);\n/**\n * This feature flag enables logs for Fabric.\n */\nexport const enableFabricLogs: Getter<boolean> = createNativeFlagGetter('enableFabricLogs', false);\n/**\n * Enables the use of the Fabric renderer in the whole app.\n */\nexport const enableFabricRenderer: Getter<boolean> = createNativeFlagGetter('enableFabricRenderer', false);\n/**\n * Synchronise the view command dispatching with mounting of new transaction\n */\nexport const enableFixForViewCommandRace: Getter<boolean> = createNativeFlagGetter('enableFixForViewCommandRace', false);\n/**\n * When enabled, the renderer would only fail commits when they propagate state and the last commit that updated state changed before committing.\n */\nexport const enableGranularShadowTreeStateReconciliation: Getter<boolean> = createNativeFlagGetter('enableGranularShadowTreeStateReconciliation', false);\n/**\n * iOS Views will clip to their padding box vs border box\n */\nexport const enableIOSViewClipToPaddingBox: Getter<boolean> = createNativeFlagGetter('enableIOSViewClipToPaddingBox', false);\n/**\n * When enabled, Andoid will build and initiate image prefetch requests on ImageShadowNode::layout\n */\nexport const enableImagePrefetchingAndroid: Getter<boolean> = createNativeFlagGetter('enableImagePrefetchingAndroid', false);\n/**\n * When enabled, LayoutAnimations API will animate state changes on Android.\n */\nexport const enableLayoutAnimationsOnAndroid: Getter<boolean> = createNativeFlagGetter('enableLayoutAnimationsOnAndroid', false);\n/**\n * When enabled, LayoutAnimations API will animate state changes on iOS.\n */\nexport const enableLayoutAnimationsOnIOS: Getter<boolean> = createNativeFlagGetter('enableLayoutAnimationsOnIOS', true);\n/**\n * Enables the reporting of long tasks through `PerformanceObserver`. Only works if the event loop is enabled.\n */\nexport const enableLongTaskAPI: Getter<boolean> = createNativeFlagGetter('enableLongTaskAPI', false);\n/**\n * Use BackgroundDrawable and BorderDrawable instead of CSSBackgroundDrawable\n */\nexport const enableNewBackgroundAndBorderDrawables: Getter<boolean> = createNativeFlagGetter('enableNewBackgroundAndBorderDrawables', false);\n/**\n * Moves execution of pre-mount items to outside the choregrapher in the main thread, so we can estimate idle time more precisely (Android only).\n */\nexport const enablePreciseSchedulingForPremountItemsOnAndroid: Getter<boolean> = createNativeFlagGetter('enablePreciseSchedulingForPremountItemsOnAndroid', false);\n/**\n * When enabled, Android will receive prop updates based on the differences between the last rendered shadow node and the last committed shadow node.\n */\nexport const enablePropsUpdateReconciliationAndroid: Getter<boolean> = createNativeFlagGetter('enablePropsUpdateReconciliationAndroid', false);\n/**\n * Report paint time inside the Event Timing API implementation (PerformanceObserver).\n */\nexport const enableReportEventPaintTime: Getter<boolean> = createNativeFlagGetter('enableReportEventPaintTime', false);\n/**\n * Dispatches state updates synchronously in Fabric (e.g.: updates the scroll position in the shadow tree synchronously from the main thread).\n */\nexport const enableSynchronousStateUpdates: Getter<boolean> = createNativeFlagGetter('enableSynchronousStateUpdates', false);\n/**\n * Ensures that JavaScript always has a consistent view of the state of the UI (e.g.: commits done in other threads are not immediately propagated to JS during its execution).\n */\nexport const enableUIConsistency: Getter<boolean> = createNativeFlagGetter('enableUIConsistency', false);\n/**\n * Enables View Recycling. When enabled, individual ViewManagers must still opt-in.\n */\nexport const enableViewRecycling: Getter<boolean> = createNativeFlagGetter('enableViewRecycling', false);\n/**\n * When enabled, rawProps in Props will not include Yoga specific props.\n */\nexport const excludeYogaFromRawProps: Getter<boolean> = createNativeFlagGetter('excludeYogaFromRawProps', false);\n/**\n * Fixes a bug in Differentiator where parent views may be referenced before they're created\n */\nexport const fixDifferentiatorEmittingUpdatesWithWrongParentTag: Getter<boolean> = createNativeFlagGetter('fixDifferentiatorEmittingUpdatesWithWrongParentTag', true);\n/**\n * Uses the default event priority instead of the discreet event priority by default when dispatching events from Fabric to React.\n */\nexport const fixMappingOfEventPrioritiesBetweenFabricAndReact: Getter<boolean> = createNativeFlagGetter('fixMappingOfEventPrioritiesBetweenFabricAndReact', false);\n/**\n * Fixes a limitation on Android where the mounting coordinator would report there are no pending transactions but some of them were actually not processed due to the use of the push model.\n */\nexport const fixMountingCoordinatorReportedPendingTransactionsOnAndroid: Getter<boolean> = createNativeFlagGetter('fixMountingCoordinatorReportedPendingTransactionsOnAndroid', false);\n/**\n * Flag determining if the React Native DevTools (Fusebox) CDP backend should be enabled in release builds. This flag is global and should not be changed across React Host lifetimes.\n */\nexport const fuseboxEnabledRelease: Getter<boolean> = createNativeFlagGetter('fuseboxEnabledRelease', false);\n/**\n * Construct modules that requires eager init on the dedicate native modules thread\n */\nexport const initEagerTurboModulesOnNativeModulesQueueAndroid: Getter<boolean> = createNativeFlagGetter('initEagerTurboModulesOnNativeModulesQueueAndroid', true);\n/**\n * Only enqueue Choreographer calls if there is an ongoing animation, instead of enqueueing every frame.\n */\nexport const lazyAnimationCallbacks: Getter<boolean> = createNativeFlagGetter('lazyAnimationCallbacks', false);\n/**\n * Adds support for loading vector drawable assets in the Image component (only on Android)\n */\nexport const loadVectorDrawablesOnImages: Getter<boolean> = createNativeFlagGetter('loadVectorDrawablesOnImages', true);\n/**\n * Enables storing js caller stack when creating promise in native module. This is useful in case of Promise rejection and tracing the cause.\n */\nexport const traceTurboModulePromiseRejectionsOnAndroid: Getter<boolean> = createNativeFlagGetter('traceTurboModulePromiseRejectionsOnAndroid', false);\n/**\n * In Bridgeless mode, use the always available javascript error reporting pipeline.\n */\nexport const useAlwaysAvailableJSErrorHandling: Getter<boolean> = createNativeFlagGetter('useAlwaysAvailableJSErrorHandling', false);\n/**\n * Should this application enable the Fabric Interop Layer for Android? If yes, the application will behave so that it can accept non-Fabric components and render them on Fabric. This toggle is controlling extra logic such as custom event dispatching that are needed for the Fabric Interop Layer to work correctly.\n */\nexport const useFabricInterop: Getter<boolean> = createNativeFlagGetter('useFabricInterop', false);\n/**\n * Invoke callbacks immediately on the ReactInstance rather than going through a background thread for synchronization\n */\nexport const useImmediateExecutorInAndroidBridgeless: Getter<boolean> = createNativeFlagGetter('useImmediateExecutorInAndroidBridgeless', true);\n/**\n * When enabled, the native view configs are used in bridgeless mode.\n */\nexport const useNativeViewConfigsInBridgelessMode: Getter<boolean> = createNativeFlagGetter('useNativeViewConfigsInBridgelessMode', false);\n/**\n * Moves more of the work in view preallocation to the main thread to free up JS thread.\n */\nexport const useOptimisedViewPreallocationOnAndroid: Getter<boolean> = createNativeFlagGetter('useOptimisedViewPreallocationOnAndroid', false);\n/**\n * Uses an optimized mechanism for event batching on Android that does not need to wait for a Choreographer frame callback.\n */\nexport const useOptimizedEventBatchingOnAndroid: Getter<boolean> = createNativeFlagGetter('useOptimizedEventBatchingOnAndroid', false);\n/**\n * Instead of using folly::dynamic as internal representation in RawProps and RawValue, use jsi::Value\n */\nexport const useRawPropsJsiValue: Getter<boolean> = createNativeFlagGetter('useRawPropsJsiValue', false);\n/**\n * When enabled, cloning shadow nodes within react native will update the reference held by the current JS fiber tree.\n */\nexport const useRuntimeShadowNodeReferenceUpdate: Getter<boolean> = createNativeFlagGetter('useRuntimeShadowNodeReferenceUpdate', true);\n/**\n * In Bridgeless mode, should legacy NativeModules use the TurboModule system?\n */\nexport const useTurboModuleInterop: Getter<boolean> = createNativeFlagGetter('useTurboModuleInterop', false);\n/**\n * When enabled, NativeModules will be executed by using the TurboModule system\n */\nexport const useTurboModules: Getter<boolean> = createNativeFlagGetter('useTurboModules', false);\n\n/**\n * Overrides the feature flags with the provided methods.\n * NOTE: Only JS-only flags can be overridden from JavaScript using this API.\n */\nexport const override = setOverrides;\n"],"mappings":"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","ignoreList":[]}