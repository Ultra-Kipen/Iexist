609c1d4883fd27e052e979ab1543ae45
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      })
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      })
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Animated: {
      View: 'Animated.View',
      Text: 'Animated.Text',
      Image: 'Animated.Image',
      createAnimatedComponent: jest.fn(function (comp) {
        return comp;
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {
              interpolate: jest.fn()
            };
          })
        };
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    TextInput: 'TextInput',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    SectionList: 'SectionList',
    Image: 'Image',
    Button: 'Button',
    Switch: jest.fn(),
    ActivityIndicator: 'ActivityIndicator',
    KeyboardAvoidingView: 'KeyboardAvoidingView',
    Modal: 'Modal',
    Alert: {
      alert: jest.fn()
    },
    DevMenu: {
      show: jest.fn(),
      debugRemotely: jest.fn()
    },
    TurboModuleRegistry: {
      get: jest.fn(function () {
        return null;
      }),
      getEnforcing: jest.fn(function (name) {
        if (name === 'DevMenu') {
          return {
            show: jest.fn(),
            debugRemotely: jest.fn()
          };
        }
        return null;
      })
    },
    NativeModules: {
      DevMenu: {
        show: jest.fn(),
        debugRemotely: jest.fn()
      },
      NativeAnimatedHelper: {
        startAnimatingNode: jest.fn(),
        stopAnimation: jest.fn()
      },
      RNCNetInfo: {
        getCurrentState: jest.fn(function () {
          return Promise.resolve();
        }),
        addListener: jest.fn(),
        removeListeners: jest.fn()
      }
    },
    ProgressBarAndroid: {
      defaultProps: {},
      propTypes: {}
    },
    Clipboard: {
      getString: jest.fn(),
      setString: jest.fn()
    },
    useWindowDimensions: jest.fn(function () {
      return {
        width: 375,
        height: 667
      };
    })
  };
});
_getJestObj().mock('react-native-gesture-handler/jestSetup', function () {
  return {};
});
_getJestObj().mock('react-native-gesture-handler', function () {
  return {
    PanGestureHandler: 'PanGestureHandler',
    TapGestureHandler: 'TapGestureHandler',
    ScrollView: 'GestureHandlerScrollView',
    Swipeable: 'Swipeable',
    DrawerLayout: 'DrawerLayout',
    State: {},
    Directions: {}
  };
});
_getJestObj().mock('@testing-library/react-native', function () {
  var actual = jest.requireActual('@testing-library/react-native');
  var extendedRender = function extendedRender(component) {
    var result = actual.render(component);
    var enhanced = Object.assign({}, result, {
      getByTestId: function getByTestId(testId) {
        var elements = result.queryAllByTestId(testId);
        if (elements.length === 0) {
          throw new Error(`테스트 ID '${testId}'를 가진 요소를 찾을 수 없습니다`);
        }
        return elements[0];
      },
      queryByTestId: function queryByTestId(testId) {
        var elements = result.queryAllByTestId(testId);
        return elements.length > 0 ? elements[0] : null;
      },
      toJSON: function toJSON() {
        return actual.screen.toJSON();
      }
    });
    return enhanced;
  };
  return Object.assign({}, actual, {
    render: extendedRender,
    act: jest.fn(function (callback) {
      if (typeof callback === 'function') {
        return callback();
      }
      return Promise.resolve();
    }),
    waitFor: jest.fn(function (expectation) {
      return Promise.resolve(expectation());
    }),
    fireEvent: Object.assign({}, actual.fireEvent, {
      press: jest.fn(function (element) {
        if (element && element.props && typeof element.props.onPress === 'function') {
          element.props.onPress();
          return true;
        }
        return false;
      }),
      changeText: jest.fn(function (element, text) {
        if (element && element.props && typeof element.props.onChangeText === 'function') {
          element.props.onChangeText(text);
          return true;
        }
        return false;
      })
    })
  });
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    }
  });
});
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.__DEV__ = true;
try {
  var _require = require('@testing-library/react-native'),
    configure = _require.configure;
  configure({
    asyncUtilTimeout: 10000
  });
} catch (error) {
  console.error('Testing library 로드 중 오류:', error);
}
var originalConsoleWarn = console.warn;
var originalConsoleError = console.error;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found'];
  if (!ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    originalConsoleWarn.apply(void 0, arguments);
  }
};
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['act(', 'inside a test was not wrapped in act', 'unmounted component', '감정 로드 오류', '챌린지 데이터 로딩 오류', 'Error: API 오류'];
  if (!ignoredErrors.some(function (error) {
    return typeof errorMessage === 'string' && errorMessage.includes(error);
  })) {
    originalConsoleError.apply(void 0, arguments);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,