8ececc80b9aa45f77247a0f0828fc5ab
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("@testing-library/react-dom");
require("@testing-library/jest-dom");
var _Modal = _interopRequireDefault(require("../../src/components/Modal"));
var _jsxRuntime = require("react/jsx-runtime");
var TestContent = function TestContent() {
  return (0, _jsxRuntime.jsx)("div", {
    "data-testid": "modal-content",
    children: "Test Content"
  });
};
var customRender = function customRender(ui) {
  var container = document.createElement('div');
  document.body.appendChild(container);
  (0, _reactDom.render)(ui, {
    container: container
  });
  return {
    getByTestId: function getByTestId(id) {
      return container.querySelector(`[data-testid="${id}"]`);
    },
    getByText: function getByText(text) {
      var elements = Array.from(container.querySelectorAll('*'));
      return elements.find(function (el) {
        return el.textContent === text;
      });
    },
    queryByText: function queryByText(text) {
      var elements = Array.from(container.querySelectorAll('*'));
      return elements.find(function (el) {
        return el.textContent === text;
      }) || null;
    },
    container: container
  };
};
describe('Modal Component', function () {
  var mockOnClose = jest.fn();
  beforeEach(function () {
    mockOnClose.mockClear();
    document.body.innerHTML = '';
  });
  it('renders nothing when not visible', function () {
    var _customRender = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: false,
        onClose: mockOnClose,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      queryByText = _customRender.queryByText;
    expect(queryByText('Test Content')).toBeNull();
  });
  it('renders content when visible', function () {
    var _customRender2 = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByText = _customRender2.getByText;
    expect(getByText('Test Content')).not.toBeNull();
  });
  it('displays title when provided', function () {
    var _customRender3 = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        title: "Test Modal",
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByText = _customRender3.getByText;
    expect(getByText('Test Modal')).not.toBeNull();
  });
  it('calls onClose when backdrop is pressed', function () {
    var _customRender4 = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        closeOnBackdropPress: true,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByTestId = _customRender4.getByTestId;
    var modalBackdrop = getByTestId('modal-backdrop');
    _reactDom.fireEvent.click(modalBackdrop);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('does not call onClose when backdrop is pressed and closeOnBackdropPress is false', function () {
    var _customRender5 = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        closeOnBackdropPress: false,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByTestId = _customRender5.getByTestId;
    var modalBackdrop = getByTestId('modal-backdrop');
    _reactDom.fireEvent.click(modalBackdrop);
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('calls onClose when close button is pressed', function () {
    var _customRender6 = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        title: "Test Modal",
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByTestId = _customRender6.getByTestId;
    var closeButton = getByTestId('modal-close-button');
    _reactDom.fireEvent.click(closeButton);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('renders footer when provided', function () {
    var Footer = function Footer() {
      return (0, _jsxRuntime.jsx)("div", {
        children: "Footer Content"
      });
    };
    var _customRender7 = customRender((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        footer: (0, _jsxRuntime.jsx)(Footer, {}),
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByText = _customRender7.getByText,
      getByTestId = _customRender7.getByTestId;
    expect(getByText('Footer Content')).not.toBeNull();
    expect(getByTestId('modal-footer')).not.toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdERvbSIsIl9Nb2RhbCIsIl9qc3hSdW50aW1lIiwiVGVzdENvbnRlbnQiLCJqc3giLCJjaGlsZHJlbiIsImN1c3RvbVJlbmRlciIsInVpIiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwicmVuZGVyIiwiZ2V0QnlUZXN0SWQiLCJpZCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRCeVRleHQiLCJ0ZXh0IiwiZWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmluZCIsImVsIiwidGV4dENvbnRlbnQiLCJxdWVyeUJ5VGV4dCIsImRlc2NyaWJlIiwibW9ja09uQ2xvc2UiLCJqZXN0IiwiZm4iLCJiZWZvcmVFYWNoIiwibW9ja0NsZWFyIiwiaW5uZXJIVE1MIiwiaXQiLCJfY3VzdG9tUmVuZGVyIiwiZGVmYXVsdCIsImlzVmlzaWJsZSIsIm9uQ2xvc2UiLCJleHBlY3QiLCJ0b0JlTnVsbCIsIl9jdXN0b21SZW5kZXIyIiwibm90IiwiX2N1c3RvbVJlbmRlcjMiLCJ0aXRsZSIsIl9jdXN0b21SZW5kZXI0IiwiY2xvc2VPbkJhY2tkcm9wUHJlc3MiLCJtb2RhbEJhY2tkcm9wIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJfY3VzdG9tUmVuZGVyNSIsInRvSGF2ZUJlZW5DYWxsZWQiLCJfY3VzdG9tUmVuZGVyNiIsImNsb3NlQnV0dG9uIiwiRm9vdGVyIiwiX2N1c3RvbVJlbmRlcjciLCJmb290ZXIiXSwic291cmNlcyI6WyJNb2RhbC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBNb2RhbC50ZXN0LnRzeCAtIEplc3Qg7YWM7Iqk7Yq47JqpXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LWRvbSc7XHJcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XHJcbmltcG9ydCBNb2RhbCBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9Nb2RhbCc7XHJcblxyXG4vLyDthYzsiqTtirjsmqkg7Lu07Y+s64SM7Yq4XHJcbmNvbnN0IFRlc3RDb250ZW50ID0gKCkgPT4gPGRpdiBkYXRhLXRlc3RpZD1cIm1vZGFsLWNvbnRlbnRcIj5UZXN0IENvbnRlbnQ8L2Rpdj47XHJcblxyXG4vLyDthYzsiqTtirgg66CM642U65+sIOqwhOuLqCDqtaztmIRcclxuY29uc3QgY3VzdG9tUmVuZGVyID0gKHVpOiBSZWFjdC5SZWFjdEVsZW1lbnQpID0+IHtcclxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgcmVuZGVyKHVpLCB7IGNvbnRhaW5lciB9KTtcclxuICByZXR1cm4ge1xyXG4gICAgZ2V0QnlUZXN0SWQ6IChpZDogc3RyaW5nKSA9PiBjb250YWluZXIucXVlcnlTZWxlY3RvcihgW2RhdGEtdGVzdGlkPVwiJHtpZH1cIl1gKSxcclxuICAgIGdldEJ5VGV4dDogKHRleHQ6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XHJcbiAgICAgIHJldHVybiBlbGVtZW50cy5maW5kKGVsID0+IGVsLnRleHRDb250ZW50ID09PSB0ZXh0KTtcclxuICAgIH0sXHJcbiAgICBxdWVyeUJ5VGV4dDogKHRleHQ6IHN0cmluZykgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XHJcbiAgICAgIHJldHVybiBlbGVtZW50cy5maW5kKGVsID0+IGVsLnRleHRDb250ZW50ID09PSB0ZXh0KSB8fCBudWxsO1xyXG4gICAgfSxcclxuICAgIGNvbnRhaW5lclxyXG4gIH07XHJcbn07XHJcblxyXG5kZXNjcmliZSgnTW9kYWwgQ29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tPbkNsb3NlID0gamVzdC5mbigpO1xyXG4gIFxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgbW9ja09uQ2xvc2UubW9ja0NsZWFyKCk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdyZW5kZXJzIG5vdGhpbmcgd2hlbiBub3QgdmlzaWJsZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IGN1c3RvbVJlbmRlcihcclxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17ZmFsc2V9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfT5cclxuICAgICAgICA8VGVzdENvbnRlbnQgLz5cclxuICAgICAgPC9Nb2RhbD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChxdWVyeUJ5VGV4dCgnVGVzdCBDb250ZW50JykpLnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdyZW5kZXJzIGNvbnRlbnQgd2hlbiB2aXNpYmxlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IGN1c3RvbVJlbmRlcihcclxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9PlxyXG4gICAgICAgIDxUZXN0Q29udGVudCAvPlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVzdCBDb250ZW50JykpLm5vdC50b0JlTnVsbCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGlzcGxheXMgdGl0bGUgd2hlbiBwcm92aWRlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSBjdXN0b21SZW5kZXIoXHJcbiAgICAgIDxNb2RhbCBpc1Zpc2libGU9e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfSB0aXRsZT1cIlRlc3QgTW9kYWxcIj5cclxuICAgICAgICA8VGVzdENvbnRlbnQgLz5cclxuICAgICAgPC9Nb2RhbD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ1Rlc3QgTW9kYWwnKSkubm90LnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbiAgXHJcbiAgaXQoJ2NhbGxzIG9uQ2xvc2Ugd2hlbiBiYWNrZHJvcCBpcyBwcmVzc2VkJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gY3VzdG9tUmVuZGVyKFxyXG4gICAgICA8TW9kYWwgaXNWaXNpYmxlPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0gY2xvc2VPbkJhY2tkcm9wUHJlc3M9e3RydWV9PlxyXG4gICAgICAgIDxUZXN0Q29udGVudCAvPlxyXG4gICAgICA8L01vZGFsPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgY29uc3QgbW9kYWxCYWNrZHJvcCA9IGdldEJ5VGVzdElkKCdtb2RhbC1iYWNrZHJvcCcpO1xyXG4gICAgZmlyZUV2ZW50LmNsaWNrKG1vZGFsQmFja2Ryb3AgYXMgRWxlbWVudCk7XHJcbiAgICBcclxuICAgIGV4cGVjdChtb2NrT25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdkb2VzIG5vdCBjYWxsIG9uQ2xvc2Ugd2hlbiBiYWNrZHJvcCBpcyBwcmVzc2VkIGFuZCBjbG9zZU9uQmFja2Ryb3BQcmVzcyBpcyBmYWxzZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXN0SWQgfSA9IGN1c3RvbVJlbmRlcihcclxuICAgICAgPE1vZGFsIGlzVmlzaWJsZT17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9IGNsb3NlT25CYWNrZHJvcFByZXNzPXtmYWxzZX0+XHJcbiAgICAgICAgPFRlc3RDb250ZW50IC8+XHJcbiAgICAgIDwvTW9kYWw+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBjb25zdCBtb2RhbEJhY2tkcm9wID0gZ2V0QnlUZXN0SWQoJ21vZGFsLWJhY2tkcm9wJyk7XHJcbiAgICBmaXJlRXZlbnQuY2xpY2sobW9kYWxCYWNrZHJvcCBhcyBFbGVtZW50KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG1vY2tPbkNsb3NlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gIH0pO1xyXG4gIFxyXG4gIGl0KCdjYWxscyBvbkNsb3NlIHdoZW4gY2xvc2UgYnV0dG9uIGlzIHByZXNzZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSBjdXN0b21SZW5kZXIoXHJcbiAgICAgIDxNb2RhbCBpc1Zpc2libGU9e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfSB0aXRsZT1cIlRlc3QgTW9kYWxcIj5cclxuICAgICAgICA8VGVzdENvbnRlbnQgLz5cclxuICAgICAgPC9Nb2RhbD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ21vZGFsLWNsb3NlLWJ1dHRvbicpO1xyXG4gICAgZmlyZUV2ZW50LmNsaWNrKGNsb3NlQnV0dG9uIGFzIEVsZW1lbnQpO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja09uQ2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICB9KTtcclxuICBcclxuICBpdCgncmVuZGVycyBmb290ZXIgd2hlbiBwcm92aWRlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IEZvb3RlciA9ICgpID0+IDxkaXY+Rm9vdGVyIENvbnRlbnQ8L2Rpdj47XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0LCBnZXRCeVRlc3RJZCB9ID0gY3VzdG9tUmVuZGVyKFxyXG4gICAgICA8TW9kYWwgXHJcbiAgICAgICAgaXNWaXNpYmxlPXt0cnVlfSBcclxuICAgICAgICBvbkNsb3NlPXttb2NrT25DbG9zZX1cclxuICAgICAgICBmb290ZXI9ezxGb290ZXIgLz59XHJcbiAgICAgID5cclxuICAgICAgICA8VGVzdENvbnRlbnQgLz5cclxuICAgICAgPC9Nb2RhbD5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ0Zvb3RlciBDb250ZW50JykpLm5vdC50b0JlTnVsbCgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdtb2RhbC1mb290ZXInKSkubm90LnRvQmVOdWxsKCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IjtBQUNBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFNBQUEsR0FBQUQsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQStDLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUcvQyxJQUFNSSxXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBQTtFQUFBLE9BQVMsSUFBQUQsV0FBQSxDQUFBRSxHQUFBO0lBQUssZUFBWSxlQUFlO0lBQUFDLFFBQUEsRUFBQztFQUFZLENBQUssQ0FBQztBQUFBO0FBRzdFLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFJQyxFQUFzQixFQUFLO0VBQy9DLElBQU1DLFNBQVMsR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUMsS0FBSyxDQUFDO0VBQy9DRCxRQUFRLENBQUNFLElBQUksQ0FBQ0MsV0FBVyxDQUFDSixTQUFTLENBQUM7RUFDcEMsSUFBQUssZ0JBQU0sRUFBQ04sRUFBRSxFQUFFO0lBQUVDLFNBQVMsRUFBVEE7RUFBVSxDQUFDLENBQUM7RUFDekIsT0FBTztJQUNMTSxXQUFXLEVBQUUsU0FBYkEsV0FBV0EsQ0FBR0MsRUFBVTtNQUFBLE9BQUtQLFNBQVMsQ0FBQ1EsYUFBYSxDQUFDLGlCQUFpQkQsRUFBRSxJQUFJLENBQUM7SUFBQTtJQUM3RUUsU0FBUyxFQUFFLFNBQVhBLFNBQVNBLENBQUdDLElBQVksRUFBSztNQUMzQixJQUFNQyxRQUFRLEdBQUdDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDYixTQUFTLENBQUNjLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQzVELE9BQU9ILFFBQVEsQ0FBQ0ksSUFBSSxDQUFDLFVBQUFDLEVBQUU7UUFBQSxPQUFJQSxFQUFFLENBQUNDLFdBQVcsS0FBS1AsSUFBSTtNQUFBLEVBQUM7SUFDckQsQ0FBQztJQUNEUSxXQUFXLEVBQUUsU0FBYkEsV0FBV0EsQ0FBR1IsSUFBWSxFQUFLO01BQzdCLElBQU1DLFFBQVEsR0FBR0MsS0FBSyxDQUFDQyxJQUFJLENBQUNiLFNBQVMsQ0FBQ2MsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDNUQsT0FBT0gsUUFBUSxDQUFDSSxJQUFJLENBQUMsVUFBQUMsRUFBRTtRQUFBLE9BQUlBLEVBQUUsQ0FBQ0MsV0FBVyxLQUFLUCxJQUFJO01BQUEsRUFBQyxJQUFJLElBQUk7SUFDN0QsQ0FBQztJQUNEVixTQUFTLEVBQVRBO0VBQ0YsQ0FBQztBQUNILENBQUM7QUFFRG1CLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFNO0VBQ2hDLElBQU1DLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztFQUU3QkMsVUFBVSxDQUFDLFlBQU07SUFDZkgsV0FBVyxDQUFDSSxTQUFTLENBQUMsQ0FBQztJQUN2QnZCLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDc0IsU0FBUyxHQUFHLEVBQUU7RUFDOUIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0lBQzNDLElBQUFDLGFBQUEsR0FBd0I3QixZQUFZLENBQ2xDLElBQUFKLFdBQUEsQ0FBQUUsR0FBQSxFQUFDSCxNQUFBLENBQUFtQyxPQUFLO1FBQUNDLFNBQVMsRUFBRSxLQUFNO1FBQUNDLE9BQU8sRUFBRVYsV0FBWTtRQUFBdkIsUUFBQSxFQUM1QyxJQUFBSCxXQUFBLENBQUFFLEdBQUEsRUFBQ0QsV0FBVyxJQUFFO01BQUMsQ0FDVixDQUNULENBQUM7TUFKT3VCLFdBQVcsR0FBQVMsYUFBQSxDQUFYVCxXQUFXO0lBTW5CYSxNQUFNLENBQUNiLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDYyxRQUFRLENBQUMsQ0FBQztFQUNoRCxDQUFDLENBQUM7RUFFRk4sRUFBRSxDQUFDLDhCQUE4QixFQUFFLFlBQU07SUFDdkMsSUFBQU8sY0FBQSxHQUFzQm5DLFlBQVksQ0FDaEMsSUFBQUosV0FBQSxDQUFBRSxHQUFBLEVBQUNILE1BQUEsQ0FBQW1DLE9BQUs7UUFBQ0MsU0FBUyxFQUFFLElBQUs7UUFBQ0MsT0FBTyxFQUFFVixXQUFZO1FBQUF2QixRQUFBLEVBQzNDLElBQUFILFdBQUEsQ0FBQUUsR0FBQSxFQUFDRCxXQUFXLElBQUU7TUFBQyxDQUNWLENBQ1QsQ0FBQztNQUpPYyxTQUFTLEdBQUF3QixjQUFBLENBQVR4QixTQUFTO0lBTWpCc0IsTUFBTSxDQUFDdEIsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUN5QixHQUFHLENBQUNGLFFBQVEsQ0FBQyxDQUFDO0VBQ2xELENBQUMsQ0FBQztFQUVGTixFQUFFLENBQUMsOEJBQThCLEVBQUUsWUFBTTtJQUN2QyxJQUFBUyxjQUFBLEdBQXNCckMsWUFBWSxDQUNoQyxJQUFBSixXQUFBLENBQUFFLEdBQUEsRUFBQ0gsTUFBQSxDQUFBbUMsT0FBSztRQUFDQyxTQUFTLEVBQUUsSUFBSztRQUFDQyxPQUFPLEVBQUVWLFdBQVk7UUFBQ2dCLEtBQUssRUFBQyxZQUFZO1FBQUF2QyxRQUFBLEVBQzlELElBQUFILFdBQUEsQ0FBQUUsR0FBQSxFQUFDRCxXQUFXLElBQUU7TUFBQyxDQUNWLENBQ1QsQ0FBQztNQUpPYyxTQUFTLEdBQUEwQixjQUFBLENBQVQxQixTQUFTO0lBTWpCc0IsTUFBTSxDQUFDdEIsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUN5QixHQUFHLENBQUNGLFFBQVEsQ0FBQyxDQUFDO0VBQ2hELENBQUMsQ0FBQztFQUVGTixFQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtJQUNqRCxJQUFBVyxjQUFBLEdBQXdCdkMsWUFBWSxDQUNsQyxJQUFBSixXQUFBLENBQUFFLEdBQUEsRUFBQ0gsTUFBQSxDQUFBbUMsT0FBSztRQUFDQyxTQUFTLEVBQUUsSUFBSztRQUFDQyxPQUFPLEVBQUVWLFdBQVk7UUFBQ2tCLG9CQUFvQixFQUFFLElBQUs7UUFBQXpDLFFBQUEsRUFDdkUsSUFBQUgsV0FBQSxDQUFBRSxHQUFBLEVBQUNELFdBQVcsSUFBRTtNQUFDLENBQ1YsQ0FDVCxDQUFDO01BSk9XLFdBQVcsR0FBQStCLGNBQUEsQ0FBWC9CLFdBQVc7SUFNbkIsSUFBTWlDLGFBQWEsR0FBR2pDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNuRGtDLG1CQUFTLENBQUNDLEtBQUssQ0FBQ0YsYUFBd0IsQ0FBQztJQUV6Q1IsTUFBTSxDQUFDWCxXQUFXLENBQUMsQ0FBQ3NCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRmhCLEVBQUUsQ0FBQyxrRkFBa0YsRUFBRSxZQUFNO0lBQzNGLElBQUFpQixjQUFBLEdBQXdCN0MsWUFBWSxDQUNsQyxJQUFBSixXQUFBLENBQUFFLEdBQUEsRUFBQ0gsTUFBQSxDQUFBbUMsT0FBSztRQUFDQyxTQUFTLEVBQUUsSUFBSztRQUFDQyxPQUFPLEVBQUVWLFdBQVk7UUFBQ2tCLG9CQUFvQixFQUFFLEtBQU07UUFBQXpDLFFBQUEsRUFDeEUsSUFBQUgsV0FBQSxDQUFBRSxHQUFBLEVBQUNELFdBQVcsSUFBRTtNQUFDLENBQ1YsQ0FDVCxDQUFDO01BSk9XLFdBQVcsR0FBQXFDLGNBQUEsQ0FBWHJDLFdBQVc7SUFNbkIsSUFBTWlDLGFBQWEsR0FBR2pDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNuRGtDLG1CQUFTLENBQUNDLEtBQUssQ0FBQ0YsYUFBd0IsQ0FBQztJQUV6Q1IsTUFBTSxDQUFDWCxXQUFXLENBQUMsQ0FBQ2MsR0FBRyxDQUFDVSxnQkFBZ0IsQ0FBQyxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUVGbEIsRUFBRSxDQUFDLDRDQUE0QyxFQUFFLFlBQU07SUFDckQsSUFBQW1CLGNBQUEsR0FBd0IvQyxZQUFZLENBQ2xDLElBQUFKLFdBQUEsQ0FBQUUsR0FBQSxFQUFDSCxNQUFBLENBQUFtQyxPQUFLO1FBQUNDLFNBQVMsRUFBRSxJQUFLO1FBQUNDLE9BQU8sRUFBRVYsV0FBWTtRQUFDZ0IsS0FBSyxFQUFDLFlBQVk7UUFBQXZDLFFBQUEsRUFDOUQsSUFBQUgsV0FBQSxDQUFBRSxHQUFBLEVBQUNELFdBQVcsSUFBRTtNQUFDLENBQ1YsQ0FDVCxDQUFDO01BSk9XLFdBQVcsR0FBQXVDLGNBQUEsQ0FBWHZDLFdBQVc7SUFNbkIsSUFBTXdDLFdBQVcsR0FBR3hDLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztJQUNyRGtDLG1CQUFTLENBQUNDLEtBQUssQ0FBQ0ssV0FBc0IsQ0FBQztJQUV2Q2YsTUFBTSxDQUFDWCxXQUFXLENBQUMsQ0FBQ3NCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRmhCLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0lBQ3ZDLElBQU1xQixNQUFNLEdBQUcsU0FBVEEsTUFBTUEsQ0FBQTtNQUFBLE9BQVMsSUFBQXJELFdBQUEsQ0FBQUUsR0FBQTtRQUFBQyxRQUFBLEVBQUs7TUFBYyxDQUFLLENBQUM7SUFBQTtJQUU5QyxJQUFBbUQsY0FBQSxHQUFtQ2xELFlBQVksQ0FDN0MsSUFBQUosV0FBQSxDQUFBRSxHQUFBLEVBQUNILE1BQUEsQ0FBQW1DLE9BQUs7UUFDSkMsU0FBUyxFQUFFLElBQUs7UUFDaEJDLE9BQU8sRUFBRVYsV0FBWTtRQUNyQjZCLE1BQU0sRUFBRSxJQUFBdkQsV0FBQSxDQUFBRSxHQUFBLEVBQUNtRCxNQUFNLElBQUUsQ0FBRTtRQUFBbEQsUUFBQSxFQUVuQixJQUFBSCxXQUFBLENBQUFFLEdBQUEsRUFBQ0QsV0FBVyxJQUFFO01BQUMsQ0FDVixDQUNULENBQUM7TUFST2MsU0FBUyxHQUFBdUMsY0FBQSxDQUFUdkMsU0FBUztNQUFFSCxXQUFXLEdBQUEwQyxjQUFBLENBQVgxQyxXQUFXO0lBVTlCeUIsTUFBTSxDQUFDdEIsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQ3lCLEdBQUcsQ0FBQ0YsUUFBUSxDQUFDLENBQUM7SUFDbERELE1BQU0sQ0FBQ3pCLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDNEIsR0FBRyxDQUFDRixRQUFRLENBQUMsQ0FBQztFQUNwRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=