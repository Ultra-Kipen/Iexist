ed49d4144902b860a62cd535b326dff0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var TagSelector = function TagSelector(_ref) {
  var tags = _ref.tags,
    selectedTags = _ref.selectedTags,
    onTagSelect = _ref.onTagSelect,
    onTagCreate = _ref.onTagCreate,
    _ref$title = _ref.title,
    title = _ref$title === void 0 ? '태그 선택' : _ref$title,
    _ref$allowCreation = _ref.allowCreation,
    allowCreation = _ref$allowCreation === void 0 ? false : _ref$allowCreation,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? true : _ref$multiple,
    maxSelected = _ref.maxSelected;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    newTagText = _useState2[0],
    setNewTagText = _useState2[1];
  var handleTagSelect = function handleTagSelect(tagId) {
    onTagSelect(tagId);
  };
  var handleCreateTag = function handleCreateTag() {
    if (newTagText.trim() && onTagCreate) {
      onTagCreate(newTagText.trim());
      setNewTagText('');
    }
  };
  var isMaxSelected = maxSelected !== undefined && selectedTags.length >= maxSelected;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [title && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: title
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      horizontal: false,
      showsVerticalScrollIndicator: false,
      style: styles.tagScroll,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.tagContainer,
        children: tags.map(function (tag) {
          var isSelected = selectedTags.includes(tag.id);
          var disabled = !isSelected && isMaxSelected;
          return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: [styles.tag, isSelected && styles.selectedTag, disabled && styles.disabledTag],
            onPress: function onPress() {
              return handleTagSelect(tag.id);
            },
            disabled: disabled,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.tagText, isSelected && styles.selectedTagText, disabled && styles.disabledTagText],
              children: tag.name
            })
          }, tag.id);
        })
      })
    }), allowCreation && onTagCreate && (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.createTagContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.input,
        value: newTagText,
        onChangeText: setNewTagText,
        placeholder: "\uC0C8 \uD0DC\uADF8 \uC785\uB825",
        maxLength: 20
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        style: [styles.createButton, !newTagText.trim() && styles.disabledButton],
        onPress: handleCreateTag,
        disabled: !newTagText.trim(),
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.createButtonText,
          children: "\uCD94\uAC00"
        })
      })]
    }), maxSelected && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: styles.helperText,
      children: [selectedTags.length, "/", maxSelected, " \uC120\uD0DD\uB428"]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    marginBottom: 16
  },
  title: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 8,
    color: '#333333'
  },
  tagScroll: {
    maxHeight: 120
  },
  tagContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap'
  },
  tag: {
    backgroundColor: '#F5F5F5',
    borderRadius: 16,
    paddingVertical: 6,
    paddingHorizontal: 12,
    margin: 4,
    borderWidth: 1,
    borderColor: '#EEEEEE'
  },
  selectedTag: {
    backgroundColor: '#E1EFF9',
    borderColor: '#4A90E2'
  },
  disabledTag: {
    opacity: 0.5
  },
  tagText: {
    color: '#666666',
    fontSize: 14
  },
  selectedTagText: {
    color: '#4A90E2',
    fontWeight: '500'
  },
  disabledTagText: {
    color: '#999999'
  },
  createTagContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 12
  },
  input: {
    flex: 1,
    height: 40,
    borderWidth: 1,
    borderColor: '#DDDDDD',
    borderRadius: 4,
    paddingHorizontal: 12,
    marginRight: 8
  },
  createButton: {
    backgroundColor: '#4A90E2',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 4
  },
  disabledButton: {
    backgroundColor: '#CCCCCC'
  },
  createButtonText: {
    color: '#FFFFFF',
    fontWeight: '500'
  },
  helperText: {
    fontSize: 12,
    color: '#999999',
    marginTop: 8
  }
});
var _default = exports.default = TagSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,