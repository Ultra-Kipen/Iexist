ddef3218d578ea14a3a55554fe3ff93b
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return {
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee'
        }
      };
    },
    Card: {
      Content: function Content(props) {
        return React.createElement(View, {}, props.children);
      },
      Actions: function Actions(props) {
        return React.createElement(View, {}, props.children);
      }
    },
    Title: function Title(props) {
      return React.createElement(Text, {}, props.children);
    },
    Paragraph: function Paragraph(props) {
      return React.createElement(Text, {}, props.children);
    },
    Button: function Button(props) {
      return React.createElement(TouchableOpacity, {
        onPress: props.onPress
      }, React.createElement(Text, {}, props.children));
    },
    ProgressBar: function ProgressBar(props) {
      return React.createElement(View, {
        accessibilityRole: 'progressbar',
        progress: props.progress
      });
    },
    List: {
      Item: function Item(props) {
        return React.createElement(View, {}, React.createElement(Text, {}, props.title));
      },
      Icon: function Icon() {
        return React.createElement(View, {}, null);
      }
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var ChallengeScreen = function ChallengeScreen() {
  var challenges = [{
    id: 1,
    title: '7일간의 감사 일기',
    description: '매일 감사한 일 3가지를 기록해보세요.',
    participants: 128,
    duration: 7,
    progress: 0.4
  }, {
    id: 2,
    title: '30일 긍정 에너지 나누기',
    description: '하루에 한 번 주변 사람에게 긍정적인 말을 해보세요.',
    participants: 56,
    duration: 30,
    progress: 0.2
  }, {
    id: 3,
    title: '21일 명상 습관 만들기',
    description: '매일 10분씩 명상을 하고 느낀 점을 공유해보세요.',
    participants: 89,
    duration: 21,
    progress: 0.6
  }];
  var handleJoinChallenge = function handleJoinChallenge(challengeId) {
    console.log('Joining challenge:', challengeId);
  };
  var _require2 = require('react-native-paper'),
    Card = _require2.Card,
    Title = _require2.Title,
    Paragraph = _require2.Paragraph,
    Button = _require2.Button,
    ProgressBar = _require2.ProgressBar,
    List = _require2.List;
  var theme = {
    colors: {
      primary: '#6200ee'
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative2.ScrollView, {
    children: [(0, _jsxRuntime.jsx)(Title, {
      children: "\uD604\uC7AC \uC9C4\uD589 \uC911\uC778 \uCC4C\uB9B0\uC9C0"
    }), challenges.map(function (challenge) {
      return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
        style: {
          marginBottom: 16
        },
        children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
          children: [(0, _jsxRuntime.jsx)(Title, {
            children: challenge.title
          }), (0, _jsxRuntime.jsx)(Paragraph, {
            children: challenge.description
          }), (0, _jsxRuntime.jsxs)(_reactNative2.View, {
            children: [(0, _jsxRuntime.jsx)(ProgressBar, {
              progress: challenge.progress,
              color: theme.colors.primary
            }), (0, _jsxRuntime.jsx)(Paragraph, {
              children: `${Math.round(challenge.progress * 100)}% 완료`
            })]
          }), (0, _jsxRuntime.jsx)(List.Item, {
            title: `참여자: ${challenge.participants}명`,
            left: function left(props) {
              return (0, _jsxRuntime.jsx)(List.Icon, Object.assign({}, props, {
                icon: "account-group"
              }));
            }
          }), (0, _jsxRuntime.jsx)(List.Item, {
            title: `기간: ${challenge.duration}일`,
            left: function left(props) {
              return (0, _jsxRuntime.jsx)(List.Icon, Object.assign({}, props, {
                icon: "calendar-range"
              }));
            }
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
          children: (0, _jsxRuntime.jsx)(Button, {
            onPress: function onPress() {
              return handleJoinChallenge(challenge.id);
            },
            children: "\uCC38\uC5EC\uD558\uAE30"
          })
        })]
      }, challenge.id);
    })]
  });
};
var mockConsoleLog = jest.fn();
console.log = mockConsoleLog;
describe('ChallengeScreen', function () {
  beforeEach(function () {
    mockConsoleLog.mockClear();
  });
  it('renders correctly with challenges', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getByText = _render.getByText,
      getAllByText = _render.getAllByText;
    expect(getByText('현재 진행 중인 챌린지')).toBeTruthy();
    expect(getByText('7일간의 감사 일기')).toBeTruthy();
    expect(getByText('30일 긍정 에너지 나누기')).toBeTruthy();
    expect(getByText('21일 명상 습관 만들기')).toBeTruthy();
    expect(getByText('매일 감사한 일 3가지를 기록해보세요.')).toBeTruthy();
    expect(getByText('하루에 한 번 주변 사람에게 긍정적인 말을 해보세요.')).toBeTruthy();
    expect(getByText('매일 10분씩 명상을 하고 느낀 점을 공유해보세요.')).toBeTruthy();
    expect(getByText('40% 완료')).toBeTruthy();
    expect(getByText('20% 완료')).toBeTruthy();
    expect(getByText('60% 완료')).toBeTruthy();
    var participantTexts = getAllByText(/참여자: \d+명/);
    expect(participantTexts).toHaveLength(3);
    var durationTexts = getAllByText(/기간: \d+일/);
    expect(durationTexts).toHaveLength(3);
    var joinButtons = getAllByText('참여하기');
    expect(joinButtons).toHaveLength(3);
  });
  it('calls handleJoinChallenge when join button is pressed', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getAllByText = _render2.getAllByText;
    var joinButtons = getAllByText('참여하기');
    _reactNative.fireEvent.press(joinButtons[0]);
    expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 1);
    _reactNative.fireEvent.press(joinButtons[1]);
    expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 2);
    _reactNative.fireEvent.press(joinButtons[2]);
    expect(mockConsoleLog).toHaveBeenCalledWith('Joining challenge:', 3);
    expect(mockConsoleLog).toHaveBeenCalledTimes(3);
  });
  it('renders the ScrollView component', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getByText = _render3.getByText;
    expect(getByText('현재 진행 중인 챌린지')).toBeTruthy();
  });
  it('renders cards with content', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getAllByText = _render4.getAllByText;
    var challengeTitles = [getAllByText('7일간의 감사 일기')[0], getAllByText('30일 긍정 에너지 나누기')[0], getAllByText('21일 명상 습관 만들기')[0]];
    expect(challengeTitles.length).toBe(3);
    var joinButtons = getAllByText('참여하기');
    expect(joinButtons.length).toBe(3);
  });
  it('displays progress indicators correctly', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(ChallengeScreen, {})),
      getAllByText = _render5.getAllByText;
    var progressTexts = [getAllByText('40% 완료')[0], getAllByText('20% 완료')[0], getAllByText('60% 완료')[0]];
    expect(progressTexts.length).toBe(3);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,