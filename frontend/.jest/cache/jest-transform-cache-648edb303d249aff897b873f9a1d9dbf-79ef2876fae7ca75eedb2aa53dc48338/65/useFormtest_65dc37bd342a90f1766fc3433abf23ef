51931903027d5939669b9fab6a2af190
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useForm = require("../../src/hooks/useForm");
describe('useForm', function () {
  var initialValues = {
    name: '',
    email: '',
    active: false
  };
  var mockSubmit = jest.fn();
  var mockValidate = jest.fn(function (values) {
    var errors = {};
    if (!values.name) {
      errors.name = '이름은 필수입니다';
    }
    if (!values.email) {
      errors.email = '이메일은 필수입니다';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(values.email)) {
      errors.email = '유효한 이메일 형식이 아닙니다';
    }
    return errors;
  });
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('초기값으로 폼 상태를 초기화한다', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook.result;
    expect(result.current.values).toEqual(initialValues);
    expect(result.current.errors).toEqual({});
    expect(result.current.isSubmitting).toBe(false);
  });
  it('handleChange 함수로 폼 값을 변경할 수 있다', function () {
    var _renderHook2 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook2.result;
    (0, _reactHooks.act)(function () {
      result.current.handleChange('name', 'John Doe');
    });
    expect(result.current.values.name).toBe('John Doe');
    expect(result.current.isTouched('name')).toBe(true);
  });
  it('handleTextChange 함수로 텍스트 입력을 처리할 수 있다', function () {
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook3.result;
    var mockEvent = {
      nativeEvent: {
        text: 'test@example.com'
      }
    };
    (0, _reactHooks.act)(function () {
      result.current.handleTextChange('email')(mockEvent);
    });
    expect(result.current.values.email).toBe('test@example.com');
  });
  it('handleToggleChange 함수로 토글 입력을 처리할 수 있다', function () {
    var _renderHook4 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook4.result;
    (0, _reactHooks.act)(function () {
      result.current.handleToggleChange('active')(true);
    });
    expect(result.current.values.active).toBe(true);
  });
  it('setFieldValue 함수로 특정 필드 값을 설정할 수 있다', function () {
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook5.result;
    (0, _reactHooks.act)(function () {
      result.current.setFieldValue('name', 'Jane Doe');
    });
    expect(result.current.values.name).toBe('Jane Doe');
  });
  it('setFieldValues 함수로 여러 필드 값을 한번에 설정할 수 있다', function () {
    var _renderHook6 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook6.result;
    (0, _reactHooks.act)(function () {
      result.current.setFieldValues({
        name: 'Jane Doe',
        email: 'jane@example.com'
      });
    });
    expect(result.current.values.name).toBe('Jane Doe');
    expect(result.current.values.email).toBe('jane@example.com');
    expect(result.current.values.active).toBe(false);
  });
  it('validateForm 함수로 폼 유효성을 검사할 수 있다', function () {
    var _renderHook7 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit,
          validate: mockValidate
        });
      }),
      result = _renderHook7.result;
    (0, _reactHooks.act)(function () {
      result.current.validateForm();
    });
    expect(mockValidate).toHaveBeenCalledWith(initialValues);
    expect(result.current.errors).toEqual({
      name: '이름은 필수입니다',
      email: '이메일은 필수입니다'
    });
  });
  it('handleSubmit 함수는 폼이 유효할 때만 onSubmit 콜백을 호출한다', (0, _asyncToGenerator2.default)(function* () {
    var _renderHook8 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit,
          validate: mockValidate
        });
      }),
      result = _renderHook8.result;
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      yield result.current.handleSubmit();
    }));
    expect(result.current.isTouched('name')).toBe(true);
    expect(result.current.isTouched('email')).toBe(true);
    expect(mockSubmit).not.toHaveBeenCalled();
    (0, _reactHooks.act)(function () {
      result.current.setFieldValues({
        name: 'John Doe',
        email: 'john@example.com'
      });
    });
    yield (0, _reactHooks.act)((0, _asyncToGenerator2.default)(function* () {
      result.current.validateForm();
      yield result.current.handleSubmit();
    }));
    expect(mockSubmit).toHaveBeenCalledWith({
      name: 'John Doe',
      email: 'john@example.com',
      active: false
    });
  }));
  it('resetForm 함수로 폼을 초기 상태로 되돌릴 수 있다', function () {
    var _renderHook9 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook9.result;
    (0, _reactHooks.act)(function () {
      result.current.setFieldValues({
        name: 'John Doe',
        email: 'john@example.com',
        active: true
      });
      result.current.setFieldTouched('name');
      result.current.setFieldTouched('email');
    });
    (0, _reactHooks.act)(function () {
      result.current.resetForm();
    });
    expect(result.current.values).toEqual(initialValues);
    expect(result.current.errors).toEqual({});
    expect(result.current.isTouched('name')).toBe(false);
    expect(result.current.isTouched('email')).toBe(false);
  });
  it('setFieldError와 getFieldError 함수로 오류를 관리할 수 있다', function () {
    var _renderHook10 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook10.result;
    (0, _reactHooks.act)(function () {
      result.current.setFieldError('email', '이메일 형식이 잘못되었습니다');
    });
    expect(result.current.getFieldError('email')).toBe('이메일 형식이 잘못되었습니다');
    expect(result.current.getFieldError('name')).toBe('');
  });
  it('isValid 함수로 폼 전체의 유효성을 확인할 수 있다', function () {
    var _renderHook11 = (0, _reactHooks.renderHook)(function () {
        return (0, _useForm.useForm)({
          initialValues: initialValues,
          onSubmit: mockSubmit
        });
      }),
      result = _renderHook11.result;
    expect(result.current.isValid()).toBe(true);
    (0, _reactHooks.act)(function () {
      result.current.setFieldError('email', '이메일 형식이 잘못되었습니다');
    });
    expect(result.current.isValid()).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,