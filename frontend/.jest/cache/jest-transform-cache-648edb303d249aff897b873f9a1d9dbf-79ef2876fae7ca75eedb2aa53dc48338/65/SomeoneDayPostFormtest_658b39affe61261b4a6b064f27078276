bed6272b4d04cf6f11f2a01d1090c12c
_getJestObj().mock("../../src/services/api/uploadService", function () {
  return {
    uploadImage: jest.fn().mockResolvedValue({
      data: {
        image_url: 'https://example.com/uploads/test.jpg'
      }
    })
  };
});
_getJestObj().mock("../../src/components/SomeoneDayPostForm", function () {
  var originalModule = jest.requireActual("../../src/components/SomeoneDayPostForm");
  originalModule.selectImage = mockSelectImage;
  return originalModule;
});
_getJestObj().mock("../../src/components/TagSearchInput", function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    TextInput = _require.TextInput,
    Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity;
  return function MockTagSearchInput(_ref) {
    var onTagSelect = _ref.onTagSelect,
      _ref$selectedTags = _ref.selectedTags,
      selectedTags = _ref$selectedTags === void 0 ? [] : _ref$selectedTags,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? "태그를 검색하세요" : _ref$placeholder,
      _ref$maxTags = _ref.maxTags,
      maxTags = _ref$maxTags === void 0 ? 5 : _ref$maxTags;
    var simulateTagSelect = function simulateTagSelect() {
      onTagSelect({
        tag_id: 999,
        name: '테스트태그'
      });
    };
    return (0, _jsxRuntime.jsxs)(View, {
      testID: "tag-search-input",
      children: [(0, _jsxRuntime.jsx)(TextInput, {
        testID: "tag-input",
        placeholder: placeholder
      }), (0, _jsxRuntime.jsx)(TouchableOpacity, {
        testID: "simulate-tag-select",
        onPress: simulateTagSelect,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: "\uD0DC\uADF8 \uC120\uD0DD \uC2DC\uBBAC\uB808\uC774\uC158"
        })
      }), selectedTags && selectedTags.length >= maxTags && (0, _jsxRuntime.jsxs)(Text, {
        testID: "max-tags-message",
        children: ["\uCD5C\uB300 ", maxTags, "\uAC1C\uC758 \uD0DC\uADF8\uAE4C\uC9C0 \uC120\uD0DD\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4."]
      })]
    });
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View;
  return function MockLoadingIndicator(_ref2) {
    var size = _ref2.size,
      color = _ref2.color;
    return (0, _jsxRuntime.jsx)(View, {
      testID: "loading-indicator",
      style: {
        width: size === 'small' ? 20 : 36,
        height: size === 'small' ? 20 : 36,
        backgroundColor: color
      }
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _uploadService = _interopRequireDefault(require("../../src/services/api/uploadService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.setTimeout(15000);
var originalModule = jest.requireActual("../../src/components/SomeoneDayPostForm");
var originalSelectImage = originalModule.selectImage;
var mockSelectImage = jest.fn().mockResolvedValue({
  uri: 'file:///mock/image/path.jpg',
  name: 'image.jpg',
  type: 'image/jpeg'
});
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
var SomeoneDayPostForm = require("../../src/components/SomeoneDayPostForm").default;
describe('SomeoneDayPostForm 컴포넌트', function () {
  var mockSubmit = jest.fn().mockResolvedValue(undefined);
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('컴포넌트가 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render.getByText,
      getByPlaceholderText = _render.getByPlaceholderText,
      getByTestId = _render.getByTestId;
    expect(getByText('누군가의 하루 게시하기')).toBeTruthy();
    expect(getByPlaceholderText('제목을 입력하세요 (5-100자)')).toBeTruthy();
    expect(getByPlaceholderText('내용을 입력하세요 (20-2000자)')).toBeTruthy();
    expect(getByTestId('tag-search-input')).toBeTruthy();
    expect(getByText('이미지 추가 (선택사항)')).toBeTruthy();
    expect(getByText('익명으로 게시하기')).toBeTruthy();
    expect(getByText('게시하기')).toBeTruthy();
  });
  it('제목과 내용 입력 시 상태가 업데이트되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render2.getByPlaceholderText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    expect(titleInput.props.value).toBe('테스트 제목');
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다.');
    expect(contentInput.props.value).toBe('테스트 내용입니다. 충분히 긴 내용으로 작성합니다.');
  });
  it('익명 체크박스 토글이 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render3.getByText;
    var anonymousText = getByText('익명으로 게시하기');
    var anonymousContainer = anonymousText.parent;
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      if (anonymousContainer) {
        _reactNative.fireEvent.press(anonymousContainer);
      }
    }));
  }));
  it('이미지 선택 및 제거가 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render4.getByText;
    var addImageButton = getByText('이미지 추가 (선택사항)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(addImageButton);
    }));
    expect(true).toBe(true);
  }));
  it('선택된 이미지 제거가 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render5.getByText;
    var addImageButton = getByText('이미지 추가 (선택사항)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(addImageButton);
    }));
    expect(_reactNative2.Alert.alert).not.toHaveBeenCalledWith('오류', '이미지를 선택하는 중 문제가 발생했습니다.');
  }));
  it('제출 버튼 비활성화 조건이 올바르게 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render6.getByText,
      getByPlaceholderText = _render6.getByPlaceholderText;
    var submitButton = getByText('게시하기');
    expect(submitButton).toBeTruthy();
    expect(submitButton.parent).toBeTruthy();
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    }));
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.changeText(contentInput, '충분히 긴 내용입니다. 테스트를 위한 텍스트입니다. 테스트를 위한 텍스트입니다.');
    }));
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalled();
  }));
  it('제목과 내용 입력 후 제출 버튼이 활성화되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render7.getByPlaceholderText,
      getByText = _render7.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 이 내용은 20자를 넘어야 합니다.');
    var submitButton = getByText('게시하기');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalled();
  }));
  it('초기값으로 폼이 올바르게 렌더링되어야 함', function () {
    var initialTitle = '초기 제목';
    var initialContent = '초기 내용';
    var initialTagIds = [1, 2];
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit,
        initialTitle: initialTitle,
        initialContent: initialContent,
        initialTagIds: initialTagIds
      })),
      getByPlaceholderText = _render8.getByPlaceholderText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    expect(titleInput.props.value).toBe(initialTitle);
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    expect(contentInput.props.value).toBe(initialContent);
  });
  it('태그 선택 및 제거가 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByTestId = _render9.getByTestId;
    var tagSearchInput = getByTestId('tag-search-input');
    expect(tagSearchInput).toBeTruthy();
    var simulateButton = getByTestId('simulate-tag-select');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(simulateButton);
    }));
  }));
  it('제목과 내용 유효성 검사가 작동해야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render10.getByText,
      getByPlaceholderText = _render10.getByPlaceholderText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    _reactNative.fireEvent.changeText(contentInput, '짧은 내용');
    var submitButton = getByText('게시하기');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).not.toHaveBeenCalled();
  }));
  it('폼 제출 시 API가 올바르게 호출되어야 함', (0, _asyncToGenerator2.default)(function* () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render11.getByPlaceholderText,
      getByText = _render11.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 이 내용은 20자를 넘어야 합니다.');
    var submitButton = getByText('게시하기');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalled();
    expect(mockSubmit).toHaveBeenCalledWith(expect.objectContaining({
      title: '테스트 제목',
      content: '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 이 내용은 20자를 넘어야 합니다.',
      tag_ids: expect.any(Array),
      is_anonymous: false
    }));
  }));
  it('이미지 업로드 실패 시 적절한 오류 메시지가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    _uploadService.default.uploadImage.mockRejectedValueOnce(new Error('업로드 실패'));
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByText = _render12.getByText,
      getByPlaceholderText = _render12.getByPlaceholderText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 이 내용은 20자를 넘어야 합니다.');
    var addImageButton = getByText('이미지 추가 (선택사항)');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(addImageButton);
    }));
    yield new Promise(function (resolve) {
      return setTimeout(resolve, 600);
    });
    _reactNative2.Alert.alert.mockClear();
    var submitButton = getByText('게시하기');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    yield new Promise(function (resolve) {
      return setTimeout(resolve, 1000);
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('업로드 경고', '이미지 업로드에 실패했습니다. 이미지 없이 게시물을 등록하시겠습니까?', expect.anything());
  }));
  it('폼 제출 실패 시 오류 메시지가 표시되어야 함', (0, _asyncToGenerator2.default)(function* () {
    mockSubmit.mockRejectedValueOnce(new Error('제출 실패'));
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(SomeoneDayPostForm, {
        onSubmit: mockSubmit
      })),
      getByPlaceholderText = _render13.getByPlaceholderText,
      getByText = _render13.getByText;
    var titleInput = getByPlaceholderText('제목을 입력하세요 (5-100자)');
    _reactNative.fireEvent.changeText(titleInput, '테스트 제목');
    var contentInput = getByPlaceholderText('내용을 입력하세요 (20-2000자)');
    _reactNative.fireEvent.changeText(contentInput, '테스트 내용입니다. 충분히 긴 내용으로 작성합니다. 이 내용은 20자를 넘어야 합니다.');
    _reactNative2.Alert.alert.mockClear();
    var submitButton = getByText('게시하기');
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      _reactNative.fireEvent.press(submitButton);
    }));
    expect(mockSubmit).toHaveBeenCalled();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,