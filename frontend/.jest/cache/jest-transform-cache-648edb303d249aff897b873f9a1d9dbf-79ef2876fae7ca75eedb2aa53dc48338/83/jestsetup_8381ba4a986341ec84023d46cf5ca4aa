628498fd74a0c138467aa211d4f31e02
_getJestObj().mock('react-native', function () {
  return {
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    SectionList: 'SectionList',
    Image: 'Image',
    TextInput: 'TextInput',
    Button: 'Button',
    Switch: 'Switch',
    ActivityIndicator: 'ActivityIndicator',
    KeyboardAvoidingView: 'KeyboardAvoidingView',
    ImageBackground: 'ImageBackground',
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      }),
      absoluteFill: {},
      hairlineWidth: 1
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      }),
      Version: 29
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Animated: {
      View: 'View',
      Text: 'Text',
      Image: 'Image',
      createAnimatedComponent: jest.fn(function (component) {
        return component;
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          }),
          addListener: jest.fn(),
          removeListener: jest.fn()
        };
      })
    },
    Alert: {
      alert: jest.fn()
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      })
    },
    Keyboard: {
      dismiss: jest.fn()
    },
    StatusBar: {
      setBarStyle: jest.fn(),
      setHidden: jest.fn(),
      setBackgroundColor: jest.fn(),
      currentHeight: 44
    },
    TurboModuleRegistry: {
      get: jest.fn(function () {
        return null;
      }),
      getEnforcing: jest.fn(function () {
        return null;
      })
    },
    DevSettings: {
      reload: jest.fn(),
      addMenuItem: jest.fn(),
      setIsDebuggingRemotely: jest.fn()
    },
    NativeModules: {
      DevMenu: {
        show: jest.fn(),
        reload: jest.fn(),
        debugRemotely: jest.fn(),
        setProfilingEnabled: jest.fn(),
        setHotLoadingEnabled: jest.fn()
      },
      DevSettings: {
        reload: jest.fn(),
        setIsDebuggingRemotely: jest.fn()
      },
      StatusBarManager: {
        HEIGHT: 42,
        setStyle: jest.fn(),
        setHidden: jest.fn(),
        getHeight: jest.fn(function (cb) {
          return cb && cb(42);
        })
      },
      PlatformConstants: {
        interfaceIdiom: 'phone',
        osVersion: '10',
        forceTouchAvailable: false,
        reactNativeVersion: {
          major: 0,
          minor: 69,
          patch: 0
        }
      }
    },
    I18nManager: {
      isRTL: false,
      getConstants: function getConstants() {
        return {
          isRTL: false
        };
      }
    },
    ViewStyle: {},
    TextStyle: {}
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: 'SafeAreaView',
    SafeAreaProvider: 'SafeAreaProvider',
    useSafeAreaInsets: jest.fn(function () {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    })
  };
});
_getJestObj().mock("./src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
}, {
  virtual: true
});
_getJestObj().mock("./src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
});
_getJestObj().mock('@testing-library/react-native', function () {
  var rtl = jest.requireActual('@testing-library/react-native');
  return rtl;
});
_getJestObj().mock('@testing-library/jest-native/extend-expect', function () {
  return {};
});
_getJestObj().mock('axios', function () {
  return {
    create: jest.fn(function () {
      return {
        get: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        post: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        put: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        delete: jest.fn(function () {
          return Promise.resolve({
            data: {}
          });
        }),
        defaults: {
          headers: {
            common: {}
          }
        }
      };
    }),
    get: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    post: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    put: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    }),
    delete: jest.fn(function () {
      return Promise.resolve({
        data: {}
      });
    })
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    clear: jest.fn(function () {
      return Promise.resolve();
    }),
    getAllKeys: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiGet: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiSet: jest.fn(function () {
      return Promise.resolve();
    }),
    multiRemove: jest.fn(function () {
      return Promise.resolve();
    }),
    multiMerge: jest.fn(function () {
      return Promise.resolve();
    }),
    mergeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return Object.assign({}, jest.requireActual('@react-navigation/native'), {
    NavigationContainer: 'NavigationContainer',
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {
          postId: 1
        }
      };
    }
  });
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Provider: 'PaperProvider',
    Button: 'Button',
    Card: 'Card',
    Title: 'Title',
    Paragraph: 'Paragraph',
    TextInput: 'TextInput'
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("@testing-library/jest-native/extend-expect");
var _react = _interopRequireDefault(require("react"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.__DEV__ = true;
global.React = _react.default;
jest.setTimeout(120000);
jest.setTimeout(5000);
var originalConsoleError = console.error;
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredErrors = ['Unable to find an element', 'Warning: An update inside a test was not wrapped in act', 'Cannot read properties of undefined', 'ReactCurrentDispatcher', 'ReactCurrentOwner', 'act(', 'inside a test was not wrapped in act', 'DevMenu could not be found', 'Exceeded timeout', 'TurboModuleRegistry'];
  if (ignoredErrors.some(function (error) {
    return typeof errorMessage === 'string' && errorMessage.includes(error);
  })) {
    return;
  }
  originalConsoleError.apply(void 0, arguments);
};
var originalConsoleWarn = console.warn;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found', 'DevSettings', 'NativeModule: AsyncStorage is null'];
  if (ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    return;
  }
  originalConsoleWarn.apply(void 0, arguments);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,