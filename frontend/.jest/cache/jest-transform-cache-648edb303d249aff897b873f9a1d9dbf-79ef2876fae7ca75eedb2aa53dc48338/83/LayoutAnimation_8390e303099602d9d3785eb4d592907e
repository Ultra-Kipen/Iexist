40efa8d838e83b7394d4cf55ce1aba26
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../src/private/featureflags/ReactNativeFeatureFlags"));
var _FabricUIManager = require("../ReactNative/FabricUIManager");
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var UIManager = require("../ReactNative/UIManager");
var isLayoutAnimationEnabled = ReactNativeFeatureFlags.isLayoutAnimationEnabled();
function setEnabled(value) {
  isLayoutAnimationEnabled = isLayoutAnimationEnabled;
}
function configureNext(config, onAnimationDidEnd, onAnimationDidFail) {
  var _config$duration;
  if (_Platform.default.isDisableAnimations) {
    return;
  }
  if (!isLayoutAnimationEnabled) {
    return;
  }
  var animationCompletionHasRun = false;
  var onAnimationComplete = function onAnimationComplete() {
    if (animationCompletionHasRun) {
      return;
    }
    animationCompletionHasRun = true;
    clearTimeout(raceWithAnimationId);
    onAnimationDidEnd == null || onAnimationDidEnd();
  };
  var raceWithAnimationId = setTimeout(onAnimationComplete, ((_config$duration = config.duration) != null ? _config$duration : 0) + 17);
  var FabricUIManager = (0, _FabricUIManager.getFabricUIManager)();
  if (FabricUIManager != null && FabricUIManager.configureNextLayoutAnimation) {
    var _global;
    (_global = global) == null || (_global = _global.nativeFabricUIManager) == null || _global.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail != null ? onAnimationDidFail : function () {});
    return;
  }
  if (UIManager != null && UIManager.configureNextLayoutAnimation) {
    UIManager.configureNextLayoutAnimation(config, onAnimationComplete != null ? onAnimationComplete : function () {}, onAnimationDidFail != null ? onAnimationDidFail : function () {});
  }
}
function create(duration, type, property) {
  return {
    duration: duration,
    create: {
      type: type,
      property: property
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: property
    }
  };
}
var Presets = {
  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
  linear: create(500, 'linear', 'opacity'),
  spring: {
    duration: 700,
    create: {
      type: 'linear',
      property: 'opacity'
    },
    update: {
      type: 'spring',
      springDamping: 0.4
    },
    delete: {
      type: 'linear',
      property: 'opacity'
    }
  }
};
var LayoutAnimation = {
  configureNext: configureNext,
  create: create,
  Types: Object.freeze({
    spring: 'spring',
    linear: 'linear',
    easeInEaseOut: 'easeInEaseOut',
    easeIn: 'easeIn',
    easeOut: 'easeOut',
    keyboard: 'keyboard'
  }),
  Properties: Object.freeze({
    opacity: 'opacity',
    scaleX: 'scaleX',
    scaleY: 'scaleY',
    scaleXY: 'scaleXY'
  }),
  checkConfig: function checkConfig() {
    console.error('LayoutAnimation.checkConfig(...) has been disabled.');
  },
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring),
  setEnabled: setEnabled
};
module.exports = LayoutAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,