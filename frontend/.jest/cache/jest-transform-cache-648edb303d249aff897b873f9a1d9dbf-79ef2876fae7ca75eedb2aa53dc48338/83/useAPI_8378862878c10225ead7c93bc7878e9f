15ba4252b1a21104e1b2e2214f60091a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.useAPI = useAPI;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _client = _interopRequireDefault(require("../services/api/client"));
function cov_pekx7u6ht() {
  var path = "C:\\app_build\\Iexist\\frontend\\src\\hooks\\useAPI.ts";
  var hash = "f9a5942e99eb6e3b65432d12c51f086a7648f85e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\app_build\\Iexist\\frontend\\src\\hooks\\useAPI.ts",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 26,
          column: 4
        }
      },
      "1": {
        start: {
          line: 28,
          column: 18
        },
        end: {
          line: 78,
          column: 28
        }
      },
      "2": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 64
        }
      },
      "3": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 61
        }
      },
      "4": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "5": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 50,
          column: 7
        }
      },
      "6": {
        start: {
          line: 37,
          column: 10
        },
        end: {
          line: 37,
          column: 67
        }
      },
      "7": {
        start: {
          line: 38,
          column: 10
        },
        end: {
          line: 38,
          column: 16
        }
      },
      "8": {
        start: {
          line: 40,
          column: 10
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "9": {
        start: {
          line: 41,
          column: 10
        },
        end: {
          line: 41,
          column: 16
        }
      },
      "10": {
        start: {
          line: 43,
          column: 10
        },
        end: {
          line: 43,
          column: 55
        }
      },
      "11": {
        start: {
          line: 44,
          column: 10
        },
        end: {
          line: 44,
          column: 16
        }
      },
      "12": {
        start: {
          line: 46,
          column: 10
        },
        end: {
          line: 46,
          column: 70
        }
      },
      "13": {
        start: {
          line: 47,
          column: 10
        },
        end: {
          line: 47,
          column: 16
        }
      },
      "14": {
        start: {
          line: 49,
          column: 10
        },
        end: {
          line: 49,
          column: 52
        }
      },
      "15": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 61
        }
      },
      "16": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "17": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 41
        }
      },
      "18": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 62,
          column: 26
        }
      },
      "19": {
        start: {
          line: 64,
          column: 23
        },
        end: {
          line: 66,
          column: 40
        }
      },
      "20": {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "21": {
        start: {
          line: 74,
          column: 6
        },
        end: {
          line: 74,
          column: 35
        }
      },
      "22": {
        start: {
          line: 76,
          column: 6
        },
        end: {
          line: 76,
          column: 21
        }
      },
      "23": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 86,
          column: 8
        }
      },
      "24": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "25": {
        start: {
          line: 88,
          column: 2
        },
        end: {
          line: 92,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "useAPI",
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 22
          }
        },
        loc: {
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 30
          },
          end: {
            line: 28,
            column: 31
          }
        },
        loc: {
          start: {
            line: 28,
            column: 53
          },
          end: {
            line: 78,
            column: 3
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 13
          },
          end: {
            line: 29,
            column: 14
          }
        },
        loc: {
          start: {
            line: 29,
            column: 22
          },
          end: {
            line: 29,
            column: 61
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 80,
            column: 28
          },
          end: {
            line: 80,
            column: 29
          }
        },
        loc: {
          start: {
            line: 80,
            column: 34
          },
          end: {
            line: 86,
            column: 3
          }
        },
        line: 80
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 46
          },
          end: {
            line: 19,
            column: 51
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 6
          },
          end: {
            line: 50,
            column: 7
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 38,
            column: 16
          }
        }, {
          start: {
            line: 39,
            column: 8
          },
          end: {
            line: 41,
            column: 16
          }
        }, {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 16
          }
        }, {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 47,
            column: 16
          }
        }, {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 49,
            column: 52
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 27
          },
          end: {
            line: 52,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 27
          },
          end: {
            line: 52,
            column: 49
          }
        }, {
          start: {
            line: 52,
            column: 53
          },
          end: {
            line: 52,
            column: 61
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 23
          },
          end: {
            line: 66,
            column: 40
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 65,
            column: 10
          },
          end: {
            line: 65,
            column: 15
          }
        }, {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 66,
            column: 40
          }
        }],
        line: 64
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f9a5942e99eb6e3b65432d12c51f086a7648f85e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_pekx7u6ht = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pekx7u6ht();
function useAPI(url) {
  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_pekx7u6ht().b[0][0]++, 'GET');
  var options = arguments.length > 2 ? arguments[2] : undefined;
  cov_pekx7u6ht().f[0]++;
  var _ref = (cov_pekx7u6ht().s[0]++, (0, _react.useState)({
      data: null,
      loading: false,
      error: null
    })),
    _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    state = _ref2[0],
    setState = _ref2[1];
  var execute = (cov_pekx7u6ht().s[1]++, (0, _react.useCallback)(function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* (payload) {
      cov_pekx7u6ht().f[1]++;
      cov_pekx7u6ht().s[2]++;
      setState(function (prev) {
        cov_pekx7u6ht().f[2]++;
        cov_pekx7u6ht().s[3]++;
        return Object.assign({}, prev, {
          loading: true,
          error: null
        });
      });
      cov_pekx7u6ht().s[4]++;
      try {
        var response;
        cov_pekx7u6ht().s[5]++;
        switch (method) {
          case 'GET':
            cov_pekx7u6ht().b[1][0]++;
            cov_pekx7u6ht().s[6]++;
            response = yield _client.default.get(url, {
              params: payload
            });
            cov_pekx7u6ht().s[7]++;
            break;
          case 'POST':
            cov_pekx7u6ht().b[1][1]++;
            cov_pekx7u6ht().s[8]++;
            response = yield _client.default.post(url, payload);
            cov_pekx7u6ht().s[9]++;
            break;
          case 'PUT':
            cov_pekx7u6ht().b[1][2]++;
            cov_pekx7u6ht().s[10]++;
            response = yield _client.default.put(url, payload);
            cov_pekx7u6ht().s[11]++;
            break;
          case 'DELETE':
            cov_pekx7u6ht().b[1][3]++;
            cov_pekx7u6ht().s[12]++;
            response = yield _client.default.delete(url, {
              params: payload
            });
            cov_pekx7u6ht().s[13]++;
            break;
          default:
            cov_pekx7u6ht().b[1][4]++;
            cov_pekx7u6ht().s[14]++;
            throw new Error(`지원되지 않는 메서드: ${method}`);
        }
        var responseData = (cov_pekx7u6ht().s[15]++, (cov_pekx7u6ht().b[2][0]++, response.data) || (cov_pekx7u6ht().b[2][1]++, response));
        cov_pekx7u6ht().s[16]++;
        setState({
          data: responseData,
          loading: false,
          error: null
        });
        cov_pekx7u6ht().s[17]++;
        options == null || options.onSuccess == null || options.onSuccess(responseData);
        cov_pekx7u6ht().s[18]++;
        return responseData;
      } catch (error) {
        var errorObj = (cov_pekx7u6ht().s[19]++, error instanceof Error ? (cov_pekx7u6ht().b[3][0]++, error) : (cov_pekx7u6ht().b[3][1]++, new Error('알 수 없는 오류가 발생했습니다')));
        cov_pekx7u6ht().s[20]++;
        setState({
          data: null,
          loading: false,
          error: errorObj
        });
        cov_pekx7u6ht().s[21]++;
        options == null || options.onError == null || options.onError(errorObj);
        cov_pekx7u6ht().s[22]++;
        throw errorObj;
      }
    });
    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [url, method, options]));
  var reset = (cov_pekx7u6ht().s[23]++, (0, _react.useCallback)(function () {
    cov_pekx7u6ht().f[3]++;
    cov_pekx7u6ht().s[24]++;
    setState({
      data: null,
      loading: false,
      error: null
    });
  }, []));
  cov_pekx7u6ht().s[25]++;
  return Object.assign({}, state, {
    execute: execute,
    reset: reset
  });
}
var _default = exports.default = useAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2NsaWVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJjb3ZfcGVreDd1Nmh0IiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsInVzZUFQSSIsInVybCIsIm1ldGhvZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm9wdGlvbnMiLCJfcmVmIiwidXNlU3RhdGUiLCJkYXRhIiwibG9hZGluZyIsImVycm9yIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0Iiwic3RhdGUiLCJzZXRTdGF0ZSIsImV4ZWN1dGUiLCJ1c2VDYWxsYmFjayIsIl9yZWYzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwicGF5bG9hZCIsInByZXYiLCJPYmplY3QiLCJhc3NpZ24iLCJyZXNwb25zZSIsImNsaWVudCIsImdldCIsInBhcmFtcyIsInBvc3QiLCJwdXQiLCJkZWxldGUiLCJFcnJvciIsInJlc3BvbnNlRGF0YSIsIm9uU3VjY2VzcyIsImVycm9yT2JqIiwib25FcnJvciIsIl94IiwiYXBwbHkiLCJyZXNldCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVzZUFQSS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBob29rcy91c2VBUEkudHNcclxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xpZW50IGZyb20gJy4uL3NlcnZpY2VzL2FwaS9jbGllbnQnO1xyXG5cclxuaW50ZXJmYWNlIFVzZUFQSU9wdGlvbnMge1xyXG4gIG9uU3VjY2Vzcz86IChkYXRhOiBhbnkpID0+IHZvaWQ7XHJcbiAgb25FcnJvcj86IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XHJcbiAgaW1tZWRpYXRlPzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIEFQSVN0YXRlPFQ+IHtcclxuICBkYXRhOiBUIHwgbnVsbDtcclxuICBsb2FkaW5nOiBib29sZWFuO1xyXG4gIGVycm9yOiBFcnJvciB8IG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBUEk8VCA9IGFueSwgUCA9IGFueT4oXHJcbiAgdXJsOiBzdHJpbmcsXHJcbiAgbWV0aG9kOiAnR0VUJyB8ICdQT1NUJyB8ICdQVVQnIHwgJ0RFTEVURScgPSAnR0VUJyxcclxuICBvcHRpb25zPzogVXNlQVBJT3B0aW9uc1xyXG4pIHtcclxuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlPEFQSVN0YXRlPFQ+Pih7XHJcbiAgICBkYXRhOiBudWxsLFxyXG4gICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICBlcnJvcjogbnVsbCxcclxuICB9KTtcclxuICBcclxuICBjb25zdCBleGVjdXRlID0gdXNlQ2FsbGJhY2soYXN5bmMgKHBheWxvYWQ/OiBQKSA9PiB7XHJcbiAgICBzZXRTdGF0ZShwcmV2ID0+ICh7IC4uLnByZXYsIGxvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pKTtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgbGV0IHJlc3BvbnNlO1xyXG4gICAgICBcclxuICAgICAgc3dpdGNoIChtZXRob2QpIHtcclxuICAgICAgICBjYXNlICdHRVQnOlxyXG4gICAgICAgICAgLy8gR0VUIOuplOyEnOuTnOydmCDqsr3smrAg7YyM652866+47YSw66W8IOuqheyLnOyggeycvOuhnCDsoITri6xcclxuICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldDxUPih1cmwsIHsgcGFyYW1zOiBwYXlsb2FkIH0pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnUE9TVCc6XHJcbiAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5wb3N0PFQ+KHVybCwgcGF5bG9hZCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdQVVQnOlxyXG4gICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucHV0PFQ+KHVybCwgcGF5bG9hZCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdERUxFVEUnOlxyXG4gICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZGVsZXRlPFQ+KHVybCwgeyBwYXJhbXM6IHBheWxvYWQgfSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDsp4Dsm5DrkJjsp4Ag7JWK64qUIOuplOyEnOuTnDogJHttZXRob2R9YCk7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9IChyZXNwb25zZSBhcyBhbnkpLmRhdGEgfHwgcmVzcG9uc2U7XHJcbiAgICAgIFxyXG4gICAgICBzZXRTdGF0ZSh7XHJcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIG9wdGlvbnM/Lm9uU3VjY2Vzcz8uKHJlc3BvbnNlRGF0YSk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcmVzcG9uc2VEYXRhO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc3QgZXJyb3JPYmogPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yIFxyXG4gICAgICAgID8gZXJyb3IgXHJcbiAgICAgICAgOiBuZXcgRXJyb3IoJ+yVjCDsiJgg7JeG64qUIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QnKTtcclxuICAgICAgXHJcbiAgICAgIHNldFN0YXRlKHtcclxuICAgICAgICBkYXRhOiBudWxsLFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBlcnJvck9iaixcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBvcHRpb25zPy5vbkVycm9yPy4oZXJyb3JPYmopO1xyXG4gICAgICBcclxuICAgICAgdGhyb3cgZXJyb3JPYmo7XHJcbiAgICB9XHJcbiAgfSwgW3VybCwgbWV0aG9kLCBvcHRpb25zXSk7XHJcbiAgXHJcbiAgY29uc3QgcmVzZXQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBzZXRTdGF0ZSh7XHJcbiAgICAgIGRhdGE6IG51bGwsXHJcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogbnVsbCxcclxuICAgIH0pO1xyXG4gIH0sIFtdKTtcclxuICBcclxuICByZXR1cm4ge1xyXG4gICAgLi4uc3RhdGUsXHJcbiAgICBleGVjdXRlLFxyXG4gICAgcmVzZXQsXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlQVBJOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFBNEMsU0FBQUcsY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO01BQUE7UUFBQUYsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtJQUFBO0lBQUFFLEtBQUE7TUFBQTtRQUFBQyxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBSSxJQUFBO1FBQUFDLElBQUE7VUFBQU4sS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUssR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBTyxTQUFBO01BQUE7UUFBQUQsR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO01BQUE7UUFBQU0sR0FBQTtVQUFBUCxLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBTyxJQUFBO1FBQUFDLFNBQUE7VUFBQVYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7VUFBQUYsS0FBQTtZQUFBQyxJQUFBO1lBQUFDLE1BQUE7VUFBQTtVQUFBQyxHQUFBO1lBQUFGLElBQUE7WUFBQUMsTUFBQTtVQUFBO1FBQUE7UUFBQUQsSUFBQTtNQUFBO0lBQUE7SUFBQVUsQ0FBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtNQUFBO01B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