bc3637592428cf83a0c6de15f64cdb98
'use strict';
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processBoxShadow = processBoxShadow;
var _errors = require("./errors.js");
var isLength = function isLength(value) {
  'worklet';

  return value.endsWith('px') || !isNaN(Number(value));
};
function parseBoxShadowString(rawBoxShadows) {
  'worklet';

  var result = [];
  for (var rawBoxShadow of rawBoxShadows.split(/,(?![^()]*\))/).map(function (bS) {
    return bS.trim();
  }).filter(function (bS) {
    return bS !== '';
  })) {
    var boxShadow = {
      offsetX: 0,
      offsetY: 0
    };
    var offsetX = null;
    var offsetY = null;
    var keywordDetectedAfterLength = false;
    var lengthCount = 0;
    var args = rawBoxShadow.split(/\s+(?![^(]*\))/);
    for (var arg of args) {
      if (isLength(arg)) {
        switch (lengthCount) {
          case 0:
            offsetX = arg;
            lengthCount++;
            break;
          case 1:
            if (keywordDetectedAfterLength) {
              return [];
            }
            offsetY = arg;
            lengthCount++;
            break;
          case 2:
            if (keywordDetectedAfterLength) {
              return [];
            }
            boxShadow.blurRadius = arg;
            lengthCount++;
            break;
          case 3:
            if (keywordDetectedAfterLength) {
              return [];
            }
            boxShadow.spreadDistance = arg;
            lengthCount++;
            break;
          default:
            return [];
        }
      } else if (arg === 'inset') {
        if (boxShadow.inset) {
          return [];
        }
        if (offsetX !== null) {
          keywordDetectedAfterLength = true;
        }
        boxShadow.inset = true;
        continue;
      } else {
        if (boxShadow.color) {
          return [];
        }
        if (offsetX != null) {
          keywordDetectedAfterLength = true;
        }
        boxShadow.color = arg;
        continue;
      }
    }
    if (offsetX === null || offsetY === null) {
      return [];
    }
    boxShadow.offsetX = offsetX;
    boxShadow.offsetY = offsetY;
    result.push(boxShadow);
  }
  return result;
}
function parseLength(length) {
  'worklet';
  var argsWithUnitsRegex = /([+-]?\d*(\.\d+)?)([\w\W]+)?/g;
  var match = argsWithUnitsRegex.exec(length);
  if (!match || !isLength(length)) {
    return null;
  }
  return Number(match[1]);
}
function processBoxShadow(props) {
  'worklet';

  var result = [];
  var rawBoxShadows = props.boxShadow;
  if (rawBoxShadows === null) {
    return result;
  }
  var boxShadowList;
  if (typeof rawBoxShadows === 'string') {
    boxShadowList = parseBoxShadowString(rawBoxShadows.replace(/\n/g, ' '));
  } else if (Array.isArray(rawBoxShadows)) {
    boxShadowList = rawBoxShadows;
  } else {
    throw new _errors.ReanimatedError(`Box shadow value must be an array of shadow objects or a string. Received: ${JSON.stringify(rawBoxShadows)}`);
  }
  for (var rawBoxShadow of boxShadowList) {
    var parsedBoxShadow = {
      offsetX: 0,
      offsetY: 0
    };
    var value = void 0;
    for (var arg in rawBoxShadow) {
      switch (arg) {
        case 'offsetX':
          value = typeof rawBoxShadow.offsetX === 'string' ? parseLength(rawBoxShadow.offsetX) : rawBoxShadow.offsetX;
          if (value === null) {
            return [];
          }
          parsedBoxShadow.offsetX = value;
          break;
        case 'offsetY':
          value = typeof rawBoxShadow.offsetY === 'string' ? parseLength(rawBoxShadow.offsetY) : rawBoxShadow.offsetY;
          if (value === null) {
            return [];
          }
          parsedBoxShadow.offsetY = value;
          break;
        case 'spreadDistance':
          value = typeof rawBoxShadow.spreadDistance === 'string' ? parseLength(rawBoxShadow.spreadDistance) : rawBoxShadow.spreadDistance;
          if (value === null) {
            return [];
          }
          parsedBoxShadow.spreadDistance = value;
          break;
        case 'blurRadius':
          value = typeof rawBoxShadow.blurRadius === 'string' ? parseLength(rawBoxShadow.blurRadius) : rawBoxShadow.blurRadius;
          if (value === null || value < 0) {
            return [];
          }
          parsedBoxShadow.blurRadius = value;
          break;
        case 'color':
          parsedBoxShadow.color = rawBoxShadow.color;
          break;
        case 'inset':
          parsedBoxShadow.inset = rawBoxShadow.inset;
      }
    }
    result.push(parsedBoxShadow);
  }
  props.boxShadow = result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByb2Nlc3NCb3hTaGFkb3ciLCJfZXJyb3JzIiwicmVxdWlyZSIsImlzTGVuZ3RoIiwiZW5kc1dpdGgiLCJpc05hTiIsIk51bWJlciIsInBhcnNlQm94U2hhZG93U3RyaW5nIiwicmF3Qm94U2hhZG93cyIsInJlc3VsdCIsInJhd0JveFNoYWRvdyIsInNwbGl0IiwibWFwIiwiYlMiLCJ0cmltIiwiZmlsdGVyIiwiYm94U2hhZG93Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJrZXl3b3JkRGV0ZWN0ZWRBZnRlckxlbmd0aCIsImxlbmd0aENvdW50IiwiYXJncyIsImFyZyIsImJsdXJSYWRpdXMiLCJzcHJlYWREaXN0YW5jZSIsImluc2V0IiwiY29sb3IiLCJwdXNoIiwicGFyc2VMZW5ndGgiLCJsZW5ndGgiLCJhcmdzV2l0aFVuaXRzUmVnZXgiLCJtYXRjaCIsImV4ZWMiLCJwcm9wcyIsImJveFNoYWRvd0xpc3QiLCJyZXBsYWNlIiwiQXJyYXkiLCJpc0FycmF5IiwiUmVhbmltYXRlZEVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlZEJveFNoYWRvdyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9jZXNzQm94U2hhZG93LnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiQUFHQSxZQUFZO0FBQUFBLE1BQUEsQ0FBQUMsY0FBQSxDQUFBQyxPQUFBO0VBQUFDLEtBQUE7QUFBQTtBQUFBRCxPQUFBLENBQUFFLGdCQUFBLEdBQUFBLGdCQUFBO0FBTVosSUFBQUMsT0FBQSxHQUFBQyxPQUFBO0FBRUEsSUFBTUMsUUFBUSxHQUFJLFNBQVpBLFFBQVFBLENBQUlKLEtBQWEsRUFBSztFQUNsQyxTQUFTOztFQUNULE9BQU9BLEtBQUssQ0FBQ0ssUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsTUFBTSxDQUFDUCxLQUFLLENBQUMsQ0FB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