3493b97399ff75656d90b64dc7330377
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeMutable = void 0;
exports.makeMutableUI = makeMutableUI;
var _errors = require("./errors.js");
var _index = require("./logger/index.js");
var _PlatformChecker = require("./PlatformChecker.js");
var _reactUtils = require("./reactUtils.js");
var _shareableMappingCache = require("./shareableMappingCache.js");
var _shareables = require("./shareables.js");
var _threads = require("./threads.js");
var _valueSetter = require("./valueSetter.js");
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
function shouldWarnAboutAccessDuringRender() {
  return true && (0, _reactUtils.isReactRendering)() && !(0, _reactUtils.isFirstReactRender)();
}
function checkInvalidReadDuringRender() {
  if (shouldWarnAboutAccessDuringRender()) {
    _index.logger.warn("Reading from `value` during component render. Please ensure that you don't access the `value` property nor use `get` method of a shared value while React is rendering a component.", {
      strict: true
    });
  }
}
function checkInvalidWriteDuringRender() {
  if (shouldWarnAboutAccessDuringRender()) {
    _index.logger.warn("Writing to `value` during component render. Please ensure that you don't access the `value` property nor use `set` method of a shared value while React is rendering a component.", {
      strict: true
    });
  }
}
function addCompilerSafeGetAndSet(mutable) {
  'worklet';

  Object.defineProperties(mutable, {
    get: {
      value: function value() {
        return mutable.value;
      },
      configurable: false,
      enumerable: false
    },
    set: {
      value: function value(newValue) {
        if (typeof newValue === 'function' && !newValue.__isAnimationDefinition) {
          mutable.value = newValue(mutable.value);
        } else {
          mutable.value = newValue;
        }
      },
      configurable: false,
      enumerable: false
    }
  });
}
function hideInternalValueProp(mutable) {
  'worklet';

  Object.defineProperty(mutable, '_value', {
    configurable: false,
    enumerable: false
  });
}
function makeMutableUI(initial) {
  'worklet';

  var listeners = new Map();
  var value = initial;
  var mutable = {
    get value() {
      return value;
    },
    set value(newValue) {
      (0, _valueSetter.valueSetter)(mutable, newValue);
    },
    get _value() {
      return value;
    },
    set _value(newValue) {
      value = newValue;
      listeners.forEach(function (listener) {
        listener(newValue);
      });
    },
    modify: function modify(modifier) {
      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      (0, _valueSetter.valueSetter)(mutable, modifier !== undefined ? modifier(value) : value, forceUpdate);
    },
    addListener: function addListener(id, listener) {
      listeners.set(id, listener);
    },
    removeListener: function removeListener(id) {
      listeners.delete(id);
    },
    _animation: null,
    _isReanimatedSharedValue: true
  };
  hideInternalValueProp(mutable);
  addCompilerSafeGetAndSet(mutable);
  return mutable;
}
function makeMutableNative(initial) {
  var handle = (0, _shareables.makeShareableCloneRecursive)({
    __init: function __init() {
      'worklet';

      return makeMutableUI(initial);
    }
  });
  var mutable = {
    get value() {
      checkInvalidReadDuringRender();
      var uiValueGetter = (0, _threads.executeOnUIRuntimeSync)(function (sv) {
        return sv.value;
      });
      return uiValueGetter(mutable);
    },
    set value(newValue) {
      checkInvalidWriteDuringRender();
      (0, _threads.runOnUI)(function () {
        mutable.value = newValue;
      })();
    },
    get _value() {
      throw new _errors.ReanimatedError('Reading from `_value` directly is only possible on the UI runtime. Perhaps you passed an Animated Style to a non-animated component?');
    },
    set _value(_newValue) {
      throw new _errors.ReanimatedError('Setting `_value` directly is only possible on the UI runtime. Perhaps you want to assign to `value` instead?');
    },
    modify: function modify(modifier) {
      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      (0, _threads.runOnUI)(function () {
        mutable.modify(modifier, forceUpdate);
      })();
    },
    addListener: function addListener() {
      throw new _errors.ReanimatedError('Adding listeners is only possible on the UI runtime.');
    },
    removeListener: function removeListener() {
      throw new _errors.ReanimatedError('Removing listeners is only possible on the UI runtime.');
    },
    _isReanimatedSharedValue: true
  };
  hideInternalValueProp(mutable);
  addCompilerSafeGetAndSet(mutable);
  _shareableMappingCache.shareableMappingCache.set(mutable, handle);
  return mutable;
}
function makeMutableWeb(initial) {
  var value = initial;
  var listeners = new Map();
  var mutable = {
    get value() {
      checkInvalidReadDuringRender();
      return value;
    },
    set value(newValue) {
      checkInvalidWriteDuringRender();
      (0, _valueSetter.valueSetter)(mutable, newValue);
    },
    get _value() {
      return value;
    },
    set _value(newValue) {
      value = newValue;
      listeners.forEach(function (listener) {
        listener(newValue);
      });
    },
    modify: function modify(modifier) {
      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      (0, _valueSetter.valueSetter)(mutable, modifier !== undefined ? modifier(mutable.value) : mutable.value, forceUpdate);
    },
    addListener: function addListener(id, listener) {
      listeners.set(id, listener);
    },
    removeListener: function removeListener(id) {
      listeners.delete(id);
    },
    _isReanimatedSharedValue: true
  };
  hideInternalValueProp(mutable);
  addCompilerSafeGetAndSet(mutable);
  return mutable;
}
var makeMutable = exports.makeMutable = SHOULD_BE_USE_WEB ? makeMutableWeb : makeMutableNative;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,