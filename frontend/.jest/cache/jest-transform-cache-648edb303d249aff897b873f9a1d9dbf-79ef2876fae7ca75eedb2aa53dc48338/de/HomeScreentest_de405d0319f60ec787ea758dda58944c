839d40e08299c89e52fd441576df8329
_getJestObj().mock('react-native', function () {
  return {
    Platform: {
      OS: 'ios'
    },
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    Image: 'Image',
    ScrollView: 'ScrollView',
    Alert: {
      alert: jest.fn()
    },
    UIManager: {
      measureInWindow: jest.fn()
    }
  };
});
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    default: {
      interceptors: {
        request: {
          use: jest.fn()
        },
        response: {
          use: jest.fn()
        }
      },
      get: jest.fn(),
      post: jest.fn().mockResolvedValue({
        data: {
          success: true
        }
      }),
      put: jest.fn(),
      delete: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn().mockResolvedValue('mock_token'),
    setItem: jest.fn(),
    removeItem: jest.fn()
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'MockIcon';
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Text: 'PaperText',
    Button: 'PaperButton',
    Chip: 'PaperChip',
    TextInput: 'PaperTextInput',
    Card: {
      Title: 'Card.Title',
      Content: 'Card.Content',
      Actions: 'Card.Actions'
    },
    Avatar: {
      Icon: 'Avatar.Icon'
    },
    IconButton: 'IconButton',
    FAB: 'FAB',
    Divider: 'Divider',
    Surface: 'Surface',
    ActivityIndicator: 'ActivityIndicator',
    Portal: 'Portal',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    useTheme: jest.fn().mockReturnValue({
      colors: {
        primary: '#6200ee',
        background: '#f6f6f6',
        surface: '#ffffff',
        error: '#B00020',
        text: '#000000',
        onSurface: '#000000',
        disabled: 'rgba(0, 0, 0, 0.26)',
        placeholder: 'rgba(0, 0, 0, 0.54)',
        backdrop: 'rgba(0, 0, 0, 0.5)',
        notification: '#f50057'
      }
    })
  };
});
_getJestObj().mock("../../src/contexts/AuthContext", function () {
  return {
    useAuth: jest.fn().mockReturnValue({
      user: {
        id: 1,
        username: 'testuser',
        nickname: 'Test User'
      },
      isAuthenticated: true,
      login: jest.fn(),
      logout: jest.fn()
    })
  };
});
_getJestObj().mock("../../src/contexts/EmotionContext", function () {
  return {
    useEmotion: jest.fn().mockReturnValue({
      emotions: [{
        emotion_id: 1,
        name: 'ÌñâÎ≥µ',
        icon: 'emoticon-happy-outline'
      }, {
        emotion_id: 2,
        name: 'Í∞êÏÇ¨',
        icon: 'hand-heart'
      }],
      selectedEmotions: [],
      selectEmotion: jest.fn(),
      logEmotion: jest.fn()
    })
  };
});
_getJestObj().mock("../../src/screens/HomeScreen", function () {
  var React = require('react');
  var MockHomeScreen = function MockHomeScreen() {
    return React.createElement('View', {
      testID: 'mock-home-screen'
    }, React.createElement('Text', null, 'Î™®ÌÇπÎêú Ìôà Ïä§ÌÅ¨Î¶∞'));
  };
  MockHomeScreen.displayName = 'MockHomeScreen';
  return {
    __esModule: true,
    default: MockHomeScreen,
    emotions: [{
      label: 'ÌñâÎ≥µ',
      icon: 'emoticon-happy-outline',
      color: '#FFD700'
    }, {
      label: 'Í∞êÏÇ¨',
      icon: 'hand-heart',
      color: '#FF69B4'
    }],
    initialPosts: [{
      id: 1,
      anonymousId: 'ÏùµÎ™Ö1',
      content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
      emotion: 'ÌñâÎ≥µ',
      emotionIcon: 'üòä',
      image: '',
      likes: 5,
      comments: [],
      timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
    }],
    handlePostSubmission: jest.fn().mockReturnValue(true),
    handleImageUploadAction: jest.fn(),
    handleLikeAction: jest.fn(),
    handleCommentAction: jest.fn(),
    renderEmotionIcon: jest.fn().mockReturnValue(null)
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _HomeScreen = _interopRequireDefault(require("../../src/screens/HomeScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('Î™®ÌÇπÎêú HomeScreen Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Î†åÎçîÎßÅÎêòÏñ¥Ïïº Ìï®', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_HomeScreen.default, {})),
      getByTestId = _render.getByTestId,
      getByText = _render.getByText;
    expect(getByTestId('mock-home-screen')).toBeTruthy();
    expect(getByText('Î™®ÌÇπÎêú Ìôà Ïä§ÌÅ¨Î¶∞')).toBeTruthy();
  });
});
describe('HomeScreen Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò', function () {
  it('handlePostSubmission Ìï®ÏàòÍ∞Ä Ï°¥Ïû¨Ìï¥Ïïº Ìï®', function () {
    expect(_HomeScreen.default.handlePostSubmission).toBeDefined();
  });
  it('handleLikeAction Ìï®ÏàòÍ∞Ä Ï°¥Ïû¨Ìï¥Ïïº Ìï®', function () {
    expect(_HomeScreen.default.handleLikeAction).toBeDefined();
  });
  it('handleCommentAction Ìï®ÏàòÍ∞Ä Ï°¥Ïû¨Ìï¥Ïïº Ìï®', function () {
    expect(_HomeScreen.default.handleCommentAction).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,