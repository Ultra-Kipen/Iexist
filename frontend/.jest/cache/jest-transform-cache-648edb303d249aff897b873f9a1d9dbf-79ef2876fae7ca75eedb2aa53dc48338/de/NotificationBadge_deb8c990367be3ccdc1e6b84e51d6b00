9b0dda89c2f58acda043f57ae556e0e0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _NotificationContext = require("../contexts/NotificationContext");
var _jsxRuntime = require("react/jsx-runtime");
var NotificationBadge = function NotificationBadge(_ref) {
  var style = _ref.style,
    _ref$showZero = _ref.showZero,
    showZero = _ref$showZero === void 0 ? false : _ref$showZero,
    _ref$maxCount = _ref.maxCount,
    maxCount = _ref$maxCount === void 0 ? 99 : _ref$maxCount;
  var _useNotification = (0, _NotificationContext.useNotification)(),
    unreadCount = _useNotification.unreadCount;
  var displayCount = unreadCount > maxCount ? `${maxCount}+` : unreadCount.toString();
  if (unreadCount === 0 && !showZero) {
    return null;
  }
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: [styles.badge, style, unreadCount > 9 && styles.wideBadge, unreadCount > 99 && styles.extraWideBadge],
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.count,
      children: displayCount
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  badge: {
    minWidth: 18,
    height: 18,
    borderRadius: 9,
    backgroundColor: '#FF3B30',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 4
  },
  wideBadge: {
    minWidth: 22,
    borderRadius: 11
  },
  extraWideBadge: {
    minWidth: 28
  },
  count: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
    textAlign: 'center'
  }
});
var _default = exports.default = NotificationBadge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ob3RpZmljYXRpb25Db250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJOb3RpZmljYXRpb25CYWRnZSIsIl9yZWYiLCJzdHlsZSIsIl9yZWYkc2hvd1plcm8iLCJzaG93WmVybyIsIl9yZWYkbWF4Q291bnQiLCJtYXhDb3VudCIsIl91c2VOb3RpZmljYXRpb24iLCJ1c2VOb3RpZmljYXRpb24iLCJ1bnJlYWRDb3VudCIsImRpc3BsYXlDb3VudCIsInRvU3RyaW5nIiwianN4IiwiVmlldyIsInN0eWxlcyIsImJhZGdlIiwid2lkZUJhZGdlIiwiZXh0cmFXaWRlQmFkZ2UiLCJjaGlsZHJlbiIsIlRleHQiLCJjb3VudCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJtaW5XaWR0aCIsImhlaWdodCIsImJvcmRlclJhZGl1cyIsImJhY2tncm91bmRDb2xvciIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsInBhZGRpbmdIb3Jpem9udGFsIiwiY29sb3IiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0ZXh0QWxpZ24iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiTm90aWZpY2F0aW9uQmFkZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFZpZXcsIFRleHQsIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgeyB1c2VOb3RpZmljYXRpb24gfSBmcm9tICcuLi9jb250ZXh0cy9Ob3RpZmljYXRpb25Db250ZXh0JztcclxuXHJcbmludGVyZmFjZSBOb3RpZmljYXRpb25CYWRnZVByb3BzIHtcclxuICBzdHlsZT86IG9iamVjdDtcclxuICBzaG93WmVybz86IGJvb2xlYW47XHJcbiAgbWF4Q291bnQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmNvbnN0IE5vdGlmaWNhdGlvbkJhZGdlOiBSZWFjdC5GQzxOb3RpZmljYXRpb25CYWRnZVByb3BzPiA9ICh7IFxyXG4gIHN0eWxlLFxyXG4gIHNob3daZXJvID0gZmFsc2UsXHJcbiAgbWF4Q291bnQgPSA5OVxyXG59KSA9PiB7XHJcbiAgY29uc3QgeyB1bnJlYWRDb3VudCB9ID0gdXNlTm90aWZpY2F0aW9uKCk7XHJcbiAgXHJcbiAgLy8g7ZGc7Iuc7ZWgIOy5tOyatO2KuCDqs4TsgrAgKG1heENvdW50IOy0iOqzvCDsi5wgXCIrXCIpXHJcbiAgY29uc3QgZGlzcGxheUNvdW50ID0gdW5yZWFkQ291bnQgPiBtYXhDb3VudCA/IGAke21heENvdW50fStgIDogdW5yZWFkQ291bnQudG9TdHJpbmcoKTtcclxuICBcclxuICAvLyDsubTsmrTtirjqsIAgMOydtOqzoCBzaG93WmVyb+qwgCBmYWxzZeydtOuptCDroIzrjZTrp4HtlZjsp4Ag7JWK7J2MXHJcbiAgaWYgKHVucmVhZENvdW50ID09PSAwICYmICFzaG93WmVybykge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiAoXHJcbiAgICA8VmlldyBcclxuICAgICAgc3R5bGU9e1tcclxuICAgICAgICBzdHlsZXMuYmFkZ2UsXHJcbiAgICAgICAgc3R5bGUsXHJcbiAgICAgICAgdW5yZWFkQ291bnQgPiA5ICYmIHN0eWxlcy53aWRlQmFkZ2UsXHJcbiAgICAgICAgdW5yZWFkQ291bnQgPiA5OSAmJiBzdHlsZXMuZXh0cmFXaWRlQmFkZ2VcclxuICAgICAgXX1cclxuICAgID5cclxuICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5jb3VudH0+e2Rpc3BsYXlDb3VudH08L1RleHQ+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcclxuICBiYWRnZToge1xyXG4gICAgbWluV2lkdGg6IDE4LFxyXG4gICAgaGVpZ2h0OiAxOCxcclxuICAgIGJvcmRlclJhZGl1czogOSxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyNGRjNCMzAnLFxyXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogNFxyXG4gIH0sXHJcbiAgd2lkZUJhZGdlOiB7XHJcbiAgICBtaW5XaWR0aDogMjIsXHJcbiAgICBib3JkZXJSYWRpdXM6IDExXHJcbiAgfSxcclxuICBleHRyYVdpZGVCYWRnZToge1xyXG4gICAgbWluV2lkdGg6IDI4XHJcbiAgfSxcclxuICBjb3VudDoge1xyXG4gICAgY29sb3I6ICd3aGl0ZScsXHJcbiAgICBmb250U2l6ZTogMTIsXHJcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXHJcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInXHJcbiAgfVxyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWNhdGlvbkJhZGdlOyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxvQkFBQSxHQUFBRixPQUFBO0FBQWtFLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQVFsRSxJQUFNSSxpQkFBbUQsR0FBRyxTQUF0REEsaUJBQW1EQSxDQUFBQyxJQUFBLEVBSW5EO0VBQUEsSUFISkMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7SUFBQUMsYUFBQSxHQUFBRixJQUFBLENBQ0xHLFFBQVE7SUFBUkEsUUFBUSxHQUFBRCxhQUFBLGNBQUcsS0FBSyxHQUFBQSxhQUFBO0lBQUFFLGFBQUEsR0FBQUosSUFBQSxDQUNoQkssUUFBUTtJQUFSQSxRQUFRLEdBQUFELGFBQUEsY0FBRyxFQUFFLEdBQUFBLGFBQUE7RUFFYixJQUFBRSxnQkFBQSxHQUF3QixJQUFBQyxvQ0FBZSxFQUFDLENBQUM7SUFBakNDLFdBQVcsR0FBQUYsZ0JBQUEsQ0FBWEUsV0FBVztFQUduQixJQUFNQyxZQUFZLEdBQUdELFdBQVcsR0FBR0gsUUFBUSxHQUFHLEdBQUdBLFFBQVEsR0FBRyxHQUFHRyxXQUFXLENBQUNFLFFBQVEsQ0FBQyxDQUFDO0VBR3JGLElBQUlGLFdBQVcsS0FBSyxDQUFDLElBQUksQ0FBQ0wsUUFBUSxFQUFFO0lBQ2xDLE9BQU8sSUFBSTtFQUNiO0VBRUEsT0FDRSxJQUFBTCxXQUFBLENBQUFhLEdBQUEsRUFBQ2YsWUFBQSxDQUFBZ0IsSUFBSTtJQUNIWCxLQUFLLEVBQUUsQ0FDTFksTUFBTSxDQUFDQyxLQUFLLEVBQ1piLEtBQUssRUFDTE8sV0FBVyxHQUFHLENBQUMsSUFBSUssTUFBTSxDQUFDRSxTQUFTLEVBQ25DUCxXQUFXLEdBQUcsRUFBRSxJQUFJSyxNQUFNLENBQUNHLGNBQWMsQ0FDekM7SUFBQUMsUUFBQSxFQUVGLElBQUFuQixXQUFBLENBQUFhLEdBQUEsRUFBQ2YsWUFBQSxDQUFBc0IsSUFBSTtNQUFDakIsS0FBSyxFQUFFWSxNQUFNLENBQUNNLEtBQU07TUFBQUYsUUFBQSxFQUFFUjtJQUFZLENBQU87RUFBQyxDQUM1QyxDQUFDO0FBRVgsQ0FBQztBQUVELElBQU1JLE1BQU0sR0FBR08sdUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBQy9CUCxLQUFLLEVBQUU7SUFDTFEsUUFBUSxFQUFFLEVBQUU7SUFDWkMsTUFBTSxFQUFFLEVBQUU7SUFDVkMsWUFBWSxFQUFFLENBQUM7SUFDZkMsZUFBZSxFQUFFLFNBQVM7SUFDMUJDLGNBQWMsRUFBRSxRQUFRO0lBQ3hCQyxVQUFVLEVBQUUsUUFBUTtJQUNwQkMsaUJBQWlCLEVBQUU7RUFDckIsQ0FBQztFQUNEYixTQUFTLEVBQUU7SUFDVE8sUUFBUSxFQUFFLEVBQUU7SUFDWkUsWUFBWSxFQUFFO0VBQ2hCLENBQUM7RUFDRFIsY0FBYyxFQUFFO0lBQ2RNLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDREgsS0FBSyxFQUFFO0lBQ0xVLEtBQUssRUFBRSxPQUFPO0lBQ2RDLFFBQVEsRUFBRSxFQUFFO0lBQ1pDLFVBQVUsRUFBRSxNQUFNO0lBQ2xCQyxTQUFTLEVBQUU7RUFDYjtBQUNGLENBQUMsQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRVlwQyxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=