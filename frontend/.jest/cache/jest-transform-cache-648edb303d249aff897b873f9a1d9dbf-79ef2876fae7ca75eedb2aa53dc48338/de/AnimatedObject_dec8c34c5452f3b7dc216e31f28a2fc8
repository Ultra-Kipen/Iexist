8579eebb51cf252d370d6ab8aa565e9b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.isPlainObject = isPlainObject;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _AnimatedNode = _interopRequireDefault(require("./AnimatedNode"));
var _AnimatedWithChildren2 = _interopRequireDefault(require("./AnimatedWithChildren"));
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _superPropGet(t, o, e, r) { var p = (0, _get2.default)((0, _getPrototypeOf2.default)(1 & r ? t.prototype : t), o, e); return 2 & r && "function" == typeof p ? function (t) { return p.apply(e, t); } : p; }
var MAX_DEPTH = 5;
function isPlainObject(value) {
  return value !== null && typeof value === 'object' && Object.getPrototypeOf(value).isPrototypeOf(Object) && !React.isValidElement(value);
}
function flatAnimatedNodes(value) {
  var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (depth >= MAX_DEPTH) {
    return nodes;
  }
  if (value instanceof _AnimatedNode.default) {
    nodes.push(value);
  } else if (Array.isArray(value)) {
    for (var ii = 0, length = value.length; ii < length; ii++) {
      var element = value[ii];
      flatAnimatedNodes(element, nodes, depth + 1);
    }
  } else if (isPlainObject(value)) {
    var keys = Object.keys(value);
    for (var _ii = 0, _length = keys.length; _ii < _length; _ii++) {
      var key = keys[_ii];
      flatAnimatedNodes(value[key], nodes, depth + 1);
    }
  }
  return nodes;
}
function mapAnimatedNodes(value, fn) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (depth >= MAX_DEPTH) {
    return value;
  }
  if (value instanceof _AnimatedNode.default) {
    return fn(value);
  } else if (Array.isArray(value)) {
    return value.map(function (element) {
      return mapAnimatedNodes(element, fn, depth + 1);
    });
  } else if (isPlainObject(value)) {
    var result = {};
    var keys = Object.keys(value);
    for (var ii = 0, length = keys.length; ii < length; ii++) {
      var key = keys[ii];
      result[key] = mapAnimatedNodes(value[key], fn, depth + 1);
    }
    return result;
  } else {
    return value;
  }
}
var _nodes = (0, _classPrivateFieldLooseKey2.default)("nodes");
var AnimatedObject = exports.default = function (_AnimatedWithChildren) {
  function AnimatedObject(nodes, value, config) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedObject);
    _this = _callSuper(this, AnimatedObject, [config]);
    Object.defineProperty(_this, _nodes, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(_this, _nodes)[_nodes] = nodes;
    _this._value = value;
    return _this;
  }
  (0, _inherits2.default)(AnimatedObject, _AnimatedWithChildren);
  return (0, _createClass2.default)(AnimatedObject, [{
    key: "__getValue",
    value: function __getValue() {
      return mapAnimatedNodes(this._value, function (node) {
        return node.__getValue();
      });
    }
  }, {
    key: "__getValueWithStaticObject",
    value: function __getValueWithStaticObject(staticObject) {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      var index = 0;
      return mapAnimatedNodes(staticObject, function () {
        return nodes[index++].__getValue();
      });
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return mapAnimatedNodes(this._value, function (node) {
        return node.__getAnimatedValue();
      });
    }
  }, {
    key: "__attach",
    value: function __attach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__addChild(this);
      }
      _superPropGet(AnimatedObject, "__attach", this, 3)([]);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__removeChild(this);
      }
      _superPropGet(AnimatedObject, "__detach", this, 3)([]);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      var nodes = (0, _classPrivateFieldLooseBase2.default)(this, _nodes)[_nodes];
      for (var ii = 0, length = nodes.length; ii < length; ii++) {
        var node = nodes[ii];
        node.__makeNative(platformConfig);
      }
      _superPropGet(AnimatedObject, "__makeNative", this, 3)([platformConfig]);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'object',
        value: mapAnimatedNodes(this._value, function (node) {
          return {
            nodeTag: node.__getNativeTag()
          };
        }),
        debugID: this.__getDebugID()
      };
    }
  }], [{
    key: "from",
    value: function from(value) {
      var nodes = flatAnimatedNodes(value);
      if (nodes.length === 0) {
        return null;
      }
      return new AnimatedObject(nodes, value);
    }
  }]);
}(_AnimatedWithChildren2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,