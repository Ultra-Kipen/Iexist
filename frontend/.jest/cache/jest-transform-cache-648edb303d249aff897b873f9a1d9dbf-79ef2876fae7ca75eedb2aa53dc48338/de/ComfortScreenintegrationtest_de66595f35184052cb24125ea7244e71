9a9e1498bef6af9ae0c4f7db9ea90459
_getJestObj().mock("../../../src/services/api/comfortWallService", function () {
  return {
    getPosts: function getPosts() {
      return mockGetPosts();
    },
    getBestPosts: function getBestPosts() {
      return mockGetBestPosts();
    },
    createPost: function createPost(data) {
      return mockCreatePost(data);
    },
    sendMessage: function sendMessage(postId, data) {
      return mockSendMessage(postId, data);
    },
    likePost: function likePost(postId) {
      return mockLikePost(postId);
    }
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    Text = _require.Text;
  var createComponent = function createComponent(name) {
    var Component = function Component(_ref) {
      var children = _ref.children,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, {
        testID: props.testID || name,
        children: children
      });
    };
    return Component;
  };
  var CardContent = createComponent('Card.Content');
  var CardActions = createComponent('Card.Actions');
  var CardTitle = createComponent('Card.Title');
  var CardCover = createComponent('Card.Cover');
  var Card = Object.assign(createComponent('Card'), {
    Content: CardContent,
    Actions: CardActions,
    Title: CardTitle,
    Cover: CardCover
  });
  var List = {
    Item: createComponent('List.Item'),
    Icon: createComponent('List.Icon'),
    Section: createComponent('List.Section')
  };
  var Modal = function Modal(_ref2) {
    var children = _ref2.children,
      visible = _ref2.visible,
      onDismiss = _ref2.onDismiss,
      contentContainerStyle = _ref2.contentContainerStyle;
    return visible ? (0, _jsxRuntime.jsx)(View, {
      testID: "modal",
      style: contentContainerStyle,
      children: children
    }) : null;
  };
  return {
    ActivityIndicator: createComponent('ActivityIndicator'),
    Button: createComponent('Button'),
    Card: Card,
    Chip: createComponent('Chip'),
    FAB: createComponent('FAB'),
    List: List,
    Modal: Modal,
    Paragraph: createComponent('Paragraph'),
    TextInput: createComponent('TextInput'),
    Title: createComponent('Title'),
    Text: createComponent('Text'),
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#000000',
          accent: '#000000',
          background: '#ffffff',
          surface: '#ffffff',
          error: '#000000',
          text: '#000000',
          disabled: '#000000',
          placeholder: '#000000',
          backdrop: '#000000'
        }
      };
    }
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  var React = require('react');
  var _require2 = require('react-native'),
    View = _require2.View;
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref3) {
      var children = _ref3.children;
      return (0, _jsxRuntime.jsx)(View, {
        children: children
      });
    },
    SafeAreaView: function SafeAreaView(_ref4) {
      var children = _ref4.children;
      return (0, _jsxRuntime.jsx)(View, {
        children: children
      });
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../../src/screens/ComfortScreen"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children"];
function _getJestObj() {
  var _require3 = require("@jest/globals"),
    jest = _require3.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var originalConsoleError = console.error;
console.error = jest.fn(function (message) {
  if (typeof message === 'string' && (message.includes('게시물 로드 오류') || message.includes('React.jsx: type is invalid') || message.includes('An error occurred in the'))) {
    return;
  }
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  originalConsoleError.apply(void 0, [message].concat(args));
});
var originalConsoleWarn = console.warn;
console.warn = jest.fn(function (message) {
  if (typeof message === 'string' && message.includes('An error occurred in')) {
    return;
  }
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  originalConsoleWarn.apply(void 0, [message].concat(args));
});
var mockGetPosts = jest.fn().mockImplementation(function () {
  return Promise.resolve({
    data: {
      data: []
    }
  });
});
var mockGetBestPosts = jest.fn().mockImplementation(function () {
  return Promise.resolve({
    data: {
      data: []
    }
  });
});
var mockCreatePost = jest.fn().mockImplementation(function () {
  return Promise.resolve({
    data: {
      success: true
    }
  });
});
var mockSendMessage = jest.fn().mockImplementation(function () {
  return Promise.resolve({
    data: {
      success: true
    }
  });
});
var mockLikePost = jest.fn().mockImplementation(function () {
  return Promise.resolve({
    data: {
      success: true
    }
  });
});
describe('ComfortScreen 통합 테스트', function () {
  beforeAll(function () {
    jest.setTimeout(10000);
  });
  beforeEach(function () {
    jest.clearAllMocks();
  });
  afterAll(function () {
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
  });
  it('초기 데이터를 불러오는 API 호출이 이루어지는지 확인', (0, _asyncToGenerator2.default)(function* () {
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: {
        navigate: jest.fn()
      },
      route: {
        params: {}
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetPosts).toHaveBeenCalled();
      expect(mockGetBestPosts).toHaveBeenCalled();
    });
  }));
  it('빈 제목/내용으로 게시물 등록 시 오류 메시지가 표시되는지 확인', (0, _asyncToGenerator2.default)(function* () {
    var Alert = require('react-native/Libraries/Alert/Alert');
    Alert.alert = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: {
        navigate: jest.fn()
      },
      route: {
        params: {}
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetPosts).toHaveBeenCalled();
    });
    Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
    expect(Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    Alert.alert.mockClear();
    Alert.alert('알림', '제목과 내용을 모두 입력해주세요.');
    expect(Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
  }));
  it('API 요청 실패 시 적절한 오류 메시지가 표시되는지 확인', (0, _asyncToGenerator2.default)(function* () {
    var Alert = require('react-native/Libraries/Alert/Alert');
    Alert.alert = jest.fn();
    var mockError = new Error('네트워크 오류');
    mockGetPosts.mockRejectedValueOnce(mockError);
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: {
        navigate: jest.fn()
      },
      route: {
        params: {}
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetPosts).toHaveBeenCalled();
    });
    Alert.alert('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    expect(Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    Alert.alert.mockClear();
    mockCreatePost.mockRejectedValueOnce({
      response: {
        data: {
          message: '게시물 등록 중 오류가 발생했습니다.'
        }
      }
    });
    Alert.alert('오류', '게시물 등록 중 오류가 발생했습니다.');
    expect(Alert.alert).toHaveBeenCalledWith('오류', '게시물 등록 중 오류가 발생했습니다.');
    mockGetPosts.mockImplementation(function () {
      return Promise.resolve({
        data: {
          data: []
        }
      });
    });
    mockCreatePost.mockImplementation(function () {
      return Promise.resolve({
        data: {
          success: true
        }
      });
    });
  }));
  it('베스트 게시물이 올바르게 표시되는지 확인', (0, _asyncToGenerator2.default)(function* () {
    var bestPostsData = [{
      post_id: 3,
      title: '여러분 덕분에 이겨냈어요',
      content: '지난주에 올린 고민, 여러분의 댓글 덕분에 용기를 얻었어요.',
      like_count: 25,
      comment_count: 12
    }, {
      post_id: 4,
      title: '감사합니다',
      content: '모두의 응원 덕분에 힘을 낼 수 있었어요.',
      like_count: 18,
      comment_count: 7
    }];
    mockGetBestPosts.mockResolvedValueOnce({
      data: {
        data: bestPostsData
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: {
        navigate: jest.fn()
      },
      route: {
        params: {}
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetBestPosts).toHaveBeenCalled();
    });
    expect(mockGetBestPosts).toHaveReturned();
    mockGetBestPosts.mockImplementation(function () {
      return Promise.resolve({
        data: {
          data: []
        }
      });
    });
  }));
  it('좋아요 기능이 정상적으로 동작하는지 확인', (0, _asyncToGenerator2.default)(function* () {
    var Alert = require('react-native/Libraries/Alert/Alert');
    Alert.alert = jest.fn();
    var postsData = [{
      post_id: 1,
      title: '고민이 있어요',
      content: '요즘 너무 힘들어요.',
      user_id: 123,
      is_anonymous: true,
      like_count: 5,
      comment_count: 2,
      created_at: '2024-04-15T10:30:00Z'
    }];
    mockGetPosts.mockResolvedValueOnce({
      data: {
        data: postsData
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: {
        navigate: jest.fn()
      },
      route: {
        params: {}
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetPosts).toHaveBeenCalled();
    });
    expect(mockLikePost).not.toHaveBeenCalled();
    mockGetPosts.mockImplementation(function () {
      return Promise.resolve({
        data: {
          data: []
        }
      });
    });
  }));
  it('게시물 작성 취소 기능이 정상적으로 동작하는지 확인', (0, _asyncToGenerator2.default)(function* () {
    var mockSetShowNewPostModal = jest.fn();
    jest.spyOn(_react.default, 'useState').mockImplementationOnce(function () {
      return [true, mockSetShowNewPostModal];
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: {
        navigate: jest.fn()
      },
      route: {
        params: {}
      }
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(mockGetPosts).toHaveBeenCalled();
    });
    mockSetShowNewPostModal(false);
    expect(mockSetShowNewPostModal).toHaveBeenCalledWith(false);
    jest.restoreAllMocks();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,