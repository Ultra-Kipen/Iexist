b17bc84d028c9ac71d550041b1e47898
_getJestObj().mock("../../assets/images/default_avatar.png", function () {
  return 'default_avatar';
});
_getJestObj().mock("../../assets/images/anonymous_avatar.png", function () {
  return 'anonymous_avatar';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ComfortWallPost = _interopRequireDefault(require("../../src/components/ComfortWallPost"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('ComfortWallPost', function () {
  var mockPost = {
    post_id: 1,
    title: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º',
    content: 'Ïù¥Í≤ÉÏùÄ ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º ÎÇ¥Ïö©ÏûÖÎãàÎã§.',
    created_at: '2025-04-20T12:34:56.000Z',
    like_count: 10,
    comment_count: 5,
    is_anonymous: false,
    user: {
      nickname: 'ÌÖåÏä§ÌÑ∞',
      profile_image_url: 'https://example.com/profile.jpg'
    },
    comments: [{
      comment_id: 1,
      user_id: 2,
      content: 'Ï≤´ Î≤àÏß∏ ÎåìÍ∏ÄÏûÖÎãàÎã§.',
      is_anonymous: false,
      created_at: '2025-04-20T13:00:00.000Z',
      user: {
        nickname: 'ÎåìÍ∏ÄÏûëÏÑ±Ïûê'
      }
    }, {
      comment_id: 2,
      user_id: 3,
      content: 'Îëê Î≤àÏß∏ ÎåìÍ∏ÄÏûÖÎãàÎã§.',
      is_anonymous: true,
      created_at: '2025-04-20T13:10:00.000Z'
    }]
  };
  var mockHandlers = {
    onLikePress: jest.fn(),
    onCommentPress: jest.fn(),
    onPostPress: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders post details correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers))),
      getByText = _render.getByText;
    expect(getByText('ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º')).toBeTruthy();
    expect(getByText('Ïù¥Í≤ÉÏùÄ ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º ÎÇ¥Ïö©ÏûÖÎãàÎã§.')).toBeTruthy();
    expect(getByText('ÌÖåÏä§ÌÑ∞')).toBeTruthy();
    expect(getByText(/‚ô• Ï¢ãÏïÑÏöî 10/)).toBeTruthy();
    expect(getByText(/üí¨ ÎåìÍ∏Ä 5/)).toBeTruthy();
  });
  it('displays formatted date correctly', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers))),
      getByText = _render2.getByText;
    expect(getByText(/2025ÎÖÑ 04Ïõî 20Ïùº/)).toBeTruthy();
  });
  it('shows anonymous user when post is anonymous', function () {
    var anonymousPost = Object.assign({}, mockPost, {
      is_anonymous: true
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: anonymousPost
      }, mockHandlers))),
      getByText = _render3.getByText;
    expect(getByText('ÏùµÎ™Ö')).toBeTruthy();
  });
  it('truncates long content and shows "Îçî Î≥¥Í∏∞" button', function () {
    var longContentPost = Object.assign({}, mockPost, {
      content: 'A'.repeat(200)
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: longContentPost
      }, mockHandlers))),
      getByText = _render4.getByText;
    expect(getByText('Îçî Î≥¥Í∏∞')).toBeTruthy();
    _reactNative.fireEvent.press(getByText('Îçî Î≥¥Í∏∞'));
    expect(getByText('Ï†ëÍ∏∞')).toBeTruthy();
  });
  it('displays image when image_url is provided', function () {
    var postWithImage = Object.assign({}, mockPost, {
      image_url: 'https://example.com/image.jpg'
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: postWithImage
      }, mockHandlers))),
      getByTestId = _render5.getByTestId;
    var postImage = getByTestId('post-image');
    expect(postImage.props.source).toEqual({
      uri: 'https://example.com/image.jpg'
    });
  });
  it('calls onLikePress when like button is pressed', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers))),
      getByText = _render6.getByText;
    _reactNative.fireEvent.press(getByText(/‚ô• Ï¢ãÏïÑÏöî 10/));
    expect(mockHandlers.onLikePress).toHaveBeenCalledWith(mockPost.post_id);
    expect(getByText(/‚ô• Ï¢ãÏïÑÏöî 11/)).toBeTruthy();
  });
  it('calls onCommentPress when comment button is pressed', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers))),
      getByText = _render7.getByText;
    _reactNative.fireEvent.press(getByText(/üí¨ ÎåìÍ∏Ä 5/));
    expect(mockHandlers.onCommentPress).toHaveBeenCalledWith(mockPost.post_id);
  });
  it('calls onPostPress when post title is pressed', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers))),
      getByText = _render8.getByText;
    _reactNative.fireEvent.press(getByText('ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º'));
    expect(mockHandlers.onPostPress).toHaveBeenCalledWith(mockPost.post_id);
  });
  it('shows comment previews', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers))),
      getByText = _render9.getByText;
    expect(getByText('ÎåìÍ∏ÄÏûëÏÑ±Ïûê:')).toBeTruthy();
    expect(getByText('Ï≤´ Î≤àÏß∏ ÎåìÍ∏ÄÏûÖÎãàÎã§.')).toBeTruthy();
    expect(getByText('ÏùµÎ™Ö:')).toBeTruthy();
    expect(getByText('Îëê Î≤àÏß∏ ÎåìÍ∏ÄÏûÖÎãàÎã§.')).toBeTruthy();
  });
  it('handles pre-liked state correctly', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortWallPost.default, Object.assign({
        post: mockPost
      }, mockHandlers, {
        isLiked: true
      }))),
      getByText = _render10.getByText;
    var likeButton = getByText(/‚ô• Ï¢ãÏïÑÏöî 10/);
    expect(likeButton).toBeTruthy();
    _reactNative.fireEvent.press(likeButton);
    expect(mockHandlers.onLikePress).toHaveBeenCalledWith(mockPost.post_id);
    expect(getByText(/‚ô• Ï¢ãÏïÑÏöî 9/)).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,