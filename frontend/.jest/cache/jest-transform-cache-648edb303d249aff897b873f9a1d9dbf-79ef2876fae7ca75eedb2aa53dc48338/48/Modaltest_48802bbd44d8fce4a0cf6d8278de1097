3a5dd57ded99b616fea3db3377228213
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _Modal = _interopRequireDefault(require("../../src/components/Modal"));
var _jsxRuntime = require("react/jsx-runtime");
var TestContent = function TestContent() {
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    testID: "modal-content",
    children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: "Test Content"
    })
  });
};
describe('Modal Component', function () {
  var mockOnClose = jest.fn();
  beforeEach(function () {
    mockOnClose.mockClear();
  });
  it('renders nothing when not visible', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: false,
        onClose: mockOnClose,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      queryByText = _render.queryByText;
    expect(queryByText('Test Content')).toBeNull();
  });
  it('renders content when visible', function () {
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByText = _render2.getByText;
    expect(getByText('Test Content')).toBeTruthy();
  });
  it('displays title when provided', function () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        title: "Test Modal",
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByText = _render3.getByText;
    expect(getByText('Test Modal')).toBeTruthy();
  });
  it('calls onClose when backdrop is pressed', function () {
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        closeOnBackdropPress: true,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByTestId = _render4.getByTestId;
    var modalBackdrop = getByTestId('modal-backdrop');
    _reactNative2.fireEvent.press(modalBackdrop);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('does not call onClose when backdrop is pressed and closeOnBackdropPress is false', function () {
    var _render5 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        closeOnBackdropPress: false,
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByTestId = _render5.getByTestId;
    var modalBackdrop = getByTestId('modal-backdrop');
    _reactNative2.fireEvent.press(modalBackdrop);
    expect(mockOnClose).not.toHaveBeenCalled();
  });
  it('calls onClose when close button is pressed', function () {
    var _render6 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        title: "Test Modal",
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByTestId = _render6.getByTestId;
    var closeButton = getByTestId('modal-close-button');
    _reactNative2.fireEvent.press(closeButton);
    expect(mockOnClose).toHaveBeenCalledTimes(1);
  });
  it('renders footer when provided', function () {
    var Footer = function Footer() {
      return (0, _jsxRuntime.jsx)(_reactNative.Text, {
        children: "Footer Content"
      });
    };
    var _render7 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Modal.default, {
        isVisible: true,
        onClose: mockOnClose,
        footer: (0, _jsxRuntime.jsx)(Footer, {}),
        children: (0, _jsxRuntime.jsx)(TestContent, {})
      })),
      getByText = _render7.getByText,
      getByTestId = _render7.getByTestId;
    expect(getByText('Footer Content')).toBeTruthy();
    expect(getByTestId('modal-footer')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,