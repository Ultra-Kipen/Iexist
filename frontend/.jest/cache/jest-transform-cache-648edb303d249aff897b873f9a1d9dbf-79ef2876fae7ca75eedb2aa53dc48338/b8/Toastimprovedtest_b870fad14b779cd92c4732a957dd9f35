e840f7ed9c74433e6bcb6f911a7ef361
_getJestObj().mock('react-native', function () {
  var mockAnimatedValue = function mockAnimatedValue(initialValue) {
    this.setValue = jest.fn();
    this.interpolate = jest.fn(function () {
      return {};
    });
  };
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Animated: {
      View: 'Animated.View',
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            if (cb) cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          })
        };
      })
    },
    Platform: {
      OS: 'android'
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _Toast = _interopRequireWildcard(require("../../src/components/Toast"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var testToastInternals = function testToastInternals(component, props) {
  if (typeof component.type === 'function' && component.type.prototype && component.type.prototype.isReactComponent) {
    var instance = new component.type(props);
    instance.props = props;
    if (instance.componentDidMount) {
      instance.componentDidMount();
    }
    if (instance.hideToast) {
      instance.hideToast();
    }
    if (instance.getBackgroundColor) {
      ['success', 'error', 'warning', 'info'].forEach(function (type) {
        instance.props = Object.assign({}, instance.props, {
          type: type
        });
        instance.getBackgroundColor();
      });
    }
    ['top', 'bottom'].forEach(function (position) {
      instance.props = Object.assign({}, instance.props, {
        position: position
      });
      instance.render();
    });
    [true, false].forEach(function (visible) {
      instance.props = Object.assign({}, instance.props, {
        visible: visible
      });
      instance.render();
    });
    instance.props = Object.assign({}, instance.props, {
      icon: (0, _jsxRuntime.jsx)(Text, {
        children: "\uC544\uC774\uCF58"
      })
    });
    instance.render();
    return true;
  }
  return false;
};
describe('Toast Inline Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.clearAllTimers();
  });
  test('renders correctly with all props', function () {
    var propSets = [{
      visible: true,
      message: '기본 메시지'
    }, {
      visible: true,
      message: '성공',
      type: 'success'
    }, {
      visible: true,
      message: '에러',
      type: 'error'
    }, {
      visible: true,
      message: '경고',
      type: 'warning'
    }, {
      visible: true,
      message: '정보',
      type: 'info',
      position: 'top'
    }, {
      visible: false,
      message: '안보임'
    }, {
      visible: true,
      message: '아이콘',
      icon: (0, _jsxRuntime.jsx)(Text, {
        children: "\uC544\uC774\uCF58"
      })
    }];
    propSets.forEach(function (props) {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, Object.assign({}, props, {
          onClose: function onClose() {},
          testID: "toast"
        }))),
        getByText = _render.getByText,
        queryByTestId = _render.queryByTestId;
      if (props.visible) {
        expect(queryByTestId('toast')).not.toBeNull();
        expect(getByText(props.message)).toBeTruthy();
      } else {
        expect(queryByTestId('toast')).toBeNull();
      }
    });
  });
  test('calls onClose when pressed', function () {
    var onClose = jest.fn();
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uD130\uCE58 \uD14C\uC2A4\uD2B8",
        onClose: onClose,
        testID: "toast"
      })),
      getByTestId = _render2.getByTestId;
    _reactNative.fireEvent.press(getByTestId('toast-touchable'));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  });
  test('calls onClose after duration', function () {
    var onClose = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: true,
      message: "\uD0C0\uC774\uBA38 \uD14C\uC2A4\uD2B8",
      duration: 1000,
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.advanceTimersByTime(1000);
    });
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  });
  test('handles visibility changes', function () {
    var onClose = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uAC00\uC2DC\uC131 \uD14C\uC2A4\uD2B8",
        onClose: onClose,
        testID: "toast"
      })),
      rerender = _render3.rerender,
      queryByTestId = _render3.queryByTestId;
    expect(queryByTestId('toast')).not.toBeNull();
    rerender((0, _jsxRuntime.jsx)(_Toast.default, {
      visible: false,
      message: "\uAC00\uC2DC\uC131 \uD14C\uC2A4\uD2B8",
      onClose: onClose,
      testID: "toast"
    }));
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(queryByTestId('toast')).toBeNull();
  });
  test('ToastController works correctly', function () {
    var mockToast = {
      show: jest.fn(),
      hide: jest.fn()
    };
    _Toast.ToastController.setRef(mockToast);
    _Toast.ToastController.show({
      message: '테스트 메시지'
    });
    _Toast.ToastController.show({
      message: '옵션 테스트',
      type: 'success',
      position: 'top',
      duration: 2000,
      icon: (0, _jsxRuntime.jsx)(Text, {
        children: "\uC544\uC774\uCF58"
      })
    });
    _Toast.ToastController.hide();
    _Toast.ToastController.setRef(null);
    _Toast.ToastController.show({
      message: '테스트'
    });
    _Toast.ToastController.hide();
    expect(mockToast.show).toHaveBeenCalledTimes(2);
    expect(mockToast.hide).toHaveBeenCalledTimes(1);
  });
  test('direct internals testing', function () {
    var toastElement = {
      type: _Toast.default,
      props: {
        visible: true,
        message: '내부 테스트',
        onClose: jest.fn(),
        testID: 'toast'
      }
    };
    expect(testToastInternals(toastElement, toastElement.props)).toBe(true);
  });
  test('handles complex animations', function () {
    var onClose = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: "\uC560\uB2C8\uBA54\uC774\uC158 \uD14C\uC2A4\uD2B8",
        onClose: onClose,
        testID: "toast"
      })),
      rerender = _render4.rerender;
    for (var i = 0; i < 5; i++) {
      rerender((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: false,
        message: "\uC560\uB2C8\uBA54\uC774\uC158 \uD14C\uC2A4\uD2B8",
        onClose: onClose,
        testID: "toast"
      }));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(150);
      });
      rerender((0, _jsxRuntime.jsx)(_Toast.default, {
        visible: true,
        message: `애니메이션 테스트 ${i}`,
        onClose: onClose,
        testID: "toast"
      }));
      (0, _reactNative.act)(function () {
        jest.advanceTimersByTime(150);
      });
    }
    (0, _reactNative.act)(function () {
      jest.runAllTimers();
    });
    expect(onClose).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,