{"version":3,"names":["_getJestObj","mock","getNotifications","jest","fn","markAsRead","markAllAsRead","deleteNotification","Object","assign","requireActual","env","NODE_ENV","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_reactNative2","_NotificationContext","_notificationService","_jsxRuntime","_require","TestComponent","_useNotification","useNotification","notifications","unreadCount","isLoading","error","jsxs","View","children","jsx","Text","testID","toString","length","TouchableOpacity","onPress","describe","mockNotifications","id","user_id","content","notification_type","is_read","created_at","beforeEach","resetModules","clearAllMocks","notificationService","mockResolvedValue","data","success","spyOn","global","mockImplementation","cb","afterEach","restoreAllMocks","it","default","component","act","render","NotificationProvider","waitFor","expect","toHaveBeenCalled","getByTestId","props","toBe","button","toHaveBeenCalledWith","toHaveBeenCalledTimes"],"sources":["NotificationContext.test.tsx"],"sourcesContent":["// __tests__/contexts/NotificationContext.test.tsx\r\nimport React from 'react';\r\nimport { Text, TouchableOpacity, View } from 'react-native';\r\nimport { render, act, waitFor } from '@testing-library/react-native';\r\nimport { NotificationProvider, useNotification } from '../../src/contexts/NotificationContext';\r\nimport notificationService from '../../src/services/api/notificationService';\r\n\r\n// 모의 알림 서비스\r\njest.mock('../../src/services/api/notificationService', () => ({\r\n  getNotifications: jest.fn(),\r\n  markAsRead: jest.fn(),\r\n  markAllAsRead: jest.fn(),\r\n  deleteNotification: jest.fn(),\r\n}));\r\n\r\n// NotificationContext.tsx에서 사용되는 process.env 모킹\r\njest.mock('process', () => ({\r\n  ...jest.requireActual('process'),\r\n  env: {\r\n    ...jest.requireActual('process').env,\r\n    NODE_ENV: 'test'\r\n  }\r\n}));\r\n\r\n// 테스트 컴포넌트\r\nconst TestComponent = () => {\r\n  const { \r\n    notifications, \r\n    unreadCount, \r\n    isLoading, \r\n    error,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification\r\n  } = useNotification();\r\n\r\n  return (\r\n    <View>\r\n      <Text testID=\"loading\">{isLoading ? 'loading' : 'not-loading'}</Text>\r\n      <Text testID=\"error\">{error || 'no-error'}</Text>\r\n      <Text testID=\"unread-count\">{unreadCount.toString()}</Text>\r\n      <Text testID=\"notifications-count\">{notifications.length.toString()}</Text>\r\n      <TouchableOpacity testID=\"mark-read\" onPress={() => markAsRead(1)}>\r\n        <Text>Mark Read</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity testID=\"mark-all-read\" onPress={() => markAllAsRead()}>\r\n        <Text>Mark All Read</Text>\r\n      </TouchableOpacity>\r\n      <TouchableOpacity testID=\"delete-notification\" onPress={() => deleteNotification(1)}>\r\n        <Text>Delete</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\ndescribe('NotificationContext', () => {\r\n  const mockNotifications = [\r\n    {\r\n      id: 1,\r\n      user_id: 1,\r\n      content: 'Test notification 1',\r\n      notification_type: 'like' as const,\r\n      is_read: false,\r\n      created_at: '2024-01-01T00:00:00Z'\r\n    },\r\n    {\r\n      id: 2,\r\n      user_id: 1,\r\n      content: 'Test notification 2',\r\n      notification_type: 'comment' as const,\r\n      is_read: true,\r\n      created_at: '2024-01-02T00:00:00Z'\r\n    }\r\n  ];\r\n\r\n  beforeEach(() => {\r\n    jest.resetModules();\r\n    jest.clearAllMocks();\r\n    \r\n    // API 응답 모킹\r\n    (notificationService.getNotifications as jest.Mock).mockResolvedValue({\r\n      data: mockNotifications\r\n    });\r\n    \r\n    (notificationService.markAsRead as jest.Mock).mockResolvedValue({\r\n      success: true\r\n    });\r\n    \r\n    (notificationService.markAllAsRead as jest.Mock).mockResolvedValue({\r\n      success: true\r\n    });\r\n    \r\n    (notificationService.deleteNotification as jest.Mock).mockResolvedValue({\r\n      success: true\r\n    });\r\n    \r\n    // clearInterval 목\r\n    jest.spyOn(global, 'clearInterval').mockImplementation(jest.fn());\r\n    \r\n    // setInterval 목\r\n    jest.spyOn(global, 'setInterval').mockImplementation((cb) => {\r\n      return 123 as unknown as NodeJS.Timeout;\r\n    });\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.restoreAllMocks();\r\n  });\r\n\r\n  it('initializes with correct data', async () => {\r\n    let component;\r\n    \r\n    await act(async () => {\r\n      component = render(\r\n        <NotificationProvider>\r\n          <TestComponent />\r\n        </NotificationProvider>\r\n      );\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.getNotifications).toHaveBeenCalled();\r\n    });\r\n    \r\n    expect(component.getByTestId('notifications-count').props.children).toBe('2');\r\n    expect(component.getByTestId('unread-count').props.children).toBe('1');\r\n    expect(component.getByTestId('error').props.children).toBe('no-error');\r\n  });\r\n\r\n  it('can mark a notification as read', async () => {\r\n    let component;\r\n    \r\n    await act(async () => {\r\n      component = render(\r\n        <NotificationProvider>\r\n          <TestComponent />\r\n        </NotificationProvider>\r\n      );\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.getNotifications).toHaveBeenCalled();\r\n    });\r\n    \r\n    const button = component.getByTestId('mark-read');\r\n    \r\n    await act(async () => {\r\n      button.props.onPress();\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.markAsRead).toHaveBeenCalledWith(1);\r\n    });\r\n    \r\n    expect(notificationService.getNotifications).toHaveBeenCalledTimes(2);\r\n  });\r\n\r\n  it('can mark all notifications as read', async () => {\r\n    let component;\r\n    \r\n    await act(async () => {\r\n      component = render(\r\n        <NotificationProvider>\r\n          <TestComponent />\r\n        </NotificationProvider>\r\n      );\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.getNotifications).toHaveBeenCalled();\r\n    });\r\n    \r\n    const button = component.getByTestId('mark-all-read');\r\n    \r\n    await act(async () => {\r\n      button.props.onPress();\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.markAllAsRead).toHaveBeenCalled();\r\n    });\r\n    \r\n    expect(notificationService.getNotifications).toHaveBeenCalledTimes(2);\r\n  });\r\n\r\n  it('can delete a notification', async () => {\r\n    let component;\r\n    \r\n    await act(async () => {\r\n      component = render(\r\n        <NotificationProvider>\r\n          <TestComponent />\r\n        </NotificationProvider>\r\n      );\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.getNotifications).toHaveBeenCalled();\r\n    });\r\n    \r\n    const button = component.getByTestId('delete-notification');\r\n    \r\n    await act(async () => {\r\n      button.props.onPress();\r\n    });\r\n    \r\n    await waitFor(() => {\r\n      expect(notificationService.deleteNotification).toHaveBeenCalledWith(1);\r\n    });\r\n    \r\n    expect(notificationService.getNotifications).toHaveBeenCalledTimes(2);\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}