a4e9a930229ec0ab0857dba75f6aade7
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      setOptions: jest.fn(),
      addListener: jest.fn(),
      goBack: jest.fn()
    }),
    useRoute: jest.fn().mockReturnValue({
      params: {}
    }),
    useIsFocused: jest.fn().mockReturnValue(true)
  };
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn().mockResolvedValue(null),
    getBestPosts: jest.fn().mockResolvedValue(null),
    createPost: jest.fn().mockResolvedValue(null),
    sendMessage: jest.fn().mockResolvedValue(null)
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    likePost: jest.fn().mockResolvedValue({
      data: {
        message: 'success'
      }
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(console, 'error').mockImplementation(function () {});
describe('ComfortScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 1,
          title: '오늘 너무 힘들어요',
          content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',
          user_id: 1,
          is_anonymous: true,
          like_count: 5,
          comment_count: 3,
          created_at: '2025-04-08T12:00:00Z'
        }, {
          post_id: 2,
          title: '대인관계가 어려워요',
          content: '새로운 사람들을 만나는 것이 두려워요...',
          user_id: 2,
          is_anonymous: true,
          like_count: 10,
          comment_count: 7,
          created_at: '2025-04-07T10:00:00Z'
        }]
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: [{
          post_id: 3,
          title: '우울증을 극복한 경험',
          content: '저는 작년에 심한 우울증을 겪었지만...',
          like_count: 50,
          comment_count: 20
        }]
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        message: '게시물이 성공적으로 등록되었습니다.'
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
  });
  test('should render loading state initially and then main content', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    expect(getByTestId('loading-indicator')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('loading-indicator')).toBeNull();
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
  }));
  test('should display posts after loading', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render2.getByTestId,
      getByText = _render2.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    expect(getByTestId('best-posts-title')).toBeTruthy();
    expect(getByText('오늘 너무 힘들어요')).toBeTruthy();
    expect(getByText('대인관계가 어려워요')).toBeTruthy();
  }));
  test('should create a new post successfully', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render3.getByTestId,
      getByText = _render3.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), '이것은 테스트 고민입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '이것은 테스트 고민입니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
  }));
  test('should not submit post with empty fields', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render4.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(_comfortWallService.default.createPost).not.toHaveBeenCalled();
  }));
  test('should open comment modal when clicking on a post', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render5.getByTestId,
      getByText = _render5.getByText,
      getAllByText = _render5.getAllByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    var titleElements = getAllByText('오늘 너무 힘들어요');
    expect(titleElements.length).toBeGreaterThan(0);
    expect(getByTestId('comment-input')).toBeTruthy();
  }));
  test('should send a comment successfully', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render6.getByTestId,
      getByText = _render6.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '힘내세요! 응원합니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '힘내세요! 응원합니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.', expect.anything());
  }));
  test('should not submit empty comment', (0, _asyncToGenerator2.default)(function* () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render7.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '메시지 내용을 입력해주세요.');
    expect(_comfortWallService.default.sendMessage).not.toHaveBeenCalled();
  }));
  test('should handle API error when loading posts', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockRejectedValueOnce(new Error('API Error'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
  }));
  test('should like a post', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render8.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('like-button-1'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
  }));
  test('should toggle like status for a post', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.likePost.mockResolvedValueOnce({
      data: {
        message: 'liked'
      }
    }).mockResolvedValueOnce({
      data: {
        message: 'unliked'
      }
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render9.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('like-button-1'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledWith(1);
    });
    _reactNative.fireEvent.press(getByTestId('like-button-1'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.likePost).toHaveBeenCalledTimes(2);
    });
  }));
  test('should toggle anonymous checkbox in message modal', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render10.getByTestId;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    _reactNative.fireEvent.press(getByTestId('anonymous-checkbox'));
    _reactNative.fireEvent.changeText(getByTestId('comment-input'), '응원 메시지입니다.');
    _reactNative.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(1, {
        message: '응원 메시지입니다.',
        is_anonymous: false
      });
    });
  }));
  test('should handle multiple modals correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render11.getByTestId,
      getByText = _render11.getByText,
      queryByText = _render11.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    expect(getByText('고민 나누기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('고민 나누기')).toBeNull();
    });
    _reactNative.fireEvent.press(getByTestId('comment-button-1'));
    expect(getByText('응원 메시지 보내기')).toBeTruthy();
    _reactNative.fireEvent.press(getByTestId('cancel-message-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('응원 메시지 보내기')).toBeNull();
    });
  }));
  test('should preserve form input when API error occurs', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {})),
      getByTestId = _render12.getByTestId,
      getByDisplayValue = _render12.getByDisplayValue;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('new-post-button'));
    var testTitle = '테스트 제목';
    var testContent = '테스트 내용입니다.';
    _reactNative.fireEvent.changeText(getByTestId('post-title-input'), testTitle);
    _reactNative.fireEvent.changeText(getByTestId('post-content-input'), testContent);
    _reactNative.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalled();
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    yield (0, _reactNative.waitFor)(function () {
      expect(getByDisplayValue(testTitle)).toBeTruthy();
      expect(getByDisplayValue(testContent)).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,