501f29feb0a89f17f5feb86061b9212e
_getJestObj().mock('react-native', function () {
  var reactNativeMock = {
    StyleSheet: {
      create: function create(styles) {
        return styles;
      }
    },
    Platform: {
      OS: 'ios',
      select: function select(obj) {
        return obj.ios;
      }
    },
    Keyboard: {
      dismiss: jest.fn()
    },
    View: function View(_ref) {
      var style = _ref.style,
        testID = _ref.testID,
        children = _ref.children;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": testID || 'view',
        style: style,
        children: children
      });
    },
    Text: function Text(_ref2) {
      var style = _ref2.style,
        testID = _ref2.testID,
        children = _ref2.children;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": testID || 'text',
        style: style,
        children: children
      });
    },
    TextInput: function TextInput(_ref3) {
      var style = _ref3.style,
        testID = _ref3.testID,
        value = _ref3.value,
        onChangeText = _ref3.onChangeText,
        placeholder = _ref3.placeholder;
      return (0, _jsxRuntime.jsx)("input", {
        "data-testid": testID || 'input',
        style: style,
        value: value,
        onChange: function onChange(e) {
          return onChangeText && onChangeText(e.target.value);
        },
        placeholder: placeholder
      });
    },
    TouchableOpacity: function TouchableOpacity(_ref4) {
      var style = _ref4.style,
        testID = _ref4.testID,
        onPress = _ref4.onPress,
        children = _ref4.children;
      return (0, _jsxRuntime.jsx)("button", {
        "data-testid": testID || 'button',
        style: style,
        onClick: onPress,
        children: children
      });
    },
    TouchableWithoutFeedback: function TouchableWithoutFeedback(_ref5) {
      var onPress = _ref5.onPress,
        children = _ref5.children;
      return (0, _jsxRuntime.jsx)("div", {
        onClick: onPress,
        children: children
      });
    },
    ScrollView: function ScrollView(_ref6) {
      var contentContainerStyle = _ref6.contentContainerStyle,
        children = _ref6.children,
        keyboardShouldPersistTaps = _ref6.keyboardShouldPersistTaps,
        showsVerticalScrollIndicator = _ref6.showsVerticalScrollIndicator;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": "scroll-view",
        "data-keyboard-persist": keyboardShouldPersistTaps,
        "data-shows-indicator": showsVerticalScrollIndicator.toString(),
        style: contentContainerStyle,
        children: children
      });
    },
    KeyboardAvoidingView: function KeyboardAvoidingView(_ref7) {
      var style = _ref7.style,
        behavior = _ref7.behavior,
        keyboardVerticalOffset = _ref7.keyboardVerticalOffset,
        children = _ref7.children;
      return (0, _jsxRuntime.jsx)("div", {
        "data-testid": "keyboard-avoiding-view",
        "data-behavior": behavior,
        "data-offset": keyboardVerticalOffset,
        style: style,
        children: children
      });
    }
  };
  return reactNativeMock;
});
_getJestObj().mock("../../src/hooks/useTheme", function () {
  return {
    useTheme: function useTheme() {
      return {
        theme: {
          colors: {
            background: '#f5f5f5',
            primary: '#007bff',
            text: '#333333',
            surface: '#ffffff'
          },
          dark: false,
          roundness: 4,
          fonts: {
            regular: {
              fontFamily: 'System',
              fontWeight: '400'
            }
          }
        }
      };
    }
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return function MockLoadingIndicator() {
    return (0, _jsxRuntime.jsx)("div", {
      "data-testid": "loading-indicator",
      children: (0, _jsxRuntime.jsx)("span", {
        children: "\uB85C\uB529 \uC911..."
      })
    });
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _FormLayout = _interopRequireDefault(require("../../src/layouts/FormLayout"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var TestFormInput = function TestFormInput(_ref8) {
  var label = _ref8.label,
    value = _ref8.value,
    onChangeText = _ref8.onChangeText,
    testID = _ref8.testID;
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    testID: "form-field-container",
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: label
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      testID: testID,
      value: value,
      onChangeText: onChangeText
    })]
  });
};
var TestSubmitButton = function TestSubmitButton(_ref9) {
  var onPress = _ref9.onPress,
    title = _ref9.title;
  return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
    testID: "submit-button",
    onPress: onPress,
    children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: title
    })
  });
};
describe('FormLayout - 실제 환경 검증', function () {
  it('기본 렌더링 구조와 컴포넌트가 올바르게 표시되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_FormLayout.default, {
        children: [(0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "",
          onChangeText: function onChangeText() {},
          testID: "name-input"
        }), (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uBA54\uC77C",
          value: "",
          onChangeText: function onChangeText() {},
          testID: "email-input"
        })]
      })),
      getByTestId = _render.getByTestId,
      getAllByTestId = _render.getAllByTestId;
    var keyboardView = getByTestId('keyboard-avoiding-view');
    expect(keyboardView).toBeTruthy();
    var scrollView = getByTestId('scroll-view');
    expect(scrollView).toBeTruthy();
    var formFields = getAllByTestId('form-field-container');
    expect(formFields.length).toBe(2);
    var nameInput = getByTestId('name-input');
    var emailInput = getByTestId('email-input');
    expect(nameInput).toBeTruthy();
    expect(emailInput).toBeTruthy();
  });
  it('loading이 true일 때 로딩 인디케이터가 표시되고 자식이 표시되지 않아야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        loading: true,
        children: (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "",
          onChangeText: function onChangeText() {},
          testID: "name-input"
        })
      })),
      getByTestId = _render2.getByTestId,
      queryByTestId = _render2.queryByTestId;
    var loadingIndicator = getByTestId('loading-indicator');
    expect(loadingIndicator).toBeTruthy();
    var nameInput = queryByTestId('name-input');
    expect(nameInput).toBeNull();
  });
  it('헤더와 푸터가 올바른 위치에 렌더링되어야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        header: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "header-text",
          children: "\uD3FC \uD5E4\uB354"
        }),
        footer: (0, _jsxRuntime.jsx)(TestSubmitButton, {
          onPress: function onPress() {},
          title: "\uC81C\uCD9C"
        }),
        children: (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "",
          onChangeText: function onChangeText() {},
          testID: "name-input"
        })
      })),
      getAllByTestId = _render3.getAllByTestId;
    var allViewElements = getAllByTestId(/view|button/);
    var headerText = getAllByTestId('header-text');
    var submitButton = getAllByTestId('submit-button');
    expect(headerText.length).toBe(1);
    expect(submitButton.length).toBe(1);
  });
  it('onSubmit 함수가 푸터 버튼 클릭 시 호출되어야 함', function () {
    var onSubmitMock = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        onSubmit: onSubmitMock,
        footer: (0, _jsxRuntime.jsx)(TestSubmitButton, {
          onPress: onSubmitMock,
          title: "\uC81C\uCD9C"
        }),
        children: (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "\uD64D\uAE38\uB3D9",
          onChangeText: function onChangeText() {},
          testID: "name-input"
        })
      })),
      getByTestId = _render4.getByTestId;
    var submitButton = getByTestId('submit-button');
    _reactNative.fireEvent.click(submitButton);
    expect(onSubmitMock).toHaveBeenCalledTimes(1);
  });
  it('avoidKeyboard가 false일 때 KeyboardAvoidingView가 사용되지 않아야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        avoidKeyboard: false,
        children: (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "",
          onChangeText: function onChangeText() {},
          testID: "name-input"
        })
      })),
      queryByTestId = _render5.queryByTestId,
      getByTestId = _render5.getByTestId;
    var keyboardView = queryByTestId('keyboard-avoiding-view');
    expect(keyboardView).toBeNull();
    var viewElement = getByTestId('view');
    expect(viewElement).toBeTruthy();
  });
  it('커스텀 스타일이 올바르게 적용되어야 함', function () {
    var customStyle = {
      backgroundColor: 'red',
      padding: 20
    };
    var customContentStyle = {
      margin: 10
    };
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        style: customStyle,
        contentContainerStyle: customContentStyle,
        children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          children: "\uD14C\uC2A4\uD2B8 \uCF58\uD150\uCE20"
        })
      })),
      getByTestId = _render6.getByTestId;
    var container = getByTestId('keyboard-avoiding-view');
    expect(container.props.style).toEqual(expect.objectContaining(customStyle));
  });
  it('TouchableWithoutFeedback이 탭되면 키보드가 닫혀야 함', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_FormLayout.default, {
        children: (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "",
          onChangeText: function onChangeText() {},
          testID: "name-input"
        })
      })),
      getByTestId = _render7.getByTestId;
    var scrollView = getByTestId('scroll-view');
    _reactNative.fireEvent.click(scrollView);
    expect(require('react-native').Keyboard.dismiss).toHaveBeenCalled();
  });
  it('복잡한 폼에서도 모든 요소가 올바르게 렌더링되고 상호작용해야 함', function () {
    var onSubmitMock = jest.fn();
    var onChangeNameMock = jest.fn();
    var onChangeEmailMock = jest.fn();
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_FormLayout.default, {
        header: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
          testID: "form-title",
          children: "\uD68C\uC6D0\uAC00\uC785 \uD3FC"
        }),
        footer: (0, _jsxRuntime.jsx)(TestSubmitButton, {
          onPress: onSubmitMock,
          title: "\uAC00\uC785\uD558\uAE30"
        }),
        onSubmit: onSubmitMock,
        children: [(0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uB984",
          value: "\uD64D\uAE38\uB3D9",
          onChangeText: onChangeNameMock,
          testID: "name-input"
        }), (0, _jsxRuntime.jsx)(TestFormInput, {
          label: "\uC774\uBA54\uC77C",
          value: "hong@example.com",
          onChangeText: onChangeEmailMock,
          testID: "email-input"
        })]
      })),
      getByTestId = _render8.getByTestId;
    var formTitle = getByTestId('form-title');
    var nameInput = getByTestId('name-input');
    var emailInput = getByTestId('email-input');
    var submitButton = getByTestId('submit-button');
    expect(formTitle).toBeTruthy();
    expect(nameInput).toBeTruthy();
    expect(emailInput).toBeTruthy();
    expect(submitButton).toBeTruthy();
    _reactNative.fireEvent.change(nameInput, {
      target: {
        value: '김철수'
      }
    });
    expect(onChangeNameMock).toHaveBeenCalled();
    _reactNative.fireEvent.click(submitButton);
    expect(onSubmitMock).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,