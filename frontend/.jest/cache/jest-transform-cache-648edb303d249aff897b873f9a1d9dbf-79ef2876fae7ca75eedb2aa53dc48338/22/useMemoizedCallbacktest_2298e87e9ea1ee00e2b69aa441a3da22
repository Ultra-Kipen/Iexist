0d968cb0b4dc0c1945d44db47858d406
var _reactHooks = require("@testing-library/react-hooks");
var _useMemoizedCallback = require("../../src/hooks/useMemoizedCallback");
describe('useMemoizedCallback', function () {
  it('should maintain reference equality across renders', function () {
    var callback = jest.fn(function (n) {
      return n * 2;
    });
    var _renderHook = (0, _reactHooks.renderHook)(function (_ref) {
        var callback = _ref.callback,
          deps = _ref.deps;
        return (0, _useMemoizedCallback.useMemoizedCallback)(callback, deps);
      }, {
        initialProps: {
          callback: callback,
          deps: [1]
        }
      }),
      result = _renderHook.result,
      rerender = _renderHook.rerender;
    var initialCallback = result.current;
    rerender({
      callback: callback,
      deps: [1]
    });
    expect(result.current).toBe(initialCallback);
    expect(result.current(5)).toBe(10);
    expect(callback).toHaveBeenCalledWith(5);
  });
  it('should update callback when dependencies change', function () {
    var initialCallback = jest.fn(function (n) {
      return n * 2;
    });
    var _renderHook2 = (0, _reactHooks.renderHook)(function (_ref2) {
        var callback = _ref2.callback,
          deps = _ref2.deps;
        return (0, _useMemoizedCallback.useMemoizedCallback)(callback, deps);
      }, {
        initialProps: {
          callback: initialCallback,
          deps: [1]
        }
      }),
      result = _renderHook2.result,
      rerender = _renderHook2.rerender;
    var firstCallback = result.current;
    rerender({
      callback: initialCallback,
      deps: [2]
    });
    expect(result.current).not.toBe(firstCallback);
  });
  it('should update function behavior with new callback', function () {
    var props = {
      callback: function callback(n) {
        return n * 2;
      },
      deps: [1]
    };
    var _renderHook3 = (0, _reactHooks.renderHook)(function () {
        return (0, _useMemoizedCallback.useMemoizedCallback)(props.callback, props.deps);
      }),
      result = _renderHook3.result,
      rerender = _renderHook3.rerender;
    expect(result.current(5)).toBe(10);
    props = {
      callback: function callback(n) {
        return n * 3;
      },
      deps: [1]
    };
    rerender();
    expect(result.current(5)).toBe(15);
  });
  it('should handle empty dependencies array', function () {
    var callback = jest.fn(function (n) {
      return n * 2;
    });
    var _renderHook4 = (0, _reactHooks.renderHook)(function (_ref3) {
        var callback = _ref3.callback;
        return (0, _useMemoizedCallback.useMemoizedCallback)(callback, []);
      }, {
        initialProps: {
          callback: callback
        }
      }),
      result = _renderHook4.result,
      rerender = _renderHook4.rerender;
    var initialCallback = result.current;
    var newCallback = jest.fn(function (n) {
      return n * 3;
    });
    rerender({
      callback: newCallback
    });
    expect(result.current).toBe(initialCallback);
    expect(result.current(5)).toBe(15);
  });
  it('should capture the latest props inside the callback', function () {
    var multiplier = 2;
    var _renderHook5 = (0, _reactHooks.renderHook)(function () {
        return (0, _useMemoizedCallback.useMemoizedCallback)(function (n) {
          return n * multiplier;
        }, []);
      }),
      result = _renderHook5.result,
      rerender = _renderHook5.rerender;
    var memoizedCallback = result.current;
    multiplier = 3;
    rerender();
    expect(result.current).toBe(memoizedCallback);
    expect(result.current(5)).toBe(15);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,