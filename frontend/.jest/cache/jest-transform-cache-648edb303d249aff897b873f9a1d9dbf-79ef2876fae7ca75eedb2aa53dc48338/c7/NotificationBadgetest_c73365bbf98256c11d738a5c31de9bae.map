{"version":3,"names":["_getJestObj","mock","RN","jest","requireActual","Object","assign","StyleSheet","create","fn","mockImplementation","styles","useNotification","_interopRequireDefault","require","_react","_reactNative","_NotificationBadge","_NotificationContext","_jsxRuntime","_require","describe","beforeEach","mockReturnValue","unreadCount","it","_render","render","jsx","default","showZero","queryByText","expect","toBeNull","_render2","getByText","toBeTruthy","_render3","_render4","maxCount"],"sources":["NotificationBadge.test.tsx"],"sourcesContent":["// __TESTS__/components/NotificationBadge.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport NotificationBadge from '../../src/components/NotificationBadge';\r\nimport { useNotification } from '../../src/contexts/NotificationContext';\r\n\r\n// react-native 모킹\r\njest.mock('react-native', () => {\r\n  const RN = jest.requireActual('react-native');\r\n  \r\n  return {\r\n    ...RN,\r\n    StyleSheet: {\r\n      create: jest.fn().mockImplementation((styles) => styles),\r\n    },\r\n  };\r\n});\r\n\r\n// NotificationContext 모의(Mock)\r\njest.mock('../../src/contexts/NotificationContext', () => ({\r\n  useNotification: jest.fn()\r\n}));\r\n\r\ndescribe('NotificationBadge 컴포넌트', () => {\r\n  beforeEach(() => {\r\n    // 기본 모의 설정\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 0\r\n    });\r\n  });\r\n\r\n  it('unreadCount가 0이고 showZero가 false이면 배지가 표시되지 않아야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 0\r\n    });\r\n    \r\n    const { queryByText } = render(\r\n      <NotificationBadge showZero={false} />\r\n    );\r\n    \r\n    expect(queryByText('0')).toBeNull();\r\n  });\r\n\r\n  it('unreadCount가 0이지만 showZero가 true이면 배지가 표시되어야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 0\r\n    });\r\n    \r\n    const { getByText } = render(\r\n      <NotificationBadge showZero={true} />\r\n    );\r\n    \r\n    expect(getByText('0')).toBeTruthy();\r\n  });\r\n\r\n  it('unreadCount가 있으면 배지에 카운트가 표시되어야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 5\r\n    });\r\n    \r\n    const { getByText } = render(\r\n      <NotificationBadge />\r\n    );\r\n    \r\n    expect(getByText('5')).toBeTruthy();\r\n  });\r\n\r\n  it('maxCount보다 큰 unreadCount는 maxCount+로 표시되어야 합니다', () => {\r\n    (useNotification as jest.Mock).mockReturnValue({\r\n      unreadCount: 120\r\n    });\r\n    \r\n    const { getByText } = render(\r\n      <NotificationBadge maxCount={99} />\r\n    );\r\n    \r\n    expect(getByText('99+')).toBeTruthy();\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}