afcd3f2f458382e3757cebe01e8cde2a
_getJestObj().mock('react-native', function () {
  var RN = jest.requireActual('react-native');
  return Object.assign({}, RN, {
    StyleSheet: {
      create: jest.fn().mockImplementation(function (styles) {
        return styles;
      })
    }
  });
});
_getJestObj().mock("../../src/contexts/NotificationContext", function () {
  return {
    useNotification: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _NotificationBadge = _interopRequireDefault(require("../../src/components/NotificationBadge"));
var _NotificationContext = require("../../src/contexts/NotificationContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('NotificationBadge 컴포넌트', function () {
  beforeEach(function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 0
    });
  });
  it('unreadCount가 0이고 showZero가 false이면 배지가 표시되지 않아야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 0
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {
        showZero: false
      })),
      queryByText = _render.queryByText;
    expect(queryByText('0')).toBeNull();
  });
  it('unreadCount가 0이지만 showZero가 true이면 배지가 표시되어야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 0
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {
        showZero: true
      })),
      getByText = _render2.getByText;
    expect(getByText('0')).toBeTruthy();
  });
  it('unreadCount가 있으면 배지에 카운트가 표시되어야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 5
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {})),
      getByText = _render3.getByText;
    expect(getByText('5')).toBeTruthy();
  });
  it('maxCount보다 큰 unreadCount는 maxCount+로 표시되어야 합니다', function () {
    _NotificationContext.useNotification.mockReturnValue({
      unreadCount: 120
    });
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_NotificationBadge.default, {
        maxCount: 99
      })),
      getByText = _render4.getByText;
    expect(getByText('99+')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJSTiIsImplc3QiLCJyZXF1aXJlQWN0dWFsIiwiT2JqZWN0IiwiYXNzaWduIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwic3R5bGVzIiwidXNlTm90aWZpY2F0aW9uIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfTm90aWZpY2F0aW9uQmFkZ2UiLCJfTm90aWZpY2F0aW9uQ29udGV4dCIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJtb2NrUmV0dXJuVmFsdWUiLCJ1bnJlYWRDb3VudCIsIml0IiwiX3JlbmRlciIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJzaG93WmVybyIsInF1ZXJ5QnlUZXh0IiwiZXhwZWN0IiwidG9CZU51bGwiLCJfcmVuZGVyMiIsImdldEJ5VGV4dCIsInRvQmVUcnV0aHkiLCJfcmVuZGVyMyIsIl9yZW5kZXI0IiwibWF4Q291bnQiXSwic291cmNlcyI6WyJOb3RpZmljYXRpb25CYWRnZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX1RFU1RTX18vY29tcG9uZW50cy9Ob3RpZmljYXRpb25CYWRnZS50ZXN0LnRzeFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBOb3RpZmljYXRpb25CYWRnZSBmcm9tICcuLi8uLi9zcmMvY29tcG9uZW50cy9Ob3RpZmljYXRpb25CYWRnZSc7XHJcbmltcG9ydCB7IHVzZU5vdGlmaWNhdGlvbiB9IGZyb20gJy4uLy4uL3NyYy9jb250ZXh0cy9Ob3RpZmljYXRpb25Db250ZXh0JztcclxuXHJcbi8vIHJlYWN0LW5hdGl2ZSDrqqjtgrlcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUnLCAoKSA9PiB7XHJcbiAgY29uc3QgUk4gPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZScpO1xyXG4gIFxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5STixcclxuICAgIFN0eWxlU2hlZXQ6IHtcclxuICAgICAgY3JlYXRlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChzdHlsZXMpID0+IHN0eWxlcyksXHJcbiAgICB9LFxyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gTm90aWZpY2F0aW9uQ29udGV4dCDrqqjsnZgoTW9jaylcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvY29udGV4dHMvTm90aWZpY2F0aW9uQ29udGV4dCcsICgpID0+ICh7XHJcbiAgdXNlTm90aWZpY2F0aW9uOiBqZXN0LmZuKClcclxufSkpO1xyXG5cclxuZGVzY3JpYmUoJ05vdGlmaWNhdGlvbkJhZGdlIOy7tO2PrOuEjO2KuCcsICgpID0+IHtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIOq4sOuzuCDrqqjsnZgg7ISk7KCVXHJcbiAgICAodXNlTm90aWZpY2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdW5yZWFkQ291bnQ6IDBcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBpdCgndW5yZWFkQ291bnTqsIAgMOydtOqzoCBzaG93WmVyb+qwgCBmYWxzZeydtOuptCDrsLDsp4DqsIAg7ZGc7Iuc65CY7KeAIOyViuyVhOyVvCDtlanri4jri6QnLCAoKSA9PiB7XHJcbiAgICAodXNlTm90aWZpY2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdW5yZWFkQ291bnQ6IDBcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zdCB7IHF1ZXJ5QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSBzaG93WmVybz17ZmFsc2V9IC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QocXVlcnlCeVRleHQoJzAnKSkudG9CZU51bGwoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3VucmVhZENvdW506rCAIDDsnbTsp4Drp4wgc2hvd1plcm/qsIAgdHJ1ZeydtOuptCDrsLDsp4DqsIAg7ZGc7Iuc65CY7Ja07JW8IO2VqeuLiOuLpCcsICgpID0+IHtcclxuICAgICh1c2VOb3RpZmljYXRpb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICB1bnJlYWRDb3VudDogMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSBzaG93WmVybz17dHJ1ZX0gLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJzAnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgndW5yZWFkQ291bnTqsIAg7J6I7Jy866m0IOuwsOyngOyXkCDsubTsmrTtirjqsIAg7ZGc7Iuc65CY7Ja07JW8IO2VqeuLiOuLpCcsICgpID0+IHtcclxuICAgICh1c2VOb3RpZmljYXRpb24gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICB1bnJlYWRDb3VudDogNVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnNScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdtYXhDb3VudOuztOuLpCDtgbAgdW5yZWFkQ291bnTripQgbWF4Q291bnQr66GcIO2RnOyLnOuQmOyWtOyVvCDtlanri4jri6QnLCAoKSA9PiB7XHJcbiAgICAodXNlTm90aWZpY2F0aW9uIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgdW5yZWFkQ291bnQ6IDEyMFxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxOb3RpZmljYXRpb25CYWRnZSBtYXhDb3VudD17OTl9IC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCc5OSsnKSkudG9CZVRydXRoeSgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU9BQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM5QixJQUFNQyxFQUFFLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLGNBQWMsQ0FBQztFQUU3QyxPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0osRUFBRTtJQUNMSyxVQUFVLEVBQUU7TUFDVkMsTUFBTSxFQUFFTCxJQUFJLENBQUNNLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGtCQUFrQixDQUFDLFVBQUNDLE1BQU07UUFBQSxPQUFLQSxNQUFNO01BQUE7SUFDekQ7RUFBQztBQUVMLENBQUMsQ0FBQztBQUdGWCxXQUFBLEdBQUtDLElBQUksMkNBQTJDO0VBQUEsT0FBTztJQUN6RFcsZUFBZSxFQUFFVCxJQUFJLENBQUNNLEVBQUUsQ0FBQztFQUMzQixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBQUMsSUFBQUksc0JBQUEsR0FBQUMsT0FBQTtBQXBCSixJQUFBQyxNQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxrQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksb0JBQUEsR0FBQUosT0FBQTtBQUF5RSxJQUFBSyxXQUFBLEdBQUFMLE9BQUE7QUFBQSxTQUFBZCxZQUFBO0VBQUEsSUFBQW9CLFFBQUEsR0FBQU4sT0FBQTtJQUFBWCxJQUFBLEdBQUFpQixRQUFBLENBQUFqQixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQW1CekVrQixRQUFRLENBQUMsd0JBQXdCLEVBQUUsWUFBTTtFQUN2Q0MsVUFBVSxDQUFDLFlBQU07SUFFZFYsb0NBQWUsQ0FBZVcsZUFBZSxDQUFDO01BQzdDQyxXQUFXLEVBQUU7SUFDZixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLFlBQU07SUFDN0RiLG9DQUFlLENBQWVXLGVBQWUsQ0FBQztNQUM3Q0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsSUFBQUUsT0FBQSxHQUF3QixJQUFBQyxtQkFBTSxFQUM1QixJQUFBUixXQUFBLENBQUFTLEdBQUEsRUFBQ1gsa0JBQUEsQ0FBQVksT0FBaUI7UUFBQ0MsUUFBUSxFQUFFO01BQU0sQ0FBRSxDQUN2QyxDQUFDO01BRk9DLFdBQVcsR0FBQUwsT0FBQSxDQUFYSyxXQUFXO0lBSW5CQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDRSxRQUFRLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRlIsRUFBRSxDQUFDLGtEQUFrRCxFQUFFLFlBQU07SUFDMURiLG9DQUFlLENBQWVXLGVBQWUsQ0FBQztNQUM3Q0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsSUFBQVUsUUFBQSxHQUFzQixJQUFBUCxtQkFBTSxFQUMxQixJQUFBUixXQUFBLENBQUFTLEdBQUEsRUFBQ1gsa0JBQUEsQ0FBQVksT0FBaUI7UUFBQ0MsUUFBUSxFQUFFO01BQUssQ0FBRSxDQUN0QyxDQUFDO01BRk9LLFNBQVMsR0FBQUQsUUFBQSxDQUFUQyxTQUFTO0lBSWpCSCxNQUFNLENBQUNHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFlBQU07SUFDN0NiLG9DQUFlLENBQWVXLGVBQWUsQ0FBQztNQUM3Q0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsSUFBQWEsUUFBQSxHQUFzQixJQUFBVixtQkFBTSxFQUMxQixJQUFBUixXQUFBLENBQUFTLEdBQUEsRUFBQ1gsa0JBQUEsQ0FBQVksT0FBaUIsSUFBRSxDQUN0QixDQUFDO01BRk9NLFNBQVMsR0FBQUUsUUFBQSxDQUFURixTQUFTO0lBSWpCSCxNQUFNLENBQUNHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRlgsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLFlBQU07SUFDeERiLG9DQUFlLENBQWVXLGVBQWUsQ0FBQztNQUM3Q0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxDQUFDO0lBRUYsSUFBQWMsUUFBQSxHQUFzQixJQUFBWCxtQkFBTSxFQUMxQixJQUFBUixXQUFBLENBQUFTLEdBQUEsRUFBQ1gsa0JBQUEsQ0FBQVksT0FBaUI7UUFBQ1UsUUFBUSxFQUFFO01BQUcsQ0FBRSxDQUNwQyxDQUFDO01BRk9KLFNBQVMsR0FBQUcsUUFBQSxDQUFUSCxTQUFTO0lBSWpCSCxNQUFNLENBQUNHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztFQUN2QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=