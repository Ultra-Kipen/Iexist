aa5e1fba31edac7f2905b5cffd664d7b
_getJestObj().mock('@react-navigation/native-stack', function () {
  return {
    createNativeStackNavigator: function createNativeStackNavigator() {
      return {
        Navigator: function Navigator(_ref) {
          var children = _ref.children,
            screenOptions = _ref.screenOptions;
          return children;
        },
        Screen: function Screen(_ref2) {
          var name = _ref2.name;
          return name;
        }
      };
    }
  };
});
_getJestObj().mock("../../src/screens/LoginScreen", function () {
  return 'LoginScreen';
});
_getJestObj().mock("../../src/screens/RegisterScreen", function () {
  return 'RegisterScreen';
});
_getJestObj().mock("../../src/screens/ApiTestScreen", function () {
  return 'ApiTestScreen';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _AuthStack = _interopRequireDefault(require("../../src/navigation/AuthStack"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('AuthStack', function () {
  it('렌더링 오류 없이 생성됨', function () {
    var tree = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_AuthStack.default, {})).toJSON();
    expect(tree).toBeDefined();
  });
  it('스냅샷과 일치함', function () {
    var tree = _reactTestRenderer.default.create((0, _jsxRuntime.jsx)(_AuthStack.default, {})).toJSON();
    expect(tree).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJjcmVhdGVOYXRpdmVTdGFja05hdmlnYXRvciIsIk5hdmlnYXRvciIsIl9yZWYiLCJjaGlsZHJlbiIsInNjcmVlbk9wdGlvbnMiLCJTY3JlZW4iLCJfcmVmMiIsIm5hbWUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdCIsIl9yZWFjdFRlc3RSZW5kZXJlciIsIl9BdXRoU3RhY2siLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwiamVzdCIsImRlc2NyaWJlIiwiaXQiLCJ0cmVlIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJqc3giLCJkZWZhdWx0IiwidG9KU09OIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJ0b01hdGNoU25hcHNob3QiXSwic291cmNlcyI6WyJBdXRoU3RhY2sudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX190ZXN0c19fL25hdmlnYXRpb24vQXV0aFN0YWNrLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcclxuaW1wb3J0IEF1dGhTdGFjayBmcm9tICcuLi8uLi9zcmMvbmF2aWdhdGlvbi9BdXRoU3RhY2snO1xyXG5cclxuLy8g64Sk67mE6rKM7J207IWYIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjaycsICgpID0+ICh7XHJcbiAgY3JlYXRlTmF0aXZlU3RhY2tOYXZpZ2F0b3I6ICgpID0+ICh7XHJcbiAgICBOYXZpZ2F0b3I6ICh7IGNoaWxkcmVuLCBzY3JlZW5PcHRpb25zIH0pID0+IGNoaWxkcmVuLFxyXG4gICAgU2NyZWVuOiAoeyBuYW1lIH0pID0+IG5hbWUsXHJcbiAgfSksXHJcbn0pKTtcclxuXHJcbi8vIO2ZlOuptCDsu7Ttj6zrhIztirgg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NjcmVlbnMvTG9naW5TY3JlZW4nLCAoKSA9PiAnTG9naW5TY3JlZW4nKTtcclxuamVzdC5tb2NrKCcuLi8uLi9zcmMvc2NyZWVucy9SZWdpc3RlclNjcmVlbicsICgpID0+ICdSZWdpc3RlclNjcmVlbicpO1xyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zY3JlZW5zL0FwaVRlc3RTY3JlZW4nLCAoKSA9PiAnQXBpVGVzdFNjcmVlbicpO1xyXG5cclxuZGVzY3JpYmUoJ0F1dGhTdGFjaycsICgpID0+IHtcclxuICBpdCgn66CM642U66eBIOyYpOulmCDsl4bsnbQg7IOd7ISx65CoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgdHJlZSA9IHJlbmRlcmVyLmNyZWF0ZSg8QXV0aFN0YWNrIC8+KS50b0pTT04oKTtcclxuICAgIGV4cGVjdCh0cmVlKS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn7Iqk64OF7IO36rO8IOydvOy5mO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHRyZWUgPSByZW5kZXJlci5jcmVhdGUoPEF1dGhTdGFjayAvPikudG9KU09OKCk7XHJcbiAgICBleHBlY3QodHJlZSkudG9NYXRjaFNuYXBzaG90KCk7XHJcbiAgfSk7XHJcbn0pOyJdLCJtYXBwaW5ncyI6IkFBTUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0VBQUEsT0FBTztJQUNqREMsMEJBQTBCLEVBQUUsU0FBNUJBLDBCQUEwQkEsQ0FBQTtNQUFBLE9BQVM7UUFDakNDLFNBQVMsRUFBRSxTQUFYQSxTQUFTQSxDQUFBQyxJQUFBO1VBQUEsSUFBS0MsUUFBUSxHQUFBRCxJQUFBLENBQVJDLFFBQVE7WUFBRUMsYUFBYSxHQUFBRixJQUFBLENBQWJFLGFBQWE7VUFBQSxPQUFPRCxRQUFRO1FBQUE7UUFDcERFLE1BQU0sRUFBRSxTQUFSQSxNQUFNQSxDQUFBQyxLQUFBO1VBQUEsSUFBS0MsSUFBSSxHQUFBRCxLQUFBLENBQUpDLElBQUk7VUFBQSxPQUFPQSxJQUFJO1FBQUE7TUFDNUIsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIVCxXQUFBLEdBQUtDLElBQUksa0NBQWtDO0VBQUEsT0FBTSxhQUFhO0FBQUEsRUFBQztBQUMvREQsV0FBQSxHQUFLQyxJQUFJLHFDQUFxQztFQUFBLE9BQU0sZ0JBQWdCO0FBQUEsRUFBQztBQUNyRUQsV0FBQSxHQUFLQyxJQUFJLG9DQUFvQztFQUFBLE9BQU0sZUFBZTtBQUFBLEVBQUM7QUFBQyxJQUFBUyxzQkFBQSxHQUFBQyxPQUFBO0FBZnBFLElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGtCQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBdUQsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQVgsWUFBQTtFQUFBLElBQUFnQixRQUFBLEdBQUFMLE9BQUE7SUFBQU0sSUFBQSxHQUFBRCxRQUFBLENBQUFDLElBQUE7RUFBQWpCLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFpQixJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFldkRDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBTTtFQUMxQkMsRUFBRSxDQUFDLGVBQWUsRUFBRSxZQUFNO0lBQ3hCLElBQU1DLElBQUksR0FBR0MsMEJBQVEsQ0FBQ0MsTUFBTSxDQUFDLElBQUFQLFdBQUEsQ0FBQVEsR0FBQSxFQUFDVCxVQUFBLENBQUFVLE9BQVMsSUFBRSxDQUFDLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUM7SUFDcERDLE1BQU0sQ0FBQ04sSUFBSSxDQUFDLENBQUNPLFdBQVcsQ0FBQyxDQUFDO0VBQzVCLENBQUMsQ0FBQztFQUVGUixFQUFFLENBQUMsVUFBVSxFQUFFLFlBQU07SUFDbkIsSUFBTUMsSUFBSSxHQUFHQywwQkFBUSxDQUFDQyxNQUFNLENBQUMsSUFBQVAsV0FBQSxDQUFBUSxHQUFBLEVBQUNULFVBQUEsQ0FBQVUsT0FBUyxJQUFFLENBQUMsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQztJQUNwREMsTUFBTSxDQUFDTixJQUFJLENBQUMsQ0FBQ1EsZUFBZSxDQUFDLENBQUM7RUFDaEMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119