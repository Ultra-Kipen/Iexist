0b24d22082974a2ac14ddddfb85dcd04
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _statsService = _interopRequireDefault(require("../../../../src/services/api/statsService"));
beforeAll(function () {
  _statsService.default.client.get = jest.fn();
});
afterAll(function () {
  jest.restoreAllMocks();
});
describe('statsService', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('getUserStats', function () {
    it('should fetch user statistics successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockStats = {
        my_day_post_count: 10,
        someone_day_post_count: 5,
        my_day_like_received_count: 25,
        someone_day_like_received_count: 15,
        challenge_count: 3
      };
      _statsService.default.client.get.mockResolvedValueOnce({
        data: {
          stats: mockStats
        }
      });
      var result = yield _statsService.default.getUserStats();
      expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats');
      expect(result).toEqual({
        data: {
          stats: mockStats
        }
      });
    }));
    it('should handle errors when fetching stats', (0, _asyncToGenerator2.default)(function* () {
      var errorMessage = '통계 정보 조회에 실패했습니다';
      _statsService.default.client.get.mockRejectedValueOnce(new Error(errorMessage));
      yield expect(_statsService.default.getUserStats()).rejects.toThrow(errorMessage);
    }));
  });
  describe('getEmotionTrends', function () {
    it('should fetch emotion trends successfully', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        start_date: '2025-04-01',
        end_date: '2025-04-15',
        type: 'weekly'
      };
      var mockTrendsData = {
        trends: [{
          date: '2025-04-01',
          emotion_id: 1,
          count: 3
        }, {
          date: '2025-04-08',
          emotion_id: 2,
          count: 5
        }]
      };
      _statsService.default.client.get.mockResolvedValueOnce({
        data: mockTrendsData
      });
      var result = yield _statsService.default.getEmotionTrends(options);
      expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/trends', {
        params: expect.any(URLSearchParams)
      });
      expect(result).toEqual({
        data: mockTrendsData
      });
    }));
    it('should handle errors when fetching emotion trends', (0, _asyncToGenerator2.default)(function* () {
      _statsService.default.client.get.mockRejectedValueOnce(new Error('Some error'));
      yield expect(_statsService.default.getEmotionTrends()).rejects.toThrow('감정 트렌드 조회에 실패했습니다');
    }));
  });
  describe('getWeeklyTrends', function () {
    it('should fetch weekly trends successfully', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        start_date: '2025-04-01',
        end_date: '2025-04-30'
      };
      var mockWeeklyData = {
        weeks: [{
          start_date: '2025-04-01',
          end_date: '2025-04-07',
          emotions: [{
            emotion_id: 1,
            count: 5
          }, {
            emotion_id: 2,
            count: 3
          }]
        }, {
          start_date: '2025-04-08',
          end_date: '2025-04-14',
          emotions: [{
            emotion_id: 1,
            count: 2
          }, {
            emotion_id: 3,
            count: 4
          }]
        }]
      };
      _statsService.default.client.get.mockResolvedValueOnce({
        data: mockWeeklyData
      });
      var result = yield _statsService.default.getWeeklyTrends(options);
      expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/weekly', {
        params: expect.any(URLSearchParams)
      });
      expect(result).toEqual({
        data: mockWeeklyData
      });
    }));
    it('should handle errors when fetching weekly trends', (0, _asyncToGenerator2.default)(function* () {
      _statsService.default.client.get.mockRejectedValueOnce(new Error('Some error'));
      yield expect(_statsService.default.getWeeklyTrends()).rejects.toThrow('주간 트렌드 조회에 실패했습니다');
    }));
  });
  describe('getMonthlyTrends', function () {
    it('should fetch monthly trends successfully', (0, _asyncToGenerator2.default)(function* () {
      var options = {
        start_date: '2025-01-01',
        end_date: '2025-04-30'
      };
      var mockMonthlyData = {
        months: [{
          month: '2025-01',
          emotions: [{
            emotion_id: 1,
            count: 15
          }, {
            emotion_id: 2,
            count: 10
          }]
        }, {
          month: '2025-02',
          emotions: [{
            emotion_id: 1,
            count: 8
          }, {
            emotion_id: 3,
            count: 12
          }]
        }]
      };
      _statsService.default.client.get.mockResolvedValueOnce({
        data: mockMonthlyData
      });
      var result = yield _statsService.default.getMonthlyTrends(options);
      expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/monthly', {
        params: expect.any(URLSearchParams)
      });
      expect(result).toEqual({
        data: mockMonthlyData
      });
    }));
    it('should handle errors when fetching monthly trends', (0, _asyncToGenerator2.default)(function* () {
      _statsService.default.client.get.mockRejectedValueOnce(new Error('Some error'));
      yield expect(_statsService.default.getMonthlyTrends()).rejects.toThrow('월간 트렌드 조회에 실패했습니다');
    }));
  });
  describe('getEmotionStats', function () {
    it('should fetch emotion statistics successfully', (0, _asyncToGenerator2.default)(function* () {
      var emotionId = 1;
      var period = 'month';
      var mockEmotionStats = {
        emotion: {
          id: 1,
          name: '행복'
        },
        count: 15,
        percentage: 50,
        history: [{
          date: '2025-04-01',
          count: 3
        }, {
          date: '2025-04-08',
          count: 5
        }]
      };
      _statsService.default.client.get.mockResolvedValueOnce({
        data: mockEmotionStats
      });
      var result = yield _statsService.default.getEmotionStats(emotionId, period);
      expect(_statsService.default.client.get).toHaveBeenCalledWith(`/stats/emotions/${emotionId}`, {
        params: {
          period: period
        }
      });
      expect(result).toEqual({
        data: mockEmotionStats
      });
    }));
    it('should handle errors when fetching emotion statistics', (0, _asyncToGenerator2.default)(function* () {
      _statsService.default.client.get.mockRejectedValueOnce(new Error('Some error'));
      yield expect(_statsService.default.getEmotionStats(1)).rejects.toThrow('감정별 통계 조회에 실패했습니다');
    }));
  });
  describe('getActivitySummary', function () {
    it('should fetch activity summary successfully', (0, _asyncToGenerator2.default)(function* () {
      var period = 'week';
      var mockActivityStats = {
        posts: 10,
        comments: 15,
        likes: 25,
        most_active_day: '2025-04-15'
      };
      _statsService.default.client.get.mockResolvedValueOnce({
        data: mockActivityStats
      });
      var result = yield _statsService.default.getActivitySummary(period);
      expect(_statsService.default.client.get).toHaveBeenCalledWith('/stats/activity', {
        params: {
          period: period
        }
      });
      expect(result).toEqual({
        data: mockActivityStats
      });
    }));
    it('should handle errors when fetching activity summary', (0, _asyncToGenerator2.default)(function* () {
      _statsService.default.client.get.mockRejectedValueOnce(new Error('Some error'));
      yield expect(_statsService.default.getActivitySummary()).rejects.toThrow('활동 요약 조회에 실패했습니다');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,