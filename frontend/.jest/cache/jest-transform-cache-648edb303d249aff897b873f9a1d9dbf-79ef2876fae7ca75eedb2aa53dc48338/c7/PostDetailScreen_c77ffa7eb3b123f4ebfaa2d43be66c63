6519bcdb50539bee1c750c96306398ce
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _postService = _interopRequireDefault(require("../services/api/postService"));
var _LoadingIndicator = _interopRequireDefault(require("../components/LoadingIndicator"));
var _CommentItem = _interopRequireDefault(require("../components/CommentItem"));
var _ProfileAvatar = _interopRequireDefault(require("../components/ProfileAvatar"));
var _Button = _interopRequireDefault(require("../components/Button"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var PostDetailScreen = function PostDetailScreen() {
  var navigation = (0, _native.useNavigation)();
  var route = (0, _native.useRoute)();
  var postId = route.params.postId;
  var scrollViewRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    post = _useState2[0],
    setPost = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    comments = _useState4[0],
    setComments = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    commentText = _useState6[0],
    setCommentText = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isAnonymous = _useState8[0],
    setIsAnonymous = _useState8[1];
  var _useState9 = (0, _react.useState)(true),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    loading = _useState10[0],
    setLoading = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    submitting = _useState12[0],
    setSubmitting = _useState12[1];
  var _useState13 = (0, _react.useState)(null),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    error = _useState14[0],
    setError = _useState14[1];
  (0, _react.useEffect)(function () {
    fetchPostData();
  }, [postId]);
  var fetchPostData = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        setLoading(true);
        setError(null);
        var postResponse = yield _postService.default.getPostById(postId);
        var commentsResponse = yield _postService.default.getComments(postId);
        setPost(postResponse.data.data);
        setComments(commentsResponse.data.data);
      } catch (err) {
        console.error('게시물 데이터 로딩 오류:', err);
        setError('게시물 정보를 불러오는 중 오류가 발생했습니다.');
      } finally {
        setLoading(false);
      }
    });
    return function fetchPostData() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleLikePress = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* () {
      if (!post) return;
      try {
        yield _postService.default.likePost(postId);
        setPost(Object.assign({}, post, {
          is_liked: !post.is_liked,
          like_count: post.is_liked ? post.like_count - 1 : post.like_count + 1
        }));
      } catch (err) {
        console.error('좋아요 처리 오류:', err);
        _reactNative.Alert.alert('오류', '좋아요 처리 중 문제가 발생했습니다.');
      }
    });
    return function handleLikePress() {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleSubmitComment = function () {
    var _ref3 = (0, _asyncToGenerator2.default)(function* () {
      if (!commentText.trim()) {
        return;
      }
      try {
        setSubmitting(true);
        var response = yield _postService.default.addComment(postId, {
          content: commentText.trim(),
          is_anonymous: isAnonymous
        });
        var newComment = response.data.data;
        setComments([].concat((0, _toConsumableArray2.default)(comments), [newComment]));
        setCommentText('');
        if (post) {
          setPost(Object.assign({}, post, {
            comment_count: post.comment_count + 1
          }));
        }
        setTimeout(function () {
          var _scrollViewRef$curren;
          (_scrollViewRef$curren = scrollViewRef.current) == null || _scrollViewRef$curren.scrollToEnd({
            animated: true
          });
        }, 300);
      } catch (err) {
        console.error('댓글 작성 오류:', err);
        _reactNative.Alert.alert('오류', '댓글 작성 중 문제가 발생했습니다.');
      } finally {
        setSubmitting(false);
      }
    });
    return function handleSubmitComment() {
      return _ref3.apply(this, arguments);
    };
  }();
  var formatDate = function formatDate(dateString) {
    var date = new Date(dateString);
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };
  if (loading) {
    return (0, _jsxRuntime.jsx)(_LoadingIndicator.default, {
      text: "\uB85C\uB529 \uC911..."
    });
  }
  if (error) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: error
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uB2E4\uC2DC \uC2DC\uB3C4",
        onPress: fetchPostData,
        type: "primary"
      })]
    });
  }
  if (!post) {
    return (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.errorContainer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.errorText,
        children: "\uAC8C\uC2DC\uBB3C\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4."
      }), (0, _jsxRuntime.jsx)(_Button.default, {
        title: "\uB4A4\uB85C \uAC00\uAE30",
        onPress: function onPress() {
          return navigation.goBack();
        },
        type: "primary"
      })]
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.KeyboardAvoidingView, {
    style: styles.container,
    behavior: _reactNative.Platform.OS === 'ios' ? 'padding' : undefined,
    keyboardVerticalOffset: 100,
    children: [(0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
      ref: scrollViewRef,
      style: styles.scrollView,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.postContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.postHeader,
          children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
            style: styles.userInfo,
            children: [(0, _jsxRuntime.jsx)(_ProfileAvatar.default, {
              name: post.is_anonymous ? '익명' : post.nickname || post.username,
              isAnonymous: post.is_anonymous,
              size: 40
            }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
              style: styles.nameContainer,
              children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.userName,
                children: post.is_anonymous ? '익명' : post.nickname || post.username
              }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: styles.date,
                children: formatDate(post.created_at)
              })]
            })]
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.content,
          children: post.content
        }), post.image_url && (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: post.image_url
          },
          style: styles.image,
          resizeMode: "cover"
        }), post.emotions.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.emotionsContainer,
          children: post.emotions.map(function (emotion) {
            return (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.emotionTag, {
                backgroundColor: `${emotion.color}20`
              }],
              children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
                style: [styles.emotionText, {
                  color: emotion.color
                }],
                children: emotion.name
              })
            }, emotion.emotion_id);
          })
        }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.actions,
          children: [(0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
            style: styles.actionButton,
            onPress: handleLikePress,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.actionIcon, post.is_liked && styles.likedIcon],
              children: post.is_liked ? '♥' : '♡'
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.actionText, post.is_liked && styles.likedText],
              children: post.like_count > 0 ? `${post.like_count}` : '공감'
            })]
          }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
            style: styles.actionButton,
            children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.actionIcon,
              children: "\uD83D\uDCAC"
            }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.actionText,
              children: post.comment_count > 0 ? `${post.comment_count}` : '댓글'
            })]
          })]
        })]
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.commentsContainer,
        children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.commentsTitle,
          children: ["\uB313\uAE00 ", comments.length > 0 ? `(${comments.length})` : '']
        }), comments.length > 0 ? comments.map(function (comment) {
          return (0, _jsxRuntime.jsx)(_CommentItem.default, {
            id: comment.comment_id,
            content: comment.content,
            userName: comment.nickname || comment.username,
            isAnonymous: comment.is_anonymous,
            createdAt: comment.created_at
          }, comment.comment_id);
        }) : (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.emptyComments,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.emptyText,
            children: "\uCCAB \uBC88\uC9F8 \uB313\uAE00\uC744 \uC791\uC131\uD574\uBCF4\uC138\uC694!"
          })
        })]
      })]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.commentForm,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.anonymousContainer,
        children: (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: styles.anonymousButton,
          onPress: function onPress() {
            return setIsAnonymous(!isAnonymous);
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.anonymousCheck, isAnonymous && styles.anonymousChecked],
            children: isAnonymous && (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.checkmark,
              children: "\u2713"
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.anonymousText,
            children: "\uC775\uBA85"
          })]
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.inputContainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          style: styles.commentInput,
          placeholder: "\uB313\uAE00\uC744 \uC785\uB825\uD558\uC138\uC694...",
          value: commentText,
          onChangeText: setCommentText,
          multiline: true
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          style: [styles.submitButton, (!commentText.trim() || submitting) && styles.disabledButton],
          onPress: handleSubmitComment,
          disabled: !commentText.trim() || submitting,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.submitButtonText,
            children: submitting ? '전송 중' : '전송'
          })
        })]
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF'
  },
  scrollView: {
    flex: 1
  },
  postContainer: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE'
  },
  postHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12
  },
  userInfo: {
    flexDirection: 'row'
  },
  nameContainer: {
    marginLeft: 12,
    justifyContent: 'center'
  },
  userName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333333'
  },
  date: {
    fontSize: 12,
    color: '#999999',
    marginTop: 2
  },
  content: {
    fontSize: 16,
    lineHeight: 24,
    color: '#333333',
    marginBottom: 16
  },
  image: {
    width: '100%',
    height: 250,
    borderRadius: 8,
    marginBottom: 16
  },
  emotionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 16
  },
  emotionTag: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 16,
    marginRight: 8,
    marginBottom: 8
  },
  emotionText: {
    fontSize: 12,
    fontWeight: '500'
  },
  actions: {
    flexDirection: 'row',
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
    paddingTop: 12
  },
  actionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 20
  },
  actionIcon: {
    fontSize: 18,
    marginRight: 4,
    color: '#666666'
  },
  likedIcon: {
    color: '#FF6B6B'
  },
  actionText: {
    fontSize: 14,
    color: '#666666'
  },
  likedText: {
    color: '#FF6B6B'
  },
  commentsContainer: {
    padding: 16
  },
  commentsTitle: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 16,
    color: '#333333'
  },
  emptyComments: {
    padding: 20,
    alignItems: 'center'
  },
  emptyText: {
    color: '#999999',
    fontSize: 14
  },
  commentForm: {
    borderTopWidth: 1,
    borderTopColor: '#EEEEEE',
    padding: 12,
    backgroundColor: '#FFFFFF'
  },
  anonymousContainer: {
    marginBottom: 8
  },
  anonymousButton: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  anonymousCheck: {
    width: 20,
    height: 20,
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#CCCCCC',
    marginRight: 8,
    justifyContent: 'center',
    alignItems: 'center'
  },
  anonymousChecked: {
    backgroundColor: '#4A90E2',
    borderColor: '#4A90E2'
  },
  checkmark: {
    color: '#FFFFFF',
    fontSize: 12
  },
  anonymousText: {
    fontSize: 14,
    color: '#666666'
  },
  inputContainer: {
    flexDirection: 'row'
  },
  commentInput: {
    flex: 1,
    minHeight: 40,
    maxHeight: 100,
    borderWidth: 1,
    borderColor: '#DDDDDD',
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    fontSize: 14,
    color: '#333333',
    backgroundColor: '#FFFFFF'
  },
  submitButton: {
    marginLeft: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
    backgroundColor: '#4A90E2',
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center'
  },
  disabledButton: {
    backgroundColor: '#CCCCCC'
  },
  submitButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
    fontSize: 14
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20
  },
  errorText: {
    color: '#FF6B6B',
    fontSize: 16,
    marginBottom: 16,
    textAlign: 'center'
  }
});
var _default = exports.default = PostDetailScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,