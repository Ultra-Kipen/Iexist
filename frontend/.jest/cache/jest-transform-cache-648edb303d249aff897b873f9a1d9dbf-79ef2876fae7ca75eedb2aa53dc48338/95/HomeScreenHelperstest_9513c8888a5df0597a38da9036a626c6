baebe93276019c20203c141c3323306e
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn(),
    interceptors: {
      request: {
        use: jest.fn(),
        eject: jest.fn()
      },
      response: {
        use: jest.fn(),
        eject: jest.fn()
      }
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve('test_token');
    }),
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
var _HomeScreen = require("../../src/screens/HomeScreen");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen Helper Functions', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
    jest.clearAllMocks();
  });
  describe('handlePostSubmission', function () {
    it('returns true when content and emotion are provided', function () {
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = {
        label: 'ÌñâÎ≥µ',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      };
      var imageUrl = '';
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(true);
      expect(setIsLoading).toHaveBeenCalledWith(true);
      jest.advanceTimersByTime(1000);
      expect(setIsLoading).toHaveBeenCalledWith(false);
      expect(setIsDialogVisible).toHaveBeenCalledWith(true);
    });
    it('returns false when content is empty', function () {
      var content = '';
      var emotion = {
        label: 'ÌñâÎ≥µ',
        icon: 'emoticon-happy-outline',
        color: '#FFD700'
      };
      var imageUrl = '';
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(setIsDialogVisible).not.toHaveBeenCalled();
    });
    it('returns false when emotion is null', function () {
      var content = 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º';
      var emotion = null;
      var imageUrl = '';
      var setIsLoading = jest.fn();
      var setIsDialogVisible = jest.fn();
      var result = (0, _HomeScreen.handlePostSubmission)(content, emotion, imageUrl, setIsLoading, setIsDialogVisible);
      expect(result).toBe(false);
      expect(setIsLoading).not.toHaveBeenCalled();
      expect(setIsDialogVisible).not.toHaveBeenCalled();
    });
  });
  describe('handleImageUploadAction', function () {
    it('sets image URL', function () {
      var setImageUrl = jest.fn();
      (0, _HomeScreen.handleImageUploadAction)(setImageUrl);
      expect(setImageUrl).toHaveBeenCalledWith('https://via.placeholder.com/150');
    });
  });
  describe('handleLikeAction', function () {
    it('increments like count for the specified post', function () {
      var initialPosts = [{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º 1',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 5,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }, {
        id: 2,
        anonymousId: 'ÏùµÎ™Ö2',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º 2',
        emotion: 'Ïä¨Ìîî',
        emotionIcon: 'üò¢',
        image: '',
        likes: 10,
        comments: [],
        timestamp: '2ÏãúÍ∞Ñ Ï†Ñ'
      }];
      var setPosts = jest.fn();
      (0, _HomeScreen.handleLikeAction)(initialPosts, 1, setPosts);
      expect(setPosts).toHaveBeenCalledWith([{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º 1',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 6,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }, {
        id: 2,
        anonymousId: 'ÏùµÎ™Ö2',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º 2',
        emotion: 'Ïä¨Ìîî',
        emotionIcon: 'üò¢',
        image: '',
        likes: 10,
        comments: [],
        timestamp: '2ÏãúÍ∞Ñ Ï†Ñ'
      }]);
    });
  });
  describe('handleCommentAction', function () {
    it('adds a new comment to the specified post', function () {
      var initialPosts = [{
        id: 1,
        anonymousId: 'ÏùµÎ™Ö1',
        content: 'ÌÖåÏä§Ìä∏ Í≤åÏãúÎ¨º 1',
        emotion: 'ÌñâÎ≥µ',
        emotionIcon: 'üòä',
        image: '',
        likes: 5,
        comments: [],
        timestamp: '1ÏãúÍ∞Ñ Ï†Ñ'
      }];
      var setPosts = jest.fn();
      var commentContent = 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä';
      var originalDateNow = Date.now;
      Date.now = jest.fn(function () {
        return 123456789;
      });
      (0, _HomeScreen.handleCommentAction)(initialPosts, 1, commentContent, setPosts);
      Date.now = originalDateNow;
      var updatedPosts = setPosts.mock.calls[0][0];
      expect(updatedPosts[0].comments).toHaveLength(1);
      expect(updatedPosts[0].comments[0]).toEqual({
        id: 123456789,
        author: 'ÏùµÎ™Ö',
        content: 'ÌÖåÏä§Ìä∏ ÎåìÍ∏Ä'
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,