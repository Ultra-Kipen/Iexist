1d97fe59af01d68f6dc6cddf3d958427
_getJestObj().mock("../../src/services/api/client", function () {
  return {
    get: _globals.jest.fn(),
    post: _globals.jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _globals = require("@jest/globals");
var _ApiTestScreen = _interopRequireDefault(require("../../src/screens/ApiTestScreen"));
var _AuthContext = require("../../src/contexts/AuthContext");
var _client = _interopRequireDefault(require("../../src/services/api/client"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
(0, _globals.describe)('ApiTestScreen', function () {
  (0, _globals.beforeEach)(function () {
    _globals.jest.clearAllMocks();
  });
  (0, _globals.it)('renders correctly when user is authenticated', function () {
    var mockUser = {
      user_id: 1,
      username: 'testuser',
      email: 'test@example.com'
    };
    var authContextValue = {
      user: mockUser,
      isAuthenticated: true,
      isLoading: false,
      login: _globals.jest.fn(),
      register: _globals.jest.fn(),
      logout: _globals.jest.fn(),
      updateUser: _globals.jest.fn()
    };
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
        value: authContextValue,
        children: (0, _jsxRuntime.jsx)(_ApiTestScreen.default, {})
      })),
      getByText = _render.getByText;
    (0, _globals.expect)(getByText('API Test Screen')).toBeTruthy();
    (0, _globals.expect)(getByText('인증 상태: 로그인됨')).toBeTruthy();
    (0, _globals.expect)(getByText('사용자: testuser')).toBeTruthy();
  });
  (0, _globals.it)('renders correctly when user is not authenticated', function () {
    var authContextValue = {
      user: null,
      isAuthenticated: false,
      isLoading: false,
      login: _globals.jest.fn(),
      register: _globals.jest.fn(),
      logout: _globals.jest.fn(),
      updateUser: _globals.jest.fn()
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
        value: authContextValue,
        children: (0, _jsxRuntime.jsx)(_ApiTestScreen.default, {})
      })),
      getByText = _render2.getByText,
      queryByText = _render2.queryByText;
    (0, _globals.expect)(getByText('API Test Screen')).toBeTruthy();
    (0, _globals.expect)(getByText('인증 상태: 로그아웃')).toBeTruthy();
    (0, _globals.expect)(queryByText(/사용자:/)).toBeNull();
  });
  (0, _globals.it)('calls API and displays results when a test button is pressed', (0, _asyncToGenerator2.default)(function* () {
    var mockUser = {
      user_id: 1,
      username: 'testuser',
      email: 'test@example.com'
    };
    var authContextValue = {
      user: mockUser,
      isAuthenticated: true,
      isLoading: false,
      login: _globals.jest.fn(),
      register: _globals.jest.fn(),
      logout: _globals.jest.fn(),
      updateUser: _globals.jest.fn()
    };
    var mockApiResponse = {
      data: {
        message: 'Success!'
      }
    };
    _client.default.get.mockResolvedValueOnce(mockApiResponse);
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_AuthContext.AuthContext.Provider, {
        value: authContextValue,
        children: (0, _jsxRuntime.jsx)(_ApiTestScreen.default, {})
      })),
      getAllByRole = _render3.getAllByRole,
      findByText = _render3.findByText;
    var buttons = getAllByRole('button');
    _reactNative.fireEvent.press(buttons[0]);
    yield (0, _reactNative.waitFor)(function () {
      (0, _globals.expect)(_client.default.get).toHaveBeenCalledWith('/api/users/profile');
    }, {
      timeout: 10000
    });
    var resultText = yield findByText(/"message": "Success!"/, {}, {
      timeout: 10000
    });
    (0, _globals.expect)(resultText).toBeTruthy();
  }), 15000);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,