ce4bd69733942302f920cfda9c402339
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _Button = _interopRequireDefault(require("../../src/components/Button"));
var _jsxRuntime = require("react/jsx-runtime");
describe('Button 컴포넌트', function () {
  var mockOnPress = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('버튼이 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD14C\uC2A4\uD2B8 \uBC84\uD2BC"
      })),
      getByText = _render.getByText;
    var buttonText = getByText('테스트 버튼');
    expect(buttonText).toBeDefined();
  });
  it('버튼 클릭 시 onPress 함수가 호출되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD14C\uC2A4\uD2B8 \uBC84\uD2BC"
      })),
      getByText = _render2.getByText;
    var buttonText = getByText('테스트 버튼');
    _reactNative.fireEvent.press(buttonText);
    expect(mockOnPress).toHaveBeenCalledTimes(1);
  });
  it('비활성화된 버튼은 onPress 함수를 호출하지 않아야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uBE44\uD65C\uC131\uD654 \uBC84\uD2BC",
        disabled: true
      })),
      getByText = _render3.getByText;
    var buttonText = getByText('비활성화 버튼');
    _reactNative.fireEvent.press(buttonText);
    expect(mockOnPress).not.toHaveBeenCalled();
  });
  it('로딩 상태의 버튼은 텍스트를 숨겨야 함', function () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uB85C\uB529 \uBC84\uD2BC",
        loading: true
      })),
      queryByText = _render4.queryByText;
    var buttonText = queryByText('로딩 버튼');
    expect(buttonText).toBeNull();
  });
  it('primary 타입 버튼이 렌더링되어야 함', function () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD504\uB77C\uC774\uBA38\uB9AC \uBC84\uD2BC",
        type: "primary"
      })),
      getByText = _render5.getByText;
    var buttonText = getByText('프라이머리 버튼');
    expect(buttonText).toBeDefined();
  });
  it('secondary 타입 버튼이 렌더링되어야 함', function () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC138\uCEE8\uB354\uB9AC \uBC84\uD2BC",
        type: "secondary"
      })),
      getByText = _render6.getByText;
    var buttonText = getByText('세컨더리 버튼');
    expect(buttonText).toBeDefined();
  });
  it('outline 타입 버튼이 렌더링되어야 함', function () {
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC544\uC6C3\uB77C\uC778 \uBC84\uD2BC",
        type: "outline"
      })),
      getByText = _render7.getByText;
    var buttonText = getByText('아웃라인 버튼');
    expect(buttonText).toBeDefined();
  });
  it('text 타입 버튼이 렌더링되어야 함', function () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD14D\uC2A4\uD2B8 \uBC84\uD2BC",
        type: "text"
      })),
      getByText = _render8.getByText;
    var buttonText = getByText('텍스트 버튼');
    expect(buttonText).toBeDefined();
  });
  it('small 크기 버튼이 렌더링되어야 함', function () {
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC791\uC740 \uBC84\uD2BC",
        size: "small"
      })),
      getByText = _render9.getByText;
    var buttonText = getByText('작은 버튼');
    expect(buttonText).toBeDefined();
  });
  it('large 크기 버튼이 렌더링되어야 함', function () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uD070 \uBC84\uD2BC",
        size: "large"
      })),
      getByText = _render10.getByText;
    var buttonText = getByText('큰 버튼');
    expect(buttonText).toBeDefined();
  });
  it('커스텀 스타일이 적용된 버튼이 렌더링되어야 함', function () {
    var customStyle = {
      backgroundColor: '#FF5733',
      borderRadius: 20
    };
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uCEE4\uC2A4\uD140 \uC2A4\uD0C0\uC77C \uBC84\uD2BC",
        style: customStyle
      })),
      getByText = _render11.getByText;
    var buttonText = getByText('커스텀 스타일 버튼');
    expect(buttonText).toBeDefined();
  });
  it('커스텀 텍스트 스타일이 적용된 버튼이 렌더링되어야 함', function () {
    var _render12 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uCEE4\uC2A4\uD140 \uD14D\uC2A4\uD2B8 \uC2A4\uD0C0\uC77C",
        textStyle: {
          fontSize: 18,
          fontWeight: 'bold',
          color: '#FF0000'
        }
      })),
      getByText = _render12.getByText;
    var buttonText = getByText('커스텀 텍스트 스타일');
    expect(buttonText).toBeDefined();
  });
  it('leftIcon이 있는 버튼이 올바르게 렌더링되어야 함', function () {
    var leftIcon = (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "left-icon"
    });
    var _render13 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC67C\uCABD \uC544\uC774\uCF58 \uBC84\uD2BC",
        leftIcon: leftIcon
      })),
      getByTestId = _render13.getByTestId,
      getByText = _render13.getByText;
    var icon = getByTestId('left-icon');
    expect(icon).toBeDefined();
    var buttonText = getByText('왼쪽 아이콘 버튼');
    expect(buttonText).toBeDefined();
  });
  it('rightIcon이 있는 버튼이 올바르게 렌더링되어야 함', function () {
    var rightIcon = (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "right-icon"
    });
    var _render14 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uC624\uB978\uCABD \uC544\uC774\uCF58 \uBC84\uD2BC",
        rightIcon: rightIcon
      })),
      getByTestId = _render14.getByTestId,
      getByText = _render14.getByText;
    var icon = getByTestId('right-icon');
    expect(icon).toBeDefined();
    var buttonText = getByText('오른쪽 아이콘 버튼');
    expect(buttonText).toBeDefined();
  });
  it('로딩 상태에서는 아이콘이 표시되지 않아야 함', function () {
    var leftIcon = (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "left-icon"
    });
    var rightIcon = (0, _jsxRuntime.jsx)(_reactNative2.View, {
      testID: "right-icon"
    });
    var _render15 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Button.default, {
        onPress: mockOnPress,
        title: "\uB85C\uB529 \uC0C1\uD0DC \uC544\uC774\uCF58 \uBC84\uD2BC",
        leftIcon: leftIcon,
        rightIcon: rightIcon,
        loading: true
      })),
      queryByTestId = _render15.queryByTestId;
    var leftIconElement = queryByTestId('left-icon');
    var rightIconElement = queryByTestId('right-icon');
    expect(leftIconElement).toBeNull();
    expect(rightIconElement).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,