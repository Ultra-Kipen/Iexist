cddbffc5e2a9d1c5016bac33248dbb3a
var _error = require("../../../src/utils/error");
describe('Error utils', function () {
  describe('handleApiError', function () {
    it('should extract error message from API response', function () {
      var error = {
        response: {
          data: {
            message: '사용자 인증에 실패했습니다.'
          }
        }
      };
      var result = (0, _error.handleApiError)(error);
      expect(result).toBe('사용자 인증에 실패했습니다.');
    });
    it('should extract error message from nested error object', function () {
      var error = {
        response: {
          data: {
            error: {
              message: '요청한 리소스를 찾을 수 없습니다.'
            }
          }
        }
      };
      var result = (0, _error.handleApiError)(error);
      expect(result).toBe('요청한 리소스를 찾을 수 없습니다.');
    });
    it('should handle network errors', function () {
      var error = {
        message: 'Network Error'
      };
      var result = (0, _error.handleApiError)(error);
      expect(result).toBe('네트워크 연결에 문제가 있습니다. 인터넷 연결을 확인해주세요.');
    });
    it('should return default message for unknown errors', function () {
      var error = {};
      var result = (0, _error.handleApiError)(error);
      expect(result).toBe('오류가 발생했습니다. 다시 시도해주세요.');
    });
  });
  describe('isNetworkError', function () {
    it('should identify network errors correctly', function () {
      expect((0, _error.isNetworkError)({
        message: 'Network Error'
      })).toBe(true);
      expect((0, _error.isNetworkError)({
        message: 'Failed to fetch'
      })).toBe(true);
      expect((0, _error.isNetworkError)({
        message: 'ECONNREFUSED'
      })).toBe(true);
    });
    it('should reject non-network errors', function () {
      expect((0, _error.isNetworkError)({
        message: 'Invalid credentials'
      })).toBe(false);
      expect((0, _error.isNetworkError)({
        code: 404
      })).toBe(false);
      expect((0, _error.isNetworkError)({})).toBe(false);
    });
  });
  describe('formatErrorMessage', function () {
    it('should format standard error messages', function () {
      expect((0, _error.formatErrorMessage)('Invalid email')).toBe('Invalid email');
    });
    it('should format error codes with messages', function () {
      expect((0, _error.formatErrorMessage)('ERR_AUTH_001')).toBe('인증 오류가 발생했습니다. (ERR_AUTH_001)');
    });
    it('should handle custom error format rules', function () {
      var customRules = {
        ERR_AUTH_001: '로그인에 실패했습니다. 아이디와 비밀번호를 확인해주세요.',
        ERR_NET_001: '서버 연결에 실패했습니다. 나중에 다시 시도해주세요.'
      };
      expect((0, _error.formatErrorMessage)('ERR_AUTH_001', customRules)).toBe('로그인에 실패했습니다. 아이디와 비밀번호를 확인해주세요.');
      expect((0, _error.formatErrorMessage)('ERR_NET_001', customRules)).toBe('서버 연결에 실패했습니다. 나중에 다시 시도해주세요.');
      expect((0, _error.formatErrorMessage)('ERR_UNKNOWN', customRules)).toBe('오류가 발생했습니다. (ERR_UNKNOWN)');
    });
  });
  describe('ApiError', function () {
    it('should create correct error instance', function () {
      var apiError = new _error.ApiError('Not found', 404);
      expect(apiError.message).toBe('Not found');
      expect(apiError.statusCode).toBe(404);
      expect(apiError instanceof Error).toBe(true);
    });
    it('should include additional data if provided', function () {
      var apiError = new _error.ApiError('Validation error', 400, {
        fields: ['email', 'password']
      });
      expect(apiError.message).toBe('Validation error');
      expect(apiError.statusCode).toBe(400);
      expect(apiError.data).toEqual({
        fields: ['email', 'password']
      });
    });
  });
  describe('createErrorHandler', function () {
    it('should create a function that handles errors correctly', function () {
      var onError = jest.fn();
      var defaultMessage = '기본 오류 메시지';
      var errorHandler = (0, _error.createErrorHandler)(onError, defaultMessage);
      var error = new Error('테스트 오류');
      errorHandler(error);
      expect(onError).toHaveBeenCalledWith('테스트 오류');
      onError.mockClear();
      var apiError = {
        response: {
          data: {
            message: 'API 오류 메시지'
          }
        }
      };
      errorHandler(apiError);
      expect(onError).toHaveBeenCalledWith('API 오류 메시지');
      onError.mockClear();
      errorHandler({});
      expect(onError).toHaveBeenCalledWith(defaultMessage);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,