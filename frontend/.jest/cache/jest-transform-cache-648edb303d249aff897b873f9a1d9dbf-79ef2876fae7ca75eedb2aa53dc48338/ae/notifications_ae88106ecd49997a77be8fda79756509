b33907fc9d5de5ab69a70c969ec752fd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.markNotificationAsRead = exports.markAllNotificationsAsRead = exports.fetchNotifications = exports.deleteNotification = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _index = require("./index");
var _error = require("../utils/error");
var fetchNotifications = exports.fetchNotifications = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (dispatch) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      var response = yield fetch('/api/notifications', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (!response.ok) {
        throw new Error('알림을 가져오는데 실패했습니다.');
      }
      var data = yield response.json();
      data.forEach(function (notification) {
        dispatch({
          type: _index.ActionType.ADD_NOTIFICATION,
          payload: notification
        });
      });
      return data;
    } catch (error) {
      var appError = (0, _error.handleApiError)(error);
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: appError.message
      });
      throw appError;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function fetchNotifications(_x) {
    return _ref.apply(this, arguments);
  };
}();
var markNotificationAsRead = exports.markNotificationAsRead = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (dispatch, notificationId) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      var response = yield fetch(`/api/notifications/${notificationId}/read`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (!response.ok) {
        throw new Error('알림을 읽음 표시하는데 실패했습니다.');
      }
      dispatch({
        type: _index.ActionType.REMOVE_NOTIFICATION,
        payload: notificationId
      });
      var updatedNotification = yield response.json();
      dispatch({
        type: _index.ActionType.ADD_NOTIFICATION,
        payload: updatedNotification
      });
      return updatedNotification;
    } catch (error) {
      var appError = (0, _error.handleApiError)(error);
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: appError.message
      });
      throw appError;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function markNotificationAsRead(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
var markAllNotificationsAsRead = exports.markAllNotificationsAsRead = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (dispatch) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      var response = yield fetch('/api/notifications/read-all', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (!response.ok) {
        throw new Error('모든 알림을 읽음 표시하는데 실패했습니다.');
      }
      dispatch({
        type: _index.ActionType.CLEAR_NOTIFICATIONS
      });
      var updatedNotifications = yield response.json();
      updatedNotifications.forEach(function (notification) {
        dispatch({
          type: _index.ActionType.ADD_NOTIFICATION,
          payload: notification
        });
      });
      return updatedNotifications;
    } catch (error) {
      var appError = (0, _error.handleApiError)(error);
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: appError.message
      });
      throw appError;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function markAllNotificationsAsRead(_x4) {
    return _ref3.apply(this, arguments);
  };
}();
var deleteNotification = exports.deleteNotification = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (dispatch, notificationId) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      var response = yield fetch(`/api/notifications/${notificationId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (!response.ok) {
        throw new Error('알림을 삭제하는데 실패했습니다.');
      }
      dispatch({
        type: _index.ActionType.REMOVE_NOTIFICATION,
        payload: notificationId
      });
      return true;
    } catch (error) {
      var appError = (0, _error.handleApiError)(error);
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: appError.message
      });
      throw appError;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function deleteNotification(_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,