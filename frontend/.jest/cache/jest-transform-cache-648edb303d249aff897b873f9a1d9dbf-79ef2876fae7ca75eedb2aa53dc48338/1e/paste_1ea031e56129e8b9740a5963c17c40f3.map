{"version":3,"names":["_errors","require","_hostComponentNames","_pointerEvents","_textInput","_nativeState","_eventBuilder","_utils","paste","_x","_x2","_paste","apply","arguments","_asyncToGenerator2","default","element","text","isHostTextInput","ErrorWithStack","type","isEditableTextInput","isPointerEventEnabled","dispatchEvent","EventBuilder","Common","focus","textToClear","getTextInputValue","rangeToClear","start","end","length","TextInput","selectionChange","nativeState","valueForElement","set","change","rangeAfter","isMultiline","props","multiline","contentSize","getTextContentSize","contentSizeChange","wait","config","endEditing","blur"],"sources":["../../src/user-event/paste.ts"],"sourcesContent":["import type { ReactTestInstance } from 'react-test-renderer';\n\nimport { ErrorWithStack } from '../helpers/errors';\nimport { isHostTextInput } from '../helpers/host-component-names';\nimport { isPointerEventEnabled } from '../helpers/pointer-events';\nimport { getTextInputValue, isEditableTextInput } from '../helpers/text-input';\nimport { nativeState } from '../native-state';\nimport { EventBuilder } from './event-builder';\nimport type { UserEventInstance } from './setup';\nimport { dispatchEvent, getTextContentSize, wait } from './utils';\n\nexport async function paste(\n  this: UserEventInstance,\n  element: ReactTestInstance,\n  text: string,\n): Promise<void> {\n  if (!isHostTextInput(element)) {\n    throw new ErrorWithStack(\n      `paste() only supports host \"TextInput\" elements. Passed element has type: \"${element.type}\".`,\n      paste,\n    );\n  }\n\n  if (!isEditableTextInput(element) || !isPointerEventEnabled(element)) {\n    return;\n  }\n\n  // 1. Enter element\n  dispatchEvent(element, 'focus', EventBuilder.Common.focus());\n\n  // 2. Select all\n  const textToClear = getTextInputValue(element);\n  const rangeToClear = { start: 0, end: textToClear.length };\n  dispatchEvent(element, 'selectionChange', EventBuilder.TextInput.selectionChange(rangeToClear));\n\n  // 3. Paste the text\n  nativeState.valueForElement.set(element, text);\n  dispatchEvent(element, 'change', EventBuilder.TextInput.change(text));\n  dispatchEvent(element, 'changeText', text);\n\n  const rangeAfter = { start: text.length, end: text.length };\n  dispatchEvent(element, 'selectionChange', EventBuilder.TextInput.selectionChange(rangeAfter));\n\n  // According to the docs only multiline TextInput emits contentSizeChange event\n  // @see: https://reactnative.dev/docs/textinput#oncontentsizechange\n  const isMultiline = element.props.multiline === true;\n  if (isMultiline) {\n    const contentSize = getTextContentSize(text);\n    dispatchEvent(\n      element,\n      'contentSizeChange',\n      EventBuilder.TextInput.contentSizeChange(contentSize),\n    );\n  }\n\n  // 4. Exit element\n  await wait(this.config);\n  dispatchEvent(element, 'endEditing', EventBuilder.TextInput.endEditing(text));\n  dispatchEvent(element, 'blur', EventBuilder.Common.blur());\n}\n"],"mappings":"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","ignoreList":[]}