5fc616df0a5c8adfe4c7821656beed5f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.paste = paste;
var _errors = require("../helpers/errors");
var _hostComponentNames = require("../helpers/host-component-names");
var _pointerEvents = require("../helpers/pointer-events");
var _textInput = require("../helpers/text-input");
var _nativeState = require("../native-state");
var _eventBuilder = require("./event-builder");
var _utils = require("./utils");
function paste(_x, _x2) {
  return _paste.apply(this, arguments);
}
function _paste() {
  _paste = (0, _asyncToGenerator2.default)(function* (element, text) {
    if (!(0, _hostComponentNames.isHostTextInput)(element)) {
      throw new _errors.ErrorWithStack(`paste() only supports host "TextInput" elements. Passed element has type: "${element.type}".`, paste);
    }
    if (!(0, _textInput.isEditableTextInput)(element) || !(0, _pointerEvents.isPointerEventEnabled)(element)) {
      return;
    }
    (0, _utils.dispatchEvent)(element, 'focus', _eventBuilder.EventBuilder.Common.focus());
    var textToClear = (0, _textInput.getTextInputValue)(element);
    var rangeToClear = {
      start: 0,
      end: textToClear.length
    };
    (0, _utils.dispatchEvent)(element, 'selectionChange', _eventBuilder.EventBuilder.TextInput.selectionChange(rangeToClear));
    _nativeState.nativeState.valueForElement.set(element, text);
    (0, _utils.dispatchEvent)(element, 'change', _eventBuilder.EventBuilder.TextInput.change(text));
    (0, _utils.dispatchEvent)(element, 'changeText', text);
    var rangeAfter = {
      start: text.length,
      end: text.length
    };
    (0, _utils.dispatchEvent)(element, 'selectionChange', _eventBuilder.EventBuilder.TextInput.selectionChange(rangeAfter));
    var isMultiline = element.props.multiline === true;
    if (isMultiline) {
      var contentSize = (0, _utils.getTextContentSize)(text);
      (0, _utils.dispatchEvent)(element, 'contentSizeChange', _eventBuilder.EventBuilder.TextInput.contentSizeChange(contentSize));
    }
    yield (0, _utils.wait)(this.config);
    (0, _utils.dispatchEvent)(element, 'endEditing', _eventBuilder.EventBuilder.TextInput.endEditing(text));
    (0, _utils.dispatchEvent)(element, 'blur', _eventBuilder.EventBuilder.Common.blur());
  });
  return _paste.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXJyb3JzIiwicmVxdWlyZSIsIl9ob3N0Q29tcG9uZW50TmFtZXMiLCJfcG9pbnRlckV2ZW50cyIsIl90ZXh0SW5wdXQiLCJfbmF0aXZlU3RhdGUiLCJfZXZlbnRCdWlsZGVyIiwiX3V0aWxzIiwicGFzdGUiLCJfeCIsIl94MiIsIl9wYXN0ZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiZGVmYXVsdCIsImVsZW1lbnQiLCJ0ZXh0IiwiaXNIb3N0VGV4dElucHV0IiwiRXJyb3JXaXRoU3RhY2siLCJ0eXBlIiwiaXNFZGl0YWJsZVRleHRJbnB1dCIsImlzUG9pbnRlckV2ZW50RW5hYmxlZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudEJ1aWxkZXIiLCJDb21tb24iLCJmb2N1cyIsInRleHRUb0NsZWFyIiwiZ2V0VGV4dElucHV0VmFsdWUiLCJyYW5nZVRvQ2xlYXIiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsIlRleHRJbnB1dCIsInNlbGVjdGlvbkNoYW5nZSIsIm5hdGl2ZVN0YXRlIiwidmFsdWVGb3JFbGVtZW50Iiwic2V0IiwiY2hhbmdlIiwicmFuZ2VBZnRlciIsImlzTXVsdGlsaW5lIiwicHJvcHMiLCJtdWx0aWxpbmUiLCJjb250ZW50U2l6ZSIsImdldFRleHRDb250ZW50U2l6ZSIsImNvbnRlbnRTaXplQ2hhbmdlIiwid2FpdCIsImNvbmZpZyIsImVuZEVkaXRpbmciLCJibHVyIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzZXItZXZlbnQvcGFzdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWFjdFRlc3RJbnN0YW5jZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInO1xuXG5pbXBvcnQgeyBFcnJvcldpdGhTdGFjayB9IGZyb20gJy4uL2hlbHBlcnMvZXJyb3JzJztcbmltcG9ydCB7IGlzSG9zdFRleHRJbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMvaG9zdC1jb21wb25lbnQtbmFtZXMnO1xuaW1wb3J0IHsgaXNQb2ludGVyRXZlbnRFbmFibGVkIH0gZnJvbSAnLi4vaGVscGVycy9wb2ludGVyLWV2ZW50cyc7XG5pbXBvcnQgeyBnZXRUZXh0SW5wdXRWYWx1ZSwgaXNFZGl0YWJsZVRleHRJbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMvdGV4dC1pbnB1dCc7XG5pbXBvcnQgeyBuYXRpdmVTdGF0ZSB9IGZyb20gJy4uL25hdGl2ZS1zdGF0ZSc7XG5pbXBvcnQgeyBFdmVudEJ1aWxkZXIgfSBmcm9tICcuL2V2ZW50LWJ1aWxkZXInO1xuaW1wb3J0IHR5cGUgeyBVc2VyRXZlbnRJbnN0YW5jZSB9IGZyb20gJy4vc2V0dXAnO1xuaW1wb3J0IHsgZGlzcGF0Y2hFdmVudCwgZ2V0VGV4dENvbnRlbnRTaXplLCB3YWl0IH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXN0ZShcbiAgdGhpczogVXNlckV2ZW50SW5zdGFuY2UsXG4gIGVsZW1lbnQ6IFJlYWN0VGVzdEluc3RhbmNlLFxuICB0ZXh0OiBzdHJpbmcsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKCFpc0hvc3RUZXh0SW5wdXQoZWxlbWVudCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3JXaXRoU3RhY2soXG4gICAgICBgcGFzdGUoKSBvbmx5IHN1cHBvcnRzIGhvc3QgXCJUZXh0SW5wdXRcIiBlbGVtZW50cy4gUGFzc2VkIGVsZW1lbnQgaGFzIHR5cGU6IFwiJHtlbGVtZW50LnR5cGV9XCIuYCxcbiAgICAgIHBhc3RlLFxuICAgICk7XG4gIH1cblxuICBpZiAoIWlzRWRpdGFibGVUZXh0SW5wdXQoZWxlbWVudCkgfHwgIWlzUG9pbnRlckV2ZW50RW5hYmxlZChlbGVtZW50KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIDEuIEVudGVyIGVsZW1lbnRcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnZm9jdXMnLCBFdmVudEJ1aWxkZXIuQ29tbW9uLmZvY3VzKCkpO1xuXG4gIC8vIDIuIFNlbGVjdCBhbGxcbiAgY29uc3QgdGV4dFRvQ2xlYXIgPSBnZXRUZXh0SW5wdXRWYWx1ZShlbGVtZW50KTtcbiAgY29uc3QgcmFuZ2VUb0NsZWFyID0geyBzdGFydDogMCwgZW5kOiB0ZXh0VG9DbGVhci5sZW5ndGggfTtcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnc2VsZWN0aW9uQ2hhbmdlJywgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC5zZWxlY3Rpb25DaGFuZ2UocmFuZ2VUb0NsZWFyKSk7XG5cbiAgLy8gMy4gUGFzdGUgdGhlIHRleHRcbiAgbmF0aXZlU3RhdGUudmFsdWVGb3JFbGVtZW50LnNldChlbGVtZW50LCB0ZXh0KTtcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnY2hhbmdlJywgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC5jaGFuZ2UodGV4dCkpO1xuICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsICdjaGFuZ2VUZXh0JywgdGV4dCk7XG5cbiAgY29uc3QgcmFuZ2VBZnRlciA9IHsgc3RhcnQ6IHRleHQubGVuZ3RoLCBlbmQ6IHRleHQubGVuZ3RoIH07XG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ3NlbGVjdGlvbkNoYW5nZScsIEV2ZW50QnVpbGRlci5UZXh0SW5wdXQuc2VsZWN0aW9uQ2hhbmdlKHJhbmdlQWZ0ZXIpKTtcblxuICAvLyBBY2NvcmRpbmcgdG8gdGhlIGRvY3Mgb25seSBtdWx0aWxpbmUgVGV4dElucHV0IGVtaXRzIGNvbnRlbnRTaXplQ2hhbmdlIGV2ZW50XG4gIC8vIEBzZWU6IGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvdGV4dGlucHV0I29uY29udGVudHNpemVjaGFuZ2VcbiAgY29uc3QgaXNNdWx0aWxpbmUgPSBlbGVtZW50LnByb3BzLm11bHRpbGluZSA9PT0gdHJ1ZTtcbiAgaWYgKGlzTXVsdGlsaW5lKSB7XG4gICAgY29uc3QgY29udGVudFNpemUgPSBnZXRUZXh0Q29udGVudFNpemUodGV4dCk7XG4gICAgZGlzcGF0Y2hFdmVudChcbiAgICAgIGVsZW1lbnQsXG4gICAgICAnY29udGVudFNpemVDaGFuZ2UnLFxuICAgICAgRXZlbnRCdWlsZGVyLlRleHRJbnB1dC5jb250ZW50U2l6ZUNoYW5nZShjb250ZW50U2l6ZSksXG4gICAgKTtcbiAgfVxuXG4gIC8vIDQuIEV4aXQgZWxlbWVudFxuICBhd2FpdCB3YWl0KHRoaXMuY29uZmlnKTtcbiAgZGlzcGF0Y2hFdmVudChlbGVtZW50LCAnZW5kRWRpdGluZycsIEV2ZW50QnVpbGRlci5UZXh0SW5wdXQuZW5kRWRpdGluZyh0ZXh0KSk7XG4gIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgJ2JsdXInLCBFdmVudEJ1aWxkZXIuQ29tbW9uLmJsdXIoKSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsbUJBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLGNBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLFlBQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLGFBQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLE1BQUEsR0FBQU4sT0FBQTtBQUFBLFNBRXNCTyxLQUFLQSxDQUFBQyxFQUFBLEVBQUFDLEdBQUE7RUFBQSxPQUFBQyxNQUFBLENBQUFDLEtBQUEsT0FBQUMsU0FBQTtBQUFBO0FBQUEsU0FBQUYsT0FBQTtFQUFBQSxNQUFBLE9BQUFHLGtCQUFBLENBQUFDLE9BQUEsRUFBcEIsV0FFTEMsT0FBMEIsRUFDMUJDLElBQVksRUFDRztJQUNmLElBQUksQ0FBQyxJQUFBZixtQkFBQSxDQUFBZ0IsZUFBZSxFQUFDRixPQUFPLENBQUMsRUFBRTtNQUM3QixNQUFNLElBQUloQixPQUFBLENBQUFtQixjQUFjLENBQ3RCLDhFQUE4RUgsT0FBTyxDQUFDSSxJQUFJLElBQUksRUFDOUZaLEtBQ0YsQ0FBQztJQUNIO0lBRUEsSUFBSSxDQUFDLElBQUFKLFVBQUEsQ0FBQWlCLG1CQUFtQixFQUFDTCxPQUFPLENBQUMsSUFBSSxD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