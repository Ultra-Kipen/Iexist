0cb0cea09102951338dafd3d3b729d22
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.register = exports.logout = exports.login = exports.getCurrentUser = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _index = require("./index");
var _storage = require("../utils/storage");
var login = exports.login = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (dispatch, email, password) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      dispatch({
        type: _index.ActionType.CLEAR_ERROR
      });
      var response = yield fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          email: email,
          password: password
        })
      });
      if (!response.ok) {
        throw new Error('로그인에 실패했습니다.');
      }
      var data = yield response.json();
      yield (0, _storage.setAuthToken)(data.token);
      yield (0, _storage.setUserData)(data.user);
      dispatch({
        type: _index.ActionType.SET_AUTHENTICATED,
        payload: true
      });
      dispatch({
        type: _index.ActionType.SET_USER,
        payload: data.user
      });
      return data;
    } catch (error) {
      var errorMessage = error instanceof Error ? error.message : '로그인에 실패했습니다.';
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: errorMessage
      });
      throw error;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function login(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var logout = exports.logout = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (dispatch) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      yield (0, _storage.removeAuthToken)();
      dispatch({
        type: _index.ActionType.RESET_STATE
      });
    } catch (error) {
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: '로그아웃 중 오류가 발생했습니다.'
      });
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function logout(_x4) {
    return _ref2.apply(this, arguments);
  };
}();
var register = exports.register = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (dispatch, userData) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      dispatch({
        type: _index.ActionType.CLEAR_ERROR
      });
      var response = yield fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)
      });
      if (!response.ok) {
        throw new Error('회원가입에 실패했습니다.');
      }
      var data = yield response.json();
      yield (0, _storage.setAuthToken)(data.token);
      yield (0, _storage.setUserData)(data.user);
      dispatch({
        type: _index.ActionType.SET_AUTHENTICATED,
        payload: true
      });
      dispatch({
        type: _index.ActionType.SET_USER,
        payload: data.user
      });
      return data;
    } catch (error) {
      var errorMessage = error instanceof Error ? error.message : '회원가입에 실패했습니다.';
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: errorMessage
      });
      throw error;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function register(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
var getCurrentUser = exports.getCurrentUser = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (dispatch) {
    try {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: true
      });
      var response = yield fetch('/api/users/me', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (!response.ok) {
        throw new Error('사용자 정보를 가져오는데 실패했습니다.');
      }
      var data = yield response.json();
      dispatch({
        type: _index.ActionType.SET_USER,
        payload: data
      });
      return data;
    } catch (error) {
      var errorMessage = error instanceof Error ? error.message : '사용자 정보를 가져오는데 실패했습니다.';
      dispatch({
        type: _index.ActionType.SET_ERROR,
        payload: errorMessage
      });
      throw error;
    } finally {
      dispatch({
        type: _index.ActionType.SET_LOADING,
        payload: false
      });
    }
  });
  return function getCurrentUser(_x7) {
    return _ref4.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,