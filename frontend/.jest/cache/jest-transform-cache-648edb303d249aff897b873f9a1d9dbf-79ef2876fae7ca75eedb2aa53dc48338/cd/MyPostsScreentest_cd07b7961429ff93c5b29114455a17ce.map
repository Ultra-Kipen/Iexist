{"version":3,"names":["_getJestObj","mock","mockPaper","Button","_ref","onPress","children","_jsxRuntime","jsx","onClick","Card","Content","_ref2","Actions","_ref3","Chip","_ref4","Dialog","Title","_ref5","_ref6","_ref7","Portal","_ref8","Object","assign","_ref9","_ref10","visible","useNavigation","navigate","jest","fn","goBack","addListener","getMyPosts","Promise","resolve","data","posts","post_id","content","emotion_summary","like_count","comment_count","created_at","deletePost","success","alert","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_MyPostsScreen","_postService","_require","describe","beforeEach","clearAllMocks","it","default","mockNavigation","render","navigation","route","waitFor","expect","postService","toHaveBeenCalled","timeout"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport MyPostsScreen from '../../src/screens/MyPostsScreen';\r\nimport postService from '../../src/services/api/postService';\r\nimport { Alert } from 'react-native';\r\n\r\n// Paper 컴포넌트 모킹\r\njest.mock('react-native-paper', () => {\r\n  const mockPaper = {\r\n    Button: ({ onPress, children }) => <button onClick={onPress}>{children}</button>,\r\n    Card: {\r\n      Content: ({ children }) => <div>{children}</div>,\r\n      Actions: ({ children }) => <div>{children}</div>,\r\n    },\r\n    Chip: ({ children }) => <span>{children}</span>,\r\n    Dialog: {\r\n      Title: ({ children }) => <h2>{children}</h2>,\r\n      Content: ({ children }) => <div>{children}</div>,\r\n      Actions: ({ children }) => <div>{children}</div>,\r\n    },\r\n    Portal: ({ children }) => <div>{children}</div>,\r\n  };\r\n\r\n  mockPaper.Card.Content = mockPaper.Card.Content;\r\n  mockPaper.Card.Actions = mockPaper.Card.Actions;\r\n  mockPaper.Dialog.Title = mockPaper.Dialog.Title;\r\n  mockPaper.Dialog.Content = mockPaper.Dialog.Content;\r\n  mockPaper.Dialog.Actions = mockPaper.Dialog.Actions;\r\n  mockPaper.Card = Object.assign(\r\n    ({ children }) => <div>{children}</div>,\r\n    mockPaper.Card\r\n  );\r\n  mockPaper.Dialog = Object.assign(\r\n    ({ children, visible }) => visible ? <div>{children}</div> : null,\r\n    mockPaper.Dialog\r\n  );\r\n\r\n  return mockPaper;\r\n});\r\n\r\n// 네비게이션 모킹\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: jest.fn(),\r\n    goBack: jest.fn(),\r\n    addListener: jest.fn(() => jest.fn()),\r\n  }),\r\n}));\r\n\r\n// 벡터 아이콘 모킹\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'Icon');\r\n\r\n// 서비스 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn(() => Promise.resolve({\r\n    data: {\r\n      posts: [\r\n        {\r\n          post_id: 1,\r\n          content: '첫 번째 테스트 게시물입니다.',\r\n          emotion_summary: '행복',\r\n          like_count: 5,\r\n          comment_count: 2,\r\n          created_at: '2025-03-01T12:00:00Z',\r\n        }\r\n      ]\r\n    }\r\n  })),\r\n  deletePost: jest.fn(() => Promise.resolve({ data: { success: true } })),\r\n}));\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// 단순 테스트로 시작\r\ndescribe('MyPostsScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('fetches posts on mount', async () => {\r\n    const mockNavigation = {\r\n      navigate: jest.fn(),\r\n      addListener: jest.fn(() => jest.fn()),\r\n    };\r\n    \r\n    render(<MyPostsScreen navigation={mockNavigation} route={{}} />);\r\n    \r\n    await waitFor(() => {\r\n      expect(postService.getMyPosts).toHaveBeenCalled();\r\n    }, { timeout: 1000 });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}