61625128d773a4522c0d0dc8e647db6e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionSelector = _interopRequireDefault(require("../../src/components/EmotionSelector"));
var _jsxRuntime = require("react/jsx-runtime");
var mockEmotions = [{
  id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}, {
  id: 3,
  name: '위로',
  icon: 'hand-peace',
  color: '#87CEEB'
}];
describe('EmotionSelector 컴포넌트', function () {
  it('감정 목록이 올바르게 렌더링되어야 합니다', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [],
        onSelect: jest.fn()
      })),
      getByText = _render.getByText;
    expect(getByText('행복')).toBeTruthy();
    expect(getByText('감사')).toBeTruthy();
    expect(getByText('위로')).toBeTruthy();
  });
  it('선택된 감정은 시각적으로 구분되어야 합니다', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [1],
        onSelect: jest.fn()
      })),
      getByText = _render2.getByText;
    var selectedEmotionName = getByText('행복');
    expect(selectedEmotionName).toBeTruthy();
  });
  it('감정을 클릭하면 onSelect 콜백이 호출되어야 합니다', function () {
    var mockOnSelect = jest.fn();
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [],
        onSelect: mockOnSelect
      })),
      getByText = _render3.getByText;
    _reactNative.fireEvent.press(getByText('행복'));
    expect(mockOnSelect).toHaveBeenCalledWith(1);
  });
  it('multiple=false일 경우 한 번에 하나의 감정만 선택 가능해야 합니다', function () {
    var mockOnSelect = jest.fn();
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [1],
        onSelect: mockOnSelect,
        multiple: false
      })),
      getByText = _render4.getByText;
    _reactNative.fireEvent.press(getByText('감사'));
    expect(mockOnSelect).toHaveBeenCalledWith(2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9FbW90aW9uU2VsZWN0b3IiLCJfanN4UnVudGltZSIsIm1vY2tFbW90aW9ucyIsImlkIiwibmFtZSIsImljb24iLCJjb2xvciIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImVtb3Rpb25zIiwic2VsZWN0ZWRFbW90aW9ucyIsIm9uU2VsZWN0IiwiamVzdCIsImZuIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsIl9yZW5kZXIyIiwic2VsZWN0ZWRFbW90aW9uTmFtZSIsIm1vY2tPblNlbGVjdCIsIl9yZW5kZXIzIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIl9yZW5kZXI0IiwibXVsdGlwbGUiXSwic291cmNlcyI6WyJFbW90aW9uU2VsZWN0b3IudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX19URVNUU19fL2NvbXBvbmVudHMvRW1vdGlvblNlbGVjdG9yLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgRW1vdGlvblNlbGVjdG9yIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL0Vtb3Rpb25TZWxlY3Rvcic7XHJcblxyXG5jb25zdCBtb2NrRW1vdGlvbnMgPSBbXHJcbiAgeyBpZDogMSwgbmFtZTogJ+2WieuztScsIGljb246ICdlbW90aWNvbi1oYXBweS1vdXRsaW5lJywgY29sb3I6ICcjRkZENzAwJyB9LFxyXG4gIHsgaWQ6IDIsIG5hbWU6ICfqsJDsgqwnLCBpY29uOiAnaGFuZC1oZWFydCcsIGNvbG9yOiAnI0ZGNjlCNCcgfSxcclxuICB7IGlkOiAzLCBuYW1lOiAn7JyE66GcJywgaWNvbjogJ2hhbmQtcGVhY2UnLCBjb2xvcjogJyM4N0NFRUInIH1cclxuXTtcclxuXHJcbmRlc2NyaWJlKCdFbW90aW9uU2VsZWN0b3Ig7Lu07Y+s64SM7Yq4JywgKCkgPT4ge1xyXG4gIGl0KCfqsJDsoJUg66qp66Gd7J20IOyYrOuwlOultOqyjCDroIzrjZTrp4HrkJjslrTslbwg7ZWp64uI64ukJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25TZWxlY3RvclxyXG4gICAgICAgIGVtb3Rpb25zPXttb2NrRW1vdGlvbnN9XHJcbiAgICAgICAgc2VsZWN0ZWRFbW90aW9ucz17W119XHJcbiAgICAgICAgb25TZWxlY3Q9e2plc3QuZm4oKX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+2WieuztScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCfqsJDsgqwnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgn7JyE66GcJykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ+yEoO2DneuQnCDqsJDsoJXsnYAg7Iuc6rCB7KCB7Jy866GcIOq1rOu2hOuQmOyWtOyVvCDtlanri4jri6QnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RW1vdGlvblNlbGVjdG9yXHJcbiAgICAgICAgZW1vdGlvbnM9e21vY2tFbW90aW9uc31cclxuICAgICAgICBzZWxlY3RlZEVtb3Rpb25zPXtbMV19XHJcbiAgICAgICAgb25TZWxlY3Q9e2plc3QuZm4oKX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGNvbnN0IHNlbGVjdGVkRW1vdGlvbk5hbWUgPSBnZXRCeVRleHQoJ+2WieuztScpO1xyXG4gICAgZXhwZWN0KHNlbGVjdGVkRW1vdGlvbk5hbWUpLnRvQmVUcnV0aHkoKTtcclxuICAgIC8vIOyKpO2DgOydvCDssrTtgazripQg6rWs7ZiEIOyEuOu2gCDsgqztla3sl5Ag65Sw6528IOyggeygiO2eiCDsobDsoJUg7ZWE7JqUXHJcbiAgfSk7XHJcblxyXG4gIGl0KCfqsJDsoJXsnYQg7YG066at7ZWY66m0IG9uU2VsZWN0IOy9nOuwseydtCDtmLjstpzrkJjslrTslbwg7ZWp64uI64ukJywgKCkgPT4ge1xyXG4gICAgY29uc3QgbW9ja09uU2VsZWN0ID0gamVzdC5mbigpO1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25TZWxlY3RvclxyXG4gICAgICAgIGVtb3Rpb25zPXttb2NrRW1vdGlvbnN9XHJcbiAgICAgICAgc2VsZWN0ZWRFbW90aW9ucz17W119XHJcbiAgICAgICAgb25TZWxlY3Q9e21vY2tPblNlbGVjdH1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ+2WieuztScpKTtcclxuICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnbXVsdGlwbGU9ZmFsc2Xsnbwg6rK97JqwIO2VnCDrsojsl5Ag7ZWY64KY7J2YIOqwkOygleunjCDshKDtg50g6rCA64ql7ZW07JW8IO2VqeuLiOuLpCcsICgpID0+IHtcclxuICAgIGNvbnN0IG1vY2tPblNlbGVjdCA9IGplc3QuZm4oKTtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uU2VsZWN0b3JcclxuICAgICAgICBlbW90aW9ucz17bW9ja0Vtb3Rpb25zfVxyXG4gICAgICAgIHNlbGVjdGVkRW1vdGlvbnM9e1sxXX1cclxuICAgICAgICBvblNlbGVjdD17bW9ja09uU2VsZWN0fVxyXG4gICAgICAgIG11bHRpcGxlPXtmYWxzZX1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ+qwkOyCrCcpKTtcclxuICAgIGV4cGVjdChtb2NrT25TZWxlY3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDIpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7QUFDQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxnQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQW1FLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUVuRSxJQUFNSSxZQUFZLEdBQUcsQ0FDbkI7RUFBRUMsRUFBRSxFQUFFLENBQUM7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsSUFBSSxFQUFFLHdCQUF3QjtFQUFFQyxLQUFLLEVBQUU7QUFBVSxDQUFDLEVBQ3ZFO0VBQUVILEVBQUUsRUFBRSxDQUFDO0VBQUVDLElBQUksRUFBRSxJQUFJO0VBQUVDLElBQUksRUFBRSxZQUFZO0VBQUVDLEtBQUssRUFBRTtBQUFVLENBQUMsRUFDM0Q7RUFBRUgsRUFBRSxFQUFFLENBQUM7RUFBRUMsSUFBSSxFQUFFLElBQUk7RUFBRUMsSUFBSSxFQUFFLFlBQVk7RUFBRUMsS0FBSyxFQUFFO0FBQVUsQ0FBQyxDQUM1RDtBQUVEQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsWUFBTTtFQUNyQ0MsRUFBRSxDQUFDLHdCQUF3QixFQUFFLFlBQU07SUFDakMsSUFBQUMsT0FBQSxHQUFzQixJQUFBQyxtQkFBTSxFQUMxQixJQUFBVCxXQUFBLENBQUFVLEdBQUEsRUFBQ1gsZ0JBQUEsQ0FBQVksT0FBZTtRQUNkQyxRQUFRLEVBQUVYLFlBQWE7UUFDdkJZLGdCQUFnQixFQUFFLEVBQUc7UUFDckJDLFFBQVEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBRSxDQUNyQixDQUNILENBQUM7TUFOT0MsU0FBUyxHQUFBVCxPQUFBLENBQVRTLFNBQVM7SUFRakJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDRCxNQUFNLENBQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUMsQ0FBQztJQUNwQ0QsTUFBTSxDQUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDLENBQUM7RUFDdEMsQ0FBQyxDQUFDO0VBRUZaLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxZQUFNO0lBQ2xDLElBQUFhLFFBQUEsR0FBc0IsSUFBQVgsbUJBQU0sRUFDMUIsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNYLGdCQUFBLENBQUFZLE9BQWU7UUFDZEMsUUFBUSxFQUFFWCxZQUFhO1FBQ3ZCWSxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBRTtRQUN0QkMsUUFBUSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFFLENBQ3JCLENBQ0gsQ0FBQztNQU5PQyxTQUFTLEdBQUFHLFFBQUEsQ0FBVEgsU0FBUztJQVFqQixJQUFNSSxtQkFBbUIsR0FBR0osU0FBUyxDQUFDLElBQUksQ0FBQztJQUMzQ0MsTUFBTSxDQUFDRyxtQkFBbUIsQ0FBQyxDQUFDRixVQUFVLENBQUMsQ0FBQztFQUUxQyxDQUFDLENBQUM7RUFFRlosRUFBRSxDQUFDLGlDQUFpQyxFQUFFLFlBQU07SUFDMUMsSUFBTWUsWUFBWSxHQUFHUCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUFPLFFBQUEsR0FBc0IsSUFBQWQsbUJBQU0sRUFDMUIsSUFBQVQsV0FBQSxDQUFBVSxHQUFBLEVBQUNYLGdCQUFBLENBQUFZLE9BQWU7UUFDZEMsUUFBUSxFQUFFWCxZQUFhO1FBQ3ZCWSxnQkFBZ0IsRUFBRSxFQUFHO1FBQ3JCQyxRQUFRLEVBQUVRO01BQWEsQ0FDeEIsQ0FDSCxDQUFDO01BTk9MLFNBQVMsR0FBQU0sUUFBQSxDQUFUTixTQUFTO0lBUWpCTyxzQkFBUyxDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQ0MsTUFBTSxDQUFDSSxZQUFZLENBQUMsQ0FBQ0ksb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGbkIsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLFlBQU07SUFDdEQsSUFBTWUsWUFBWSxHQUFHUCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUFXLFFBQUEsR0FBc0IsSUFBQWxCLG1CQUFNLEVBQzFCLElBQUFULFdBQUEsQ0FBQVUsR0FBQSxFQUFDWCxnQkFBQSxDQUFBWSxPQUFlO1FBQ2RDLFFBQVEsRUFBRVgsWUFBYTtRQUN2QlksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUU7UUFDdEJDLFFBQVEsRUFBRVEsWUFBYTtRQUN2Qk0sUUFBUSxFQUFFO01BQU0sQ0FDakIsQ0FDSCxDQUFDO01BUE9YLFNBQVMsR0FBQVUsUUFBQSxDQUFUVixTQUFTO0lBU2pCTyxzQkFBUyxDQUFDQyxLQUFLLENBQUNSLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQ0MsTUFBTSxDQUFDSSxZQUFZLENBQUMsQ0FBQ0ksb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==