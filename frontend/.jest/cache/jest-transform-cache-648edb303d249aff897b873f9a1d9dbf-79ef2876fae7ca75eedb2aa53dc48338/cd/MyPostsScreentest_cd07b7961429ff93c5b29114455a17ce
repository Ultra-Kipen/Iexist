575d8a07e3472473665ed89e49276e9d
_getJestObj().mock('react-native-paper', function () {
  var mockPaper = {
    Button: function Button(_ref) {
      var onPress = _ref.onPress,
        children = _ref.children;
      return (0, _jsxRuntime.jsx)("button", {
        onClick: onPress,
        children: children
      });
    },
    Card: {
      Content: function Content(_ref2) {
        var children = _ref2.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      },
      Actions: function Actions(_ref3) {
        var children = _ref3.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      }
    },
    Chip: function Chip(_ref4) {
      var children = _ref4.children;
      return (0, _jsxRuntime.jsx)("span", {
        children: children
      });
    },
    Dialog: {
      Title: function Title(_ref5) {
        var children = _ref5.children;
        return (0, _jsxRuntime.jsx)("h2", {
          children: children
        });
      },
      Content: function Content(_ref6) {
        var children = _ref6.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      },
      Actions: function Actions(_ref7) {
        var children = _ref7.children;
        return (0, _jsxRuntime.jsx)("div", {
          children: children
        });
      }
    },
    Portal: function Portal(_ref8) {
      var children = _ref8.children;
      return (0, _jsxRuntime.jsx)("div", {
        children: children
      });
    }
  };
  mockPaper.Card.Content = mockPaper.Card.Content;
  mockPaper.Card.Actions = mockPaper.Card.Actions;
  mockPaper.Dialog.Title = mockPaper.Dialog.Title;
  mockPaper.Dialog.Content = mockPaper.Dialog.Content;
  mockPaper.Dialog.Actions = mockPaper.Dialog.Actions;
  mockPaper.Card = Object.assign(function (_ref9) {
    var children = _ref9.children;
    return (0, _jsxRuntime.jsx)("div", {
      children: children
    });
  }, mockPaper.Card);
  mockPaper.Dialog = Object.assign(function (_ref10) {
    var children = _ref10.children,
      visible = _ref10.visible;
    return visible ? (0, _jsxRuntime.jsx)("div", {
      children: children
    }) : null;
  }, mockPaper.Dialog);
  return mockPaper;
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn(function () {
          return jest.fn();
        })
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          posts: [{
            post_id: 1,
            content: '첫 번째 테스트 게시물입니다.',
            emotion_summary: '행복',
            like_count: 5,
            comment_count: 2,
            created_at: '2025-03-01T12:00:00Z'
          }]
        }
      });
    }),
    deletePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          success: true
        }
      });
    })
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyPostsScreen = _interopRequireDefault(require("../../src/screens/MyPostsScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('fetches posts on mount', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigation = {
      navigate: jest.fn(),
      addListener: jest.fn(function () {
        return jest.fn();
      })
    };
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
      navigation: mockNavigation,
      route: {}
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getMyPosts).toHaveBeenCalled();
    }, {
      timeout: 1000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,