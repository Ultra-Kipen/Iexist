c1b76f4b6f9d3db958ba45c6d3b7cbc6
_getJestObj().mock('react-native', function () {
  var reactNative = jest.requireActual('react-native');
  return Object.assign({}, reactNative, {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      }),
      flatten: jest.fn(function (style) {
        return style;
      }),
      absoluteFill: {},
      hairlineWidth: 1
    },
    Platform: {
      OS: 'android',
      select: jest.fn(function (obj) {
        return obj.android || obj.default;
      }),
      Version: 29
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    Animated: {
      View: 'Animated.View',
      Text: 'Animated.Text',
      Image: 'Animated.Image',
      createAnimatedComponent: jest.fn(function (component) {
        return component;
      }),
      timing: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      spring: jest.fn(function () {
        return {
          start: jest.fn(function (cb) {
            return cb && cb({
              finished: true
            });
          })
        };
      }),
      Value: jest.fn(function () {
        return {
          setValue: jest.fn(),
          interpolate: jest.fn(function () {
            return {};
          }),
          addListener: jest.fn(),
          removeListener: jest.fn()
        };
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    TouchableHighlight: 'TouchableHighlight',
    TouchableWithoutFeedback: 'TouchableWithoutFeedback',
    ScrollView: 'ScrollView',
    FlatList: 'FlatList',
    SectionList: 'SectionList',
    Image: 'Image',
    TextInput: 'TextInput',
    Button: 'Button',
    Switch: 'Switch',
    ActivityIndicator: 'ActivityIndicator',
    Alert: {
      alert: jest.fn()
    },
    Linking: {
      openURL: jest.fn(),
      canOpenURL: jest.fn(function () {
        return Promise.resolve(true);
      })
    },
    TurboModuleRegistry: {
      get: jest.fn(function () {
        return null;
      }),
      getEnforcing: jest.fn(function (name) {
        if (name === 'DevMenu') {
          return {
            show: jest.fn(),
            reload: jest.fn(),
            debugRemotely: jest.fn(),
            setProfilingEnabled: jest.fn(),
            setHotLoadingEnabled: jest.fn()
          };
        }
        return null;
      })
    },
    DevSettings: {
      reload: jest.fn(),
      addMenuItem: jest.fn(),
      setIsDebuggingRemotely: jest.fn()
    },
    NativeModules: Object.assign({}, reactNative.NativeModules, {
      DevMenu: {
        show: jest.fn(),
        reload: jest.fn(),
        debugRemotely: jest.fn(),
        setProfilingEnabled: jest.fn(),
        setHotLoadingEnabled: jest.fn()
      },
      DevSettings: {
        reload: jest.fn(),
        setIsDebuggingRemotely: jest.fn()
      },
      StatusBarManager: {
        HEIGHT: 42,
        setStyle: jest.fn(),
        setHidden: jest.fn(),
        getHeight: jest.fn(function (cb) {
          return cb(42);
        })
      },
      RNCAsyncStorage: {
        multiGet: jest.fn(function () {
          return Promise.resolve([]);
        }),
        multiSet: jest.fn(function () {
          return Promise.resolve();
        }),
        multiRemove: jest.fn(function () {
          return Promise.resolve();
        }),
        multiMerge: jest.fn(function () {
          return Promise.resolve();
        }),
        clear: jest.fn(function () {
          return Promise.resolve();
        }),
        getAllKeys: jest.fn(function () {
          return Promise.resolve([]);
        })
      }
    }),
    I18nManager: {
      isRTL: false,
      getConstants: function getConstants() {
        return {
          isRTL: false
        };
      }
    }
  });
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    clear: jest.fn(function () {
      return Promise.resolve();
    }),
    getAllKeys: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiGet: jest.fn(function () {
      return Promise.resolve([]);
    }),
    multiSet: jest.fn(function () {
      return Promise.resolve();
    }),
    multiRemove: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn(),
        setOptions: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    },
    useIsFocused: function useIsFocused() {
      return true;
    },
    useFocusEffect: jest.fn(function (callback) {
      return callback();
    }),
    CommonActions: {
      navigate: jest.fn(),
      reset: jest.fn()
    },
    StackActions: {
      replace: jest.fn(),
      push: jest.fn(),
      pop: jest.fn()
    }
  };
});
_getJestObj().mock('@react-navigation/stack', function () {
  return {
    createStackNavigator: jest.fn(function () {
      return {
        Navigator: 'Navigator',
        Screen: 'Screen'
      };
    })
  };
});
_getJestObj().mock('@react-navigation/bottom-tabs', function () {
  return {
    createBottomTabNavigator: jest.fn(function () {
      return {
        Navigator: 'TabNavigator',
        Screen: 'TabScreen'
      };
    })
  };
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaProvider: function SafeAreaProvider(_ref) {
      var children = _ref.children;
      return children;
    },
    SafeAreaView: function SafeAreaView(_ref2) {
      var children = _ref2.children;
      return children;
    },
    useSafeAreaInsets: function useSafeAreaInsets() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-vector-icons/MaterialIcons', function () {
  return 'MaterialIcon';
});
_getJestObj().mock('react-native-vector-icons/FontAwesome', function () {
  return 'FontAwesomeIcon';
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  return {
    Provider: function Provider(_ref3) {
      var children = _ref3.children;
      return children;
    },
    Button: 'PaperButton',
    Card: 'PaperCard',
    Title: 'PaperTitle',
    Paragraph: 'PaperParagraph',
    TextInput: 'PaperTextInput',
    Appbar: {
      Header: 'PaperAppbarHeader',
      Content: 'PaperAppbarContent',
      Action: 'PaperAppbarAction',
      BackAction: 'PaperAppbarBackAction'
    },
    Avatar: {
      Image: 'PaperAvatarImage',
      Icon: 'PaperAvatarIcon',
      Text: 'PaperAvatarText'
    },
    useTheme: jest.fn(function () {
      return {
        colors: {
          primary: '#6200ee',
          background: '#f6f6f6',
          surface: 'white',
          accent: '#03dac4',
          error: '#B00020',
          text: 'black',
          disabled: '#ccc',
          placeholder: '#999',
          backdrop: 'rgba(0,0,0,0.5)',
          notification: '#f50057'
        }
      };
    })
  };
});
_getJestObj().mock('react-native-gesture-handler', function () {
  var View = require('react-native').View;
  return {
    Swipeable: View,
    DrawerLayout: View,
    State: {},
    ScrollView: View,
    Slider: View,
    Switch: View,
    TextInput: View,
    GestureHandlerRootView: View,
    TouchableOpacity: View,
    FlatList: View,
    BorderlessButton: View,
    RectButton: View,
    BaseButton: View,
    PanGestureHandler: View,
    TapGestureHandler: View,
    LongPressGestureHandler: View
  };
});
_getJestObj().mock('react-native-chart-kit', function () {
  return {
    LineChart: 'LineChart',
    BarChart: 'BarChart',
    PieChart: 'PieChart',
    ProgressChart: 'ProgressChart',
    ContributionGraph: 'ContributionGraph',
    StackedBarChart: 'StackedBarChart'
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var jestGlobals = _interopRequireWildcard(require("@jest/globals"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.expect = jestGlobals.expect;
global.test = jestGlobals.test;
global.describe = jestGlobals.describe;
global.beforeEach = jestGlobals.beforeEach;
global.afterEach = jestGlobals.afterEach;
global.jest = jestGlobals.jest;
global.__DEV__ = true;
global.window = global.window || {};
global.React = _react.default;
global.ReactDOM = _reactDom.default;
var originalConsoleError = console.error;
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  if (errorMessage && typeof errorMessage === 'string' && (errorMessage.includes('ReactCurrentDispatcher') || errorMessage.includes('ReactCurrentOwner') || errorMessage.includes('act(') || errorMessage.includes('inside a test was not wrapped in act'))) {
    return;
  }
  originalConsoleError.apply(void 0, arguments);
};
var originalConsoleWarn = console.warn;
console.warn = function () {
  var warningMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  var ignoredWarnings = ['ProgressBarAndroid has been extracted', 'Clipboard has been extracted', 'TurboModuleRegistry.getEnforcing', 'DevMenu could not be found', 'DevSettings'];
  if (ignoredWarnings.some(function (warning) {
    return typeof warningMessage === 'string' && warningMessage.includes(warning);
  })) {
    return;
  }
  originalConsoleWarn.apply(void 0, arguments);
};
jest.useFakeTimers();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,