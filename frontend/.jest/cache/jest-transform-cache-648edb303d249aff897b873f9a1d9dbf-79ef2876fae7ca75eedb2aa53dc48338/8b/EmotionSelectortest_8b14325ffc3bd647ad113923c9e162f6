efcd64397d30cec54b90eacf0073730f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionSelector = _interopRequireDefault(require("../../src/components/EmotionSelector"));
var _jsxRuntime = require("react/jsx-runtime");
describe('EmotionSelector 컴포넌트', function () {
  var mockEmotions = [{
    id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    id: 2,
    name: '감사',
    icon: 'hand-heart',
    color: '#FF69B4'
  }];
  var mockOnSelectEmotion = jest.fn();
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('감정 선택기가 올바르게 렌더링되어야 함', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [],
        onSelect: mockOnSelectEmotion
      })),
      getByText = _render.getByText;
    expect(getByText('행복')).toBeDefined();
    expect(getByText('감사')).toBeDefined();
  });
  it('감정 아이템을 클릭하면 onSelectEmotion이 호출되어야 함', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [],
        onSelect: mockOnSelectEmotion
      })),
      getByText = _render2.getByText;
    _reactNative.fireEvent.press(getByText('행복'));
    expect(mockOnSelectEmotion).toHaveBeenCalledWith(1);
  });
  it('이미 선택된 감정이 강조되어야 함', function () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionSelector.default, {
        emotions: mockEmotions,
        selectedEmotions: [1],
        onSelect: mockOnSelectEmotion
      })),
      getAllByText = _render3.getAllByText;
    var happyText = getAllByText('행복')[0];
    expect(happyText).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9FbW90aW9uU2VsZWN0b3IiLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwibW9ja0Vtb3Rpb25zIiwiaWQiLCJuYW1lIiwiaWNvbiIsImNvbG9yIiwibW9ja09uU2VsZWN0RW1vdGlvbiIsImplc3QiLCJmbiIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsImVtb3Rpb25zIiwic2VsZWN0ZWRFbW90aW9ucyIsIm9uU2VsZWN0IiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJfcmVuZGVyMiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJfcmVuZGVyMyIsImdldEFsbEJ5VGV4dCIsImhhcHB5VGV4dCJdLCJzb3VyY2VzIjpbIkVtb3Rpb25TZWxlY3Rvci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX3Rlc3RzX18vY29tcG9uZW50cy9FbW90aW9uU2VsZWN0b3IudGVzdC50c3hcclxuXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgZmlyZUV2ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgRW1vdGlvblNlbGVjdG9yIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL0Vtb3Rpb25TZWxlY3Rvcic7XHJcblxyXG5kZXNjcmliZSgnRW1vdGlvblNlbGVjdG9yIOy7tO2PrOuEjO2KuCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrRW1vdGlvbnMgPSBbXHJcbiAgICB7IGlkOiAxLCBuYW1lOiAn7ZaJ67O1JywgaWNvbjogJ2Vtb3RpY29uLWhhcHB5LW91dGxpbmUnLCBjb2xvcjogJyNGRkQ3MDAnIH0sXHJcbiAgICB7IGlkOiAyLCBuYW1lOiAn6rCQ7IKsJywgaWNvbjogJ2hhbmQtaGVhcnQnLCBjb2xvcjogJyNGRjY5QjQnIH0sXHJcbiAgXTtcclxuICBcclxuICBjb25zdCBtb2NrT25TZWxlY3RFbW90aW9uID0gamVzdC5mbigpO1xyXG4gIFxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCfqsJDsoJUg7ISg7YOd6riw6rCAIOyYrOuwlOultOqyjCDroIzrjZTrp4HrkJjslrTslbwg7ZWoJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyBnZXRCeVRleHQgfSA9IHJlbmRlcihcclxuICAgICAgPEVtb3Rpb25TZWxlY3RvclxyXG4gICAgICAgIGVtb3Rpb25zPXttb2NrRW1vdGlvbnN9XHJcbiAgICAgICAgc2VsZWN0ZWRFbW90aW9ucz17W119XHJcbiAgICAgICAgb25TZWxlY3Q9e21vY2tPblNlbGVjdEVtb3Rpb259XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCftlonrs7UnKSkudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChnZXRCeVRleHQoJ+qwkOyCrCcpKS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn6rCQ7KCVIOyVhOydtO2FnOydhCDtgbTrpq3tlZjrqbQgb25TZWxlY3RFbW90aW9u7J20IO2YuOy2nOuQmOyWtOyVvCDtlagnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldEJ5VGV4dCB9ID0gcmVuZGVyKFxyXG4gICAgICA8RW1vdGlvblNlbGVjdG9yXHJcbiAgICAgICAgZW1vdGlvbnM9e21vY2tFbW90aW9uc31cclxuICAgICAgICBzZWxlY3RlZEVtb3Rpb25zPXtbXX1cclxuICAgICAgICBvblNlbGVjdD17bW9ja09uU2VsZWN0RW1vdGlvbn1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRleHQoJ+2WieuztScpKTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG1vY2tPblNlbGVjdEVtb3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgn7J2066+4IOyEoO2DneuQnCDqsJDsoJXsnbQg6rCV7KGw65CY7Ja07JW8IO2VqCcsICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QWxsQnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxFbW90aW9uU2VsZWN0b3JcclxuICAgICAgICBlbW90aW9ucz17bW9ja0Vtb3Rpb25zfVxyXG4gICAgICAgIHNlbGVjdGVkRW1vdGlvbnM9e1sxXX1cclxuICAgICAgICBvblNlbGVjdD17bW9ja09uU2VsZWN0RW1vdGlvbn1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgICBcclxuICAgIC8vIO2FjeyKpO2KuOuhnCDqsoDsg4lcclxuICAgIGNvbnN0IGhhcHB5VGV4dCA9IGdldEFsbEJ5VGV4dCgn7ZaJ67O1JylbMF07XHJcbiAgICBleHBlY3QoaGFwcHlUZXh0KS50b0JlRGVmaW5lZCgpO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiI7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxnQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQW1FLElBQUFHLFdBQUEsR0FBQUgsT0FBQTtBQUVuRUksUUFBUSxDQUFDLHNCQUFzQixFQUFFLFlBQU07RUFDckMsSUFBTUMsWUFBWSxHQUFHLENBQ25CO0lBQUVDLEVBQUUsRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRSxJQUFJO0lBQUVDLElBQUksRUFBRSx3QkFBd0I7SUFBRUMsS0FBSyxFQUFFO0VBQVUsQ0FBQyxFQUN2RTtJQUFFSCxFQUFFLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUUsSUFBSTtJQUFFQyxJQUFJLEVBQUUsWUFBWTtJQUFFQyxLQUFLLEVBQUU7RUFBVSxDQUFDLENBQzVEO0VBRUQsSUFBTUMsbUJBQW1CLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFFckNDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZGLElBQUksQ0FBQ0csYUFBYSxDQUFDLENBQUM7RUFDdEIsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0lBQ2hDLElBQUFDLE9BQUEsR0FBc0IsSUFBQUMsbUJBQU0sRUFDMUIsSUFBQWQsV0FBQSxDQUFBZSxHQUFBLEVBQUNoQixnQkFBQSxDQUFBaUIsT0FBZTtRQUNkQyxRQUFRLEVBQUVmLFlBQWE7UUFDdkJnQixnQkFBZ0IsRUFBRSxFQUFHO1FBQ3JCQyxRQUFRLEVBQUVaO01BQW9CLENBQy9CLENBQ0gsQ0FBQztNQU5PYSxTQUFTLEdBQUFQLE9BQUEsQ0FBVE8sU0FBUztJQVFqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7SUFDckNELE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUNFLFdBQVcsQ0FBQyxDQUFDO0VBQ3ZDLENBQUMsQ0FBQztFQUVGVixFQUFFLENBQUMsdUNBQXVDLEVBQUUsWUFBTTtJQUNoRCxJQUFBVyxRQUFBLEdBQXNCLElBQUFULG1CQUFNLEVBQzFCLElBQUFkLFdBQUEsQ0FBQWUsR0FBQSxFQUFDaEIsZ0JBQUEsQ0FBQWlCLE9BQWU7UUFDZEMsUUFBUSxFQUFFZixZQUFhO1FBQ3ZCZ0IsZ0JBQWdCLEVBQUUsRUFBRztRQUNyQkMsUUFBUSxFQUFFWjtNQUFvQixDQUMvQixDQUNILENBQUM7TUFOT2EsU0FBUyxHQUFBRyxRQUFBLENBQVRILFNBQVM7SUFRakJJLHNCQUFTLENBQUNDLEtBQUssQ0FBQ0wsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhDQyxNQUFNLENBQUNkLG1CQUFtQixDQUFDLENBQUNtQixvQkFBb0IsQ0FBQyxDQUFDLENBQUM7RUFDckQsQ0FBQyxDQUFDO0VBRUZkLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0lBQzdCLElBQUFlLFFBQUEsR0FBeUIsSUFBQWIsbUJBQU0sRUFDN0IsSUFBQWQsV0FBQSxDQUFBZSxHQUFBLEVBQUNoQixnQkFBQSxDQUFBaUIsT0FBZTtRQUNkQyxRQUFRLEVBQUVmLFlBQWE7UUFDdkJnQixnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBRTtRQUN0QkMsUUFBUSxFQUFFWjtNQUFvQixDQUMvQixDQUNILENBQUM7TUFOT3FCLFlBQVksR0FBQUQsUUFBQSxDQUFaQyxZQUFZO0lBU3BCLElBQU1DLFNBQVMsR0FBR0QsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2Q1AsTUFBTSxDQUFDUSxTQUFTLENBQUMsQ0FBQ1AsV0FBVyxDQUFDLENBQUM7RUFDakMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119