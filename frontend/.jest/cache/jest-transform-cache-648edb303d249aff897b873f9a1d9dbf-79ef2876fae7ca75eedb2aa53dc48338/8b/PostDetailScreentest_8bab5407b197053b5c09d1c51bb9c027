4f5c85365d6f9b570cf5924c347ca435
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {
          postId: 1
        }
      };
    }
  };
});
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getPostById: jest.fn(),
    getComments: jest.fn(),
    likePost: jest.fn(),
    addComment: jest.fn()
  };
});
_getJestObj().mock("../../src/components/LoadingIndicator", function () {
  return 'LoadingIndicator';
});
_getJestObj().mock("../../src/components/ProfileAvatar", function () {
  return 'ProfileAvatar';
});
_getJestObj().mock("../../src/components/CommentItem", function () {
  return 'CommentItem';
});
_getJestObj().mock("../../src/components/Button", function () {
  return 'Button';
});
_getJestObj().mock('react-native', function () {
  var rn = jest.requireActual('react-native');
  rn.ScrollView = function (_ref) {
    var children = _ref.children,
      ref = _ref.ref;
    return children;
  };
  return rn;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _PostDetailScreen = _interopRequireDefault(require("../../src/screens/PostDetailScreen"));
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _reactNative2 = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPost = {
  post_id: 1,
  user_id: 101,
  username: 'testuser',
  nickname: '테스트유저',
  content: '테스트 게시물 내용입니다.',
  emotion_summary: '행복',
  image_url: null,
  emotions: [{
    emotion_id: 1,
    name: '행복',
    color: '#FFD700'
  }],
  is_anonymous: false,
  like_count: 5,
  comment_count: 2,
  is_liked: false,
  created_at: new Date().toISOString()
};
var mockComments = [{
  comment_id: 1,
  user_id: 102,
  username: 'commenter',
  nickname: '댓글작성자',
  content: '좋은 글이네요!',
  is_anonymous: false,
  created_at: new Date().toISOString()
}];
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('PostDetailScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders loading state initially', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getPostById.mockImplementation(function () {
      return new Promise(function () {});
    });
    _postService.default.getComments.mockImplementation(function () {
      return new Promise(function () {});
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostDetailScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
  }));
  it('renders post data successfully', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getPostById.mockResolvedValue({
      data: {
        data: mockPost
      }
    });
    _postService.default.getComments.mockResolvedValue({
      data: {
        data: mockComments
      }
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostDetailScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getComments).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
  }));
  it('handles error state properly', (0, _asyncToGenerator2.default)(function* () {
    _postService.default.getPostById.mockRejectedValue(new Error('API 오류'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_PostDetailScreen.default, {}));
    yield (0, _reactNative.waitFor)(function () {
      expect(_postService.default.getPostById).toHaveBeenCalledWith(1);
    }, {
      timeout: 1000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,