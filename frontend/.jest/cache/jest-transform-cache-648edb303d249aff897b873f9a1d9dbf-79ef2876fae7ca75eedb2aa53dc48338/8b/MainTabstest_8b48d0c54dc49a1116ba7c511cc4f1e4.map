{"version":3,"names":["_getJestObj","mock","__esModule","default","Object","assign","jest","requireActual","useNavigation","navigate","mockNavigate","createBottomTabNavigator","Navigator","props","mockNavigator","_jsxRuntime","jsx","Fragment","children","Screen","mockScreen","_interopRequireDefault","require","_react","_reactNative","_MainTabs","_require","fn","describe","beforeEach","mockClear","it","expect","render","not","toThrow","toHaveBeenCalledWith","objectContaining","screenOptions","tabBarActiveTintColor","tabBarInactiveTintColor","name","component","options","headerShown","tabBarLabel","calls","forEach","call","tabBarIcon","toBe","iconFn","result","color","size","toBeDefined"],"sources":["MainTabs.test.tsx"],"sourcesContent":["// __tests__/navigation/MainTabs.test.tsx\r\nimport React from 'react';\r\nimport { render } from '@testing-library/react-native';\r\nimport MainTabs from '../../src/navigation/MainTabs';\r\n\r\n// 모킹\r\njest.mock('../../src/navigation/HomeStack', () => 'MockedHomeStack');\r\njest.mock('../../src/screens/ComfortScreen', () => 'MockedComfortScreen');\r\njest.mock('../../src/screens/ChallengeScreen', () => 'MockedChallengeScreen');\r\njest.mock('../../src/screens/ReviewScreen', () => 'MockedReviewScreen');\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => ({\r\n  __esModule: true,\r\n  default: 'MockedIcon',\r\n}));\r\n\r\n// 네비게이션 훅 모킹\r\nconst mockNavigate = jest.fn();\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    ...jest.requireActual('@react-navigation/native'),\r\n    useNavigation: () => ({\r\n      navigate: mockNavigate,\r\n    }),\r\n  };\r\n});\r\n\r\n// 타입 정의\r\ninterface NavigatorProps {\r\n  screenOptions?: any;\r\n  children?: React.ReactNode;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface ScreenProps {\r\n  name: string;\r\n  component: any;\r\n  options: any;\r\n  [key: string]: any;\r\n}\r\n\r\n// 탭 네비게이터 모킹\r\nconst mockScreen = jest.fn();\r\nconst mockNavigator = jest.fn((props: NavigatorProps) => props.children);\r\n\r\njest.mock('@react-navigation/bottom-tabs', () => {\r\n  return {\r\n    createBottomTabNavigator: () => ({\r\n      Navigator: (props: NavigatorProps) => {\r\n        mockNavigator(props);\r\n        return <>{props.children}</>;\r\n      },\r\n      Screen: (props: ScreenProps) => {\r\n        mockScreen(props);\r\n        return null;\r\n      },\r\n    }),\r\n  };\r\n});\r\n\r\ndescribe('MainTabs', () => {\r\n  beforeEach(() => {\r\n    mockScreen.mockClear();\r\n    mockNavigator.mockClear();\r\n  });\r\n\r\n  it('컴포넌트가 오류 없이 렌더링됨', () => {\r\n    expect(() => render(<MainTabs />)).not.toThrow();\r\n  });\r\n\r\n  it('네비게이터가 올바른 옵션으로 구성됨', () => {\r\n    render(<MainTabs />);\r\n    expect(mockNavigator).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        screenOptions: expect.objectContaining({\r\n          tabBarActiveTintColor: '#4a0e4e',\r\n          tabBarInactiveTintColor: '#999',\r\n        }),\r\n      })\r\n    );\r\n  });\r\n\r\n  it('홈 탭이 올바르게 구성됨', () => {\r\n    render(<MainTabs />);\r\n    expect(mockScreen).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        name: 'Home',\r\n        component: 'MockedHomeStack',\r\n        options: expect.objectContaining({\r\n          headerShown: false,\r\n          tabBarLabel: '나의 하루',\r\n        }),\r\n      })\r\n    );\r\n  });\r\n\r\n  it('위로와 공감 탭이 올바르게 구성됨', () => {\r\n    render(<MainTabs />);\r\n    expect(mockScreen).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        name: 'Comfort',\r\n        component: 'MockedComfortScreen',\r\n        options: expect.objectContaining({\r\n          tabBarLabel: '위로와 공감',\r\n        }),\r\n      })\r\n    );\r\n  });\r\n\r\n  it('감정 챌린지 탭이 올바르게 구성됨', () => {\r\n    render(<MainTabs />);\r\n    expect(mockScreen).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        name: 'Challenge',\r\n        component: 'MockedChallengeScreen',\r\n        options: expect.objectContaining({\r\n          tabBarLabel: '감정 챌린지',\r\n        }),\r\n      })\r\n    );\r\n  });\r\n\r\n  it('일상 돌아보기 탭이 올바르게 구성됨', () => {\r\n    render(<MainTabs />);\r\n    expect(mockScreen).toHaveBeenCalledWith(\r\n      expect.objectContaining({\r\n        name: 'Review',\r\n        component: 'MockedReviewScreen',\r\n        options: expect.objectContaining({\r\n          tabBarLabel: '일상 돌아보기',\r\n        }),\r\n      })\r\n    );\r\n  });\r\n\r\n  it('모든 탭이 아이콘을 가짐', () => {\r\n    render(<MainTabs />);\r\n    \r\n    // 각 탭 스크린 호출에서 options.tabBarIcon이 함수인지 확인\r\n    const calls = mockScreen.mock.calls;\r\n    calls.forEach(call => {\r\n      const options = call[0].options;\r\n      expect(typeof options.tabBarIcon).toBe('function');\r\n      \r\n      // 아이콘 함수 호출 테스트\r\n      const iconFn = options.tabBarIcon;\r\n      const result = iconFn({ color: 'red', size: 24 });\r\n      expect(result).toBeDefined();\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}