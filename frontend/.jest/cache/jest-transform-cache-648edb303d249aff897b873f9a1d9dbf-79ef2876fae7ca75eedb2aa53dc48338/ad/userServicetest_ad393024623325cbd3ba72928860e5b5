a0b278580cc51900089748e29cc3816e
_getJestObj().mock('axios', function () {
  return {
    create: jest.fn().mockReturnValue({
      get: jest.fn(),
      put: jest.fn(),
      post: jest.fn(),
      delete: jest.fn(),
      interceptors: {
        request: {
          use: jest.fn()
        }
      }
    }),
    isAxiosError: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _axios = _interopRequireDefault(require("axios"));
var _userService = _interopRequireDefault(require("../../../../src/services/api/userService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var localStorageMock = function () {
  var store = {};
  return {
    getItem: jest.fn(function (key) {
      return store[key] || null;
    }),
    setItem: jest.fn(function (key, value) {
      store[key] = value.toString();
    }),
    clear: jest.fn(function () {
      store = {};
    })
  };
}();
if (typeof window === 'undefined') {
  global.localStorage = localStorageMock;
} else {
  Object.defineProperty(window, 'localStorage', {
    value: localStorageMock
  });
}
describe('UserService', function () {
  var mockedAxios = _axios.default;
  var createMockAxiosError = function createMockAxiosError(errorResponse) {
    var additionalConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var baseConfig = Object.assign({
      method: 'get',
      url: '',
      headers: {}
    }, additionalConfig);
    return {
      isAxiosError: true,
      response: {
        data: errorResponse,
        status: 400,
        statusText: 'Bad Request',
        headers: {},
        config: baseConfig
      },
      name: 'AxiosError',
      message: '에러 발생',
      config: baseConfig
    };
  };
  beforeEach(function () {
    jest.clearAllMocks();
    localStorageMock.clear();
    mockedAxios.create().get.mockReset();
    mockedAxios.create().put.mockReset();
    mockedAxios.create().post.mockReset();
    mockedAxios.create().delete.mockReset();
    mockedAxios.isAxiosError.mockReturnValue(true);
  });
  describe('getProfile', function () {
    it('should fetch user profile successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockProfile = {
        user_id: 1,
        username: 'testuser',
        email: 'test@example.com',
        nickname: '테스트유저',
        theme_preference: 'light',
        privacy_settings: {
          show_profile: true,
          show_emotions: true,
          show_posts: true,
          show_challenges: true
        },
        last_login_at: '2024-04-22T10:00:00Z',
        created_at: '2024-01-01T00:00:00Z'
      };
      var mockResponse = {
        status: 'success',
        data: mockProfile
      };
      mockedAxios.create().get.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.getProfile();
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when fetching profile fails', (0, _asyncToGenerator2.default)(function* () {
      var errorResponse = {
        status: 'error',
        message: '프로필 정보 조회에 실패했습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'get',
        url: '/users/profile'
      });
      mockedAxios.create().get.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.getProfile()).rejects.toEqual(errorResponse);
    }));
  });
  describe('updateProfile', function () {
    it('should update user profile successfully', (0, _asyncToGenerator2.default)(function* () {
      var profileData = {
        nickname: '새로운닉네임',
        favorite_quote: '오늘도 화이팅!'
      };
      var mockResponse = {
        status: 'success',
        message: '프로필이 성공적으로 업데이트되었습니다.'
      };
      mockedAxios.create().put.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.updateProfile(profileData);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when updating profile fails', (0, _asyncToGenerator2.default)(function* () {
      var profileData = {
        nickname: '새로운닉네임'
      };
      var errorResponse = {
        status: 'error',
        message: '프로필 업데이트에 실패했습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'put',
        url: '/users/profile'
      });
      mockedAxios.create().put.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.updateProfile(profileData)).rejects.toEqual(errorResponse);
    }));
  });
  describe('getUserById', function () {
    it('should fetch user profile by ID successfully', (0, _asyncToGenerator2.default)(function* () {
      var userId = 1;
      var mockUserProfile = {
        user_id: userId,
        username: 'testuser',
        email: 'test@example.com',
        nickname: '테스트유저',
        theme_preference: 'light',
        privacy_settings: {
          show_profile: true,
          show_emotions: true,
          show_posts: true,
          show_challenges: true
        },
        last_login_at: '2024-04-22T10:00:00Z',
        created_at: '2024-01-01T00:00:00Z'
      };
      var mockResponse = {
        status: 'success',
        data: mockUserProfile
      };
      mockedAxios.create().get.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.getUserById(userId);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when fetching user profile fails', (0, _asyncToGenerator2.default)(function* () {
      var userId = 1;
      var errorResponse = {
        status: 'error',
        message: '사용자 정보를 찾을 수 없습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'get',
        url: `/users/${userId}`
      });
      mockedAxios.create().get.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.getUserById(userId)).rejects.toEqual(errorResponse);
    }));
  });
  describe('getUserStats', function () {
    it('should fetch user statistics successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockUserStats = {
        my_day_post_count: 5,
        someone_day_post_count: 3,
        my_day_like_received_count: 10,
        someone_day_like_received_count: 7,
        my_day_comment_received_count: 4,
        someone_day_comment_received_count: 2,
        challenge_count: 1,
        last_updated: '2024-04-22T12:00:00Z'
      };
      var mockResponse = {
        status: 'success',
        data: mockUserStats
      };
      mockedAxios.create().get.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.getUserStats();
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when fetching user stats fails', (0, _asyncToGenerator2.default)(function* () {
      var errorResponse = {
        status: 'error',
        message: '사용자 통계 정보를 가져올 수 없습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'get',
        url: '/users/stats'
      });
      mockedAxios.create().get.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.getUserStats()).rejects.toEqual(errorResponse);
    }));
  });
  describe('changePassword', function () {
    it('should change password successfully', (0, _asyncToGenerator2.default)(function* () {
      var currentPassword = 'oldpassword123';
      var newPassword = 'newpassword456';
      var mockResponse = {
        status: 'success',
        message: '비밀번호가 성공적으로 변경되었습니다.'
      };
      mockedAxios.create().put.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.changePassword(currentPassword, newPassword);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when changing password fails', (0, _asyncToGenerator2.default)(function* () {
      var currentPassword = 'oldpassword123';
      var newPassword = 'newpassword456';
      var errorResponse = {
        status: 'error',
        message: '비밀번호 변경에 실패했습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'put',
        url: '/users/password'
      });
      mockedAxios.create().put.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.changePassword(currentPassword, newPassword)).rejects.toEqual(errorResponse);
    }));
  });
  describe('blockUser', function () {
    it('should block a user successfully', (0, _asyncToGenerator2.default)(function* () {
      var userIdToBlock = 2;
      var mockResponse = {
        status: 'success',
        message: '사용자가 성공적으로 차단되었습니다.'
      };
      mockedAxios.create().post.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.blockUser(userIdToBlock);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when blocking user fails', (0, _asyncToGenerator2.default)(function* () {
      var userIdToBlock = 2;
      var errorResponse = {
        status: 'error',
        message: '사용자 차단에 실패했습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'post',
        url: `/users/block/${userIdToBlock}`
      });
      mockedAxios.create().post.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.blockUser(userIdToBlock)).rejects.toEqual(errorResponse);
    }));
  });
  describe('unblockUser', function () {
    it('should unblock a user successfully', (0, _asyncToGenerator2.default)(function* () {
      var userIdToUnblock = 2;
      var mockResponse = {
        status: 'success',
        message: '사용자 차단이 해제되었습니다.'
      };
      mockedAxios.create().delete.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.unblockUser(userIdToUnblock);
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when unblocking user fails', (0, _asyncToGenerator2.default)(function* () {
      var userIdToUnblock = 2;
      var errorResponse = {
        status: 'error',
        message: '사용자 차단 해제에 실패했습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'delete',
        url: `/users/block/${userIdToUnblock}`
      });
      mockedAxios.create().delete.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.unblockUser(userIdToUnblock)).rejects.toEqual(errorResponse);
    }));
  });
  describe('getBlockedUsers', function () {
    it('should fetch blocked users successfully', (0, _asyncToGenerator2.default)(function* () {
      var mockBlockedUsers = [{
        user_id: 2,
        username: 'blockeduser1',
        email: 'blocked1@example.com',
        nickname: '차단된사용자1',
        theme_preference: 'dark',
        privacy_settings: {
          show_profile: false,
          show_emotions: false,
          show_posts: false,
          show_challenges: false
        },
        last_login_at: '2024-04-20T09:00:00Z',
        created_at: '2024-02-15T00:00:00Z'
      }];
      var mockResponse = {
        status: 'success',
        data: mockBlockedUsers
      };
      mockedAxios.create().get.mockResolvedValueOnce({
        data: mockResponse
      });
      var result = yield _userService.default.getBlockedUsers();
      expect(result).toEqual(mockResponse);
    }));
    it('should handle error when fetching blocked users fails', (0, _asyncToGenerator2.default)(function* () {
      var errorResponse = {
        status: 'error',
        message: '차단된 사용자 목록을 가져올 수 없습니다.'
      };
      var mockError = createMockAxiosError(errorResponse, {
        headers: {},
        method: 'get',
        url: '/users/blocked'
      });
      mockedAxios.create().get.mockRejectedValueOnce(mockError);
      yield expect(_userService.default.getBlockedUsers()).rejects.toEqual(errorResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,