abcb9a72f78933732af89bb5f260ce3a
_getJestObj().mock('react-native', function () {
  return {
    StyleSheet: {
      create: jest.fn(function (styles) {
        return styles;
      })
    },
    Platform: {
      OS: 'android'
    },
    Dimensions: {
      get: jest.fn(function () {
        return {
          width: 375,
          height: 667
        };
      })
    },
    View: 'View',
    Text: 'Text',
    TouchableOpacity: 'TouchableOpacity',
    Image: 'Image',
    Alert: {
      alert: jest.fn()
    }
  };
});
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    setItem: jest.fn(function () {
      return Promise.resolve();
    }),
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    removeItem: jest.fn(function () {
      return Promise.resolve();
    }),
    clear: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn()
      };
    },
    useRoute: function useRoute() {
      return {
        params: {}
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var jestGlobals = _interopRequireWildcard(require("@jest/globals"));
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.expect = jestGlobals.expect;
global.test = jestGlobals.test;
global.describe = jestGlobals.describe;
global.beforeEach = jestGlobals.beforeEach;
global.afterEach = jestGlobals.afterEach;
global.jest = jestGlobals.jest;
global.__DEV__ = true;
global.window = global.window || {};
global.React = _react.default;
global.ReactDOM = _reactDom.default;
var originalConsoleError = console.error;
console.error = function () {
  var errorMessage = (arguments.length <= 0 ? undefined : arguments[0]) || '';
  if (errorMessage && typeof errorMessage === 'string' && (errorMessage.includes('ReactCurrentDispatcher') || errorMessage.includes('ReactCurrentOwner') || errorMessage.includes('act(') || errorMessage.includes('inside a test was not wrapped in act'))) {
    return;
  }
  originalConsoleError.apply(void 0, arguments);
};
jest.useFakeTimers();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiamVzdCIsImZuIiwic3R5bGVzIiwiUGxhdGZvcm0iLCJPUyIsIkRpbWVuc2lvbnMiLCJnZXQiLCJ3aWR0aCIsImhlaWdodCIsIlZpZXciLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkltYWdlIiwiQWxlcnQiLCJhbGVydCIsInNldEl0ZW0iLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJ1c2VOYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJnb0JhY2siLCJ1c2VSb3V0ZSIsInBhcmFtcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiamVzdEdsb2JhbHMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWFjdCIsIl9yZWFjdERvbSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9yZXF1aXJlIiwiZ2xvYmFsIiwiZXhwZWN0IiwidGVzdCIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImFmdGVyRWFjaCIsIl9fREVWX18iLCJ3aW5kb3ciLCJSZWFjdCIsIlJlYWN0RE9NIiwib3JpZ2luYWxDb25zb2xlRXJyb3IiLCJjb25zb2xlIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJpbmNsdWRlcyIsImFwcGx5IiwidXNlRmFrZVRpbWVycyJdLCJzb3VyY2VzIjpbImplc3Quc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQzovYXBwX2J1aWxkL0lleGlzdC9mcm9udGVuZC9qZXN0LnNldHVwLnRzXHJcbi8vIEB0cy1ub2NoZWNrXHJcblxyXG4vLyBKZXN0IOyghOyXrSDqsJ3ssrTrpbwg66i87KCAIOyEpOyglVxyXG5pbXBvcnQgKiBhcyBqZXN0R2xvYmFscyBmcm9tICdAamVzdC9nbG9iYWxzJztcclxuZ2xvYmFsLmV4cGVjdCA9IGplc3RHbG9iYWxzLmV4cGVjdDtcclxuZ2xvYmFsLnRlc3QgPSBqZXN0R2xvYmFscy50ZXN0O1xyXG5nbG9iYWwuZGVzY3JpYmUgPSBqZXN0R2xvYmFscy5kZXNjcmliZTtcclxuZ2xvYmFsLmJlZm9yZUVhY2ggPSBqZXN0R2xvYmFscy5iZWZvcmVFYWNoO1xyXG5nbG9iYWwuYWZ0ZXJFYWNoID0gamVzdEdsb2JhbHMuYWZ0ZXJFYWNoO1xyXG5nbG9iYWwuamVzdCA9IGplc3RHbG9iYWxzLmplc3Q7XHJcblxyXG4vLyBSZWFjdCDquLDrs7gg7ISk7KCVXHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuLy8g6riA66Gc67KMIOyEpOyglVxyXG5nbG9iYWwuX19ERVZfXyA9IHRydWU7XHJcbmdsb2JhbC53aW5kb3cgPSBnbG9iYWwud2luZG93IHx8IHt9O1xyXG5nbG9iYWwuUmVhY3QgPSBSZWFjdDtcclxuZ2xvYmFsLlJlYWN0RE9NID0gUmVhY3RET007XHJcblxyXG4vLyDsvZjshpQg66mU7Iuc7KeAIO2VhO2EsOungVxyXG5jb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XHJcbmNvbnNvbGUuZXJyb3IgPSAoLi4uYXJncykgPT4ge1xyXG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9IGFyZ3NbMF0gfHwgJyc7XHJcbiAgXHJcbiAgLy8gUmVhY3Qg64K067aAIOyYpOulmCDrrLTsi5xcclxuICBpZiAoZXJyb3JNZXNzYWdlICYmIHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIFxyXG4gICAgICAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdSZWFjdEN1cnJlbnREaXNwYXRjaGVyJykgfHwgXHJcbiAgICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ1JlYWN0Q3VycmVudE93bmVyJykgfHxcclxuICAgICAgIGVycm9yTWVzc2FnZS5pbmNsdWRlcygnYWN0KCcpIHx8XHJcbiAgICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ2luc2lkZSBhIHRlc3Qgd2FzIG5vdCB3cmFwcGVkIGluIGFjdCcpKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBcclxuICBvcmlnaW5hbENvbnNvbGVFcnJvciguLi5hcmdzKTtcclxufTtcclxuXHJcbi8vIO2DgOydtOuouCDrqqjtgrlcclxuamVzdC51c2VGYWtlVGltZXJzKCk7XHJcblxyXG4vLyDqsITri6jtlZwgUmVhY3QgTmF0aXZlIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZScsICgpID0+ICh7XHJcbiAgU3R5bGVTaGVldDoge1xyXG4gICAgY3JlYXRlOiBqZXN0LmZuKHN0eWxlcyA9PiBzdHlsZXMpLFxyXG4gIH0sXHJcbiAgUGxhdGZvcm06IHsgT1M6ICdhbmRyb2lkJyB9LFxyXG4gIERpbWVuc2lvbnM6IHsgZ2V0OiBqZXN0LmZuKCgpID0+ICh7IHdpZHRoOiAzNzUsIGhlaWdodDogNjY3IH0pKSB9LFxyXG4gIFZpZXc6ICdWaWV3JyxcclxuICBUZXh0OiAnVGV4dCcsXHJcbiAgVG91Y2hhYmxlT3BhY2l0eTogJ1RvdWNoYWJsZU9wYWNpdHknLFxyXG4gIEltYWdlOiAnSW1hZ2UnLFxyXG4gIEFsZXJ0OiB7IGFsZXJ0OiBqZXN0LmZuKCkgfSxcclxufSkpO1xyXG5cclxuLy8gQXN5bmNTdG9yYWdlIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJywgKCkgPT4gKHtcclxuICBzZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcclxuICBnZXRJdGVtOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShudWxsKSksXHJcbiAgcmVtb3ZlSXRlbTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXHJcbiAgY2xlYXI6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxyXG59KSk7XHJcblxyXG4vLyDrhKTruYTqsozsnbTshZgg66qo7YK5XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4gKHtcclxuICB1c2VOYXZpZ2F0aW9uOiAoKSA9PiAoe1xyXG4gICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIGdvQmFjazogamVzdC5mbigpLFxyXG4gIH0pLFxyXG4gIHVzZVJvdXRlOiAoKSA9PiAoe1xyXG4gICAgcGFyYW1zOiB7fSxcclxuICB9KSxcclxufSkpO1xyXG5cclxuLy8gVmVjdG9yIEljb25zIOuqqO2CuVxyXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucycsICgpID0+ICdJY29uJyk7XHJcblxyXG4vLyBqZXN0LW5hdGl2ZeydmCDtmZXsnqUg6riw64ql7J2EIOyngeygkSDshKTsoJXtlZjsp4Ag7JWK7J2MXHJcbi8vIEB0ZXN0aW5nLWxpYnJhcnkvamVzdC1uYXRpdmUvZXh0ZW5kLWV4cGVjdCDqtIDroKggaW1wb3J0IOygnOqxsCJdLCJtYXBwaW5ncyI6IkFBMkNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxjQUFjLEVBQUU7RUFBQSxPQUFPO0lBQy9CQyxVQUFVLEVBQUU7TUFDVkMsTUFBTSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQyxVQUFBQyxNQUFNO1FBQUEsT0FBSUEsTUFBTTtNQUFBO0lBQ2xDLENBQUM7SUFDREMsUUFBUSxFQUFFO01BQUVDLEVBQUUsRUFBRTtJQUFVLENBQUM7SUFDM0JDLFVBQVUsRUFBRTtNQUFFQyxHQUFHLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDO1FBQUEsT0FBTztVQUFFTSxLQUFLLEVBQUUsR0FBRztVQUFFQyxNQUFNLEVBQUU7UUFBSSxDQUFDO01BQUEsQ0FBQztJQUFFLENBQUM7SUFDakVDLElBQUksRUFBRSxNQUFNO0lBQ1pDLElBQUksRUFBRSxNQUFNO0lBQ1pDLGdCQUFnQixFQUFFLGtCQUFrQjtJQUNwQ0MsS0FBSyxFQUFFLE9BQU87SUFDZEMsS0FBSyxFQUFFO01BQUVDLEtBQUssRUFBRWQsSUFBSSxDQUFDQyxFQUFFLENBQUM7SUFBRTtFQUM1QixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDJDQUEyQyxFQUFFO0VBQUEsT0FBTztJQUM1RGtCLE9BQU8sRUFBRWYsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNZSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0lBQUEsRUFBQztJQUN6Q0MsT0FBTyxFQUFFbEIsSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNZSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFBQSxFQUFDO0lBQzdDRSxVQUFVLEVBQUVuQixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1lLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFBQSxFQUFDO0lBQzVDRyxLQUFLLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1lLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUM7SUFBQTtFQUN4QyxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hyQixXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQU87SUFDM0N3QixhQUFhLEVBQUUsU0FBZkEsYUFBYUEsQ0FBQTtNQUFBLE9BQVM7UUFDcEJDLFFBQVEsRUFBRXRCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDbkJzQixNQUFNLEVBQUV2QixJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUNsQixDQUFDO0lBQUEsQ0FBQztJQUNGdUIsUUFBUSxFQUFFLFNBQVZBLFFBQVFBLENBQUE7TUFBQSxPQUFTO1FBQ2ZDLE1BQU0sRUFBRSxDQUFDO01BQ1gsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdIN0IsV0FBQSxHQUFLQyxJQUFJLENBQUMsa0RBQWtELEVBQUU7RUFBQSxPQUFNLE1BQU07QUFBQSxFQUFDO0FBQUMsSUFBQTZCLHNCQUFBLEdBQUFDLE9BQUE7QUF4RTVFLElBQUFDLFdBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQVNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLFNBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFpQyxTQUFBSyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxtQkFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUosd0JBQUFJLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBOUIsR0FBQSxDQUFBMkIsQ0FBQSxPQUFBTyxDQUFBLEtBQUFDLFNBQUEsVUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxDQUFBLElBQUFiLENBQUEsb0JBQUFhLENBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFmLENBQUEsRUFBQWEsQ0FBQSxTQUFBRyxDQUFBLEdBQUFQLENBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBWixDQUFBLEVBQUFhLENBQUEsVUFBQUcsQ0FBQSxLQUFBQSxDQUFBLENBQUEzQyxHQUFBLElBQUEyQyxDQUFBLENBQUFDLEdBQUEsSUFBQVAsTUFBQSxDQUFBQyxjQUFBLENBQUFKLENBQUEsRUFBQU0sQ0FBQSxFQUFBRyxDQUFBLElBQUFULENBQUEsQ0FBQU0sQ0FBQSxJQUFBYixDQUFBLENBQUFhLENBQUEsWUFBQU4sQ0FBQSxDQUFBRixPQUFBLEdBQUFMLENBQUEsRUFBQUcsQ0FBQSxJQUFBQSxDQUFBLENBQUFjLEdBQUEsQ0FBQWpCLENBQUEsRUFBQU8sQ0FBQSxHQUFBQSxDQUFBO0FBQUEsU0FBQTVDLFlBQUE7RUFBQSxJQUFBdUQsUUFBQSxHQUFBeEIsT0FBQTtJQUFBM0IsSUFBQSxHQUFBbUQsUUFBQSxDQUFBbkQsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFUakNvRCxNQUFNLENBQUNDLE1BQU0sR0FBR3pCLFdBQVcsQ0FBQ3lCLE1BQU07QUFDbENELE1BQU0sQ0FBQ0UsSUFBSSxHQUFHMUIsV0FBVyxDQUFDMEIsSUFBSTtBQUM5QkYsTUFBTSxDQUFDRyxRQUFRLEdBQUczQixXQUFXLENBQUMyQixRQUFRO0FBQ3RDSCxNQUFNLENBQUNJLFVBQVUsR0FBRzVCLFdBQVcsQ0FBQzRCLFVBQVU7QUFDMUNKLE1BQU0sQ0FBQ0ssU0FBUyxHQUFHN0IsV0FBVyxDQUFDNkIsU0FBUztBQUN4Q0wsTUFBTSxDQUFDcEQsSUFBSSxHQUFHNEIsV0FBVyxDQUFDNUIsSUFBSTtBQU85Qm9ELE1BQU0sQ0FBQ00sT0FBTyxHQUFHLElBQUk7QUFDckJOLE1BQU0sQ0FBQ08sTUFBTSxHQUFHUCxNQUFNLENBQUNPLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDbkNQLE1BQU0sQ0FBQ1EsS0FBSyxHQUFHQSxjQUFLO0FBQ3BCUixNQUFNLENBQUNTLFFBQVEsR0FBR0EsaUJBQVE7QUFHMUIsSUFBTUMsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQ0MsS0FBSztBQUMxQ0QsT0FBTyxDQUFDQyxLQUFLLEdBQUcsWUFBYTtFQUMzQixJQUFNQyxZQUFZLEdBQUcsQ0FBQUMsU0FBQSxDQUFBQyxNQUFBLFFBQUFDLFNBQUEsR0FBQUYsU0FBQSxRQUFXLEVBQUU7RUFHbEMsSUFBSUQsWUFBWSxJQUFJLE9BQU9BLFlBQVksS0FBSyxRQUFRLEtBQy9DQSxZQUFZLENBQUNJLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxJQUMvQ0osWUFBWSxDQUFDSSxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFDMUNKLFlBQVksQ0FBQ0ksUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUM3QkosWUFBWSxDQUFDSSxRQUFRLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxFQUFFO0lBQ25FO0VBQ0Y7RUFFQVAsb0JBQW9CLENBQUFRLEtBQUEsU0FBQUosU0FBUSxDQUFDO0FBQy9CLENBQUM7QUFHRGxFLElBQUksQ0FBQ3VFLGFBQWEsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119