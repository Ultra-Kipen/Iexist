8db5134a9cee49c2efbd6173b7daddba
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var ReactNativeFeatureFlags = _interopRequireWildcard(require("react-native/src/private/featureflags/ReactNativeFeatureFlags"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var Batchinator = function () {
  function Batchinator(callback, delay) {
    (0, _classCallCheck2.default)(this, Batchinator);
    this._delay = delay;
    this._callback = callback;
  }
  return (0, _createClass2.default)(Batchinator, [{
    key: "dispose",
    value: function dispose() {
      if (this._taskHandle) {
        this._taskHandle.cancel();
        this._taskHandle = null;
      }
    }
  }, {
    key: "schedule",
    value: function schedule() {
      var _this = this;
      if (this._taskHandle) {
        return;
      }
      var invokeCallback = function invokeCallback() {
        _this._taskHandle = null;
        _this._callback();
      };
      var timeoutHandle = setTimeout(ReactNativeFeatureFlags.disableInteractionManagerInBatchinator() ? invokeCallback : function () {
        _this._taskHandle = _reactNative.InteractionManager.runAfterInteractions(invokeCallback);
      }, this._delay);
      this._taskHandle = {
        cancel: function cancel() {
          return clearTimeout(timeoutHandle);
        }
      };
    }
  }]);
}();
module.exports = Batchinator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkJhdGNoaW5hdG9yIiwiY2FsbGJhY2siLCJkZWxheSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfZGVsYXkiLCJfY2FsbGJhY2siLCJfY3JlYXRlQ2xhc3MyIiwia2V5IiwidmFsdWUiLCJkaXNwb3NlIiwiX3Rhc2tIYW5kbGUiLCJjYW5jZWwiLCJzY2hlZHVsZSIsIl90aGlzIiwiaW52b2tlQ2FsbGJhY2siLCJ0aW1lb3V0SGFuZGxlIiwic2V0VGltZW91dCIsImRpc2FibGVJbnRlcmFjdGlvbk1hbmFnZXJJbkJhdGNoaW5hdG9yIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwicnVuQWZ0ZXJJbnRlcmFjdGlvbnMiLCJjbGVhclRpbWVvdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQmF0Y2hpbmF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB7SW50ZXJhY3Rpb25NYW5hZ2VyfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0ICogYXMgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MgZnJvbSAncmVhY3QtbmF0aXZlL3NyYy9wcml2YXRlL2ZlYXR1cmVmbGFncy9SZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyc7XG5cbi8qKlxuICogQSBzaW1wbGUgY2xhc3MgZm9yIGJhdGNoaW5nIHVwIGludm9jYXRpb25zIG9mIGEgbG93LXByaSBjYWxsYmFjay4gQSB0aW1lb3V0IGlzIHNldCB0byBydW4gdGhlXG4gKiBjYWxsYmFjayBvbmNlIGFmdGVyIGEgZGVsYXksIG5vIG1hdHRlciBob3cgbWFueSB0aW1lcyBpdCdzIHNjaGVkdWxlZC4gT25jZSB0aGUgZGVsYXkgaXMgcmVhY2hlZCxcbiAqIEludGVyYWN0aW9uTWFuYWdlci5ydW5BZnRlckludGVyYWN0aW9ucyBpcyB1c2VkIHRvIGludm9rZSB0aGUgY2FsbGJhY2sgYWZ0ZXIgYW55IGhpLXByaVxuICogaW50ZXJhY3Rpb25zIGFyZSBkb25lIHJ1bm5pbmcuXG4gKlxuICogTWFrZSBzdXJlIHRvIGNsZWFudXAgd2l0aCBkaXNwb3NlKCkuICBFeGFtcGxlOlxuICpcbiAqICAgY2xhc3MgV2lkZ2V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAqICAgICBfYmF0Y2hlZFNhdmU6IG5ldyBCYXRjaGluYXRvcigoKSA9PiB0aGlzLl9zYXZlU3RhdGUsIDEwMDApO1xuICogICAgIF9zYXZlU2F0ZSgpIHtcbiAqICAgICAgIC8vIHNhdmUgdGhpcy5zdGF0ZSB0byBkaXNrXG4gKiAgICAgfVxuICogICAgIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAqICAgICAgIHRoaXMuX2JhdGNoZWRTYXZlLnNjaGVkdWxlKCk7XG4gKiAgICAgfVxuICogICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICogICAgICAgdGhpcy5fYmF0Y2hlZFNhdmUuZGlzcG9zZSgpO1xuICogICAgIH1cbiAqICAgICAuLi5cbiAqICAgfVxuICovXG5jbGFzcyBCYXRjaGluYXRvciB7XG4gIF9jYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgX2RlbGF5OiBudW1iZXI7XG4gIF90YXNrSGFuZGxlOiA/e2NhbmNlbDogKCkgPT4gdm9pZCwgLi4ufTtcblxuICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKCkgPT4gdm9pZCwgZGVsYXk6IG51bWJlcikge1xuICAgIHRoaXMuX2RlbGF5ID0gZGVsYXk7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfVxuXG4gIC8qXG4gICAqIENsZWFudXAgYW55IHBlbmRpbmcgdGFza3MuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGlmIHRoZXJlIGlzIGEgcGVuZGluZyB0YXNrIHRoZSBjYWxsYmFjayBpcyBydW4gaW1tZWRpYXRlbHkuIFNldCB0aGUgb3B0aW9uIGFib3J0IHRvXG4gICAqIHRydWUgdG8gbm90IGNhbGwgdGhlIGNhbGxiYWNrIGlmIGl0IHdhcyBwZW5kaW5nLlxuICAgKi9cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdGFza0hhbmRsZSkge1xuICAgICAgdGhpcy5fdGFza0hhbmRsZS5jYW5jZWwoKTtcbiAgICAgIHRoaXMuX3Rhc2tIYW5kbGUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHNjaGVkdWxlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl90YXNrSGFuZGxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGludm9rZUNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgLy8gTm90ZSB0aGF0IHdlIGNsZWFyIHRoZSBoYW5kbGUgYmVmb3JlIGludm9raW5nIHRoZSBjYWxsYmFjayBzbyB0aGF0IGlmIHRoZSBjYWxsYmFjayBjYWxsc1xuICAgICAgLy8gc2NoZWR1bGUgYWdhaW4sIGl0IHdpbGwgYWN0dWFsbHkgc2NoZWR1bGUgYW5vdGhlciB0YXNrLlxuICAgICAgdGhpcy5fdGFza0hhbmRsZSA9IG51bGw7XG4gICAgICB0aGlzLl9jYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICBjb25zdCB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChcbiAgICAgIC8vIE5PVEU6IFdoZW4gc2hpcHBpbmcgdGhpcywgZGVsZXRlIGBCYXRjaGluYXRvcmAgaW5zdGVhZCBvZiBvbmx5IHRoZXNlXG4gICAgICAvLyBsaW5lcyBvZiBjb2RlLiBXaXRob3V0IGBJbnRlcmFjdGlvbk1hbmFnZXJgLCBpdCdzIGp1c3QgYSBgc2V0VGltZW91dGAuXG4gICAgICBSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncy5kaXNhYmxlSW50ZXJhY3Rpb25NYW5hZ2VySW5CYXRjaGluYXRvcigpXG4gICAgICAgID8gaW52b2tlQ2FsbGJhY2tcbiAgICAgICAgOiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90YXNrSGFuZGxlID1cbiAgICAgICAgICAgICAgSW50ZXJhY3Rpb25NYW5hZ2VyLnJ1bkFmdGVySW50ZXJhY3Rpb25zKGludm9rZUNhbGxiYWNrKTtcbiAgICAgICAgICB9LFxuICAgICAgdGhpcy5fZGVsYXksXG4gICAgKTtcbiAgICB0aGlzLl90YXNrSGFuZGxlID0ge2NhbmNlbDogKCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhdGNoaW5hdG9yO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFVQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyx1QkFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQXlHLFNBQUFHLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxDQUFBLFdBQUFBLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLEtBQUFGLENBQUE7QUFBQSxTQUFBRix3QkFBQUUsQ0FBQSxFQUFBRSxDQUFBLFNBQUFBLENBQUEsSUFBQUYsQ0FBQSxJ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