{"version":3,"names":["_getJestObj","mock","post","jest","fn","get","delete","_interopRequireDefault","require","_asyncToGenerator2","_client","_postService","_require","describe","beforeEach","clearAllMocks","it","default","postData","content","emotion_summary","is_anonymous","emotion_ids","responseData","success","post_id","message","apiClient","mockResolvedValue","data","response","postService","createPost","expect","toEqual","toHaveBeenCalledWith","params","page","limit","emotion","sort_by","posts","user_id","like_count","comment_count","created_at","total_count","getPosts","postId","getPostById","getMyPosts","deletePost","likePost","commentData","comment_id","addComment","comments","getComments","errorResponse","status","error","Error","mockRejectedValue","rejects","toThrow"],"sources":["postService.test.ts"],"sourcesContent":["// __tests__/unit/services/postService.test.ts\r\n\r\nimport axios from 'axios';\r\nimport apiClient from '../../../src/services/api/client';\r\nimport postService, { PostCreateData, PostCommentData } from '../../../src/services/api/postService';\r\n\r\n// 불필요한 MockAdapter 제거 (apiClient를 직접 모킹할 것이므로)\r\n\r\n// apiClient 직접 모킹\r\njest.mock('../../../src/services/api/client', () => {\r\n  return {\r\n    post: jest.fn(),\r\n    get: jest.fn(),\r\n    delete: jest.fn()\r\n  };\r\n});\r\n\r\ndescribe('postService', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('createPost 메소드가 올바른 데이터로 POST 요청을 보내야 함', async () => {\r\n    const postData: PostCreateData = {\r\n      content: '오늘은 행복한 하루였어요',\r\n      emotion_summary: '행복',\r\n      is_anonymous: false,\r\n      emotion_ids: [1, 2] // 감정 ID (행복, 감사)\r\n    };\r\n\r\n    const responseData = {\r\n      success: true,\r\n      post_id: 1,\r\n      message: '게시물이 성공적으로 생성되었습니다.'\r\n    };\r\n\r\n    // apiClient 직접 모킹\r\n    (apiClient.post as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.createPost(postData);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.post).toHaveBeenCalledWith('/posts', postData);\r\n  }, 10000);\r\n\r\n  it('getPosts 메소드가 올바른 파라미터로 GET 요청을 보내야 함', async () => {\r\n    const params = {\r\n      page: 1,\r\n      limit: 10,\r\n      emotion: '행복',\r\n      sort_by: 'latest' as const\r\n    };\r\n\r\n    const responseData = {\r\n      success: true,\r\n      posts: [\r\n        {\r\n          post_id: 1,\r\n          user_id: 1,\r\n          content: '행복한 하루였어요',\r\n          emotion_summary: '행복',\r\n          like_count: 5,\r\n          comment_count: 2,\r\n          created_at: '2025-04-10T12:00:00Z'\r\n        }\r\n      ],\r\n      total_count: 1\r\n    };\r\n\r\n    (apiClient.get as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.getPosts(params);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.get).toHaveBeenCalledWith('/posts', { params });\r\n  }, 10000);\r\n\r\n  it('getPostById 메소드가 올바른 경로로 GET 요청을 보내야 함', async () => {\r\n    const postId = 1;\r\n    const responseData = {\r\n      success: true,\r\n      post: {\r\n        post_id: 1,\r\n        user_id: 1,\r\n        content: '행복한 하루였어요',\r\n        emotion_summary: '행복',\r\n        like_count: 5,\r\n        comment_count: 2,\r\n        created_at: '2025-04-10T12:00:00Z'\r\n      }\r\n    };\r\n\r\n    (apiClient.get as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.getPostById(postId);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.get).toHaveBeenCalledWith(`/posts/${postId}`);\r\n  }, 10000);\r\n\r\n  it('getMyPosts 메소드가 올바른 파라미터로 GET 요청을 보내야 함', async () => {\r\n    const params = {\r\n      page: 1,\r\n      limit: 5,\r\n      sort_by: 'popular' as const\r\n    };\r\n\r\n    const responseData = {\r\n      success: true,\r\n      posts: [\r\n        {\r\n          post_id: 2,\r\n          user_id: 1,\r\n          content: '감사한 하루였어요',\r\n          emotion_summary: '감사',\r\n          like_count: 10,\r\n          comment_count: 3,\r\n          created_at: '2025-04-09T14:30:00Z'\r\n        }\r\n      ],\r\n      total_count: 1\r\n    };\r\n\r\n    (apiClient.get as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.getMyPosts(params);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.get).toHaveBeenCalledWith('/posts/me', { params });\r\n  }, 10000);\r\n\r\n  it('deletePost 메소드가 올바른 경로로 DELETE 요청을 보내야 함', async () => {\r\n    const postId = 1;\r\n    const responseData = {\r\n      success: true,\r\n      message: '게시물이 성공적으로 삭제되었습니다.'\r\n    };\r\n\r\n    (apiClient.delete as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.deletePost(postId);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.delete).toHaveBeenCalledWith(`/posts/${postId}`);\r\n  }, 10000);\r\n\r\n  it('likePost 메소드가 올바른 경로로 POST 요청을 보내야 함', async () => {\r\n    const postId = 1;\r\n    const responseData = {\r\n      success: true,\r\n      like_count: 6,\r\n      message: '좋아요가 추가되었습니다.'\r\n    };\r\n\r\n    (apiClient.post as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.likePost(postId);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.post).toHaveBeenCalledWith(`/posts/${postId}/like`);\r\n  }, 10000);\r\n\r\n  it('addComment 메소드가 올바른 데이터로 POST 요청을 보내야 함', async () => {\r\n    const postId = 1;\r\n    const commentData: PostCommentData = {\r\n      content: '정말 공감되는 이야기네요!',\r\n      is_anonymous: true\r\n    };\r\n\r\n    const responseData = {\r\n      success: true,\r\n      comment_id: 1,\r\n      message: '댓글이 성공적으로 추가되었습니다.'\r\n    };\r\n\r\n    (apiClient.post as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.addComment(postId, commentData);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.post).toHaveBeenCalledWith(`/posts/${postId}/comments`, commentData);\r\n  }, 10000);\r\n\r\n  it('getComments 메소드가 올바른 경로로 GET 요청을 보내야 함', async () => {\r\n    const postId = 1;\r\n    const responseData = {\r\n      success: true,\r\n      comments: [\r\n        {\r\n          comment_id: 1,\r\n          post_id: 1,\r\n          user_id: 2,\r\n          content: '정말 공감되는 이야기네요!',\r\n          is_anonymous: true,\r\n          created_at: '2025-04-10T13:15:00Z'\r\n        }\r\n      ],\r\n      total_count: 1\r\n    };\r\n\r\n    (apiClient.get as jest.Mock).mockResolvedValue({ data: responseData });\r\n\r\n    const response = await postService.getComments(postId);\r\n    expect(response.data).toEqual(responseData);\r\n    expect(apiClient.get).toHaveBeenCalledWith(`/posts/${postId}/comments`);\r\n  }, 10000);\r\n\r\n  it('모든 메소드가 에러를 적절히 처리해야 함', async () => {\r\n    const errorResponse = {\r\n      message: '서버 오류가 발생했습니다.',\r\n      status: 500\r\n    };\r\n\r\n    const error = new Error('서버 오류가 발생했습니다.');\r\n    (error as any).response = { data: errorResponse, status: 500 };\r\n\r\n    // 모든 apiClient 메소드가 에러를 던지도록 설정\r\n    (apiClient.post as jest.Mock).mockRejectedValue(error);\r\n    (apiClient.get as jest.Mock).mockRejectedValue(error);\r\n    (apiClient.delete as jest.Mock).mockRejectedValue(error);\r\n\r\n    await expect(postService.createPost({ content: '테스트' })).rejects.toThrow();\r\n    await expect(postService.getPosts()).rejects.toThrow();\r\n    await expect(postService.getPostById(1)).rejects.toThrow();\r\n    await expect(postService.getMyPosts()).rejects.toThrow();\r\n    await expect(postService.deletePost(1)).rejects.toThrow();\r\n    await expect(postService.likePost(1)).rejects.toThrow();\r\n    await expect(postService.addComment(1, { content: '테스트' })).rejects.toThrow();\r\n    await expect(postService.getComments(1)).rejects.toThrow();\r\n  }, 10000);\r\n});"],"mappings":"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","ignoreList":[]}