ce949c0415cf7177e363f9beef2a3db3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBeEnabled = exports.toBeDisabled = void 0;
var jest_matcher_utils_1 = require("jest-matcher-utils");
var utils_1 = require("./utils");
var DISABLE_TYPES = ['Button', 'Slider', 'Switch', 'Text', 'TouchableHighlight', 'TouchableOpacity', 'TouchableWithoutFeedback', 'TouchableNativeFeedback', 'View', 'TextInput', 'Pressable'];
function isElementDisabled(element) {
  var _element$props, _element$props2, _element$props3, _element$props4;
  if ((0, utils_1.getType)(element) === 'TextInput' && (element == null || (_element$props = element.props) == null ? void 0 : _element$props.editable) === false) {
    return true;
  }
  if (!DISABLE_TYPES.includes((0, utils_1.getType)(element))) {
    return false;
  }
  return !!(element != null && (_element$props2 = element.props) != null && _element$props2.disabled) || !!(element != null && (_element$props3 = element.props) != null && (_element$props3 = _element$props3.accessibilityState) != null && _element$props3.disabled) || !!(element != null && (_element$props4 = element.props) != null && (_element$props4 = _element$props4.accessibilityStates) != null && _element$props4.includes('disabled'));
}
function isAncestorDisabled(element) {
  var parent = element.parent;
  return parent != null && (isElementDisabled(element) || isAncestorDisabled(parent));
}
function toBeDisabled(element) {
  var _this = this;
  (0, utils_1.checkReactElement)(element, toBeDisabled, this);
  var isDisabled = isElementDisabled(element) || isAncestorDisabled(element);
  return {
    pass: isDisabled,
    message: function message() {
      var is = isDisabled ? 'is' : 'is not';
      return [(0, jest_matcher_utils_1.matcherHint)(`${_this.isNot ? '.not' : ''}.toBeDisabled`, 'element', ''), '', `Received element ${is} disabled:`, (0, utils_1.printElement)(element)].join('\n');
    }
  };
}
exports.toBeDisabled = toBeDisabled;
function toBeEnabled(element) {
  var _this2 = this;
  (0, utils_1.checkReactElement)(element, toBeEnabled, this);
  var isEnabled = !isElementDisabled(element) && !isAncestorDisabled(element);
  return {
    pass: isEnabled,
    message: function message() {
      var is = isEnabled ? 'is' : 'is not';
      return [(0, jest_matcher_utils_1.matcherHint)(`${_this2.isNot ? '.not' : ''}.toBeEnabled`, 'element', ''), '', `Received element ${is} enabled:`, (0, utils_1.printElement)(element)].join('\n');
    }
  };
}
exports.toBeEnabled = toBeEnabled;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRvQmVFbmFibGVkIiwidG9CZURpc2FibGVkIiwiamVzdF9tYXRjaGVyX3V0aWxzXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsIkRJU0FCTEVfVFlQRVMiLCJpc0VsZW1lbnREaXNhYmxlZCIsImVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsIl9lbGVtZW50JHByb3BzMiIsIl9lbGVtZW50JHByb3BzMyIsIl9lbGVtZW50JHByb3BzNCIsImdldFR5cGUiLCJwcm9wcyIsImVkaXRhYmxlIiwiaW5jbHVkZXMiLCJkaXNhYmxlZCIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsImFjY2Vzc2liaWxpdHlTdGF0ZXMiLCJpc0FuY2VzdG9yRGlzYWJsZWQiLCJwYXJlbnQiLCJfdGhpcyIsImNoZWNrUmVhY3RFbGVtZW50IiwiaXNEaXNhYmxlZCIsInBhc3MiLCJtZXNzYWdlIiwiaXMiLCJtYXRjaGVySGludCIsImlzTm90IiwicHJpbnRFbGVtZW50Iiwiam9pbiIsIl90aGlzMiIsImlzRW5hYmxlZCJdLCJzb3VyY2VzIjpbInRvLWJlLWRpc2FibGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0JlRW5hYmxlZCA9IGV4cG9ydHMudG9CZURpc2FibGVkID0gdm9pZCAwO1xuY29uc3QgamVzdF9tYXRjaGVyX3V0aWxzXzEgPSByZXF1aXJlKFwiamVzdC1tYXRjaGVyLXV0aWxzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuLy8gRWxlbWVudHMgdGhhdCBzdXBwb3J0ICdkaXNhYmxlZCdcbmNvbnN0IERJU0FCTEVfVFlQRVMgPSBbXG4gICAgJ0J1dHRvbicsXG4gICAgJ1NsaWRlcicsXG4gICAgJ1N3aXRjaCcsXG4gICAgJ1RleHQnLFxuICAgICdUb3VjaGFibGVIaWdobGlnaHQnLFxuICAgICdUb3VjaGFibGVPcGFjaXR5JyxcbiAgICAnVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrJyxcbiAgICAnVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2snLFxuICAgICdWaWV3JyxcbiAgICAnVGV4dElucHV0JyxcbiAgICAnUHJlc3NhYmxlJyxcbl07XG5mdW5jdGlvbiBpc0VsZW1lbnREaXNhYmxlZChlbGVtZW50KSB7XG4gICAgaWYgKCgwLCB1dGlsc18xLmdldFR5cGUpKGVsZW1lbnQpID09PSAnVGV4dElucHV0JyAmJiBlbGVtZW50Py5wcm9wcz8uZWRpdGFibGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIURJU0FCTEVfVFlQRVMuaW5jbHVkZXMoKDAsIHV0aWxzXzEuZ2V0VHlwZSkoZWxlbWVudCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICghIWVsZW1lbnQ/LnByb3BzPy5kaXNhYmxlZCB8fFxuICAgICAgICAhIWVsZW1lbnQ/LnByb3BzPy5hY2Nlc3NpYmlsaXR5U3RhdGU/LmRpc2FibGVkIHx8XG4gICAgICAgICEhZWxlbWVudD8ucHJvcHM/LmFjY2Vzc2liaWxpdHlTdGF0ZXM/LmluY2x1ZGVzKCdkaXNhYmxlZCcpKTtcbn1cbmZ1bmN0aW9uIGlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KSB7XG4gICAgY29uc3QgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gICAgcmV0dXJuIHBhcmVudCAhPSBudWxsICYmIChpc0VsZW1lbnREaXNhYmxlZChlbGVtZW50KSB8fCBpc0FuY2VzdG9yRGlzYWJsZWQocGFyZW50KSk7XG59XG5mdW5jdGlvbiB0b0JlRGlzYWJsZWQoZWxlbWVudCkge1xuICAgICgwLCB1dGlsc18xLmNoZWNrUmVhY3RFbGVtZW50KShlbGVtZW50LCB0b0JlRGlzYWJsZWQsIHRoaXMpO1xuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBpc0VsZW1lbnREaXNhYmxlZChlbGVtZW50KSB8fCBpc0FuY2VzdG9yRGlzYWJsZWQoZWxlbWVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFzczogaXNEaXNhYmxlZCxcbiAgICAgICAgbWVzc2FnZTogKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXMgPSBpc0Rpc2FibGVkID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEubWF0Y2hlckhpbnQpKGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZURpc2FibGVkYCwgJ2VsZW1lbnQnLCAnJyksXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgYFJlY2VpdmVkIGVsZW1lbnQgJHtpc30gZGlzYWJsZWQ6YCxcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5wcmludEVsZW1lbnQpKGVsZW1lbnQpLFxuICAgICAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0cy50b0JlRGlzYWJsZWQgPSB0b0JlRGlzYWJsZWQ7XG5mdW5jdGlvbiB0b0JlRW5hYmxlZChlbGVtZW50KSB7XG4gICAgKDAsIHV0aWxzXzEuY2hlY2tSZWFjdEVsZW1lbnQpKGVsZW1lbnQsIHRvQmVFbmFibGVkLCB0aGlzKTtcbiAgICBjb25zdCBpc0VuYWJsZWQgPSAhaXNFbGVtZW50RGlzYWJsZWQoZWxlbWVudCkgJiYgIWlzQW5jZXN0b3JEaXNhYmxlZChlbGVtZW50KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXNzOiBpc0VuYWJsZWQsXG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzID0gaXNFbmFibGVkID8gJ2lzJyA6ICdpcyBub3QnO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAoMCwgamVzdF9tYXRjaGVyX3V0aWxzXzEubWF0Y2hlckhpbnQpKGAke3RoaXMuaXNOb3QgPyAnLm5vdCcgOiAnJ30udG9CZUVuYWJsZWRgLCAnZWxlbWVudCcsICcnKSxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICBgUmVjZWl2ZWQgZWxlbWVudCAke2lzfSBlbmFibGVkOmAsXG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEucHJpbnRFbGVtZW50KShlbGVtZW50KSxcbiAgICAgICAgICAgIF0uam9pbignXFxuJyk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydHMudG9CZUVuYWJsZWQgPSB0b0JlRW5hYmxlZDtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFBRUMsS0FBSyxFQUFFO0FBQUssQ0FBQyxDQUFDO0FBQzdERCxPQUFPLENBQUNFLFdBQVcsR0FBR0YsT0FBTyxDQUFDRyxZQUFZLEdBQUcsS0FBSyxDQUFDO0FBQ25ELElBQU1DLG9CQUFvQixHQUFHQyxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDMUQsSUFBTUMsT0FBTyxHQUFHRCxPQUFPLFVBQVUsQ0FBQztBQUVsQyxJQUFNRSxhQUFhLEdBQUcsQ0FDbEIsUUFBUSxFQUNSLFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsMEJBQTBCLEVBQzFCLHlCQUF5QixFQUN6QixNQUFNLEVBQ04sV0FBVyxFQUNYLFdBQVcsQ0FDZDtBQUNELFNBQVNDLGlCQUFpQkEsQ0FBQ0MsT0FBTyxFQUFFO0VBQUEsSUFBQUMsY0FBQSxFQUFBQyxlQUFBLEVBQUFDLGVBQUEsRUFBQUMsZUFBQTtFQUNoQyxJQUFJLENBQUMsQ0FBQyxFQUFFUCxPQUFPLENBQUNRLE9BQU8sRUFBRUwsT0FBTyxDQUFDLEtBQUssV0FBVyxJQUFJLENBQUFBLE9BQU8sYUFBQUMsY0FBQSxHQUFQRCxPQUFPLENBQUVNLEtBQUsscUJBQWRMLGNBQUEsQ0FBZ0JNLFFBQVEsTUFBSyxLQUFLLEVBQUU7SUFDckYsT0FBTyxJQUFJO0VBQ2Y7RUFDQSxJQUFJLENBQUNULGFBQWEsQ0FBQ1UsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFWCxPQUFPLENBQUNRLE9BQU8sRUFBRUwsT0FBTyxDQUFDLENBQUMsRUFBRTtJQUN4RCxPQUFPLEtBQUs7RUFDaEI7RUFDQSxPQUFRLENBQUMsRUFBQ0EsT0FBTyxhQUFBRSxlQUFBLEdBQVBGLE9BQU8sQ0FBRU0sS0FBSyxhQUFkSixlQUFBLENBQWdCTyxRQUFRLEtBQzlCLENBQUMsRUFBQ1QsT0FBTyxhQUFBRyxlQUFBLEdBQVBILE9BQU8sQ0FBRU0sS0FBSyxjQUFBSCxlQUFBLEdBQWRBLGVBQUEsQ0FBZ0JPLGtCQUFrQixhQUFsQ1AsZUFBQSxDQUFvQ00sUUFBUSxLQUM5QyxDQUFDLEVBQUNULE9BQU8sYUFBQUksZUFBQSxHQUFQSixPQUFPLENBQUVNLEtBQUssY0FBQUYsZUFBQSxHQUFkQSxlQUFBLENBQWdCTyxtQkFBbUIsYUFBbkNQLGVBQUEsQ0FBcUNJLFFBQVEsQ0FBQyxVQUFVLENBQUM7QUFDbkU7QUFDQSxTQUFTSSxrQkFBa0JBLENBQUNaLE9BQU8sRUFBRTtFQUNqQyxJQUFNYSxNQUFNLEdBQUdiLE9BQU8sQ0FBQ2EsTUFBTTtFQUM3QixPQUFPQSxNQUFNLElBQUksSUFBSSxLQUFLZCxpQkFBaUIsQ0FBQ0MsT0FBTyxDQUFDLElBQUlZLGtCQUFrQixDQUFDQyxNQUFNLENBQUMsQ0FBQztBQUN2RjtBQUNBLFNBQVNuQixZQUFZQSxDQUFDTSxPQUFPLEVBQUU7RUFBQSxJQUFBYyxLQUFBO0VBQzNCLENBQUMsQ0FBQyxFQUFFakIsT0FBTyxDQUFDa0IsaUJBQWlCLEVBQUVmLE9BQU8sRUFBRU4sWUFBWSxFQUFFLElBQUksQ0FBQztFQUMzRCxJQUFNc0IsVUFBVSxHQUFHakIsaUJBQWlCLENBQUNDLE9BQU8sQ0FBQyxJQUFJWSxrQkFBa0IsQ0FBQ1osT0FBTyxDQUFDO0VBQzVFLE9BQU87SUFDSGlCLElBQUksRUFBRUQsVUFBVTtJQUNoQkUsT0FBTyxFQUFFLFNBQVRBLE9BQU9BLENBQUEsRUFBUTtNQUNYLElBQU1DLEVBQUUsR0FBR0gsVUFBVSxHQUFHLElBQUksR0FBRyxRQUFRO01BQ3ZDLE9BQU8sQ0FDSCxDQUFDLENBQUMsRUFBRXJCLG9CQUFvQixDQUFDeUIsV0FBVyxFQUFFLEdBQUdOLEtBQUksQ0FBQ08sS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQ2hHLEVBQUUsRUFDRixvQkFBb0JGLEVBQUUsWUFBWSxFQUNsQyxDQUFDLENBQUMsRUFBRXRCLE9BQU8sQ0FBQ3lCLFlBQVksRUFBRXRCLE9BQU8sQ0FBQyxDQUNyQyxDQUFDdUIsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoQjtFQUNKLENBQUM7QUFDTDtBQUNBaEMsT0FBTyxDQUFDRyxZQUFZLEdBQUdBLFlBQVk7QUFDbkMsU0FBU0QsV0FBV0EsQ0FBQ08sT0FBTyxFQUFFO0VBQUEsSUFBQXdCLE1BQUE7RUFDMUIsQ0FBQyxDQUFDLEVBQUUzQixPQUFPLENBQUNrQixpQkFBaUIsRUFBRWYsT0FBTyxFQUFFUCxXQUFXLEVBQUUsSUFBSSxDQUFDO0VBQzFELElBQU1nQyxTQUFTLEdBQUcsQ0FBQzFCLGlCQUFpQixDQUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDWSxrQkFBa0IsQ0FBQ1osT0FBTyxDQUFDO0VBQzdFLE9BQU87SUFDSGlCLElBQUksRUFBRVEsU0FBUztJQUNmUCxPQUFPLEVBQUUsU0FBVEEsT0FBT0EsQ0FBQSxFQUFRO01BQ1gsSUFBTUMsRUFBRSxHQUFHTSxTQUFTLEdBQUcsSUFBSSxHQUFHLFFBQVE7TUFDdEMsT0FBTyxDQUNILENBQUMsQ0FBQyxFQUFFOUIsb0JBQW9CLENBQUN5QixXQUFXLEVBQUUsR0FBR0ksTUFBSSxDQUFDSCxLQUFLLEdBQUcsTUFBTSxHQUFHLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFDL0YsRUFBRSxFQUNGLG9CQUFvQkYsRUFBRSxXQUFXLEVBQ2pDLENBQUMsQ0FBQyxFQUFFdEIsT0FBTyxDQUFDeUIsWUFBWSxFQUFFdEIsT0FBTyxDQUFDLENBQ3JDLENBQUN1QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hCO0VBQ0osQ0FBQztBQUNMO0FBQ0FoQyxPQUFPLENBQUNFLFdBQVcsR0FBR0EsV0FBVyIsImlnbm9yZUxpc3QiOltdfQ==