af65f7c32ca1934c2ed0e50f631e0e5e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("./client"));
var uploadService = {
  uploadImage: function () {
    var _uploadImage = (0, _asyncToGenerator2.default)(function* (file, onProgress) {
      if (!file) {
        throw new Error('업로드할 파일이 없습니다.');
      }
      var formData = new FormData();
      if (typeof file === 'string') {
        formData.append('file', {
          uri: file,
          name: file.split('/').pop() || 'image.jpg',
          type: 'image/jpeg'
        });
      } else {
        formData.append('file', file);
      }
      try {
        return yield _client.default.post('/uploads/image', formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          },
          onUploadProgress: onProgress ? function (progressEvent) {
            var percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);
            onProgress(percentCompleted);
          } : undefined
        });
      } catch (error) {
        throw error;
      }
    });
    function uploadImage(_x, _x2) {
      return _uploadImage.apply(this, arguments);
    }
    return uploadImage;
  }(),
  uploadMultipleImages: function () {
    var _uploadMultipleImages = (0, _asyncToGenerator2.default)(function* (files, onProgress) {
      var formData = new FormData();
      files.forEach(function (file) {
        formData.append('images', file);
      });
      return _client.default.post('/uploads/images', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: onProgress ? function (progressEvent) {
          var percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);
          onProgress(percentCompleted);
        } : undefined
      });
    });
    function uploadMultipleImages(_x3, _x4) {
      return _uploadMultipleImages.apply(this, arguments);
    }
    return uploadMultipleImages;
  }(),
  uploadProfileImage: function () {
    var _uploadProfileImage = (0, _asyncToGenerator2.default)(function* (file, onProgress) {
      var formData = new FormData();
      formData.append('profile_image', file);
      return _client.default.post('/uploads/profile', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        },
        onUploadProgress: onProgress ? function (progressEvent) {
          var percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);
          onProgress(percentCompleted);
        } : undefined
      });
    });
    function uploadProfileImage(_x5, _x6) {
      return _uploadProfileImage.apply(this, arguments);
    }
    return uploadProfileImage;
  }(),
  validateImageUrl: function () {
    var _validateImageUrl = (0, _asyncToGenerator2.default)(function* (imageUrl) {
      return _client.default.head(imageUrl).then(function () {
        return true;
      }).catch(function () {
        return false;
      });
    });
    function validateImageUrl(_x7) {
      return _validateImageUrl.apply(this, arguments);
    }
    return validateImageUrl;
  }(),
  createObjectURL: function createObjectURL(file) {
    return URL.createObjectURL(file);
  },
  revokeObjectURL: function revokeObjectURL(url) {
    URL.revokeObjectURL(url);
  }
};
var _default = exports.default = uploadService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,