814406e554c3d66513f9c5c07d53aa60
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn().mockResolvedValue({
      data: {
        posts: []
      }
    }),
    deletePost: jest.fn().mockResolvedValue({
      data: {
        success: true
      }
    })
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: jest.fn(),
        goBack: jest.fn(),
        addListener: jest.fn().mockReturnValue(jest.fn())
      };
    }
  };
});
_getJestObj().mock("../../src/screens/MyPostsScreen", function () {
  var MockComponent = function MockComponent() {
    return null;
  };
  return MockComponent;
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _postService = _interopRequireDefault(require("../../src/services/api/postService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('MyPostsScreen', function () {
  it('mocks the component without rendering it', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_react.default.Fragment, {})),
      container = _render.container;
    expect(container).toBeDefined();
    expect(_postService.default.getMyPosts).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRNeVBvc3RzIiwiamVzdCIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJkYXRhIiwicG9zdHMiLCJkZWxldGVQb3N0Iiwic3VjY2VzcyIsInVzZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZSIsImdvQmFjayIsImFkZExpc3RlbmVyIiwibW9ja1JldHVyblZhbHVlIiwiTW9ja0NvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX3JlYWN0TmF0aXZlIiwiX3Bvc3RTZXJ2aWNlIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiZGVmYXVsdCIsIkZyYWdtZW50IiwiY29udGFpbmVyIiwiZXhwZWN0IiwidG9CZURlZmluZWQiLCJwb3N0U2VydmljZSJdLCJzb3VyY2VzIjpbIk15UG9zdHNTY3JlZW4udGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gX19URVNUU19fL3NjcmVlbnMvTXlQb3N0c1NjcmVlbi50ZXN0LnRzeFxyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCBwb3N0U2VydmljZSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvYXBpL3Bvc3RTZXJ2aWNlJztcclxuXHJcbi8vIOuqqOuToCDrqqjtgrnsnYQg67aE66as7ZWY7JesIOygleydmFxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zZXJ2aWNlcy9hcGkvcG9zdFNlcnZpY2UnLCAoKSA9PiAoe1xyXG4gIGdldE15UG9zdHM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XHJcbiAgICBkYXRhOiB7IHBvc3RzOiBbXSB9XHJcbiAgfSksXHJcbiAgZGVsZXRlUG9zdDogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcclxuICAgIGRhdGE6IHsgc3VjY2VzczogdHJ1ZSB9XHJcbiAgfSlcclxufSkpO1xyXG5cclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiAoe1xyXG4gIHVzZU5hdmlnYXRpb246ICgpID0+ICh7XHJcbiAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgZ29CYWNrOiBqZXN0LmZuKCksXHJcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShqZXN0LmZuKCkpXHJcbiAgfSlcclxufSkpO1xyXG5cclxuLy8g7Lu07Y+s64SM7Yq4IOuqqO2CuVxyXG5qZXN0Lm1vY2soJy4uLy4uL3NyYy9zY3JlZW5zL015UG9zdHNTY3JlZW4nLCAoKSA9PiB7XHJcbiAgY29uc3QgTW9ja0NvbXBvbmVudCA9ICgpID0+IG51bGw7XHJcbiAgcmV0dXJuIE1vY2tDb21wb25lbnQ7XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ015UG9zdHNTY3JlZW4nLCAoKSA9PiB7XHJcbiAgaXQoJ21vY2tzIHRoZSBjb21wb25lbnQgd2l0aG91dCByZW5kZXJpbmcgaXQnLCAoKSA9PiB7XHJcbiAgICAvLyDsnbQg7YWM7Iqk7Yq464qUIOy7tO2PrOuEjO2KuOulvCDsp4HsoJEg66CM642U66eB7ZWY7KeAIOyViuqzoCDrqqjtgrntlanri4jri6RcclxuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPFJlYWN0LkZyYWdtZW50IC8+KTtcclxuICAgIGV4cGVjdChjb250YWluZXIpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICBcclxuICAgIC8vIHBvc3RTZXJ2aWNlIOuplOyEnOuTnOqwgCDsobTsnqztlZjripTsp4Ag7ZmV7J24XHJcbiAgICBleHBlY3QocG9zdFNlcnZpY2UuZ2V0TXlQb3N0cykudG9CZURlZmluZWQoKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiQUFNQUEsV0FBQSxHQUFLQyxJQUFJLHVDQUF1QztFQUFBLE9BQU87SUFDckRDLFVBQVUsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxpQkFBaUIsQ0FBQztNQUN0Q0MsSUFBSSxFQUFFO1FBQUVDLEtBQUssRUFBRTtNQUFHO0lBQ3BCLENBQUMsQ0FBQztJQUNGQyxVQUFVLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUM7TUFDdENDLElBQUksRUFBRTtRQUFFRyxPQUFPLEVBQUU7TUFBSztJQUN4QixDQUFDO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVIVCxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtFQUFBLE9BQU87SUFDM0NTLGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFBO01BQUEsT0FBUztRQUNwQkMsUUFBUSxFQUFFUixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ25CUSxNQUFNLEVBQUVULElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7UUFDakJTLFdBQVcsRUFBRVYsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDVSxlQUFlLENBQUNYLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFDbEQsQ0FBQztJQUFBO0VBQ0gsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUdISixXQUFBLEdBQUtDLElBQUksb0NBQW9DLFlBQU07RUFDakQsSUFBTWMsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBO0lBQUEsT0FBUyxJQUFJO0VBQUE7RUFDaEMsT0FBT0EsYUFBYTtBQUN0QixDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBMUJILElBQUFDLE1BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUE2RCxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBakIsWUFBQTtFQUFBLElBQUFzQixRQUFBLEdBQUFMLE9BQUE7SUFBQWQsSUFBQSxHQUFBbUIsUUFBQSxDQUFBbkIsSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUEwQjdEb0IsUUFBUSxDQUFDLGVBQWUsRUFBRSxZQUFNO0VBQzlCQyxFQUFFLENBQUMsMENBQTBDLEVBQUUsWUFBTTtJQUVuRCxJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQUMsSUFBQUwsV0FBQSxDQUFBTSxHQUFBLEVBQUNULE1BQUEsQ0FBQVUsT0FBSyxDQUFDQyxRQUFRLElBQUUsQ0FBQyxDQUFDO01BQXhDQyxTQUFTLEdBQUFMLE9BQUEsQ0FBVEssU0FBUztJQUNqQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsQ0FBQ0UsV0FBVyxDQUFDLENBQUM7SUFHL0JELE1BQU0sQ0FBQ0Usb0JBQVcsQ0FBQy9CLFVBQVUsQ0FBQyxDQUFDOEIsV0FBVyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119