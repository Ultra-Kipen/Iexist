a5dcba19f987810ed2581830ffd66417
_getJestObj().mock("../../src/utils/error", function () {
  return {
    handleApiError: jest.fn(function (error) {
      return {
        message: error.message || '알 수 없는 오류'
      };
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _notifications = require("../../src/store/notifications");
var _types = require("../../src/store/types");
var _error = require("../../src/utils/error");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockFetch = jest.fn();
global.fetch = mockFetch;
describe('알림 관련 함수', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('fetchNotifications', function () {
    var dispatch = jest.fn();
    test('알림 목록 가져오기 성공 시 각 알림을 상태에 추가한다', (0, _asyncToGenerator2.default)(function* () {
      var mockNotifications = [{
        id: '1',
        content: '새로운 댓글이 달렸습니다.',
        notificationType: 'comment',
        relatedId: 123,
        isRead: false,
        createdAt: '2024-01-01T00:00:00Z'
      }, {
        id: '2',
        content: '게시물에 좋아요를 받았습니다.',
        notificationType: 'like',
        relatedId: 456,
        isRead: false,
        createdAt: '2024-01-02T00:00:00Z'
      }];
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue(mockNotifications)
      };
      mockFetch.mockResolvedValue(mockResponse);
      var result = yield (0, _notifications.fetchNotifications)(dispatch);
      expect(mockFetch).toHaveBeenCalledWith('/api/notifications', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      mockNotifications.forEach(function (notification) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.ADD_NOTIFICATION,
          payload: notification
        });
      });
      expect(result).toEqual(mockNotifications);
    }));
    test('알림 목록 가져오기 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 500,
        json: jest.fn().mockResolvedValue({
          message: '서버 오류'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _notifications.fetchNotifications)(dispatch);
        fail('알림 목록 가져오기 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '알림을 가져오는데 실패했습니다.'
        });
        expect(_error.handleApiError).toHaveBeenCalled();
      }
    }));
  });
  describe('markNotificationAsRead', function () {
    var dispatch = jest.fn();
    var notificationId = '1';
    test('알림 읽음 표시 성공 시 상태를 업데이트한다', (0, _asyncToGenerator2.default)(function* () {
      var updatedNotification = {
        id: notificationId,
        content: '새로운 댓글이 달렸습니다.',
        notificationType: 'comment',
        relatedId: 123,
        isRead: true,
        createdAt: '2024-01-01T00:00:00Z'
      };
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue(updatedNotification)
      };
      mockFetch.mockResolvedValue(mockResponse);
      var result = yield (0, _notifications.markNotificationAsRead)(dispatch, notificationId);
      expect(mockFetch).toHaveBeenCalledWith(`/api/notifications/${notificationId}/read`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.REMOVE_NOTIFICATION,
        payload: notificationId
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.ADD_NOTIFICATION,
        payload: updatedNotification
      });
      expect(result).toEqual(updatedNotification);
    }));
    test('알림 읽음 표시 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 404,
        json: jest.fn().mockResolvedValue({
          message: '알림을 찾을 수 없습니다.'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _notifications.markNotificationAsRead)(dispatch, notificationId);
        fail('알림 읽음 표시 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '알림을 읽음 표시하는데 실패했습니다.'
        });
        expect(_error.handleApiError).toHaveBeenCalled();
      }
    }));
  });
  describe('markAllNotificationsAsRead', function () {
    var dispatch = jest.fn();
    test('모든 알림 읽음 표시 성공 시 상태를 업데이트한다', (0, _asyncToGenerator2.default)(function* () {
      var updatedNotifications = [{
        id: '1',
        content: '새로운 댓글이 달렸습니다.',
        notificationType: 'comment',
        relatedId: 123,
        isRead: true,
        createdAt: '2024-01-01T00:00:00Z'
      }, {
        id: '2',
        content: '게시물에 좋아요를 받았습니다.',
        notificationType: 'like',
        relatedId: 456,
        isRead: true,
        createdAt: '2024-01-02T00:00:00Z'
      }];
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue(updatedNotifications)
      };
      mockFetch.mockResolvedValue(mockResponse);
      var result = yield (0, _notifications.markAllNotificationsAsRead)(dispatch);
      expect(mockFetch).toHaveBeenCalledWith('/api/notifications/read-all', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.CLEAR_NOTIFICATIONS
      });
      updatedNotifications.forEach(function (notification) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.ADD_NOTIFICATION,
          payload: notification
        });
      });
      expect(result).toEqual(updatedNotifications);
    }));
    test('모든 알림 읽음 표시 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 500,
        json: jest.fn().mockResolvedValue({
          message: '서버 오류'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _notifications.markAllNotificationsAsRead)(dispatch);
        fail('모든 알림 읽음 표시 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '모든 알림을 읽음 표시하는데 실패했습니다.'
        });
        expect(_error.handleApiError).toHaveBeenCalled();
      }
    }));
  });
  describe('deleteNotification', function () {
    var dispatch = jest.fn();
    var notificationId = '1';
    test('알림 삭제 성공 시 상태에서 알림을 제거한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: true,
        json: jest.fn().mockResolvedValue({
          success: true
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      var result = yield (0, _notifications.deleteNotification)(dispatch, notificationId);
      expect(mockFetch).toHaveBeenCalledWith(`/api/notifications/${notificationId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: true
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.SET_LOADING,
        payload: false
      });
      expect(dispatch).toHaveBeenCalledWith({
        type: _types.ActionType.REMOVE_NOTIFICATION,
        payload: notificationId
      });
      expect(result).toBe(true);
    }));
    test('알림 삭제 실패 시 오류를 설정한다', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        ok: false,
        status: 404,
        json: jest.fn().mockResolvedValue({
          message: '알림을 찾을 수 없습니다.'
        })
      };
      mockFetch.mockResolvedValue(mockResponse);
      try {
        yield (0, _notifications.deleteNotification)(dispatch, notificationId);
        fail('알림 삭제 실패 시 예외가 발생해야 합니다.');
      } catch (error) {
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: true
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_LOADING,
          payload: false
        });
        expect(dispatch).toHaveBeenCalledWith({
          type: _types.ActionType.SET_ERROR,
          payload: '알림을 삭제하는데 실패했습니다.'
        });
        expect(_error.handleApiError).toHaveBeenCalled();
      }
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,