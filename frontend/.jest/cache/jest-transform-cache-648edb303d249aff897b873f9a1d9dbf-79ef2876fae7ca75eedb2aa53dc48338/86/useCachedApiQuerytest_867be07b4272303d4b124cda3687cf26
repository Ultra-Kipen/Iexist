2bc443190d10c05ca5d8025c3d50ae79
_getJestObj().mock("../../src/hooks/useCache", function () {
  return {
    useCache: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactHooks = require("@testing-library/react-hooks");
var _useCachedApiQuery = require("../../src/hooks/useCachedApiQuery");
var _useCache = require("../../src/hooks/useCache");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
global.fetch = jest.fn();
describe('useCachedApiQuery', function () {
  var mockEndpoint = '/api/test';
  var mockParams = {
    id: 1,
    filter: 'active'
  };
  var mockData = {
    id: 1,
    name: 'Test Data'
  };
  var mockUseCacheReturn = {
    data: mockData,
    loading: false,
    error: null,
    refetch: jest.fn(),
    invalidateCache: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _useCache.useCache.mockReturnValue(mockUseCacheReturn);
    global.fetch.mockResolvedValue({
      ok: true,
      json: jest.fn().mockResolvedValue({
        success: true,
        data: mockData
      })
    });
  });
  it('useCache를 올바른 파라미터로 호출한다', function () {
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams);
    });
    expect(_useCache.useCache).toHaveBeenCalledWith(`api:${mockEndpoint}:${JSON.stringify(mockParams)}`, expect.any(Function), {
      ttl: undefined,
      autoLoad: true
    });
  });
  it('useCache에서 반환된 데이터, 로딩, 에러 상태를 반환한다', function () {
    var _renderHook = (0, _reactHooks.renderHook)(function () {
        return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams);
      }),
      result = _renderHook.result;
    expect(result.current.data).toBe(mockData);
    expect(result.current.loading).toBe(false);
    expect(result.current.error).toBe(null);
    expect(result.current.refetch).toBe(mockUseCacheReturn.refetch);
    expect(result.current.invalidateCache).toBe(mockUseCacheReturn.invalidateCache);
  });
  it('fetchData 함수는 올바른 API 엔드포인트로 요청한다', (0, _asyncToGenerator2.default)(function* () {
    var fetchDataFn;
    _useCache.useCache.mockImplementation(function (key, fetchFn) {
      fetchDataFn = fetchFn;
      return mockUseCacheReturn;
    });
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams);
    });
    yield fetchDataFn();
    expect(global.fetch).toHaveBeenCalledWith(`${mockEndpoint}?id=1&filter=active`);
  }));
  it('API 응답이 실패하면 오류를 발생시킨다', (0, _asyncToGenerator2.default)(function* () {
    global.fetch.mockResolvedValue({
      ok: true,
      json: jest.fn().mockResolvedValue({
        success: false,
        error: '데이터를 가져오는데 실패했습니다.'
      })
    });
    var fetchDataFn;
    _useCache.useCache.mockImplementation(function (key, fetchFn) {
      fetchDataFn = fetchFn;
      return mockUseCacheReturn;
    });
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams);
    });
    yield expect(fetchDataFn()).rejects.toThrow('데이터를 가져오는데 실패했습니다.');
  }));
  it('onSuccess 콜백이 제공되면 데이터 로드 성공 시 호출된다', (0, _asyncToGenerator2.default)(function* () {
    var mockOnSuccess = jest.fn();
    var fetchDataFn;
    _useCache.useCache.mockImplementation(function (key, fetchFn) {
      fetchDataFn = fetchFn;
      return mockUseCacheReturn;
    });
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams, {
        onSuccess: mockOnSuccess
      });
    });
    yield fetchDataFn();
    expect(mockOnSuccess).toHaveBeenCalledWith(mockData);
  }));
  it('HTTP 요청 실패 시 오류를 발생시킨다', (0, _asyncToGenerator2.default)(function* () {
    global.fetch.mockResolvedValue({
      ok: false,
      status: 404
    });
    var fetchDataFn;
    _useCache.useCache.mockImplementation(function (key, fetchFn) {
      fetchDataFn = fetchFn;
      return mockUseCacheReturn;
    });
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams);
    });
    yield expect(fetchDataFn()).rejects.toThrow('API 요청 오류: 404');
  }));
  it('onError 콜백이 제공되면 오류 발생 시 호출된다', function () {
    var mockOnError = jest.fn();
    var mockError = new Error('테스트 에러');
    _useCache.useCache.mockReturnValue(Object.assign({}, mockUseCacheReturn, {
      error: mockError
    }));
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams, {
        onError: mockOnError
      });
    });
    expect(mockOnError).toHaveBeenCalledWith(mockError);
  });
  it('ttl과 autoLoad 옵션을 useCache에 전달한다', function () {
    var ttl = 60000;
    var autoLoad = false;
    (0, _reactHooks.renderHook)(function () {
      return (0, _useCachedApiQuery.useCachedApiQuery)(mockEndpoint, mockParams, {
        ttl: ttl,
        autoLoad: autoLoad
      });
    });
    expect(_useCache.useCache).toHaveBeenCalledWith(expect.any(String), expect.any(Function), {
      ttl: ttl,
      autoLoad: autoLoad
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,