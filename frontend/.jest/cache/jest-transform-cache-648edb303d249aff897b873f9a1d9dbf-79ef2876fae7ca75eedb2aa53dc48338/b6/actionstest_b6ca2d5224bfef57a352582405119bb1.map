{"version":3,"names":["_actions","require","_types","describe","test","action","actions","setAuthenticated","expect","toEqual","type","ActionType","SET_AUTHENTICATED","payload","user","id","username","email","setUser","SET_USER","notification","content","notificationType","isRead","createdAt","addNotification","ADD_NOTIFICATION","removeNotification","REMOVE_NOTIFICATION","clearNotifications","CLEAR_NOTIFICATIONS","setTheme","SET_THEME","setLoading","SET_LOADING","setError","SET_ERROR","clearError","CLEAR_ERROR","resetState","RESET_STATE"],"sources":["actions.test.tsx"],"sourcesContent":["import { actions } from '../../src/store/actions';\r\nimport { ActionType } from '../../src/store/types';\r\n\r\ndescribe('액션 생성자 함수', () => {\r\n  test('setAuthenticated 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.setAuthenticated(true);\r\n    expect(action).toEqual({\r\n      type: ActionType.SET_AUTHENTICATED,\r\n      payload: true,\r\n    });\r\n  });\r\n  \r\n  test('setUser 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const user = { id: 1, username: 'test', email: 'test@example.com' };\r\n    const action = actions.setUser(user);\r\n    expect(action).toEqual({\r\n      type: ActionType.SET_USER,\r\n      payload: user,\r\n    });\r\n  });\r\n  \r\n  test('addNotification 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const notification = { \r\n      id: '1', \r\n      content: 'Test notification', \r\n      notificationType: 'system' as const,\r\n      isRead: false,\r\n      createdAt: '2024-01-01T00:00:00Z'\r\n    };\r\n    const action = actions.addNotification(notification);\r\n    expect(action).toEqual({\r\n      type: ActionType.ADD_NOTIFICATION,\r\n      payload: notification,\r\n    });\r\n  });\r\n  \r\n  test('removeNotification 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.removeNotification('1');\r\n    expect(action).toEqual({\r\n      type: ActionType.REMOVE_NOTIFICATION,\r\n      payload: '1',\r\n    });\r\n  });\r\n  \r\n  test('clearNotifications 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.clearNotifications();\r\n    expect(action).toEqual({\r\n      type: ActionType.CLEAR_NOTIFICATIONS,\r\n    });\r\n  });\r\n  \r\n  test('setTheme 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.setTheme('dark');\r\n    expect(action).toEqual({\r\n      type: ActionType.SET_THEME,\r\n      payload: 'dark',\r\n    });\r\n  });\r\n  \r\n  test('setLoading 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.setLoading(true);\r\n    expect(action).toEqual({\r\n      type: ActionType.SET_LOADING,\r\n      payload: true,\r\n    });\r\n  });\r\n  \r\n  test('setError 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.setError('오류 메시지');\r\n    expect(action).toEqual({\r\n      type: ActionType.SET_ERROR,\r\n      payload: '오류 메시지',\r\n    });\r\n  });\r\n  \r\n  test('clearError 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.clearError();\r\n    expect(action).toEqual({\r\n      type: ActionType.CLEAR_ERROR,\r\n    });\r\n  });\r\n  \r\n  test('resetState 액션 생성자가 올바른 액션을 반환한다', () => {\r\n    const action = actions.resetState();\r\n    expect(action).toEqual({\r\n      type: ActionType.RESET_STATE,\r\n    });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}