{"version":3,"names":["_getJestObj","mock","getMyPosts","jest","fn","Promise","resolve","data","posts","post_id","content","emotion_summary","like_count","comment_count","created_at","deletePost","success","Button","Card","Content","Actions","Chip","Dialog","Title","Portal","SafeAreaView","useNavigation","navigate","mockNavigate","goBack","addListener","mockAddListener","_interopRequireDefault","require","_asyncToGenerator2","_react","_reactNative","_MyPostsScreen","_jsxRuntime","_require","describe","beforeEach","clearAllMocks","it","default","_render","render","jsx","navigation","route","getByText","waitFor","expect","toBeTruthy","timeout"],"sources":["MyPostsScreen.test.tsx"],"sourcesContent":["// __TESTS__/screens/MyPostsScreen.test.tsx\r\nimport React from 'react';\r\nimport { render, waitFor } from '@testing-library/react-native';\r\nimport MyPostsScreen from '../../src/screens/MyPostsScreen';\r\n\r\n// 서비스 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  getMyPosts: jest.fn(() => Promise.resolve({\r\n    data: {\r\n      posts: [\r\n        {\r\n          post_id: 1,\r\n          content: '첫 번째 테스트 게시물입니다.',\r\n          emotion_summary: '행복',\r\n          like_count: 5,\r\n          comment_count: 2,\r\n          created_at: '2025-03-01T12:00:00Z',\r\n        }\r\n      ]\r\n    }\r\n  })),\r\n  deletePost: jest.fn(() => Promise.resolve({ data: { success: true } }))\r\n}));\r\n\r\n// 간단한 모킹\r\njest.mock('react-native-paper', () => ({\r\n  Button: 'Button',\r\n  Card: {\r\n    Content: 'Card.Content',\r\n    Actions: 'Card.Actions',\r\n  },\r\n  Chip: 'Chip',\r\n  Dialog: {\r\n    Title: 'Dialog.Title',\r\n    Content: 'Dialog.Content',\r\n    Actions: 'Dialog.Actions',\r\n  },\r\n  Portal: 'Portal',\r\n}));\r\n\r\njest.mock('react-native-vector-icons/MaterialCommunityIcons', () => 'Icon');\r\njest.mock('react-native-safe-area-context', () => ({ SafeAreaView: 'SafeAreaView' }));\r\n\r\n// 네비게이션 모킹\r\nconst mockNavigate = jest.fn();\r\nconst mockAddListener = jest.fn(() => jest.fn());\r\n\r\njest.mock('@react-navigation/native', () => ({\r\n  useNavigation: () => ({\r\n    navigate: mockNavigate,\r\n    goBack: jest.fn(),\r\n    addListener: mockAddListener,\r\n  }),\r\n}));\r\n\r\n// 실제 테스트\r\ndescribe('MyPostsScreen', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('renders without crashing', async () => {\r\n    const { getByText } = render(\r\n      <MyPostsScreen \r\n        navigation={{ navigate: mockNavigate, addListener: mockAddListener }} \r\n        route={{}} \r\n      />\r\n    );\r\n    \r\n    await waitFor(() => {\r\n      expect(getByText('내 게시물')).toBeTruthy();\r\n    }, { timeout: 1000 });\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}