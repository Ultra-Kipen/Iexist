5d46d89e7b226f5c51ab31c6e66fa6a4
_getJestObj().mock("../../src/services/api/postService", function () {
  return {
    getMyPosts: jest.fn(function () {
      return Promise.resolve({
        data: {
          posts: [{
            post_id: 1,
            content: '첫 번째 테스트 게시물입니다.',
            emotion_summary: '행복',
            like_count: 5,
            comment_count: 2,
            created_at: '2025-03-01T12:00:00Z'
          }]
        }
      });
    }),
    deletePost: jest.fn(function () {
      return Promise.resolve({
        data: {
          success: true
        }
      });
    })
  };
});
_getJestObj().mock('react-native-paper', function () {
  return {
    Button: 'Button',
    Card: {
      Content: 'Card.Content',
      Actions: 'Card.Actions'
    },
    Chip: 'Chip',
    Dialog: {
      Title: 'Dialog.Title',
      Content: 'Dialog.Content',
      Actions: 'Dialog.Actions'
    },
    Portal: 'Portal'
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock('react-native-safe-area-context', function () {
  return {
    SafeAreaView: 'SafeAreaView'
  };
});
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: function useNavigation() {
      return {
        navigate: mockNavigate,
        goBack: jest.fn(),
        addListener: mockAddListener
      };
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _MyPostsScreen = _interopRequireDefault(require("../../src/screens/MyPostsScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigate = jest.fn();
var mockAddListener = jest.fn(function () {
  return jest.fn();
});
describe('MyPostsScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('renders without crashing', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_MyPostsScreen.default, {
        navigation: {
          navigate: mockNavigate,
          addListener: mockAddListener
        },
        route: {}
      })),
      getByText = _render.getByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(getByText('내 게시물')).toBeTruthy();
    }, {
      timeout: 1000
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJnZXRNeVBvc3RzIiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJkYXRhIiwicG9zdHMiLCJwb3N0X2lkIiwiY29udGVudCIsImVtb3Rpb25fc3VtbWFyeSIsImxpa2VfY291bnQiLCJjb21tZW50X2NvdW50IiwiY3JlYXRlZF9hdCIsImRlbGV0ZVBvc3QiLCJzdWNjZXNzIiwiQnV0dG9uIiwiQ2FyZCIsIkNvbnRlbnQiLCJBY3Rpb25zIiwiQ2hpcCIsIkRpYWxvZyIsIlRpdGxlIiwiUG9ydGFsIiwiU2FmZUFyZWFWaWV3IiwidXNlTmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwibW9ja05hdmlnYXRlIiwiZ29CYWNrIiwiYWRkTGlzdGVuZXIiLCJtb2NrQWRkTGlzdGVuZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdCIsIl9yZWFjdE5hdGl2ZSIsIl9NeVBvc3RzU2NyZWVuIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJpdCIsImRlZmF1bHQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwibmF2aWdhdGlvbiIsInJvdXRlIiwiZ2V0QnlUZXh0Iiwid2FpdEZvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0aW1lb3V0Il0sInNvdXJjZXMiOlsiTXlQb3N0c1NjcmVlbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBfX1RFU1RTX18vc2NyZWVucy9NeVBvc3RzU2NyZWVuLnRlc3QudHN4XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHJlbmRlciwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IE15UG9zdHNTY3JlZW4gZnJvbSAnLi4vLi4vc3JjL3NjcmVlbnMvTXlQb3N0c1NjcmVlbic7XHJcblxyXG4vLyDshJzruYTsiqQg66qo7YK5XHJcbmplc3QubW9jaygnLi4vLi4vc3JjL3NlcnZpY2VzL2FwaS9wb3N0U2VydmljZScsICgpID0+ICh7XHJcbiAgZ2V0TXlQb3N0czogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xyXG4gICAgZGF0YToge1xyXG4gICAgICBwb3N0czogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBvc3RfaWQ6IDEsXHJcbiAgICAgICAgICBjb250ZW50OiAn7LKrIOuyiOynuCDthYzsiqTtirgg6rKM7Iuc66y87J6F64uI64ukLicsXHJcbiAgICAgICAgICBlbW90aW9uX3N1bW1hcnk6ICftlonrs7UnLFxyXG4gICAgICAgICAgbGlrZV9jb3VudDogNSxcclxuICAgICAgICAgIGNvbW1lbnRfY291bnQ6IDIsXHJcbiAgICAgICAgICBjcmVhdGVkX2F0OiAnMjAyNS0wMy0wMVQxMjowMDowMFonLFxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfVxyXG4gIH0pKSxcclxuICBkZWxldGVQb3N0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGRhdGE6IHsgc3VjY2VzczogdHJ1ZSB9IH0pKVxyXG59KSk7XHJcblxyXG4vLyDqsITri6jtlZwg66qo7YK5XHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXBhcGVyJywgKCkgPT4gKHtcclxuICBCdXR0b246ICdCdXR0b24nLFxyXG4gIENhcmQ6IHtcclxuICAgIENvbnRlbnQ6ICdDYXJkLkNvbnRlbnQnLFxyXG4gICAgQWN0aW9uczogJ0NhcmQuQWN0aW9ucycsXHJcbiAgfSxcclxuICBDaGlwOiAnQ2hpcCcsXHJcbiAgRGlhbG9nOiB7XHJcbiAgICBUaXRsZTogJ0RpYWxvZy5UaXRsZScsXHJcbiAgICBDb250ZW50OiAnRGlhbG9nLkNvbnRlbnQnLFxyXG4gICAgQWN0aW9uczogJ0RpYWxvZy5BY3Rpb25zJyxcclxuICB9LFxyXG4gIFBvcnRhbDogJ1BvcnRhbCcsXHJcbn0pKTtcclxuXHJcbmplc3QubW9jaygncmVhY3QtbmF0aXZlLXZlY3Rvci1pY29ucy9NYXRlcmlhbENvbW11bml0eUljb25zJywgKCkgPT4gJ0ljb24nKTtcclxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtc2FmZS1hcmVhLWNvbnRleHQnLCAoKSA9PiAoeyBTYWZlQXJlYVZpZXc6ICdTYWZlQXJlYVZpZXcnIH0pKTtcclxuXHJcbi8vIOuEpOu5hOqyjOydtOyFmCDrqqjtgrlcclxuY29uc3QgbW9ja05hdmlnYXRlID0gamVzdC5mbigpO1xyXG5jb25zdCBtb2NrQWRkTGlzdGVuZXIgPSBqZXN0LmZuKCgpID0+IGplc3QuZm4oKSk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+ICh7XHJcbiAgdXNlTmF2aWdhdGlvbjogKCkgPT4gKHtcclxuICAgIG5hdmlnYXRlOiBtb2NrTmF2aWdhdGUsXHJcbiAgICBnb0JhY2s6IGplc3QuZm4oKSxcclxuICAgIGFkZExpc3RlbmVyOiBtb2NrQWRkTGlzdGVuZXIsXHJcbiAgfSksXHJcbn0pKTtcclxuXHJcbi8vIOyLpOygnCDthYzsiqTtirhcclxuZGVzY3JpYmUoJ015UG9zdHNTY3JlZW4nLCAoKSA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3JlbmRlcnMgd2l0aG91dCBjcmFzaGluZycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSByZW5kZXIoXHJcbiAgICAgIDxNeVBvc3RzU2NyZWVuIFxyXG4gICAgICAgIG5hdmlnYXRpb249e3sgbmF2aWdhdGU6IG1vY2tOYXZpZ2F0ZSwgYWRkTGlzdGVuZXI6IG1vY2tBZGRMaXN0ZW5lciB9fSBcclxuICAgICAgICByb3V0ZT17e319IFxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICAgIFxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChnZXRCeVRleHQoJ+uCtCDqsozsi5zrrLwnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgfSwgeyB0aW1lb3V0OiAxMDAwIH0pO1xyXG4gIH0pO1xyXG59KTsiXSwibWFwcGluZ3MiOiJBQU1BQSxXQUFBLEdBQUtDLElBQUksdUNBQXVDO0VBQUEsT0FBTztJQUNyREMsVUFBVSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztNQUFBLE9BQU1DLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDO1FBQ3hDQyxJQUFJLEVBQUU7VUFDSkMsS0FBSyxFQUFFLENBQ0w7WUFDRUMsT0FBTyxFQUFFLENBQUM7WUFDVkMsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQkMsZUFBZSxFQUFFLElBQUk7WUFDckJDLFVBQVUsRUFBRSxDQUFDO1lBQ2JDLGFBQWEsRUFBRSxDQUFDO1lBQ2hCQyxVQUFVLEVBQUU7VUFDZCxDQUFDO1FBRUw7TUFDRixDQUFDLENBQUM7SUFBQSxFQUFDO0lBQ0hDLFVBQVUsRUFBRVosSUFBSSxDQUFDQyxFQUFFLENBQUM7TUFBQSxPQUFNQyxPQUFPLENBQUNDLE9BQU8sQ0FBQztRQUFFQyxJQUFJLEVBQUU7VUFBRVMsT0FBTyxFQUFFO1FBQUs7TUFBRSxDQUFDLENBQUM7SUFBQTtFQUN4RSxDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBR0hoQixXQUFBLEdBQUtDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtFQUFBLE9BQU87SUFDckNnQixNQUFNLEVBQUUsUUFBUTtJQUNoQkMsSUFBSSxFQUFFO01BQ0pDLE9BQU8sRUFBRSxjQUFjO01BQ3ZCQyxPQUFPLEVBQUU7SUFDWCxDQUFDO0lBQ0RDLElBQUksRUFBRSxNQUFNO0lBQ1pDLE1BQU0sRUFBRTtNQUNOQyxLQUFLLEVBQUUsY0FBYztNQUNyQkosT0FBTyxFQUFFLGdCQUFnQjtNQUN6QkMsT0FBTyxFQUFFO0lBQ1gsQ0FBQztJQUNESSxNQUFNLEVBQUU7RUFDVixDQUFDO0FBQUEsQ0FBQyxDQUFDO0FBRUh4QixXQUFBLEdBQUtDLElBQUksQ0FBQyxrREFBa0QsRUFBRTtFQUFBLE9BQU0sTUFBTTtBQUFBLEVBQUM7QUFDM0VELFdBQUEsR0FBS0MsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0VBQUEsT0FBTztJQUFFd0IsWUFBWSxFQUFFO0VBQWUsQ0FBQztBQUFBLENBQUMsQ0FBQztBQU1yRnpCLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQUEsT0FBTztJQUMzQ3lCLGFBQWEsRUFBRSxTQUFmQSxhQUFhQSxDQUFBO01BQUEsT0FBUztRQUNwQkMsUUFBUSxFQUFFQyxZQUFZO1FBQ3RCQyxNQUFNLEVBQUUxQixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCMEIsV0FBVyxFQUFFQztNQUNmLENBQUM7SUFBQTtFQUNILENBQUM7QUFBQSxDQUFDLENBQUM7QUFBQyxJQUFBQyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsa0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQXBESixJQUFBRSxNQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxjQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFBNEQsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBQUEsU0FBQWpDLFlBQUE7RUFBQSxJQUFBdUMsUUFBQSxHQUFBTixPQUFBO0lBQUE5QixJQUFBLEdBQUFvQyxRQUFBLENBQUFwQyxJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQXlDNUQsSUFBTXlCLFlBQVksR0FBR3pCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7QUFDOUIsSUFBTTJCLGVBQWUsR0FBRzVCLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0VBQUEsT0FBTUQsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUFBLEVBQUM7QUFXaERvQyxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07RUFDOUJDLFVBQVUsQ0FBQyxZQUFNO0lBQ2Z0QyxJQUFJLENBQUN1QyxhQUFhLENBQUMsQ0FBQztFQUN0QixDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLDBCQUEwQixNQUFBVCxrQkFBQSxDQUFBVSxPQUFBLEVBQUUsYUFBWTtJQUN6QyxJQUFBQyxPQUFBLEdBQXNCLElBQUFDLG1CQUFNLEVBQzFCLElBQUFSLFdBQUEsQ0FBQVMsR0FBQSxFQUFDVixjQUFBLENBQUFPLE9BQWE7UUFDWkksVUFBVSxFQUFFO1VBQUVyQixRQUFRLEVBQUVDLFlBQVk7VUFBRUUsV0FBVyxFQUFFQztRQUFnQixDQUFFO1FBQ3JFa0IsS0FBSyxFQUFFLENBQUM7TUFBRSxDQUNYLENBQ0gsQ0FBQztNQUxPQyxTQUFTLEdBQUFMLE9BQUEsQ0FBVEssU0FBUztJQU9qQixNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtNQUNsQkMsTUFBTSxDQUFDRixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQyxFQUFFO01BQUVDLE9BQU8sRUFBRTtJQUFLLENBQUMsQ0FBQztFQUN2QixDQUFDLEVBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=