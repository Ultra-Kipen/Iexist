ff22c1e1213be17dea87964ba4aef125
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlinePropManager = void 0;
exports.getInlineStyle = getInlineStyle;
exports.hasInlineStyles = hasInlineStyles;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _ConfigHelper = require("../ConfigHelper.js");
var _isSharedValue = require("../isSharedValue.js");
var _mappers = require("../mappers.js");
var _index = require("../updateProps/index.js");
var _ViewDescriptorsSet = require("../ViewDescriptorsSet.js");
var _utils = require("./utils.js");
function isInlineStyleTransform(transform) {
  if (!Array.isArray(transform)) {
    return false;
  }
  return transform.some(function (t) {
    return hasInlineStyles(t);
  });
}
function inlinePropsHasChanged(styles1, styles2) {
  if (Object.keys(styles1).length !== Object.keys(styles2).length) {
    return true;
  }
  for (var key of Object.keys(styles1)) {
    if (styles1[key] !== styles2[key]) {
      return true;
    }
  }
  return false;
}
function getInlinePropsUpdate(inlineProps) {
  'worklet';

  var update = {};
  for (var _ref of Object.entries(inlineProps)) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
    var key = _ref2[0];
    var styleValue = _ref2[1];
    if ((0, _isSharedValue.isSharedValue)(styleValue)) {
      update[key] = styleValue.value;
    } else if (Array.isArray(styleValue)) {
      update[key] = styleValue.map(function (item) {
        return getInlinePropsUpdate(item);
      });
    } else if (typeof styleValue === 'object') {
      update[key] = getInlinePropsUpdate(styleValue);
    } else {
      update[key] = styleValue;
    }
  }
  return update;
}
function extractSharedValuesMapFromProps(props) {
  var inlineProps = {};
  for (var key in props) {
    var value = props[key];
    if (key === 'style') {
      var _props$style;
      var styles = (0, _utils.flattenArray)((_props$style = props.style) != null ? _props$style : []);
      styles.forEach(function (style) {
        if (!style) {
          return;
        }
        for (var _ref3 of Object.entries(style)) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var styleKey = _ref4[0];
          var styleValue = _ref4[1];
          if ((0, _isSharedValue.isSharedValue)(styleValue)) {
            inlineProps[styleKey] = styleValue;
          } else if (styleKey === 'transform' && isInlineStyleTransform(styleValue)) {
            inlineProps[styleKey] = styleValue;
          }
        }
      });
    } else if ((0, _isSharedValue.isSharedValue)(value)) {
      inlineProps[key] = value;
    }
  }
  return inlineProps;
}
function hasInlineStyles(style) {
  if (!style) {
    return false;
  }
  return Object.keys(style).some(function (key) {
    var styleValue = style[key];
    return (0, _isSharedValue.isSharedValue)(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);
  });
}
function getInlineStyle(style, isFirstRender) {
  if (isFirstRender) {
    return getInlinePropsUpdate(style);
  }
  var newStyle = {};
  for (var _ref5 of Object.entries(style)) {
    var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
    var key = _ref6[0];
    var styleValue = _ref6[1];
    if (!(0, _isSharedValue.isSharedValue)(styleValue) && !(key === 'transform' && isInlineStyleTransform(styleValue))) {
      newStyle[key] = styleValue;
    }
  }
  return newStyle;
}
var InlinePropManager = exports.InlinePropManager = function () {
  function InlinePropManager() {
    (0, _classCallCheck2.default)(this, InlinePropManager);
    this._inlinePropsViewDescriptors = null;
    this._inlinePropsMapperId = null;
    this._inlineProps = {};
  }
  return (0, _createClass2.default)(InlinePropManager, [{
    key: "attachInlineProps",
    value: function attachInlineProps(animatedComponent, viewInfo) {
      var newInlineProps = extractSharedValuesMapFromProps(animatedComponent.props);
      var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);
      if (hasChanged) {
        if (!this._inlinePropsViewDescriptors) {
          this._inlinePropsViewDescriptors = (0, _ViewDescriptorsSet.makeViewDescriptorsSet)();
          var viewTag = viewInfo.viewTag,
            viewName = viewInfo.viewName,
            shadowNodeWrapper = viewInfo.shadowNodeWrapper,
            viewConfig = viewInfo.viewConfig;
          if (Object.keys(newInlineProps).length && viewConfig) {
            (0, _ConfigHelper.adaptViewConfig)(viewConfig);
          }
          this._inlinePropsViewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
        }
        var shareableViewDescriptors = this._inlinePropsViewDescriptors.shareableViewDescriptors;
        var updaterFunction = function updaterFunction() {
          'worklet';

          var update = getInlinePropsUpdate(newInlineProps);
          (0, _index.updateProps)(shareableViewDescriptors, update);
        };
        this._inlineProps = newInlineProps;
        if (this._inlinePropsMapperId) {
          (0, _mappers.stopMapper)(this._inlinePropsMapperId);
        }
        this._inlinePropsMapperId = null;
        if (Object.keys(newInlineProps).length) {
          this._inlinePropsMapperId = (0, _mappers.startMapper)(updaterFunction, Object.values(newInlineProps));
        }
      }
    }
  }, {
    key: "detachInlineProps",
    value: function detachInlineProps() {
      if (this._inlinePropsMapperId) {
        (0, _mappers.stopMapper)(this._inlinePropsMapperId);
      }
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,