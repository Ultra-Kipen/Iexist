1477d17b2659f039105757ec247761f8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedStyle = useAnimatedStyle;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _index = require("../animation/index.js");
var _commonTypes = require("../commonTypes.js");
var _core = require("../core.js");
var _errors = require("../errors.js");
var _PlatformChecker = require("../PlatformChecker.js");
var _processBoxShadow = require("../processBoxShadow.js");
var _index2 = require("../updateProps/index.js");
var _ViewDescriptorsSet = require("../ViewDescriptorsSet.js");
var _useSharedValue = require("./useSharedValue.js");
var _utils = require("./utils.js");
var SHOULD_BE_USE_WEB = (0, _PlatformChecker.shouldBeUseWeb)();
function prepareAnimation(frameTimestamp, animatedProp, lastAnimation, lastValue) {
  'worklet';

  if (Array.isArray(animatedProp)) {
    animatedProp.forEach(function (prop, index) {
      prepareAnimation(frameTimestamp, prop, lastAnimation && lastAnimation[index], lastValue && lastValue[index]);
    });
  }
  if (typeof animatedProp === 'object' && animatedProp.onFrame) {
    var animation = animatedProp;
    var value = animation.current;
    if (lastValue !== undefined && lastValue !== null) {
      if (typeof lastValue === 'object') {
        if (lastValue.value !== undefined) {
          value = lastValue.value;
        } else if (lastValue.onFrame !== undefined) {
          if ((lastAnimation == null ? void 0 : lastAnimation.current) !== undefined) {
            value = lastAnimation.current;
          } else if ((lastValue == null ? void 0 : lastValue.current) !== undefined) {
            value = lastValue.current;
          }
        }
      } else {
        value = lastValue;
      }
    }
    animation.callStart = function (timestamp) {
      animation.onStart(animation, value, timestamp, lastAnimation);
    };
    animation.callStart(frameTimestamp);
    animation.callStart = null;
  } else if (typeof animatedProp === 'object') {
    Object.keys(animatedProp).forEach(function (key) {
      return prepareAnimation(frameTimestamp, animatedProp[key], lastAnimation && lastAnimation[key], lastValue && lastValue[key]);
    });
  }
}
function runAnimations(animation, timestamp, key, result, animationsActive, forceCopyAnimation) {
  'worklet';

  if (!animationsActive.value) {
    return true;
  }
  if (Array.isArray(animation)) {
    result[key] = [];
    var allFinished = true;
    forceCopyAnimation = key === 'boxShadow';
    animation.forEach(function (entry, index) {
      if (!runAnimations(entry, timestamp, index, result[key], animationsActive, forceCopyAnimation)) {
        allFinished = false;
      }
    });
    return allFinished;
  } else if (typeof animation === 'object' && animation.onFrame) {
    var finished = true;
    if (!animation.finished) {
      if (animation.callStart) {
        animation.callStart(timestamp);
        animation.callStart = null;
      }
      finished = animation.onFrame(animation, timestamp);
      animation.timestamp = timestamp;
      if (finished) {
        animation.finished = true;
        animation.callback && animation.callback(true);
      }
    }
    if (forceCopyAnimation) {
      result[key] = Object.assign({}, animation.current);
    } else {
      result[key] = animation.current;
    }
    return finished;
  } else if (typeof animation === 'object') {
    result[key] = {};
    var _allFinished = true;
    Object.keys(animation).forEach(function (k) {
      if (!runAnimations(animation[k], timestamp, k, result[key], animationsActive, forceCopyAnimation)) {
        _allFinished = false;
      }
    });
    return _allFinished;
  } else {
    result[key] = animation;
    return true;
  }
}
function styleUpdater(viewDescriptors, updater, state, animationsActive) {
  'worklet';

  var _state$animations, _updater;
  var isAnimatedProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var animations = (_state$animations = state.animations) != null ? _state$animations : {};
  var newValues = (_updater = updater()) != null ? _updater : {};
  var oldValues = state.last;
  var nonAnimatedNewValues = {};
  var hasAnimations = false;
  var frameTimestamp;
  var hasNonAnimatedValues = false;
  if (!SHOULD_BE_USE_WEB && newValues.boxShadow) {
    (0, _processBoxShadow.processBoxShadow)(newValues);
  }
  for (var key in newValues) {
    var value = newValues[key];
    if ((0, _utils.isAnimated)(value)) {
      frameTimestamp = global.__frameTimestamp || global._getAnimationTimestamp();
      prepareAnimation(frameTimestamp, value, animations[key], oldValues[key]);
      animations[key] = value;
      hasAnimations = true;
    } else {
      hasNonAnimatedValues = true;
      nonAnimatedNewValues[key] = value;
      delete animations[key];
    }
  }
  if (hasAnimations) {
    var _frame = function frame(timestamp) {
      var animations = state.animations,
        last = state.last,
        isAnimationCancelled = state.isAnimationCancelled;
      if (isAnimationCancelled) {
        state.isAnimationRunning = false;
        return;
      }
      var updates = {};
      var allFinished = true;
      var _loop = function _loop(propName) {
        var finished = runAnimations(animations[propName], timestamp, propName, updates, animationsActive);
        if (finished) {
          if (Array.isArray(updates[propName])) {
            updates[propName].forEach(function (obj) {
              for (var prop in obj) {
                last[propName][prop] = obj[prop];
              }
            });
          } else {
            last[propName] = updates[propName];
          }
          delete animations[propName];
        } else {
          allFinished = false;
        }
      };
      for (var propName in animations) {
        _loop(propName);
      }
      if (updates) {
        (0, _index2.updateProps)(viewDescriptors, updates);
      }
      if (!allFinished) {
        requestAnimationFrame(_frame);
      } else {
        state.isAnimationRunning = false;
      }
    };
    state.animations = animations;
    if (!state.isAnimationRunning) {
      state.isAnimationCancelled = false;
      state.isAnimationRunning = true;
      _frame(frameTimestamp);
    }
    if (hasNonAnimatedValues) {
      (0, _index2.updateProps)(viewDescriptors, nonAnimatedNewValues);
    }
  } else {
    state.isAnimationCancelled = true;
    state.animations = [];
    if (!(0, _utils.shallowEqual)(oldValues, newValues)) {
      (0, _index2.updateProps)(viewDescriptors, newValues, isAnimatedProps);
    }
  }
  state.last = newValues;
}
function jestStyleUpdater(viewDescriptors, updater, state, animationsActive, animatedValues, adapters) {
  'worklet';

  var _state$animations2, _updater2;
  var animations = (_state$animations2 = state.animations) != null ? _state$animations2 : {};
  var newValues = (_updater2 = updater()) != null ? _updater2 : {};
  var oldValues = state.last;
  var hasAnimations = false;
  var frameTimestamp;
  Object.keys(animations).forEach(function (key) {
    var value = newValues[key];
    if (!(0, _utils.isAnimated)(value)) {
      delete animations[key];
    }
  });
  Object.keys(newValues).forEach(function (key) {
    var value = newValues[key];
    if ((0, _utils.isAnimated)(value)) {
      frameTimestamp = global.__frameTimestamp || global._getAnimationTimestamp();
      prepareAnimation(frameTimestamp, value, animations[key], oldValues[key]);
      animations[key] = value;
      hasAnimations = true;
    }
  });
  function frame(timestamp) {
    var animations = state.animations,
      last = state.last,
      isAnimationCancelled = state.isAnimationCancelled;
    if (isAnimationCancelled) {
      state.isAnimationRunning = false;
      return;
    }
    var updates = {};
    var allFinished = true;
    Object.keys(animations).forEach(function (propName) {
      var finished = runAnimations(animations[propName], timestamp, propName, updates, animationsActive);
      if (finished) {
        last[propName] = updates[propName];
        delete animations[propName];
      } else {
        allFinished = false;
      }
    });
    if (Object.keys(updates).length) {
      (0, _index2.updatePropsJestWrapper)(viewDescriptors, updates, animatedValues, adapters);
    }
    if (!allFinished) {
      requestAnimationFrame(frame);
    } else {
      state.isAnimationRunning = false;
    }
  }
  if (hasAnimations) {
    state.animations = animations;
    if (!state.isAnimationRunning) {
      state.isAnimationCancelled = false;
      state.isAnimationRunning = true;
      frame(frameTimestamp);
    }
  } else {
    state.isAnimationCancelled = true;
    state.animations = [];
  }
  state.last = newValues;
  if (!(0, _utils.shallowEqual)(oldValues, newValues)) {
    (0, _index2.updatePropsJestWrapper)(viewDescriptors, newValues, animatedValues, adapters);
  }
}
function checkSharedValueUsage(prop, currentKey) {
  if (Array.isArray(prop)) {
    for (var element of prop) {
      checkSharedValueUsage(element, currentKey);
    }
  } else if (typeof prop === 'object' && prop !== null && prop.value === undefined) {
    for (var key of Object.keys(prop)) {
      checkSharedValueUsage(prop[key], key);
    }
  } else if (currentKey !== undefined && typeof prop === 'object' && prop !== null && prop.value !== undefined) {
    throw new _errors.ReanimatedError(`Invalid value passed to \`${currentKey}\`, maybe you forgot to use \`.value\`?`);
  }
}
function useAnimatedStyle(updater, dependencies, adapters) {
  var _updater$__closure;
  var isAnimatedProps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var animatedUpdaterData = (0, _react.useRef)(null);
  var inputs = Object.values((_updater$__closure = updater.__closure) != null ? _updater$__closure : {});
  if (SHOULD_BE_USE_WEB) {
    var _dependencies;
    if (!inputs.length && (_dependencies = dependencies) != null && _dependencies.length) {
      inputs = dependencies;
    }
    if (true && !inputs.length && !dependencies && !(0, _commonTypes.isWorkletFunction)(updater)) {
      throw new _errors.ReanimatedError(`\`useAnimatedStyle\` was used without a dependency array or Babel plugin. Please explicitly pass a dependency array, or enable the Babel plugin.
For more, see the docs: \`https://docs.swmansion.com/react-native-reanimated/docs/guides/web-support#web-without-the-babel-plugin\`.`);
    }
  }
  var adaptersArray = adapters ? Array.isArray(adapters) ? adapters : [adapters] : [];
  var adaptersHash = adapters ? (0, _utils.buildWorkletsHash)(adaptersArray) : null;
  var areAnimationsActive = (0, _useSharedValue.useSharedValue)(true);
  var jestAnimatedValues = (0, _react.useRef)({});
  if (!dependencies) {
    dependencies = [].concat((0, _toConsumableArray2.default)(inputs), [updater.__workletHash]);
  } else {
    dependencies.push(updater.__workletHash);
  }
  adaptersHash && dependencies.push(adaptersHash);
  if (!animatedUpdaterData.current) {
    var initialStyle = (0, _index.initialUpdaterRun)(updater);
    if (true) {
      (0, _utils.validateAnimatedStyles)(initialStyle);
    }
    animatedUpdaterData.current = {
      initial: {
        value: initialStyle,
        updater: updater
      },
      remoteState: (0, _core.makeShareable)({
        last: initialStyle,
        animations: {},
        isAnimationCancelled: false,
        isAnimationRunning: false
      }),
      viewDescriptors: (0, _ViewDescriptorsSet.makeViewDescriptorsSet)()
    };
  }
  var _animatedUpdaterData$ = animatedUpdaterData.current,
    initial = _animatedUpdaterData$.initial,
    remoteState = _animatedUpdaterData$.remoteState,
    viewDescriptors = _animatedUpdaterData$.viewDescriptors;
  var shareableViewDescriptors = viewDescriptors.shareableViewDescriptors;
  dependencies.push(shareableViewDescriptors);
  (0, _react.useEffect)(function () {
    var fun;
    var updaterFn = updater;
    if (adapters) {
      updaterFn = function updaterFn() {
        'worklet';

        var newValues = updater();
        adaptersArray.forEach(function (adapter) {
          adapter(newValues);
        });
        return newValues;
      };
    }
    if ((0, _PlatformChecker.isJest)()) {
      fun = function fun() {
        'worklet';

        jestStyleUpdater(shareableViewDescriptors, updater, remoteState, areAnimationsActive, jestAnimatedValues, adaptersArray);
      };
    } else {
      fun = function fun() {
        'worklet';

        styleUpdater(shareableViewDescriptors, updaterFn, remoteState, areAnimationsActive, isAnimatedProps);
      };
    }
    var mapperId = (0, _core.startMapper)(fun, inputs);
    return function () {
      (0, _core.stopMapper)(mapperId);
    };
  }, dependencies);
  (0, _react.useEffect)(function () {
    areAnimationsActive.value = true;
    return function () {
      areAnimationsActive.value = false;
    };
  }, [areAnimationsActive]);
  checkSharedValueUsage(initial.value);
  var animatedStyleHandle = (0, _react.useRef)(null);
  if (!animatedStyleHandle.current) {
    animatedStyleHandle.current = (0, _PlatformChecker.isJest)() ? {
      viewDescriptors: viewDescriptors,
      initial: initial,
      jestAnimatedValues: jestAnimatedValues
    } : {
      viewDescriptors: viewDescriptors,
      initial: initial
    };
  }
  return animatedStyleHandle.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,