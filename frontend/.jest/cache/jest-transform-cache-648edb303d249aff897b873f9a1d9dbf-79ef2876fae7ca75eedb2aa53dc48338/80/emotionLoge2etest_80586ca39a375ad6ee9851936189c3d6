18df6cc047a4b156dbf13a53a09702ff
_getJestObj().mock("../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
_getJestObj().mock('react-native/Libraries/Alert/Alert', function () {
  return {
    alert: jest.fn()
  };
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    _Text = _require.Text,
    TouchableOpacity = _require.TouchableOpacity,
    RNTextInput = _require.TextInput;
  return {
    Text: function Text(_ref) {
      var children = _ref.children,
        style = _ref.style;
      return (0, _jsxRuntime.jsx)(_Text, {
        style: style,
        children: children
      });
    },
    Chip: function Chip(_ref2) {
      var children = _ref2.children,
        onPress = _ref2.onPress,
        selected = _ref2.selected,
        style = _ref2.style,
        textStyle = _ref2.textStyle,
        testID = _ref2.testID;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        style: style,
        testID: testID,
        children: (0, _jsxRuntime.jsx)(_Text, {
          style: textStyle,
          children: children
        })
      });
    },
    Button: function Button(_ref3) {
      var children = _ref3.children,
        onPress = _ref3.onPress,
        mode = _ref3.mode,
        style = _ref3.style,
        disabled = _ref3.disabled,
        testID = _ref3.testID;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        style: style,
        disabled: disabled,
        testID: testID,
        children: (0, _jsxRuntime.jsx)(_Text, {
          children: children
        })
      });
    },
    TextInput: function TextInput(_ref4) {
      var label = _ref4.label,
        value = _ref4.value,
        onChangeText = _ref4.onChangeText,
        mode = _ref4.mode,
        multiline = _ref4.multiline,
        numberOfLines = _ref4.numberOfLines,
        style = _ref4.style,
        testID = _ref4.testID;
      return (0, _jsxRuntime.jsx)(RNTextInput, {
        placeholder: label,
        value: value,
        onChangeText: onChangeText,
        multiline: multiline,
        style: style,
        testID: testID
      });
    },
    ActivityIndicator: function ActivityIndicator(_ref5) {
      var size = _ref5.size;
      return (0, _jsxRuntime.jsx)(View, {
        children: (0, _jsxRuntime.jsx)(_Text, {
          children: "Loading..."
        })
      });
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _emotionService = _interopRequireDefault(require("../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
var mockEmotions = {
  status: 'success',
  data: [{
    emotion_id: 1,
    name: '행복',
    icon: 'emoticon-happy-outline',
    color: '#FFD700'
  }, {
    emotion_id: 2,
    name: '슬픔',
    icon: 'emoticon-sad-outline',
    color: '#4682B4'
  }, {
    emotion_id: 3,
    name: '불안',
    icon: 'alert-outline',
    color: '#DDA0DD'
  }, {
    emotion_id: 4,
    name: '화남',
    icon: 'emoticon-angry-outline',
    color: '#FF4500'
  }]
};
function EmotionLogScreen(_ref6) {
  var navigation = _ref6.navigation;
  var _React$useState = _react.default.useState(true),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isLoading = _React$useState2[0],
    setIsLoading = _React$useState2[1];
  var _React$useState3 = _react.default.useState([]),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    emotions = _React$useState4[0],
    setEmotions = _React$useState4[1];
  var _React$useState5 = _react.default.useState([]),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    selectedEmotions = _React$useState6[0],
    setSelectedEmotions = _React$useState6[1];
  var _React$useState7 = _react.default.useState(''),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    note = _React$useState8[0],
    setNote = _React$useState8[1];
  _react.default.useEffect(function () {
    _emotionService.default.getAllEmotions().then(function (response) {
      setEmotions(response.data.data);
      setIsLoading(false);
    }).catch(function (error) {
      _reactNative2.Alert.alert('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
      setIsLoading(false);
    });
  }, []);
  var toggleEmotion = function toggleEmotion(emotionId) {
    if (selectedEmotions.includes(emotionId)) {
      setSelectedEmotions(selectedEmotions.filter(function (id) {
        return id !== emotionId;
      }));
    } else {
      setSelectedEmotions([].concat((0, _toConsumableArray2.default)(selectedEmotions), [emotionId]));
    }
  };
  var handleSubmit = function handleSubmit() {
    if (selectedEmotions.length === 0) {
      _reactNative2.Alert.alert('알림', '감정을 적어도 하나 이상 선택해주세요.');
      return;
    }
    _emotionService.default.recordEmotions({
      emotion_ids: selectedEmotions,
      note: note.trim() || undefined
    }).then(function () {
      _reactNative2.Alert.alert('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', [{
        text: '확인',
        onPress: function onPress() {
          return navigation.goBack();
        }
      }]);
    }).catch(function (error) {
      var _error$response;
      _reactNative2.Alert.alert('오류', ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || error.message || '감정 기록 중 오류가 발생했습니다.');
    });
  };
  if (isLoading) {
    return (0, _jsxRuntime.jsx)(_reactNative2.View, {
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uAC10\uC815 \uB370\uC774\uD130\uB97C \uBD88\uB7EC\uC624\uB294 \uC911..."
      })
    });
  }
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uC624\uB298\uC758 \uAC10\uC815"
    }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      children: "\uD604\uC7AC \uC5B4\uB5A4 \uAC10\uC815\uC744 \uB290\uB07C\uACE0 \uACC4\uC2E0\uAC00\uC694?"
    }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
      children: emotions.map(function (emotion) {
        return (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
          onPress: function onPress() {
            return toggleEmotion(emotion.emotion_id);
          },
          testID: "emotion-chip",
          children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
            children: emotion.name
          })
        }, emotion.emotion_id);
      })
    }), (0, _jsxRuntime.jsx)(_reactNative2.TextInput, {
      placeholder: "\uAC10\uC815\uC5D0 \uB300\uD55C \uBA54\uBAA8 (\uC120\uD0DD\uC0AC\uD56D)",
      value: note,
      onChangeText: setNote,
      testID: "emotion-note-input"
    }), (0, _jsxRuntime.jsx)(_reactNative2.TouchableOpacity, {
      onPress: handleSubmit,
      testID: "emotion-submit-button",
      children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: "\uAC10\uC815 \uAE30\uB85D\uD558\uAE30"
      })
    })]
  });
}
describe('EmotionLogScreen E2E Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: mockEmotions
    });
    _emotionService.default.recordEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: {
          log_id: 123,
          created_at: '2025-04-09T10:00:00Z'
        }
      }
    });
  });
  afterEach(function () {
    jest.clearAllMocks();
  });
  test('should render loading state initially', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockImplementation(function () {
      return new Promise(function (resolve) {
        setTimeout(function () {
          resolve({
            data: mockEmotions
          });
        }, 100);
      });
    });
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      queryByText = _render.queryByText;
    expect(_emotionService.default.getAllEmotions).toHaveBeenCalledTimes(1);
    expect(queryByText('감정 데이터를 불러오는 중...')).toBeTruthy();
  }));
  test('should display emotions when loaded', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getByText = _render2.getByText,
      getAllByTestId = _render2.getAllByTestId,
      queryByText = _render2.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    expect(emotionChips.length).toBe(4);
    expect(getByText('오늘의 감정')).toBeTruthy();
    expect(getByText('현재 어떤 감정을 느끼고 계신가요?')).toBeTruthy();
  }));
  test('should submit emotions successfully', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId,
      getAllByTestId = _render3.getAllByTestId,
      queryByText = _render3.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '오늘은 좋은 일이 많았어요.');
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1],
        note: '오늘은 좋은 일이 많았어요.'
      });
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }));
  test('should not submit without selecting any emotion', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getByTestId = _render4.getByTestId,
      queryByText = _render4.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '오늘의 메모');
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('알림', '감정을 적어도 하나 이상 선택해주세요.');
    expect(_emotionService.default.recordEmotions).not.toHaveBeenCalled();
  }));
  test('should handle API error when loading emotions', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.getAllEmotions.mockRejectedValueOnce(new Error('API Error'));
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '감정 데이터를 불러오는 중 오류가 발생했습니다.');
    }, {
      timeout: 5000
    });
  }));
  test('should handle API error when recording emotions', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render5.getAllByTestId,
      getByTestId = _render5.getByTestId,
      queryByText = _render5.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    }, {
      timeout: 5000
    });
  }));
  test('should toggle emotion selection', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render6.getAllByTestId,
      getByTestId = _render6.getByTestId,
      queryByText = _render6.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    _reactNative.fireEvent.press(emotionChips[0]);
    var submitButton = getByTestId('emotion-submit-button');
    expect(submitButton).toBeTruthy();
  }));
  test('should submit multiple emotions successfully', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render7.getAllByTestId,
      getByTestId = _render7.getByTestId,
      queryByText = _render7.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    _reactNative.fireEvent.press(emotionChips[2]);
    _reactNative.fireEvent.press(emotionChips[3]);
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, '여러 감정이 동시에 느껴져요.');
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [1, 3, 4],
        note: '여러 감정이 동시에 느껴져요.'
      });
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }));
  test('should handle long memo text input', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render8.getAllByTestId,
      getByTestId = _render8.getByTestId,
      queryByText = _render8.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var longText = '오늘은 정말 좋은 하루였습니다. '.repeat(10) + '많은 일이 있었지만 모두 잘 해결되었고 기분이 좋습니다.'.repeat(5);
    var noteInput = getByTestId('emotion-note-input');
    _reactNative.fireEvent.changeText(noteInput, longText);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
      var callArgs = _emotionService.default.recordEmotions.mock.calls[0][0];
      expect(callArgs).toHaveProperty('emotion_ids');
      expect(callArgs.emotion_ids).toEqual([1]);
      expect(callArgs).toHaveProperty('note');
      expect(typeof callArgs.note).toBe('string');
      expect(callArgs.note.length).toBeGreaterThan(200);
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
  }));
  test('should handle network timeout when submitting emotions', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      message: '네트워크 요청 시간이 초과되었습니다.',
      response: {
        data: {
          message: '네트워크 요청 시간이 초과되었습니다.'
        }
      }
    });
    var _render9 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render9.getAllByTestId,
      getByTestId = _render9.getByTestId,
      queryByText = _render9.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[0]);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('오류', '네트워크 요청 시간이 초과되었습니다.');
    }, {
      timeout: 5000
    });
    expect(mockNavigation.goBack).not.toHaveBeenCalled();
  }));
  test('should render all emotion data correctly', (0, _asyncToGenerator2.default)(function* () {
    var _render10 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render10.getAllByTestId,
      queryByText = _render10.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    expect(emotionChips.length).toBe(4);
  }));
  test('should submit emotions without memo', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.Alert.alert.mockImplementation(function (title, message, buttons) {
      if (buttons && buttons.length > 0 && buttons[0].onPress) {
        buttons[0].onPress();
      }
    });
    var _render11 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(EmotionLogScreen, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render11.getAllByTestId,
      getByTestId = _render11.getByTestId,
      queryByText = _render11.queryByText;
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByText('감정 데이터를 불러오는 중...')).toBeNull();
    }, {
      timeout: 5000
    });
    var emotionChips = getAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(emotionChips[1]);
    var submitButton = getByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalledWith({
        emotion_ids: [2],
        note: undefined
      });
    }, {
      timeout: 5000
    });
    expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('감정 기록 완료', '오늘의 감정이 성공적으로 기록되었습니다.', expect.anything());
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,