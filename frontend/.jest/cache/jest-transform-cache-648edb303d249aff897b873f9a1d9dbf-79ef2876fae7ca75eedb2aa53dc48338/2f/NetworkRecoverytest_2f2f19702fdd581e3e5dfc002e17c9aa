bb0c3cd8190f193a035bb973b508eb0c
_getJestObj().mock('axios');
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var DataFetchingComponent = function DataFetchingComponent() {
  var _React$useState = _react.default.useState(null),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    data = _React$useState2[0],
    setData = _React$useState2[1];
  var _React$useState3 = _react.default.useState(false),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    loading = _React$useState4[0],
    setLoading = _React$useState4[1];
  var _React$useState5 = _react.default.useState(null),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    error = _React$useState6[0],
    setError = _React$useState6[1];
  var fetchData = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        setLoading(true);
        setError(null);
        var response = yield _axios.default.get('https://api.example.com/data');
        setData(response.data);
      } catch (err) {
        setError('데이터를 불러오는 중 오류가 발생했습니다.');
      } finally {
        setLoading(false);
      }
    });
    return function fetchData() {
      return _ref.apply(this, arguments);
    };
  }();
  return (0, _jsxRuntime.jsxs)(_reactNative2.View, {
    children: [loading && (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "loading",
      children: "\uB85C\uB529 \uC911..."
    }), error && (0, _jsxRuntime.jsxs)(_reactNative2.View, {
      testID: "error-view",
      children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
        children: error
      }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
        title: "\uB2E4\uC2DC \uC2DC\uB3C4",
        onPress: fetchData,
        testID: "retry-button"
      })]
    }), data && (0, _jsxRuntime.jsx)(_reactNative2.Text, {
      testID: "data",
      children: JSON.stringify(data)
    }), (0, _jsxRuntime.jsx)(_reactNative2.Button, {
      title: "\uB370\uC774\uD130 \uAC00\uC838\uC624\uAE30",
      onPress: fetchData,
      disabled: loading,
      testID: "fetch-button"
    })]
  });
};
describe('네트워크 오류 복구 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('네트워크 오류 발생 시 오류 메시지와 재시도 버튼을 표시해야 함', (0, _asyncToGenerator2.default)(function* () {
    _axios.default.get.mockRejectedValueOnce(new Error('Network Error'));
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(DataFetchingComponent, {})),
      getByTestId = _render.getByTestId,
      queryByTestId = _render.queryByTestId;
    _reactNative.fireEvent.press(getByTestId('fetch-button'));
    expect(getByTestId('loading')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('loading')).toBeNull();
      expect(getByTestId('error-view')).toBeTruthy();
      expect(getByTestId('retry-button')).toBeTruthy();
    });
  }));
  test('재시도 버튼 클릭 시 데이터를 성공적으로 가져와야 함', (0, _asyncToGenerator2.default)(function* () {
    _axios.default.get.mockRejectedValueOnce(new Error('Network Error')).mockResolvedValueOnce({
      data: {
        message: '성공적으로 데이터를 불러왔습니다.'
      }
    });
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(DataFetchingComponent, {})),
      getByTestId = _render2.getByTestId,
      queryByTestId = _render2.queryByTestId;
    _reactNative.fireEvent.press(getByTestId('fetch-button'));
    yield (0, _reactNative.waitFor)(function () {
      expect(getByTestId('error-view')).toBeTruthy();
    });
    _reactNative.fireEvent.press(getByTestId('retry-button'));
    expect(getByTestId('loading')).toBeTruthy();
    yield (0, _reactNative.waitFor)(function () {
      expect(queryByTestId('loading')).toBeNull();
      expect(queryByTestId('error-view')).toBeNull();
      expect(getByTestId('data')).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,