06eb76abeb1cadf553c9c7b3de79f80a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var EmotionSelector = function EmotionSelector(_ref) {
  var emotions = _ref.emotions,
    selectedEmotions = _ref.selectedEmotions,
    onSelect = _ref.onSelect,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? true : _ref$multiple,
    containerStyle = _ref.containerStyle;
  var handleSelect = function handleSelect(emotionId) {
    onSelect(emotionId);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, containerStyle],
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: "\uC624\uB298\uC758 \uAC10\uC815"
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      style: styles.scrollView,
      children: emotions.map(function (emotion) {
        var isSelected = selectedEmotions.includes(emotion.id);
        return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
          style: [styles.emotionItem, isSelected && {
            backgroundColor: `${emotion.color}20`
          }],
          onPress: function onPress() {
            return handleSelect(emotion.id);
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [styles.iconContainer, {
              backgroundColor: isSelected ? emotion.color : '#EEEEEE'
            }],
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: [styles.iconText, {
                color: isSelected ? '#FFFFFF' : '#BBBBBB'
              }],
              children: emotion.name.charAt(0)
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: [styles.emotionName, isSelected && {
              color: emotion.color,
              fontWeight: '600'
            }],
            children: emotion.name
          })]
        }, emotion.id);
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    marginVertical: 12
  },
  title: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
    paddingHorizontal: 16,
    color: '#333333'
  },
  scrollView: {
    paddingHorizontal: 8
  },
  emotionItem: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginHorizontal: 6,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#EEEEEE',
    backgroundColor: '#FFFFFF',
    minWidth: 70
  },
  iconContainer: {
    width: 30,
    height: 30,
    borderRadius: 15,
    justifyContent: 'center',
    alignItems: 'center'
  },
  iconText: {
    fontSize: 16,
    fontWeight: 'bold'
  },
  emotionName: {
    marginTop: 6,
    fontSize: 12,
    color: '#666666'
  }
});
var _default = exports.default = EmotionSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,