40cbc1a24c449ae58fa5236b98c9f207
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mockAuthService = require("../mocks/mockAuthService");
var _mockEmotionService = require("../mocks/mockEmotionService");
describe('User Flow - Functional Tests', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  test('User can login and record emotion', (0, _asyncToGenerator2.default)(function* () {
    var loginCredentials = {
      email: 'test@example.com',
      password: 'password123'
    };
    var loginResponse = yield _mockAuthService.mockAuthService.login(loginCredentials);
    expect(_mockAuthService.mockAuthService.login).toHaveBeenCalledWith(loginCredentials);
    expect(loginResponse.data.success).toBe(true);
    expect(loginResponse.data.data.token).toBeDefined();
    expect(loginResponse.data.data.user).toBeDefined();
    var emotionId = 1;
    var emotionNote = '오늘은 좋은 하루였어요';
    var recordResponse = yield _mockEmotionService.mockEmotionService.logEmotion({
      emotion_ids: [emotionId],
      note: emotionNote
    });
    expect(_mockEmotionService.mockEmotionService.logEmotion).toHaveBeenCalledWith({
      emotion_ids: [emotionId],
      note: emotionNote
    });
    expect(recordResponse.data.success).toBe(true);
  }));
  test('User can view emotions and logout', (0, _asyncToGenerator2.default)(function* () {
    var emotionsResponse = yield _mockEmotionService.mockEmotionService.getAllEmotions();
    expect(_mockEmotionService.mockEmotionService.getAllEmotions).toHaveBeenCalled();
    expect(emotionsResponse.data).toHaveLength(1);
    expect(emotionsResponse.data[0].name).toBe('행복');
    var logoutResponse = yield _mockAuthService.mockAuthService.logout();
    expect(_mockAuthService.mockAuthService.logout).toHaveBeenCalled();
    expect(logoutResponse.data.success).toBe(true);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9ja0F1dGhTZXJ2aWNlIiwicmVxdWlyZSIsIl9tb2NrRW1vdGlvblNlcnZpY2UiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJqZXN0IiwiY2xlYXJBbGxNb2NrcyIsInRlc3QiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwibG9naW5DcmVkZW50aWFscyIsImVtYWlsIiwicGFzc3dvcmQiLCJsb2dpblJlc3BvbnNlIiwibW9ja0F1dGhTZXJ2aWNlIiwibG9naW4iLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImRhdGEiLCJzdWNjZXNzIiwidG9CZSIsInRva2VuIiwidG9CZURlZmluZWQiLCJ1c2VyIiwiZW1vdGlvbklkIiwiZW1vdGlvbk5vdGUiLCJyZWNvcmRSZXNwb25zZSIsIm1vY2tFbW90aW9uU2VydmljZSIsImxvZ0Vtb3Rpb24iLCJlbW90aW9uX2lkcyIsIm5vdGUiLCJlbW90aW9uc1Jlc3BvbnNlIiwiZ2V0QWxsRW1vdGlvbnMiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwidG9IYXZlTGVuZ3RoIiwibmFtZSIsImxvZ291dFJlc3BvbnNlIiwibG9nb3V0Il0sInNvdXJjZXMiOlsidXNlckZsb3cuZnVuY3Rpb25hbC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIF9fdGVzdHNfXy9mdW5jdGlvbmFsL3VzZXJGbG93LmZ1bmN0aW9uYWwudGVzdC50c1xyXG5pbXBvcnQgeyBtb2NrQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9tb2Nrcy9tb2NrQXV0aFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBtb2NrRW1vdGlvblNlcnZpY2UgfSBmcm9tICcuLi9tb2Nrcy9tb2NrRW1vdGlvblNlcnZpY2UnO1xyXG5cclxuLy8g7ZWo7IiY7ZiVIOyCrOyaqeyekCDtnZDrpoQg7YWM7Iqk7Yq4XHJcbmRlc2NyaWJlKCdVc2VyIEZsb3cgLSBGdW5jdGlvbmFsIFRlc3RzJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoJ1VzZXIgY2FuIGxvZ2luIGFuZCByZWNvcmQgZW1vdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgIC8vIOuhnOq3uOyduCDthYzsiqTtirhcclxuICAgIGNvbnN0IGxvZ2luQ3JlZGVudGlhbHMgPSB7IGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnIH07XHJcbiAgICBjb25zdCBsb2dpblJlc3BvbnNlID0gYXdhaXQgbW9ja0F1dGhTZXJ2aWNlLmxvZ2luKGxvZ2luQ3JlZGVudGlhbHMpO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja0F1dGhTZXJ2aWNlLmxvZ2luKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChsb2dpbkNyZWRlbnRpYWxzKTtcclxuICAgIGV4cGVjdChsb2dpblJlc3BvbnNlLmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICAgIGV4cGVjdChsb2dpblJlc3BvbnNlLmRhdGEuZGF0YS50b2tlbikudG9CZURlZmluZWQoKTtcclxuICAgIGV4cGVjdChsb2dpblJlc3BvbnNlLmRhdGEuZGF0YS51c2VyKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgXHJcbiAgICAvLyDqsJDsoJUg6riw66GdIO2FjOyKpO2KuFxyXG4gICAgY29uc3QgZW1vdGlvbklkID0gMTtcclxuICAgIGNvbnN0IGVtb3Rpb25Ob3RlID0gJ+yYpOuKmOydgCDsoovsnYAg7ZWY66Oo7JiA7Ja07JqUJztcclxuICAgIGNvbnN0IHJlY29yZFJlc3BvbnNlID0gYXdhaXQgbW9ja0Vtb3Rpb25TZXJ2aWNlLmxvZ0Vtb3Rpb24oeyBcclxuICAgICAgZW1vdGlvbl9pZHM6IFtlbW90aW9uSWRdLCBcclxuICAgICAgbm90ZTogZW1vdGlvbk5vdGUgXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgZXhwZWN0KG1vY2tFbW90aW9uU2VydmljZS5sb2dFbW90aW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IFxyXG4gICAgICBlbW90aW9uX2lkczogW2Vtb3Rpb25JZF0sIFxyXG4gICAgICBub3RlOiBlbW90aW9uTm90ZSBcclxuICAgIH0pO1xyXG4gICAgZXhwZWN0KHJlY29yZFJlc3BvbnNlLmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICB9KTtcclxuXHJcbiAgdGVzdCgnVXNlciBjYW4gdmlldyBlbW90aW9ucyBhbmQgbG9nb3V0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgLy8g6rCQ7KCVIOuqqeuhnSDqsIDsoLjsmKTquLAg7YWM7Iqk7Yq4XHJcbiAgICBjb25zdCBlbW90aW9uc1Jlc3BvbnNlID0gYXdhaXQgbW9ja0Vtb3Rpb25TZXJ2aWNlLmdldEFsbEVtb3Rpb25zKCk7XHJcbiAgICBcclxuICAgIGV4cGVjdChtb2NrRW1vdGlvblNlcnZpY2UuZ2V0QWxsRW1vdGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcclxuICAgIGV4cGVjdChlbW90aW9uc1Jlc3BvbnNlLmRhdGEpLnRvSGF2ZUxlbmd0aCgxKTtcclxuICAgIGV4cGVjdChlbW90aW9uc1Jlc3BvbnNlLmRhdGFbMF0ubmFtZSkudG9CZSgn7ZaJ67O1Jyk7XHJcbiAgICBcclxuICAgIC8vIOuhnOq3uOyVhOybgyDthYzsiqTtirhcclxuICAgIGNvbnN0IGxvZ291dFJlc3BvbnNlID0gYXdhaXQgbW9ja0F1dGhTZXJ2aWNlLmxvZ291dCgpO1xyXG4gICAgXHJcbiAgICBleHBlY3QobW9ja0F1dGhTZXJ2aWNlLmxvZ291dCkudG9IYXZlQmVlbkNhbGxlZCgpO1xyXG4gICAgZXhwZWN0KGxvZ291dFJlc3BvbnNlLmRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiOztBQUNBLElBQUFBLGdCQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxtQkFBQSxHQUFBRCxPQUFBO0FBR0FFLFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0VBQzdDQyxVQUFVLENBQUMsWUFBTTtJQUNmQyxJQUFJLENB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