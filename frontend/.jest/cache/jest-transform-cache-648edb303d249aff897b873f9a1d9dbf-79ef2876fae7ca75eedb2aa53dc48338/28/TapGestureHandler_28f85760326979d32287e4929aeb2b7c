f9544c5c4c517d229291db067915ab60
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TapGestureHandler = exports.tapHandlerName = exports.tapGestureHandlerProps = void 0;
var _createHandler = _interopRequireDefault(require("./createHandler"));
var _gestureHandlerCommon = require("./gestureHandlerCommon");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var tapGestureHandlerProps = ['maxDurationMs', 'maxDelayMs', 'numberOfTaps', 'maxDeltaX', 'maxDeltaY', 'maxDist', 'minPointers'];
exports.tapGestureHandlerProps = tapGestureHandlerProps;
var tapHandlerName = 'TapGestureHandler';
exports.tapHandlerName = tapHandlerName;
var TapGestureHandler = (0, _createHandler.default)({
  name: tapHandlerName,
  allowedProps: [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps), tapGestureHandlerProps),
  config: {
    shouldCancelWhenOutside: true
  }
});
exports.TapGestureHandler = TapGestureHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwidGFwR2VzdHVyZUhhbmRsZXJQcm9wcyIsInRhcEhhbmRsZXJOYW1lIiwiVGFwR2VzdHVyZUhhbmRsZXIiLCJkZWZhdWx0IiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyIsImNvbmZpZyIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIl0sInNvdXJjZXMiOlsiVGFwR2VzdHVyZUhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBUYXBHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZCB9IGZyb20gJy4vR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWQnO1xuaW1wb3J0IGNyZWF0ZUhhbmRsZXIgZnJvbSAnLi9jcmVhdGVIYW5kbGVyJztcbmltcG9ydCB7XG4gIEJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxuICBiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyxcbn0gZnJvbSAnLi9nZXN0dXJlSGFuZGxlckNvbW1vbic7XG5cbmV4cG9ydCBjb25zdCB0YXBHZXN0dXJlSGFuZGxlclByb3BzID0gW1xuICAnbWF4RHVyYXRpb25NcycsXG4gICdtYXhEZWxheU1zJyxcbiAgJ251bWJlck9mVGFwcycsXG4gICdtYXhEZWx0YVgnLFxuICAnbWF4RGVsdGFZJyxcbiAgJ21heERpc3QnLFxuICAnbWluUG9pbnRlcnMnLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IGludGVyZmFjZSBUYXBHZXN0dXJlQ29uZmlnIHtcbiAgLyoqXG4gICAqIE1pbmltdW0gbnVtYmVyIG9mIHBvaW50ZXJzIChmaW5nZXJzKSByZXF1aXJlZCB0byBiZSBwbGFjZWQgYmVmb3JlIHRoZVxuICAgKiBoYW5kbGVyIGFjdGl2YXRlcy4gU2hvdWxkIGJlIGEgcG9zaXRpdmUgaW50ZWdlci5cbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgMS5cbiAgICovXG4gIG1pblBvaW50ZXJzPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHRpbWUsIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMsIHRoYXQgZGVmaW5lcyBob3cgZmFzdCBhIGZpbmdlclxuICAgKiBtdXN0IGJlIHJlbGVhc2VkIGFmdGVyIGEgdG91Y2guIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDUwMC5cbiAgICovXG4gIG1heER1cmF0aW9uTXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gdGltZSwgZXhwcmVzc2VkIGluIG1pbGxpc2Vjb25kcywgdGhhdCBjYW4gcGFzcyBiZWZvcmUgdGhlIG5leHQgdGFwXG4gICAqIGlmIG1hbnkgdGFwcyBhcmUgcmVxdWlyZWQuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDUwMC5cbiAgICovXG4gIG1heERlbGF5TXM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiB0YXAgZ2VzdHVyZXMgcmVxdWlyZWQgdG8gYWN0aXZhdGUgdGhlIGhhbmRsZXIuIFRoZSBkZWZhdWx0IHZhbHVlXG4gICAqIGlzIDEuXG4gICAqL1xuICBudW1iZXJPZlRhcHM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gZGlzdGFuY2UsIGV4cHJlc3NlZCBpbiBwb2ludHMsIHRoYXQgZGVmaW5lcyBob3cgZmFyIHRoZSBmaW5nZXIgaXNcbiAgICogYWxsb3dlZCB0byB0cmF2ZWwgYWxvbmcgdGhlIFggYXhpcyBkdXJpbmcgYSB0YXAgZ2VzdHVyZS4gSWYgdGhlIGZpbmdlclxuICAgKiB0cmF2ZWxzIGZ1cnRoZXIgdGhhbiB0aGUgZGVmaW5lZCBkaXN0YW5jZSBhbG9uZyB0aGUgWCBheGlzIGFuZCB0aGUgaGFuZGxlclxuICAgKiBoYXNuJ3QgeWV0IGFjdGl2YXRlZCwgaXQgd2lsbCBmYWlsIHRvIHJlY29nbml6ZSB0aGUgZ2VzdHVyZS5cbiAgICovXG4gIG1heERlbHRhWD86IG51bWJlcjtcblxuICAvKipcbiAgICogTWF4aW11bSBkaXN0YW5jZSwgZXhwcmVzc2VkIGluIHBvaW50cywgdGhhdCBkZWZpbmVzIGhvdyBmYXIgdGhlIGZpbmdlciBpc1xuICAgKiBhbGxvd2VkIHRvIHRyYXZlbCBhbG9uZyB0aGUgWSBheGlzIGR1cmluZyBhIHRhcCBnZXN0dXJlLiBJZiB0aGUgZmluZ2VyXG4gICAqIHRyYXZlbHMgZnVydGhlciB0aGFuIHRoZSBkZWZpbmVkIGRpc3RhbmNlIGFsb25nIHRoZSBZIGF4aXMgYW5kIHRoZSBoYW5kbGVyXG4gICAqIGhhc24ndCB5ZXQgYWN0aXZhdGVkLCBpdCB3aWxsIGZhaWwgdG8gcmVjb2duaXplIHRoZSBnZXN0dXJlLlxuICAgKi9cbiAgbWF4RGVsdGFZPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIGRpc3RhbmNlLCBleHByZXNzZWQgaW4gcG9pbnRzLCB0aGF0IGRlZmluZXMgaG93IGZhciB0aGUgZmluZ2VyIGlzXG4gICAqIGFsbG93ZWQgdG8gdHJhdmVsIGR1cmluZyBhIHRhcCBnZXN0dXJlLiBJZiB0aGUgZmluZ2VyIHRyYXZlbHMgZnVydGhlciB0aGFuXG4gICAqIHRoZSBkZWZpbmVkIGRpc3RhbmNlIGFuZCB0aGUgaGFuZGxlciBoYXNuJ3QgeWV0XG4gICAqIGFjdGl2YXRlZCwgaXQgd2lsbCBmYWlsIHRvIHJlY29nbml6ZSB0aGUgZ2VzdHVyZS5cbiAgICovXG4gIG1heERpc3Q/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVGFwR2VzdHVyZUhhbmRsZXIgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUgdmVyc2lvbiBvZiBHZXN0dXJlIEhhbmRsZXIuIFVzZSBgR2VzdHVyZS5UYXAoKWAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYXBHZXN0dXJlSGFuZGxlclByb3BzXG4gIGV4dGVuZHMgQmFzZUdlc3R1cmVIYW5kbGVyUHJvcHM8VGFwR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWQ+LFxuICAgIFRhcEdlc3R1cmVDb25maWcge31cblxuZXhwb3J0IGNvbnN0IHRhcEhhbmRsZXJOYW1lID0gJ1RhcEdlc3R1cmVIYW5kbGVyJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUYXBHZXN0dXJlSGFuZGxlciB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZSB2ZXJzaW9uIG9mIEdlc3R1cmUgSGFuZGxlci4gVXNlIGBHZXN0dXJlLlRhcCgpYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgdHlwZSBUYXBHZXN0dXJlSGFuZGxlciA9IHR5cGVvZiBUYXBHZXN0dXJlSGFuZGxlcjtcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUYXBHZXN0dXJlSGFuZGxlciB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZSB2ZXJzaW9uIG9mIEdlc3R1cmUgSGFuZGxlci4gVXNlIGBHZXN0dXJlLlRhcCgpYCBpbnN0ZWFkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBzZWUgZGVzY3JpcHRpb24gb24gdGhlIHRvcCBvZiBnZXN0dXJlSGFuZGxlckNvbW1vbi50cyBmaWxlXG5leHBvcnQgY29uc3QgVGFwR2VzdHVyZUhhbmRsZXIgPSBjcmVhdGVIYW5kbGVyPFxuICBUYXBHZXN0dXJlSGFuZGxlclByb3BzLFxuICBUYXBHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZFxuPih7XG4gIG5hbWU6IHRhcEhhbmRsZXJOYW1lLFxuICBhbGxvd2VkUHJvcHM6IFtcbiAgICAuLi5iYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyxcbiAgICAuLi50YXBHZXN0dXJlSGFuZGxlclByb3BzLFxuICBdIGFzIGNvbnN0LFxuICBjb25maWc6IHtcbiAgICBzaG91bGRDYW5jZWxXaGVuT3V0c2lkZTogdHJ1ZSxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLHFCQUFBLEdBQUFELE9BQUE7Ozs7OztBQUtPLElBQU1FLHNCQUFzQixHQUFHLENBQ3BDLGVBRG9DLEVBRXBDLFlBRm9DLEVBR3BDLGNBSG9DLEVBSXBDLFdBSm9DLEVBS3BDLFdBTG9DLEVBTXBDLFNBTm9DLEVBT3BDLGFBUG9DLENBQS9COztBQW9FQSxJQUFNQyxjQUFjLEdBQUcsbUJBQXZCOztBQVdBLElBQU1DLGlCQUFpQixHQUFHLElBQUFOLGNBQUEsQ0FBQU8sT0FBQSxFQUcvQjtFQUNBQyxJQUFJLEVBQUVILGNBRE47RUFFQUksWUFBWSxLQUFBQyxNQUFBLEtBQUFDLG1CQUFBLENBQUFKLE9BQUEsRUFDUEoscUJBQUEsQ0FBQVMsdUJBRFMsR0FFVFIsc0JBRlMsQ0FGZDtFQU1BUyxNQUFNLEVBQUU7SUFDTkMsdUJBQXVCLEVBQUU7RUFEbkI7QUFOUixDQUgrQixDQUExQiIsImlnbm9yZUxpc3QiOltdfQ==