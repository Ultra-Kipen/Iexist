{"version":3,"names":["_getJestObj","mock","alert","jest","fn","getPosts","getBestPosts","createPost","sendMessage","likePost","mockResolvedValue","data","message","_interopRequireDefault","require","_asyncToGenerator2","_comfortWallService","_postService","_require","mockPosts","post_id","title","content","like_count","comment_count","describe","beforeEach","clearAllMocks","comfortWallService","test","default","result","expect","toEqual","toHaveBeenCalledTimes","postData","is_anonymous","toHaveBeenCalledWith","mockResolvedValueOnce","messageData","postService","mockRejectedValueOnce","response","error","toBe"],"sources":["comfortWall.e2e.test.ts"],"sourcesContent":["// 테스트 파일 전체를 변경\r\n// __tests__/e2e/comfortWall.e2e.test.ts\r\n\r\nimport React from 'react';\r\nimport comfortWallService from '../../src/services/api/comfortWallService';\r\nimport { Alert } from 'react-native';\r\nimport postService from '../../src/services/api/postService';\r\n\r\n// Alert 모킹\r\njest.mock('react-native/Libraries/Alert/Alert', () => ({\r\n  alert: jest.fn(),\r\n}));\r\n\r\n// comfortWallService 모킹\r\njest.mock('../../src/services/api/comfortWallService', () => ({\r\n  getPosts: jest.fn(),\r\n  getBestPosts: jest.fn(),\r\n  createPost: jest.fn(),\r\n  sendMessage: jest.fn(),\r\n}));\r\n\r\n// postService 모킹\r\njest.mock('../../src/services/api/postService', () => ({\r\n  likePost: jest.fn().mockResolvedValue({ data: { message: 'success' } }),\r\n}));\r\n\r\n// 테스트 데이터\r\nconst mockPosts = [\r\n  {\r\n    post_id: 1,\r\n    title: '오늘 너무 힘들어요',\r\n    content: '직장에서 스트레스가 너무 많아요. 어떻게 해야 할까요?',\r\n    like_count: 5,\r\n    comment_count: 3,\r\n  },\r\n  {\r\n    post_id: 2,\r\n    title: '대인관계가 어려워요',\r\n    content: '새로운 사람들을 만나는 것이 두려워요...',\r\n    like_count: 10,\r\n    comment_count: 7,\r\n  },\r\n];\r\n\r\ndescribe('ComfortWall Service Tests', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    (comfortWallService.getPosts as jest.Mock).mockResolvedValue({\r\n      data: { data: mockPosts },\r\n    });\r\n    (comfortWallService.createPost as jest.Mock).mockResolvedValue({\r\n      data: { message: '게시물이 성공적으로 등록되었습니다.' },\r\n    });\r\n  });\r\n\r\n  test('getPosts should return posts data', async () => {\r\n    const result = await comfortWallService.getPosts();\r\n    expect(result.data.data).toEqual(mockPosts);\r\n    expect(comfortWallService.getPosts).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  test('createPost should call API with correct data', async () => {\r\n    const postData = {\r\n      title: '새로운 고민',\r\n      content: '이것은 테스트 고민입니다.',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.createPost(postData);\r\n    \r\n    expect(comfortWallService.createPost).toHaveBeenCalledWith(postData);\r\n  });\r\n\r\n  test('sendMessage should call API with correct data', async () => {\r\n    (comfortWallService.sendMessage as jest.Mock).mockResolvedValueOnce({\r\n      data: { message: '메시지가 성공적으로 전송되었습니다.' }\r\n    });\r\n    \r\n    const messageData = {\r\n      message: '힘내세요! 응원합니다.',\r\n      is_anonymous: true\r\n    };\r\n    \r\n    await comfortWallService.sendMessage(1, messageData);\r\n    \r\n    expect(comfortWallService.sendMessage).toHaveBeenCalledWith(1, messageData);\r\n  });\r\n\r\n  test('likePost should call API with correct post ID', async () => {\r\n    await postService.likePost(1);\r\n    \r\n    expect(postService.likePost).toHaveBeenCalledWith(1);\r\n  });\r\n\r\n  test('createPost should handle API error', async () => {\r\n    // API 오류 시뮬레이션\r\n    (comfortWallService.createPost as jest.Mock).mockRejectedValueOnce({\r\n      response: { data: { message: '서버 오류가 발생했습니다.' } }\r\n    });\r\n    \r\n    try {\r\n      await comfortWallService.createPost({\r\n        title: '테스트 제목',\r\n        content: '테스트 내용'\r\n      });\r\n    } catch (error: any) {\r\n      expect(error.response.data.message).toBe('서버 오류가 발생했습니다.');\r\n    }\r\n  });\r\n});"],"mappings":"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","ignoreList":[]}