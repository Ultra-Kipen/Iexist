8e2b4273b2ee35223c394f4cebca9bb8
_getJestObj().mock("../../../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    put: jest.fn(),
    delete: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _client = _interopRequireDefault(require("../../../../src/services/api/client"));
var _goalService = _interopRequireDefault(require("../../../../src/services/api/goalService"));
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('goalService 기본 기능 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  describe('getGoals', function () {
    it('활성 목표만 조회할 수 있음', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          status: 'success',
          data: [{
            goal_id: 1,
            progress: 50
          }]
        }
      };
      _client.default.get.mockResolvedValueOnce(mockResponse);
      var result = yield _goalService.default.getGoals({
        active_only: true
      });
      expect(_client.default.get).toHaveBeenCalledWith('/goals', {
        params: {
          active_only: true
        }
      });
      expect(result).toEqual(mockResponse);
    }));
    it('페이징을 사용해 목표를 조회할 수 있음', (0, _asyncToGenerator2.default)(function* () {
      var mockResponse = {
        data: {
          status: 'success',
          data: [{
            goal_id: 1
          }, {
            goal_id: 2
          }],
          pagination: {
            total: 10,
            page: 1,
            limit: 2
          }
        }
      };
      _client.default.get.mockResolvedValueOnce(mockResponse);
      var result = yield _goalService.default.getGoals({
        page: 1,
        limit: 2
      });
      expect(_client.default.get).toHaveBeenCalledWith('/goals', {
        params: {
          page: 1,
          limit: 2
        }
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('createGoal', function () {
    it('새 목표를 생성할 수 있음', (0, _asyncToGenerator2.default)(function* () {
      var newGoal = {
        target_emotion_id: 1,
        start_date: '2025-05-01',
        end_date: '2025-05-31'
      };
      var mockResponse = {
        data: {
          status: 'success',
          data: Object.assign({
            goal_id: 1,
            user_id: 100
          }, newGoal, {
            emotion_name: '행복',
            emotion_color: '#FFD700',
            progress: 0,
            created_at: '2025-04-26T10:00:00Z',
            updated_at: '2025-04-26T10:00:00Z'
          })
        }
      };
      _client.default.post.mockResolvedValueOnce(mockResponse);
      var result = yield _goalService.default.createGoal(newGoal);
      expect(_client.default.post).toHaveBeenCalledWith('/goals', newGoal);
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('updateGoalProgress', function () {
    it('목표 진행 상황을 업데이트할 수 있음', (0, _asyncToGenerator2.default)(function* () {
      var goalId = 1;
      var progress = 75;
      var mockResponse = {
        data: {
          status: 'success',
          message: '목표 진행 상황이 업데이트되었습니다'
        }
      };
      _client.default.put.mockResolvedValueOnce(mockResponse);
      var result = yield _goalService.default.updateGoalProgress(goalId, progress);
      expect(_client.default.put).toHaveBeenCalledWith(`/goals/${goalId}/progress`, {
        progress: progress
      });
      expect(result).toEqual(mockResponse);
    }));
  });
  describe('deleteGoal', function () {
    it('목표를 삭제할 수 있음', (0, _asyncToGenerator2.default)(function* () {
      var goalId = 1;
      var mockResponse = {
        data: {
          status: 'success',
          message: '목표가 삭제되었습니다'
        }
      };
      _client.default.delete.mockResolvedValueOnce(mockResponse);
      var result = yield _goalService.default.deleteGoal(goalId);
      expect(_client.default.delete).toHaveBeenCalledWith(`/goals/${goalId}`);
      expect(result).toEqual(mockResponse);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,