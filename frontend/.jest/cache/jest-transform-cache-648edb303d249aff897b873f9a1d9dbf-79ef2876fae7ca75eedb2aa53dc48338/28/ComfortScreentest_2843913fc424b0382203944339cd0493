f81a7886936944ebe734370c881dfd12
_getJestObj().mock('react-native-paper', function () {
  var mockCardContent = jest.fn().mockImplementation(function (_ref) {
    var children = _ref.children;
    return children;
  });
  var mockTextInput = jest.fn().mockImplementation(function (props) {
    return props.testID || 'text-input';
  });
  var mockButton = jest.fn().mockImplementation(function (props) {
    return props.testID || 'button';
  });
  var mockListItem = jest.fn().mockImplementation(function (props) {
    return props.testID || 'list-item';
  });
  var mockFAB = jest.fn().mockImplementation(function (props) {
    return props.testID || 'fab';
  });
  var mockModal = jest.fn().mockImplementation(function (props) {
    return props.visible ? props.children : null;
  });
  return {
    Card: {
      Content: mockCardContent
    },
    TextInput: mockTextInput,
    Button: mockButton,
    List: {
      Section: jest.fn().mockImplementation(function (props) {
        return props.children;
      }),
      Item: mockListItem,
      Icon: jest.fn().mockImplementation(function () {
        return 'list-icon';
      })
    },
    Title: jest.fn().mockImplementation(function (props) {
      return props.children;
    }),
    Paragraph: jest.fn().mockImplementation(function (props) {
      return props.children;
    }),
    FAB: mockFAB,
    ActivityIndicator: jest.fn().mockImplementation(function () {
      return 'loading';
    }),
    Chip: jest.fn().mockImplementation(function (props) {
      return props.testID || 'chip';
    }),
    Text: jest.fn().mockImplementation(function (props) {
      return props.children;
    }),
    Modal: mockModal,
    useTheme: function useTheme() {
      return {
        colors: {
          primary: '#6200ee',
          background: '#f5f5f5',
          surface: '#ffffff',
          accent: '#03dac4',
          error: '#b00020',
          text: '#000000'
        }
      };
    }
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return 'Icon';
});
_getJestObj().mock("../../src/services/api/comfortWallService", function () {
  return {
    getPosts: jest.fn(),
    getBestPosts: jest.fn(),
    createPost: jest.fn(),
    sendMessage: jest.fn(),
    likePost: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _ComfortScreen = _interopRequireDefault(require("../../src/screens/ComfortScreen"));
var _comfortWallService = _interopRequireDefault(require("../../src/services/api/comfortWallService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockPosts = [{
  post_id: 1,
  title: '불안감이 심해요',
  content: '최근에 불안감이 심해져서 잠을 잘 못자고 있어요.',
  user_id: 101,
  is_anonymous: true,
  like_count: 5,
  comment_count: 2,
  created_at: '2025-04-30T10:00:00Z'
}, {
  post_id: 2,
  title: '직장에서의 스트레스',
  content: '업무량이 너무 많아 번아웃이 옵니다. 어떻게 대처해야 할까요?',
  user_id: 102,
  is_anonymous: false,
  like_count: 10,
  comment_count: 5,
  created_at: '2025-05-01T09:30:00Z'
}];
var mockBestPosts = [{
  post_id: 3,
  title: '인간관계 고민',
  content: '친구와 갈등이 생겼는데 어떻게 해결해야 할지 모르겠어요.',
  like_count: 30,
  comment_count: 15
}];
var originalConsoleError = console.error;
console.error = jest.fn();
jest.spyOn(_reactNative.Alert, 'alert').mockImplementation(function (title, message, buttons) {
  if (buttons && buttons.length > 0 && buttons[0].onPress) {
    buttons[0].onPress();
  }
  return;
});
var mockNavigation = {
  navigate: jest.fn(),
  goBack: jest.fn()
};
describe('ComfortScreen 종합 테스트', function () {
  beforeEach(function () {
    jest.clearAllMocks();
    _comfortWallService.default.getPosts.mockResolvedValue({
      data: {
        data: mockPosts
      }
    });
    _comfortWallService.default.getBestPosts.mockResolvedValue({
      data: {
        data: mockBestPosts
      }
    });
    _comfortWallService.default.createPost.mockResolvedValue({
      data: {
        data: {
          post_id: 4,
          title: '새 게시물',
          content: '새 내용'
        }
      }
    });
    _comfortWallService.default.sendMessage.mockResolvedValue({
      data: {
        message: '메시지가 성공적으로 전송되었습니다.'
      }
    });
    _comfortWallService.default.likePost.mockResolvedValue({
      data: {
        success: true
      }
    });
  });
  afterAll(function () {
    console.error = originalConsoleError;
  });
  test('컴포넌트가 로딩 상태에서 정상적으로 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockImplementation(function () {
      return new Promise(function (resolve) {
        return setTimeout(function () {
          return resolve({
            data: {
              data: mockPosts
            }
          });
        }, 100);
      });
    });
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render.getByTestId;
    expect(getByTestId('loading-indicator')).toBeTruthy();
  }));
  test('API에서 데이터를 성공적으로 로드하고 표시함', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render2.getByTestId,
      queryByTestId = _render2.queryByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
      expect(_comfortWallService.default.getBestPosts).toHaveBeenCalled();
    });
    yield (0, _reactNative2.waitFor)(function () {
      expect(queryByTestId('loading-indicator')).toBeNull();
    });
    expect(getByTestId('comfort-screen-scrollview')).toBeTruthy();
  }));
  test('API 오류 발생 시 적절한 오류 메시지 표시', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.getPosts.mockRejectedValueOnce(new Error('네트워크 오류'));
    (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
      navigation: mockNavigation
    }));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('오류', '게시물을 불러오는 중 오류가 발생했습니다.');
    });
  }));
  test('새 게시물 작성 과정이 올바르게 작동함', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render3.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    });
    _reactNative2.fireEvent.press(getByTestId('new-post-button'));
    yield (0, _reactNative2.waitFor)(function () {
      expect(getByTestId('post-title-input')).toBeTruthy();
      expect(getByTestId('post-content-input')).toBeTruthy();
    });
    _reactNative2.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative2.fireEvent.changeText(getByTestId('post-content-input'), '고민 내용입니다.');
    _reactNative2.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.createPost).toHaveBeenCalledWith({
        title: '새로운 고민',
        content: '고민 내용입니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative.Alert.alert).toHaveBeenCalledWith('성공', '게시물이 등록되었습니다.', expect.anything());
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(2);
  }));
  test('게시물 좋아요 기능이 올바르게 작동함', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getAllByTestId = _render4.getAllByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    });
    var likeButtons = getAllByTestId(/like-button-\d+/);
    _reactNative2.fireEvent.press(likeButtons[0]);
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.likePost).toHaveBeenCalledWith(expect.any(Number));
    });
    expect(_comfortWallService.default.getPosts).toHaveBeenCalledTimes(2);
  }));
  test('응원 메시지 보내기 기능이 올바르게 작동함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getAllByText = _render5.getAllByText,
      getByTestId = _render5.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    });
    var encourageButtons = getAllByText('응원하기');
    _reactNative2.fireEvent.press(encourageButtons[0]);
    yield (0, _reactNative2.waitFor)(function () {
      expect(getByTestId('comment-input')).toBeTruthy();
    });
    _reactNative2.fireEvent.changeText(getByTestId('comment-input'), '힘내세요! 응원합니다.');
    _reactNative2.fireEvent.press(getByTestId('submit-comment-button'));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.sendMessage).toHaveBeenCalledWith(expect.any(Number), {
        message: '힘내세요! 응원합니다.',
        is_anonymous: true
      });
    });
    expect(_reactNative.Alert.alert).toHaveBeenCalledWith('성공', '메시지가 전송되었습니다.', expect.anything());
  }));
  test('빈 게시물 제출 시 경고 메시지 표시', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render6.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    });
    _reactNative2.fireEvent.press(getByTestId('new-post-button'));
    _reactNative2.fireEvent.press(getByTestId('submit-post-button'));
    expect(_reactNative.Alert.alert).toHaveBeenCalledWith('알림', '제목과 내용을 모두 입력해주세요.');
    expect(_comfortWallService.default.createPost).not.toHaveBeenCalled();
  }));
  test('게시물 생성 중 API 오류 발생 시 적절한 오류 메시지 표시', (0, _asyncToGenerator2.default)(function* () {
    _comfortWallService.default.createPost.mockRejectedValueOnce({
      response: {
        data: {
          message: '서버 오류가 발생했습니다.'
        }
      }
    });
    var _render7 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_ComfortScreen.default, {
        navigation: mockNavigation
      })),
      getByTestId = _render7.getByTestId;
    yield (0, _reactNative2.waitFor)(function () {
      expect(_comfortWallService.default.getPosts).toHaveBeenCalled();
    });
    _reactNative2.fireEvent.press(getByTestId('new-post-button'));
    _reactNative2.fireEvent.changeText(getByTestId('post-title-input'), '새로운 고민');
    _reactNative2.fireEvent.changeText(getByTestId('post-content-input'), '고민 내용입니다.');
    _reactNative2.fireEvent.press(getByTestId('submit-post-button'));
    yield (0, _reactNative2.waitFor)(function () {
      expect(_reactNative.Alert.alert).toHaveBeenCalledWith('오류', '서버 오류가 발생했습니다.');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,