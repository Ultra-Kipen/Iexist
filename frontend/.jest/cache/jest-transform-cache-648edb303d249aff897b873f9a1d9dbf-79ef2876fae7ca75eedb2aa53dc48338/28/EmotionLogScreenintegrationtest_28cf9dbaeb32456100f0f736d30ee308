e3732d4d7d2c6443b0aee36f7938a440
_getJestObj().mock("../../../src/services/api/client", function () {
  return {
    get: jest.fn(),
    post: jest.fn(),
    interceptors: {
      request: {
        use: jest.fn()
      },
      response: {
        use: jest.fn()
      }
    }
  };
});
_getJestObj().mock("../../../src/services/api/emotionService", function () {
  return {
    getAllEmotions: jest.fn(),
    recordEmotions: jest.fn()
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return "MaterialCommunityIcons";
});
_getJestObj().mock('react-native-paper', function () {
  var React = require('react');
  var _require = require('react-native'),
    View = _require.View,
    RNText = _require.Text;
  var createComponent = function createComponent(name) {
    return function (_ref) {
      var children = _ref.children,
        style = _ref.style,
        testID = _ref.testID,
        onPress = _ref.onPress,
        disabled = _ref.disabled,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return (0, _jsxRuntime.jsx)(View, Object.assign({
        style: style,
        testID: testID || name,
        onPress: onPress,
        disabled: disabled
      }, props, {
        children: children
      }));
    };
  };
  return {
    Text: function Text(_ref2) {
      var children = _ref2.children,
        props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
      return (0, _jsxRuntime.jsx)(RNText, Object.assign({}, props, {
        children: children
      }));
    },
    Chip: createComponent('Chip'),
    Button: createComponent('Button'),
    TextInput: createComponent('TextInput'),
    ActivityIndicator: createComponent('ActivityIndicator')
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "testID", "onPress", "disabled"],
  _excluded2 = ["children"];
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var mockAlert = {
  alert: jest.fn()
};
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(mockAlert.alert);
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}];
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn(),
    navigate: jest.fn()
  };
  var mockRoute = {
    params: {}
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
    _emotionService.default.recordEmotions.mockResolvedValue({});
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findByText = _render.findByText;
    yield findByText('오늘의 감정');
    yield findByText('현재 어떤 감정을 느끼고 계신가요?');
  }));
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findAllByTestId = _render2.findAllByTestId;
    var chips = yield findAllByTestId('emotion-chip');
    expect(chips.length).toBe(mockEmotions.length);
  }));
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findAllByTestId = _render3.findAllByTestId,
      findByTestId = _render3.findByTestId;
    var chips = yield findAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(chips[0]);
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton.props.disabled).toBeFalsy();
  }));
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findAllByTestId = _render4.findAllByTestId,
      findByTestId = _render4.findByTestId;
    var chips = yield findAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(chips[0]);
    _reactNative.fireEvent.press(chips[1]);
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton.props.disabled).toBeFalsy();
  }));
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findByTestId = _render5.findByTestId;
    var noteInput = yield findByTestId('emotion-note-input');
    expect(noteInput).toBeTruthy();
    _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
  }));
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findAllByTestId = _render6.findAllByTestId,
      findByTestId = _render6.findByTestId;
    var chips = yield findAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(chips[0]);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(mockAlert.alert).toHaveBeenCalled();
    var alertCall = mockAlert.alert.mock.calls[0];
    if (alertCall && alertCall[2] && alertCall[2][0] && alertCall[2][0].onPress) {
      alertCall[2][0].onPress();
    }
    expect(mockNavigation.goBack).toHaveBeenCalled();
  }));
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findAllByTestId = _render7.findAllByTestId,
      findByTestId = _render7.findByTestId;
    var chips = yield findAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(chips[0]);
    var submitButton = yield findByTestId('emotion-submit-button');
    _reactNative.fireEvent.press(submitButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
    });
    expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
  }));
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
        navigation: mockNavigation,
        route: mockRoute
      })),
      findAllByTestId = _render8.findAllByTestId,
      findByTestId = _render8.findByTestId;
    var chips = yield findAllByTestId('emotion-chip');
    _reactNative.fireEvent.press(chips[0]);
    var submitButton = yield findByTestId('emotion-submit-button');
    expect(submitButton.props.disabled).toBeFalsy();
    _reactNative.fireEvent.press(chips[0]);
    yield (0, _reactNative.waitFor)(function () {
      expect(submitButton.props.disabled).toBeTruthy();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,