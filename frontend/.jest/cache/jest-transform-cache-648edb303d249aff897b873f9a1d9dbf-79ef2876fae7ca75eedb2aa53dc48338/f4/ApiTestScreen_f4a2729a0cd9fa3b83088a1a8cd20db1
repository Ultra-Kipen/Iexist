936e26931e73fba635238ae2e947d8b9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _AuthContext = require("../contexts/AuthContext");
var _client = _interopRequireDefault(require("../services/api/client"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var ApiTestScreen = function ApiTestScreen() {
  var _useAuth = (0, _AuthContext.useAuth)(),
    user = _useAuth.user,
    isAuthenticated = _useAuth.isAuthenticated;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    results = _useState2[0],
    setResults = _useState2[1];
  var addResult = function addResult(title, result) {
    setResults(function (prev) {
      return [].concat((0, _toConsumableArray2.default)(prev), [{
        title: title,
        result: result
      }]);
    });
  };
  var testApi = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* (title, apiCall) {
      try {
        var response = yield apiCall();
        addResult(title, JSON.stringify(response.data, null, 2));
      } catch (error) {
        addResult(title, `Error: ${error.message}`);
      }
    });
    return function testApi(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  var testEndpoints = [{
    title: '사용자 프로필 조회',
    call: function call() {
      return _client.default.get('/api/users/profile');
    }
  }, {
    title: '감정 목록 조회',
    call: function call() {
      return _client.default.get('/api/emotions');
    }
  }, {
    title: '내 게시물 조회',
    call: function call() {
      return _client.default.get('/api/my-day/posts/me');
    }
  }];
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.title,
      children: "API Test Screen"
    }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      children: ["\uC778\uC99D \uC0C1\uD0DC: ", isAuthenticated ? '로그인됨' : '로그아웃']
    }), user && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      children: ["\uC0AC\uC6A9\uC790: ", user.username]
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.buttonContainer,
      children: [testEndpoints.map(function (endpoint, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.Button, {
          title: endpoint.title,
          onPress: function onPress() {
            return testApi(endpoint.title, endpoint.call);
          }
        }, index);
      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
        title: "\uACB0\uACFC \uCD08\uAE30\uD654",
        onPress: function onPress() {
          return setResults([]);
        },
        color: "#888"
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
      style: styles.results,
      children: results.map(function (item, index) {
        return (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: styles.resultItem,
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.resultTitle,
            children: item.title
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.resultText,
            children: item.result
          })]
        }, index);
      })
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#F5FCFF'
  },
  title: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10
  },
  buttonContainer: {
    marginVertical: 15,
    gap: 10
  },
  results: {
    flex: 1,
    marginTop: 10
  },
  resultItem: {
    marginBottom: 10,
    padding: 10,
    backgroundColor: '#e9e9e9',
    borderRadius: 5
  },
  resultTitle: {
    fontWeight: 'bold',
    marginBottom: 5
  },
  resultText: {
    fontFamily: 'monospace'
  }
});
var _default = exports.default = ApiTestScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,