1bde99a05ead90476c57604af5c1f745
_getJestObj().mock('react-native-paper', function () {
  var RN = jest.requireActual('react-native');
  var View = RN.View,
    Text = RN.Text,
    TouchableOpacity = RN.TouchableOpacity,
    RNTextInput = RN.TextInput;
  return {
    Text: Text,
    ActivityIndicator: function ActivityIndicator() {
      return (0, _jsxRuntime.jsx)(View, {});
    },
    Chip: function Chip(_ref) {
      var children = _ref.children,
        onPress = _ref.onPress,
        testID = _ref.testID,
        selected = _ref.selected,
        icon = _ref.icon;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: onPress,
        testID: testID,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: children
        })
      });
    },
    Button: function Button(_ref2) {
      var children = _ref2.children,
        onPress = _ref2.onPress,
        testID = _ref2.testID,
        disabled = _ref2.disabled;
      return (0, _jsxRuntime.jsx)(TouchableOpacity, {
        onPress: disabled ? undefined : onPress,
        testID: testID,
        disabled: disabled,
        children: (0, _jsxRuntime.jsx)(Text, {
          children: children
        })
      });
    },
    TextInput: RNTextInput
  };
});
_getJestObj().mock('react-native-vector-icons/MaterialCommunityIcons', function () {
  return {
    __esModule: true,
    default: function _default() {
      return "Icon";
    }
  };
});
_getJestObj().mock("../../../src/services/api/emotionService");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _EmotionLogScreen = _interopRequireDefault(require("../../../src/screens/EmotionLogScreen"));
var _emotionService = _interopRequireDefault(require("../../../src/services/api/emotionService"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var RN = jest.requireActual('react-native');
var mockAlert = {
  alert: jest.fn()
};
jest.spyOn(require('react-native').Alert, 'alert').mockImplementation(mockAlert.alert);
var mockEmotions = [{
  emotion_id: 1,
  name: '행복',
  icon: 'emoticon-happy-outline',
  color: '#FFD700'
}, {
  emotion_id: 2,
  name: '감사',
  icon: 'hand-heart',
  color: '#FF69B4'
}];
describe('EmotionLogScreen', function () {
  var mockNavigation = {
    goBack: jest.fn()
  };
  beforeEach(function () {
    jest.clearAllMocks();
    _emotionService.default.getAllEmotions.mockResolvedValue({
      data: {
        status: 'success',
        data: mockEmotions
      }
    });
    _emotionService.default.recordEmotions.mockResolvedValue({});
  });
  it('렌더링이 올바르게 됨', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        findByText = _render.findByText;
      yield findByText('오늘의 감정');
      yield findByText('현재 어떤 감정을 느끼고 계신가요?');
    }));
  }));
  it('모든 감정 칩이 올바르게 렌더링됨', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getAllByTestId = _render2.getAllByTestId;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      var chips = getAllByTestId('emotion-chip');
      expect(chips.length).toBe(mockEmotions.length);
    }));
  }));
  it('감정 칩을 클릭하면 선택 상태가 변경됨', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getAllByTestId = _render3.getAllByTestId,
        getByTestId = _render3.getByTestId;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.disabled).toBeFalsy();
    }));
  }));
  it('여러 감정을 선택할 수 있음', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getAllByTestId = _render4.getAllByTestId,
        getByTestId = _render4.getByTestId;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      _reactNative.fireEvent.press(chips[1]);
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.disabled).toBeFalsy();
    }));
  }));
  it('메모 입력이 가능함', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getByTestId = _render5.getByTestId;
      var noteInput = getByTestId('emotion-note-input');
      expect(noteInput).toBeTruthy();
      _reactNative.fireEvent.changeText(noteInput, '오늘은 정말 좋은 하루였습니다.');
    }));
  }));
  it('감정 기록 제출 성공 시 확인 메시지와 화면 이동이 동작함', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render6 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getAllByTestId = _render6.getAllByTestId,
        getByTestId = _render6.getByTestId;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(_emotionService.default.recordEmotions).toHaveBeenCalled();
      expect(mockAlert.alert).toHaveBeenCalled();
      expect(mockNavigation.goBack).toHaveBeenCalled();
    }));
  }));
  it('감정 기록 제출 실패 시 에러 메시지가 표시됨', (0, _asyncToGenerator2.default)(function* () {
    _emotionService.default.recordEmotions.mockRejectedValueOnce({
      response: {
        data: {
          message: '감정 기록 실패'
        }
      }
    });
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render7 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getAllByTestId = _render7.getAllByTestId,
        getByTestId = _render7.getByTestId;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      var submitButton = getByTestId('emotion-submit-button');
      _reactNative.fireEvent.press(submitButton);
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      expect(mockAlert.alert).toHaveBeenCalledWith('오류', '감정 기록 실패');
    }));
  }));
  it('감정을 선택했다가 다시 클릭하면 선택이 해제됨', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.act)((0, _asyncToGenerator2.default)(function* () {
      var _render8 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_EmotionLogScreen.default, {
          navigation: mockNavigation
        })),
        getAllByTestId = _render8.getAllByTestId,
        getByTestId = _render8.getByTestId;
      yield new Promise(function (resolve) {
        return setTimeout(resolve, 100);
      });
      var chips = getAllByTestId('emotion-chip');
      _reactNative.fireEvent.press(chips[0]);
      var submitButton = getByTestId('emotion-submit-button');
      expect(submitButton.props.disabled).toBeFalsy();
      _reactNative.fireEvent.press(chips[0]);
      expect(submitButton.props.disabled).toBeTruthy();
    }));
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,