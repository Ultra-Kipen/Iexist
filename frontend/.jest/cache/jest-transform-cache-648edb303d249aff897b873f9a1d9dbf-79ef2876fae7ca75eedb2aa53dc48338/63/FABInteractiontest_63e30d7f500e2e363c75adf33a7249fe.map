{"version":3,"names":["_getJestObj","mock","__esModule","default","jest","fn","useTheme","mockReturnValue","colors","primary","surface","background","useAuth","user","username","isAuthenticated","useEmotion","emotions","emotion_id","name","selectedEmotions","selectEmotion","_interopRequireDefault","require","_react","_reactNative","_reactNative2","_jsxRuntime","_require","MockHomeScreen","handleFABPress","console","log","jsx","View","testID","children","TouchableOpacity","onPress","Text","describe","beforeEach","clearAllMocks","HomeScreenModule","mockImplementation","it","HomeScreen","_render","render","getByTestId","fabButton","expect","toBeTruthy","consoleSpy","spyOn","_render2","fireEvent","press","toHaveBeenCalledWith","mockRestore"],"sources":["FABInteraction.test.tsx"],"sourcesContent":["// FABInteraction.test.tsx (수정)\r\nimport React from 'react';\r\nimport { render, fireEvent } from '@testing-library/react-native';\r\nimport { View, TouchableOpacity, Text } from 'react-native';\r\nimport * as AuthContextModule from '../../src/contexts/AuthContext';\r\nimport * as EmotionContextModule from '../../src/contexts/EmotionContext';\r\n\r\n// 실제 HomeScreen 대신 사용할 간단한 모의 컴포넌트\r\nfunction MockHomeScreen() {\r\n  const handleFABPress = () => {\r\n    console.log('FAB Pressed');\r\n  };\r\n  \r\n  return (\r\n    <View testID=\"home-screen-container\">\r\n      <TouchableOpacity \r\n        testID=\"fab-button\"\r\n        onPress={handleFABPress}\r\n      >\r\n        <Text>+</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\n// 원본 HomeScreen 모듈 모킹\r\njest.mock('../../src/screens/HomeScreen', () => ({\r\n  __esModule: true,\r\n  default: jest.fn()\r\n}));\r\n\r\n// React Native Paper 모킹\r\njest.mock('react-native-paper', () => ({\r\n  useTheme: jest.fn().mockReturnValue({\r\n    colors: {\r\n      primary: '#000',\r\n      surface: '#fff',\r\n      background: '#fff'\r\n    }\r\n  })\r\n}));\r\n\r\n// AuthContext 모킹\r\njest.mock('../../src/contexts/AuthContext', () => ({\r\n  useAuth: jest.fn().mockReturnValue({\r\n    user: { username: 'testuser' },\r\n    isAuthenticated: true\r\n  })\r\n}));\r\n\r\n// EmotionContext 모킹 (필요시)\r\njest.mock('../../src/contexts/EmotionContext', () => ({\r\n  useEmotion: jest.fn().mockReturnValue({\r\n    emotions: [{ emotion_id: 1, name: '행복' }],\r\n    selectedEmotions: [],\r\n    selectEmotion: jest.fn()\r\n  })\r\n}));\r\n\r\ndescribe('HomeScreen FAB Interaction', () => {\r\n  // 테스트 전에 HomeScreen 모킹을 설정\r\n  beforeEach(() => {\r\n    jest.clearAllMocks();\r\n    \r\n    // 실제 HomeScreen 대신 MockHomeScreen 사용\r\n    const HomeScreenModule = require('../../src/screens/HomeScreen');\r\n    HomeScreenModule.default.mockImplementation(MockHomeScreen);\r\n  });\r\n  \r\n  it('renders FAB button', () => {\r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByTestId } = render(<HomeScreen />);\r\n    \r\n    const fabButton = getByTestId('fab-button');\r\n    expect(fabButton).toBeTruthy();\r\n  });\r\n\r\n  it('logs console message on FAB press', () => {\r\n    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\r\n    \r\n    const HomeScreen = require('../../src/screens/HomeScreen').default;\r\n    const { getByTestId } = render(<HomeScreen />);\r\n    const fabButton = getByTestId('fab-button');\r\n    \r\n    fireEvent.press(fabButton);\r\n    \r\n    expect(consoleSpy).toHaveBeenCalledWith('FAB Pressed');\r\n    \r\n    consoleSpy.mockRestore();\r\n  });\r\n});"],"mappings":"AA0BAA,WAAA,GAAKC,IAAI,iCAAiC;EAAA,OAAO;IAC/CC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC;EACnB,CAAC;AAAA,CAAC,CAAC;AAGHL,WAAA,GAAKC,IAAI,CAAC,oBAAoB,EAAE;EAAA,OAAO;IACrCK,QAAQ,EAAEF,IAAI,CAACC,EAAE,CAAC,CAAC,CAACE,eAAe,CAAC;MAClCC,MAAM,EAAE;QACNC,OAAO,EAAE,MAAM;QACfC,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE;MACd;IACF,CAAC;EACH,CAAC;AAAA,CAAC,CAAC;AAGHX,WAAA,GAAKC,IAAI,mCAAmC;EAAA,OAAO;IACjDW,OAAO,EAAER,IAAI,CAACC,EAAE,CAAC,CAAC,CAACE,eAAe,CAAC;MACjCM,IAAI,EAAE;QAAEC,QAAQ,EAAE;MAAW,CAAC;MAC9BC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;AAAA,CAAC,CAAC;AAGHf,WAAA,GAAKC,IAAI,sCAAsC;EAAA,OAAO;IACpDe,UAAU,EAAEZ,IAAI,CAACC,EAAE,CAAC,CAAC,CAACE,eAAe,CAAC;MACpCU,QAAQ,EAAE,CAAC;QAAEC,UAAU,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MACzCC,gBAAgB,EAAE,EAAE;MACpBC,aAAa,EAAEjB,IAAI,CAACC,EAAE,CAAC;IACzB,CAAC;EACH,CAAC;AAAA,CAAC,CAAC;AAAC,IAAAiB,sBAAA,GAAAC,OAAA;AAxDJ,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,aAAA,GAAAH,OAAA;AAA4D,IAAAI,WAAA,GAAAJ,OAAA;AAAA,SAAAvB,YAAA;EAAA,IAAA4B,QAAA,GAAAL,OAAA;IAAAnB,IAAA,GAAAwB,QAAA,CAAAxB,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAK5D,SAASyB,cAAcA,CAAA,EAAG;EACxB,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3BC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC5B,CAAC;EAED,OACE,IAAAL,WAAA,CAAAM,GAAA,EAACP,aAAA,CAAAQ,IAAI;IAACC,MAAM,EAAC,uBAAuB;IAAAC,QAAA,EAClC,IAAAT,WAAA,CAAAM,GAAA,EAACP,aAAA,CAAAW,gBAAgB;MACfF,MAAM,EAAC,YAAY;MACnBG,OAAO,EAAER,cAAe;MAAAM,QAAA,EAExB,IAAAT,WAAA,CAAAM,GAAA,EAACP,aAAA,CAAAa,IAAI;QAAAH,QAAA,EAAC;MAAC,CAAM;IAAC,CACE;EAAC,CACf,CAAC;AAEX;AAoCAI,QAAQ,CAAC,4BAA4B,EAAE,YAAM;EAE3CC,UAAU,CAAC,YAAM;IACfrC,IAAI,CAACsC,aAAa,CAAC,CAAC;IAGpB,IAAMC,gBAAgB,GAAGpB,OAAO,+BAA+B,CAAC;IAChEoB,gBAAgB,CAACxC,OAAO,CAACyC,kBAAkB,CAACf,cAAc,CAAC;EAC7D,CAAC,CAAC;EAEFgB,EAAE,CAAC,oBAAoB,EAAE,YAAM;IAC7B,IAAMC,UAAU,GAAGvB,OAAO,+BAA+B,CAAC,CAACpB,OAAO;IAClE,IAAA4C,OAAA,GAAwB,IAAAC,mBAAM,EAAC,IAAArB,WAAA,CAAAM,GAAA,EAACa,UAAU,IAAE,CAAC,CAAC;MAAtCG,WAAW,GAAAF,OAAA,CAAXE,WAAW;IAEnB,IAAMC,SAAS,GAAGD,WAAW,CAAC,YAAY,CAAC;IAC3CE,MAAM,CAACD,SAAS,CAAC,CAACE,UAAU,CAAC,CAAC;EAChC,CAAC,CAAC;EAEFP,EAAE,CAAC,mCAAmC,EAAE,YAAM;IAC5C,IAAMQ,UAAU,GAAGjD,IAAI,CAACkD,KAAK,CAACvB,OAAO,EAAE,KAAK,CAAC,CAACa,kBAAkB,CAAC,CAAC;IAElE,IAAME,UAAU,GAAGvB,OAAO,+BAA+B,CAAC,CAACpB,OAAO;IAClE,IAAAoD,QAAA,GAAwB,IAAAP,mBAAM,EAAC,IAAArB,WAAA,CAAAM,GAAA,EAACa,UAAU,IAAE,CAAC,CAAC;MAAtCG,WAAW,GAAAM,QAAA,CAAXN,WAAW;IACnB,IAAMC,SAAS,GAAGD,WAAW,CAAC,YAAY,CAAC;IAE3CO,sBAAS,CAACC,KAAK,CAACP,SAAS,CAAC;IAE1BC,MAAM,CAACE,UAAU,CAAC,CAACK,oBAAoB,CAAC,aAAa,CAAC;IAEtDL,UAAU,CAACM,WAAW,CAAC,CAAC;EAC1B,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}